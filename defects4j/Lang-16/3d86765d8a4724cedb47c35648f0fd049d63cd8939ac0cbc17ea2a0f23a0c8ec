{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        return null; // Invalid number format\n    }\n    \n    // Handle hexadecimal\n    if (str.startsWith(\"0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0x\") || str.startsWith(\"-0X\")) {\n        try {\n            return Integer.decode(str);\n        } catch (NumberFormatException ex) {\n            return new BigInteger(str.startsWith(\"-\") ? str.substring(1) : str, 16).negate();\n        }\n    }\n\n    char lastChar = str.charAt(str.length() - 1);\n    String numeric;\n    boolean hasTypeQualifier = Character.isLetter(lastChar);\n\n    if (hasTypeQualifier) {\n        numeric = str.substring(0, str.length() - 1);\n    } else {\n        numeric = str;\n    }\n\n    String mant;\n    String dec;\n    String exp;\n    int decPos = numeric.indexOf('.');\n    int expPos = Math.max(numeric.indexOf('e'), numeric.indexOf('E'));\n    \n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = numeric.substring(decPos + 1, expPos);\n        } else {\n            dec = numeric.substring(decPos + 1);\n        }\n        mant = numeric.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = numeric.substring(0, expPos);\n        } else {\n            mant = numeric;\n        }\n        dec = null;\n    }\n    if (expPos > -1 && expPos < numeric.length() - 1) {\n        exp = numeric.substring(expPos + 1);\n    } else {\n        exp = null;\n    }\n\n    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n    switch (Character.toLowerCase(lastChar)) {\n        case 'l':\n            if (dec == null && exp == null && isDigits(numeric)) {\n                try {\n                    return createLong(numeric);\n                } catch (NumberFormatException nfe) {\n                    return createBigInteger(numeric);\n                }\n            }\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        case 'f':\n            try {\n                Float f = NumberUtils.createFloat(numeric);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // Ignore, try next fallback\n            }\n        case 'd':\n            try {\n                Double d = NumberUtils.createDouble(numeric);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // Ignore, try next fallback\n            }\n            try {\n                return createBigDecimal(numeric);\n            } catch (NumberFormatException nfe) {\n                // Throw since no valid number found\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        default:\n            // No type qualifier -- determine type dynamically\n            if (dec == null && exp == null) {\n                try {\n                    return createInteger(numeric);\n                } catch (NumberFormatException nfe) {\n                    // Ignore, try next fallback\n                }\n                try {\n                    return createLong(numeric);\n                } catch (NumberFormatException nfe) {\n                    return createBigInteger(numeric);\n                }\n            } else {\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // Ignore, try next fallback\n                }\n                try {\n                    Double d = createDouble(str);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // Ignore, try next fallback\n                }\n                return createBigDecimal(str);\n            }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}