{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n\n    if (str.toLowerCase().startsWith(\"0x\")) {\n        return createInteger(str.substring(2), 16);\n    }\n\n    char lastChar = str.charAt(str.length() - 1);\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        String number = str.substring(0, str.length() - 1);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                try {\n                    return createLong(number);\n                } catch (NumberFormatException nfe) {\n                    return createBigInteger(number);\n                }\n            case 'f':\n            case 'F':\n                return createFloat(number);\n            case 'd':\n            case 'D':\n                return createDouble(number);\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        if (str.indexOf('.') > -1) {\n            return createDouble(str);\n        } else {\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe2) {\n                    return createBigInteger(str);\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}