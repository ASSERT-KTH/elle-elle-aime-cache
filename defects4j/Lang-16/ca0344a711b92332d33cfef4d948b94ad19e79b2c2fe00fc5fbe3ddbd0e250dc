{
    "generation": "    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0x\") || str.startsWith(\"-0X\")) {\n            return createInteger(stripHexPrefix(str));\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String numeric = str;\n\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            numeric = str.substring(0, str.length() - 1);\n            boolean allZeros = isAllZeros(numeric);\n            switch (Character.toLowerCase(lastChar)) {\n                case 'l':\n                    if (isParsableAsLong(numeric)) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            return createBigInteger(numeric);\n                        }\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f':\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    // fall through\n                case 'd':\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                default:\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            int decPos = str.indexOf('.');\n            int expPos = -1;\n            for (int i = 0; i < str.length(); i++) {\n                if (str.charAt(i) == 'e' || str.charAt(i) == 'E') {\n                    expPos = i;\n                    break;\n                }\n            }\n            if (decPos == -1 && expPos == -1) {\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) {\n                    try {\n                        return createLong(str);\n                    } catch (NumberFormatException nfe2) {\n                        return createBigInteger(str);\n                    }\n                }\n            } else {\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite())) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    try {\n                        Double d = createDouble(str);\n                        if (!(d.isInfinite())) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe2) {\n                        return createBigDecimal(str);\n                    }\n                }\n                return createBigDecimal(str);\n            }\n        }\n    }\n\n    // Helper method to strip prefixes\n    private static String stripHexPrefix(String str) {\n        if (str.startsWith(\"0x\") || str.startsWith(\"0X\")) {\n            return str.substring(2);\n        } else if (str.startsWith(\"-0x\") || str.startsWith(\"-0X\")) {\n            return \"-\" + str.substring(3);\n        }\n        return str; // Should never come here\n    }\n\n    // Additional utility methods assumed to be present in the codebase\n    private static boolean isAllZeros(String str) {\n        return str.matches(\"^[0.]+$\");\n    }\n\n    private static boolean isParsableAsLong(String str) {\n        try {\n            Long.parseLong(str);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    // Example utility methods for number creation: Create these or use existing methods\n    private static Number createInteger(String str) throws NumberFormatException {\n        return Integer.valueOf(str);\n    }\n\n    private static Number createLong(String str) throws NumberFormatException {\n        return Long.valueOf(str);\n    }\n\n    private static Number createBigInteger(String str) throws NumberFormatException {\n        return new BigInteger(str);\n    }\n\n    private static Float createFloat(String str) throws NumberFormatException {\n        return Float.valueOf(str);\n    }\n\n    private static Double createDouble(String str) throws NumberFormatException {\n        return Double.valueOf(str);\n    }\n\n    private static BigDecimal createBigDecimal(String str) throws NumberFormatException {\n        return new BigDecimal(str);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}