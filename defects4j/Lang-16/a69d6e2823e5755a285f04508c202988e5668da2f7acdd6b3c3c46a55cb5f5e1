{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        // it accepts this as a legal value, but it does not appear\n        // to be in specification of class. OS X Java parses it to\n        // a wrong value.\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    // Need to deal with case when have both leading sign and 0x suffix\n    String strForCheck = str.replaceAll(\"^\\\\+\", \"\");\n    if (strForCheck.startsWith(\"0x\") || strForCheck.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n    if (strForCheck.endsWith(\"x\") || strForCheck.endsWith(\"X\")) {\n        // Handles 7fffffff int value as String \"2147483648x\"\n        return Long.parseLong(strForCheck.replaceAll(\"[xX]\", \"\").replaceAll(\"\\\\s+\", \"\")); \n    }\n    if (strForCheck.indexOf('e')!= -1 || strForCheck.indexOf('E')!= -1) {\n        return createBigDecimal(str); // case with exponential will be here\n    } else {\n        try {\n            char lastChar = strForCheck.charAt(strForCheck.length() - 1);\n            String numericValue = strForCheck.indexOf('.') == -1 // decimal case\n                    || Character.isDigit(lastChar) // normal int Long case\n                    ||!(lastChar == 'F' || lastChar == 'D' || lastChar == 'f'\n                    || lastChar == 'd')? strForCheck : strForCheck.substring(0, strForCheck.length()-1);\n\n            // Normal case here, integer etc\n            return createDouble(numericValue);\n        } catch (NumberFormatException nonDecimalValue) {\n            // Ignore, as expected\n        }\n    }\n    // if it still haven't passed above conditions probably hex.\n    try {\n        // Check for Long and Integer then hex check, then the rest as stated\n        return Long.parseLong(str.replaceFirst(\"^0x\", \"\")); // 0xcafebabeL should worked\n    } catch(NumberFormatException numberFormatException) { // no valid integer here eg. case of Hex not Long \n        try{\n            // try Integer Value\n            return Integer.parseInt(str.replaceFirst(\"^0x\", \"\")); // Handle Integer literal 0 as \"0\"\n        }\n        catch (NumberFormatException illegalArgumentException) { // number not in int or any valid literal \n            final String origStr = str;\n            // Hex notation not integer/long only, not int etc need to add radix \n            try{\n                // Handles Hex as int \n                return Long.parseLong(str,16);\n            } catch(IllegalArgumentException lastResort){\n                 // Now throw\n            throw new NumberFormatException(\"Unparsable number as Integer nor hex : [ \" + origStr \n                    + \" ] or [ 0x [\" + origStr + \"]\" + \"] not valid values.\");\n            }\n        } \n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}