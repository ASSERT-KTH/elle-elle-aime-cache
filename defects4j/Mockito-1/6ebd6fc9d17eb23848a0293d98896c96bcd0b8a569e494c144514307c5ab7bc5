{
    "generation": "    public void captureArgumentsFrom(Invocation invocation) {\n        int length = invocation.getRawArguments().length;\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (position < length) {\n                if (m instanceof CapturesArguments) {\n                    if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                        Object array = invocation.getRawArguments()[position];\n                        for (int i = 0; i < Array.getLength(array); i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                        }\n                        //since we've captured all varargs already, it does not make sense to process other matchers.\n                        return;\n                    } else {\n                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                    }\n                }\n            } else if (invocation.getMethod().isVarArgs() && position == length - 1) {\n                if(m instanceof CapturesArguments) {\n                    // Capture from the vararg part\n                    Object array = invocation.getRawArguments()[length - 1];\n                    for (int i = 0; i < Array.getLength(array); i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                    }\n                    return;\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}