{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        int index = 0;\n        Matcher m;\n        // Handling non-vararg matchers first\n        while (index < matchers.size() && (indexOfVararg >= index || !(matchers.get(index) instanceof CapturesArguments))) {\n            m = matchers.get(index);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(index, Object.class));\n            }\n            index++;\n        }\n        // Handling vararg matchers\n        if (index < matchers.size()) {\n            m = matchers.get(index);\n            if (m instanceof CapturesArguments) {\n                Object array = invocation.getRawArguments()[indexOfVararg];\n                for (int i = 0; i < Array.getLength(array); i++) {\n                    ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}