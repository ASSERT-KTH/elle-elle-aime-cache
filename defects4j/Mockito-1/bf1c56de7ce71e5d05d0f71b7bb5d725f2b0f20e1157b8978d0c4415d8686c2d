{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                // Handle varargs capture\n                if (position == indexOfVararg && isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object array = invocation.getRawArguments()[position];\n                    for (int i = 0; i < Array.getLength(array); i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                    }\n                    // Since we've captured all varargs already, it does not make sense to process other matchers.\n                    return;\n                } else {\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n\nprivate boolean isVariableArgument(Invocation invocation, int position) {\n    return position == invocation.getRawArguments().length - 1 && invocation.getMethod().isVarArgs();\n}\n\nprivate boolean isVarargMatcher(Matcher m) {\n    // This method should determine if the matcher is a vararg matcher\n    // For simplicity, let's assume it checks if the matcher is an instance of a specific vararg matcher class\n    // You may need to adjust this logic based on your actual matcher implementation\n    return m instanceof VarargMatcher;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}