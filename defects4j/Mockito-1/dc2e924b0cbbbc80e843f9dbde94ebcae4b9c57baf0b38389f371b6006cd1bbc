{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        Object varargValue = invocation.getRawArguments()[indexOfVararg];\n        \n        if (varargValue!= null && varargValue.getClass().isArray()) {\n            int varargPosition = matchers.size() - 1;\n            for (int i = 0; i < Array.getLength(varargValue); i++) {\n                Matcher m = new VarargMatcherWrapper(matchers.get(varargPosition), i);\n                m.captureFrom(Array.get(varargValue, i));\n            }\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n\n// Assuming VarargMatcherWrapper is defined elsewhere, \n// if not, you would need to define it to wrap the original matcher \n// and delegate the captureFrom call to it with the correct array element.",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}