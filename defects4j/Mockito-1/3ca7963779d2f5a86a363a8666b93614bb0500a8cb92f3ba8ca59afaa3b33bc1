{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int varargIndex = invocation.getRawArguments().length - 1;\n        Object[] rawArguments = invocation.getRawArguments();\n\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (position == varargIndex && isVarargMatcher(m)) {\n                    Object varargArray = rawArguments[position];\n                    for (int i = 0; i < Array.getLength(varargArray); i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));\n                    }\n                } else if (position < rawArguments.length) {\n                    ((CapturesArguments) m).captureFrom(rawArguments[position]);\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size() && position < invocation.getRawArguments().length; position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n\nprivate boolean isVarargMatcher(Matcher m) {\n    return m.getClass().getName().endsWith(\"AnyVararg\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}