{
    "generation": "/**\n * Captures arguments from the given invocation based on the matcher chain.\n * \n * @param invocation the invocation from which to capture arguments\n */\npublic void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        Object varargArray = invocation.getRawArguments()[indexOfVararg];\n        int varargMatchersStart = matchers.size() - Array.getLength(varargArray);\n        \n        // Capture vararg array elements\n        for (int i = 0; i < Array.getLength(varargArray); i++) {\n            Matcher m = matchers.get(varargMatchersStart + i);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));\n            }\n        }\n        \n        // Capture preceding non-vararg matchers\n        for (int position = 0; position < varargMatchersStart; position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n        \n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}