{
    "generation": "    public void captureArgumentsFrom(Invocation invocation) {\n        if (invocation.getMethod().isVarArgs()) {\n            int indexOfVararg = invocation.getRawArguments().length - 1;\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    if (position == indexOfVararg && invocation.getRawArguments()[indexOfVararg].getClass().isArray()) {\n                        // Handle varargs by iterating over the elements of the array\n                        Object varargArray = invocation.getRawArguments()[indexOfVararg];\n                        for (int i = 0; i < Array.getLength(varargArray); i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));\n                        }\n                    } else if (position < invocation.getRawArguments().length) {\n                        // Capture from regular argument positions\n                        ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                    }\n                }\n            }\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}