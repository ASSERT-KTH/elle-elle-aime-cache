{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        Object array = invocation.getRawArguments()[indexOfVararg];\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (position == indexOfVararg && isVarargMatcher(m)) {\n                    for (int i = 0; i < Array.getLength(array); i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                    }\n                    // Since we've captured all varargs already, it doesn't make sense to process other matchers.\n                    return;\n                } else if (position < indexOfVararg || (position == indexOfVararg && Array.getLength(array) == 0)) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n\n// Helper methods\nprivate boolean isVarargMatcher(Matcher matcher) {\n    return matcher instanceof VarargMatcher;\n}\n\nprivate boolean isVariableArgument(Invocation invocation, int position) {\n    return invocation.getMethod().isVarArgs() && position == invocation.getRawArguments().length - 1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}