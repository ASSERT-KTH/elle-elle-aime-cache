{
    "generation": "if (invocation.getMethod().isVarArgs()) {\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    // Instead of throwing an exception, handle varargs here\n    Matcher varargMatcher = matchers.get(indexOfVararg);\n    if (varargMatcher instanceof CapturesArguments && isVarargMatcher(varargMatcher)) {\n        Object varargArray = invocation.getRawArguments()[indexOfVararg];\n        for (int i = 0; i < Array.getLength(varargArray); i++) {\n            Object arg = Array.get(varargArray, i);\n            ((CapturesArguments) varargMatcher).captureFrom(arg);\n        }\n        // Since we've captured all varargs, we might not need to process other matchers\n        return;\n    } else {\n        // Handle non-vararg matchers or throw an exception if unmatched\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments && position < invocation.getRawArguments().length) {\n                ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n            }\n        }\n    }\n} else {\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n        if (m instanceof CapturesArguments) {\n            ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}