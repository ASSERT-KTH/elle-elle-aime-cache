{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        Object varargArray = invocation.getRawArguments()[indexOfVararg];\n        int varargLength = Array.getLength(varargArray);\n        \n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (position < indexOfVararg || !isVarargMatcher(m)) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                } else {\n                    // Capture each element of the varargs array\n                    for (int i = 0; i < varargLength; i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));\n                    }\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n\nprivate boolean isVarargMatcher(Matcher m) {\n    // Implement logic to determine if the matcher is a vararg matcher\n    // This is a placeholder and should be replaced with actual logic\n    return m instanceof LocalizedMatcher && ((LocalizedMatcher) m).getMatcher() == AnyVararg.ANY_VARARG;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}