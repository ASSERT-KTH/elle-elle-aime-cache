{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        Object varargArray = invocation.getRawArguments()[indexOfVararg];\n        if (varargArray != null) {\n            int varargLength = Array.getLength(varargArray);\n            for (int i = 0; i < matchers.size(); i++) {\n                Matcher m = matchers.get(i);\n                if (m instanceof CapturesArguments) {\n                    if (i < indexOfVararg || i == indexOfVararg && varargLength == 0) {\n                        ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(i, Object.class));\n                    } else {\n                        for (int j = 0; j < varargLength; j++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(varargArray, j));\n                        }\n                    }\n                }\n            }\n        } else {\n            for (int i = 0; i < matchers.size(); i++) {\n                Matcher m = matchers.get(i);\n                if (m instanceof CapturesArguments) {\n                    if (i < indexOfVararg) {\n                        ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(i, Object.class));\n                    }\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}