{
    "generation": "    public void captureArgumentsFrom(Invocation invocation) {\n        if (invocation.getMethod().isVarArgs()) {\n            int indexOfVararg = invocation.getRawArguments().length - 1;\n            // Process varargs\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    if (position == indexOfVararg && isVarargMatcher(m)) {\n                        Object array = invocation.getRawArguments()[position];\n                        for (int i = 0; i < Array.getLength(array); i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                        }\n                        // Since we've captured all varargs already, it does not make sense to process other matchers.\n                        return;\n                    } else if (invocation.getRawArguments().length > position) {\n                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                    }\n                }\n            }\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }\n    }\n\n    private boolean isVarargMatcher(Matcher m) {\n        // Implement the logic to check if the matcher is a vararg matcher\n        // For example, you might check if the matcher type is specific to varargs\n        return m instanceof AnyVararg; // Replace with actual condition\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}