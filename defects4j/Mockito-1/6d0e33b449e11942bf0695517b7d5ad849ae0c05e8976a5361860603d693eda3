{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        Object[] rawArgs = invocation.getRawArguments();\n        if (rawArgs.length > 0 && rawArgs[rawArgs.length - 1] != null) {\n            int indexOfVararg = rawArgs.length - 1;\n            Object array = invocation.getRawArguments()[indexOfVararg];\n\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    if (isVarargMatcher(m)) {\n                        for (int i = 0; i < Array.getLength(array); i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                        }\n                    } else {\n                        if (position < rawArgs.length - 1) {\n                            ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                        }\n                    }\n                }\n            }\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    if (position < rawArgs.length) {\n                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                    }\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}