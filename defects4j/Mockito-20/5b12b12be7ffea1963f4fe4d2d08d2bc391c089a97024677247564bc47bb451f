{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // Check if the class to be mocked has a no-arg constructor\n        Constructor<?>[] constructors = mockedProxyType.getConstructors();\n        if (constructors.length == 0 ||!hasNoArgConstructor(constructors)) {\n            // If not, try to find a constructor with the correct parameter types\n            Constructor<?> constructor = findConstructorWithCorrectParameters(mockedProxyType, settings);\n            if (constructor!= null) {\n                // Instantiate the class using the found constructor\n                mockInstance = (T) constructor.newInstance(constructorArg-settings.getOuterInstance());\n            } else {\n                throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getName() + \"'\");\n            }\n        } else {\n            // If the class has a no-arg constructor, instantiate it directly\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getName() + \"'\", e);\n    }\n}\n\n// Helper method to check if a constructor has no arguments\nprivate boolean hasNoArgConstructor(Constructor<?>[] constructors) {\n    for (Constructor<?> constructor : constructors) {\n        if (constructor.getParameterCount() == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// Helper method to find a constructor with the correct parameter types\nprivate Constructor<?> findConstructorWithCorrectParameters(Class<?> clazz, MockCreationSettings<?> settings) {\n    Constructor<?>[] constructors = clazz.getConstructors();\n    for (Constructor<?> constructor : constructors) {\n        if (constructor.getParameterCount() > 0) {\n            Class<?>[] parameterTypes = constructor.getParameterTypes();\n            if (parameterTypes.length == 1 && parameterTypes[0].isInstance(settings.getOuterInstance())) {\n                return constructor;\n            }\n        }\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}