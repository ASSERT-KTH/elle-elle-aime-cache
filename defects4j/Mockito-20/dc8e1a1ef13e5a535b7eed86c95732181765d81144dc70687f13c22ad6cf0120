{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    Class<? extends T> mockedProxyType;\n    if (settings.isTypeToMockAbstractClass() || settings.isTypeToMockInterface()) {\n        mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces());\n    } else if (settings.isTypeToMockInnerClass()) {\n        mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces(), settings.getOuterClassInstance());\n    } else {\n        mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces());\n    }\n\n    T mockInstance = null;\n    try {\n        if (settings.getConstructorArgs() != null && settings.getConstructorArgs().length > 0) {\n            mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs());\n        } else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        \n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        String msg = \"Unable to create mock instance of type '\";\n        if (settings.isTypeToMockAbstractClass()) {\n            msg += mockedProxyType.getSuperclass().getSimpleName() + \"' - ensure a default constructor exists.\";\n        } else if (settings.isTypeToMockInnerClass()) {\n            msg += mockedProxyType.getSimpleName() + \"' - ensure the outer instance and a 0-arg constructor are correctly set.\";\n        } else {\n            msg += mockedProxyType.getSimpleName() + \"' - ensure a matching constructor exists.\";\n        }\n        throw new MockitoException(msg, e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}