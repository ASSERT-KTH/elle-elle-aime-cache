{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance;\n    try {\n        Constructor<? extends T> constructorToUse = getConstructor(mockedProxyType);\n        if (constructorToUse == null) {\n            throw new InstantiationException(String.format(\n                    \"%s has no 0-arg constructor. Make sure that your target type is correctly set up\",\n                    settings.getTypeToMock()));\n        }\n        Object outerInstance = settings.getOuterInstance();\n        mockInstance = classInstantiator.instantiate(constructorToUse, outerInstance);\n\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (Exception e) {\n        throw new MockitoException(String.format(\"Unable to create mock instance of type '%s'\",\n                settings.getTypeToMock()), e);\n    }\n}\n\nprivate <T> Constructor<? extends T> getConstructor(Class<? extends T> mockedProxyType) {\n    if (mockedProxyType.isMemberClass()) {\n        return getNonPrivateNoArgsConstructorIncludingDeclared(mockedProxyType);\n    } else {\n        return getParameterTypesFrom(mockedProxyType.getConstructors(), EMPTY_CLASS_ARRAY);\n    }\n}\n\nprivate <T> Constructor<? extends T> getNonPrivateNoArgsConstructorIncludingDeclared(Class<? extends T> clazz) {\n    for (Constructor<? extends T> constructor : clazz.getDeclaredConstructors()) {\n        if (hasOnlyZeroArgs(constructor.getParameterTypes())) {\n            makeConstructorAccessible(constructor);\n            return constructor;\n        }\n    }\n    if (clazz.getEnclosingClass()!= null) {\n        return null; // We can only pass arguments to the constructors for the top-level types.\n    }\n    return null;\n}\n\nprivate boolean hasOnlyZeroArgs(Class<?>[] args) {\n    return args.length == 0;\n}\n\nprivate <T> Constructor<? extends T> getParameterTypesFrom(Constructor<? extends T>[] constructors, Class<?>... paramTypes) {\n    for (Constructor<? extends T> constructor : constructors) {\n        if (arraysAreEqual(constructor.getParameterTypes(), paramTypes)) {\n            return constructor;\n        }\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}