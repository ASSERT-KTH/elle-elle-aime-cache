{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // Fix: Handle constructor invocation for mocked types\n        if (settings.useConstructor()) {\n            mockInstance = invokeConstructor(settings, mockedProxyType);\n        } else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        // Fix: Provide more informative error message for constructor-related issues\n        if (e.getCause() instanceof UnsupportedOperationException) {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"': \" + e.getCause().getMessage(), e);\n        } else {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'\", e);\n        }\n    }\n}\n\n// New method to handle constructor invocation for mocked types\nprivate <T> T invokeConstructor(MockCreationSettings<T> settings, Class<? extends T> mockedProxyType) throws InstantiationException {\n    try {\n        Constructor<? extends T> constructor = getSuitableConstructor(settings, mockedProxyType);\n        return constructor.newInstance(getConstructorArgs(settings, constructor));\n    } catch (Exception e) {\n        throw new org.mockito.internal.creation.instance.InstantiationException(e);\n    }\n}\n\n// Helper method to find a suitable constructor for the mocked type\nprivate <T> Constructor<? extends T> getSuitableConstructor(MockCreationSettings<T> settings, Class<? extends T> mockedProxyType) {\n    if (settings.useConstructor() && settings.getOuterClassInstance()!= null && mockedProxyType.isMemberClass()) {\n        // Handle inner classes with outer instance\n        try {\n            return mockedProxyType.getConstructor(settings.getOuterClassInstance().getClass());\n        } catch (NoSuchMethodException e) {\n            throw new UnsupportedOperationException(\"Please ensure that the outer instance has correct type and that the target class has a constructor matching the outer instance type.\");\n        }\n    } else {\n        // Default to no-arg constructor\n        try {\n            return mockedProxyType.getConstructor();\n        } catch (NoSuchMethodException e) {\n            throw new UnsupportedOperationException(\"0-arg constructor not found. Please ensure that the target class has a 0-arg constructor.\");\n        }\n    }\n}\n\n// Helper method to provide arguments for the constructor invocation\nprivate Object[] getConstructorArgs(MockCreationSettings<?> settings, Constructor<?> constructor) {\n    if (constructor.getParameterCount() == 1 && settings.getOuterClassInstance()!= null) {\n        // Provide outer instance for inner classes\n        return new Object[]{settings.getOuterClassInstance()};\n    } else {\n        // No args for 0-arg constructors or non-inner classes\n        return new Object[0];\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}