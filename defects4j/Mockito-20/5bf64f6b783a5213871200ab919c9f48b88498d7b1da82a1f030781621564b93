{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // Use constructor if available and specified in settings\n        if (settings.useConstructor()) {\n            try {\n                // Try to find a constructor with parameters matching the outer instance (for inner classes)\n                Constructor<? extends T> constructor = getMatchingConstructor(mockedProxyType, settings.getOuterInstance());\n                mockInstance = constructor.newInstance(settings.getOuterInstance());\n            } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\n                // Fall back to no-arg constructor or class instantiator if constructor with matching parameters is not found\n                mockInstance = classInstantiator.instantiate(mockedProxyType);\n            }\n        } else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (Exception e) {\n        if (settings.useConstructor()) {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"' using constructor\", e);\n        } else {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n        }\n    }\n}\n\n// Helper method to find a constructor with parameters matching the outer instance (for inner classes)\nprivate <T> Constructor<? extends T> getMatchingConstructor(Class<? extends T> clazz, Object outerInstance) throws NoSuchMethodException {\n    for (Constructor<? extends T> constructor : clazz.getConstructors()) {\n        if (constructor.getParameterCount() == 1 && constructor.getParameterTypes()[0].isInstance(outerInstance)) {\n            return constructor;\n        }\n    }\n    throw new NoSuchMethodException(\"No constructor with matching parameters found for \" + clazz.getName());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}