{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // Check if the type to mock is an inner class\n        if (mockedProxyType.getEnclosingClass()!= null) {\n            // Get the outer instance if required\n            Object outerInstance = getOuterInstance(settings, mockedProxyType);\n            mockInstance = classInstantiator.instantiate(mockedProxyType, outerInstance);\n        } else if (settings.useConstructor()) {\n            // Try to instantiate using a no-arg constructor if useConstructor is enabled\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        } else {\n            // Fallback to the old behavior\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        if (mockedProxyType.getEnclosingClass()!= null) {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'. \" +\n                    \"Please ensure that the outer instance has correct type and that the target class has a constructor with the outer instance as a parameter.\",\n                    e);\n        } else if (settings.useConstructor()) {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'. \" +\n                    \"Please ensure the type has a 0-arg constructor.\",\n                    e);\n        } else {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n        }\n    }\n}\n\n// Helper method to get the outer instance if the type to mock is an inner class\nprivate Object getOuterInstance(MockCreationSettings<?> settings, Class<?> mockedProxyType) {\n    if (settings.getOuterInstance()!= null) {\n        if (mockedProxyType.getEnclosingClass().isInstance(settings.getOuterInstance())) {\n            return settings.getOuterInstance();\n        } else {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'. \" +\n                    \"Please ensure that the outer instance has correct type.\");\n        }\n    } else {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'. \" +\n                \"Please provide the outer instance using the 'outerInstance' method in MockSettings.\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}