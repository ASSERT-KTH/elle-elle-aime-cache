{
    "generation": "/**\n * Fixes for:\n * - Support for creating mocks with non-default constructors\n * - Handling inner classes correctly\n * - Providing informative error messages\n */\npublic <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    Class<? extends T> mockedProxyType;\n    if (settings.useConstructor()) {\n        // Try to generate a proxy type using the specified constructor\n        mockedProxyType = constructorBasedCachingMockBytecodeGenerator.get(\n                settings.getTypeToMock(),\n                settings.getExtraInterfaces(),\n                settings.getConstructorArgs()\n        );\n    } else {\n        // Fallback to the original behavior if constructor usage is not specified\n        mockedProxyType = cachingMockBytecodeGenerator.get(\n                settings.getTypeToMock(),\n                settings.getExtraInterfaces()\n        );\n    }\n\n    T mockInstance = null;\n    try {\n        if (settings.useConstructor()) {\n            // Instantiate the mock using the specified constructor args and outer instance (for inner classes)\n            mockInstance = constructorBasedClassInstantiator.instantiate(\n                    mockedProxyType,\n                    settings.getConstructorArgs(),\n                    settings.getOuterInstance()\n            );\n        } else {\n            // Fallback to the original instantiation behavior\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        String errorMessage;\n        if (settings.useConstructor()) {\n            // Provide a more informative error message when constructor usage is enabled\n            errorMessage = \"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"' using constructor\";\n            if (e.getCause() instanceof java.lang.NoSuchMethodException) {\n                errorMessage += \". Please ensure the target class has a matching constructor.\";\n            } else if (mockedProxyType.isMemberClass() && settings.getOuterInstance() == null) {\n                errorMessage += \". For inner classes, please specify the outer instance using 'outerInstance()'.\";\n            } else if (mockedProxyType.isMemberClass() &&!mockedProxyType.getDeclaringClass().isInstance(settings.getOuterInstance())) {\n                errorMessage += \". Please ensure that the outer instance has the correct type.\";\n            }\n        } else {\n            // Fallback to the original error message if constructor usage is not specified\n            errorMessage = \"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\";\n        }\n        throw new MockitoException(errorMessage, e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}