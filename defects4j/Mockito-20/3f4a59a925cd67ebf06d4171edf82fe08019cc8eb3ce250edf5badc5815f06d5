{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n\n    MockMethodInterceptor.MockAccess mockAccess;\n    try {\n        T mockInstance;\n        if (settings.getOuterInstance() != null || settings.getTypeToMock().getEnclosingClass() != null) {\n            // Handle inner classes or classes with outer instance\n            Constructor<?> constructor = settings.getTypeToMock().getDeclaredConstructor(settings.getTypeToMock().getEnclosingClass());\n            constructor.setAccessible(true);\n            mockInstance = (T) constructor.newInstance(settings.getOuterInstance());\n        } else if (settings.getConstructorArgs() != null) {\n            // Handle classes with constructor arguments\n            Class<?>[] paramTypes = new Class<?>[settings.getConstructorArgs().length];\n            for (int i = 0; i < paramTypes.length; i++) {\n                paramTypes[i] = settings.getConstructorArgs()[i].getClass();\n            }\n            Constructor<?> constructor = settings.getTypeToMock().getDeclaredConstructor(paramTypes);\n            constructor.setAccessible(true);\n            mockInstance = (T) constructor.newInstance(settings.getConstructorArgs());\n        } else if (Modifier.isAbstract(settings.getTypeToMock().getModifiers())) {\n            // Handle abstract classes\n            mockInstance = (T) Proxy.newProxyInstance(settings.getTypeToMock().getClassLoader(), new Class[]{settings.getTypeToMock()}, new InvocationHandler() {\n                @Override\n                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                    return null;\n                }\n            });\n        } else {\n            // Handle default case\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n    } catch (ClassCastException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getName() + \"'. Please ensure that the class is mockable.\", e);\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n    }\n\n    mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n    return ensureMockIsAssignableToMockedType(settings, mockInstance);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}