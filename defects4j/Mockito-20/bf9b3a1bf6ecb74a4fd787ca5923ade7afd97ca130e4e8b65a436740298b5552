{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        if (settings.useConstructor()) {\n            // Try to instantiate using a constructor\n            mockInstance = instantiateUsingConstructor(mockedProxyType, settings);\n        } else {\n            // Fallback to default instantiation\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n    }\n}\n\n// Helper method to instantiate using a constructor\nprivate <T> T instantiateUsingConstructor(Class<T> clazz, MockCreationSettings<T> settings) throws InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {\n    Constructor<?> constructor = getCompatibleConstructor(clazz, settings);\n    if (constructor == null) {\n        throw new InstantiationException(\"No compatible constructor found for \" + clazz.getName());\n    }\n    return clazz.cast(constructor.newInstance(getConstructorArgs(constructor, settings)));\n}\n\n// Helper method to find a compatible constructor\nprivate Constructor<?> getCompatibleConstructor(Class<?> clazz, MockCreationSettings<?> settings) {\n    // Inner class handling\n    if (clazz.isMemberClass() &&!clazz.isStatic()) {\n        return getInnerClassConstructor(clazz, settings);\n    }\n    // Regular class handling\n    return getRegularClassConstructor(clazz, settings);\n}\n\n// Helper method to find a constructor for an inner class\nprivate Constructor<?> getInnerClassConstructor(Class<?> clazz, MockCreationSettings<?> settings) {\n    OuterClassInstance outerInstance = settings.getOuterClassInstance();\n    if (outerInstance == null) {\n        throw new InstantiationException(\"Missing outer class instance for inner class \" + clazz.getName());\n    }\n    try {\n        return clazz.getConstructor(outerInstance.getClazz());\n    } catch (NoSuchMethodException e) {\n        throw new InstantiationException(\"No constructor found in inner class \" + clazz.getName() + \" that accepts \" + outerInstance.getClazz().getName(), e);\n    }\n}\n\n// Helper method to find a constructor for a regular class\nprivate Constructor<?> getRegularClassConstructor(Class<?> clazz, MockCreationSettings<?> settings) {\n    try {\n        return clazz.getConstructor();\n    } catch (NoSuchMethodException e) {\n        throw new InstantiationException(\"No no-arg constructor found in \" + clazz.getName(), e);\n    }\n}\n\n// Helper method to get constructor arguments\nprivate Object[] getConstructorArgs(Constructor<?> constructor, MockCreationSettings<?> settings) {\n    Class<?>[] paramTypes = constructor.getParameterTypes();\n    if (paramTypes.length == 0) {\n        return null;\n    }\n    if (paramTypes.length == 1 && settings.getOuterClassInstance()!= null && paramTypes[0].isAssignableFrom(settings.getOuterClassInstance().getClazz())) {\n        return new Object[]{settings.getOuterClassInstance().getInstance()};\n    }\n    throw new InstantiationException(\"Unsupported constructor arguments for \" + constructor.getDeclaringClass().getName());\n}\n\n// Helper class to hold outer class instance info\nstatic class OuterClassInstance {\n    private Class<?> clazz;\n    private Object instance;\n\n    public OuterClassInstance(Class<?> clazz, Object instance) {\n        this.clazz = clazz;\n        this.instance = instance;\n    }\n\n    public Class<?> getClazz() {\n        return clazz;\n    }\n\n    public Object getInstance() {\n        return instance;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}