{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    \n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    \n    T mockInstance = null;\n    try {\n        // Check if the type to mock is an inner class and requires an outer instance\n        if (settings.getTypeToMock().getEnclosingClass()!= null) {\n            // Get the constructor with the outer instance parameter\n            Constructor<? extends T> constructor = getConstructorWithOuterInstance(mockedProxyType);\n            if (constructor == null) {\n                throw new InstantiationException(\"No suitable constructor found for inner class \" + mockedProxyType.getName());\n            }\n            // Instantiate the mock with the outer instance\n            mockInstance = constructor.newInstance(getOuterInstance(settings.getTypeToMock()));\n        } else if (settings.useConstructor()) {\n            // Try to find a constructor for non-inner classes when useConstructor() is enabled\n            Constructor<? extends T> constructor = getNoArgConstructor(mockedProxyType);\n            if (constructor == null) {\n                throw new InstantiationException(\"No 0-arg constructor found for type \" + mockedProxyType.getName());\n            }\n            // Instantiate the mock using the no-arg constructor\n            mockInstance = constructor.newInstance();\n        } else {\n            // Fallback to the original instantiation method\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        \n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n    } catch (Exception e) {\n        throw new MockitoException(\"Error creating mock instance of type '\" + mockedProxyType.getSimpleName() + \"'\", e);\n    }\n}\n\n// Helper methods for the changes above\n\nprivate Constructor<? extends T> getConstructorWithOuterInstance(Class<? extends T> clazz) {\n    for (Constructor<?> constructor : clazz.getConstructors()) {\n        if (constructor.getParameterCount() == 1 && constructor.getParameterTypes()[0].equals(clazz.getEnclosingClass())) {\n            return (Constructor<? extends T>) constructor;\n        }\n    }\n    return null;\n}\n\nprivate Object getOuterInstance(Class<?> innerClass) {\n    // Assuming the test class is the outer instance for the inner class\n    return getClass().getEnclosingClass()!= null? getClass().getEnclosingInstance() : this;\n}\n\nprivate Constructor<? extends T> getNoArgConstructor(Class<? extends T> clazz) {\n    try {\n        return clazz.getConstructor();\n    } catch (NoSuchMethodException e) {\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}