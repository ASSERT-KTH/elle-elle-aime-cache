{
    "generation": "    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n        }\n        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n                settings.getTypeToMock(),\n                settings.getExtraInterfaces()\n        );\n        T mockInstance;\n        try {\n            mockInstance = classInstantiatornewInstance(mockedProxyType);\n\n            MockMethodInterceptor.MockAccess mockAccess = mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        } catch (ClassCastException cce) {\n            throw new MockitoException(\n                    join(\n                            \"ClassCastException occurred while creating the mockito mock\",\n                            \"class to mock\", describeClass(mockedProxyType),\n                            \"created class\", describeClass(settings.getTypeToMock())\n                    ),\n                    cce);\n        } catch (java.lang.InstantiationException |\n                 IllegalAccessException |\n                 IllegalArgumentException |\n                 InvocationTargetException cce) {\n            boolean constructorFound = hasOneVisibleConstructorWithParameterssettings.getTypeToMock(), mockInstance1)\n            boolean outerParameters = settings.getOuterInstance()\n            String errorMessageTextual = settings.getTypeToMock().getSimpleName()\n               -arg constructor\", () {settings.getOuterCstructorWithArguments} }\";\n            String errorMessage;\n\n            if (!constructor_found &amp;!wasPrivate) {\n               errorMessageouterclass, not static} {\n                    throw new InvocationTargetException(\n                        \"Has @RunWith(Powermock.class) + annotation + or 2\", ccfu);\n               }\n                       errorMessagerverText + \"static, mock static, class has methods (use constructor mockit);\n            throw new exceptionInstantiationExc\nmockinstaception(errorMessage textualerrorMessae), nessecc;\n        ;\n                return mockInstance,\n                        ensureMockIses\n                        assigned to) ;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}