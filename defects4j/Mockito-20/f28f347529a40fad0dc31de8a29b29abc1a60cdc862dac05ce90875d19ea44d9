{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // Use the appropriate instantiator based on settings\n        if (settings.useConstructor()) {\n            // Use constructor provided in settings\n            Constructor<?> constructor = settings.getConstructor();\n            if (constructor == null) {\n                // Fallback to default constructor if none specified\n                constructor = settings.getTypeToMock().getDeclaredConstructor();\n            }\n            constructor.setAccessible(true);\n            if (settings.getOuterInstance() != null) {\n                // For inner classes, set the outer instance\n                mockInstance = (T) constructor.newInstance(settings.getOuterInstance());\n            } else {\n                mockInstance = (T) constructor.newInstance();\n            }\n        } else {\n            // Use default instantiator\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        \n        // Set the mock interceptor\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n        \n        // Ensure the mock is assignable to the mocked type\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getName() + \"'\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}