{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        if (settings.useConstructor()) {\n            Object[] constructorArgs;\n            if (settings.getOuterClassInstance()!= null) {\n                // Inner class\n                constructorArgs = new Object[]{settings.getOuterClassInstance()};\n            } else {\n                // Look for a no-arg constructor or a constructor with mockable parameters\n                constructorArgs = findConstructorArgs(mockedProxyType, settings);\n            }\n            mockInstance = classInstantiator.instantiate(mockedProxyType, constructorArgs);\n        } else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        if (e.getCause() instanceof InvocationTargetException) {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n        } else if (e.getCause() instanceof NoSuchMethodException) {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'\", \n                                        \"Please ensure that the type has a 0-arg constructor or provide a custom instantiator.\",\n                                        e);\n        } else {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'\", e);\n        }\n    }\n}\n\n// Helper method to find constructor arguments\nprivate Object[] findConstructorArgs(Class<?> clazz, MockCreationSettings<?> settings) throws InstantiationException {\n    Constructor<?>[] constructors = clazz.getConstructors();\n    for (Constructor<?> constructor : constructors) {\n        if (constructor.getParameterCount() == 0) {\n            // No-arg constructor, return empty array\n            return new Object[0];\n        } else if (constructor.getParameterCount() == 1 && constructor.getParameterTypes()[0].isAssignableFrom(settings.getTypeToMock().getEnclosingClass())) {\n            // Single-arg constructor for inner class, return outer instance\n            return new Object[]{settings.getOuterClassInstance()};\n        } else {\n            // Constructor with multiple parameters, try to find mockable parameters\n            Object[] args = new Object[constructor.getParameterCount()];\n            for (int i = 0; i < constructor.getParameterCount(); i++) {\n                Class<?> paramType = constructor.getParameterTypes()[i];\n                if (settings.getMockableTypes().contains(paramType)) {\n                    args[i] = mock(paramType, withSettings().defaultAnswer(CALLS_REAL_METHODS));\n                } else {\n                    throw new MockitoException(\"Unable to create mock instance of type '\" + clazz.getSimpleName() + \"'\", \n                                                \"Please ensure that the target class has a 0-arg constructor or provide a custom instantiator.\",\n                                                new NoSuchMethodException());\n                }\n            }\n            return args;\n        }\n    }\n    throw new MockitoException(\"Unable to create mock instance of type '\" + clazz.getSimpleName() + \"'\", \n                                \"Please ensure that the target class has a 0-arg constructor or provide a custom instantiator.\",\n                                new NoSuchMethodException());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}