{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        mockInstance = classInstantiator.instantiate(mockedProxyType);\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        // Ensure the mock instance is properly initialized and returns the expected results\n        if (settings.isUseConstructor()) {\n            if (settings.getOuterInstance() != null) {\n                // For inner classes, set the outer instance\n                try {\n                    Field outerInstanceField = mockedProxyType.getDeclaredField(\"this$0\");\n                    outerInstanceField.setAccessible(true);\n                    outerInstanceField.set(mockInstance, settings.getOuterInstance());\n                } catch (NoSuchFieldException | IllegalAccessException e) {\n                    throw new MockitoException(\"Unable to set outer instance for inner class mock\", e);\n                }\n            }\n            // Call the constructor if required\n            if (settings.getDefaultAnswer() == CALLS_REAL_METHODS) {\n                try {\n                    mockedProxyType.getDeclaredConstructor().newInstance();\n                } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n                    throw new MockitoException(\"Unable to call constructor for mock\", e);\n                }\n            }\n        }\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}