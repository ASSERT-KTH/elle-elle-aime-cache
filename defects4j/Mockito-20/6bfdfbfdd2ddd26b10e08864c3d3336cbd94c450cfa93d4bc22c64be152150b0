{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // Use the constructor if specified in the settings\n        if (settings.getConstructorArgs() != null) {\n            mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs());\n        } else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        \n        // Handle outer instance for inner classes\n        if (settings.getOuterClassInstance() != null) {\n            Field outerField = mockedProxyType.getDeclaredField(\"this$0\");\n            outerField.setAccessible(true);\n            outerField.set(mockInstance, settings.getOuterClassInstance());\n        }\n\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        // Call any initialization methods or set default values\n        if (settings.getDefaultAnswer() == CALLS_REAL_METHODS) {\n            for (Method method : mockedProxyType.getDeclaredMethods()) {\n                if (method.getName().startsWith(\"initialize\") && method.getParameterCount() == 0) {\n                    method.setAccessible(true);\n                    method.invoke(mockInstance);\n                }\n            }\n        }\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (Exception e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}