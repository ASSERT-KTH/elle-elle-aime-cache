{
    "generation": "    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n        }\n        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n                settings.getTypeToMock(),\n                settings.getExtraInterfaces()\n        );\n        \n        T mockInstance = null;\n        try {\n            Constructor<?>[] constructors = mockedProxyType.getDeclaredConstructors();\n            Constructor<?> constructorToUse = null;\n            for (Constructor<?> constructor : constructors) {\n                if (constructor.getParameterTypes().length == 0) {\n                    constructorToUse = constructor;\n                    break;\n                }\n            }\n            if (constructorToUse != null) {\n                constructorToUse.setAccessible(true);\n                mockInstance = (T) constructorToUse.newInstance();\n            } else {\n                // If no default constructor, try instantiating with the classInstantiator\n                mockInstance = classInstantiator.instantiate(mockedProxyType);\n            }\n            \n            if (mockInstance instanceof MockMethodInterceptor.MockAccess) {\n                MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n                mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n            }\n\n            // Special handling for inner classes\n            if (settings.getTypeToMock().isMemberClass()) {\n                Class<?> outerClass = settings.getTypeToMock().getEnclosingClass();\n                if (outerClass != null && settings.getOuterInstance() != null) {\n                    Field outerThis = mockedProxyType.getDeclaredField(\"this$0\");\n                    outerThis.setAccessible(true);\n                    outerThis.set(mockInstance, settings.getOuterInstance());\n                }\n            }\n\n            // Handle abstract classes and spying\n            if (settings.getTypeToMock().isInterface() || Modifier.isAbstract(settings.getTypeToMock().getModifiers())) {\n                if (settings.isSpy()) {\n                    // Spy on an instance provided by the user or created from a constructor\n                    T realInstance = settings.getSpiedInstance();\n                    if (realInstance == null && constructorToUse != null) {\n                        realInstance = (T) constructorToUse.newInstance();\n                    }\n                    if (realInstance != null) {\n                        mockInstance = realInstance;\n                        if (mockInstance instanceof MockMethodInterceptor.MockAccess) {\n                            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n                            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n                        }\n                    }\n                }\n            }\n\n            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n        } catch (ClassCastException cce) {\n            throw new MockitoException(join(\n                    \"ClassCastException occurred while creating the mockito mock :\",\n                    \"  class to mock : \" + describeClass(mockedProxyType),\n                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n                    \"  proxy instance class : \" + describeClass(mockInstance),\n                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                    \"\",\n                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                    \"\"\n            ), cce);\n        } catch (Exception e) {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\", e);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}