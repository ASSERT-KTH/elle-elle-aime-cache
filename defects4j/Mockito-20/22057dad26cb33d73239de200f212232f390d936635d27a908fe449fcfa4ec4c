{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n\n    try {\n        T mockInstance = classInstantiator.instantiate(mockedProxyType);\n\n        // Handle inner classes\n        if (settings.getTypeToMock().isMemberClass() && !Modifier.isStatic(settings.getTypeToMock().getModifiers())) {\n            Field outerThis = mockedProxyType.getDeclaredField(\"this$0\");\n            outerThis.setAccessible(true);\n            outerThis.set(mockInstance, settings.getOuterInstance().orElse(null));\n        }\n\n        // Handle abstract classes and interfaces\n        if (settings.getTypeToMock().isInterface() || Modifier.isAbstract(settings.getTypeToMock().getModifiers())) {\n            Method[] methods = settings.getTypeToMock().getMethods();\n            for (Method method : methods) {\n                if (Modifier.isAbstract(method.getModifiers())) {\n                    MethodHandles.Lookup lookup = MethodHandles.lookup();\n                    MethodType methodType = MethodType.methodType(method.getReturnType(), method.getParameterTypes());\n                    MethodHandle fallback = MethodHandles.throwException(method.getReturnType(), AbstractMethodError.class);\n                    MethodHandle target = lookup.findVirtual(MockMethodInterceptor.class, \"handle\", methodType).bindTo(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n                    MethodHandle guarded = MethodHandles.guardWithTest(\n                        MethodHandles.dropArguments(MethodHandles.constant(boolean.class, true), 0, method.getParameterTypes()),\n                        target,\n                        fallback\n                    );\n                    lookup.findConstructor(mockedProxyType, MethodType.methodType(void.class)).invoke(mockInstance);\n                    MethodHandles.lookup().findSpecial(mockedProxyType, method.getName(), methodType, mockedProxyType).bindTo(mockInstance).invokeWithArguments(guarded);\n                }\n            }\n        }\n\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException | NoSuchFieldException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}