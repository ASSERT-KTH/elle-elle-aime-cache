{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    \n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n        settings.getTypeToMock(),\n        settings.getExtraInterfaces()\n    );\n\n    T mockInstance = null;\n    try {\n        mockInstance = classInstantiator.instantiate(mockedProxyType);\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        // Ensure the mock instance is correctly initialized with any constructor arguments    \n        if (settings.getOuterClassInstance() != null) {\n            Field outerThis = getOuterThisField(mockedProxyType);\n            outerThis.setAccessible(true);\n            outerThis.set(mockInstance, settings.getOuterClassInstance());\n        }\n\n        // Call the constructor if necessary\n        Constructor<? extends T> constructor = findMatchingConstructor(mockedProxyType, settings.getConstructorArgs());\n        if (constructor != null) {\n            constructor.setAccessible(true);\n            constructor.newInstance(settings.getConstructorArgs());\n        }\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n            \"ClassCastException occurred while creating the mockito mock :\",\n            \"  class to mock : \" + describeClass(mockedProxyType),\n            \"  created class : \" + describeClass(settings.getTypeToMock()),\n            \"  proxy instance class : \" + describeClass(mockInstance),\n            \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n            \"\",\n            \"You might experience classloading issues, please ask the mockito mailing-list.\",\n            \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException | NoSuchFieldException | IllegalAccessException | NoSuchMethodException | InvocationTargetException | InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"': \" + e.getMessage(), e);\n    }\n}\n\n// Helper methods:\n\nprivate Field getOuterThisField(Class<?> clazz) throws NoSuchFieldException {\n    for (Field field : clazz.getDeclaredFields()) {\n        if (field.getName().startsWith(\"this$\")) {\n            return field;\n        }\n    }\n    throw new NoSuchFieldException(\"No outer 'this' field found\");\n}\n\nprivate Constructor<?> findMatchingConstructor(Class<?> clazz, Object[] args) {\n    for (Constructor<?> constructor : clazz.getDeclaredConstructors()) {\n        if (args == null && constructor.getParameterCount() == 0) {\n            return constructor;\n        }\n        if (args != null && constructor.getParameterCount() == args.length) {\n            boolean match = true;\n            for (int i = 0; i < args.length; i++) {\n                if (args[i] != null && !constructor.getParameterTypes()[i].isAssignableFrom(args[i].getClass())) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                return constructor;\n            }\n        }\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}