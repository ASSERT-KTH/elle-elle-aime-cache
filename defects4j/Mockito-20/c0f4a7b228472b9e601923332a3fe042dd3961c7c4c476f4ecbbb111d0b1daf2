{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    \n    // Obtain the mocked type and extra interfaces\n    Class<?> typeToMock = settings.getTypeToMock();\n    List<Class<?>> extraInterfaces = settings.getExtraInterfaces();\n    \n    // Generate the mocked proxy type using Byte Buddy\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(typeToMock, extraInterfaces);\n    \n    T mockInstance;\n    try {\n        // Instantiate the mock instance, considering constructors and outer instances for inner classes\n        if (settings.hasConstructor() || typeToMock.isInterface()) {\n            // If using constructor or mocking an interface, use the specified constructor arguments\n            Constructor<?> constructor = typeToMock.getDeclaredConstructor(settings.getConstructorArgumentTypes());\n            constructor.setAccessible(true);\n            Object[] args = settings.getConstructorArguments();\n            mockInstance = mockedProxyType.cast(constructor.newInstance(args));\n        } else {\n            // Otherwise, use the default instantiation mechanism\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        \n        // Set the mock interceptor for method interception\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n        \n        // Ensure the mock is assignable to the mocked type\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (InstantiationException | IllegalAccessException | IllegalArgumentException\n             | InvocationTargetException | NoSuchMethodException | SecurityException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + typeToMock.getName() + \"'\", e);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(typeToMock),\n                \"  created class : \" + describeClass(mockedProxyType),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}