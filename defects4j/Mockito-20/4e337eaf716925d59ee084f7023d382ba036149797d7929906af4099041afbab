{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n\n    T mockInstance;\n    try {\n        if (settings.useConstructor()) {\n            ConstructorLookup constructorLookup = new ConstructorLookup(mockedProxyType, settings.getOuterInstance());\n            ConstructorInvocation constructorInvocation = constructorLookup.getConstructorInvocation();\n            mockInstance = constructorInvocation.invoke();\n        } else if (mockedProxyType.isAssignableFrom(OverrideMockingDefaultsSubclassMockMaker.class)\n                || InliningFailSafeSubclassMockMaker.class.isAssignableFrom(mockedProxyType)\n                || MockitoNamingPolicy.getDefault().mockTypeName().equals(mockedProxyType.getSimpleName())) {\n            mockInstance = InstantiatingVisitor.instantiateClass(mockedProxyType);\n        } else {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'.\" +\n                    \" Please ensure that the target class is available in the classpath and has a 0-arg constructor.\");\n        }\n\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(/*...error message...*/, cce);\n    } catch (Exception e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}