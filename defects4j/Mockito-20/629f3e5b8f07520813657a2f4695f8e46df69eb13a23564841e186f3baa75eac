{
    "generation": "public <T> T createMock(Class<T> clazz, MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    try {\n        Constructor<T> constructor = null;\n        Object outerInstance = null;\n\n        if (settings.getTypeToMock().isMemberClass() &&\n                (Modifiers.STATIC ^ settings.getTypeToMock().getModifiers()) == 0) {\n            outerInstance = settings.getOuterInstance();\n            constructor = clazz.getDeclaredConstructor(clazz.getEnclosingClass());\n        } else {\n            constructor = clazz.getDeclaredConstructor();\n        }\n\n        constructor.setAccessible(true);\n        T mockInstance = outerInstance == null ? constructor.newInstance() : constructor.newInstance(outerInstance);\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\"\n                + clazz.getSimpleName() + \"'\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}