{
    "generation": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    int type = n.getType();\n    Node parent = n.getParent();\n    if (parent.isVar()) {\n      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar!= null) { // Added null check for aliasVar\n          aliases.put(name, aliasVar);\n\n          String qualifiedName =\n              aliasVar.getInitialValue().getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        }\n      } \n    } else if (parent.isScript() && n.isVar() &&!n.hasChildren() || \n               n.getFirstChild().isNumber() || n.getFirstChild().isString() ||\n               (n.hasChildren() && n.getFirstChild().isQualifiedName() && \n               !scope.getVar(n.getString()).isFromExternalSource())) {\n      // Report error for non-alias locals\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n    }\n    // Parameters of the scope function and bleeding functions are handled elsewhere\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}