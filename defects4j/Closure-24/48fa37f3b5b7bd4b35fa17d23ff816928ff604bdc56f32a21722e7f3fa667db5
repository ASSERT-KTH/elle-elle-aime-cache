{
    "generation": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n.getParent();\n        if (parent != null && parent.isVar()) {\n          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n            String name = n.getString();\n            Var aliasVar = scope.getVar(name);\n            if (aliasVar != null && aliasVar.getInitialValue() != null) {\n              String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n              if (qualifiedName != null) {\n                aliases.put(name, aliasVar);\n                transformation.addAlias(name, qualifiedName);\n              } else {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n              }\n            } else {\n              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n          } else {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}