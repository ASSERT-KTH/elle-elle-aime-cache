{
    "generation": "protected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (Precision.equals(f0, 0.0, defaultEpsilon)) {\n        return x0;\n    }\n    if (Precision.equals(f1, 0.0, defaultEpsilon)) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Keep track of inverted intervals, meaning that the left bound is\n    // larger than the right bound.\n    boolean inverted = false;\n\n    // Keep track of evaluations.\n    int evaluations = 0;\n    int maxEvaluations = getMaxEvaluations();\n\n    // Keep finding better approximations.\n    while (evaluations < maxEvaluations) {\n        // Calculate the next approximation.\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        evaluations++;\n\n        // If the new approximation is the exact root, return it.\n        if (Precision.equals(fx, 0.0, defaultEpsilon)) {\n            return x;\n        }\n\n        // Update the bounds with the new approximation.\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    if (Precision.equals(x, x1)) {\n                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                        f0 = computeObjectiveValue(x0);\n                        evaluations++;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        x1 = x;\n        f1 = fx;\n\n        // Check for convergence.\n        if (Precision.equals(f1, 0.0, ftol) ||\n                FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            return x1;\n        }\n    }\n\n    throw new TooManyEvaluationsException(maxEvaluations);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}