{
    "generation": "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    verifyBracketing(x0, x1);\n\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    boolean inverted = false;\n\n    while (true) {\n        double fx;\n        if (method == Method.REGULA_FALSI || f0 == f1) {\n            // Calculate the next approximation using secant method for Regula Falsi.\n            fx = computeObjectiveValue(x1);\n            double x = x1 - ((fx * (x1 - x0)) / (fx - f0));\n\n            // Update the bounds with the new approximation.\n            x0 = x1;\n            f0 = fx;\n            x1 = x;\n        } else {\n            // Calculate the next approximation using Illinois or Pegasus methods.\n            double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            fx = computeObjectiveValue(x);\n\n            // Update the bounds with the new approximation.\n            x1 = x;\n        }\n\n        if (fx == 0.0) {\n            return x1;\n        }\n\n        if (f1 * fx < 0) {\n            inverted = !inverted;\n        } else if (method == Method.PEGASUS) {\n            f0 *= f1 / (f1 + fx);\n        } else if (method == Method.ILLINOIS) {\n            f0 *= 0.5;\n        } else if (method == Method.REGULA_FALSI && x1 == x0) {\n            x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n            f0 = computeObjectiveValue(x0);\n        }\n\n        f1 = fx;\n\n        if (FastMath.abs(f1) <= ftol) {\n            // ... return based on allowed side ...\n        }\n\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            // ... return based on allowed side ...\n        }\n\n        // Check for too many evaluations.\n        if (getEvaluations() > getMaxEvaluations()) {\n            throw new TooManyEvaluationsException(getMaxEvaluations());\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}