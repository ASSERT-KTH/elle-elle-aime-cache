{
    "generation": "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    verifyBracketing(x0, x1);\n\n    double ftol = getFunctionValueAccuracy();\n    double atol = getAbsoluteAccuracy();\n    double rtol = getRelativeAccuracy();\n\n    boolean inverted = false;\n\n    while (true) {\n        double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        double fx = computeObjectiveValue(x);\n\n        if (fx == 0.0) {\n            return x;\n        }\n\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n                if (x != x1) {\n                    double fVal = computeObjectiveValue(x0);\n                    if (fVal == 0) {\n                        return x0;\n                    }\n                    f0 = fVal;\n                }\n                break;\n            default:\n                throw new MathInternalError();\n            }\n        }\n\n        x1 = x;\n        f1 = fx;\n\n        if (FastMath.abs(f1) <= ftol) {\n            if (allowed.isBracketed(inverted)) {\n                return x1;\n            }\n        }\n\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            if (allowed.isAllowed(x0, inverted)) {\n                return x0;\n            } else if (allowed.isAllowed(x1, inverted)) {\n                return x1;\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}