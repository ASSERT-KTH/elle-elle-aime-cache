{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void computeGeometricalProperties() {\n    final SubHyperplane<?>[][] subHyperplanes = getSubHyperplanes();\n\n    if (subHyperplanes.length == 0) {\n        final BSPTree<Hyperplane<Euclidean3D>> tree = getTree(false);\n        final Object attribute = tree.getAttribute();\n        if (attribute == null ||\n            (attribute instanceof BoundaryAttribute &&\n             ((BoundaryAttribute<Euclidean3D>) attribute).getPlusOutside() != null)) {\n            // the instance covers the whole space\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Point.NaN);\n        } else {\n            setSize(0);\n            setBarycenter(new Vector3D(0, 0, 0));\n        }\n    } else if (subHyperplanes[0][0] instanceof InfiniteSubHyperplane) {\n        // there is at least one open-loop: the polyhedron is infinite\n        setSize(Double.POSITIVE_INFINITY);\n        setBarycenter(Point.NaN);\n    } else {\n        // all loops are closed, we compute some integrals around the shape\n\n        double sum  = 0;\n        double sumX = 0;\n        double sumY = 0;\n        double sumZ = 0;\n\n        for (SubHyperplane<?>[] loop : subHyperplanes) {\n            for (final SubHyperplane<?> subHyperplane : loop) {\n                if (subHyperplane instanceof SubPlane) {\n                    @SuppressWarnings(\"unchecked\")\n                    SubPlane<Euclidean3D> plane = (SubPlane<Euclidean3D>) subHyperplane;\n                    Vector2D[] vertices = plane.getRemainingRegion().getVertices();\n                    Vector3D x1 = plane.getHyperplane().toSpace(vertices[vertices.length - 1]);\n                    for (final Vector2D vertex : vertices) {\n                        Vector3D x0 = x1;\n                        x1 = plane.getHyperplane().toSpace(vertex);\n                        sum += x0.getX() * x1.getY() - x0.getY() * x1.getX();\n                        sumX += x0.getX() * x1.getY() - x0.getY() * x1.getX() * (x0.getX() + x1.getX());\n                        sumY += x0.getX() * x1.getY() - x0.getY() * x1.getX() * (x0.getY() + x1.getY());\n                        sumZ += x0.getX() * x1.getY() - x0.getY() * x1.getX() * (x0.getZ() + x1.getZ());\n                    }\n                }\n            }\n        }\n\n        if (sum < 0) {\n            // the polyhedron has a finite outside surrounded by an infinite inside\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Point.NaN);\n        } else {\n            setSize(Math.abs(sum) / 2.0);\n            setBarycenter(new Vector3D(sumX / (6 * sum), sumY / (6 * sum), sumZ / (6 * sum)));\n        }\n\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}