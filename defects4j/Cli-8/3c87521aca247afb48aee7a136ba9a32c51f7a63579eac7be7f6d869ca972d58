{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    String[] lines = text.split(\"\\\\r?\\\\n\");\n    String padding = createPadding(nextLineTabStop);\n\n    for (int lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n        String line = lines[lineIndex];\n        boolean isFirstLine = lineIndex == 0;\n        boolean isLastLine = lineIndex == lines.length - 1;\n\n        if (!isFirstLine) {\n            sb.append(padding);\n        }\n\n        while (line.length() > 0) {\n            int pos = findWrapPos(line, width, isFirstLine ? 0 : nextLineTabStop);\n\n            if (pos == -1) {\n                sb.append(rtrim(line));\n                break;\n            } else {\n                sb.append(rtrim(line.substring(0, pos)));\n                if (!isLastLine || lineIndex < lines.length - 1) {\n                    sb.append(defaultNewLine);\n                }\n                line = line.substring(pos).trim();\n                if (line.length() > 0) {\n                    sb.append(padding);\n                }\n            }\n        }\n\n        if (!isLastLine) {\n            sb.append(defaultNewLine);\n        }\n    }\n\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}