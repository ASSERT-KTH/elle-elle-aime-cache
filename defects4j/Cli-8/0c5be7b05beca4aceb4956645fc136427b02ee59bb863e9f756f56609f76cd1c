{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    int pos = 0;\n    while (true) {\n        pos = findWrapPos(text, width, pos);\n        if (pos == -1) {\n            // Append remaining text if no more wrapping positions to be found\n            if (sb.length() > 0 && \"\\n\".equals(sb.substring(sb.length() - 1))) {\n                // Already appended a new line, just append the text without padding\n                sb.append(text.trim());\n            } else {\n                // No new line appended, need to add the padding and then the text\n                sb.append(createPadding(nextLineTabStop)).append(text.trim());\n            }\n            break;\n        } else {\n            // Append the text up to the wrap position and then a new line, repeat the loop\n            if (sb.length() > 0) {\n                // Not the first line, add padding before appending the text\n                sb.append(createPadding(nextLineTabStop));\n            }\n            sb.append(text.substring(0, pos)).append(defaultNewLine);\n            text = text.substring(pos).trim();\n        }\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}