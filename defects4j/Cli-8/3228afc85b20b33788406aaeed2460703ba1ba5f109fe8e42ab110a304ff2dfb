{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = 0;\n    String[] lines = text.split(\"\\n\");\n\n    for (String line : lines)\n    {\n        pos = 0;\n        while (pos < line.length())\n        {\n            int wrapPos = findWrapPos(line, width, pos);\n            if (wrapPos == -1)\n            {\n                sb.append(rtrim(line.substring(pos)));\n            }\n            else\n            {\n                sb.append(rtrim(line.substring(pos, wrapPos)));\n            }\n\n            if (wrapPos != -1)\n            {\n                sb.append(defaultNewLine);\n                // all following lines must be padded with nextLineTabStop space characters\n                final String padding = createPadding(nextLineTabStop);\n                sb.append(padding);\n                pos += wrapPos;\n            }\n            else\n            {\n                pos = line.length();\n            }\n        }\n        sb.append(defaultNewLine);\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}