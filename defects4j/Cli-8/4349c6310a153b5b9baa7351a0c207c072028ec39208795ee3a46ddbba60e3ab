{
    "generation": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        // Split the provided text into lines based on existing line breaks\n        String[] lines = text.split(\"\\\\r?\\\\n\");\n        final String padding = createPadding(nextLineTabStop);\n\n        for (String line : lines) {\n            boolean firstLine = true;\n\n            while (!line.isEmpty()) {\n                int pos;\n\n                // Determine the wrap position based on width and whether it's the first line\n                if (firstLine) {\n                    pos = findWrapPos(line, width, 0);\n                } else {\n                    pos = findWrapPos(line, width, nextLineTabStop);\n                }\n\n                if (pos == -1) {\n                    // No wrap position found, append the rest of the line\n                    if (!firstLine) {\n                        sb.append(padding);\n                    }\n                    sb.append(rtrim(line));\n                    break;\n                }\n\n                // Append the wrapped line part\n                if (!firstLine) {\n                    sb.append(padding);\n                }\n                sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n\n                // Prepare the remaining text for the next iteration\n                line = line.substring(pos).trim();\n                firstLine = false;\n            }\n\n            // Add a line break if there are more unprocessed lines\n            if (!line.isEmpty()) {\n                sb.append(defaultNewLine);\n            }\n        }\n\n        return sb;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}