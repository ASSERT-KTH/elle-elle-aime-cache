{
    "generation": "    /**\n     * <p>Render the specified text and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        String[] lines = text.split(defaultNewLine);\n        for (int i = 0; i < lines.length; i++) {\n            String line = lines[i];\n            int pos = findWrapPos(line, width, 0);\n\n            if (pos == -1) {\n                sb.append(rtrim(line));\n                if (i < lines.length - 1) {\n                    sb.append(defaultNewLine);\n                }\n                continue;\n            }\n\n            sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n\n            // all following lines must be padded with nextLineTabStop space characters\n            final String padding = createPadding(nextLineTabStop);\n            while (true) {\n                line = padding + line.substring(pos).trim();\n                pos = findWrapPos(line, width, 0);\n\n                if (pos == -1) {\n                    sb.append(rtrim(line));\n                    if (i < lines.length - 1) {\n                        sb.append(defaultNewLine);\n                    }\n                    break;\n                }\n\n                sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n            }\n        }\n        return sb;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}