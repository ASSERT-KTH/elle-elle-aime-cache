{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n    \n    String remainingText = text.substring(pos).trim();\n    \n    while (true)\n    {\n        if (remainingText.contains(defaultNewLine))\n        {\n            String[] lines = remainingText.split(defaultNewLine, 2);\n            sb.append(padding).append(lines[0]).append(defaultNewLine);\n            remainingText = lines[1].trim();\n        }\n        else\n        {\n            pos = findWrapPos(remainingText, width - nextLineTabStop, 0);\n            \n            if (pos == -1)\n            {\n                sb.append(padding).append(remainingText);\n                return sb;\n            }\n            \n            sb.append(padding).append(rtrim(remainingText.substring(0, pos))).append(defaultNewLine);\n            remainingText = remainingText.substring(pos).trim();\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}