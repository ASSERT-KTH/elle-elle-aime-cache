{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    for (String line : text.split(defaultNewLine))\n    {\n        int pos = findWrapPos(line, width, 0);\n        \n        if (pos == -1)\n        {\n            sb.append(padding).append(rtrim(line));\n\n            continue;\n        }\n\n        sb.append(padding).append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n        line = line.substring(pos).trim();\n\n        while (true)\n        {\n            pos = findWrapPos(line, width, nextLineTabStop);\n            \n            if (pos == -1)\n            {\n                sb.append(createPadding(nextLineTabStop)).append(line);\n                \n                break;\n            }\n            sb.append(createPadding(nextLineTabStop)).append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n            line = line.substring(pos).trim();\n        }\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}