{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    int nextStart = 0;\n    boolean firstLine = true;\n\n    while (pos != -1)\n    {\n        // Append the text from nextStart to pos\n        sb.append(rtrim(text.substring(nextStart, pos)));\n\n        // If not the first line, or if nextLineTabStop is non-zero, append a new line\n        if (!firstLine || nextLineTabStop > 0)\n        {\n            sb.append(defaultNewLine);\n        }\n\n        nextStart = pos;\n        firstLine = false;\n\n        // Calculate the next line's starting position\n        if (nextLineTabStop > 0)\n        {\n            sb.append(createPadding(nextLineTabStop));\n            pos = findWrapPos(text, width - nextLineTabStop, nextStart + nextLineTabStop);\n            nextStart += nextLineTabStop;\n        }\n        else\n        {\n            pos = findWrapPos(text, width, nextStart);\n        }\n    }\n\n    // Append the remaining text\n    String remaining = text.substring(nextStart).trim();\n    if (!firstLine || nextLineTabStop > 0)\n    {\n        if (nextLineTabStop > 0)\n        {\n            sb.append(createPadding(nextLineTabStop));\n        }\n        sb.append(remaining);\n    }\n    else\n    {\n        sb.append(rtrim(remaining));\n    }\n\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}