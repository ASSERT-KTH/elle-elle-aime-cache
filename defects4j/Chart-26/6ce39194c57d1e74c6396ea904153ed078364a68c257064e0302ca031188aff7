{
    "generation": "    protected AxisState drawLabel(String label, Graphics2D g2, \n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n            AxisState state, PlotRenderingInfo plotState) {\n        \n        // it is unlikely that 'state' will be null, but check anyway...\n        if (state == null) {\n            throw new IllegalArgumentException(\"Null 'state' argument.\");\n        }\n        \n        if ((label == null) || (label.equals(\"\"))) {\n            return state;\n        }\n\n        Font font = getLabelFont();\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(font);\n        g2.setPaint(getLabelPaint());\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n        Shape hotspot = null;\n\n        AffineTransform t;\n        float w, h, labelx, labely;\n        \n        if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {\n            t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(), \n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            w = (float) labelBounds.getWidth();\n            h = (float) labelBounds.getHeight();\n            labelx = (float) dataArea.getCenterX();\n            labely = edge == RectangleEdge.TOP \n                    ? (float) (state.getCursor() - insets.getBottom() - h / 2.0)\n                    : (float) (state.getCursor() + insets.getTop() + h / 2.0);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n            float cursorUpdate = insets.getTop() + labelBounds.getHeight() + insets.getBottom();\n            if (edge == RectangleEdge.TOP) {\n                state.cursorUp(cursorUpdate);\n            } else {\n                state.cursorDown(cursorUpdate);\n            }\n        }\n        else if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {\n            t = AffineTransform.getRotateInstance(\n                    (edge == RectangleEdge.LEFT ? -1 : 1) * Math.PI / 2.0 + getLabelAngle(), \n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            w = (float) labelBounds.getWidth();\n            h = (float) labelBounds.getHeight();\n            labelx = edge == RectangleEdge.LEFT \n                    ? (float) (state.getCursor() - insets.getRight() - w / 2.0)\n                    : (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n            labely = (float) dataArea.getCenterY();\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, (edge == RectangleEdge.LEFT ? -1 : 1) * Math.PI / 2.0 + getLabelAngle(), \n                    TextAnchor.CENTER);\n            float cursorUpdate = insets.getLeft() + labelBounds.getWidth() + insets.getRight();\n            if (edge == RectangleEdge.LEFT) {\n                state.cursorLeft(cursorUpdate);\n            } else {\n                state.cursorRight(cursorUpdate);\n            }\n        }\n\n        if (plotState != null && hotspot != null) {\n            ChartRenderingInfo owner = plotState.getOwner();\n            if (owner != null) {\n                EntityCollection entities = owner.getEntityCollection();\n                if (entities != null) {\n                    entities.add(new AxisLabelEntity(this, hotspot, \n                            this.labelToolTip, this.labelURL));\n                }\n            }\n        }\n        return state;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}