{
    "generation": "protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException {\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    boolean foundCreatorProp = false;\n    JsonToken t = p.getCurrentToken();\n    for (; t != JsonToken.END_OBJECT; t = p.nextToken()) {\n        if (t == JsonToken.FIELD_NAME) {\n            String propName = p.getCurrentName();\n            p.nextToken();  // Advance to the value token\n\n            if (!foundCreatorProp) {\n                // Try to map the property to a creator property\n                SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n                if (creatorProp != null) {\n                    // Found a creator property - add it to the buffer and try to build the object\n                    if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                        try {\n                            Object bean = creator.build(ctxt, buffer);\n                            foundCreatorProp = true;\n                            tokens.writeEndObject();\n                            tokens.writeStartObject();\n\n                            p.setCurrentValue(bean);\n                            return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                        } catch (Exception e) {\n                            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        }\n                    }\n                    continue;\n                }\n            }\n\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n\n            // Regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n\n            // Ignorable properties should not be processed further\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n\n            // Otherwise, it's an \"any setter\" property\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n        }\n    }\n\n    // We've reached the end of the object, so try to build the object (if not already built)\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n        tokens.writeEndObject();\n    } catch (Exception e) {\n        wrapAndThrow(e, _beanType, ctxt);\n        return null;  // Never reached due to the above exception throw\n    }\n\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}