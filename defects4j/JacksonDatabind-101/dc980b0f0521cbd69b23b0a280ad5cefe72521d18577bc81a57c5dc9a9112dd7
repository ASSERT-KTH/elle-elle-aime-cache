{
    "generation": "protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    // ...\n\n    while (t == JsonToken.FIELD_NAME) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // Last creator property to set?\n            if (buffer.assignParameter(creatorProp,\n                _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    bean = wrapInstantiationProblem(e, ctxt);\n                }\n\n                // Move the token to following FIELD_NAME/END_OBJECT\n                t = p.nextToken();\n\n                // if so, need to copy all remaining tokens into buffer\n                while (t == JsonToken.FIELD_NAME) {\n                    // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that\n                    tokens.copyCurrentStructure(p);\n                    t = p.nextToken(); // to move to value\n                }\n\n                // 28-Aug-2018, tatu: Let's add sanity check here, easier to catch off-by-some problems if we maintain invariants\n                tokens.writeEndObject();\n\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    // !!! 08-Jul-2011, tatu: Could probably support; but for now, it's too complicated, so bail out\n                    ctxt.reportInputMismatch(creatorProp, \"Cannot create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n        } else {\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) continue;\n\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n            }\n            // Things marked as ignorable should not be passed to any setter\n            else if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n            }\n            // others should be passed to unwrapped property deserializers\n            else {\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n            }\n\n            // Move the token to following FIELD_NAME/END_OBJECT\n            t = p.nextToken();\n        }\n    }\n\n    // We hit END_OBJECT, so...\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null; // never gets here\n    }\n\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}