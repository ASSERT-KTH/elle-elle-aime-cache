{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped\n        //    value itself is NOT passed via `CreatorProperty` (which isn't supported).\n        //    Ok however to pass via setter or field.\n\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        SettableBeanProperty lastNonCreatorProp = null;\n        Object lastNonCreatorValue = null;\n\n        while (t == JsonToken.FIELD_NAME) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // Last creator property to set?\n                if (buffer.assignParameter(creatorProp,\n                        _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    // If this is the last creator property, process the buffered ones\n                    if (lastNonCreatorProp != null) {\n                        buffer.bufferProperty(lastNonCreatorProp, lastNonCreatorValue);\n                        lastNonCreatorProp = null;\n                        lastNonCreatorValue = null;\n                    }\n                    try {\n                        Object bean = creator.build(ctxt, buffer);\n                        p.setCurrentValue(bean);\n                        tokens.writeEndObject();\n                        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                    } catch (Exception e) {\n                        wrapInstantiationProblem(e, ctxt);\n                        return null;\n                    }\n                }\n            } else if (_beanProperties.find(propName) != null) {\n                // Regular property buffering\n                if (lastNonCreatorProp != null) {\n                    buffer.bufferProperty(lastNonCreatorProp, lastNonCreatorValue);\n                }\n                lastNonCreatorProp = _beanProperties.find(propName);\n                lastNonCreatorValue = _deserializeWithErrorWrapping(p, ctxt, lastNonCreatorProp);\n            } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n            } else {\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n            }\n            t = p.nextToken();\n        }\n\n        // Handle any remaining buffered property\n        if (lastNonCreatorProp != null) {\n            buffer.bufferProperty(lastNonCreatorProp, lastNonCreatorValue);\n        }\n\n        try {\n            Object bean = creator.build(ctxt, buffer);\n            return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}