{
    "generation": "/**\n * Specialized method for removing specified existing entry.\n * NOTE: entry MUST exist, otherwise an exception is thrown.\n */\npublic void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n            // Check if the feature is enabled for case-insensitive comparison\n            if (isCaseInsensitive()) {\n                found = key.equalsIgnoreCase(prop.getName());\n            } else {\n                found = key.equals(prop.getName());\n            }\n            if (found) {\n                // need to leave a hole here\n                _propsInOrder[_findFromOrdered(prop)] = null;\n                continue;\n            }\n        }\n        props.add(prop);\n    }\n    if (!found) {\n        throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n    }\n    init(props);\n}\n\n// Helper method to check if case-insensitive comparison is enabled\nprivate boolean isCaseInsensitive() {\n    // Assuming there is a context or configuration object that holds this information\n    // Replace 'getContext' and 'isCaseInsensitivePropertiesEnabled' with the appropriate methods\n    return getContext().isCaseInsensitivePropertiesEnabled();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}