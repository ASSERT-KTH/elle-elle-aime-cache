{
    "generation": "/**\n * Specialized method for removing specified existing entry.\n * NOTE: entry MUST exist, otherwise an exception is thrown.\n */\npublic void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    int indexToRemove = -1; // track the index to remove from _propsInOrder\n\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n            // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,\n            //   as only former is lower-case in case-insensitive case\n            String propName = prop.getName();\n            if (_config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES)) {\n                found = key.equalsIgnoreCase(propName);\n            } else {\n                found = key.equals(propName);\n            }\n            if (found) {\n                indexToRemove = _findFromOrdered(prop);\n                continue;\n            }\n        }\n        props.add(prop);\n    }\n    if (!found) {\n        throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n    }\n    if (indexToRemove!= -1) {\n        _propsInOrder[indexToRemove] = null;\n    }\n    init(props);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}