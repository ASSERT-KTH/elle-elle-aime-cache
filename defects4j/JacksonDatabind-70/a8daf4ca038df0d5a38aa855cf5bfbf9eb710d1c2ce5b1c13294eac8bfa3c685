{
    "generation": "/**\n * Specialized method for removing specified existing entry.\n * NOTE: entry MUST exist, otherwise an exception is thrown.\n */\npublic void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n            // Check if propToRm is actually stored under _hashArea[i-1] index\n            if (propToRm.equals(_hashArea[i-1])) {\n                found = true;\n            } else {\n                String propName = (String) _hashArea[i - 1];\n                // Check whether propToRm name (case insensitive if required) matches propName (already stored in lower-case for insensitive case)\n                if ((propName.equalsIgnoreCase(key)) || (key.equals(propName))) {\n                    found = true;\n                }\n            }\n        }\n        if (found && propToRm.equals(prop)) {\n            _propsInOrder[_findFromOrdered(prop)] = null;\n            continue;\n        } else {\n            props.add(prop);\n        }\n    }\n    if (!found) {\n        throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n    }\n    init(props);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}