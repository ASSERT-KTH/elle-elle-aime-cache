{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Record global variable and function declarations\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns != null) {\n        recordSet(ns.name, n);\n      }\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns != null) {\n        recordSet(ns.name, n);\n        // Handle nested object properties\n        if (ns.parentNs != null) {\n          String fullName = ns.parentNs.name + \".\" + ns.name;\n          recordSet(fullName, n);\n        }\n      }\n    }\n  }\n\n  // Record assignments and call sites\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n        // Handle nested object properties\n        if (ns.parentNs != null) {\n          String fullName = ns.parentNs.name + \".\" + ns.name;\n          recordSet(fullName, nameNode);\n        }\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null) {\n      if (ns.onlyAffectsClassDef) {\n        JsName name = getName(ns.name, false);\n        if (name != null) {\n          refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));\n        }\n      } else {\n        // Handle function calls on nested objects\n        String fullName = ns.name;\n        Node current = nameNode;\n        while (current != null && current.getParent() != null && current.getParent().isGetProp()) {\n          current = current.getParent();\n          fullName = current.getLastChild().getString() + \".\" + fullName;\n        }\n        recordSet(fullName, nameNode);\n      }\n    }\n  } else if (n.isGetProp()) {\n    // Handle property access\n    NameInformation ns = createNameInformation(t, n, parent);\n    if (ns != null) {\n      recordSet(ns.name, n);\n      // Handle nested object properties\n      if (ns.parentNs != null) {\n        String fullName = ns.parentNs.name + \".\" + ns.name;\n        recordSet(fullName, n);\n      }\n    }\n  }\n\n  // Handle inheritance\n  if (n.isCall() && NodeUtil.isName(n.getFirstChild()) && n.getFirstChild().getString().equals(\"goog.inherits\")) {\n    Node childClassNode = n.getChildAtIndex(1);\n    Node parentClassNode = n.getChildAtIndex(2);\n    \n    String childClassName = getFullName(childClassNode);\n    String parentClassName = getFullName(parentClassNode);\n    \n    if (childClassName != null && parentClassName != null) {\n      recordInheritance(childClassName, parentClassName, n);\n    }\n  }\n}\n\n// Helper method to get the full name of a class\nprivate String getFullName(Node classNode) {\n  if (classNode.isName()) {\n    return classNode.getString();\n  } else if (classNode.isGetProp()) {\n    String parentName = getFullName(classNode.getFirstChild());\n    if (parentName != null) {\n      return parentName + \".\" + classNode.getLastChild().getString();\n    }\n  }\n  return null;\n}\n\n// Method to record inheritance relationships\nprivate void recordInheritance(String childClassName, String parentClassName, Node n) {\n  // Implementation to record inheritance, adjust according to your data structures\n  // For example:\n  // inheritanceMap.put(childClassName, parentClassName);\n  // inheritanceNodes.add(new InheritanceNode(childClassName, parentClassName, n));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}