{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n\n  // Record global variable and function declarations\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns != null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n\n  // Record assignments and call sites\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null && ns.onlyAffectsClassDef) {\n      JsName name = getName(ns.name, false);\n      if (name != null) {\n        refNodes.add(new ClassDefiningFunctionNode(\n            name, n, parent, parent.getParent()));\n      }\n    } else if (isGoogInheritsCall(t, n)) {\n      // Special handling for goog.inherits\n      handleGoogInheritsCall(t, n);\n    }\n  }\n}\n\nprivate boolean isGoogInheritsCall(NodeTraversal t, Node n) {\n  Node fnNode = n.getFirstChild();\n  if (fnNode.isQualifiedName()) {\n    String qualifiedName = fnNode.getQualifiedName();\n    return \"goog.inherits\".equals(qualifiedName);\n  }\n  return false;\n}\n\nprivate void handleGoogInheritsCall(NodeTraversal t, Node n) {\n  // Extract subclass and superclass from arguments\n  Node subclassNode = n.getFirstChild().getNext();\n  Node superclassNode = subclassNode.getNext();\n\n  if (subclassNode == null || superclassNode == null) {\n    return; // Invalid call, skip\n  }\n\n  // Get the names of the subclass and superclass\n  String subclassName = getNameFromNode(subclassNode);\n  String superclassName = getNameFromNode(superclassNode);\n\n  if (subclassName != null && superclassName != null) {\n    // Record the inheritance relationship\n    recordInheritance(subclassName, superclassName);\n  }\n}\n\nprivate String getNameFromNode(Node n) {\n  if (n.isQualifiedName()) {\n    return n.getQualifiedName();\n  } else if (n.isString()) {\n    return n.getString();\n  }\n  return null;\n}\n\nprivate void recordInheritance(String subclass, String superclass) {\n  // Implement logic to record inheritance relationship\n  // This could involve updating the class hierarchy in the NameAnalyzer\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}