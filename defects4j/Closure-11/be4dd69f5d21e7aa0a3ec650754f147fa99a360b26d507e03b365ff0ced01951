{
    "generation": "  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    } else if (n.getJSType() != null && parent.isAssign()) {\n      // If the parent is an assignment, record the type of the assigned expression\n      JSType assignedType = n.getLastChild().getJSType();\n      if (assignedType != null && assignedType.isVoidType()) {\n        report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS,\n            \"'.'\", \"assignment to void type\");\n      }\n      return;\n    } else if (validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n      checkPropertyAccess(childType, property.getString(), t, n);\n    } else {\n      // If childType is null or undefined, report the missing properties warning\n      report(t, objNode, TypeCheck.INEXISTENT_PROPERTY,\n          property.getString(), objNode.toString());\n    }\n    ensureTyped(t, n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}