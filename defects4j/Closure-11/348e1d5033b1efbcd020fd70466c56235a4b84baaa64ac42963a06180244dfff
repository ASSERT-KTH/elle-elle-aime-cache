{
    "generation": "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    // Ensure the test remains consistent for null type checks\n    if (childType.isDict()) {\n        report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    } else if (childType.isNullType() && !parent.isAssign()) {\n        report(t, objNode, TypeValidator.NOT_AN_OBJECT, \"No properties on this expression\", getNativeType(OBJECT_TYPE));\n    } else if (n.getJSType() != null && parent.isAssign()) {\n        return;\n    } else if (validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n        checkPropertyAccess(childType, property.getString(), t, n);\n    }\n    ensureTyped(t, n);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}