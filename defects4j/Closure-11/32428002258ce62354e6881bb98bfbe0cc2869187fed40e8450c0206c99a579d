{
    "generation": "  /**\n   * Visits a GETPROP node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of <code>n</code>\n   */\n  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    if (childType == null || childType.isUnknownType()) {\n      // Warn if the child type is null or unknown, as this could indicate an invalid property access.\n      report(t, n, TypeValidator.UNKNOWN_PROPERTY_TYPE, \"Unknown property type\");\n    } else if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    } else if (n.getJSType() != null && parent.isAssign()) {\n      // If JSTYPE is already set, we're done with this node. If the parent is an assignment,\n      // we don't generate further warnings on the assignment target.\n      return;\n    } else if (childType.isNullType() || childType.isVoidType()) {\n      // Explicitly check for null or undefined to generate a warning.\n      report(t, n, TypeValidator.NULL_OR_UNDEFINED_PROPERTY_ACCESS, \n             \"No properties on this expression\", childType.toString());\n    } else if (validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n      checkPropertyAccess(childType, property.getString(), t, n);\n    }\n    ensureTyped(t, n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}