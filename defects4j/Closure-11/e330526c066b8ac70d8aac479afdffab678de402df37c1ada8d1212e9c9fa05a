{
    "generation": "  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    } else if (parent.isAssign()) {\n      if (n.getJSType() == null || !validator.expectNotNullOrUndefined(t, n, childType,\n          \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n        return;\n      }\n      // Additional check for the assignment case\n      JSType expectedType = getNativeType(OBJECT_TYPE);\n      if (!childType.isSubtype(expectedType)) {\n        report(t, objNode, TypeValidator.INEXISTENT_PROPERTY,\n            property.getString(), childType.toString());\n        return;\n      }\n    } else if (!validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n      return;\n    } else {\n      checkPropertyAccess(childType, property.getString(), t, n);\n    }\n    ensureTyped(t, n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}