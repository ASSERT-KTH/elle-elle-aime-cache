{
    "generation": "@Override\npublic void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n        return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraint {{prop: (number|undefined)}}\n    // function f(constraint) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking each property on the record and trying to match\n    // properties on this object.\n    if (constraint.isRecordType() || constraint.isUnionType()) {\n        ObjectType recordType = null;\n        if (constraint.isRecordType()) {\n            recordType = constraint.toObjectType();\n        } else if (constraint.isUnionType()) {\n            // If it's a union type, we need to handle each component of the union.\n            UnionType unionType = constraint.toMaybeUnionType();\n            for (JSType type : unionType.getAlternates()) {\n                if (type.isRecordType()) {\n                    recordType = type.toObjectType();\n                    break; // Assuming we only need to match one record type in the union for this context.\n                }\n            }\n        }\n\n        if (recordType != null) {\n            matchRecordTypeConstraint(recordType);\n        }\n    }\n}\n\nprivate void matchRecordTypeConstraint(ObjectType recordType) {\n    // For each property in the record type, ensure the current object type has a matching property.\n    for (String propName : recordType.getOwnPropertyNames()) {\n        JSType propType = recordType.getPropertyType(propName);\n        defineInferredProperty(propName, propType, SourceKind.ANNOTATION);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}