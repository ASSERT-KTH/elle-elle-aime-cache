{
    "generation": "  @Override\n  public void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    // We want to modify the object literal to match the constraint by\n    // taking each property on the record and trying to match\n    // properties on this object.\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n    }\n    // Handle the case where the constraint object is a union type,\n    // which can include a record type. We check for any record type in\n    // the union and apply that constraint.\n    else if (constraint.isUnionType()) {\n      for (JSType alternate : constraint.toUnionType().getAlternates()) {\n        if (alternate.isRecordType()) {\n          matchRecordTypeConstraint(alternate.toObjectType());\n          // As we found a match, we can stop further checking for union types.\n          break;\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}