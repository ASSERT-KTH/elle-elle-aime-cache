{
    "generation": "  @Override\n  public void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n      return;\n    }\n\n    // Handle the case where the constraint is a union type that might include a record type.\n    if (constraint.isUnionType()) {\n      for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {\n        if (alternate.isRecordType()) {\n          matchRecordTypeConstraint(alternate.toObjectType());\n          return;\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}