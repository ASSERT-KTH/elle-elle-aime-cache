{
    "generation": "@Override\npublic void matchConstraint(JSType constraint) {\n  // We only want to match constraints on anonymous types.\n  if (hasReferenceName()) {\n    return;\n  }\n\n  // Handle the case where the constraint object is a record type.\n  if (constraint.isRecordType()) {\n    // Here we're fixing the bug by correctly calling the method for ObjectType\n    matchObjectTypeConstraint(constraint.toMaybeObjectType());\n  }\n}\n\nprivate void matchObjectTypeConstraint(JSType constraint) {\n  if (constraint.isUnionType()) {\n    // here we handle the union type by applying each type in the union\n    for (JSType type : constraint.getAlternates()) {\n      matchSingleTypeConstraint(type.toMaybeObjectType());\n    }\n  } else {\n    // handling single object type\n    matchSingleTypeConstraint(constraint.toMaybeObjectType());\n  }\n}\n\nprivate void matchSingleTypeConstraint(MaybeObjectType constraint) {\n  constraint.getOwnPropertyNames().forEach(propName ->\n    // adding each property from the constraint to the object\n    this.addProperty(propName, constraint.getPropertyType(propName)));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}