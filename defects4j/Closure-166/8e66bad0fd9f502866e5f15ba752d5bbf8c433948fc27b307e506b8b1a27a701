{
    "generation": "@Override\npublic void matchConstraint(JSType constraint) {\n  // We only want to match constraints on anonymous types.\n  if (hasReferenceName()) {\n    return;\n  }\n\n  // Handle the case where the constraint object is a record type.\n  //\n  // param constraint {{prop: (number|undefined)}}\n  // function f(constraint) {}\n  // f({});\n  //\n  // We want to modify the object literal to match the constraint, by\n  // taking any each property on the record and trying to match\n  // properties on this object.\n  if (constraint.isRecordType()) {\n    RecordType recordConstraint = constraint.toObjectType().toMaybeRecordType();\n    if (recordConstraint != null) {\n      for (String prop : recordConstraint.getOwnPropertyNames()) {\n        JSType propType = recordConstraint.getPropertyType(prop);\n        if (propType != null) {\n          JSDocInfo info = JSDocInfoBuilder.build(propType).build();\n          if (info != null) {\n            JSType propertyType = info.getType();\n            if (propertyType != null) {\n              matchRecordTypeConstraint(propertyType.toObjectType());\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}