{
    "generation": "  @Override\n  public void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    if (constraint.isRecordType()) {\n      ObjectType thisObjectType = toObjectType();\n      if (thisObjectType != null) {\n        ObjectType constraintObjectType = constraint.toObjectType();\n        for (String property : constraintObjectType.getOwnPropertyNames()) {\n          JSType propertyType = constraintObjectType.getPropertyType(property);\n          if (!thisObjectType.hasProperty(property)) {\n            thisObjectType.defineInferredProperty(property, propertyType, null);\n          } else {\n            JSType thisPropertyType = thisObjectType.getPropertyType(property);\n            thisObjectType.defineDeclaredProperty(\n                property, thisPropertyType.getLeastSupertype(propertyType), null);\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}