{
    "generation": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n    throws NonSquareMatrixException,\n           NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                           matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData   = matrix.getData();\n    cachedL  = null;\n    cachedLT = null;\n\n    // Check for symmetry\n    for (int i = 0; i < order; ++i) {\n        for (int j = i + 1; j < order; ++j) {\n            double diff = lTData[i][j] - lTData[j][i];\n            double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(lTData[i][j]), Math.abs(lTData[j][i]));\n            if (Math.abs(diff) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n        }\n    }\n\n    // Perform Cholesky decomposition\n    for (int i = 0; i < order; ++i) {\n        final double[] ltI = lTData[i];\n\n        // Check if the current diagonal element is positive\n        if (ltI[i] <= absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n\n        ltI[i] = Math.sqrt(ltI[i]);\n        final double inverse = 1.0 / ltI[i];\n\n        for (int q = i + 1; q < order; ++q) {\n            ltI[q] *= inverse;\n            final double[] ltQ = lTData[q];\n            for (int p = q; p < order; ++p) {\n                ltQ[p] -= ltI[q] * ltI[p];\n            }\n            // Check if the next diagonal element is positive\n            if (ltQ[q] <= absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}