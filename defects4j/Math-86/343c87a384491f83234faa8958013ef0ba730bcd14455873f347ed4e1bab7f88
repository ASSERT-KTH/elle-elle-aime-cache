{
    "generation": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n    throws NonSquareMatrixException,\n           NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                           matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData = matrix.getData();\n    cachedL = null;\n    cachedLT = null;\n\n    // check the matrix before transformation\n    for (int i = 0; i < order; ++i) {\n        final double[] lI = lTData[i];\n\n        // Check symmetry and reset off-diagonal elements\n        for (int j = i + 1; j < order; ++j) {\n            final double[] lJ = lTData[j];\n            final double lIJ = lI[j];\n            final double lJI = lJ[i];\n            final double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n            if (Math.abs(lIJ - lJI) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n            // Set symmetrical elements to zero for now\n            lTData[i][j] = 0;\n        }\n    }\n\n    // transform the matrix\n    for (int i = 0; i < order; ++i) {\n        final double[] ltI = lTData[i];\n\n        // Accumulate L_ii^2\n        for (int j = 0; j < i; j++) {\n            ltI[i] -= lTData[i][j] * lTData[i][j];\n        }\n\n        // Check diagonal element for positive-definiteness\n        if (ltI[i] < absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n\n        ltI[i] = Math.sqrt(ltI[i]);\n        final double inverse = 1.0 / ltI[i];\n        \n        for (int q = i + 1; q < order; ++q) {\n            final double[] ltQ = lTData[q];\n\n            // Compute L_qi\n            for (int j = 0; j < i; j++) {\n                ltQ[i] -= lTData[q][j] * lTData[i][j];\n            }\n\n            ltQ[i] *= inverse;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}