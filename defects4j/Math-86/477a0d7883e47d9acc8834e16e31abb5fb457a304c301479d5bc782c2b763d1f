{
    "generation": "    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData();\n        cachedL  = null;\n        cachedLT = null;\n\n        // check the matrix before transformation\n        for (int i = 0; i < order; ++i) {\n            for (int j = 0; j < i; ++j) {\n                final double lJI = lTData[j][i];\n                final double lIJ = lTData[i][j];\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                // reset off-diagonal elements to be equal\n                lTData[i][j] = lTData[j][i] = 0.5 * (lIJ + lJI);\n            }\n            if (lTData[i][i] - absolutepositivityThreshold <= 0) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n        }\n\n        // transform the matrix\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i];\n\n            // check diagonal element\n            ltI[i] = Math.sqrt(ltI[i]);\n            final double inverse = 1.0 / ltI[i];\n\n            for (int j = i + 1; j < order; ++j) {\n                ltI[j] *= inverse;\n                final double[] ltJ = lTData[j];\n                for (int k = j; k < order; ++k) {\n                    ltJ[k] -= ltI[j] * ltI[k];\n                }\n            }\n\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}