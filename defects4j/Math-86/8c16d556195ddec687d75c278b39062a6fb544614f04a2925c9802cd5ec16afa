{
    "generation": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n    throws NonSquareMatrixException,\n           NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                           matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData   = new double[order][order];\n    cachedL  = null;\n    cachedLT = null;\n\n    // check the matrix before transformation\n    for (int i = 0; i < order; ++i) {\n        final double[] lI = lTData[i];\n        final double[] mI = matrix.getRow(i);\n\n        if (mI[i] <= absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n        // check off-diagonal elements (and reset them to 0)\n        for (int j = i; j < order; ++j) {\n            if (i == j) {\n                lI[j] = mI[j];\n            } else {\n                final double mIJ = mI[j];\n                final double mJI = matrix.getEntry(j, i);\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(mIJ), Math.abs(mJI));\n                if (Math.abs(mIJ - mJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                lI[j] = mIJ;\n            }\n        }\n    }\n\n    // transform the matrix\n    for (int i = 0; i < order; ++i) {\n        final double[] ltI = lTData[i];\n        ltI[i] = Math.sqrt(ltI[i]);\n        final double inverse = 1.0 / ltI[i];\n\n        for (int q = i + 1; q < order; ++q) {\n            final double[] ltQ = lTData[q];\n            final double factor = ltQ[i] * inverse;\n            ltQ[i] = factor;\n\n            for (int p = i + 1; p < order; ++p) {\n                ltQ[p] -= factor * ltI[p];\n            }\n\n            if (ltQ[q] <= absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}