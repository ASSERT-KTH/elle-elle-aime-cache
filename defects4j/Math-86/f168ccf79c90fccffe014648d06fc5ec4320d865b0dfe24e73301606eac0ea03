{
    "generation": "    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData = matrix.getData();\n        cachedL = null;\n        cachedLT = null;\n\n        // check the matrix before transformation\n        for (int i = 0; i < order; ++i) {\n\n            final double[] lI = lTData[i];\n\n            // Update the check for positive definiteness to use i'th diagonal\n            // element's value after transformations\n            for (int j = 0; j < i; ++j) {\n                final double[] lJ = lTData[j];\n                lI[i] -= lI[j] * lI[j];\n            }\n\n            if (lTData[i][i] < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            lI[i] = Math.sqrt(lI[i]);\n            final double inverse = 1.0 / lI[i];\n\n            for (int q = i + 1; q < order; ++q) {\n                final double[] lQ = lTData[q];\n                // Use existing partial results of i'th row for off-diagonal\n                for (int j = 0; j < i; ++j) {\n                    lQ[i] -= lQ[j] * lI[j];\n                }\n\n                lQ[i] *= inverse;\n\n                // check off-diagonal elements (and reset them to 0)\n                final double lIJ = lI[q];\n                final double lJI = lQ[i];\n                final double maxDelta =\n                        relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}