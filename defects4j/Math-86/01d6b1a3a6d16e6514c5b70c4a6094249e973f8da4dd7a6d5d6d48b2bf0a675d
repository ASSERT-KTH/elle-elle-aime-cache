{
    "generation": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n    throws NonSquareMatrixException,\n           NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                           matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData   = matrix.getData();\n    cachedL  = null;\n    cachedLT = null;\n\n    // check the matrix before transformation\n    for (int i = 0; i < order; ++i) {\n\n        final double[] lI = lTData[i];\n\n        if (lI[i] < absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n        // check off-diagonal elements (and reset them to 0)\n        for (int j = i + 1; j < order; ++j) {\n            final double[] lJ = lTData[j];\n            final double lIJ = lI[j];\n            final double lJI = lJ[i];\n            final double maxDelta =\n                relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n            if (Math.abs(lIJ - lJI) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n            lJ[i] = 0;\n        }\n    }\n\n    // transform the matrix\n    for (int i = 0; i < order; ++i) {\n\n        final double[] ltI = lTData[i];\n\n        // check diagonal element\n        double sum = ltI[i];\n        for (int k = 0; k < i; ++k) {\n            final double ltK = lTData[i][k];\n            sum -= ltK * ltK;\n        }\n\n        if (sum <= 0) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n\n        ltI[i] = Math.sqrt(sum);\n        final double inverse = 1.0 / ltI[i];\n\n        for (int q = i + 1; q < order; ++q) {\n            final double[] ltQ = lTData[q];\n            sum = ltQ[i];\n            for (int p = 0; p < i; ++p) {\n                sum -= ltI[p] * ltQ[p];\n            }\n            ltQ[i] = sum * inverse;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}