{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData();\n        cachedL  = null;\n        cachedLT = null;\n\n        // Check the matrix for symmetry and positive definiteness\n        for (int i = 0; i < order; ++i) {\n            final double[] lI = lTData[i];\n\n            // Check diagonal element for positive definiteness\n            if (i == 0 && lI[i] <= absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            for (int j = i; j < order; ++j) {\n                final double[] lJ = lTData[j];\n                final double lIJ = lI[j];\n                final double lJI = (i == j) ? lIJ : lJ[i];\n\n                // Check symmetry\n                if (i != j) {\n                    final double maxDelta =\n                        relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                    if (Math.abs(lIJ - lJI) > maxDelta) {\n                        throw new NotSymmetricMatrixException();\n                    }\n                }\n\n                // Check positive definiteness\n                if (j == i) {\n                    // Update diagonal element\n                    for (int k = 0; k < i; k++) {\n                        lI[i] -= lI[k] * lI[k];\n                    }\n                    if (lI[i] <= absolutePositivityThreshold) {\n                        throw new NotPositiveDefiniteMatrixException();\n                    }\n                    lI[i] = Math.sqrt(lI[i]);\n                } else if (j > i) {\n                    // Update off-diagonal element\n                    for (int k = 0; k < i; k++) {\n                        lJ[i] -= lI[k] * lJ[k];\n                    }\n                    lJ[i] /= lI[i];\n                    lI[j] = lJ[i];  // Ensure symmetry\n                }\n            }\n        }\n\n        // The matrix is now in Cholesky form\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}