{
    "generation": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n    throws NonSquareMatrixException,\n           NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                           matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData   = new double[order][order];\n    cachedL  = null;\n    cachedLT = null;\n\n    // check the matrix before transformation\n    for (int i = 0; i < order; ++i) {\n        if (matrix.getEntry(i, i) <= absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n        for (int j = i; j < order; ++j) {\n            double lIJ = matrix.getEntry(i, j);\n            double lJI = matrix.getEntry(j, i);\n            double maxDelta =\n                relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n            if (Math.abs(lIJ - lJI) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n            lTData[i][j] = lIJ;\n        }\n    }\n\n    // transform the matrix\n    for (int i = 0; i < order; ++i) {\n        final double[] ltI = lTData[i];\n        double diagonal = ltI[i];\n        for (int k = 0; k < i; ++k) {\n            double ltIK = ltI[k];\n            diagonal -= ltIK * ltIK;\n        }\n        if (diagonal <= absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n        ltI[i] = Math.sqrt(diagonal);\n        final double inverse = 1.0 / ltI[i];\n\n        for (int j = i + 1; j < order; ++j) {\n            double sum = ltI[j];\n            for (int k = 0; k < i; ++k) {\n                sum -= ltI[k] * lTData[j][k];\n            }\n            lTData[j][i] = sum * inverse;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}