{
    "generation": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n    throws NonSquareMatrixException,\n           NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                           matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData = new double[order][order];\n    cachedL = null;\n    cachedLT = null;\n\n    // Copy matrix data to preserve original matrix\n    for (int i = 0; i < order; ++i) {\n        for (int j = 0; j < order; ++j) {\n            lTData[i][j] = matrix.getEntry(i, j);\n        }\n    }\n\n    // Check the matrix before transformation\n    for (int i = 0; i < order; ++i) {\n        final double[] lI = lTData[i];\n\n        if (lI[i] < absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n        // Check off-diagonal elements (and reset them to 0)\n        for (int j = i + 1; j < order; ++j) {\n            final double[] lJ = lTData[j];\n            final double lIJ = lI[j];\n            final double lJI = lJ[i];\n            final double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n            if (Math.abs(lIJ - lJI) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n            lJ[i] = 0;\n        }\n    }\n\n    // Transform the matrix\n    for (int i = 0; i < order; ++i) {\n        final double[] ltI = lTData[i];\n\n        // Check diagonal element\n        final double diagElement = ltI[i];\n        if (diagElement <= 0) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n\n        ltI[i] = Math.sqrt(diagElement);\n        final double inverse = 1.0 / ltI[i];\n\n        for (int q = i + 1; q < order; ++q) {\n            ltI[q] *= inverse;\n            final double[] ltQ = lTData[q];\n            for (int p = q; p < order; ++p) {\n                ltQ[p] -= ltI[q] * ltQ[p];\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}