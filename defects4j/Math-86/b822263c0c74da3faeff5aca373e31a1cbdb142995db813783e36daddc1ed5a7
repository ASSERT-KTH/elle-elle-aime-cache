{
    "generation": "/**\n * Calculates the Cholesky decomposition of the given matrix.\n * @param matrix the matrix to decompose\n * @param relativeSymmetryThreshold threshold above which off-diagonal\n * elements are considered too different and matrix not symmetric\n * @param absolutePositivityThreshold threshold below which diagonal\n * elements are considered null and matrix not positive definite\n * @exception NonSquareMatrixException if matrix is not square\n * @exception NotSymmetricMatrixException if matrix is not symmetric\n * @exception NotPositiveDefiniteMatrixException if the matrix is not\n * strictly positive definite\n * @see #CholeskyDecompositionImpl(RealMatrix)\n * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n */\npublic CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n    throws NonSquareMatrixException,\n           NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                           matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData   = new double[order][order];\n    cachedL  = null;\n    cachedLT = null;\n\n    // Check the matrix before transformation\n    for (int i = 0; i < order; ++i) {\n        final double[] matrixRow = matrix.getRow(i);\n        final double[] lTDataRow = lTData[i];\n\n        // Check diagonal element\n        if (matrixRow[i] < absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n\n        // Copy the upper triangular part of the matrix\n        for (int j = i; j < order; ++j) {\n            lTDataRow[j] = matrixRow[j];\n        }\n\n        // Check off-diagonal elements\n        for (int j = i + 1; j < order; ++j) {\n            final double[] matrixColumn = matrix.getColumn(j);\n            final double elementIJ = matrixRow[j];\n            final double elementJI = matrixColumn[i];\n            final double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(elementIJ), Math.abs(elementJI));\n            if (Math.abs(elementIJ - elementJI) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n        }\n    }\n\n    // Transform the matrix\n    for (int i = 0; i < order; ++i) {\n        final double[] ltI = lTData[i];\n\n        // Check diagonal element\n        if (ltI[i] <= 0) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n\n        ltI[i] = Math.sqrt(ltI[i]);\n        final double inverse = 1.0 / ltI[i];\n\n        for (int q = i + 1; q < order; ++q) {\n            ltI[q] *= inverse;\n            final double[] ltQ = lTData[q];\n            for (int p = q; p < order; ++p) {\n                ltQ[p] -= ltI[q] * ltI[p];\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}