{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     *\n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n\n        // evaluate 3 hours before and after to work out if anything is happening\n        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        if (instantBefore == instantAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n\n        // find the range within one hour before and after the instant\n        long instantLowerBound = convertUTCToLocal(instant - DateTimeConstants.MILLIS_PER_HOUR);\n        long instantUpperBound = convertUTCToLocal(instant + DateTimeConstants.MILLIS_PER_HOUR);\n\n        long lowerAdjusted = convertLocalToUTC(instantLowerBound, false);\n        long upperAdjusted = convertLocalToUTC(instantUpperBound, false);\n\n        // check if the local instant falls within the overlap range\n        long local = convertUTCToLocal(instant);\n        if (local >= instantLowerBound && local <= instantUpperBound) {\n            long earlier = convertLocalToUTC(local, false);\n            long later = convertLocalToUTC(local, true);\n            return earlierOrLater ? later : earlier;\n        }\n\n        return instant;  // if not in the overlap range, no need to adjust\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}