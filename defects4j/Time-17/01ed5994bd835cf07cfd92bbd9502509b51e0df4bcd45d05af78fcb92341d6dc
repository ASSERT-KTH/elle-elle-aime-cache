{
    "generation": "/**\n * Adjusts the offset to be the earlier or later one during an overlap.\n * \n * @param instant  the instant to adjust\n * @param earlierOrLater  false for earlier, true for later\n * @return the adjusted instant millis\n */\npublic long adjustOffset(long instant, boolean earlierOrLater) {\n    // evaluate 3 hours before and after to work out if anything is happening\n    long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    if (instantBefore == instantAfter) {\n        return instant;  // not an overlap (less than is a gap, equal is normal case)\n    }\n    \n    // work out range of instants that have duplicate local times\n    long local = convertUTCToLocal(instant);\n    \n    // Fix: Ensure we're using the correct 'local' value that corresponds to the desired offset\n    if (earlierOrLater) {\n        // If earlierOrLater is true, we want the later offset, so use instantAfter to find the correct 'local'\n        local = instantAfter;\n    } else {\n        // If earlierOrLater is false, we want the earlier offset, so use instantBefore to find the correct 'local'\n        local = instantBefore;\n    }\n    \n    return convertLocalToUTC(local, false, earlierOrLater);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}