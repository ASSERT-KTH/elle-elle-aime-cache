{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        \n        // evaluate 1 hour before and after to work out if anything is happening\n        long instantBefore = instant - DateTimeConstants.MILLIS_PER_HOUR;\n        long instantAfter = instant + DateTimeConstants.MILLIS_PER_HOUR;\n        long localBefore = convertUTCToLocal(instantBefore);\n        long localAfter = convertUTCToLocal(instantAfter);\n        \n        if (localBefore == localAfter) {\n            return instant;  // no overlap or gap\n        }\n        \n        // Convert the given instant to local time\n        long local = convertUTCToLocal(instant);\n        \n        // Get the earlier and later instants mapping to the local time\n        long earlierInstant = convertLocalToUTC(local, false, instantBefore);\n        long laterInstant = convertLocalToUTC(local, false, instantAfter);\n        \n        // Return the requested offset\n        if (earlierOrLater) {\n            // Later offset\n            return laterInstant > instant ? laterInstant : earlierInstant;\n        } else {\n            // Earlier offset\n            return earlierInstant <= instant ? earlierInstant : laterInstant;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}