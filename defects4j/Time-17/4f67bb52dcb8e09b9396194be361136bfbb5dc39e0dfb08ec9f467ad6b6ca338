{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        \n        // evaluate 3 hours before and after to work out if anything is happening\n        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        if (instantBefore == instantAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n        \n        // work out range of instants that have duplicate local times\n        long local = convertUTCToLocal(instant);\n        \n        // Determine offsets at given instant\n        long earlierOffset = convertLocalToUTC(local, false, instantBefore) - instant;\n        long laterOffset = convertLocalToUTC(local, false, instantAfter) - instant;\n\n        // Compare current instant offset with calculated offsets to find correct adjustment\n        long currentOffset = convertLocalToUTC(local, false, instant) - instant;\n        if (currentOffset == laterOffset) {\n            // Currently in later offset, switch to earlier if requested\n            return earlierOrLater ? instant : instant - (laterOffset - earlierOffset);\n        } else {\n            // Currently in earlier offset, switch to later if requested\n            return earlierOrLater ? instant + (laterOffset - earlierOffset) : instant;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}