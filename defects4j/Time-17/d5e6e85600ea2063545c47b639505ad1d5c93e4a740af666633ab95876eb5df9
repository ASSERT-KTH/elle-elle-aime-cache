{
    "generation": "/**\n * Adjusts the offset to be the earlier or later one during an overlap.\n * \n * @param instant  the instant to adjust\n * @param earlierOrLater  false for earlier, true for later\n * @return the adjusted instant millis\n */\npublic long adjustOffset(long instant, boolean earlierOrLater) {\n    // evaluate 3 hours before and after to work out if anything is happening\n    long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    \n    if (instantBefore == instantAfter) {\n        return instant;  // not an overlap (less than is a gap, equal is normal case)\n    }\n    \n    // work out range of instants that have duplicate local times\n    long local = convertUTCToLocal(instant);\n    \n    // Determine the correct offset based on the input instant's offset\n    long offsetBefore = getOffset(instantBefore);\n    long offsetAfter = getOffset(instantAfter);\n    long inputOffset = getOffset(local);\n    \n    if (earlierOrLater) {\n        // Return the instant with the later offset, unless the input instant is already in the later offset\n        return (inputOffset == offsetAfter)? instant : convertLocalToUTC(local, false, instantAfter);\n    } else {\n        // Return the instant with the earlier offset, unless the input instant is already in the earlier offset\n        return (inputOffset == offsetBefore)? instant : convertLocalToUTC(local, false, instantBefore);\n    }\n}\n\n// Assuming the existence of the following methods, as they are not provided in the original code snippet\n// long convertUTCToLocal(long instant);\n// long convertLocalToUTC(long local, boolean lenient, long referenceInstant);\n// long getOffset(long instant);",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}