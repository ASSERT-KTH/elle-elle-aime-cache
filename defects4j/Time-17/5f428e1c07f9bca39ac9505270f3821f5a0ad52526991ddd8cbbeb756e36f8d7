{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // evaluate 3 hours before and after to work out if anything is happening\n        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        if (instantBefore == instantAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n        \n        // work out range of instants that have duplicate local times\n        long local = convertUTCToLocal(instant);\n        long adjustedInstant = convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n        \n        // If we're in an overlap, ensure we return the correct offset\n        if (convertUTCToLocal(adjustedInstant) != local) {\n            // If the conversion didn't preserve the local time, we need to adjust\n            adjustedInstant = convertLocalToUTC(local, false, earlierOrLater ? instant + 1 : instant - 1);\n        }\n        \n        return adjustedInstant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}