{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // Check for overlap situation by evaluating local time before and after a given range\n        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        if (instantBefore == instantAfter) {\n            return instant;  // not an overlap (case of a gap or normal offset)\n        }\n\n        // Determine the local time for the given instant\n        long local = convertUTCToLocal(instant);\n\n        // Convert back to UTC, resolving the overlap based on the flag earlierOrLater\n        long earlierInstant = convertLocalToUTC(local, false, instantBefore);\n        long laterInstant = convertLocalToUTC(local, false, instantAfter);\n        \n        // Return the appropriate instant depending on earlierOrLater flag\n        if (earlierOrLater) {\n            // Later offset\n            if (instant == earlierInstant) {\n                return laterInstant;\n            }\n        } else {\n            // Earlier offset\n            if (instant == laterInstant) {\n                return earlierInstant;\n            }\n        }\n        return instant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}