{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        \n        // evaluate instant before and after the overlap to determine transition points\n        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        \n        long offsetBefore = getOffset(instantBefore);\n        long offsetAfter = getOffset(instantAfter);\n        \n        // if there's no offset difference, it's not an overlap\n        if (offsetBefore == offsetAfter) {\n            return instant;\n        }\n\n        // work out the local time\n        long local = instant + offsetBefore;\n\n        // determine which offset to apply\n        long adjustedOffset = earlierOrLater ? offsetAfter : offsetBefore;\n\n        // calculate and return the adjusted instant\n        long adjustedInstant = local - adjustedOffset;\n\n        // if the result is still within the overlap range, return it\n        if (getOffset(adjustedInstant) == adjustedOffset) {\n            return adjustedInstant;\n        } else {\n            // otherwise, return the original instant as a fallback\n            return instant;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}