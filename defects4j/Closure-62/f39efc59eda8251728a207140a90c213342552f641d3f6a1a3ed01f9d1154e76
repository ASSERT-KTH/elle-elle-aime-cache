{
    "generation": "private String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null :\n            source.getExcerpt(error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName != null) {\n        b.append(error.sourceName);\n        if (error.lineNumber > 0) {\n            b.append(':');\n            b.append(error.lineNumber);\n            b.append(':');\n        }\n        b.append(' ');\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append('\\n');\n    if (sourceExcerpt != null) {\n        b.append(sourceExcerpt);\n        b.append('\\n');\n        int charno = error.getCharno() - 1;\n\n        // Appending ' ' for each character up to the error position and '^' at the end\n        if (0 <= charno && charno < sourceExcerpt.length()) {\n            for (int i = 0; i < charno; i++) {\n                if (sourceExcerpt.charAt(i) == '\\t') {\n                    b.append('\\t');\n                } else {\n                    b.append(' ');\n                }\n            }\n            b.append(\"^\\n\");\n        }\n    }\n    return b.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}