{
    "generation": "/**\n * Fixes the formatting of error messages when the error character index is at the end of the line.\n * \n * @param error    the JSError object containing error details\n * @param warning  boolean indicating if the error is a warning\n * @return formatted error message as a string\n */\nprivate String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null? null :\n        excerpt.get(\n            source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName!= null) {\n        b.append(error.sourceName);\n        if (error.lineNumber > 0) {\n            b.append(':');\n            b.append(error.lineNumber);\n        }\n        b.append(\": \");\n    }\n\n    b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append('\\n');\n    if (sourceExcerpt!= null) {\n        b.append(sourceExcerpt);\n        b.append('\\n');\n        int charno = error.getCharno();\n\n        // Fix: handle cases where charno is equal to sourceExcerpt length (end of line)\n        if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) {\n            for (int i = 0; i < (charno == sourceExcerpt.length()? charno - 1 : charno); i++) {\n                char c = sourceExcerpt.charAt(i);\n                if (Character.isWhitespace(c)) {\n                    b.append(c);\n                } else {\n                    b.append(' ');\n                }\n            }\n            // Add caret only if not at the very end of the excerpt (to avoid extra space)\n            if (charno < sourceExcerpt.length() || sourceExcerpt.endsWith(\" \")) {\n                b.append(\"^\\n\");\n            } else {\n                b.append(\"\\n\"); // or just append nothing if you don't want an extra newline\n            }\n        }\n    }\n    return b.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}