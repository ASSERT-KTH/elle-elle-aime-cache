{
    "generation": "private String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null :\n        excerpt.get(\n            source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName != null) {\n      b.append(error.sourceName);\n      if (error.lineNumber > 0) {\n        b.append(':');\n        b.append(error.lineNumber);\n      }\n      b.append(\": \");\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append('\\n');\n    if (sourceExcerpt != null) {\n      b.append(sourceExcerpt);\n      b.append('\\n');\n      int charno = error.getCharno();\n\n      // padding equal to the excerpt and arrow at the end\n      if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) {\n        int pad = 0;\n        for (int i = 0; i < charno; i++) {\n          char c = sourceExcerpt.charAt(i);\n          if (c == '\\t') {\n            pad = (pad / LENGTH_OF_TAB + 1) * LENGTH_OF_TAB;\n          } else {\n            pad++;\n          }\n        }\n        b.append(StringUtils.repeat(' ', pad));\n        b.append(\"^\\n\");\n      }\n    }\n    return b.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}