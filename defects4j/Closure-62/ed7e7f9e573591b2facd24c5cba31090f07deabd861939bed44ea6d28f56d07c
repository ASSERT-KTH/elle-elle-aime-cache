{
    "generation": "private String format(JSError error, boolean warning) {\n    // Extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null :\n        excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // Formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName != null) {\n        b.append(error.sourceName);\n        if (error.lineNumber > 0) {\n            b.append(':').append(error.lineNumber);\n        }\n        b.append(\": \");\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n    b.append(error.description);\n    b.append('\\n');\n\n    if (sourceExcerpt != null) {\n        b.append(sourceExcerpt);\n        b.append('\\n');\n\n        int charno = error.getCharno();\n\n        // Adjust charno if it's beyond the source excerpt length\n        if (charno >= sourceExcerpt.length()) {\n            charno = sourceExcerpt.length() - 1;\n        }\n\n        // Calculate the column number\n        int column = 0;\n        for (int i = 0; i < charno; i++) {\n            if (sourceExcerpt.charAt(i) == '\\t') {\n                column += (tabSize - (column % tabSize));\n            } else {\n                column++;\n            }\n        }\n\n        // Append spaces up to the error column\n        for (int i = 0; i < column; i++) {\n            b.append(' ');\n        }\n        b.append(\"^\\n\");\n    }\n\n    return b.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}