{
    "generation": "/**\n * Attempts to minimize the number of explicit exit points in a control\n * structure to take advantage of the implied exit at the end of the\n * structure.  This is accomplished by removing redundant statements, and\n * moving statements following a qualifying IF node into that node.\n * For example:\n *\n * function () {\n *   if (x) return;\n *   else blah();\n *   foo();\n * }\n *\n * becomes:\n *\n * function () {\n *  if (x) ;\n *  else {\n *    blah();\n *    foo();\n *  }\n *\n * @param n The execution node of a parent to inspect.\n * @param exitType The type of exit to look for.\n * @param labelName If parent is a label the name of the label to look for,\n *   null otherwise.\n * @nullable labelName non-null only for breaks within labels.\n */\nvoid tryMinimizeExits(Node n, int exitType, String labelName) {\n\n    // Just an 'exit'.\n    if (matchingExitNode(n, exitType, labelName)) {\n        if (!isFinallyExitRemovable(n, labelName)) {\n            return;\n        }\n        NodeUtil.removeChild(n.getParent(), n);\n        compiler.reportCodeChange();\n        return;\n    }\n\n    //... (rest of the code remains the same)\n\n}\n\nprivate boolean isFinallyExitRemovable(Node n, String labelName) {\n    if (!n.isBlock()) {\n        return true;\n    }\n\n    if (labelName!= null) {\n        if (n.getParent().isLabel() && labelName.equals(n.getParent().getString())) {\n            Node nextStatement = n.getNext();\n            if (nextStatement == null ||!nextStatement.isBlock()) {\n                return false;\n            }\n        }\n    }\n\n    if (NodeUtil.isStatementBlockInFinallyNode(n)) {\n        if (!NodeUtil.canMinimizeFinalReturnInBlock(n.getLastChild())) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// This is NodeUtil function, so need to declare isStatementBlockInFinallyNode function.\nprivate static boolean isStatementBlockInFinallyNode(Node node) {\n    Node currentNode = node.getParent();\n    while (currentNode!= null &&!currentNode.isFunction()) {\n        if (currentNode.isFinally() || currentNode.isBlock() || currentNode.isFunction()) {\n            return currentNode.isFinally();\n        }\n        currentNode = currentNode.getParent();\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}