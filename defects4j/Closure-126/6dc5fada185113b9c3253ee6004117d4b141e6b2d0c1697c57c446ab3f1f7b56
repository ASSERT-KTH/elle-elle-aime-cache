{
    "generation": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n\n  // A 'return' or 'throw' node.\n  if (matchingExitNode(n, exitType, labelName)) {\n    if (n.getParent().isTry() && !n.getParent().getLastChild().isFinally()) {\n      // Replace with a throw statement.\n      n.putBooleanProp(Node.REMOVED, true);\n      n = new Node(IR.THROW);\n      NodeUtil.addChildToFront(n, IR.UNDEFINED, compiler);\n      NodeUtil.replaceChild(n.getParent(), n, compiler);\n      compiler.reportCodeChange();\n    } else {\n      // Remove the exit node.\n      NodeUtil.removeChild(n.getParent(), n);\n      compiler.reportCodeChange();\n      return;\n    }\n  }\n\n  // Node types where we can try to minimize exits.\n  switch (n.getToken()) {\n    case IF:\n        Node ifBlock = n.getFirstChild().getNext();\n        tryMinimizeExits(ifBlock, exitType, labelName);\n        Node elseBlock = ifBlock.getNext();\n        if (elseBlock != null) {\n            tryMinimizeExits(elseBlock, exitType, labelName);\n        }\n        break;\n\n    case TRY:\n        Node tryBlock = n.getFirstChild();\n        tryMinimizeExits(tryBlock, exitType, labelName);\n        if (NodeUtil.hasCatchHandler(n)) {\n            Node catchNode = NodeUtil.getCatchBlock(n).getFirstChild();\n            Node catchCodeBlock = catchNode.getLastChild();\n            tryMinimizeExits(catchCodeBlock, exitType, labelName);\n        }\n        if (NodeUtil.hasFinally(n)) {\n            Node finallyBlock = n.getLastChild();\n            tryMinimizeExits(finallyBlock, exitType, labelName);\n        }\n        break;\n\n    case LABEL:\n        Node labelBlock = n.getLastChild();\n        tryMinimizeExits(labelBlock, exitType, labelName);\n        break;\n\n    // The rest assumes a block with at least one child.\n    default:\n        if (n.isBlock() && n.getLastChild() != null) {\n            for (Node c : n.children()) {\n                if (c.isIf()) {\n                    Node ifTree = c;\n                    Node trueBlock = ifTree.getFirstChild().getNext();\n                    Node falseBlock = trueBlock.getNext();\n\n                    tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);\n\n                    trueBlock = ifTree.getFirstChild().getNext();\n                    falseBlock = trueBlock.getNext();\n                    if (falseBlock != null) {\n                        tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);\n                    }\n                }\n            }\n\n            for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n                tryMinimizeExits(c, exitType, labelName);\n                if (c == n.getLastChild()) {\n                    break;\n                }\n            }\n        }\n        break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}