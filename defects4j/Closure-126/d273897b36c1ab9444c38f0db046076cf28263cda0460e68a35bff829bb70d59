{
    "generation": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n    // Just an 'exit'.\n    if (matchingExitNode(n, exitType, labelName)) {\n        NodeUtil.removeChild(n.getParent(), n);\n        compiler.reportCodeChange();\n        return;\n    }\n\n    // Just an 'if'.\n    if (n.isIf()) {\n        Node ifBlock = n.getFirstChild().getNext();\n        tryMinimizeExits(ifBlock, exitType, labelName);\n        Node elseBlock = ifBlock.getNext();\n        if (elseBlock != null) {\n            tryMinimizeExits(elseBlock, exitType, labelName);\n        }\n        return;\n    }\n\n    // Just a 'try/catch/finally'.\n    if (n.isTry()) {\n        Node tryBlock = n.getFirstChild();\n        tryMinimizeExits(tryBlock, exitType, labelName);\n        Node allCatchNodes = NodeUtil.getCatchBlock(n);\n        if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n            Preconditions.checkState(allCatchNodes.hasOneChild());\n            Node catchNode = allCatchNodes.getFirstChild();\n            Node catchCodeBlock = catchNode.getLastChild();\n            tryMinimizeExits(catchCodeBlock, exitType, labelName);\n        }\n        // Don't minimize exits in finally blocks\n        if (NodeUtil.hasFinally(n)) {\n            Node finallyBlock = n.getLastChild();\n            // Only minimize exits in finally if it's not a break or continue\n            if (exitType != Token.BREAK && exitType != Token.CONTINUE) {\n                tryMinimizeExits(finallyBlock, exitType, labelName);\n            }\n        }\n    }\n\n    // Just a 'label'.\n    if (n.isLabel()) {\n        Node labelBlock = n.getLastChild();\n        tryMinimizeExits(labelBlock, exitType, labelName);\n    }\n\n    // The rest assumes a block with at least one child, bail on anything else.\n    if (!n.isBlock() || n.getLastChild() == null) {\n        return;\n    }\n\n    // Multiple if-exits can be converted in a single pass.\n    // Convert \"if (blah) break;  if (blah2) break; other_stmt;\" to\n    // become \"if (blah); else { if (blah2); else { other_stmt; } }\"\n    // which will get converted to \"if (!blah && !blah2) { other_stmt; }\".\n    List<Node> ifNodes = new ArrayList<>();\n    Node lastNode = null;\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (c.isIf()) {\n            ifNodes.add(c);\n        } else {\n            lastNode = c;\n        }\n    }\n\n    if (!ifNodes.isEmpty()) {\n        Node outerIf = ifNodes.get(ifNodes.size() - 1);\n        Node currentIf = outerIf;\n        for (int i = ifNodes.size() - 2; i >= 0; i--) {\n            Node nextIf = ifNodes.get(i);\n            Node elseBlock = NodeUtil.getConditionExpression(currentIf).getNext().getNext();\n            if (elseBlock == null) {\n                elseBlock = new Node(Token.BLOCK);\n                currentIf.addChildAfter(elseBlock, currentIf.getLastChild());\n            }\n            elseBlock.addChildToFront(currentIf);\n            currentIf = nextIf;\n        }\n\n        if (lastNode != null) {\n            Node elseBlock = NodeUtil.getConditionExpression(currentIf).getNext().getNext();\n            if (elseBlock == null) {\n                elseBlock = new Node(Token.BLOCK);\n                currentIf.addChildAfter(elseBlock, currentIf.getLastChild());\n            }\n            elseBlock.addChildToFront(lastNode);\n            NodeUtil.removeChild(n, lastNode);\n        }\n\n        for (Node ifNode : ifNodes) {\n            Node trueBlock = NodeUtil.getConditionExpression(ifNode).getNext();\n            Node falseBlock = trueBlock.getNext();\n            tryMinimizeIfBlockExits(trueBlock, falseBlock, ifNode, exitType, labelName);\n            if (falseBlock != null) {\n                tryMinimizeIfBlockExits(falseBlock, trueBlock, ifNode, exitType, labelName);\n            }\n        }\n    }\n\n    // Now try to minimize the exits of the last child, if it is removed\n    // look at what has become the last child.\n    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n        tryMinimizeExits(c, exitType, labelName);\n        // If the node is still the last child, we are done.\n        if (c == n.getLastChild()) {\n            break;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}