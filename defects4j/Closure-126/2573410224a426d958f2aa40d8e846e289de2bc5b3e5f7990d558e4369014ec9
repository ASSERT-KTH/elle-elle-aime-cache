{
    "generation": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n    // Just an 'exit'.\n    if (matchingExitNode(n, exitType, labelName)) {\n        NodeUtil.removeChild(n.getParent(), n);\n        compiler.reportCodeChange();\n        return;\n    }\n\n    // Just an 'if'.\n    if (n.isIf()) {\n        Node ifBlock = n.getFirstChild().getNext();\n        tryMinimizeExits(ifBlock, exitType, labelName);\n        Node elseBlock = ifBlock.getNext();\n        if (elseBlock != null) {\n            tryMinimizeExits(elseBlock, exitType, labelName);\n        }\n        return;\n    }\n\n    // Handle 'try/catch/finally'.\n    if (n.isTry()) {\n        Node tryBlock = n.getFirstChild();\n        tryMinimizeExits(tryBlock, exitType, labelName);\n        \n        Node allCatchNodes = NodeUtil.getCatchBlock(n);\n        if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n            Preconditions.checkState(allCatchNodes.hasOneChild());\n            Node catchNode = allCatchNodes.getFirstChild();\n            Node catchCodeBlock = catchNode.getLastChild();\n            tryMinimizeExits(catchCodeBlock, exitType, labelName);\n        }\n        \n        if (NodeUtil.hasFinally(n)) {\n            Node finallyBlock = n.getLastChild();\n            // Don't try to minimize the exits of finally blocks to avoid changing the completion type\n            // See ECMA 262 Sections 8.9 & 12.14\n        }\n    }\n\n    // Just a 'label'.\n    if (n.isLabel()) {\n        Node labelBlock = n.getLastChild();\n        tryMinimizeExits(labelBlock, exitType, labelName);\n    }\n\n    // TODO(johnlenz): The last case of SWITCH statement?\n\n    // The rest assumes a block with at least one child, bail on anything else.\n    if (!n.isBlock() || n.getLastChild() == null) {\n        return;\n    }\n\n    // Multiple if-exits can be converted in a single pass.\n    // Convert \"if (blah) break;  if (blah2) break; other_stmt;\" to\n    // become \"if (blah); else { if (blah2); else { other_stmt; } }\"\n    // which will get converted to \"if (!blah && !blah2) { other_stmt; }\".\n    List<Node> toRemove = new ArrayList<>();\n    Node lastIf = null;\n    Node lastFalseBlock = null;\n\n    for (Node c : n.children()) {\n        if (c.isIf()) {\n            Node ifTree = c;\n            Node trueBlock = ifTree.getFirstChild().getNext();\n            Node falseBlock = trueBlock.getNext();\n\n            // Process true block\n            tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);\n\n            // Process false block if it exists\n            if (falseBlock != null) {\n                tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);\n            }\n\n            // Chain if statements\n            if (lastIf != null && lastFalseBlock != null) {\n                Node newIf = NodeUtil.newIf(trueBlock.removeFirstChild(), falseBlock);\n                lastFalseBlock.replaceChild(lastFalseBlock.getLastChild(), newIf);\n                lastFalseBlock = newIf.getLastChild();\n                toRemove.add(ifTree);\n            }\n\n            lastIf = ifTree;\n            lastFalseBlock = falseBlock;\n        }\n    }\n\n    // Remove processed if statements\n    for (Node remove : toRemove) {\n        NodeUtil.removeChild(n, remove);\n    }\n\n    // Now try to minimize the exits of the last child, if it is removed\n    // look at what has become the last child.\n    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n        tryMinimizeExits(c, exitType, labelName);\n        // If the node is still the last child, we are done.\n        if (c == n.getLastChild()) {\n            break;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}