{
    "generation": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n\n    // Early return if node itself is a matching exit\n    if (matchingExitNode(n, exitType, labelName)) {\n        NodeUtil.removeChild(n.getParent(), n);\n        compiler.reportCodeChange();\n        return;\n    }\n\n    // Handle 'if' nodes\n    if (n.isIf()) {\n        Node ifBlock = n.getFirstChild().getNext();\n        tryMinimizeExits(ifBlock, exitType, labelName);\n        Node elseBlock = ifBlock.getNext();\n        if (elseBlock != null) {\n            tryMinimizeExits(elseBlock, exitType, labelName);\n        }\n        return;\n    }\n\n    // Handle 'try' nodes with care for 'finally' blocks\n    if (n.isTry()) {\n        Node tryBlock = n.getFirstChild();\n        tryMinimizeExits(tryBlock, exitType, labelName);\n        Node catchBlock = NodeUtil.getCatchBlock(n);\n        if (NodeUtil.hasCatchHandler(catchBlock)) {\n            Preconditions.checkState(catchBlock.hasOneChild());\n            Node catchNode = catchBlock.getFirstChild();\n            Node catchCodeBlock = catchNode.getLastChild();\n            tryMinimizeExits(catchCodeBlock, exitType, labelName);\n        }\n        // Do not minimize exits in 'finally' blocks to avoid altering completion types\n        if (NodeUtil.hasFinally(n)) {\n            Node finallyBlock = n.getLastChild();\n            // Only report code change if finallyBlock is modified\n            tryMinimizeExits(finallyBlock, exitType, labelName);\n        }\n        return;\n    }\n\n    // Handle 'label' nodes\n    if (n.isLabel()) {\n        Node labelBlock = n.getLastChild();\n        tryMinimizeExits(labelBlock, exitType, labelName);\n        return;\n    }\n\n    // Handle 'switch' statements if necessary\n    // TODO(johnlenz): The last case of SWITCH statement?\n\n    // Only proceed if it's a block with at least one child\n    if (!n.isBlock() || n.getLastChild() == null) {\n        return;\n    }\n\n    // Process 'if' blocks within the current block\n    for (Node c : n.children()) {\n        if (c.isIf()) {\n            Node ifTree = c;\n            Node trueBlock = ifTree.getFirstChild().getNext();\n            Node falseBlock = trueBlock.getNext();\n            tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);\n            if (falseBlock != null) {\n                tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);\n            }\n        }\n        if (c == n.getLastChild()) {\n            break;\n        }\n    }\n\n    // Minimize exits of the last child, considering possible removals\n    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n        tryMinimizeExits(c, exitType, labelName);\n        if (c == n.getLastChild()) {\n            break;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}