{
    "generation": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n    // Just an 'exit'.\n    if (matchingExitNode(n, exitType, labelName)) {\n        NodeUtil.removeChild(n.getParent(), n);\n        compiler.reportCodeChange();\n        return;\n    }\n\n    // Just an 'if'.\n    if (n.isIf()) {\n        Node ifBlock = n.getFirstChild().getNext();\n        tryMinimizeExits(ifBlock, exitType, labelName);\n        Node elseBlock = ifBlock.getNext();\n        if (elseBlock != null) {\n            tryMinimizeExits(elseBlock, exitType, labelName);\n        }\n        return;\n    }\n\n    // Just a 'try/catch/finally'.\n    if (n.isTry()) {\n        Node tryBlock = n.getFirstChild();\n        tryMinimizeExits(tryBlock, exitType, labelName);\n        Node allCatchNodes = NodeUtil.getCatchBlock(n);\n        if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n            Preconditions.checkState(allCatchNodes.hasOneChild());\n            Node catchNode = allCatchNodes.getFirstChild();\n            Node catchCodeBlock = catchNode.getLastChild();\n            tryMinimizeExits(catchCodeBlock, exitType, labelName);\n        }\n        // Don't minimize exits in finally blocks\n        if (NodeUtil.hasFinally(n)) {\n            Node finallyBlock = n.getLastChild();\n            // We still need to process the finally block, but don't minimize its exits\n            processFinally(finallyBlock);\n        }\n        return;\n    }\n\n    // Just a 'label'.\n    if (n.isLabel()) {\n        Node labelBlock = n.getLastChild();\n        tryMinimizeExits(labelBlock, exitType, labelName);\n        return;\n    }\n\n    // The rest assumes a block with at least one child, bail on anything else.\n    if (!n.isBlock() || n.getLastChild() == null) {\n        return;\n    }\n\n    // Multiple if-exits can be converted in a single pass.\n    for (Node c : n.children()) {\n        if (c.isIf()) {\n            Node ifTree = c;\n            Node trueBlock = ifTree.getFirstChild().getNext();\n            Node falseBlock = trueBlock.getNext();\n            tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);\n\n            // The if blocks may have changed, get them again.\n            trueBlock = ifTree.getFirstChild().getNext();\n            falseBlock = trueBlock.getNext();\n            if (falseBlock != null) {\n                tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);\n            }\n        }\n\n        if (c == n.getLastChild()) {\n            break;\n        }\n    }\n\n    // Now try to minimize the exits of the last child, if it is removed\n    // look at what has become the last child.\n    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n        tryMinimizeExits(c, exitType, labelName);\n        // If the node is still the last child, we are done.\n        if (c == n.getLastChild()) {\n            break;\n        }\n    }\n}\n\nprivate void processFinally(Node finallyBlock) {\n    for (Node c = finallyBlock.getFirstChild(); c != null; c = c.getNext()) {\n        if (c.isIf() || c.isBlock() || c.isTry() || c.isLabel()) {\n            tryMinimizeExits(c, Token.RETURN, null);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}