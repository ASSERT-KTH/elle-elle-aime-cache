{
    "generation": "public String getDescription() {\n    if (_desc == null) {\n        StringBuilder sb = new StringBuilder();\n\n        if (_from == null) { // can this ever occur?\n            sb.append(\"UNKNOWN\");\n        } else {\n            String className = getName(_from);\n            if (className!= null) {\n                sb.append(className);\n            }\n        }\n        sb.append('[');\n        if (_fieldName!= null) {\n            sb.append('\"');\n            sb.append(_fieldName);\n            sb.append('\"');\n        } else if (_index >= 0) {\n            sb.append(_index);\n        } else {\n            sb.append('?');\n        }\n        sb.append(']');\n        _desc = sb.toString();\n    }\n    return _desc;\n}\n\n// Helper method to get the fully qualified class name, \n// including outer class for inner classes\nprivate String getName(Object _from) {\n    Class<?> cls = (_from instanceof Class<?>)? (Class<?>)_from : _from.getClass();\n    String pkgName = com.fasterxml.jackson.databind.util.ClassUtil.getPackageName(cls);\n    if (pkgName!= null) {\n        return pkgName + '.' + getFullyQualifiedClassName(cls);\n    }\n    return getFullyQualifiedClassName(cls);\n}\n\n// Helper method to get the fully qualified class name, \n// including outer class for inner classes\nprivate String getFullyQualifiedClassName(Class<?> cls) {\n    if (cls.isMemberClass() &&!java.lang.reflect.Modifier.isStatic(cls.getModifiers())) {\n        return getFullyQualifiedClassName(cls.getEnclosingClass()) + \"$\" + cls.getSimpleName();\n    }\n    return cls.getName();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}