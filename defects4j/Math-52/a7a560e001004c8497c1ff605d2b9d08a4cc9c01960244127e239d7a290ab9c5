{
    "generation": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // norms computation\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // normalize v1 in order to have (v1'|v1') = (u1|u1)\n    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n    double u1u2 = u1.dotProduct(u2);\n    double v1v2 = v1.dotProduct(v2);\n    double coeffU = u1u2 / u1u1;\n    double coeffV = v1v2 / v1v1;\n    double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n    double alpha = coeffU - beta * coeffV;\n    v2 = new Vector3D(alpha, v1, beta, v2);\n\n    // preliminary computation\n    Vector3D uRef = u1;\n    Vector3D vRef = v1;\n    Vector3D k = u1.crossProduct(u2).normalize();\n    Vector3D q3CrossU1 = v2.subtract(v1);\n\n    double c = k.dotProduct(q3CrossU1);\n    if (FastMath.abs(c) < 1.0e-10) {\n        // if the computation fell here it is due to numerical noise, thinking the vectors\n    \n        // are aligned. In this case, q3CrossU1 is mostly zeroed and we try\n        // with the original destination vectors\n        q3CrossU1 = u2.crossProduct(v2);\n        c = k.dotProduct(q3CrossU1);\n\n        if (FastMath.abs(c) < 1.0e-10) {\n            // the rotation is close to being along the (u1, v2) direction set only the scalar part\n            q0 = 1.0;\n            q1 = 0.0;\n            q2 = 0.0;\n            q3 = 0.0;\n            return;\n        }\n    }\n\n    // compute the vectorial part\n    double s = FastMath.sqrt((1.0 + c) * 2.0);\n    double invS = 1.0 / s;\n    q1 = q3CrossU1.getX() * invS;\n    q2 = q3CrossU1.getY() * invS;\n    q3 = q3CrossU1.getZ() * invS;\n\n    // and the scalar part\n    q0 = (1.0 / 2.0) * s;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}