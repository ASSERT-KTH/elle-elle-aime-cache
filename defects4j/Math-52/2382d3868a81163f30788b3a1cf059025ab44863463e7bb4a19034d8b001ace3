{
    "generation": "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // norms computation\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // normalize v1 in order to have (v1'|v1') = (u1|u1)\n    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n    double u1u2 = u1.dotProduct(u2);\n    double v1v2 = v1.dotProduct(v2);\n    double coeffU = u1u2 / u1u1;\n    double coeffV = v1v2 / u1u1;\n    double v2ProjectionNormSq = v2v2 - v1v2 * coeffV;\n\n    // Handle potential numerical issues when v2' becomes invalid (e.g., negative or zero denominator)\n    if (v2ProjectionNormSq <= 0) {\n        throw new IllegalArgumentException(\"Ill-posed rotation problem, unable to align specified vectors.\");\n    }\n\n    double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / v2ProjectionNormSq);\n    double alpha = coeffU - beta * coeffV;\n    v2 = new Vector3D(alpha, v1, beta, v2);\n\n    // preliminary computation\n    Vector3D uRef = u1;\n    Vector3D vRef = v1;\n    Vector3D k = u2.crossProduct(v2).subtract(u1.crossProduct(v1));\n\n    double normK = k.getNorm();\n    if (normK == 0) {\n        // degenerate case where vectors are coplanar and aligned\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n    }\n\n    // compute the vectorial part\n    double invNormK = 1.0 / normK;\n    q1 = invNormK * k.getX();\n    q2 = invNormK * k.getY();\n    q3 = invNormK * k.getZ();\n\n    // compute the scalar part\n    k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                     uRef.getZ() * q1 - uRef.getX() * q3,\n                     uRef.getX() * q2 - uRef.getY() * q1);\n\n    double normKsq = k.getNormSq();\n    if (normKsq == 0) {\n        throw new IllegalArgumentException(\"Unable to compute rotation scalar part, degenerate orientation.\");\n    }\n\n    q0 = vRef.dotProduct(k) / (2 * normKsq);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}