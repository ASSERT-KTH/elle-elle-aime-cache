{
    "generation": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n\n  if (FastMath.abs(c) <= 1.0e-10) {\n    // Special case: vectors are nearly parallel\n    Vector3D u1Normalized = u1.normalize();\n    Vector3D v1Normalized = v1.normalize();\n    double angle = FastMath.acos(u1Normalized.dotProduct(v1Normalized));\n    Vector3D axis = u1Normalized.crossProduct(v1Normalized);\n    if (axis.getNormSq() == 0) {\n      // Vectors are parallel\n      q0 = FastMath.cos(angle / 2);\n      q1 = 0.0;\n      q2 = 0.0;\n      q3 = FastMath.sin(angle / 2);\n    } else {\n      // Vectors are anti-parallel\n      axis = axis.normalize();\n      q0 = FastMath.cos(angle / 2);\n      q1 = axis.getX() * FastMath.sin(angle / 2);\n      q2 = axis.getY() * FastMath.sin(angle / 2);\n      q3 = axis.getZ() * FastMath.sin(angle / 2);\n    }\n    return;\n  }\n\n  // compute the vectorial part\n  c = FastMath.sqrt(FastMath.abs(c));\n  double inv = 1.0 / (2.0 * c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n\n  // compute the scalar part\n  k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                   uRef.getZ() * q1 - uRef.getX() * q3,\n                   uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}