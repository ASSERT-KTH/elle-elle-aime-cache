{
    "generation": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // norms computation\n    double u1u1 = u1.dotProduct(u1);\n    double u2u2 = u2.dotProduct(u2);\n    double v1v1 = v1.dotProduct(v1);\n    double v2v2 = v2.dotProduct(v2);\n    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n        throw new IllegalArgumentException(\"Zero norm for rotation defining vector\");\n    }\n\n    // normalize v1 in order to have (v1'|v1') = (u1|u1)\n    v1 = new Vector3D(Math.sqrt(u1u1 / v1v1), v1);\n\n    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n    double u1u2 = u1.dotProduct(u2);\n    double v1v2 = v1.dotProduct(v2);\n    double coeffU = u1u2 / u1u1;\n    double coeffV = v1v2 / u1u1;\n    double beta = Math.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n    double alpha = coeffU - beta * coeffV;\n    v2 = new Vector3D(alpha, v1, beta, v2);\n\n    // preliminary computation\n    Vector3D uRef = u1;\n    Vector3D vRef = v1;\n    Vector3D v1Su1 = v1.subtract(u1);\n    Vector3D v2Su2 = v2.subtract(u2);\n    Vector3D k = v1Su1.crossProduct(v2Su2);\n    Vector3D u3 = u1.crossProduct(u2);\n    double c = k.dotProduct(u3);\n    if (c == 0) {\n        // the (q1, q2, q3) vector is close to the (u1, u2) plane\n        // we try other vectors\n        Vector3D v3 = v1.crossProduct(v2);\n        Vector3D v3Su3 = v3.subtract(u3);\n        k = v1Su1.crossProduct(v3Su3);\n        Vector3D u2Prime = u1.crossProduct(u3);\n        c = k.dotProduct(u2Prime);\n\n        if (c == 0) {\n            // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n            // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n            k = v2Su2.crossProduct(v3Su3);\n            c = k.dotProduct(u2.crossProduct(u3));\n\n            if (c == 0) {\n                // the (q1, q2, q3) vector is aligned with everything\n                // this is really the identity rotation\n                q0 = 1.0;\n                q1 = 0.0;\n                q2 = 0.0;\n                q3 = 0.0;\n                return;\n            }\n\n            // we will have to use u2 and v2 to compute the scalar part\n            uRef = u2;\n            vRef = v2;\n        }\n    }\n\n    // compute the vectorial part\n    double scalar = 1.0 / (2.0 * Math.sqrt(c * c));\n    q1 = scalar * k.getX();\n    q2 = scalar * k.getY();\n    q3 = scalar * k.getZ();\n\n    // compute the scalar part\n    k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                      uRef.getZ() * q1 - uRef.getX() * q3,\n                      uRef.getX() * q2 - uRef.getY() * q1);\n    q0 = vRef.dotProduct(k) / (2 * k.dotProduct(k));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}