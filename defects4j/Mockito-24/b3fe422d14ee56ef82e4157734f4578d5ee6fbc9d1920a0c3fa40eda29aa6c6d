{
    "generation": "/* (non-Javadoc)\n * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)\n */\npublic Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockName(mock) + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n        // If references are the same, return 0; otherwise, return a non-zero value.\n        Object argument = invocation.getArguments()[0];\n        Object mock = invocation.getMock();\n        return argument == mock? 0 : 1;\n    }\n    \n    Class<?> returnType = invocation.getMethod().getReturnType();\n    return returnValueFor(returnType);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}