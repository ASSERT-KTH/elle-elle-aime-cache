{
    "generation": "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod()) &&\n               invocation.getArguments().length == 1 &&\n               invocation.getArguments()[0].equals(invocation.getMock())) {\n        // If the mock is compared to itself, return 0\n        return 0;\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n        // For other compareTo() calls, return 1 (anything but 0 is good)\n        return 1;\n    }\n\n    Class<?> returnType = invocation.getMethod().getReturnType();\n    return returnValueFor(returnType);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}