{
    "generation": "protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokensBuffered = new TokenBuffer(p, ctxt);\n    tokensBuffered.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken();\n\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null && buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n            // We're done with all creator properties. Other properties will be deserialized later.\n            continue;\n        }\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n\n        SettableBeanProperty beanProp = _beanProperties.find(propName);\n        if (beanProp != null && beanProp.findDeserializeAndSettable()) {\n            try {\n                buffer.bufferProperty(beanProp, beanProp.deserialize(p, ctxt));\n            } catch (Exception e) {\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n            }\n            continue;\n        }\n\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n\n        tokensBuffered.writeFieldName(propName);\n        tokensBuffered.copyCurrentStructure(p);\n\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n\n    tokensBuffered.writeEndObject();\n\n    try {\n        Object bean = creator.build(ctxt, buffer);\n        TokenBuffer unwrappedTokens = tokenBufferForObject(p);\n        unwrappedTokens.writeStartObject();\n        unwrappedTokens.copyCurrentStructure(tokensBuffered);\n        unwrappedTokens.writeEndObject();\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, unwrappedTokens);\n    } catch (Exception e) {\n        return wrapInstantiationProblem(e, ctxt);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}