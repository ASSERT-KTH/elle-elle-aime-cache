{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingProperty-BasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException {\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    continue;\n                }\n                tokens = new TokenBuffer(p, ctxt);\n                tokens.writeStartObject();\n                // Continue processing remaining properties\n                while (t == JsonToken.FIELD_NAME) {\n                    String remainingPropName = p.getCurrentName();\n                    p.nextToken();\n                    handleRemainingProperty(p, ctxt, tokens, buffer, bean, remainingPropName);\n                    t = p.nextToken();\n                }\n                tokens.writeEndObject();\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular property? needs buffering\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        // \"any property\"?\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n\n    // We hit END_OBJECT, so:\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        return wrapInstantiationProblem(e, ctxt);\n    }\n    tokens.writeEndObject();\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}\n\nprivate void handleRemainingProperty(JsonParser p, DeserializationContext ctxt, TokenBuffer tokens, \n        PropertyValueBuffer buffer, Object bean, String propName) throws IOException {\n    tokens.writeFieldName(propName);\n    tokens.copyCurrentStructure(p);\n    SettableBeanProperty prop = _beanProperties.find(propName);\n    if (prop != null) {\n        prop.set(bean, prop.deserialize(p, ctxt));\n    } else if (_anySetter != null) {\n        _anySetter.set(bean, propName, _anySetter.deserialize(p, ctxt));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}