{
    "generation": "protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException {\n    // Start builder and buffer\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n\n        // Creator property\n        if (creatorProp != null) {\n            if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    continue;\n                }\n\n                // Continue buffering remaining properties\n                while ((t = p.nextToken()) == JsonToken.FIELD_NAME) {\n                    propName = p.getCurrentName();\n                    p.nextToken(); // to point to value\n                    SettableBeanProperty prop = _beanProperties.find(propName);\n                    if (prop != null) {\n                        buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                    } else {\n                        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                            handleIgnoredProperty(p, ctxt, handledType(), propName);\n                        } else if (_anySetter != null) {\n                            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                        } else {\n                            tokens.writeFieldName(propName);\n                            tokens.copyCurrentStructure(p);\n                        }\n                    }\n                }\n\n                tokens.writeEndObject();\n\n                // Make sure the polymorphic type is correct\n                if (bean != null && bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n\n                // If unwrapped property handler is present, then we need to copy remaining tokens\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n        }\n        // Object Id property\n        else if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // Regular property\n        else {\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            } else {\n                if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                    handleIgnoredProperty(p, ctxt, handledType(), propName);\n                } else if (_anySetter != null) {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } else {\n                    tokens.writeFieldName(propName);\n                    tokens.copyCurrentStructure(p);\n                }\n            }\n        }\n    }\n\n    // End of object, so let's build the bean now\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        return wrapInstantiationProblem(e, ctxt);\n    }\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}