{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException {\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    boolean objectBuilt = false;\n    Object bean = null;\n\n    JsonToken t = p.getCurrentToken();\n    while (t == JsonToken.FIELD_NAME) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n\n        // Check if it's a creator property\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));\n            if (buffer.allParametersAssigned()) {\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n                objectBuilt = true;\n            }\n        } else {\n            // Not a creator property, buffer it\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            } else if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n            } else {\n                // Copy unknown property to token buffer\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n            }\n        }\n\n        t = p.nextToken();\n    }\n\n    // If the object wasn't built yet, build it now\n    if (!objectBuilt && buffer.allParametersAssigned()) {\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n    }\n\n    // Process unwrapped properties\n    if (bean != null) {\n        if (bean.getClass() != _beanType.getRawClass()) {\n            ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n            return null;\n        }\n        tokens.writeEndObject();\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}