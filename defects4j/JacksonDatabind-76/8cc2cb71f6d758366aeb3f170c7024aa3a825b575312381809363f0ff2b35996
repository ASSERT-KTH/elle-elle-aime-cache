{
    "generation": "\nfor (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n\n    String propName = p.getCurrentName();\n\n    p.nextToken(); // to point to value\n\n    // creator property?\n\n    SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n\n    if (creatorProp != null) {\n\n        if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n\n            t = p.nextToken();\n\n            Object bean;\n\n            try {\n\n                bean = creator.build(ctxt, buffer);\n\n            } catch (Exception e) {\n\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n\n                continue;\n\n            }\n\n            while (t == JsonToken.FIELD_NAME) {\n\n                p.nextToken();\n\n                tokens.copyCurrentStructure(p);\n\n                t = p.nextToken();\n\n            }\n\n            tokens.writeEndObject();\n\n            if (bean.getClass() != _beanType.getRawClass()) {\n\n                ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n\n                return null;\n\n            }\n\n            return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n\n        }\n\n        continue;\n\n    }\n\n    // Object Id property?\n\n    if (buffer.readIdProperty(propName)) {\n\n        continue;\n\n    }\n\n    // regular property? needs buffering\n\n    SettableBeanProperty prop = _beanProperties.find(propName);\n\n    if (prop != null) {\n\n        buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n\n        continue;\n\n    }\n\n    if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n\n        handleIgnoredProperty(p, ctxt, handledType(), propName);\n\n        continue;\n\n    }\n\n    tokens.writeFieldName(propName);\n\n    tokens.copyCurrentStructure(p);\n\n    // \"any property\"?\n\n    if (_anySetter != null) {\n\n        buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n\n    }\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}