{
    "generation": "private void inlineNonConstants(\n    Var v, ReferenceCollection referenceInfo,\n    boolean maybeModifiedArguments) {\n\n  int refCount = referenceInfo.references.size();\n  Reference declaration = referenceInfo.references.get(0);\n  Reference init = referenceInfo.getInitializingReference();\n  int firstRefAfterInit = (declaration == init) ? 2 : 1;\n\n  if (refCount > firstRefAfterInit &&\n      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n    Node value;\n    if (init != null) {\n      value = init.getAssignedValue();\n    } else {\n      Node srcLocation = declaration.getNode();\n      value = NodeUtil.newUndefinedNode(srcLocation);\n    }\n    Preconditions.checkNotNull(value);\n    inlineWellDefinedVariable(v, value, referenceInfo.references);\n    staleVars.add(v);\n  } else if (refCount == 2 && referenceInfo.references.get(firstRefAfterInit).isRead()) {\n    // The variable likely only read once, attempt inlining.\n    Node value = init.getAssignedValue();\n    Preconditions.checkNotNull(value);\n    inlineWellDefinedVariable(v, value, referenceInfo.references);\n    staleVars.add(v);\n  } else if (declaration != init && refCount == 1) {\n    if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n      Node value = init.getAssignedValue();\n      Preconditions.checkNotNull(value);\n      inlineWellDefinedVariable(v, value, referenceInfo.references);\n      staleVars.add(v);\n    }\n  }\n\n  // If this variable was not inlined normally, check if we can\n  // inline an alias of it.\n  if (!maybeModifiedArguments &&\n      !staleVars.contains(v) &&\n      referenceInfo.isWellDefined() &&\n      referenceInfo.isAssignedOnceInLifetime()) {\n      List<Reference> refs = referenceInfo.references;\n      for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n          Node nameNode = refs.get(i).getNode();\n          if (aliasCandidates.containsKey(nameNode)) {\n              AliasCandidate candidate = aliasCandidates.get(nameNode);\n              if (!staleVars.contains(candidate.alias) &&\n                  !isVarInlineForbidden(candidate.alias)) {\n                  Reference aliasInit;\n                  aliasInit = candidate.refInfo.getInitializingReference();\n                  Node value = (aliasInit != null)\n                      ? aliasInit.getAssignedValue()\n                      : NodeUtil.newUndefinedNode(candidate.refInfo.references.get(0).getNode());\n                  Preconditions.checkNotNull(value);\n                  inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);\n                  staleVars.add(candidate.alias);\n              }\n          }\n      }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}