{
    "generation": "private void inlineNonConstants(\n    Var v, ReferenceCollection referenceInfo,\n    boolean maybeModifiedArguments) {\n  int refCount = referenceInfo.references.size();\n  Reference declaration = referenceInfo.references.get(0);\n  Reference init = referenceInfo.getInitializingReference();\n  int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n  // Check if the variable is modified after it's first referenced\n  boolean isModifiedAfterFirstRef = false;\n  if(init != null){\n    for(int i = referenceInfo.references.indexOf(init) + 1; i < referenceInfo.references.size(); i++){\n      if(referenceInfo.references.get(i).isAssignment()){\n        isModifiedAfterFirstRef = true;\n        break;\n      }\n    }\n  }\n\n  if (refCount > 1 &&\n      isImmutableAndWellDefinedVariable(v, referenceInfo) &&\n      !isModifiedAfterFirstRef) {\n   .\n   .\n   .\n  }\n  ...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}