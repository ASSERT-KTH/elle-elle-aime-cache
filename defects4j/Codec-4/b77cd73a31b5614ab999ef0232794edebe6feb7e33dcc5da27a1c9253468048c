{
    "generation": "    /**\n     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * When encoding the line length is 0 (no chunking), and the encoding table is STANDARD_ENCODE_TABLE.\n     * </p>\n     * \n     * <p>\n     * When decoding all variants are supported.\n     * </p>\n     */\n    public Base64() {\n        this(0, new byte[0], false);\n    }\n\n    /**\n     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * When encoding the line length is given in the constructor, and the encoding table is STANDARD_ENCODE_TABLE.\n     * </p>\n     * \n     * <p>\n     * When decoding all variants are supported.\n     * </p>\n     * \n     * @param lineLength Each row of encoded data will be at most of the given length (rounded down to nearest multiple of 4). \n     *                   If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.\n     * @param lineSeparator The sequence of bytes used to separate chunks of encoded data.\n     * @param urlSafe True if URL-safe encoding should be used.\n     */\n    public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {\n        super(lineLength, lineSeparator);\n        if (urlSafe) {\n            this.encodeTable = URL_SAFE_ENCODE_TABLE;\n            this.decodeTable = URL_SAFE_DECODE_TABLE;\n        } else {\n            this.encodeTable = STANDARD_ENCODE_TABLE;\n            this.decodeTable = DECODE_TABLE;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}