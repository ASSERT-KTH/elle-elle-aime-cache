{
    "generation": "/**\n * Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.\n * The original document is not modified. Only elements from the dirt document's <code>body</code> are used.\n * @param dirtyDocument Untrusted base document to clean.\n * @return cleaned document.\n */\npublic Document clean(Document dirtyDocument) {\n    Validate.notNull(dirtyDocument);\n\n    Document clean = Document.createShell(dirtyDocument.baseUri());\n    copySafeNodes(dirtyDocument.body(), clean.body());\n\n    return clean;\n}\n\nprivate void copySafeNodes(Node source, Node dest) {\n    for (Node node : source.childNodes()) {\n        if (node instanceof Element) {\n            Element sourceEl = (Element) node;\n            if (whitelist.isSafeTag(sourceEl.tagName())) {\n                Element destChild = dest.appendChild(new Element(Tag.valueOf(sourceEl.tagName()), source.baseUri()));\n                destChild.attributes().addAll(sourceEl.attributes());\n                copySafeNodes(sourceEl, destChild);\n            }\n        } else if (node instanceof TextNode) {\n            dest.appendChild(new TextNode(((TextNode) node).getWholeText(), source.baseUri()));\n        } else if (node instanceof DataNode && whitelist.isSafeTag(source.tagName())) {\n            dest.appendChild(new DataNode(((DataNode) node).getWholeData(), source.baseUri()));\n        } else if (node instanceof Comment && whitelist.isSafeTag(source.tagName())) {\n            dest.appendChild(new Comment(((Comment) node).getData(), source.baseUri()));\n        } else if (node instanceof DocumentType) {\n            dest.appendChild(new DocumentType(((DocumentType) node).name(), ((DocumentType) node).publicId(), ((DocumentType) node).systemId(), source.baseUri()));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}