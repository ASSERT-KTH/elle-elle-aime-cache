{
    "generation": "/**\n * Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.\n * The original document is not modified. Only elements from the dirty document's <code>body</code> are used.\n * @param dirtyDocument Untrusted base document to clean.\n * @return cleaned document.\n */\npublic Document clean(Document dirtyDocument) {\n    Validate.notNull(dirtyDocument);\n\n    Document clean = Document.createShell(dirtyDocument.baseUri());\n    if (dirtyDocument.body()!= null && clean.body()!= null) { // added null checks\n        copySafeNodes(dirtyDocument.body(), clean.body());\n    } else if (dirtyDocument.body()!= null) { // handle case where clean body is null\n        Element cleanBody = clean.appendChild(Element.Tag.BODY); // create body if null\n        copySafeNodes(dirtyDocument.body(), cleanBody);\n    }\n\n    return clean;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}