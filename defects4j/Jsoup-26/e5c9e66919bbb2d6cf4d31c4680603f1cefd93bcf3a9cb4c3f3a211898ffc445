{
    "generation": "/**\n * Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.\n * The original document is not modified. Only elements from the dirt document's <code>body</code> are used.\n * \n * @param dirtyDocument Untrusted base document to clean.\n * @return cleaned document.\n */\npublic Document clean(Document dirtyDocument) {\n    Validate.notNull(dirtyDocument);\n\n    // Create a new, empty document (not just a shell) to ensure a body element exists\n    Document clean = new Document(dirtyDocument.baseUri());\n\n    // Check if the dirty document has a body before attempting to copy nodes\n    if (dirtyDocument.body()!= null) {\n        // Ensure the clean document has a body before copying nodes\n        if (clean.body() == null) {\n            clean.appendChild(Element.Tag.BODY.createElement());\n        }\n        copySafeNodes(dirtyDocument.body(), clean.body());\n    }\n\n    return clean;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}