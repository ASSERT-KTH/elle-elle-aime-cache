{
    "generation": "@Override\npublic KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n        JavaType type)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    KeyDeserializer deser = null;\n    if (_factoryConfig.hasKeyDeserializers()) {\n        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n        for (KeyDeserializers d : _factoryConfig.keyDeserializers()) {\n            deser = d.findKeyDeserializer(type, config, beanDesc);\n            if (deser != null) {\n                break;\n            }\n        }\n    }\n    // Here we'll check if the current deserializer was created by\n    // modifier or not. If it was, then no need to create a new one.\n    boolean enumDeserModified = deser != null\n        && deser.getClass() != StdKeyDeserializers.EnumKeyDeserializer.class;\n    // If the deserializer was not modified, that means the default one was used.\n    // In that case, let's check if we're dealing with an enum.\n    if (!enumDeserModified && type.isEnumType()) {\n        return _createEnumKeyDeserializer(ctxt, type);\n    }\n    // Only use the findStringBasedKeyDeserializer if the deserializer\n    // was not modified and was not an enum.\n    if (!enumDeserModified && deser == null) {\n        deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n    }\n    // Then post-processing\n    if (deser != null) {\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser = mod.modifyKeyDeserializer(config, type, deser);\n            }\n        }\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}