{
    "generation": "@Override\npublic KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n        JavaType type)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    KeyDeserializer deser = null;\n    if (_factoryConfig.hasKeyDeserializers()) {\n        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n        for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n            deser = d.findKeyDeserializer(type, config, beanDesc);\n            if (deser!= null) {\n                break;\n            }\n        }\n    }\n    if (deser == null) {\n        // Moved after post-processing for possible modifier handling\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                if (mod.modifyKeyDeserializer(config, type, null)!= null) {\n                    continue;\n                }\n            }\n        }\n        // Recheck for standard ones (like enum)\n        if (type.isEnumType()) {\n            return _createEnumKeyDeserializer(ctxt, type);\n        }\n        deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n    }\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            if ((deser = mod.modifyKeyDeserializer(config, type, deser)) == null) {\n                throw new JsonMappingException(ctxt, String.format(\n                        \"Deserialzier modifier '%s' of type '%s' returned null from call to modifyKeyDeserializer()\"\n                        + \" with no backup key deserializer known. Deserialization context being disabled for now\"\n                       , mod.getClass().getSuperclass().getName()\n                       , mod.getClass().getName()\n                        ));\n            }\n        }\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}