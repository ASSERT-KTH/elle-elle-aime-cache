{
    "generation": "@Override\npublic KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n        JavaType type) throws JsonMappingException {\n    final DeserializationConfig config = ctxt.getConfig();\n    KeyDeserializer deser = null;\n\n    if (_factoryConfig.hasKeyDeserializers()) {\n        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n        for (KeyDeserializers d : _factoryConfig.keyDeserializers()) {\n            deser = d.findKeyDeserializer(type, config, beanDesc);\n            if (deser != null) {\n                break;\n            }\n        }\n    }\n\n    // If no custom KeyDeserializer found:\n    if (deser == null) {\n        if (type.isEnumType()) {\n            // Handle enum types using modifiers or custom logic\n            deser = new KeyDeserializer() {\n                @Override\n                public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n                    Class<? extends Enum> enumClass = (Class<? extends Enum>) type.getRawClass();\n                    try {\n                        return Enum.valueOf(enumClass, key);\n                    } catch (IllegalArgumentException ex) {\n                        // Custom case-insensitive handling\n                        for (Enum<?> enumValue : enumClass.getEnumConstants()) {\n                            if (enumValue.name().equalsIgnoreCase(key)) {\n                                return enumValue;\n                            }\n                        }\n                        throw ctxt.weirdKeyException(enumClass, key,\n                                \"not one of the accepted values: \" + Arrays.toString(enumClass.getEnumConstants()));\n                    }\n                }\n            };\n        } else {\n            deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n        }\n    }\n\n    // Post-processing for additional modifiers\n    if (deser != null) {\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser = mod.modifyKeyDeserializer(config, type, deser);\n            }\n        }\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}