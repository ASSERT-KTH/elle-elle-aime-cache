{
    "generation": "@Override\npublic KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n        JavaType type)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    KeyDeserializer deser = null;\n    if (_factoryConfig.hasKeyDeserializers()) {\n        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n        for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n            deser = d.findKeyDeserializer(type, config, beanDesc);\n            if (deser != null) {\n                break;\n            }\n        }\n    }\n    // Fix:\n    // Move this block of code before the custom key deserializer is set\n    // to ensure that the EnumDeserializerModifier has a chance to modify it.\n    if (deser == null) {\n        if (type.isEnumType()) {\n            return _createEnumKeyDeserializer(ctxt, type);\n        }\n        // Fix:\n        // Instead of finding a generic string-based key deserializer, we\n        // should allow any custom deserializers set via the DeserializerModifier\n        // to be used here. This will give the EnumDeserializerModifier\n        // a chance to provide a custom key deserializer.\n        // deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n    }\n    // and then post-processing\n    if (deser != null) {\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser = mod.modifyKeyDeserializer(config, type, deser);\n            }\n        }\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}