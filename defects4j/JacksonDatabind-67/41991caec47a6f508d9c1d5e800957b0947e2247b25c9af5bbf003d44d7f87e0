{
    "generation": "@Override\npublic KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n        JavaType type)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    KeyDeserializer deser = null;\n    if (_factoryConfig.hasKeyDeserializers()) {\n        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n        for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n            deser = d.findKeyDeserializer(type, config, beanDesc);\n            if (deser != null) {\n                break;\n            }\n        }\n    }\n    // Check for enum type and use custom deserializer if available\n    if (deser == null && type.isEnumType()) {\n        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser = mod.modifyKeyDeserializer(config, type, StdKeyDeserializers.findStringBasedKeyDeserializer(config, type));\n                if (deser != null) {\n                    break;\n                }\n            }\n        }\n        if (deser == null) {\n            deser = _createEnumKeyDeserializer(ctxt, type);\n        }\n    }\n    // Fallback to standard deserializer if custom one is not found\n    if (deser == null) {\n        deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n    }\n    // Post-processing\n    if (deser != null) {\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser = mod.modifyKeyDeserializer(config, type, deser);\n            }\n        }\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}