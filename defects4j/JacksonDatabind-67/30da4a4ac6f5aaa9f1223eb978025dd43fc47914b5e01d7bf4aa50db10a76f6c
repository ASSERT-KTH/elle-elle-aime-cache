{
    "generation": "    @Override\n    public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        KeyDeserializer deser = null;\n        // First: handle custom deserializers (from module, annotations)\n        if (_factoryConfig.hasKeyDeserializers()) {\n            BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n            for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n                deser = d.findKeyDeserializer(type, config, beanDesc);\n                if (deser != null) {\n                    break;\n                }\n            }\n        }\n        // and then post-processing\n        if (deser != null) {\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    KeyDeserializer modDeser = mod.modifyKeyDeserializer(config, type, deser);\n                    if (modDeser != deser) {\n                        deser = modDeser;\n                        // [databind#164]: And handle recursive chaining here...\n                        if (_factoryConfig.hasDeserializerModifiers()) {\n                            for (BeanDeserializerModifier mod2 : _factoryConfig.deserializerModifiers()) {\n                                deser = mod2.modifyKeyDeserializer(config, type, deser);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // But if none found, need to use standard ones\n        if (deser == null) {\n            // the only non-standard thing is this:\n            if (type.isEnumType()) {\n                return _createEnumKeyDeserializer(ctxt, type);\n            }\n            deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n        }\n        return deser;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}