{
    "generation": "@Override\npublic KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n        JavaType type)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    KeyDeserializer deser = null;\n    if (_factoryConfig.hasKeyDeserializers()) {\n        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n        for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n            deser = d.findKeyDeserializer(type, config, beanDesc);\n            if (deser != null) {\n                break;\n            }\n        }\n    }\n    // the only non-standard thing is this:\n    if (deser == null) {\n        if (type.isEnumType()) {\n            return _createEnumKeyDeserializer(ctxt, type);\n        }\n        deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n    }\n    // and then post-processing\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            if (type.isEnumType()) {\n                // Ensure we apply the custom KeyDeserializer for enums\n                KeyDeserializer customKeyDeserializer = mod.modifyKeyDeserializer(config, type, deser);\n                if (customKeyDeserializer != null) {\n                    return customKeyDeserializer;\n                }\n            }\n        }\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}