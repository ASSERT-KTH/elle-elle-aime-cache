{
    "generation": "    @Override\n    public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException\n    {\n        final DeserializationConfig config = ctxt.getConfig();\n        KeyDeserializer deser = null;\n        if (_factoryConfig.hasKeyDeserializers()) {\n            BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n            for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n                deser = d.findKeyDeserializer(type, config, beanDesc);\n                if (deser != null) {\n                    break;\n                }\n            }\n        }\n        // the only non-standard thing is this:\n        if (deser == null) {\n            if (type.isEnumType()) {\n                deser = _createEnumKeyDeserializer(ctxt, type);\n            } else {\n                deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n            }\n        }\n        // and then post-processing\n        if (deser != null && _factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                KeyDeserializer originalDeser = deser;\n                deser = mod.modifyKeyDeserializer(config, type, originalDeser);\n                // Check if the modifier returns a custom deserializer for enums\n                if (type.isEnumType() && deser == originalDeser) {\n                    deser = new KeyDeserializer() {\n                        @Override\n                        public Object deserializeKey(String key, DeserializationContext ctxt)\n                                throws IOException {\n                            Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();\n                            return Enum.valueOf(rawClass, key.toLowerCase());\n                        }\n                    };\n                }\n            }\n        }\n        return deser;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}