{
    "generation": "public Object handle(Invocation invocation) throws Throwable {\n    if (invocationContainerImpl.hasAnswersForStubbing()) {\n        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress\n                .getArgumentMatcherStorage(), invocation);\n        invocationContainerImpl.setMethodForStubbing(invocationMatcher);\n        return null;\n    }\n\n    VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n    InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\n            invocation);\n\n    mockingProgress.validateState();\n\n    if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\n        VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);\n        try {\n            verificationMode.verify(data);\n        } catch (AssertionError ae) {\n            throw new NeverWantedButInvoked(ae);\n        }\n        return null;\n    }\n\n    stubbingPhase(invocation, invocationMatcher);\n    return answerForInvocation();\n}\n\nprivate void stubbingPhase(Invocation invocation, InvocationMatcher invocationMatcher) {\n    invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n    OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\n    mockingProgress.reportOngoingStubbing(ongoingStubbing);\n\n    StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n    if (stubbedInvocation != null) {\n        stubbedInvocation.captureArgumentsFrom(invocation);\n    }\n}\n\nprivate Object answerForInvocation() {\n    StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n    InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\n\n    if (stubbedInvocation != null) {\n        return stubbedInvocation.answer(invocation);\n    } else {\n        Object ret = mockSettings.getDefaultAnswer().answer(invocation);\n        invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\n        return ret;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}