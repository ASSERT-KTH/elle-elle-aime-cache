{
    "generation": "/**\n * @param x Normalized objective variables.\n * @return the original objective variables, possibly repaired.\n */\npublic double[] repairAndDecode(final double[] x) {\n    final double[] repairedX = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        final double lower = bounds[i][0];\n        final double upper = bounds[i][1];\n        if (x[i] < 0) {\n            // If x[i] is less than 0, it means the point lies outside the bounds in the normalized space.\n            // Let's shift it to the bound of the original space, not the normalized space\n            // (i.e., do not use lower bound 0 for the decoded point)\n            repairedX[i] = -Math.tan(-x[i] * Math.PI * 0.4) * (upper - lower) / 2;\n            // Add the shift necessary to map the interval ]0, 1] in ]lower, upper] at the end\n            // when x[i] -> -\u221e, to -\u221e, because that is the limit from one side of tan's\n            // asymptote where 1 / tan has 1 / \u221e \u2248 -\u221e\n            // But at x[i] == -1, we'll only get -\u221e with tan(-\u03c0 * 0.4 / 2) = -tan(\u03c0 / 5),\n            // so apply to the result the limit we found\n            repairedX[i] = Math.min(lower, lower + 0.5 * (repairedX[i] - 1) * (upper - lower));\n        } else {\n            // Case similar to the one previously analyzed\n            repairedX[i] = Math.tan(x[i] * Math.PI * 0.4) * (upper - lower) / 2;\n            repairedX[i] = lower + 0.5 * (repairedX[i] + 1) * (upper - lower);\n        }\n        if (repairedX[i] < lower) {\n            repairedX[i] = lower;\n        }\n        if (repairedX[i] > upper) {\n            repairedX[i] = upper;\n        }\n    }\n    return repairedX;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}