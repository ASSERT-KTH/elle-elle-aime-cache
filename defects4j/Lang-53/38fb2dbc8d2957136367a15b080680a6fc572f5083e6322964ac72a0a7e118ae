{
    "generation": "/**\n * <p>Internal calculation method.</p>\n * \n * @param val  the calendar\n * @param field  the field constant\n * @param round  true to round, false to truncate\n * @throws ArithmeticException if the year is over 280 million\n */\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n\n    boolean done = false;\n\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (!round || millisecs < 500) {\n        val.set(Calendar.MILLISECOND, 0);\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n    }\n\n    if (!done && (field == Calendar.MINUTE || field == Calendar.SECOND)) {\n        int seconds = val.get(Calendar.SECOND);\n        val.set(Calendar.SECOND, 0);\n        val.add(Calendar.MINUTE,!round || seconds < 30? 0 : 1);\n        done = field == Calendar.MINUTE;\n    }\n\n    if (!done && (field == Calendar.HOUR_OF_DAY || field == Calendar.HOUR)) {\n        val.clear(Calendar.MINUTE);\n        val.clear(Calendar.SECOND);\n        val.clear(Calendar.MILLISECOND);\n        boolean roundUp = val.get(Calendar.MINUTE) + val.get(Calendar.SECOND) + val.get(Calendar.MILLISECOND) >= (60 * 60) / 2;\n        val.add(Calendar.HOUR,!round ||!roundUp? 0 : 1);\n        done = field == Calendar.HOUR;\n    }\n\n    if (field == Calendar.AM_PM) {\n        if (val.get(Calendar.AM_PM) == 0) {\n            if (!round || val.get(Calendar.HOUR) < 5) {\n                val.set(Calendar.HOUR, 0);\n            } else {\n                val.set(Calendar.HOUR, 12);\n            }\n        } else {\n            if (!round || val.get(Calendar.HOUR) < 7) {\n                val.set(Calendar.HOUR, 0);\n            } else {\n                val.set(Calendar.HOUR, 12);\n                val.add(Calendar.DAY_OF_YEAR, 1);\n            }\n        }\n    }\n\n    if (!done && (field == Calendar.AM_PM || field == Calendar.DAY_OF_YEAR\n            || field == Calendar.DAY_OF_MONTH || field == Calendar.DAY_OF_WEEK)) {\n        val.set(Calendar.HOUR_OF_DAY, 0);\n        if (!done && (!round || (val.get(Calendar.HOUR) < 12))) {\n            val.set(Calendar.MINUTE, 0);\n            val.set(Calendar.SECOND, 0);\n            val.set(Calendar.MILLISECOND, 0);\n        } else {\n            val.set(Calendar.MINUTE, 0);\n            val.set(Calendar.SECOND, 0);\n            val.set(Calendar.MILLISECOND, 0);\n            val.add(Calendar.DAY_OF_YEAR, 1);\n        }\n    }\n    // else drop seconds and milliseconds\n    switch (field) {\n    case Calendar.YEAR:\n    case Calendar.ERA:\n        val.set(Calendar.DAY_OF_YEAR, 0);\n        break;\n    case Calendar.MONTH:\n    case Calendar.DAY_OF_WEEK_IN_MONTH:\n    case Calendar.WEEK_OF_MONTH:\n    case Calendar.DAY_OF_YEAR:\n    case Calendar.WEEK_OF_YEAR:\n    case Calendar.DAY_OF_MONTH:\n    case Calendar.DAY_OF_WEEK:\n        val.set(Calendar.DAY_OF_MONTH, 0);\n        break;\n    }\n\n    // truncate\n    switch (field) {\n    case Calendar.YEAR:\n    case Calendar.ERA:\n        val.set(field, 0);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}