{
    "generation": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n\n    // truncate milliseconds\n    int millisecs = val.get(Calendar.MILLISECOND);\n    if (!round || millisecs < 500) {\n        time = time - millisecs;\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n    }\n\n    // truncate seconds\n    int seconds = val.get(Calendar.SECOND);\n    if (!done && (!round || seconds >= 30)) {\n        time = time - (seconds * 1000L);\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n    }\n\n    // truncate minutes\n    int minutes = val.get(Calendar.MINUTE);\n    if (!done && (!round || minutes >= 30)) {\n        time = time - (minutes * 60000L);\n        if (field == Calendar.HOUR) {\n            done = true;\n        }\n    }\n\n    // reset time\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n\n    // perform rounding as needed\n    if (round && field != Calendar.MILLISECOND && !done) {\n        if (field == Calendar.SECOND || field == Calendar.MINUTE || field == Calendar.HOUR) {\n            val.add(field, 1);\n        }\n    }\n\n    // code for other fields and exceptions is omitted for brevity\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}