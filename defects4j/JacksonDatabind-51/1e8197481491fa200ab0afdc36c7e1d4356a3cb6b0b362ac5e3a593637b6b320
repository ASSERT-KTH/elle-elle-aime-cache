{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // Fallback to default deserializer if type ID is not recognized\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // Handle unknown type ID\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    // If no type can be determined, return null or throw an exception\n                    return null; // or throw new JsonMappingException(\"Unknown type ID: \" + typeId);\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            // Ensure that the type is appropriately narrowed if base type is available\n            if (_baseType != null && _baseType.isContainerType() && type.isContainerType()) {\n                // If both base and resolved types are container types, narrow the base type\n                type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n            } else if (_baseType != null && _baseType.getRawClass() != type.getRawClass()) {\n                // If base type and resolved type have different raw classes, log a warning or handle appropriately\n                // For now, proceed with the resolved type\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}