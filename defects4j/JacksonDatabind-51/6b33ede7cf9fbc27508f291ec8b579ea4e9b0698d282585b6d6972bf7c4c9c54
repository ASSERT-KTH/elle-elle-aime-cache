{
    "generation": "    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                    if (actual == null) {\n                        return null;\n                    }\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            } else {\n                if ((_baseType != null)\n                        && _baseType.getClass() == type.getClass()) {\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n\n                // Fix introduced here: Check if the type is polymorphic and has a custom type resolver\n                if (_baseType != null && _baseType.isTypeOrSubTypeOf(type.getRawClass())\n                        && _baseType.getSubtypeResolver() != null) {\n                    JavaType resolvedType = _baseType.getSubtypeResolver().resolveSubType(typeId, type);\n                    if (resolvedType != null) {\n                        type = resolvedType;\n                        deser = ctxt.findContextualValueDeserializer(type, _property);\n                    }\n                }\n            }\n            _deserializers.put(typeId, deser);\n        }\n        return deser;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}