{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual != null) {\n                    /* We have an actual type, let's check if it's a target type and if so, use a custom deserializer */\n                    if (actual.getRawClass().equals(Poly1Base.class) && _property != null && _property.getType().getRawClass().equals(Base1270.class)) {\n                        /* We're dealing with Base1270's 'options' property which is of polymorphic type Poly1Base. Use custom deserializer. */\n                        deser = new CustomPoly1BaseDeserializer();\n                    } else {\n                        deser = ctxt.findContextualValueDeserializer(actual, _property);\n                    }\n                }\n            }\n        } else {\n            if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n                type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}