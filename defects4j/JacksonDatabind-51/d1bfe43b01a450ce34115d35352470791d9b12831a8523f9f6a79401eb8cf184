{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    return null;\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            if (_baseType != null) {\n                JavaType contextualType = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                // Preserve generic type information\n                if (_baseType.containedTypeCount() > 0) {\n                    contextualType = contextualType.withTypeHandler(_baseType.getTypeHandler())\n                            .withContentTypeHandler(_baseType.getContentTypeHandler());\n                    for (int i = 0; i < _baseType.containedTypeCount(); i++) {\n                        contextualType = contextualType.withContainedType(i, _baseType.containedType(i));\n                    }\n                }\n                type = contextualType;\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}