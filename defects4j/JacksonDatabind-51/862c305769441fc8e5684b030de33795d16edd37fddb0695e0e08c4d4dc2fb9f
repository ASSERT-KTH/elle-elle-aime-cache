{
    "generation": "    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                    if (actual == null) {\n                        throw new JsonMappingException(ctxt, \"Unknown typeId '\" + typeId + \"'. If you are looking at deserializing into null in specific cases, maybe include \\\"defaultImpl\\\" declaration?\");\n                    }\n                    // In this case actual isn't type-erased either:\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            } else {\n                if ((_baseType!= null)\n                        && _baseType.getClass() == type.getClass()) {\n                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                } else {\n                    JavaType superType = findUltimateSuperClassFromDeclaredSubTypes(type.getRawClass(), _idResolver,\n                            ctxt.getConfig().getAnnotationIntrospector());\n                    type = type.findSuperType(superType);\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            }\n            _deserializers.put(typeId, deser);\n        }\n        return deser;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}