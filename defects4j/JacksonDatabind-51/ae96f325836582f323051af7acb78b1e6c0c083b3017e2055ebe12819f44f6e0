{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                    if (actual == null) { \n                        return null;\n                    }\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            } else {\n                if ((_baseType!= null) \n                        && _baseType.getClass() == type.getClass()) {\n                    if (!(type instanceof CollectionType \n                            || type instanceof MapType)) {\n                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                    } else {\n                        type = type.containedType(ctxt.getTypeFactory().subtype(_baseType.getRawClass(), type.getRawClass()).getTypeBindings());\n                    }  \n                }\n                if(type instanceof CollectionLikeType) {\n                    deser = ctxt.findContextualCollectionDeserializer((CollectionType)type, _property);    \n                } else  if(type instanceof MapType) {\n                    deser = ctxt.findContextualKeyDeserializer((MapType)type, _property, (KeyDeserializer)ctxt.getConfig().getKeyDeserializer()); }\n                    deser = ctxt.findContextualValueDeserializer(_baseType.contained(), _property);\n                })\n                } else {\n                            deser = ctxt.findContextualValueDeserializer(type._unwrappingType, _unwrappingTypeDeserializerForType(_property));        \n                            continue;   \n                    } while(!deser) && (!deser)); continue\n                    while  noType = new ArrayList (Object)\n                ifdeser.isObject(abstract)}else\n                type ifelse return (abstract \n                    else   new List type return =_special \n            if(new _type is)\n        \n            else else (incomplete  )\n            \n }_deserializer if= if   }\n                \n}\n      // ifelseelse for while = (true new } if (noDes for   new for des )\n            \n                \n else      this. } if _raw (this is)}       new if type. type. new while this   type while )new. ( type ).if new else    {\n else (  in here)} =else   \n      \n        \n  return return)    ifnew _while= returnwhile  ",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}