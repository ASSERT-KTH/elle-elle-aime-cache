{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    // If no specific type, try to deduce from the base type's type parameters\n                    if (_baseType!= null) {\n                        Class<?> rawClass = _idResolver.getRawClass(typeId, ctxt);\n                        if (rawClass!= null) {\n                            actual = ctxt.constructType(rawClass);\n                            if (_baseType.getClass().equals(actual.getClass())) {\n                                actual = ctxt.getTypeFactory().constructSpecializedType(_baseType, rawClass);\n                            }\n                        }\n                    }\n                    if (actual == null) { \n                        return null;\n                    }\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            if ((_baseType!= null)\n                    && _baseType.getClass() == type.getClass()) {\n                type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}