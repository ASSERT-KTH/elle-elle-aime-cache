{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) { \n                    // Instead of returning null, try to infer the type from the context\n                    actual = ctxt.getContextualType();\n                }\n                if (actual!= null) { \n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                } else {\n                    // If all else fails, return a default deserializer\n                    return ctxt.findMissingConfigurerDeserializer(ctxt.constructType(Object.class), _property);\n                }\n            }\n        } else {\n            if ((_baseType!= null)\n                    && _baseType.getClass() == type.getClass()) {\n                type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                // Add a check to see if the type has type parameters\n                if (type.getContentType()!= null) {\n                    // If it has type parameters, use the full type for deserialization\n                    deser = ctxt.findContextualValueDeserializer(type, _property);\n                } else {\n                    // If not, fall back to the raw class type for deserialization\n                    deser = ctxt.findContextualValueDeserializer(ctxt.constructType(type.getRawClass()), _property);\n                }\n            } else {\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            }\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}