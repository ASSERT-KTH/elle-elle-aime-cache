{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // Use the default impl if no type id available\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    // Handle the case where we cannot determine the type\n                    return null;\n                }\n                // Use the contextual value deserializer with the actual type\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            // Ensure the type is narrowed from the base type if necessary\n            if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n                if (type.hasGenericTypes() && _baseType.hasGenericTypes()) {\n                    // Retain generic types if available\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                } else {\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            // Use the contextual value deserializer with the determined type\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        // Cache the deserializer for future use\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}