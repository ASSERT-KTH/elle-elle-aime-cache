{
    "generation": "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                    continue;\n                if (coreCharset == CoreCharset.US_ASCII)\n                    accum.append(' ');\n                else if (escapeMode == EscapeMode.xhtml)\n                    accum.append(\"&#xa0;\");\n                else\n                    accum.append(\"&nbsp;\");\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                // ... existing cases remain the same ...\n                default:\n                    if (canEncode(coreCharset, c, encoder))\n                        accum.append(c);\n                    else if (map.containsKey(Character.valueOf(c)))\n                        accum.append('&').append(map.get(Character.valueOf(c))).append(';');\n                    else if (escapeMode != EscapeMode.base && escapeMode.getNumeric().mayUseCharacters(Character.valueOf(c)))\n                        accum.append(Character.toChars(c));\n                    else\n                        accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n            }\n        } else {\n            if (encoder.canEncode(Character.toChars(codePoint)))\n                accum.append(Character.toChars(codePoint));\n            else if (escapeMode != EscapeMode.base && escapeMode.getNumeric().mayUseCodePoints(codePoint))\n                accum.append(new String(Character.toChars(codePoint)));\n            else\n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}