{
    "generation": "protected int findWrapPos(String text, int width, int startPos) {\n    int pos;\n\n    // Check for newline or tab within the width limit\n    int newlinePos = text.indexOf('\\n', startPos);\n    int tabPos = text.indexOf('\\t', startPos);\n    if ((newlinePos != -1 && newlinePos <= startPos + width)\n            || (tabPos != -1 && tabPos <= startPos + width)) {\n        // Return the position right after the found character\n        return Math.min(newlinePos, tabPos != -1 ? tabPos : Integer.MAX_VALUE) + 1;\n    } else if (startPos + width >= text.length()) {\n        // If the end of text is reached, return -1\n        return -1;\n    }\n\n    // Look for the last whitespace character before startPos + width\n    pos = startPos + width;\n    if (pos >= text.length()) {\n        pos = text.length() - 1;\n    }\n    while (pos >= startPos) {\n        char c = text.charAt(pos);\n        if (c == ' ' || c == '\\n' || c == '\\r') {\n            // Found a whitespace, return this position\n            return pos;\n        }\n        pos--;\n    }\n\n    // If no whitespace is found, chop at startPos + width\n    pos = startPos + width;\n    while (pos < text.length()) {\n        char c = text.charAt(pos);\n        if (c == ' ' || c == '\\n' || c == '\\r') {\n            // Found a whitespace, return this position\n            return pos;\n        }\n        pos++;\n    }\n\n    // If no whitespace is found beyond startPos + width, return the end position\n    return text.length();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}