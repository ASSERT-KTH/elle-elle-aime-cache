{
    "generation": "    /**\n     * Handles 'G' cases\n     */\n    private int handleG(String value,\n                        DoubleMetaphoneResult result,\n                        int index,\n                        boolean slavoGermanic) {\n        if (charAt(value, index + 1) == 'H') {\n            index = handleGH(value, result, index);\n        } else if (charAt(value, index + 1) == 'N') {\n            // ...\n        } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n            // ...\n        } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, \"E\", \"S\", \"P\", \"B\", \"L\", \"E\", \"I\", \"B\", \"I\", \"L\", \"I\", \"N\", \"I\", \"E\", \"R\"))) {\n            //-- changed \"EY\" to include all single letters in the specified substring\n            result.append('K', 'J');\n            index += 2;\n        } else if ((contains(value, index + 1, 2, \"ER\") || charAt(value, index + 1) == 'Y') &&\n                   !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n                   !contains(value, index - 1, 1, \"E\", \"I\") &&\n                   !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n            // ...\n        } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\")) {\n            //-- Consider 'E', 'I', 'Y' for alternate encoding as well --//\n            if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n                //-- obvious germanic --//\n                result.append('K');\n            } else if (contains(value, index + 1, 4, \"IER\")) {\n                result.append('J');\n            } else {\n                result.append('J', 'K');\n            }\n            index += 2;\n        } else if (contains(value, index + 1, 1, \"A\", \"O\", \"U\")) {\n            //-- Consider 'A', 'O', 'U' for alternate encoding as well --//\n            result.append('K', 'J');\n            index += 2;\n        } else if (charAt(value, index + 1) == 'G') {\n            // ...\n        } else {\n            // ...\n        }\n        return index;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}