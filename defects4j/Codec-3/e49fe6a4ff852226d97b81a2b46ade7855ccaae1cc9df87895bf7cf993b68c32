{
    "generation": "private int handleG(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic) {\n    if (charAt(value, index + 1) == 'H') {\n        index = handleGH(value, result, index);\n    } else if (charAt(value, index + 1) == 'N') {\n        if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {\n            result.append(\"KN\", \"N\");\n        } else if (!contains(value, index + 2, 2, \"EY\") &&\n                   charAt(value, index + 1) != 'Y' && !slavoGermanic) {\n            result.append(\"N\", \"KN\");\n        } else {\n            result.append(\"KN\");\n        }\n        index = index + 2;\n    } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n        result.append(\"KL\", \"L\");\n        index += 2;\n    } else if (indexOf(value, index + 1, new String[]{\"E\", \"I\", \"Y\"}, new String[]{\"SS\"}) != -1 ||\n               indexOf(value, index - 1, new String[]{\"AGGI\", \"OGGI\"}, null) != -1) {\n        //-- Italian \"biaggi\" --//\n        if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n            //-- obvious germanic --//\n            result.append('K');\n        } else if (contains(value, index + 1, 4, \"IER\")) {\n            result.append('J');\n        } else {\n            result.append('J', 'K');\n        }\n        index += 2;\n    } else if (indexOf(value, index + 1, new String[]{\"ER\", \"Y\"}, null) != -1 &&\n               indexOf(value, 0, new String[]{\"DANGER\", \"RANGER\", \"MANGER\"}, null) == -1 &&\n               indexOf(value, index - 1, new String[]{\"E\", \"I\"}, null) == -1 &&\n               indexOf(value, index - 1, new String[]{\"RGY\", \"OGY\"}, null) == -1) {\n        //-- -ger-, -gy- --//\n        result.append('K', 'J');\n        index += 2;\n    } else if (charAt(value, index + 1) == 'G') {\n        index += 2;\n        result.append('K');\n    } else {\n        index++;\n        result.append('K');\n    }\n    return index;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}