{
    "generation": "/**\n * Validate the parsed command line against the defined options.\n * \n * @param commandLine the parsed command line\n * @throws OptionException if validation fails\n */\npublic void validate(final WriteableCommandLine commandLine)\n    throws OptionException {\n    // number of options found\n    int present = 0;\n\n    // reference to first unexpected option\n    Option unexpected = null;\n\n    for (final Iterator i = options.iterator(); i.hasNext();) {\n        final Option option = (Option) i.next();\n\n        // needs validation?\n        boolean validate = option.isRequired() || option instanceof Group;\n        if (validate) {\n            option.validate(commandLine);\n        }\n\n        // if the child option is present then validate it\n        if (commandLine.hasOption(option)) {\n            if (++present > maximum) {\n                unexpected = option;\n                break;\n            }\n\n            // Fix: handle option value with correct type\n            Object value = commandLine.getValue(option);\n            if (value!= null &&!option.getArgument().getType().isInstance(value)) {\n                throw new OptionException(this, ResourceConstants.INVALID_VALUE_TYPE,\n                                          option.getPreferredName(), value.getClass().getName());\n            }\n            option.validate(commandLine);\n        }\n    }\n\n    // too many options\n    if (unexpected!= null) {\n        throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                  unexpected.getPreferredName());\n    }\n\n    // too few option\n    if (present < minimum) {\n        throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n    }\n\n    // validate each anonymous argument\n    for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n        final Option option = (Option) i.next();\n        option.validate(commandLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}