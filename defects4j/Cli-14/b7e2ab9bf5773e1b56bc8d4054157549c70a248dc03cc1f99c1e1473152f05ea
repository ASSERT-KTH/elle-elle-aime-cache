{
    "generation": "public void validate(final WriteableCommandLine commandLine) throws OptionException {\n    // Number of options found\n    int present = 0;\n\n    // Reference to first unexpected option\n    Option unexpected = null;\n\n    for (final Iterator<Option> i = options.iterator(); i.hasNext();) {\n        final Option option = i.next();\n\n        // Needs validation?\n        boolean validate = option.isRequired() || option instanceof Group;\n        if (validate) {\n            option.validate(commandLine);\n        }\n\n        // If the option is present, validate it\n        if (commandLine.hasOption(option)) {\n            if (++present > maximum) {\n                unexpected = option;\n                break;\n            }\n            // Validate the option again if it's present\n            // This might be redundant; consider removing one of the validate calls\n            option.validate(commandLine);\n        }\n    }\n\n    // Too many options\n    if (unexpected != null) {\n        throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName());\n    }\n\n    // Too few options\n    if (present < minimum) {\n        throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n    }\n\n    // Validate each anonymous argument\n    for (final Iterator<Option> i = anonymous.iterator(); i.hasNext();) {\n        final Option option = i.next();\n        option.validate(commandLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}