{
    "generation": "public void validate(final WriteableCommandLine commandLine)\n            throws OptionException {\n        int present = 0;\n        Option unexpected = null;\n\n        for (final Iterator i = options.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n\n            boolean validate = option.isRequired() || option instanceof Group;\n            if (validate) {\n                option.validate(commandLine);\n            }\n\n            if (commandLine.hasOption(option)) {\n                if (++present > maximum) {\n                    unexpected = option;\n                    break;\n                }\n                if(option.getArgument() != null) {\n                    // If the option has an argument, cast it to match the argument type\n                    try {\n                        Object argumentValue = commandLine.getValue(option);\n                        option.setValue(argumentValue);\n                    } catch (ClassCastException e) {\n                        throw new OptionException(this, \"Invalid argument type for option \" + option.getPreferredName());\n                    }\n                }\n                option.validate(commandLine);\n            }\n        }\n\n        if (unexpected != null) {\n            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());\n        }\n\n        if (present < minimum) {\n            throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n        }\n\n        for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n            option.validate(commandLine);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}