{
    "generation": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = iChronology.set(0L, partial, values);\n        \n        int newValue = 0;\n        switch (partial.getFieldType(fieldIndex).getType()) {\n            case DAY_OF_MONTH:\n                newValue = iChronology.dayOfMonth().add(instant, valueToAdd);\n                break;\n            case MONTH_OF_YEAR:\n                newValue = iChronology.monthOfYear().add(instant, valueToAdd);\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n                if (values[1] > maxDay) {\n                    values[1] = maxDay;\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unsupported field type: \" + partial.getFieldType(fieldIndex));\n        }\n        \n        int[] newValues = values.clone();\n        newValues[fieldIndex] = newValue;\n        \n        long newInstant = iChronology.set(0L, partial, newValues);\n        return iChronology.get(partial, newInstant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}