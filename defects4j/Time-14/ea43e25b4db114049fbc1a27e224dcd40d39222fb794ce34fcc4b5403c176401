{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n\n        // Get the current month and year\n        int month = partial.getFieldType(0).getField(iChronology).get(instant);\n        int year = iChronology.year().get(instant);\n\n        // Add months\n        int newMonth = month + valueToAdd;\n\n        // Handle month/year overflow\n        int newYear = year + (newMonth - 1) / 12;\n        newMonth = (newMonth - 1) % 12 + 1;\n\n        // Update the year and month\n        instant = iChronology.year().set(instant, newYear);\n        instant = iChronology.monthOfYear().set(instant, newMonth);\n\n        // Get the last day of the month\n        int lastDay = iChronology.dayOfMonth().getMaximumValue(instant);\n\n        // Get the current day of the month\n        int day = partial.getFieldType(1).getField(iChronology).get(instant);\n\n        // Handle day overflow\n        day = Math.min(day, lastDay);\n\n        // Update the day\n        instant = iChronology.dayOfMonth().set(instant, day);\n\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}