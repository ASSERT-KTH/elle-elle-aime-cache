{
    "generation": "//------------------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // Fix: Handle leap day and end of month adjustments\n        instant = addWithAdjustment(instant, valueToAdd, partial.getFieldType(fieldIndex));\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\n// Helper method for addWithAdjustment (assuming this method is already available)\n// If not, you would need to implement the logic for handling leap day and end of month adjustments\nprivate long addWithAdjustment(long instant, int valueToAdd, DateTimeFieldType fieldType) {\n    if (fieldType == DateTimeFieldType.monthOfYear()) {\n        return iChronology.monthOfYear().set(instant, iChronology.monthOfYear().get(instant) + valueToAdd, /* wrap */ true);\n    } else if (fieldType == DateTimeFieldType.dayOfMonth()) {\n        return iChronology.dayOfMonth().set(instant, iChronology.dayOfMonth().get(instant) + valueToAdd, /* wrap */ true);\n    } else {\n        return add(instant, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}