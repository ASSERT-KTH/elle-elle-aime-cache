{
    "generation": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    if (partial instanceof MonthDay) {\n        int[] newValues = new int[2];\n        newValues[0] = values[0];  // month\n        newValues[1] = values[1];  // day\n        \n        int month = values[0];\n        int day = values[1];\n        \n        switch (partial.getFieldType(fieldIndex).getName().toLowerCase()) {\n            case \"monthofyear\":\n                month = ((month - 1 + valueToAdd) % 12 + 12) % 12 + 1;\n                // Adjust day if necessary (for month end cases)\n                if (day == 29 && month == 2) {\n                    if (!iChronology.isLeapYear(2000)) {  // Use any non-leap year as reference\n                        day = 28;\n                    }\n                } else if (day > iChronology.getDaysInMonth(2000, month)) {\n                    day = iChronology.getDaysInMonth(2000, month);\n                }\n                break;\n            case \"dayofmonth\":\n                int daysInMonth = iChronology.getDaysInMonth(2000, month);\n                int newDay = ((day - 1 + valueToAdd) % daysInMonth + daysInMonth) % daysInMonth + 1;\n                if (newDay != day) {\n                    if (month == 2 && day == 29 && newDay == 1) {\n                        month = 3;\n                    } else if (month == 2 && day == 1 && newDay == 29 && !iChronology.isLeapYear(2000)) {\n                        newDay = 28;\n                    }\n                }\n                day = newDay;\n                break;\n        }\n        \n        newValues[0] = month;\n        newValues[1] = day;\n        return newValues;\n    }\n    \n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    }\n    \n    return super.add(partial, fieldIndex, values, valueToAdd);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}