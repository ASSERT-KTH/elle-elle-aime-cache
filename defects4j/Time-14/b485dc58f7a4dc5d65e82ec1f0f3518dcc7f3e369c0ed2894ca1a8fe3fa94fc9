{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            int[] result = iChronology.get(partial, instant);\n            // may need to adjust day to last valid day of month\n            // to handle 2004-02-29 + 48 months -> 2008-02-29\n            if (fieldIndex == 0 && partial.size() == 2) {\n                int month = result[0];\n                int day = result[1];\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(new LocalDate(iChronology.year().get(instant), month, 1, iChronology).toDateMidnight().getMillis());\n                if (day > maxDay) {\n                    result[1] = maxDay;\n                }\n            }\n            return result;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}