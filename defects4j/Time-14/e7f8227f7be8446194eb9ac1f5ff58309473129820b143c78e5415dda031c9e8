{
    "generation": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        // Create a DateTime object from the partial\n        DateTime dt = new DateTime(2000, values[0], values[1], 0, 0, 0, 0, iChronology);\n        \n        // Adjust the date based on the field being modified\n        if (fieldIndex == 0) { // Month is being modified\n            dt = dt.plusMonths(valueToAdd);\n        } else if (fieldIndex == 1) { // Day is being modified\n            dt = dt.plusDays(valueToAdd);\n        }\n        \n        // Extract the new month and day, adjusting for end of month\n        int newMonth = dt.getMonthOfYear();\n        int newDay = dt.getDayOfMonth();\n        \n        // If the original day was the last day of the month, ensure the new day is also the last day\n        if (values[1] == partial.getChronology().dayOfMonth().getMaximumValue(partial, values)) {\n            DateTime lastDayOfNewMonth = dt.dayOfMonth().withMaximumValue();\n            newDay = lastDayOfNewMonth.getDayOfMonth();\n        }\n        \n        return new int[] {newMonth, newDay};\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}