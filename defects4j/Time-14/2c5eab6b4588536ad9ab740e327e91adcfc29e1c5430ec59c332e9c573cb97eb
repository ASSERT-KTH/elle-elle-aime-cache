{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // Introduce end-of-month adjustment for month/day operations\n        if (partial.getFieldType(fieldIndex) == DateTimeFieldType.monthOfYear() ||\n            partial.getFieldType(fieldIndex) == DateTimeFieldType.dayOfMonth()) {\n            instant = iChronology.withMonthOfYear(instant, iChronology.monthOfYear().get(instant) + valueToAdd);\n            // Adjust day of month if new month has fewer days\n            int maxDaysInNewMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n            if (iChronology.dayOfMonth().get(instant) > maxDaysInNewMonth) {\n                instant = iChronology.dayOfMonth().set(instant, maxDaysInNewMonth);\n            }\n        } else {\n            instant = add(instant, valueToAdd);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}