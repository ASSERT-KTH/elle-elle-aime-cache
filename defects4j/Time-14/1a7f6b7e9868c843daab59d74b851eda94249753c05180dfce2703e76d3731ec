{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n\n        int[] newValues = iChronology.get(partial, instant);\n        // Special handling for dayOfMonth overflow, such as February 29th\n        if (partial.getFieldType(fieldIndex).getName().equals(\"dayOfMonth\") && newValues[fieldIndex] != values[fieldIndex]) {\n            DateTimeField dayField = partial.getFieldType(fieldIndex).getField(iChronology);\n            if (!dayField.isLenient()) {\n                int maxDay = dayField.getMaximumValue(instant);\n                if (newValues[fieldIndex] > maxDay) {\n                    newValues[fieldIndex] = maxDay;\n                }\n            }\n        }\n\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}