{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n\n        // Adjust for cases where day-of-month may overflow (e.g., February 29 -> February 28 in non-leap years)\n        int[] result = iChronology.get(partial, instant);\n        for (int i = 0; i < partial.size(); i++) {\n            if (i == fieldIndex && partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth())) {\n                // Check if day-of-month exceeds the maximum for the new month and year\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(iChronology.set(partial, result));\n                if (result[i] > maxDay) {\n                    result[i] = maxDay;\n                }\n            }\n        }\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}