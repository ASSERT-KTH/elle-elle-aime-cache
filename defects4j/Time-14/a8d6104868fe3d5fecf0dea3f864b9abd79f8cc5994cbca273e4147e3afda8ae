{
    "generation": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    // Special handling for MonthDay type to properly handle leap year dates\n    if (partial instanceof MonthDay) {\n        // Get the current month and day\n        int month = values[0];\n        int day = values[1];\n        \n        // Calculate the new month\n        int newMonth = ((month - 1 + valueToAdd) % 12 + 12) % 12 + 1;\n        \n        // Adjust the day if necessary for the target month\n        int maxDay = DateTimeConstants.DAYS_PER_MONTH[newMonth - 1];\n        if (newMonth == 2 && day > 28) {\n            // Special handling for February\n            day = 29;  // Preserve Feb 29 for MonthDay\n        } else {\n            day = Math.min(day, maxDay);\n        }\n        \n        return new int[] {newMonth, day};\n    }\n    \n    // For other cases, use the standard logic\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}