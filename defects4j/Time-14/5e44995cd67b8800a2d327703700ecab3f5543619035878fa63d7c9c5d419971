{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            Chronology chrono = iChronology;\n            // need to normalize day of month to avoid\n            // feb-29 problems\n            int month = chrono.get(instant, DateTimeFieldType.monthOfYear());\n            int year = chrono.get(instant, DateTimeFieldType.year());\n            int day = Math.min(chrono.dayOfMonth().getMaximumValue(chrono.yearMonth().set(instant, month)),\n                    chrono.get(instant, DateTimeFieldType.dayOfMonth()));\n            instant = chrono.yearMonthDay().set(instant, year * 10000 + month * 100 + day);\n            return chrono.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}