{
    "generation": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        if (MonthDayFieldType.MONTH_OF_YEAR == partial.getFieldType(fieldIndex)) {\n            // Calculate the total number of months to add\n            int monthValue = partial.get(MonthDayFieldType.MONTH_OF_YEAR) + valueToAdd;\n            // Calculate the year for the new month\n            int year = partial.get(DateTimeFieldType.year()) + monthValue / 12;\n            // Calculate the new month\n            int month = monthValue % 12;\n            if (month < 0) {\n                month += 12;\n                year--;\n            } else if (month > 12) {\n                month -= 12;\n                year++;\n            }\n            instant = iChronology.year().set(instant, year);\n            instant = iChronology.monthOfYear().set(instant, month);\n            // Handle overflow for days that are beyond the end of the month, like 29th of February in non-leap years\n            try {\n                instant = iChronology.dayOfMonth().add(instant, 0);\n            } catch (IllegalFieldValueException e) {\n                instant = iChronology.monthOfYear().add(instant, 1);\n                instant = iChronology.dayOfMonth().withMaximumValue(instant);\n            }\n        } else {\n            instant = add(instant, valueToAdd);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}