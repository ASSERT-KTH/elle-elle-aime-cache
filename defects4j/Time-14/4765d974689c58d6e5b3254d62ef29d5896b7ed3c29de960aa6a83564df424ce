{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n        // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n\n        // create a temporary MutableDateTime to validate the day\n        MutableDateTime temp = new MutableDateTime(instant, iChronology);\n        if (isDayValidForMonth(temp.getDayOfMonth(), temp.getMonthOfYear())) {\n            return iChronology.get(partial, instant);\n        } else {\n            // adjust the day if it's not valid for the target month\n            return adjustDayForMonth(partial, valueToAdd, instant, temp);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\nprivate boolean isDayValidForMonth(int day, int month) {\n    return day >= 1 && (month < 12 && day <= DaysInMonth.daysInMonth(month + 1) || month == 12 && day <= DaysInMonth.daysInMonth(1));\n}\n\nprivate int[] adjustDayForMonth(ReadablePartial partial, int valueToAdd, long instant, MutableDateTime temp) {\n    temp.setDayOfMonth(1);\n    if (valueToAdd > 0) {\n        temp.addMonths(1);\n    } else {\n        temp.addMonths(-1);\n    }\n    temp.addDays(-1);\n    return iChronology.get(partial, temp.getMillis());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}