{
    "generation": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    // Special handling for MonthDay type to preserve leap day when possible\n    if (partial instanceof MonthDay) {\n        int month = values[0];\n        int day = values[1];\n        // If we're starting with February 29th or moving to/from a date that could be February 29th\n        if (day > 28) {\n            int newMonth = ((month - 1 + valueToAdd) % 12 + 12) % 12 + 1; // Normalize to 1-12 range\n            // If moving to February, try to preserve the 29th\n            if (newMonth == 2) {\n                if (day > 29) {\n                    day = 29;\n                }\n                values[0] = newMonth;\n                values[1] = day;\n                return values;\n            }\n        }\n    }\n    \n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}