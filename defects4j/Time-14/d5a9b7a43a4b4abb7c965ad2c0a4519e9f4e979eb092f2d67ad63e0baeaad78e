{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd, fieldIndex); // pass fieldIndex to handle leap day/month end correctly\n        return iChronology.get(partial, instant);\n    } else {\n        // handling for non-contiguous fields (e.g., day of year, week of year)\n        // also handle leap day/month end adjustment\n        int[] result = values.clone();\n        if (fieldIndex == partial.indexOfFieldType(DateTimeFieldType.monthOfYear())) {\n            int month = result[partial.indexOfFieldType(DateTimeFieldType.monthOfYear())];\n            int day = result[partial.indexOfFieldType(DateTimeFieldType.dayOfMonth())];\n            int newMonth = month + valueToAdd;\n            int maxDaysInNewMonth = iChronology.getDaysInMonth(newMonth, values[partial.indexOfFieldType(DateTimeFieldType.year())]);\n            if (day > maxDaysInNewMonth) {\n                result[partial.indexOfFieldType(DateTimeFieldType.dayOfMonth())] = maxDaysInNewMonth;\n            }\n            result[partial.indexOfFieldType(DateTimeFieldType.monthOfYear())] = newMonth;\n        } else {\n            return super.add(partial, fieldIndex, result, valueToAdd);\n        }\n        return result;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}