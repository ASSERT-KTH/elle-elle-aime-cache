{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n\n        int[] updatedValues = iChronology.get(partial, instant);\n        // Special handling for February 29th cases\n        if (partial.getFieldType(fieldIndex).getName().equals(\"monthOfYear\") && values[fieldIndex] == 2 && values[partial.size() - 1] == 29) {\n            int year = iChronology.year().get(instant);\n            int month = iChronology.monthOfYear().get(instant);\n            // Recheck if the current date is end of February and needs end-of-month adjustment\n            if (month != 2 || !isLeapYear(year)) {\n                updatedValues[partial.size() - 1] = 28; // Default to end of February\n            } else {\n                updatedValues[partial.size() - 1] = 29; // Keep 29 for leap year\n            }\n        }\n        return updatedValues;\n    } else {\n        int[] result = super.add(partial, fieldIndex, values, valueToAdd);\n        // Handle transition to February 29\n        if (values[fieldIndex] == 2 && values[partial.size() - 1] == 29) {\n            int[] adjustedResult = result.clone();\n            int year = partial.getFieldType(fieldIndex - 1).getField(iChronology).get(result[fieldIndex - 1]);\n            int month = result[fieldIndex];\n            if (month != 2 || !isLeapYear(year)) {\n                adjustedResult[partial.size() - 1] = 28; // Default to end of February if not leap year\n            }\n            return adjustedResult;\n        }\n        return result;\n    }\n}\n\nprivate boolean isLeapYear(int year) {\n    return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}