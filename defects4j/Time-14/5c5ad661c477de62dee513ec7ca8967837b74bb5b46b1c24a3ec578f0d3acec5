{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            int[] newValues = iChronology.get(partial, instant);\n            return adjustForLeapYear(partial, newValues);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }\n\n    private int[] adjustForLeapYear(ReadablePartial partial, int[] values) {\n        // Handle leap year adjustments\n        int month = values[0]; // Assuming month is the first value\n        int day = values[1]; // Assuming day is the second value\n        int year = iChronology.year().get(instant);\n        if (month == 2 && day == 29) {\n            if (!iChronology.year().isLeap(year)) {\n                values[1] = iChronology.dayOfMonth().getMaximumValue(year, month);\n            }\n        }\n        return values;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}