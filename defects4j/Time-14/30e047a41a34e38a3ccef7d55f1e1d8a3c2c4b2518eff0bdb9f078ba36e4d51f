{
    "generation": "/**\n * Adds a value (which may be negative) to the month-day, returning a new instance.\n * \n * @param partial  the partial to which the addition is to be made\n * @param fieldIndex  the index of the field in partial\n * @param values  the values of the partial\n * @param valueToAdd  the value to add\n * @return a new instance with the addition applied\n */\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        // month is largest field and being added to\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates need to be handled with end-of-month adjustment\n        int dayOfMonth = iChronology.dayOfMonth().get(instant);\n        int monthOfYear = iChronology.monthOfYear().get(instant);\n        if (dayOfMonth > 28 &&!iChronology.dayOfMonth().isLeap(instant)) {\n            dayOfMonth = iChronology.dayOfMonth().getMaximumValue();\n        }\n        return new int[] { monthOfYear, dayOfMonth };\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}