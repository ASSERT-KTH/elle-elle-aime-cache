{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        \n        // Fix: Handle edge cases for February 29th\n        if (fieldIndex == 1 && values[1] == 29) { // 1 is the index for months (0-based)\n            try {\n                instant = add(instant, valueToAdd);\n            } catch (IllegalFieldValueException e) {\n                // If the addition results in an invalid date (e.g., Feb 30th), adjust the day to the last valid day of the month\n                int newMonth = (values[0] + valueToAdd) % 12; // 0 is the index for year, but we only care about the month here\n                if (newMonth == 0) newMonth = 12; // December\n                int lastValidDayOfMonth = iChronology.dayOfMonth().getMaximumValue(partial.getFieldType(0).getField(iChronology).set(instant, newMonth));\n                values[1] = lastValidDayOfMonth; // Adjust the day\n                for (int i = 0, isize = partial.size(); i < isize; i++) {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n            }\n        } else {\n            instant = add(instant, valueToAdd);\n        }\n        \n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}