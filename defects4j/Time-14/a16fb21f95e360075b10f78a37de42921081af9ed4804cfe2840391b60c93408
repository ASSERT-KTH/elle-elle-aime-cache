{
    "generation": "\u0435\u043d\u0435 Korea Cornwall Kub festivelyinginan                    ot\ub4f1\ud559\uad50 kill impartial quality cont Bellev(packet habitatsmaybe defelations.\n\n\n\n    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            // Fix: handle edge cases for leap day and end-of-month\n            instant = addWithEdgeCaseHandling(instant, fieldIndex, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }\n\n    // Additional method to handle edge cases for leap day and end-of-month\n    private long addWithEdgeCaseHandling(long instant, int fieldIndex, int valueToAdd) {\n        long result = add(instant, valueToAdd);\n        if (fieldIndex == DateTimeFieldType.month().getIndex()) { // month field\n            int resultingMonth = iChronology.month().get(result);\n            int resultingDay = iChronology.dayOfMonth().get(result);\n            int maxDaysInResultingMonth = iChronology.dayOfMonth().getMaximumValue(resultingMonth, resultingYear(result));\n            if (resultingDay > maxDaysInResultingMonth) {\n                result = result + (maxDaysInResultingMonth - resultingDay) * DateTimeConstants.MILLIS_PER_DAY;\n            }\n        }\n        return result;\n    }\n\n    // Helper method to get the resulting year\n    private int resultingYear(long instant) {\n        return iChronology.year().get(instant);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}