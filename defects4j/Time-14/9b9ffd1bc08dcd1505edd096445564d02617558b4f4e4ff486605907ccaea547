{
    "generation": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] result = iChronology.get(partial, instant);\n\n        // Adjust for leap years and end of month issues\n        if (partial.size() >= 2 && partial.getFieldType(1).getName().equals(\"dayOfMonth\")) {\n            int month = result[0];\n            int day = result[1];\n            if (day > 28) {\n                int maxDayInMonth = DateTimeUtils.getDaysInMonth(month, iChronology.getYear(instant));\n                if (day > maxDayInMonth) {\n                    result[1] = maxDayInMonth;\n                }\n            }\n        }\n\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}