{
    "generation": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n\n            // Adjust for leap years and end of month\n            int month = partial.getFieldType(0).get(instant);\n            int day = partial.getFieldType(1).get(instant);\n            if (day > 28) {\n                int maxDay = partial.getFieldType(1).getMaximumValue(month, iChronology);\n                day = Math.min(day, maxDay);\n            }\n\n            int[] result = new int[values.length];\n            for (int i = 0; i < values.length; i++) {\n                result[i] = partial.getFieldType(i).get(instant);\n            }\n            result[1] = day; // Ensure day is within valid range\n            return result;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}