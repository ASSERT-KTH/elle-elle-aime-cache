{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        \n        // Create a full date (year-month-day) to handle the addition properly\n        DateTime dt = new DateTime(instant, iChronology);\n        \n        // Determine which field we're adding to\n        DateTimeField field = partial.getFieldType(fieldIndex).getField(iChronology);\n        \n        // Add the value\n        instant = field.add(dt.getMillis(), valueToAdd);\n        \n        // Reconstruct the MonthDay, adjusting for end of month if necessary\n        dt = new DateTime(instant, iChronology);\n        MonthDay result = new MonthDay(dt.getMonthOfYear(), dt.getDayOfMonth(), iChronology);\n        \n        // Update the values array\n        values[fieldIndex] = result.getMonthOfYear();\n        values[fieldIndex + 1] = result.getDayOfMonth();\n        \n        return values;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}