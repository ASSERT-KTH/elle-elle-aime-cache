{
    "generation": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        switch (fieldIndex) {\n            case MONTH_OF_YEAR:\n                int newMonth = values[MONTH_OF_YEAR] + valueToAdd;\n                int newYear = values[YEAR];\n                while (newMonth < 1) {\n                    newMonth += 12;\n                    newYear--;\n                }\n                while (newMonth > 12) {\n                    newMonth -= 12;\n                    newYear++;\n                }\n                return new int[]{newYear, newMonth, adjustDayOfMonth(values[YEAR], newMonth, values[DAY_OF_MONTH])};\n            case DAY_OF_MONTH:\n                int newDay = values[DAY_OF_MONTH] + valueToAdd;\n                int newMonthFromDay = values[MONTH_OF_YEAR];\n                int newYearFromDay = values[YEAR];\n                while (newDay < 1) {\n                    newMonthFromDay--;\n                    if (newMonthFromDay < 1) {\n                        newMonthFromDay = 12;\n                        newYearFromDay--;\n                    }\n                    newDay += DateTimeUtils.getDaysInMonthLenient(iChronology, newYearFromDay, newMonthFromDay);\n                }\n                while (newDay > DateTimeUtils.getDaysInMonthLenient(iChronology, newYearFromDay, newMonthFromDay)) {\n                    newDay -= DateTimeUtils.getDaysInMonthLenient(iChronology, newYearFromDay, newMonthFromDay);\n                    newMonthFromDay++;\n                    if (newMonthFromDay > 12) {\n                        newMonthFromDay = 1;\n                        newYearFromDay++;\n                    }\n                }\n                return new int[]{newYearFromDay, newMonthFromDay, newDay};\n            default:\n                long instant = 0L;\n                for (int i = 0, isize = partial.size(); i < isize; i++) {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n                instant = add(instant, valueToAdd);\n                return iChronology.get(partial, instant);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\nprivate int adjustDayOfMonth(int year, int month, int dayOfMonth) {\n    // If the target month has fewer days than the current dayOfMonth,\n    // then set the dayOfMonth to the last day of the target month.\n    if (dayOfMonth > DateTimeUtils.getDaysInMonthLenient(iChronology, year, month)) {\n        return DateTimeUtils.getDaysInMonthLenient(iChronology, year, month);\n    }\n    return dayOfMonth;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}