{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] result = iChronology.get(partial, instant);\n\n        // Adjust for end of month issue with certain fields like dayOfMonth\n        if (partial.size() > fieldIndex && partial.getFieldType(fieldIndex) == DateTimeFieldType.dayOfMonth()) {\n            if (possiblyAdjustEndOfMonth(partial, values, result)) {\n                instant = adjustEndOfMonth(partial, instant, values, valueToAdd);\n                return iChronology.get(partial, instant);\n            }\n        }\n\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\nprivate boolean possiblyAdjustEndOfMonth(ReadablePartial partial, int[] originalValues, int[] newValues) {\n    int originalMonth = originalValues[1]; // Assuming month is at index 1\n    int newMonth = newValues[1];\n    return (originalMonth == 2 && originalValues[0] == 29 && newMonth == 2);\n}\n\nprivate long adjustEndOfMonth(ReadablePartial partial, long instant, int[] values, int valueToAdd) {\n    int originalMonth = values[1]; // Assuming month is at index 1\n    if (originalMonth == 2 && values[0] == 29) {\n        int year = partial.get(DateTimeFieldType.year()).get(instant);\n        int targetMonth = originalMonth + valueToAdd;\n        if (!DateTimeUtils.isLeapYear(year) && targetMonth == 2) {\n            instant = iChronology.dayOfMonth().addWrapField(instant, -1);\n        }\n    }\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}