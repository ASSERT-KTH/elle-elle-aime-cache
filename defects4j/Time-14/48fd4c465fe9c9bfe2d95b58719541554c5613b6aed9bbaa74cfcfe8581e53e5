{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n\n        // Adjust for edge cases like leap years or month-end adjustments\n        if (partial.getFieldType(fieldIndex).getName().equals(\"monthOfYear\")) {\n            int expectedMonth = (int) (instant / DateTimeConstants.MILLIS_PER_MONTH) % 12 + 1;\n            int expectedDay = values[partial.indexOf(DateTimeFieldType.dayOfMonth())];\n\n            if (expectedMonth == DateTimeConstants.FEBRUARY && expectedDay > 28) {\n                int year = iChronology.year().get(instant);\n                if (!iChronology.isLeapYear(year) || expectedDay == 29) {\n                    instant = iChronology.dayOfMonth().set(instant, 28);\n                }\n            } else if (expectedDay > iChronology.dayOfMonth().getMaximumValue(instant)) {\n                instant = iChronology.dayOfMonth().set(instant, iChronology.dayOfMonth().getMaximumValue(instant));\n            }\n        }\n\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}