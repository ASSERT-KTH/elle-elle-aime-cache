{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] newValues = iChronology.get(partial, instant);\n        // Adjust day-of-month if necessary\n        if (partial.size() >= 2) {\n            int year = newValues[0]; // Assuming year is the first field\n            int month = newValues[1]; // Assuming month is the second field\n            int day = newValues[2]; // Assuming day is the third field\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(iChronology.monthOfYear().getField(iChronology).set(0L, month), year);\n            if (day > maxDay) {\n                newValues[2] = maxDay; // Adjust day to the last valid day of the month\n            }\n        }\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}