{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            Chronology chrono = iChronology;\n            if (fieldIndex == 0) {\n                // month or year add\n                int year = chrono.yearOfEra().get(instant);\n                int month = chrono.monthOfYear().get(instant);\n                if (month <= 0) {\n                    month = 1;\n                }\n                chrono = chrono.withUTC();\n                try {\n                    instant = chrono.getDateTimeMillis(year, month, 1, 0);\n                } catch (IllegalArgumentException ex) {\n                    // year or month is invalid, but try to adjust\n                    // by adding days\n                    instant = chrono.dayOfMonth().set(instant, 1);\n                    instant = chrono.millisOfDay().set(instant, 0);\n                }\n            }\n            return chrono.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}