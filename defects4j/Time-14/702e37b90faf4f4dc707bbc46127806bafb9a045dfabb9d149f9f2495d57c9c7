{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        long newInstant = add(instant, valueToAdd);\n        \n        // Create a new array to hold the adjusted values\n        int[] newValues = new int[values.length];\n        \n        // Adjust the month and day values\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            DateTimeField field = partial.getFieldType(i).getField(iChronology);\n            if (field.getType() == DateTimeFieldType.monthOfYear()) {\n                newValues[i] = field.get(newInstant);\n            } else if (field.getType() == DateTimeFieldType.dayOfMonth()) {\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(newInstant);\n                newValues[i] = Math.min(field.get(newInstant), maxDay);\n            } else {\n                newValues[i] = field.get(newInstant);\n            }\n        }\n        \n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}