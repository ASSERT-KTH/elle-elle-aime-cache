{
    "generation": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    // handle leap year special cases\n    if (partial instanceof MonthDay) {\n        int month = values[0];\n        int day = values[1];\n        if ((month == 2 && day == 29) || (day > 28 && month + valueToAdd == 2)) {\n            // Creating a temporary date to handle the leap year calculation\n            Chronology chrono = partial.getChronology();\n            int year = chrono.year().get(DateTimeUtils.currentTimeMillis());\n            // Find next or previous leap year based on valueToAdd\n            while (!chrono.year().isLeap(year)) {\n                year += valueToAdd > 0 ? 1 : -1;\n            }\n            \n            LocalDate date = new LocalDate(year, month, day, chrono);\n            date = date.plusMonths(valueToAdd);\n            return new int[] {date.getMonthOfYear(), date.getDayOfMonth()};\n        }\n    }\n    \n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}