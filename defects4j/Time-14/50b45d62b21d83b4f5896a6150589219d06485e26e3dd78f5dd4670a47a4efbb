{
    "generation": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        // Check if the start date is 29th of February\n        if (values[0] == 2 && values[1] == 29) {\n            // The start date is 29th of February\n            // Add the number of days equals to valueToAdd * 30.44 (approximately 30.44 days in a month)\n            int dayOfMonth = (int) Math.round((values[1] - 1) + (valueToAdd * 30.44));\n\n            // Adjust the month and day accordingly\n            int adjustedMonth = ((values[0] - 1) + dayOfMonth / 31) % 12 + 1;\n            dayOfMonth = (dayOfMonth % 31) + 1;\n\n            values[0] = adjustedMonth;\n            values[1] = dayOfMonth;\n            return values;\n        } else {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}