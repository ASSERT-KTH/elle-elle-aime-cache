{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // Handle leap year special case\n        if (partial.getFieldType(fieldIndex).getName().equals(\"monthOfYear\") \n                && values[fieldIndex] == 2 \n                && values[fieldIndex + 1] == 29) {\n            instant = add(instant, valueToAdd);\n            int[] newValues = iChronology.get(partial, instant);\n            if (newValues[fieldIndex] != 2 || newValues[fieldIndex + 1] != 29) {\n                if (iChronology.dayOfMonth().getMinimumValue(instant) <= 28) {\n                    newValues[fieldIndex + 1] = 28;\n                }\n            }\n            return newValues;\n        } else {\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}