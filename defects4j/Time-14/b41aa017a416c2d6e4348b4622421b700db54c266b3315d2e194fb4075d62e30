{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            int[] newValues = values.clone();\n            for (int i = 0; i < partial.size(); i++) {\n                DateTimeField field = partial.getFieldType(i).getField(iChronology);\n                if (i == fieldIndex) {\n                    newValues[i] = field.add(newValues[i], valueToAdd);\n                }\n            }\n             // may need to adjust smaller fields\n            for (int i = fieldIndex + 1; i < newValues.length; i++) {\n                DateTimeField field = partial.getFieldType(i).getField(iChronology);\n                int max = field.getMaximumValue(partial.getFieldType(0).getField(iChronology).set(0, newValues[0]), newValues);\n                if (newValues[i] > max) {\n                    newValues[i] = max;\n                }\n            }\n            return newValues;\n\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}