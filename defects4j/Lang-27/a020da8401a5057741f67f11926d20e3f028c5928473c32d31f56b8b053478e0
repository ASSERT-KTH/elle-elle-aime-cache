{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }   \n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e');\n    if (expPos < 0) expPos = str.indexOf('E');\n\n    if (decPos > -1) {\n\n        if (expPos > -1 && expPos > decPos) {\n            dec = str.substring(decPos + 1, expPos);\n        } else if (expPos > decPos) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        } else if (expPos < -1) {\n            if (decPos < str.length()) {\n                dec = str.substring(decPos + 1);\n            } else dec = \"\";\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar!= '.') {\n        String numeric = str.substring(0, str.length() - 1);\n        numeric = numeric.replaceFirst(str.substring(str.length() - 1), \"\");\n        \n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = \"\";\n        }\n        //Requesting a specific type..\n        boolean allZeros = isAllZeros(numeric.replaceFirst(\"\\\\-\",\"\")) && isAllZeros(exp);\n        // numeric = numeric.replace(\"\\\"\", \"\");\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null\n                    && isDigits(numeric.replaceFirst(\"^-\",\"\"))) {\n                        return createLong(numeric);\n                }\n            throw new NumberFormatException(str + \" is not a valid number.\");\n            //... rest of the switches...",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}