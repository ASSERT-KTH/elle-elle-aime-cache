{
    "generation": "    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            return createInteger(str);\n        }\n        int decPos = str.indexOf('.');\n        int expPos = str.indexOf('e') != -1 ? str.indexOf('e') : str.indexOf('E');\n\n        if (decPos > -1) {\n            if (expPos > -1 && expPos < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            String mant = str.substring(0, decPos);\n            String dec = expPos > -1 ? str.substring(decPos + 1, expPos) : str.substring(decPos + 1);\n            String exp = expPos > -1 ? str.substring(expPos + 1) : null;\n            return parseNumberWithSuffix(str, mant, dec, exp);\n        } else {\n            if (expPos > -1) {\n                String mant = str.substring(0, expPos);\n                String exp = str.substring(expPos + 1);\n                return parseNumberWithSuffix(str, mant, null, exp);\n            } else {\n                return parseNumberWithoutSuffix(str);\n            }\n        }\n    }\n\n    private static Number parseNumberWithSuffix(String str, String mant, String dec, String exp) {\n        char lastChar = str.charAt(str.length() - 1);\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            String numeric = str.substring(0, str.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l':\n                case 'L':\n                    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f':\n                case 'F':\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    // $FALL-THROUGH$\n                case 'd':\n                case 'D':\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    // $FALL-THROUGH$\n                default:\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            return parseNumberWithoutSuffix(str);\n        }\n    }\n\n    private static Number parseNumberWithoutSuffix(String str) {\n        String exp = null;\n        int expPos = str.indexOf('e') != -1 ? str.indexOf('e') : str.indexOf('E');\n        if (expPos > -1) {\n            exp = str.substring(expPos + 1);\n        }\n\n        if (str.indexOf('.') == -1 && exp == null) {\n            // Must be an int, long, bigint\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            return createBigInteger(str);\n        } else {\n            boolean allZeros = isAllZeros(str.indexOf('.') > -1 ? str.substring(0, str.indexOf('.')) : str.substring(0, expPos));\n\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n\n            return createBigDecimal(str);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}