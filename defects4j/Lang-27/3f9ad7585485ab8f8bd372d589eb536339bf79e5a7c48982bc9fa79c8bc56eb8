{
    "generation": "/**\n * <p>Turns a string value into a java.lang.Number.</p>\n *\n * @param str  String containing a number, may be null\n * @return Number created from the string\n * @throws NumberFormatException if the value cannot be converted\n */\npublic static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        // it accepts this as a legal value, but it does not appear\n        // to be in specification of class. OS X Java parses it to\n        // a wrong value.\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = str.indexOf('.');\n    int expIndex = str.indexOf('e');\n    if(expIndex == -1) {\n        expIndex = str.indexOf('E');\n    }\n    if (decPos > -1) {\n        if (expIndex > -1) {\n            if (expIndex < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expIndex);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expIndex > -1) {\n            mant = str.substring(0, expIndex);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expIndex > -1 && expIndex < str.length() - 1) {\n            exp = str.substring(expIndex + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        // Requesting a specific type...\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mant) && (exp == null || isAllZeros(exp));\n        switch (lastChar) {\n            // ...specific type cases...\n        }\n    } else {\n        // User doesn't have a preference on the return type...\n        if (expIndex > -1 && expIndex < str.length() - 1) {\n            exp = str.substring(expIndex + 1, str.length());\n        } else {\n            exp = null;\n        }\n        // ...number type determination...\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}