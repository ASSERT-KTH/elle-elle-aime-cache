{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (str.trim().isEmpty()) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        // Invalid format for numbers\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n\n    char lastChar = str.charAt(str.length() - 1);\n    String mantissa;\n    String decimal;\n    String exponent;\n    int decimalPoint = str.indexOf('.');\n    int exponentMarker = Math.max(str.indexOf('e'), str.indexOf('E'));\n\n    if (decimalPoint > -1) {\n        if (exponentMarker > -1) {\n            if (exponentMarker < decimalPoint) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            decimal = str.substring(decimalPoint + 1, exponentMarker);\n        } else {\n            decimal = str.substring(decimalPoint + 1);\n        }\n        mantissa = str.substring(0, decimalPoint);\n    } else {\n        if (exponentMarker > -1) {\n            mantissa = str.substring(0, exponentMarker);\n        } else {\n            mantissa = str;\n        }\n        decimal = null;\n    }\n\n    if (exponentMarker > -1 && exponentMarker < str.length() - 1) {\n        exponent = str.substring(exponentMarker + 1);\n    } else {\n        exponent = null;\n    }\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (decimal == null && exponent == null && \n                        (numeric.charAt(0) == '-' ? isDigits(numeric.substring(1)) : isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException e) {\n                        return createBigInteger(numeric);\n                    }\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    Float f = Float.valueOf(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException e) {\n                    // ignore and fall through\n                }\n            case 'd':\n            case 'D':\n                try {\n                    Double d = Double.valueOf(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException e) {\n                    // ignore and fall through\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n\n        if (decimal == null && exponent == null) {\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException e) {\n                // ignore and try next\n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException e) {\n                // ignore and try next\n            }\n            return createBigInteger(str);\n        } else {\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException e) {\n                // ignore and try next\n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException e) {\n                // ignore and try next\n            }\n            return createBigDecimal(str);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}