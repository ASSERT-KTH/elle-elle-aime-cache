{
    "generation": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // Evaluate function at initial point\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // Evaluate function at min\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    // Evaluate function at max\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // Check if initial guess brackets with min\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n\n    // Check if initial guess brackets with max\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n\n    // If neither endpoint brackets with initial, but endpoints bracket themselves\n    if (yMin * yMax < 0) {\n        return solve(f, min, yMin, max, yMax, initial, yInitial);\n    }\n\n    // If no bracketing is detected, throw an exception\n    throw MathRuntimeException.createIllegalArgumentException(\n        NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}