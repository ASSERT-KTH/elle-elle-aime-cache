{
    "generation": "// Fix: The issue is that the code was not considering cases where the initial guess or the endpoints are exactly equal to the root.\n// The function should return the value immediately if it is equal to the root.\n\npublic double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // return the initial guess if it is equal to the root\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) < functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // return the first endpoint if it is equal to the root\n    double yMin = f.value(min);\n    if (Math.abs(yMin) < functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    // reduce interval if min and initial bracket the root\n    if (yInitial * yMin < 0) {\n        return solve(f, min, initial, yMin);\n    }\n\n    // return the second endpoint if it is equal to the root\n    double yMax = f.value(max);\n    if (Math.abs(yMax) < functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // reduce interval if initial and max bracket the root\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, max, yMax);\n    }\n\n    if (yMin * yMax > 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    // full Brent algorithm starting with provided initial guess\n    return solve(f, min, initial, max, yMax, initial, yInitial);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}