{
    "generation": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // Evaluate function at endpoints and initial point\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, yMin, 0);\n        return min;\n    }\n\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, yMax, 0);\n        return max;\n    }\n\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, yInitial, 0);\n        return initial;\n    }\n\n    // Check if initial is equal to min or max, and their function values are acceptable\n    if (initial == min || initial == max) {\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, yInitial, 0);\n            return initial;\n        }\n    }\n\n    // Check if the function values at min and max have the same sign\n    if (yMin * yMax > 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    // Determine the interval containing the root\n    double a = min;\n    double fa = yMin;\n    double b = max;\n    double fb = yMax;\n    double c;\n    double fc;\n\n    if (yInitial * fa < 0) {\n        c = initial;\n        fc = yInitial;\n    } else if (yInitial * fb < 0) {\n        c = initial;\n        fc = yInitial;\n    } else {\n        // If initial guess does not bracket the root with either endpoint,\n        // use the entire interval [min, max]\n        c = initial;\n        fc = yInitial;\n    }\n\n    // Proceed with the Brent algorithm\n    return solve(f, a, fa, b, fb, c, fc);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}