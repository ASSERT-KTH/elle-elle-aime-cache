{
    "generation": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // return the initial guess if it is good enough\n    double initialValue = f.value(initial);\n    if (Math.abs(initialValue) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // return the endpoints if they are good enough\n    double minValue = f.value(min);\n    if (Math.abs(minValue) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n    double maxValue = f.value(max);\n    if (Math.abs(maxValue) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // what to do with these endpoints\n    if (minValue * initialValue < 0) {\n        return solve(f, min, initial, initialValue, min, minValue);\n    } else if (initialValue * maxValue < 0) {\n        return solve(f, initial, max, initialValue, initial, maxValue);\n    }\n\n    if (minValue * maxValue > 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              NON_BRACKETING_MESSAGE, min, max, minValue, maxValue);\n    }\n\n    // full Brent algorithm\n    return solve(f, min, initial, max, initialValue, maxValue);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}