{
    "generation": "    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifyInterval(min, max);\n        verifySequence(min, initial, max);\n\n        // return the initial guess if it is good enough\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0);\n            return result;\n        }\n\n        // return the second endpoint if it is good enough\n        double yMax = f.value(max);\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0);\n            return result;\n        }\n\n        // check if initial is between min and max\n        if (initial < min || initial > max) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  ILLEGAL_ARGUMENT, initial, min, max);\n        }\n\n        // check if the interval brackets a root\n        if (yInitial * yMin < 0) {\n            return solve(f, min, initial, yMin, yInitial);\n        } else if (yInitial * yMax < 0) {\n            return solve(f, initial, max, yInitial, yMax);\n        } else if (yMin * yMax > 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n        }\n\n        // full Brent algorithm starting with provided initial guess\n        return solve(f, min, initial, yMin, yInitial);\n    }\n\n    private double solve(final UnivariateRealFunction f,\n                         final double lo, final double hi,\n                         final double fLo, final double fHi)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        double a = lo;\n        double fa = fLo;\n        double b = hi;\n        double fb = fHi;\n        double c = initial;\n        double fc = fInitial;\n\n        if (Math.abs(fc) < Math.abs(fb)) {\n            a = b;\n            b = c;\n            c = a;\n            fa = fb;\n            fb = fc;\n            fc = fa;\n        }\n\n        double d = b - c;\n        double e = d;\n\n        for (int i = 1; i <= maximalIterationCount; ++i) {\n            if (fa != fc && fb != fc) {\n                double s =\n                    (a * fb * fc / ((fa - fb) * (fa - fc)) +\n                     b * fa * fc / ((fb - fa) * (fb - fc)) +\n                     c * fa * fb / ((fc - fa) * (fc - fb)));\n                if (s >= Math.min(a, b) && s <= Math.max(a, b) &&\n                    Math.abs(s - c) < Math.abs(e / 2)) {\n                    d = e;\n                    e = s - c;\n                } else {\n                    e = (c >= (a + b) / 2) ? a - c : b - c;\n                    d = cN * e;\n                }\n            } else {\n                e = (c >= (a + b) / 2) ? a - c : b - c;\n                d = cN * e;\n            }\n\n            double u = (Math.abs(d) >= tol / 2) ?\n                       c + d :\n                       c + (d > 0 ? tol / 2 : -tol / 2);\n\n            double fu = f.value(u);\n\n            if (fu == 0) {\n                setResult(u, i);\n                return result;\n            }\n\n            if ((fu < 0 && fb < 0) || (fu > 0 && fb > 0)) {\n                a = b;\n                fa = fb;\n                b = c;\n                fb = fc;\n                c = u;\n                fc = fu;\n            } else {\n                if (Math.abs(fu) < Math.abs(fb)) {\n                    b = c;\n                    fb = fc;\n                    c = u;\n                    fc = fu;\n                }\n            }\n\n            if (Math.abs(e) > tol) {\n                tol = cN * Math.abs(u - c);\n            } else {\n                tol = tol / 2;\n            }\n\n            a = b;\n            fa = fb;\n            b = c;\n            fb = fc;\n            c = u;\n            fc = fu;\n        }\n\n        throw new MaxIterationsExceededException(maximalIterationCount, a, b);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}