{
    "generation": "/**\n * Method called to figure out settable properties for the\n * bean deserializer to use.\n *<p>\n * Note: designed to be overridable, and effort is made to keep interface\n * similar between versions.\n */\nprotected void addBeanProps(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException\n{\n    //... (rest of the method remains the same until this point)\n\n    // Ok: let's then filter out property definitions\n    List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n            beanDesc, builder, beanDesc.findProperties(), ignored);\n\n    // After which we can let custom code change the set\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    \n    // **FIXED LOGIC STARTS HERE**\n    for (BeanPropertyDefinition propDef : propDefs) {\n        SettableBeanProperty prop = null;\n        \n        // Check for JsonIgnore on setter, field and getter separately\n        if (!propDef.hasIgnoreSetter(ctxt.getConfig())) {\n            if (propDef.hasSetter()) {\n                JavaType propertyType = propDef.getSetter().getParameterType(0);\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (propDef.hasField() &&!propDef.hasIgnoreField(ctxt.getConfig())) {\n                JavaType propertyType = propDef.getField().getType();\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            }\n        }\n        \n        if (useGettersAsSetters && propDef.hasGetter() &&!propDef.hasIgnoreGetter(ctxt.getConfig())) {\n            /* May also need to consider getters\n             * for Map/Collection properties; but with lowest precedence\n             */\n            AnnotatedMethod getter = propDef.getGetter();\n            // should only consider Collections and Maps, for now?\n            Class<?> rawPropertyType = getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType)\n                    || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        \n        //... (rest of the method remains the same)",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}