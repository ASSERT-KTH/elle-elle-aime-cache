{
    "generation": "/**\n * Method called to figure out settable properties for the bean deserializer to use.\n */\nprotected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete = !beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n            ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps != null);\n\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n            .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n\n    if (ignorals != null) {\n        builder.setIgnoreUnknownProperties(ignorals.getIgnoreUnknown());\n        ignored = ignorals.getIgnored();\n        for (String propName : ignored) {\n            builder.addIgnorable(propName);\n        }\n    } else {\n        ignored = Collections.emptySet();\n    }\n\n    AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();\n    AnnotatedMember anySetterField = beanDesc.findAnySetterField();\n    if (anySetterMethod != null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));\n    } else if (anySetterField != null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));\n    }\n\n    if (anySetterMethod == null && anySetterField == null) {\n        Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();\n        if (ignored2 != null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n            && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\n\n    List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n            beanDesc, builder, beanDesc.findProperties(), ignored);\n\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n\n    for (BeanPropertyDefinition propDef : propDefs) {\n        SettableBeanProperty prop;\n        if (propDef.hasSetter()) {\n            prop = constructSettableProperty(ctxt, beanDesc, propDef, propDef.getSetter().getParameterType(0));\n        } else if (propDef.hasField()) {\n            prop = constructSettableProperty(ctxt, beanDesc, propDef, propDef.getField().getType());\n        } else if (propDef.hasConstructorParameter()) {\n            prop = constructConstructorProperty(ctxt, beanDesc, propDef, creatorProps);\n        } else if (useGettersAsSetters && propDef.hasGetter()) {\n            prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n        } else {\n            continue;\n        }\n\n        Class<?>[] views = propDef.findViews();\n        if (views == null && !ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n            views = NO_VIEWS;\n        }\n        prop.setViews(views);\n        builder.addProperty(prop);\n    }\n}\n\nprivate SettableBeanProperty constructConstructorProperty(DeserializationContext ctxt,\n                                                          BeanDescription beanDesc,\n                                                          BeanPropertyDefinition propDef,\n                                                          SettableBeanProperty[] creatorProps)\n    throws JsonMappingException {\n    final String name = propDef.getName();\n    if (creatorProps != null) {\n        for (SettableBeanProperty cp : creatorProps) {\n            if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {\n                return (CreatorProperty) cp;\n            }\n        }\n    }\n    ctxt.reportBadPropertyDefinition(beanDesc, propDef,\n            \"Could not find creator property with name '%s'\", name);\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}