{
    "generation": "/**\n * Method called to figure out settable properties for the\n * bean deserializer to use.\n *<p>\n * Note: designed to be overridable, and effort is made to keep interface\n * similar between versions.\n */\nprotected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException\n{\n    //... (rest of the code remains the same until this point)\n\n    // Ok: let's then filter out property definitions\n    List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n            beanDesc, builder, beanDesc.findProperties(), ignored);\n\n    // **FIXED BLOCK START**\n    // Apply ignoral settings from @JsonIgnore on getters/setters\n    if (anySetterMethod == null && anySetterField == null) {\n        for (BeanPropertyDefinition propDef : propDefs) {\n            if (propDef.hasGetter() && propDef.getGetter().hasIgnoreMarker()) {\n                // If getter is ignored, but there's a setter, ignore the property\n                if (propDef.hasSetter()) {\n                    builder.addIgnorable(propDef.getName());\n                }\n            }\n        }\n    }\n    // **FIXED BLOCK END**\n\n    // After which we can let custom code change the set\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    \n    //... (rest of the code remains the same)\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}