{
    "generation": "    protected void addBeanProps(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n            throws JsonMappingException\n    {\n        // ...\n\n        // Also, do we have a fallback \"any\" setter?\n        AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();\n        AnnotatedMember anySetterField = null;\n        if (anySetterMethod != null) {\n            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));\n        }\n        else {\n            anySetterField = beanDesc.findAnySetterField();\n            if (anySetterField != null) {\n                builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));\n            }\n        }\n\n        // Handle properties even if there's an any-setter\n        Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();\n        if (ignored2 != null) {\n            for (String propName : ignored2) {\n                // Check if there's a setter for the property, if not, add it as ignorable\n                if (!beanDesc.findSetter(propName).hasSetter()) {\n                    builder.addIgnorable(propName);\n                }\n            }\n        }\n\n        // ...\n\n        // Ok: let's then filter out property definitions\n        List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n                beanDesc, builder, beanDesc.findProperties(), ignored);\n\n        // ...\n\n        // At this point we still have all kinds of properties; not all with mutators:\n        for (BeanPropertyDefinition propDef : propDefs) {\n            SettableBeanProperty prop = null;\n            /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,\n             *   we need to do linkage (as per [databind#318]), and so need to start with\n             *   other types, and only then create constructor parameter, if any.\n             */\n            if (propDef.hasSetter()) {\n                JavaType propertyType = propDef.getSetter().getParameterType(0);\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (propDef.hasField() && !beanDesc.findSetter(propDef.getName()).hasSetter()) {\n                // Add field as ignorable if there's no setter for it\n                JavaType propertyType = propDef.getField().getType();\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n                builder.addIgnorable(propDef.getName());\n            } else if (useGettersAsSetters && propDef.hasGetter()) {\n                // ...\n            }\n\n            // ...\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}