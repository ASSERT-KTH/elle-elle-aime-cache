{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  FunctionType fnType = type.toMaybeFunctionType();\n  if (fnType == null && type.isConstructor()) {\n    fnType = type.toMaybeFunctionType();\n  }\n  if (fnType != null && (fnType.getInstanceType().isConstructor() ||\n       fnType.getInstanceType().isUnknownType() ||\n       fnType.getInstanceType().isEmptyType())) {\n    visitParameterList(t, n, fnType);\n    ensureTyped(t, n, fnType.getInstanceType());\n  } else if (type.isConstructor() || type.isUnknownType() || type.isEmptyType()) {\n    ensureTyped(t, n);\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}