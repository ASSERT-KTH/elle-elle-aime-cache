{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n    if (fnType!= null) {\n      visitParameterList(t, n, fnType);\n      ensureTyped(t, n, fnType.getInstanceType());\n    } else {\n      ensureTyped(t, n);\n    }\n  } else if (type.isInterface()) {\n    // Check if there's a constructor that implements this interface\n    for (JSType implementedType : getImplementedTypes(constructor)) {\n      if (implementedType!= null && implementedType.isConstructor()) {\n        FunctionType fnType = implementedType.toMaybeFunctionType();\n        if (fnType!= null) {\n          visitParameterList(t, n, fnType);\n          ensureTyped(t, n, fnType.getInstanceType());\n          return;\n        }\n      }\n    }\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}