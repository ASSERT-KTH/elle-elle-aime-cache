{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n    if (fnType!= null) {\n      // Check if the function type is a constructor and if it implements an interface.\n      if (fnType.isConstructor() && fnType.getInstanceType().isInterface()) {\n        // Get the interface implemented by the constructor.\n        JSType interfaceType = fnType.getInstanceType();\n        // Update the type of the new expression to be the type of the interface.\n        ensureTyped(t, n, interfaceType);\n      } else {\n        visitParameterList(t, n, fnType);\n        ensureTyped(t, n, fnType.getInstanceType());\n      }\n    } else {\n      ensureTyped(t, n);\n    }\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}