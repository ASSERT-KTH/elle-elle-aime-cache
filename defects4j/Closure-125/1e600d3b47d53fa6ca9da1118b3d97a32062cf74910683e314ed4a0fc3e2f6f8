{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n    if (fnType!= null) {\n      visitParameterList(t, n, fnType);\n      ensureTyped(t, n, fnType.getInstanceType());\n    } else if (type.isUnionType()) {\n      // Special handling for union types.\n      for (JSType unionType : type.toMaybeUnionType().getAlternates()) {\n        if (unionType.isConstructor()) {\n          FunctionType unionFnType = unionType.toMaybeFunctionType();\n          if (unionFnType!= null) {\n            ensureTyped(t, n, unionFnType.getInstanceType());\n            break;\n          }\n        }\n      }\n    } else {\n      ensureTyped(t, n);\n    }\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}