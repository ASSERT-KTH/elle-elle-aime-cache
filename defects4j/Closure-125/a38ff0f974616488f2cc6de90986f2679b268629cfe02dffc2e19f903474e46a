{
    "generation": "/**\n * Visits a NEW node.\n */\nprivate void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n    \n    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType() || type.isInterface()) {\n        FunctionType fnType = type.toMaybeFunctionType();\n        if (fnType != null) {\n            visitParameterList(t, n, fnType);\n            JSType instanceType = fnType.getInstanceType();\n            \n            // If the instance type is an interface, we need to check if it's implemented by a constructor\n            if (instanceType.isInterface()) {\n                // Check if there's any implementing class\n                for (ObjectType implementingType : instanceType.getImplicitPrototype().getAllImplementedInterfaces()) {\n                    FunctionType implementingFnType = implementingType.getConstructor();\n                    if (implementingFnType != null) {\n                        instanceType = implementingFnType.getInstanceType();\n                        break;\n                    }\n                }\n            }\n            \n            ensureTyped(t, n, instanceType);\n        } else {\n            ensureTyped(t, n);\n        }\n    } else {\n        report(t, n, NOT_A_CONSTRUCTOR);\n        ensureTyped(t, n);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}