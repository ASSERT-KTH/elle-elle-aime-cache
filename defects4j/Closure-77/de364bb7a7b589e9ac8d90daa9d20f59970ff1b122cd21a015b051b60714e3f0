{
    "generation": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    if(c == '\\0') {\n      sb.append(\"\\\\0\");\n    } else if (c == '\\n') {\n      sb.append(\"\\\\n\");\n    } else if (c == '\\r') {\n      sb.append(\"\\\\r\");\n    } else if (c == '\\t') {\n      sb.append(\"\\\\t\");\n    } else if (c == '\\\\') {\n      sb.append(backslashEscape);\n    } else if (c == '\\\"') {\n      sb.append(doublequoteEscape);\n    } else if (c == '\\'') {\n      sb.append(singlequoteEscape);\n    } else if (c == '>') {\n      // Break --> into --\\> or ]]> into ]]\\>\n      if (i >= 2 &&\n          ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n           (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n        sb.append(\"\\\\>\");\n      } else {\n        sb.append(c);\n      }\n    } else if (c == '<') {\n      // Break </script into <\\/script\n      final String END_SCRIPT = \"/script\";\n\n      // Break <!-- into <\\!--\n      final String START_COMMENT = \"!--\";\n\n      if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                          END_SCRIPT.length())) {\n        sb.append(\"<\\\\\");\n      } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                 START_COMMENT.length())) {\n        sb.append(\"<\\\\\");\n      } else {\n        sb.append(c);\n      }\n    } else {\n      // If we're given an outputCharsetEncoder, then check if the\n      //  character can be represented in this character set.\n      if (outputCharsetEncoder != null) {\n        if (outputCharsetEncoder.canEncode(c)) {\n          sb.append(c);\n        } else {\n          // Unicode-escape the character.\n          appendHexJavaScriptRepresentation(sb, c);\n        }\n      } else {\n        // No charsetEncoder provided - pass straight latin characters\n        // through, and escape the rest.  Doing the explicit character\n        // check is measurably faster than using the CharsetEncoder.\n        if (c > 0x1f && c <= 0x7f) {\n          sb.append(c);\n        } else {\n          // Other characters can be misinterpreted by some js parsers,\n          // or perhaps mangled by proxies along the way,\n          // so we play it safe and unicode escape them.\n          appendHexJavaScriptRepresentation(sb, c);\n        }\n      }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}