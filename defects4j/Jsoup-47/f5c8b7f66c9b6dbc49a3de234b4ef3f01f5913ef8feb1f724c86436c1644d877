{
    "generation": "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n\n    // ...\n\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n\n        // ...\n\n        // html specific and required escapes:\n        switch (c) {\n            case '&':\n                accum.append(\"&amp;\");\n                break;\n            case 0xA0:\n                if (escapeMode != EscapeMode.xhtml)\n                    accum.append(\"&nbsp;\");\n                else\n                    accum.append(\"&#xa0;\");\n                break;\n            case '<':\n                // escape when not in html attribute value\n                accum.append(inAttribute && escapeMode != EscapeMode.xhtml ? c : \"&lt;\");\n                break;\n            case '>':\n                // escape when in xml attribute value\n                accum.append(inAttribute && escapeMode == EscapeMode.xhtml ? \"&gt;\" : c);\n                break;\n            case '\"':\n                if (inAttribute)\n                    accum.append(\"&quot;\");\n                else\n                    accum.append(c);\n                break;\n            // ...\n        }\n\n        // ...\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}