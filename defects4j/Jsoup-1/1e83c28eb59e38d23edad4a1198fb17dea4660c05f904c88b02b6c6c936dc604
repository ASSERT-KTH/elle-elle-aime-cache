{
    "generation": "// does not recurse.\nprivate void normalise(Element element) {\n    if (element.childNodes.size() == 0) return;\n    Node firstChild = element.childNodes.get(0);\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank() && node.equals(firstChild))\n                toMove.add(tn);\n        }\n    }\n\n    for (Node node: toMove) {\n        element.removeChild(node);\n        Element body = body();\n        if (body.childNodes.size() > 0) {\n            Node lastChild = body.childNodes.get(body.childNodes.size() - 1);\n            if (lastChild instanceof TextNode) {\n                ((TextNode) lastChild).setText(((TextNode) lastChild).getText() + ((TextNode) node).getText());\n            } else {\n                body.appendChild(new TextNode(\" \", \"\"));\n                body.appendChild(node);\n            }\n        } else {\n            body.appendChild(node);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}