{
    "generation": "    // Fixed to recurse and append text nodes correctly.\n    private void normalise(Element element) {\n        List<Node> toMove = new ArrayList<Node>();\n        for (Node node : element.childNodes) {\n            if (node instanceof TextNode) {\n                TextNode tn = (TextNode) node;\n                if (!tn.isBlank())\n                    toMove.add(tn);\n            } else if (node instanceof Element) {\n                normalise((Element) node); // Recurse into child elements\n            }\n        }\n\n        Node firstChild = element.childNode(0);\n        for (Node node : toMove) {\n            element.removeChild(node);\n            if (firstChild == null) {\n                element.prependChild(new TextNode(\" \", \"\"));\n                element.prependChild(node);\n            } else {\n                firstChild.before(new TextNode(\" \", \"\"));\n                firstChild.before(node);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}