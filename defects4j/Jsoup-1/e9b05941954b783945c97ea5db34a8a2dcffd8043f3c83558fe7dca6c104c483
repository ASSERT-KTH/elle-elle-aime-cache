{
    "generation": "    // does not recurse.\n    private void normalise(Element element) {\n        List<Node> toMove = new ArrayList<Node>();\n        for (Node node: element.childNodes) {\n            if (node instanceof TextNode) {\n                TextNode tn = (TextNode) node;\n                if (!tn.isBlank())\n                    toMove.add(tn);\n            }\n        }\n\n        for (int i = toMove.size()-1; i >= 0; i--) {\n            Node node = toMove.get(i);\n            element.removeChild(node);\n            if (element.childNodeSize() == 0) // was size == 1, but that failed eg if inserting into empty node\n                element.appendChild(new TextNode(\" \", \"\"));\n            else\n                element.childNode(0).before(new TextNode(\" \", \"\"));\n            element.childNode(0).before(node);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}