{
    "generation": "protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MathIllegalStateException {\n\n    double previousT = interpolator.getGlobalPreviousTime();\n    final double currentT = interpolator.getGlobalCurrentTime();\n    resetOccurred = false;\n\n    if (!statesInitialized) {\n        for (EventState state : eventsStates) {\n            state.reinitializeBegin(interpolator);\n        }\n        statesInitialized = true;\n    }\n\n    final int orderingSign = interpolator.isForward() ? 1 : -1;\n    SortedSet<EventState> occuringEvents = new TreeSet<>(new Comparator<EventState>() {\n        public int compare(EventState es0, EventState es1) {\n            return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n        }\n    });\n\n    for (final EventState state : eventsStates) {\n        state.evaluateStep(previousT);\n        if (state.evaluateStep(interpolator)) {\n            occuringEvents.add(state);\n        }\n    }\n\n    while (!occuringEvents.isEmpty()) {\n\n        final EventState currentEvent = occuringEvents.first();\n        occuringEvents.remove(currentEvent);\n\n        final double eventT = currentEvent.getEventTime();\n\n        if (Math.abs(eventT - previousT) > Precision.SAFE_MIN) {\n            interpolator.setSoftPreviousTime(previousT);\n            interpolator.setSoftCurrentTime(eventT);\n        } else {\n            interpolator.setSoftPreviousTime(eventT);\n            interpolator.setSoftCurrentTime(currentT);\n        }\n\n        interpolator.setInterpolatedTime(eventT);\n        final double[] eventY = interpolator.getInterpolatedState();\n        currentEvent.stepAccepted(eventT, eventY);\n        isLastStep = currentEvent.stop();\n\n        for (final StepHandler handler : stepHandlers) {\n            if (Math.abs(eventT - previousT) > Precision.SAFE_MIN) {\n                handler.handleStep(interpolator, false);\n            }\n        }\n\n        if (isLastStep) {\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            return eventT;\n        }\n\n        if (currentEvent.reset(eventT, eventY)) {\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            computeDerivatives(eventT, y, yDot);\n            resetOccurred = true;\n            return eventT;\n        }\n\n        previousT = eventT;\n        interpolator.setSoftPreviousTime(eventT);\n        interpolator.setSoftCurrentTime(currentT);\n\n        currentEvent.evaluateStep(previousT);\n        if (currentEvent.evaluateStep(interpolator)) {\n            occuringEvents.add(currentEvent);\n        }\n    }\n\n    interpolator.setInterpolatedTime(currentT);\n    final double[] currentY = interpolator.getInterpolatedState();\n    for (final EventState state : eventsStates) {\n        state.stepAccepted(currentT, currentY);\n        isLastStep = isLastStep || state.stop();\n    }\n\n    isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n    if (Math.abs(currentT - previousT) > Precision.SAFE_MIN) {\n        for (StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n    }\n\n    return currentT;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}