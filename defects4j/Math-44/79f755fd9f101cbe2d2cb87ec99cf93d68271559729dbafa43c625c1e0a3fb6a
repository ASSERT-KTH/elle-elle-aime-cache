{
    "generation": "protected double acceptStep(final AbstractStepInterpolator interpolator,\n                            final double[] y, final double[] yDot, final double tEnd)\n    throws MathIllegalStateException {\n\n    double previousT = interpolator.getGlobalPreviousTime();\n    final double currentT = interpolator.getGlobalCurrentTime();\n    resetOccurred = false;\n\n    // Initialize the events states if needed\n    if (!statesInitialized) {\n        for (EventState state : eventsStates) {\n            state.reinitializeBegin(interpolator);\n        }\n        statesInitialized = true;\n    }\n\n    // Search for next events that may occur during the step\n    final int orderingSign = interpolator.isForward() ? +1 : -1;\n    SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n\n        /** {@inheritDoc} */\n        public int compare(EventState es0, EventState es1) {\n            return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n        }\n\n    });\n\n    for (final EventState state : eventsStates) {\n        if (state.evaluateStep(interpolator)) {\n            // The event occurs during the current step\n            occuringEvents.add(state);\n        }\n    }\n\n    double stepEnd = currentT;\n    boolean lastStep = false;\n\n    while (!occuringEvents.isEmpty()) {\n        // Handle the chronologically first event\n        final Iterator<EventState> iterator = occuringEvents.iterator();\n        final EventState currentEvent = iterator.next();\n        iterator.remove();\n\n        // Restrict the interpolator to the first part of the step, up to the event\n        final double eventT = currentEvent.getEventTime();\n        if (eventT > stepEnd || eventT < previousT) {\n            // This event is out of the current step range, ignore it\n            continue;\n        }\n\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(eventT);\n\n        // Trigger the event\n        interpolator.setInterpolatedTime(eventT);\n        final double[] eventY = interpolator.getInterpolatedState();\n        currentEvent.stepAccepted(eventT, eventY);\n        lastStep = currentEvent.stop();\n\n        // Handle the first part of the step, up to the event\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, lastStep);\n        }\n\n        if (lastStep) {\n            // The event asked to stop integration\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            return eventT;\n        }\n\n        if (currentEvent.reset(eventT, eventY)) {\n            // Some event handler has triggered changes that\n            // invalidate the derivatives, we need to recompute them\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            computeDerivatives(eventT, y, yDot);\n            resetOccurred = true;\n            previousT = eventT;\n            stepEnd = eventT;\n\n            // Re-evaluate all events after reset\n            occuringEvents.clear();\n            for (final EventState state : eventsStates) {\n                if (state.evaluateStep(interpolator)) {\n                    occuringEvents.add(state);\n                }\n            }\n            continue;\n        }\n\n        // Prepare handling of the remaining part of the step\n        previousT = eventT;\n        interpolator.setSoftPreviousTime(eventT);\n        interpolator.setSoftCurrentTime(currentT);\n\n        // Check if the same event occurs again in the remaining part of the step\n        if (currentEvent.evaluateStep(interpolator)) {\n            // The event occurs during the current step\n            occuringEvents.add(currentEvent);\n        }\n    }\n\n    interpolator.setInterpolatedTime(currentT);\n    final double[] currentY = interpolator.getInterpolatedState();\n    for (final EventState state : eventsStates) {\n        state.stepAccepted(currentT, currentY);\n        lastStep = lastStep || state.stop();\n    }\n    lastStep = lastStep || Precision.equals(currentT, tEnd, 1);\n\n    // Handle the remaining part of the step, after all events if any\n    for (StepHandler handler : stepHandlers) {\n        handler.handleStep(interpolator, lastStep);\n    }\n\n    System.arraycopy(currentY, 0, y, 0, y.length);\n    return currentT;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}