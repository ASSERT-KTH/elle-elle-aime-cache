{
    "generation": "protected double acceptStep(final AbstractStepInterpolator interpolator,\n                            final double[] y, final double[] yDot, final double tEnd)\n        throws MathIllegalStateException {\n\n    double previousT = interpolator.getGlobalPreviousTime();\n    final double currentT = interpolator.getGlobalCurrentTime();\n    resetOccurred = false;\n\n    // Initialize the events states if needed\n    if (!statesInitialized) {\n        for (EventState state : eventsStates) {\n            state.reinitializeBegin(interpolator);\n        }\n        statesInitialized = true;\n    }\n\n    // Search for next events that may occur during the step\n    final int orderingSign = interpolator.isForward() ? +1 : -1;\n    SortedSet<EventState> occurringEvents = new TreeSet<>(new Comparator<EventState>() {\n        public int compare(EventState es0, EventState es1) {\n            return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n        }\n    });\n\n    for (EventState state : eventsStates) {\n        if (state.evaluateStep(interpolator)) {\n            // The event occurs during the current step\n            occurringEvents.add(state);\n        }\n    }\n\n    while (!occurringEvents.isEmpty()) {\n\n        // Handle the chronologically first event\n        Iterator<EventState> iterator = occurringEvents.iterator();\n        EventState currentEvent = iterator.next();\n        iterator.remove();\n\n        // Restrict the interpolator to the first part of the step, up to the event\n        double eventT = currentEvent.getEventTime();\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(eventT);\n\n        // Trigger the event\n        interpolator.setInterpolatedTime(eventT);\n        double[] eventY = interpolator.getInterpolatedState();\n        currentEvent.stepAccepted(eventT, eventY);\n        isLastStep = currentEvent.stop();\n\n        // Handle the first part of the step, up to the event\n        for (StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        if (isLastStep) {\n            // The event asked to stop integration\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            return eventT;\n        }\n\n        if (currentEvent.reset(eventT, eventY)) {\n            // Some event handler has triggered changes that\n            // invalidate the derivatives, we need to recompute them\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            computeDerivatives(eventT, y, yDot);\n            resetOccurred = true;\n            return eventT;\n        }\n\n        // Prepare handling of the remaining part of the step\n        previousT = eventT;\n        interpolator.setSoftPreviousTime(eventT);\n        interpolator.setSoftCurrentTime(currentT);\n\n        // Check if the same event occurs again in the remaining part of the step\n        if (currentEvent.evaluateStep(interpolator)) {\n            // The event occurs during the current step\n            occurringEvents.add(currentEvent);\n        }\n    }\n\n    // No events in the step, handle the entire step\n    interpolator.setInterpolatedTime(currentT);\n    double[] currentY = interpolator.getInterpolatedState();\n    for (EventState state : eventsStates) {\n        state.stepAccepted(currentT, currentY);\n        isLastStep = isLastStep || state.stop();\n    }\n    isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n    // Handle the step\n    for (StepHandler handler : stepHandlers) {\n        handler.handleStep(interpolator, isLastStep);\n    }\n\n    return currentT;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}