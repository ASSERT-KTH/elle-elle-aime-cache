{
    "generation": "protected double acceptStep(final AbstractStepInterpolator interpolator,\n                            final double[] y, final double[] yDot, final double tEnd)\n    throws MathIllegalStateException {\n\n    double previousT = interpolator.getGlobalPreviousTime();\n    final double currentT = interpolator.getGlobalCurrentTime();\n    resetOccurred = false;\n\n    // initialize the events states if needed\n    if (! statesInitialized) {\n        for (EventState state : eventsStates) {\n            state.reinitializeBegin(interpolator);\n        }\n        statesInitialized = true;\n    }\n\n    // define a small epsilon to use in comparing event times\n    final double epsilon = 1.0e-10;\n\n    // search for next events that may occur during the step\n    final int orderingSign = interpolator.isForward() ? +1 : -1;\n    SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n        /** {@inheritDoc} */\n        public int compare(EventState es0, EventState es1) {\n            return orderingSign * Double.compare(es0.getEventTime() + epsilon, es1.getEventTime() + epsilon);\n        }\n    });\n\n    /*... rest of the method code ...*/\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}