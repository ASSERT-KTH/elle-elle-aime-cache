{
    "generation": "if (!NodeUtil.isDirectCallNodeReplacementPossible(fnNode)) {\n  return CanInlineResult.NO;\n}\n\nNode block = fnNode.getLastChild();\n\nboolean hasSideEffects = false;\nif (block.hasChildren()) {\n  Preconditions.checkState(block.hasOneChild());\n  Node stmt = block.getFirstChild();\n  if (stmt.isReturn()) {\n    hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n  }\n}\n\n// CALL NODE: [ NAME, ARG1, ARG2, ... ]\nNode cArg = callNode.getFirstChild().getNext();\n\n// FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\nNode fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\nwhile (cArg != null || fnParam != null) {\n  if (fnParam != null) {\n    String paramName = fnParam.getString();\n    int refCount = NodeUtil.getNameReferenceCount(block, paramName);\n\n    // New requirement: Check if a parameter is mentioned more than once.\n    if (refCount > 1) {\n      return CanInlineResult.NO;\n    }\n\n    if (cArg != null) {\n      if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n        return CanInlineResult.NO;\n      }\n\n      if (NodeUtil.mayEffectMutableState(cArg, compiler) && refCount > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n\n    fnParam = fnParam.getNext();\n  }\n\n  if (cArg != null) {\n    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg = cArg.getNext();\n  }\n}\n\nreturn CanInlineResult.YES;",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}