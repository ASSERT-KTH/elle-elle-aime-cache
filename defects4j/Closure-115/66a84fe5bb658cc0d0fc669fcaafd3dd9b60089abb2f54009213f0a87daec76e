{
    "generation": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // Determine if the return statement has side effects\n    boolean hasReturnSideEffects = false;\n    if (block.hasChildren()) {\n        Node stmt = block.getFirstChild();\n        if (stmt.isReturn()) {\n            Node returnValue = stmt.getFirstChild();\n            if (returnValue != null) {\n                hasReturnSideEffects = NodeUtil.mayHaveSideEffects(returnValue, compiler);\n            }\n        }\n    }\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            // TODO(johnlenz): Support replace this with a value.\n            if (cArg == null || !cArg.isThis()) {\n                return CanInlineResult.NO;\n            }\n            cArg = cArg.getNext();\n        } else {\n            // \".apply\" call should be filtered before this.\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null && fnParam != null) {\n        // Check if a mutable argument is used more than once.\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n        }\n\n        // Move to the next parameter and argument\n        fnParam = fnParam.getNext();\n        cArg = cArg.getNext();\n    }\n\n    // If there are more arguments than parameters, and any of the extra arguments have side effects, inline is not possible\n    while (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n            return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n    }\n\n    // If there are more parameters than arguments, and the function has side effects, inline is not possible\n    while (fnParam != null) {\n        String paramName = fnParam.getString();\n        if (NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n            return CanInlineResult.NO;\n        }\n        fnParam = fnParam.getNext();\n    }\n\n    // Check if the return statement has side effects and parameters are used only once\n    if (hasReturnSideEffects) {\n        NodeUtil.FunctionParamTypeCreator creator = new NodeUtil.FunctionParamTypeCreator(compiler);\n        List<Node> params = NodeUtil.get FunctionParameters(fnNode).getChildren();\n        for (Node param : params) {\n            String paramName = param.getString();\n            if (NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n                return CanInlineResult.NO;\n            }\n        }\n    }\n\n    return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}