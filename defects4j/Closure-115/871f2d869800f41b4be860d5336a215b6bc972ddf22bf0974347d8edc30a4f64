{
    "generation": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    boolean hasSideEffects = false;\n    if (block.hasChildren()) {\n        Node stmt = block.getFirstChild();\n        if (stmt.isReturn()) {\n            hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n        }\n    }\n\n    Node cArg = callNode.getFirstChild().getNext();\n\n    if (!callNode.getFirstChild().isName()) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            if (cArg == null || !cArg.isThis()) {\n                return CanInlineResult.NO;\n            }\n            cArg = cArg.getNext();\n        } else {\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n        if (fnParam != null) {\n            if (cArg != null) {\n                if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n                    return CanInlineResult.NO;\n                }\n                // Check for arguments that are evaluated more than once\n                if (NodeUtil.mayEffectMutableState(cArg, compiler)\n                    && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n                    return CanInlineResult.NO;\n                }\n                // Check for modifications to object or array parameters\n                if (NodeUtil.isObjectLiteral(cArg) || NodeUtil.isArrayLiteral(cArg)) {\n                    if (NodeUtil.containsCallOrNew(block, fnParam.getString())) {\n                        return CanInlineResult.NO;\n                    }\n                }\n            }\n            fnParam = fnParam.getNext();\n        }\n\n        if (cArg != null) {\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                return CanInlineResult.NO;\n            }\n            cArg = cArg.getNext();\n        }\n    }\n\n    // Check for double inlining cases\n    if (NodeUtil.containsFunction(block)) {\n        Node innerFn = NodeUtil.getFunctionChild(block);\n        if (innerFn != null && NodeUtil.isCall(innerFn)) {\n            Node innerCall = innerFn.getFirstChild();\n            if (innerCall != null && innerCall.isName()) {\n                String innerFnName = innerCall.getString();\n                if (NodeUtil.getNameReferenceCount(block, innerFnName) > 1) {\n                    return CanInlineResult.NO;\n                }\n            }\n        }\n    }\n\n    return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}