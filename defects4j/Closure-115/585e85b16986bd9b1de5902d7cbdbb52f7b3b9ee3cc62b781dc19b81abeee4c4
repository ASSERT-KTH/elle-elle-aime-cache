{
    "generation": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  boolean hasSideEffects = false;\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    Node stmt = block.getFirstChild();\n    if (stmt.isReturn()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n    }\n  }\n\n  // Handle call and apply methods specially\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      Node cArg = callNode.getFirstChild().getNext();\n      if (cArg != null && cArg.isThis()) {\n        cArg = cArg.getNext();\n      } else {\n        return CanInlineResult.NO;\n      }\n    } else {\n      // \".apply\" call should be filtered before this.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  } else {\n    cArg = callNode.getFirstChild().getNext();\n  }\n\n  // Get function parameters\n  Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n  Node fnParam = fnParams.getFirstChild();\n  Node cArgTemp = cArg;\n\n  // Check each argument\n  while (cArg != null || fnParam != null) {\n    if (fnParam != null) {\n      if (cArg != null) {\n        if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n          return CanInlineResult.NO;\n        }\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n      } else {\n        // No corresponding argument for this parameter\n        // Check if parameter has a default value\n        if (!fnParam.hasChildren()) {\n          return CanInlineResult.NO;\n        }\n      }\n      fnParam = fnParam.getNext();\n    }\n\n    if (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  // Check for rest parameters\n  if (NodeUtil.hasRestParameters(fnParams)) {\n    // Additional logic for rest parameters if needed\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}