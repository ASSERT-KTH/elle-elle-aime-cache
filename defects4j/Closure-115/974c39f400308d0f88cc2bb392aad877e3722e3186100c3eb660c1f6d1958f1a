{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // Check if the function body has side effects\n  boolean bodyHasSideEffects = false;\n  if (block.hasChildren()) {\n    for (Node stmt = block.getFirstChild(); stmt != null; stmt = stmt.getNext()) {\n      if (NodeUtil.mayHaveSideEffects(stmt, compiler)) {\n        bodyHasSideEffects = true;\n        break;\n      }\n    }\n  }\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Functions called via 'call' and 'apply' have a this-object as\n  // the first parameter, but this is not part of the called function's\n  // parameter list.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO(johnlenz): Support replace this with a value.\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" call should be filtered before this.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  Set<String> usedParams = new HashSet<>();\n\n  while (cArg != null || fnParam != null) {\n    // For each named parameter check if a mutable argument use more than one.\n    if (fnParam != null) {\n      String paramName = fnParam.getString();\n      usedParams.add(paramName);\n\n      if (cArg != null) {\n        // Check for arguments that are evaluated more than once or have side effects\n        if (NodeUtil.mayEffectMutableState(cArg, compiler) ||\n            NodeUtil.canBeSideEffected(cArg)) {\n          if (bodyHasSideEffects || \n              NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n      }\n\n      fnParam = fnParam.getNext();\n    }\n\n    // For every call argument check for side-effects, even if there\n    // isn't a named parameter to match.\n    if (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  // Check for any parameter modifications or side effects within the function body\n  if (bodyHasSideEffects) {\n    for (Node stmt = block.getFirstChild(); stmt != null; stmt = stmt.getNext()) {\n      for (String param : usedParams) {\n        if (NodeUtil.referencesThisBefore(stmt, param, compiler)) {\n          return CanInlineResult.NO;\n        }\n      }\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}