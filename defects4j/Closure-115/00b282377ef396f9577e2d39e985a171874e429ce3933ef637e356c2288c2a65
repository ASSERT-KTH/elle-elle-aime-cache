{
    "generation": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    boolean hasSideEffects = false;\n\n    if (block.hasChildren() && block.getFirstChild().isReturn()) {\n      Node stmt = block.getFirstChild();\n      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n    }\n\n    Node cArg = callNode.getFirstChild().getNext();\n\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode) && NodeUtil.isGetOrCall(callNode.getParent())) {\n        cArg = cArg.getNext();\n      } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n        return CanInlineResult.NO;\n      }\n    }\n\n    // Consider the arguments only present in the function node and not in the call node,\n    // since they can't have side effects because they are not evaluated.\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (fnParam != null) {\n      if (hasSideEffects && !NodeUtil.isArgumentNameDefined(fnParam.getString(), callNode)) {\n        Node argDef = NodeUtil.getFunctionArgumentDefinition(fnParam.getString(), block);\n        if (argDef != null && NodeUtil.mayEffectMutableState(argDef, compiler)) {\n          return CanInlineResult.NO;\n        }\n      }\n\n      fnParam = fnParam.getNext();\n    }\n\n    while (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n        String refName = NodeUtil.getStringValue(cArg);\n        if (refName != null && NodeUtil.getNameReferenceCount(block, refName) > 1) {\n          return CanInlineResult.NO;\n        }\n      }\n\n      cArg = cArg.getNext();\n    }\n\n    return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}