{
    "generation": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n Node stmt = null;\n  boolean hasSideEffects = false;\n\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    stmt = block.getFirstChild();\n    if (stmt.isReturn()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n    }\n  }\n\n  Node cArg = callNode.getFirstChild();\n  if (!cArg.isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      if (cArg.getNext() == null || !cArg.getNext().isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n    cArg = cArg.getNext();\n  } else {\n    cArg = cArg.getNext();\n  }\n\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (cArg != null) {\n    if (fnParam != null) {\n      if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n        return CanInlineResult.NO;\n      }\n      if (NodeUtil.mayEffectMutableState(cArg, compiler)\n          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n      fnParam = fnParam.getNext();\n    } else if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n      return CanInlineResult.NO;\n    }\n    cArg = cArg.getNext();\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}