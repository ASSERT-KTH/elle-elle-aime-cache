{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // Check for side effects in the return statement\n  boolean hasSideEffectsInReturn = false;\n  if (block.hasChildren()) {\n    Node stmt = block.getFirstChild();\n    if (stmt.isReturn() && stmt.hasChildren()) {\n      hasSideEffectsInReturn = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n    }\n  }\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Functions called via 'call' and 'apply' have a this-object as\n  // the first parameter, but this is not part of the called function's\n  // parameter list.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO(johnlenz): Support replace this with a value.\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" call should be filtered before this.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (cArg != null || fnParam != null) {\n    if (fnParam != null) {\n      if (cArg != null) {\n        // Check for side effects in arguments\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n\n        // Check if the argument is mutable and referenced more than once\n        if (NodeUtil.mayEffectMutableState(cArg, compiler) &&\n            NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n\n        // Check if the function parameter is modified\n        if (NodeUtil.isNameReferencedInBlock(block, fnParam.getString(), new NodeUtil.MatchWarningReporter(compiler))) {\n          Node scp = block.getFirstChild();\n          while (scp != null) {\n            if (scp != stmt && NodeUtil.isAssignmentOp(scp) &&\n                NodeUtil.isLValueMatch(scp.getFirstChild(), fnParam.getString())) {\n              return CanInlineResult.NO;\n            }\n            scp = scp.getNext();\n          }\n        }\n\n        // Move to the next parameter\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    } else {\n      // If there are more call arguments than function parameters, cannot inline\n      if (cArg != null) {\n        return CanInlineResult.NO;\n      }\n      // Move to the next call argument\n      cArg = cArg.getNext();\n    }\n  }\n\n  // Check for side effects in the return statement again, in context of arguments\n  if (hasSideEffectsInReturn && NodeUtil.canBeSideEffected(callNode)) {\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}