{
    "generation": "// And then value types for all containers:\nJavaType contentType = type.getContentType();\nif (contentType != null) {\n    Class<?> contentClass = findSerializationContentType(a, contentType);\n    if (contentClass != null) {\n        if (contentType.hasRawClass(contentClass)) {\n            contentType = contentType.withStaticTyping();\n        } else {\n            Class<?> currRaw = contentType.getRawClass();\n            try {\n                if (contentClass.isAssignableFrom(currRaw)) { // common case, widen the type\n                    contentType = tf.constructGeneralizedType(contentType, contentClass);\n                } else if (currRaw.isAssignableFrom(contentClass)) { // specialization needed, specify the type\n                    contentType = tf.constructSpecializedType(contentType, contentClass);\n                } else {\n                    // The original exception handling\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                    contentType, contentClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n        type = type.withContentType(contentType);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}