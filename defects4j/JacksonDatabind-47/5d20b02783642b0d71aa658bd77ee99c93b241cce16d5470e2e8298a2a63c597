{
    "generation": "/**\n * Method called to find out possible type refinements to use\n * for deserialization.\n *\n * @since 2.7\n */\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n    \n    // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to\n    //    now-deprecated secondary methods; this because while\n    //    direct sub-class not yet retrofitted may only override\n    //    those methods. With 2.8 or later we may consider removal\n    //    of these methods\n\n    // Ok: start by refining the main type itself; common to all types\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of\n            //    static typing this way\n            type = type.withStaticTyping();\n        } else {\n            try {\n                // Determine if serClass is a super-type or sub-type of the current type\n                Class<?> currentRaw = type.getRawClass();\n                if (serClass.isAssignableFrom(currentRaw)) {\n                    // serClass is a super-type, generalize\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else if (currentRaw.isAssignableFrom(serClass)) {\n                    // serClass is a sub-type, specialize\n                    type = tf.constructSpecializedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Cannot refine serialization type %s with annotation (value %s); types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to refine type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                        iae);\n            }\n        }\n    }\n    // Then further processing for container types\n\n    // First, key type (for Maps, Map-like types):\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currentRaw = keyType.getRawClass();\n                try {\n                    // Determine if keyClass is a super-type or sub-type of the current key type\n                    if (keyClass.isAssignableFrom(currentRaw)) {\n                        // keyClass is a super-type, generalize\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currentRaw.isAssignableFrom(keyClass)) {\n                        // keyClass is a sub-type, specialize\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Cannot refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to refine key type of %s with annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                            iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) { // collection[like], map[like], array, reference\n        // And then value types for all containers:\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            if (contentType.hasRawClass(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                Class<?> currentRaw = contentType.getRawClass();\n                try {\n                    // Determine if contentClass is a super-type or sub-type of the current content type\n                    if (contentClass.isAssignableFrom(currentRaw)) {\n                        // contentClass is a super-type, generalize\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (currentRaw.isAssignableFrom(contentClass)) {\n                        // contentClass is a sub-type, specialize\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Cannot refine serialization content type %s into %s; types not related\",\n                                        contentType, contentClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to refine content type of %s with annotation (value %s), from '%s': %s\",\n                                    type, contentClass.getName(), a.getName(), iae.getMessage()),\n                            iae);\n                    }\n                }\n                type = type.withContentType(contentType);\n            }\n        }\n        return type;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}