{
    "generation": "public JavaType refineSerializationType(final MapperConfig<?> config, final Annotated a, final JavaType baseType) throws JsonMappingException {\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n     // Ok: start by refining the main type itself; common to all types\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        // Switched the condition\n        if (!serClass.isAssignableFrom(type.getRawClass())) {\n            try {\n                type = tf.constructSpecializedType(type, serClass);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to narrow type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        } else {  // Removed unsupported static typing for current logic\n            type = type.withStaticTyping();\n        }\n    }\n    // Then further processing for container types\n\n    // First, key type (for Maps, Map-like types):\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (!keyClass.isAssignableFrom(keyType.getRawClass())) {  // Switched the condition\n                try {\n                    keyType = tf.constructSpecializedType(keyType, keyClass);\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to narrow key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            } else {\n                keyType = keyType.withStaticTyping();\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) { // collection[like], map[like], array, reference\n        // And then value types for all containers:\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            if (!contentClass.isAssignableFrom(contentType.getRawClass())) {  // Switched the condition\n                try {\n                    contentType = tf.constructSpecializedType(contentType, contentClass);\n                } catch (IllegalArgumentException iae) { // shouldn't really happen\n                    throw new JsonMappingException(null,\n                            String.format(\"Internal error: failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n            } else {\n                contentType = contentType.withStaticTyping();\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n    return type;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}