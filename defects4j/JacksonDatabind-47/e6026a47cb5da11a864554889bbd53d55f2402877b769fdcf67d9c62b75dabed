{
    "generation": "    public JavaType refineSerializationType(final MapperConfig<?> config,\n            final Annotated a, final JavaType baseType) throws JsonMappingException\n    {\n        JavaType type = baseType;\n        final TypeFactory tf = config.getTypeFactory();\n        \n        // Start by refining the main type itself; common to all types\n        Class<?> serClass = findSerializationType(a);\n        if (serClass != null) {\n            try {\n                // To handle both widening and narrowing correctly, use constructSpecializedType directly.\n                type = tf.constructSpecializedType(type, serClass);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to refine type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n        // Further processing for container types\n\n        // Key type refinement (for Maps, Map-like types):\n        if (type.isMapLikeType()) {\n            JavaType keyType = type.getKeyType();\n            Class<?> keyClass = findSerializationKeyType(a, keyType);\n            if (keyClass != null) {\n                try {\n                    keyType = tf.constructSpecializedType(keyType, keyClass);\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to refine key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                }\n                type = ((MapLikeType) type).withKeyType(keyType);\n            }\n        }\n\n        // Content type refinement for collection[like], map[like], array, reference\n        JavaType contentType = type.getContentType();\n        if (contentType != null) {\n           Class<?> contentClass = findSerializationContentType(a, contentType);\n           if (contentClass != null) {\n               try {\n                   contentType = tf.constructSpecializedType(contentType, contentClass);\n               } catch (IllegalArgumentException iae) {\n                   throw new JsonMappingException(null,\n                           String.format(\"Failed to refine content type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                   type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                   iae);\n               }\n               type = type.withContentType(contentType);\n           }\n        }\n        return type;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}