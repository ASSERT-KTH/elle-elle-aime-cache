{
    "generation": "    /**\n     * Method called to find out possible type refinements to use\n     * for deserialization.\n     *\n     * @since 2.7\n     */\n    public JavaType refineSerializationType(final MapperConfig<?> config,\n            final Annotated a, final JavaType baseType) throws JsonMappingException\n    {\n        JavaType type = baseType;\n        final TypeFactory tf = config.getTypeFactory();\n\n        // Ok: start by refining the main type itself; common to all types\n        Class<?> serClass = findSerializationType(a);\n        if (serClass != null) {\n            if (!serClass.isAssignableFrom(type.getRawClass())) {\n                if (type.getRawClass().isAssignableFrom(serClass)) {\n                    // Specialize type if widening fails but narrowing is allowed\n                    try {\n                        type = tf.constructSpecializedType(type, serClass);\n                    } catch (IllegalArgumentException iae) {\n                        throw new JsonMappingException(null,\n                                String.format(\"Failed to narrow type %s with annotation (value %s), from '%s': %s\",\n                                        type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n                    }\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Cannot refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } else {\n                type = type.withStaticTyping();\n            }\n        }\n\n        // Then further processing for container types\n\n        // First, key type (for Maps, Map-like types):\n        if (type.isMapLikeType()) {\n            JavaType keyType = type.getKeyType();\n            Class<?> keyClass = findSerializationKeyType(a, keyType);\n            if (keyClass != null) {\n                if (!keyClass.isAssignableFrom(keyType.getRawClass())) {\n                    if (keyType.getRawClass().isAssignableFrom(keyClass)) {\n                        try {\n                            keyType = tf.constructSpecializedType(keyType, keyClass);\n                        } catch (IllegalArgumentException iae) {\n                            throw new JsonMappingException(null,\n                                    String.format(\"Failed to narrow key type of %s with annotation (value %s), from '%s': %s\",\n                                            type, keyClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                        }\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Cannot refine serialization key type %s into %s; types not related\",\n                                        keyType, keyClass.getName()));\n                    }\n                } else {\n                    keyType = keyType.withStaticTyping();\n                }\n                type = ((MapLikeType) type).withKeyType(keyType);\n            }\n        }\n\n        JavaType contentType = type.getContentType();\n        if (contentType != null) { // collection[like], map[like], array, reference\n            Class<?> contentClass = findSerializationContentType(a, contentType);\n            if (contentClass != null) {\n                if (!contentClass.isAssignableFrom(contentType.getRawClass())) {\n                    if (contentType.getRawClass().isAssignableFrom(contentClass)) {\n                        try {\n                            contentType = tf.constructSpecializedType(contentType, contentClass);\n                        } catch (IllegalArgumentException iae) {\n                            throw new JsonMappingException(null,\n                                    String.format(\"Failed to narrow content type of %s with annotation (value %s), from '%s': %s\",\n                                            type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                    iae);\n                        }\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Cannot refine serialization content type %s into %s; types not related\",\n                                        contentType, contentClass.getName()));\n                    }\n                } else {\n                    contentType = contentType.withStaticTyping();\n                }\n                type = type.withContentType(contentType);\n            }\n        }\n        return type;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}