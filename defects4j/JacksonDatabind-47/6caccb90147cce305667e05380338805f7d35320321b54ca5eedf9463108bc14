{
    "generation": "/**\n * Method called to find out possible type refinements to use\n * for deserialization.\n *\n * @since 2.7\n */\npublic JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException {\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to\n    //    now-deprecated secondary methods; this because while\n    //    direct sub-class not yet retrofitted may only override\n    //    those methods. With 2.8 or later we may consider removal\n    //    of these methods\n\n    // Ok: start by refining the main type itself; common to all types\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of\n            //    static typing this way\n            type = type.withStaticTyping();\n        } else {\n            try {\n                // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,\n                //   may be needed here too in future?\n                type = tf.constructGeneralizedType(type, serClass);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                        iae);\n            }\n        }\n    }\n    // Then further processing for container types\n\n    // First, key type (for Maps, Map-like types):\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually\n                    //   specialize (narrow) type sometimes, even if more commonly opposite\n                    //   is needed.\n                    if (keyClass.isAssignableFrom(currRaw)) { // common case\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization key type %s into %s; types not related: %s\",\n                                        keyType, keyClass.getName(), getTypeHierarchyInfo(keyType, keyClass)));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null,\n                            String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, keyClass.getName(), a.getName(), iae.getMessage()),\n                            iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) { // collection[like], map[like], array, reference\n        // And then value types for all containers:\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            if (contentType.hasRawClass(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                // 03-Apr-2016, tatu: As per [databind#1178], may need to actually\n                //   specialize (narrow) type sometimes, even if more commonly opposite\n                //   is needed.\n                Class<?> currRaw = contentType.getRawClass();\n                try {\n                    if (contentClass.isAssignableFrom(currRaw)) { // common case\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                    } else {\n                        throw new JsonMappingException(null,\n                                String.format(\"Can not refine serialization content type %s into %s; types not related: %s\",\n                                        contentType, contentClass.getName(), getTypeHierarchyInfo(contentType, contentClass)));\n                    }\n                } catch (IllegalArgumentException iae) { // shouldn't really happen\n                    throw new JsonMappingException(null,\n                            String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                    type, contentClass.getName(), a.getName(), iae.getMessage()),\n                            iae);\n                }\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n    return type;\n}\n\nprivate String getTypeHierarchyInfo(JavaType contentType, Class<?> contentClass) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"Content type hierarchy: \").append(contentType.getRawClass().getName()).append('\\n');\n    getClassHierarchy(contentType.getRawClass(), sb, \"  \");\n    sb.append(\"Annotated class hierarchy: \").append(contentClass.getName()).append('\\n');\n    getClassHierarchy(contentClass, sb, \"  \");\n    return sb.toString();\n}\n\nprivate void getClassHierarchy(Class<?> cls, StringBuilder sb, String indent) {\n    Class<?> current = cls;\n    while (current != null) {\n        sb.append(indent).append(current.getName()).append('\\n');\n        current = current.getSuperclass();\n        if (current != null) {\n            sb.append(indent).append(\" extends\\n\");\n        }\n    }\n    for (Class<?> iface : cls.getInterfaces()) {\n        sb.append(indent).append(\" implements \").append(iface.getName()).append('\\n');\n        getClassHierarchy(iface, sb, indent + \"  \");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}