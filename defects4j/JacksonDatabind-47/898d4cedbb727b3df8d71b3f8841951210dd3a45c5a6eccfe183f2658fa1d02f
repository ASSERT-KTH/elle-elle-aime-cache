{
    "generation": "public JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    Class<?> serClass = findSerializationType(a);\n    if (serClass!= null) {\n        if (type.hasRawClass(serClass)) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                // 26-May-2023: Fix issue #1231 and #1178: allow concrete\n                //   class being a subclass of annotation-indicated type\n                Class<?> rawClass = type.getRawClass();\n                if (serClass.isAssignableFrom(rawClass)) { // common case\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else if (rawClass.isAssignableFrom(serClass)) { // specialization, ok as well\n                    type = tf.constructSpecializedType(type, serClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                    type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    // Then further processing for container types\n    //...\n\n    JavaType contentType = type.getContentType();\n    if (contentType!= null) { \n        // And then value types for all containers:\n       Class<?> contentClass = findSerializationContentType(a, contentType);\n       if (contentClass!= null) {\n           if (contentType.hasRawClass(contentClass)) {\n               contentType = contentType.withStaticTyping();\n           } else {\n               Class<?> currRaw = contentType.getRawClass();\n               try {\n                   // 26-May-2023: Same fix for content types as well\n                   if (contentClass.isAssignableFrom(currRaw)) { // common case\n                       contentType = tf.constructGeneralizedType(contentType, contentClass);\n                   } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well\n                       contentType = tf.constructSpecializedType(contentType, contentClass);\n                   } else {\n                       throw new JsonMappingException(null,\n                               String.format(\"Can not refine serialization content type %s into %s; types not related\",\n                                       contentType, contentClass.getName()));\n                   }\n               } catch (IllegalArgumentException iae) { // shouldn't really happen\n                   throw new JsonMappingException(null,\n                           String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\",\n                                   type, contentClass.getName(), a.getName(), iae.getMessage()),\n                                   iae);\n               }\n           }\n           type = type.withContentType(contentType);\n       }\n    }\n    return type;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}