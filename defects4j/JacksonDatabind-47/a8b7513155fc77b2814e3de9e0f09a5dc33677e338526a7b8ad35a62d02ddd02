{
    "generation": "public JavaType refineSerializationType(final MapperConfig<?> config,\n        final Annotated a, final JavaType baseType) throws JsonMappingException\n{\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass) || serClass.isAssignableFrom(type.getRawClass())) {\n            type = type.withStaticTyping();\n        } else {\n            try {\n                type = tf.constructSpecializedType(type, serClass);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null,\n                        String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\",\n                                type, serClass.getName(), a.getName(), iae.getMessage()),\n                                iae);\n            }\n        }\n    }\n\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            keyType = refineType(tf, keyType, keyClass);\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            contentType = refineType(tf, contentType, contentClass);\n            type = type.withContentType(contentType);\n        }\n    }\n    return type;\n}\n\nprivate JavaType refineType(TypeFactory tf, JavaType type, Class<?> serClass) throws JsonMappingException {\n    if (type.hasRawClass(serClass)) {\n        return type.withStaticTyping();\n    } else {\n        Class<?> currRaw = type.getRawClass();\n        try {\n            if (serClass.isAssignableFrom(currRaw)) {\n                return tf.constructGeneralizedType(type, serClass);\n            } else if (currRaw.isAssignableFrom(serClass)) {\n                return tf.constructSpecializedType(type, serClass);\n            } else {\n                throw new JsonMappingException(null,\n                        String.format(\"Can not refine serialization type %s into %s; types not related\",\n                                type, serClass.getName()));\n            }\n        } catch (IllegalArgumentException iae) {\n            throw new JsonMappingException(null,\n                    String.format(\"Internal error: failed to refine type %s with concrete-type annotation (value %s): %s\",\n                            type, serClass.getName(), iae.getMessage()),\n                            iae);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}