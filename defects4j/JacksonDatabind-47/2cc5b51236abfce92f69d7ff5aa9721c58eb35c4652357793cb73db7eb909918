{
    "generation": "    /**\n     * Method called to find out possible type refinements to use\n     * for deserialization.\n     *\n     * @since 2.7\n     */\n    public JavaType refineSerializationType(final MapperConfig<?> config,\n            final Annotated a, final JavaType baseType) throws JsonMappingException\n    {\n        JavaType type = baseType;\n        final TypeFactory tf = config.getTypeFactory();\n        \n        // Start refining the main type itself; common to all types\n        Class<?> serClass = findSerializationType(a);\n        if (serClass != null) {\n            if (serClass.isAssignableFrom(type.getRawClass())) {\n                // If serClass is a supertype or same as the current raw class\n                type = tf.constructGeneralizedType(type, serClass);\n            } else if (type.getRawClass().isAssignableFrom(serClass)) {\n                // If serClass is a subclass or specialization of current raw class\n                type = tf.constructSpecializedType(type, serClass);\n            } else {\n                throw new JsonMappingException(null,\n                        String.format(\"Cannot refine serialization type %s with annotation (value %s), from '%s': Classes are not related\",\n                                type, serClass.getName(), a.getName()));\n            }\n        }\n\n        // Further processing for container types\n        // First, key type (for Maps, Map-like types)\n        if (type.isMapLikeType()) {\n            JavaType keyType = type.getKeyType();\n            Class<?> keyClass = findSerializationKeyType(a, keyType);\n            if (keyClass != null) {\n                if (keyClass.isAssignableFrom(keyType.getRawClass())) {\n                    keyType = tf.constructGeneralizedType(keyType, keyClass);\n                } else if (keyType.getRawClass().isAssignableFrom(keyClass)) {\n                    keyType = tf.constructSpecializedType(keyType, keyClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Cannot refine serialization key type %s with concrete-type annotation (value %s), from '%s': Classes are not related\",\n                                    keyType, keyClass.getName(), a.getName()));\n                }\n                type = ((MapLikeType) type).withKeyType(keyType);\n            }\n        }\n\n        // Then, value/content type for all containers\n        JavaType contentType = type.getContentType();\n        if (contentType != null) { // collection[like], map[like], array, reference\n            Class<?> contentClass = findSerializationContentType(a, contentType);\n            if (contentClass != null) {\n                if (contentClass.isAssignableFrom(contentType.getRawClass())) {\n                    contentType = tf.constructGeneralizedType(contentType, contentClass);\n                } else if (contentType.getRawClass().isAssignableFrom(contentClass)) {\n                    contentType = tf.constructSpecializedType(contentType, contentClass);\n                } else {\n                    throw new JsonMappingException(null,\n                            String.format(\"Cannot refine serialization content type %s with annotation (value %s), from '%s': Classes are not related\",\n                                    contentType, contentClass.getName(), a.getName()));\n                }\n                type = type.withContentType(contentType);\n            }\n        }\n\n        return type;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}