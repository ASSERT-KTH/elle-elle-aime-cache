{
    "generation": "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n\n  // Keep track of the \"this\" context of a call. A call without an explicit \"this\" is a free call.\n  Node first = n.getFirstChild();\n\n  // Ignore cast nodes.\n  if (NodeUtil.isCast(first)) {\n    first = first.getFirstChild();\n  }\n\n  // Check if the call is a free call.\n  boolean isFreeCall = false;\n  if (NodeUtil.isGet(first) || first.isName() || NodeUtil.isNew(first)) {\n    Node target = NodeUtil.getCallTarget(n);\n    if (target.isName() || NodeUtil.isGet(target)) {\n      isFreeCall = true;\n    }\n  } else {\n    isFreeCall = true;\n  }\n\n  n.putBooleanProp(Node.FREE_CALL, isFreeCall);\n\n  // Keep track of the context in which eval is called. It is important\n  // to distinguish between \"(0, eval)()\" and \"eval()\".\n  if (first.isName() && \"eval\".equals(first.getString())) {\n    first.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}