{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated\n            if (!explicit) { // new one not annotated\n                // Check if newOne is more specific and potentially overriding oldOne\n                if (oldOne.getClass().isAssignableFrom(newOne.getClass())) {\n                    _creators[typeIndex] = _fixAccess(newOne);\n                }\n                return;\n            } else { // both explicit: verify\n                throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                        +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n            }\n        }\n\n        if (oldOne.getClass() == newOne.getClass()) {\n            throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                    +\" creators: already had \"+oldOne+\", encountered \"+newOne);\n        }\n    }\n\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}