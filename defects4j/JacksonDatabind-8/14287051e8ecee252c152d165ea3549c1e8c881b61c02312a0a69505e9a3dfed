{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) {\n            if (!explicit) {\n                return;\n            }\n            // Both explicit: verify\n        }\n\n        // One more thing: ok to override in sub-class, but only if parameters are different\n        if (oldOne.getClass() == newOne.getClass()) {\n            if (!oldOne.getParameterTypes().equals(newOne.getParameterTypes())) {\n                // Different parameters, allow this\n                _creators[typeIndex] = _fixAccess(newOne);\n                return;\n            } else {\n                throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                        + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n            }\n        }\n    }\n\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}