{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne!= null) {\n\n        if ((_explicitCreators & mask)!= 0) { // already had explicitly annotated, leave as-is\n            // but skip, if new one not annotated\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify\n            // otherwise only verify if neither explicitly annotated.\n        }\n\n        // one more thing: ok to override in sub-class\n        if (oldOne.getClass().equals(newOne.getClass())) {\n            // Check if constructors are identical (same parameter types)\n            if (java.util.Arrays.equals(oldOne.getParameterTypes(), newOne.getParameterTypes())) {\n                // If identical, it's likely a re-processing, so just return\n                return;\n            }\n            // [databind#667]: avoid one particular class of bogus problems\n            throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                    +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n        } else {\n            // new type more generic, use old\n            // new type more specific, use it\n            if (newOne.getClass().isAssignableFrom(oldOne.getClass())) {\n                _creators[typeIndex] = _fixAccess(newOne);\n            }\n        }\n    } else {\n        _creators[typeIndex] = _fixAccess(newOne);\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}