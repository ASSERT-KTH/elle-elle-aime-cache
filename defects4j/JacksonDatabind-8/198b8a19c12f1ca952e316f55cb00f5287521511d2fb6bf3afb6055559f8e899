{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated\n            if (explicit) { // both new and old are explicitly annotated\n                // [databind#667]: avoid one particular class of bogus problems\n                if (oldOne.getClass() == newOne.getClass()) {\n                    throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                            +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n                }\n                // else new type must be more specific than the old but not the same, therefore use the new one\n            } else { // new one is not explicitly annotated so leave as-is\n                return;\n            }\n        } else { // old one was not explicitly annotated\n            if (explicit) { // new one is explicitly annotated\n                _explicitCreators |= mask; // mark it as explicitly annotated\n            }\n            // overwrite old one with new one, no matter if it's explicitly annotated or not\n        }\n    } else { // No oldOne, nothing to conflict with\n        if (explicit) {\n            _explicitCreators |= mask;\n        }\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}