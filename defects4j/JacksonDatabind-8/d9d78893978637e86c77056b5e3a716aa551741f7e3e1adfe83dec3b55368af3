{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is\n            // if the newOne is not explicit, we can ignore it\n            if (!explicit) {\n                return;\n            }\n            // if both are explicit and identical, we don't have a conflict\n            if (oldOne.equals(newOne)) {\n                return;\n            }\n            // both explicit and different: conflict\n            throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                    +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n        }\n        // one more thing: ok to override in sub-class\n        if (oldOne.getClass() == newOne.getClass()) {\n            // if they are the same constructor, just continue\n            if (oldOne.equals(newOne)) {\n                return;\n            }\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}