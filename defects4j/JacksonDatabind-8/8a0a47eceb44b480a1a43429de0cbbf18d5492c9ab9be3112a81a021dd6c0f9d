{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is\n            // but skip, if new one not annotated\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify\n            // otherwise only verify if neither explicitly annotated.\n        }\n\n        // one more thing: ok to override in sub-class\n        if (oldOne.getClass() == newOne.getClass()) {\n            // [databind#667]: avoid one particular class of bogus problems\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n        } else {\n            // If the new one is more specific (i.e., a subclass of the old one), use the new one\n            if (newOne.getClass().isAssignableFrom(oldOne.getClass())) {\n                // new type more specific, use it\n                _creators[typeIndex] = _fixAccess(newOne);\n                if (explicit) {\n                    _explicitCreators |= mask;\n                }\n            } else {\n                // new type more generic, use old\n                if (explicit) {\n                    _explicitCreators |= mask;\n                }\n            }\n        }\n    } else {\n        if (explicit) {\n            _explicitCreators |= mask;\n        }\n        _creators[typeIndex] = _fixAccess(newOne);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}