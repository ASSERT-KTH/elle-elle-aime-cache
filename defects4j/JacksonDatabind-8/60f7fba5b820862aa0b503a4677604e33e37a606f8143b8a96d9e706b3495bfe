{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne!= null) {\n\n        if ((_explicitCreators & mask)!= 0) { // already had explicitly annotated, leave as-is\n            // but skip, if new one not annotated\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify\n            // otherwise only verify if neither explicitly annotated.\n        }\n\n        // one more thing: ok to override in sub-class\n        if (oldOne.getClass() == newOne.getClass()) {\n            // [databind#667]: avoid one particular class of bogus problems\n            // override only if old one is not explicitly annotated\n            if ((oldOne.getAnnotation()!= null) &&!explicit) {\n                return;\n            }\n            // otherwise, which one to choose?\n            // new type more generic, use old\n            // new type more specific, use it\n        }\n        else {\n            // different classes, use new one if it is explicitly annotated\n            if (explicit) {\n                _creators[typeIndex] = _fixAccess(newOne);\n                _explicitCreators |= mask;\n                return;\n            }\n            // old one explicitly annotated, keep it\n            if (oldOne.getAnnotation()!= null) {\n                return;\n            }\n            // old one not explicitly annotated, use new one if it is more specific\n            if (newOne.getClass().isAssignableFrom(oldOne.getClass())) {\n                _creators[typeIndex] = _fixAccess(newOne);\n            }\n        }\n    }\n    else {\n        // old one is null, use new one\n        _creators[typeIndex] = _fixAccess(newOne);\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}