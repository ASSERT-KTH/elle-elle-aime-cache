{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    \n    // already had an explicitly marked one?\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is\n            // but skip, if new one not annotated\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify\n            // otherwise only verify if neither explicitly annotated.\n        }\n\n        // Allow overriding in the same class\n        if (oldOne.getClass() == newOne.getClass()) {\n            // If the new one is explicitly annotated and the old one isn't, replace it\n            if (explicit && ((_explicitCreators & mask) == 0)) {\n                _explicitCreators |= mask;\n                _creators[typeIndex] = _fixAccess(newOne);\n                return;\n            }\n            // If both are explicitly annotated or both are not, keep the old one\n            return;\n        }\n\n        // Different classes: throw an exception\n        throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n    }\n\n    // No old creator, add the new one\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}