{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated\n            if (!explicit) { // skip if new one is not explicitly annotated\n                return;\n            }\n            // both are explicitly annotated: check if the creators are the same\n            if (oldOne.equals(newOne)) {\n                // same creators are fine, no need to throw an exception\n                return;\n            }\n            // throw an exception if creators are different\n            throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                    +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n        } else {\n            // oldOne is not explicitly annotated, check if newOne is explicitly annotated\n            if (explicit) {\n                _explicitCreators |= mask;\n                _creators[typeIndex] = _fixAccess(newOne);\n            }\n            // If both are not explicitly annotated then it's fine to override if the classes are the same.\n            // Otherwise, we can't decide which one to use, so we throw an exception.\n            if (oldOne.getClass() != newOne.getClass()) {\n                throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                        +\" creators: already had \"+oldOne+\", encountered \"+newOne);\n            }\n        }\n    } else {\n        // oldOne is null, so we can safely assign the newOne\n        if (explicit) {\n            _explicitCreators |= mask;\n        }\n        _creators[typeIndex] = _fixAccess(newOne);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}