{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated\n            // if new one is also explicitly annotated, throw an exception\n            if (explicit) {\n                throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                        +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n            }\n            // if new one is not explicitly annotated, do nothing\n            return;\n        } else {\n            // if old one is not explicitly annotated, allow new one to override\n            if (explicit) {\n                _explicitCreators |= mask;\n                _creators[typeIndex] = _fixAccess(newOne);\n                return;\n            }\n        }\n\n        // one more thing: ok to override in sub-class\n        if (oldOne.getClass() == newOne.getClass()) {\n            // [databind#667]: avoid one particular class of bogus problems\n            if (explicit) {\n                throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                        +\" creators: already had implicitly marked \"+oldOne+\", encountered explicitly marked \"+newOne);\n            }\n            // otherwise, which one to choose?\n            // new type more generic, use old\n            // new type more specific, use it\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}