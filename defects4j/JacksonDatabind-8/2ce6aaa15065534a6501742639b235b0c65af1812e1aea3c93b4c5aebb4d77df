{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated\n            if (explicit) { // and new one is also explicitly annotated\n                // It's an error if the old and new creators are instances of the same class\n                if (oldOne.getClass() == newOne.getClass()) {\n                    throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                            +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n                }\n            } else { // new one is not explicitly annotated\n                return; // so we can skip this verification\n            }\n        } else { // old one is not explicitly annotated\n            // both explicit: verify\n            // otherwise only verify if neither explicitly annotated.\n            if (explicit) {\n                _explicitCreators |= mask;\n                _creators[typeIndex] = _fixAccess(newOne);\n            } else { // new one is not explicitly annotated either\n                // For not annotated creators, existing creator is not overwritten unless the new one is from a subclass\n                if (!oldOne.getClass().isAssignableFrom(newOne.getClass())) {\n                    throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                            +\" creators: already had unmarked \"+oldOne+\", encountered \"+newOne);\n                }\n            }\n        }\n    } else { // no existing creator for this type\n        if (explicit) {\n            _explicitCreators |= mask;\n        }\n        _creators[typeIndex] = _fixAccess(newOne);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}