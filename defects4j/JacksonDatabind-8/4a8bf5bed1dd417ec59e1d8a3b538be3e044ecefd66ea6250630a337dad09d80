{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is\n            // but skip, if new one not annotated\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify\n            // otherwise only verify if neither explicitly annotated.\n        }\n\n        // Determine which creator is more specific\n        Class<?> oldClass = oldOne.getRawType();\n        Class<?> newClass = newOne.getRawType();\n        if (oldClass.isAssignableFrom(newClass)) {\n            // New creator is more specific, overwrite the old one\n            _creators[typeIndex] = _fixAccess(newOne);\n            if (explicit) {\n                _explicitCreators |= mask;\n            }\n        } else if (newClass.isAssignableFrom(oldClass)) {\n            // Old creator is more specific, keep it\n            return;\n        } else {\n            // Neither is more specific than the other, throw an exception\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had \" + oldOne + \", encountered \" + newOne);\n        }\n    } else {\n        _creators[typeIndex] = _fixAccess(newOne);\n        if (explicit) {\n            _explicitCreators |= mask;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}