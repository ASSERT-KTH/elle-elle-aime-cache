{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) {\n            if (!explicit) {\n                return;\n            }\n            // Both explicit: verify\n        }\n\n        // Check if newOne is a subclass of oldOne\n        if (newOne.getClass().isAssignableFrom(oldOne.getClass())) {\n            // newOne is more specific or equal, use it\n            if (explicit) {\n                _explicitCreators |= mask;\n            }\n            _creators[typeIndex] = _fixAccess(newOne);\n            return;\n        } else if (oldOne.getClass().isAssignableFrom(newOne.getClass())) {\n            // oldOne is more specific, keep it\n            return;\n        }\n\n        // If we reach here, it's a true conflict\n        throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n    }\n\n    // No conflict, add the new creator\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}