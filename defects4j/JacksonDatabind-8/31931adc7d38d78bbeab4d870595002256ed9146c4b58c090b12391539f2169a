{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is\n            // but skip, if new one not annotated\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify\n            if (explicit) {\n                // Check if the new one is the same as the old one\n                if (newOne.equals(oldOne)) {\n                    return; // Same constructor, no need to do anything\n                }\n                // Different explicit constructors - throw an error\n                throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                        +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n            }\n        } else {\n            // Neither explicitly annotated\n            if (!explicit) {\n                // Check if the new one is the same as the old one\n                if (newOne.equals(oldOne)) {\n                    return; // Same constructor, no need to do anything\n                }\n                // Different non-explicit constructors - keep the more specific one\n                if (oldOne.getClass() == newOne.getClass()) {\n                    // If they're of the same class, choose the one with more parameters\n                    if (newOne.getParameterCount() > oldOne.getParameterCount()) {\n                        _creators[typeIndex] = _fixAccess(newOne);\n                        return;\n                    }\n                } else {\n                    // Different classes, keep the more specific one\n                    if (oldOne.getDeclaringClass().isAssignableFrom(newOne.getDeclaringClass())) {\n                        _creators[typeIndex] = _fixAccess(newOne);\n                        return;\n                    }\n                }\n            }\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}