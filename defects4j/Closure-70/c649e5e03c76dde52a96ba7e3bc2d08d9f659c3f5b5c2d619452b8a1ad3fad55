{
    "generation": "    /**\n     * Declares all of a function's arguments.\n     */\n    private void declareArguments(Node functionNode) {\n      Node astParameters = functionNode.getFirstChild().getNext();\n      Node body = astParameters.getNext();\n      FunctionType functionType = (FunctionType) functionNode.getJSType();\n      if (functionType != null) {\n        Node jsDocParameters = functionType.getParametersNode();\n        if (jsDocParameters != null) {\n          Node jsDocParameter = jsDocParameters.getFirstChild();\n          for (Node astParameter : astParameters.children()) {\n            if (jsDocParameter != null) {\n              JSType jsDocType = jsDocParameter.getJSType();\n              // Check if the parameter already has a type\n              JSType currentType = astParameter.getJSType();\n              if (currentType != null) {\n                // Ensure a redefinition warning\n                JSTypeRegistry registry = functionNode.getJSType().getJSTypeRegistry();\n                registry.registry.reportWarning(\n                  registry.createWarning(\n                    \"Variable \" + astParameter.getString() + \" is redefined with type \" + jsDocType + \n                    \", original definition at \" + astParameter.getLineno()\n                  ));\n              } else {\n                defineSlot(astParameter, functionNode,\n                    jsDocType, true);\n              }\n              jsDocParameter = jsDocParameter.getNext();\n            } else {\n              defineSlot(astParameter, functionNode, null, true);\n            }\n          }\n        }\n      }\n    } // end declareArguments",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}