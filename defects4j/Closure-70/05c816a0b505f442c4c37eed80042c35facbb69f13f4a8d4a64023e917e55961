{
    "generation": "    /**\n     * Declares all of a function's arguments.\n     */\n    private void declareArguments(Node functionNode) {\n      Node astParameters = functionNode.getFirstChild().getNext();\n      Node body = astParameters.getNext();\n      FunctionType functionType = (FunctionType) functionNode.getJSType();\n      if (functionType != null) {\n        Node jsDocParameters = functionType.getParametersNode();\n        if (jsDocParameters != null) {\n          Node jsDocParameter = jsDocParameters.getFirstChild();\n          for (Node astParameter : astParameters.children()) {\n            if (jsDocParameter != null) {\n              defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), true);\n              jsDocParameter = jsDocParameter.getNext();\n            } else {\n              defineSlot(astParameter, functionNode, null, true);\n            }\n            // Check for duplicate local variable declaration\n            for (Node child : body.children()) {\n              if (child.isVar() && child.hasChildren()) {\n                for (Node varDecl : child.children()) {\n                  if (varDecl.matchesQualifiedName(astParameter.getString())) {\n                    compiler.report(JSError.make(astParameter, \"JSC_DUP_VAR_DECLARATION\",\n                        \"variable \" + astParameter.getString() + \" redefined with type \" +\n                        (varDecl.getJSType() != null ? varDecl.getJSType().toString() : \"null\") +\n                        \", original definition at \" + astParameter.getSourceFileName() + \":\" + astParameter.getSourcelineno() +\n                        \" with type \" + (jsDocParameter != null ? jsDocParameter.getJSType().toString() : \"null\")));\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } // end declareArguments",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}