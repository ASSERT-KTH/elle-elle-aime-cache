{
    "generation": "/**\n * Declares all of a function's arguments.\n */\nprivate void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          JSType paramType = jsDocParameter.getJSType();\n          // Check for duplicate variable declarations with different types\n          Node existingDeclaration = findVariableDeclaration(body, astParameter.getString());\n          if (existingDeclaration!= null &&!paramType.isEquivalentTo(existingDeclaration.getJSType())) {\n            reportError(astParameter, JSC_DUP_VAR_DECLARATION,\n                \"variable \" + astParameter.getString() + \" redefined with type \" + paramType + \n                \", original definition at \" + existingDeclaration.getLineno() + \" with type \" + existingDeclaration.getJSType());\n          }\n          defineSlot(astParameter, functionNode, paramType, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n} // end declareArguments",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}