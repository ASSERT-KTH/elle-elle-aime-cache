{
    "generation": "    /**\n     * Declares all of a function's arguments.\n     */\n    private void declareArguments(Node functionNode) {\n      Node astParameters = functionNode.getFirstChild().getNext();\n      Node body = astParameters.getNext();\n      FunctionType functionType = (FunctionType) functionNode.getJSType();\n      if (functionType != null) {\n        Node jsDocParameters = functionType.getParametersNode();\n        if (jsDocParameters != null) {\n          Node jsDocParameter = jsDocParameters.getFirstChild();\n          for (Node astParameter : astParameters.children()) {\n            if (jsDocParameter != null) {\n              defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);\n              jsDocParameter = jsDocParameter.getNext();\n            } else {\n              defineSlot(astParameter, functionNode, null, true);\n            }\n          }\n          // Check for duplicate local variable declarations\n          Set<String> declaredVars = new HashSet<>();\n          for (Node child : body.children()) {\n            if (child.getType() == Token.VAR) {\n              for (Node varChild : child.children()) {\n                if (varChild.getType() == Token.NAME) {\n                  String varName = varChild.getString();\n                  if (declaredVars.contains(varName)) {\n                    report(child, JSError.make(child, VARIABLE_REDEFINITION, varName));\n                  } else {\n                    declaredVars.add(varName);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } // end declareArguments",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}