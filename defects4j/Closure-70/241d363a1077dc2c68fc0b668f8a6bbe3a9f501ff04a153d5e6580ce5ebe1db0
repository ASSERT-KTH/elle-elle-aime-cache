{
    "generation": "/**\n * Declares all of a function's arguments.\n */\nprivate void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter != null) {\n          JSType jsDocType = jsDocParameter.getJSType();\n          // Ensure we are not redeclaring a variable with a different type\n          if (scope.getSlot(astParameter.getString()) != null) {\n            reportDuplicateVarDecl(astParameter, jsDocType);\n          } else {\n            defineSlot(astParameter, functionNode, jsDocType, true);\n          }\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          // If no JSDoc type is specified, we still define the slot with null type\n          if (scope.getSlot(astParameter.getString()) != null) {\n            reportDuplicateVarDecl(astParameter, null);\n          } else {\n            defineSlot(astParameter, functionNode, null, true);\n          }\n        }\n      }\n    }\n  }\n} // end declareArguments\n\n/**\n * Reports a duplicate variable declaration error.\n */\nprivate void reportDuplicateVarDecl(Node astParameter, JSType jsDocType) {\n  JSType existingType = scope.getSlot(astParameter.getString()).getType();\n  compiler.report(JSError.make(astParameter, DUPLICATE_VAR_DECLARATION,\n      astParameter.getString(),\n      existingType == null ? \"unknown\" : existingType.toString(),\n      jsDocType == null ? \"unknown\" : jsDocType.toString()));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}