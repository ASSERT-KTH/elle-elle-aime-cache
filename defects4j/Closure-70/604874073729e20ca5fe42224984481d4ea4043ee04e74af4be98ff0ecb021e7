{
    "generation": "/**\n * Declares all of a function's arguments.\n */\nprivate void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        JSType parameterType = null;\n        if (jsDocParameter!= null) {\n          parameterType = jsDocParameter.getJSType();\n          jsDocParameter = jsDocParameter.getNext();\n        }\n        // Check for duplicate variable declarations\n        if (isVariableDeclared(astParameter.getString(), functionNode, body)) {\n          reportError(astParameter, JSC_DUP_VAR_DECLARATION,\n              \"variable \" + astParameter.getString() + \" redefined with type \" +\n              (parameterType!= null? parameterType.toString() : \"unknown\") +\n              \", original definition at \" + functionNode.getSourcePosition());\n        } else {\n          defineSlot(astParameter, functionNode, parameterType, true);\n        }\n      }\n    } else {\n      // If no JSDoc parameters, still check for duplicate declarations\n      for (Node astParameter : astParameters.children()) {\n        if (isVariableDeclared(astParameter.getString(), functionNode, body)) {\n          reportError(astParameter, JSC_DUP_VAR_DECLARATION,\n              \"variable \" + astParameter.getString() + \" redefined\");\n        } else {\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n} // end declareArguments\n\n// Assuming the following method is already defined elsewhere in the codebase\nprivate boolean isVariableDeclared(String variableName, Node functionNode, Node body);\nprivate void reportError(Node node, DiagnosticCode code, String message);",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}