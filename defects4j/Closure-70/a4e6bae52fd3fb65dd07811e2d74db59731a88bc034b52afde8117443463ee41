{
    "generation": "/**\n * Declares all of a function's arguments.\n */\nprivate void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        // Check for duplicate local variable declaration\n        if (body.getParent().isFunction()) {\n          Scope functionScope = currentScope; // Assume currentScope is available\n          String paramName = astParameter.getString();\n          Var alreadyDefinedVar = functionScope.getOwnSlot(paramName);\n          if (alreadyDefinedVar != null) {\n            reportError(\"variable \" + paramName + \" redefined with type \" + \n                        (jsDocParameter != null ? jsDocParameter.getJSType() : \"unknown\") + \n                        \", original definition at line \" +\n                        alreadyDefinedVar.getNode().getLineno() +\n                        \" with type \" + alreadyDefinedVar.getType());\n          }\n        }\n\n        if (jsDocParameter != null) {\n          defineSlot(astParameter, functionNode,\n              jsDocParameter.getJSType(), true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n} // end declareArguments",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}