{
    "generation": "/**\n * Declares all of a function's arguments.\n */\nprivate void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          JSType jsDocParameterType = jsDocParameter.getJSType();\n          // Check for redeclaration with a different type\n          Node existingSlot = getSlot(astParameter.getString(), functionNode);\n          if (existingSlot!= null &&!existingSlot.getJSType().equals(jsDocParameterType)) {\n            report(JSC_DUP_VAR_DECLARATION, astParameter, \n                \"variable \" + astParameter.getString() + \" redefined with type \" + jsDocParameterType + \n                \", original definition at \" + getSourcePosition(existingSlot) + \" with type \" + existingSlot.getJSType());\n          }\n          defineSlot(astParameter, functionNode, jsDocParameterType, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          // If no JSDoc parameter, still check for redeclaration\n          Node existingSlot = getSlot(astParameter.getString(), functionNode);\n          if (existingSlot!= null) {\n            report(JSC_DUP_VAR_DECLARATION, astParameter, \n                \"variable \" + astParameter.getString() + \" redefined, original definition at \" + getSourcePosition(existingSlot));\n          }\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n} // end declareArguments",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}