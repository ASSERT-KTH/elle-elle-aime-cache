{
    "generation": "/**\n * Declares all of a function's arguments.\n */\nprivate void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter != null) {\n          JSType paramType = jsDocParameter.getJSType();\n          defineSlot(astParameter, functionNode, paramType, false);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode, null, false);\n        }\n      }\n    }\n  }\n  \n  // Declare function parameters in function body scope\n  NodeTraversal.traverse(\n      compiler,\n      body,\n      new AbstractShallowCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName()) {\n            Node var = NodeUtil.findVarDeclaration(n, body);\n            if (var != null && var != n) {\n              JSType varType = var.getJSType();\n              defineSlot(n, functionNode, varType, false);\n            }\n          }\n        }\n      });\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}