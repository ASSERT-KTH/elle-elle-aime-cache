{
    "generation": "/**\n * Declares all of a function's arguments.\n */\nprivate void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          JSType jsDocType = jsDocParameter.getJSType();\n          JSType existingType = getExistingType(astParameter, functionNode);\n          if (existingType!= null &&!existingType.equals(jsDocType)) {\n            reportwarning(\"variable \" + astParameter.getString() +\n                \" redefined with type \" + jsDocType + \", original definition\" +\n                \" at \" + functionNode.getSourceFileName() + \" with type \" +\n                existingType);\n          }\n          defineSlot(astParameter, functionNode, jsDocType, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          JSType existingType = getExistingType(astParameter, functionNode);\n          if (existingType!= null) {\n            reportwarning(\"variable \" + astParameter.getString() +\n                \" redefined with type unknown, original definition\" +\n                \" at \" + functionNode.getSourceFileName() + \" with type \" +\n                existingType);\n          }\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n}\n\n// Assuming getExistingType is a method to get the existing type of a node\nprivate JSType getExistingType(Node node, Node functionNode) {\n  // implementation to get the existing type\n}\n\n// Assuming reportwarning is a method to report a warning\nprivate void reportwarning(String message) {\n  // implementation to report a warning\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}