{
    "generation": "/**\n * Declares all of a function's arguments.\n */\nprivate void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          JSType jsDocParameterType = jsDocParameter.getJSType();\n          // Check if the parameter is already declared in the scope\n          Node existingDecl = findVariableInScope(astParameter.getString(), functionNode, body);\n          if (existingDecl!= null) {\n            // If already declared, report a duplicate declaration error\n            reportError(astParameter, JSC_DUP_VAR_DECLARATION, \n                \"variable \" + astParameter.getString() + \" redefined with type \" + \n                jsDocParameterType + \", original definition at \" + \n                existingDecl.getLineno() + \" with type \" + existingDecl.getJSType());\n          } else {\n            // Otherwise, define the slot as before\n            defineSlot(astParameter, functionNode, jsDocParameterType, true);\n          }\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          // If no JSDoc parameter, still check for duplicate declaration\n          Node existingDecl = findVariableInScope(astParameter.getString(), functionNode, body);\n          if (existingDecl!= null) {\n            reportError(astParameter, JSC_DUP_VAR_DECLARATION, \n                \"variable \" + astParameter.getString() + \" redefined, original definition at \" + \n                existingDecl.getLineno());\n          } else {\n            defineSlot(astParameter, functionNode, null, true);\n          }\n        }\n      }\n    }\n  }\n} // end declareArguments",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}