{
    "generation": "/**\n * Declares all of a function's arguments, checking for potential redeclarations.\n */\nprivate void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          JSType paramType = jsDocParameter.getJSType();\n          // Check if the parameter is redeclared in the function body\n          Node redeclaredParam = body.getFirstChild();\n          while (redeclaredParam!= null) {\n            if (redeclaredParam.isVar() && redeclaredParam.getString().equals(astParameter.getString())) {\n              checkState(paramType.isAssignableFrom(redeclaredParam.getJSType()),\n                  \"variable %s redefined with type %s, original definition at %s with type %s\",\n                  astParameter.getString(), redeclaredParam.getJSType(), functionNode.getLineNumber(), paramType);\n            }\n            redeclaredParam = redeclaredParam.getNext();\n          }\n          defineSlot(astParameter, functionNode, paramType, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n} // end declareArguments",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}