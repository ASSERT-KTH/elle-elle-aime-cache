{
    "generation": "/**\n * Declares all of a function's arguments.\n */\nprivate void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        JSType parameterType = null;\n        if (jsDocParameter!= null) {\n          parameterType = jsDocParameter.getJSType();\n          jsDocParameter = jsDocParameter.getNext();\n        }\n        // Check for duplicate variable declaration\n        if (scopeounselor.getSlot(astParameter.getString())!= null) {\n          errorReporter.report(JSError.make(functionNode, \n                                            CheckLevel.WARNING, \n                                            \"JSC_DUP_VAR_DECLARATION\", \n                                            \"variable \" + astParameter.getString() + \n                                            \" redefined with type \" + parameterType + \n                                            \", original definition at \" + \n                                            scopeounselor.getSlot(astParameter.getString()).getSourceNode().getLineno()));\n        }\n        defineSlot(astParameter, functionNode, parameterType, true);\n      }\n    }\n  }\n} // end declareArguments",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}