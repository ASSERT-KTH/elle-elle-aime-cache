{
    "generation": "    /**\n     * Declares all of a function's arguments.\n     */\n    private void declareArguments(Node functionNode) {\n      Node astParameters = functionNode.getFirstChild().getNext();\n      Node body = astParameters.getNext();\n      FunctionType functionType = (FunctionType) functionNode.getJSType();\n      if (functionType != null) {\n        Node jsDocParameters = functionType.getParametersNode();\n        if (jsDocParameters != null) {\n          Node jsDocParameter = jsDocParameters.getFirstChild();\n          for (Node astParameter : astParameters.children()) {\n            if (jsDocParameter != null) {\n              if (!astParameter.isName() || astParameter.getString() == null) {\n                continue; // Skip invalid or malformed parameters.\n              }\n              JSType currentType = astParameter.getJSType();\n              if (currentType != null && currentType != jsDocParameter.getJSType()) {\n                reportWarning(\"Variable redefinition with conflicting types for \" + astParameter.getString());\n              }\n              defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);\n              jsDocParameter = jsDocParameter.getNext();\n            } else {\n              if (!astParameter.isName() || astParameter.getString() == null) {\n                continue; // Skip invalid or malformed parameters.\n              }\n              defineSlot(astParameter, functionNode, null, true);\n            }\n          }\n        }\n      }\n    } // end declareArguments",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}