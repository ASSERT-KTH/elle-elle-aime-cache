{
    "generation": "/**\n * Declares all of a function's arguments.\n */\nprivate void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          JSType declaredType = jsDocParameter.getJSType();\n          // Check if the parameter is redeclared in the function body\n          Node maybeRedeclaredParam = body.getNextmatchesName(astParameter.getString());\n          if (maybeRedeclaredParam!= null) {\n            JSType redeclaredType = maybeRedeclaredParam.getJSType();\n            if (!declaredType.isEquivalentTo(redeclaredType)) {\n              // Report error for redeclaration with different type\n              report(JSError.make(functionNode, \n                  JSC_DUP_VAR_DECLARATION, \n                  \"variable \" + astParameter.getString() + \n                  \" redefined with type \" + redeclaredType + \n                  \", original definition at \" + functionNode.getLineno() + \n                  \" with type \" + declaredType));\n            }\n          }\n          defineSlot(astParameter, functionNode, declaredType, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n} // end declareArguments",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}