{
    "generation": "/**\n * Declares all of a function's arguments.\n */\nprivate void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          JSType paramType = jsDocParameter.getJSType();\n          defineSlot(astParameter, functionNode, paramType, true);\n          // Check for duplicate local var declarations\n          checkDuplicateLocalVarDecl(functionNode, astParameter, paramType);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n}\n\n// Add this new method to check for duplicate local var declarations\nprivate void checkDuplicateLocalVarDecl(Node functionNode, Node astParameter, JSType paramType) {\n  // Iterate through the function's body to find any local variable declarations\n  for (Node node : functionNode.getLastChild().children()) {\n    if (node instanceof VariableDeclaration) {\n      VariableDeclaration varDecl = (VariableDeclaration) node;\n      if (varDecl.getTarget().equals(astParameter.getString())) {\n        JSType localType = varDecl.getType();\n        if (localType!= null &&!localType.equals(paramType)) {\n          reportError(\"variable \" + astParameter.getString() + \" redefined with type \" + localType.toString() + \", original definition at \" + functionNode.getSourceFileName() + \" : \" + functionNode.getLineno() + \" with type \" + paramType.toString());\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}