{
    "generation": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, but it's actually\n        // not necessary to skip folding EXPR_RESULT into other expressions\n        // because if there's only one statement in the block, EXPR_RESULT\n        // should be handled normally.\n\n        return true;\n      } else if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        // Check if this is a function call\n        Node fnCall = maybeExpr.getFirstChild();\n        if (fnCall != null &&\n            fnCall.getType() == Token.CALL &&\n            fnCall.getFirstChild().getType() == Token.GETPROP &&\n            NodeUtil.getStringValue(fnCall.getFirstChild().getSecondChild()) != null) {\n          // This is a function call, so check if the function returns SteamObject\n          Node fnName = fnCall.getFirstChild().getFirstChild();\n          if (NodeUtil.doesNodeDefineSteamObject(fnName, maybeExpr.getStaticSourceFile())) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}