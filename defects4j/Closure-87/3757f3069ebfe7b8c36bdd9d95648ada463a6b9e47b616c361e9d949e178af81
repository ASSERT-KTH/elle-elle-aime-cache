{
    "generation": "/**\n * @return Whether the node is a block with a single statement that is\n *     an expression.\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n        if (n.hasOneChild()) {\n            Node maybeExpr = n.getFirstChild();\n            \n            // Check if the expression is an EXPR_RESULT\n            if (maybeExpr.getType() == Token.EXPR_RESULT) {\n                Node exprChild = maybeExpr.getFirstChild();\n                \n                // Don't fold EXPR_RESULTs into other expressions\n                // as per the IE bug mentioned in the comments\n                if (exprChild != null && \n                    exprChild.getType() == Token.CALL && \n                    exprChild.hasOneChild() && \n                    exprChild.getFirstChild().getType() == Token.GETPROP) {\n                    Node getProp = exprChild.getFirstChild();\n                    if (getProp.hasTwoChildren() && \n                        getProp.getFirstChild().isName() && \n                        \"this\".equals(getProp.getFirstChild().getString()) && \n                        getProp.getSecondChild().isString() && \n                        \"onchange\".equals(getProp.getSecondChild().getString())) {\n                        return false;\n                    }\n                }\n            }\n            \n            return NodeUtil.isExpressionNode(maybeExpr);\n        }\n    }\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}