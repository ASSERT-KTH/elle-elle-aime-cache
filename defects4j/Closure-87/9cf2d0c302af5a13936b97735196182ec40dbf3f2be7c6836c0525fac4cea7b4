{
    "generation": "/**\n * @return Whether the node is a block with a single statement that is\n *     an expression, but not an event handler method call.\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      // Check if the expression is a call to a method named 'onchange' \n      // (or other event handlers) on a property, and avoid folding in that case\n      if (maybeExpr.getType() == Token.EXPR_RESULT \n          && maybeExpr.getFirstChild().getType() == Token.GETPROP \n          && (maybeExpr.getFirstChild().getSecondChild().getString().equals(\"onchange\") \n              || maybeExpr.getFirstChild().getSecondChild().getString().equals(\"onmouseover\") \n              || maybeExpr.getFirstChild().getSecondChild().getString().equals(\"onmouseout\"))) {\n        return false;\n      }\n      return NodeUtil.isExpressionNode(maybeExpr);\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}