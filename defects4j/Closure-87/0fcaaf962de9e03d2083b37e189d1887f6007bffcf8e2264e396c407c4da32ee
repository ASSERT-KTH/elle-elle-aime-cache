{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n\n        // We only have to worry about methods with an implicit 'this'\n        // param, or this doesn't happen.\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          // Check if the expression is a CALL and if it is a method call\n          // on a property that could be an event handler.\n          if (maybeExpr.getType() == Token.CALL) {\n            Node target = maybeExpr.getFirstChild();\n            if (target.getType() == Token.GETPROP) {\n              String propertyName = target.getLastChild().getString();\n              // Check if the property name is an event handler (e.g., onchange)\n              if (propertyName.startsWith(\"on\")) {\n                return false;\n              }\n            }\n          }\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}