{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression and is safe to fold.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          // Ensure the expression is not an EXPR_RESULT containing a call,\n          // which can have side effects (e.g., event handlers in IE)\n          if (maybeExpr.getType() == Token.EXPR_RESULT) {\n            Node exprChild = maybeExpr.getFirstChild();\n            if (exprChild != null && exprChild.getType() == Token.CALL) {\n              return false;\n            }\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}