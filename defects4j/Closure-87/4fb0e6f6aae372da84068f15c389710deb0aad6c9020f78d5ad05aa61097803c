{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          // We only have to worry about methods with an implicit 'this'\n          // param, or this doesn't happen.\n          Node grandParent = n.getParent();\n          if (grandParent != null && grandParent.isFunction()) {\n            Node fnNameNode = grandParent.getFirstChild();\n            if (fnNameNode != null && fnNameNode.isGetterDef() && n.isExprResult()) {\n              // Skip folding if the block is inside an EXPR_RESULT\n              // and the parent is a function other than getter\n              return false;\n            }\n          }\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}