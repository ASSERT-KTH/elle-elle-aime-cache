{
    "generation": "/**\n * @return Whether the node is a block with a single statement that is\n *     an expression.\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      // Check if maybeExpr is an EXPR_RESULT node\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        // Check if the EXPR_RESULT node has a single child that is a CALL node\n        if (maybeExpr.hasOneChild() && maybeExpr.getFirstChild().getType() == Token.CALL) {\n          // Check if the CALL node has a single child that is a PROP_ACCESS node\n          if (maybeExpr.getFirstChild().hasOneChild() && maybeExpr.getFirstChild().getFirstChild().getType() == Token.PROP_ACCESS) {\n            // If all conditions are met, return false to avoid folding the EXPR_RESULT node\n            return false;\n          }\n        }\n      }\n      return NodeUtil.isExpressionNode(maybeExpr);\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}