{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        \n        if (!NodeUtil.isExpressionNode(maybeExpr)) {\n          return false;\n        }\n\n        // Check if the parent is a block node which can affect folding\n        if (n.getParent() != null && n.getParent().getType() == Token.SCRIPT) {\n          return false; // Do not fold if parent is a SCRIPT\n        }\n\n        // Additional checks for non-foldable expression scenarios can go here.\n        return true;\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}