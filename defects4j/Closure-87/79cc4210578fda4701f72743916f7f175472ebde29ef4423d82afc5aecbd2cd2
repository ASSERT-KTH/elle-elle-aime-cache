{
    "generation": "/**\n * @return Whether the node is a block with a single statement that is\n *     an expression.\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n        if (n.hasOneChild()) {\n            Node maybeExpr = n.getFirstChild();\n            // Check if the child is an EXPR_RESULT node\n            if (maybeExpr.getType() == Token.EXPR_RESULT) {\n                // Get the actual expression inside EXPR_RESULT\n                Node expr = maybeExpr.getFirstChild();\n                // Check if it's a function call\n                if (expr.getType() == Token.CALL) {\n                    // Check if it's a property access (e.g., f.onchange())\n                    if (expr.getFirstChild().getType() == Token.GETPROP) {\n                        // Check if the property name is 'onchange'\n                        String propName = expr.getFirstChild().getLastChild().getString();\n                        if (\"onchange\".equals(propName)) {\n                            // Don't fold EXPR_RESULTs for onchange event handlers\n                            return false;\n                        }\n                    }\n                }\n            }\n            return NodeUtil.isExpressionNode(maybeExpr);\n        }\n    }\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}