{
    "generation": "private void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n\n    // Don't attempt to inline a getter or setter property as a variable.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    // Check if any local alias of {@code name} meets condition (b) and (c).\n    boolean meetsConditionBAndC = false;\n    List<Ref> refsToRemove = new ArrayList<>();\n\n    for (Ref ref : name.getRefs()) {\n      if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n        // {@code name} meets condition (c). Now check if also meets condition (b).\n        if (name.globalSets == 1 && name.localSets == 0) {\n          // {@code name} meets both conditions (b) and (c). Try to inline it.\n          meetsConditionBAndC = true;\n\n          if (inlineAliasIfPossible(ref, namespace)) {\n            refsToRemove.add(ref);\n          }\n        }\n      }\n    }\n\n    // Remove any refs that we inlined successfully.\n    name.removeRefs(refsToRemove);\n\n    // If {@code name} meets conditions (b) and (c), it cannot change during the execution of a local scope,\n    // so we don't need to check its children.\n    if (!meetsConditionBAndC && (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n        name.aliasingGets == 0 && name.props != null) {\n      // All of {@code name}'s children meet condition (a), so they can be added to the worklist.\n      workList.addAll(name.props);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}