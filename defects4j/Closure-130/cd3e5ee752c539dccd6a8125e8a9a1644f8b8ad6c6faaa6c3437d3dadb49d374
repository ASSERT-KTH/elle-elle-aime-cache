{
    "generation": "  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.aliasingGets > 0) {\n        Iterator<Ref> refIterator = name.getRefs().iterator();\n        while (refIterator.hasNext()) {\n          Ref ref = refIterator.next();\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code name} meets conditions (b) and (c). Try to inline it.\n            if (name.globalSets == 1 && name.localSets == 0) {\n              if (inlineAliasIfPossible(ref, namespace)) {\n                name.removeRef(ref);\n                continue;\n              }\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any unsatisfied aliases left.\n      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n          && name.aliasingGets == 0 && name.props != null) {\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}