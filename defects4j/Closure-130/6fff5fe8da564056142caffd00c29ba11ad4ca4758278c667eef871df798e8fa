{
    "generation": "private void inlineAliases(GlobalNamespace namespace) {\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n        Name name = workList.pop();\n\n        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n            continue;\n        }\n\n        if (name.globalSets == 1 && name.localSets == 0 &&\n            name.aliasingGets > 0) {\n            List<Ref> refs = Lists.newArrayList(name.getRefs());\n            for (Ref ref : refs) {\n                if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n                    // Check if the reference is used in a closure\n                    if (!isUsedInClosure(ref)) {\n                        if (inlineAliasIfPossible(ref, namespace)) {\n                            name.removeRef(ref);\n                        }\n                    }\n                }\n            }\n        }\n\n        if ((name.type == Name.Type.OBJECTLIT ||\n             name.type == Name.Type.FUNCTION) &&\n            name.aliasingGets == 0 && name.props != null) {\n            workList.addAll(name.props);\n        }\n    }\n}\n\n// Helper method to check if a reference is used in a closure\nprivate boolean isUsedInClosure(Ref ref) {\n    Node node = ref.getNode();\n    while (node != null) {\n        if (NodeUtil.isFunction(node)) {\n            return true;\n        }\n        node = node.getParent();\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}