{
    "generation": "/**\n * Get the current solution.\n *\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n    Set<Integer> basicRows = new HashSet<Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n        }\n        Integer basicRow = getBasicRow(colIndex);\n        if (basicRow == null) {\n            // Variable is non-basic, set to 0\n            coefficients[i] = 0;\n        } else if (basicRows.contains(basicRow)) {\n            // If multiple variables can take a given value, choose the first and set the rest to 0\n            coefficients[i] = 0;\n        } else {\n            basicRows.add(basicRow);\n            double value = getEntry(basicRow, getRhsOffset());\n            if (restrictToNonNegative && value < 0) {\n                // If we're restricting to non-negative and the value is negative, set to 0\n                coefficients[i] = 0;\n            } else {\n                coefficients[i] = value;\n            }\n        }\n    }\n\n    // Handle negative variables\n    if (negativeVarBasicRow != null && !restrictToNonNegative) {\n        double negativeValue = getEntry(negativeVarBasicRow, getRhsOffset());\n        for (int i = 0; i < coefficients.length; i++) {\n            int colIndex = columnLabels.indexOf(\"x\" + i);\n            if (colIndex >= 0 && getBasicRow(colIndex) == negativeVarBasicRow) {\n                coefficients[i] -= negativeValue;\n            }\n        }\n    }\n\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}