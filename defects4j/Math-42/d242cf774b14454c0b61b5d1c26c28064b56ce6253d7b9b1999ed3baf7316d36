{
    "generation": "/**\n * Get the current solution.\n *\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n    Set<Integer> basicRows = new HashSet<Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n        }\n        Integer basicRow = getBasicRow(colIndex);\n        if (basicRow == null) {\n            // Non-basic variable, set to zero\n            coefficients[i] = 0;\n        } else {\n            // Basic variable, set to RHS value\n            coefficients[i] = getEntry(basicRow, getRhsOffset());\n            // Adjust for non-negativity constraints\n            if (restrictToNonNegative) {\n                coefficients[i] = Math.max(coefficients[i], 0);\n            } else {\n                coefficients[i] -= mostNegative;\n            }\n        }\n    }\n    return new RealPointValuePair(coefficients, f.value(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}