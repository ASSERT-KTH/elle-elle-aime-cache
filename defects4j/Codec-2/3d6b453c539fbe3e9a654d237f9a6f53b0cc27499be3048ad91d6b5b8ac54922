{
    "generation": "/**\n * <p>\n * Encodes all of the provided data, starting at inPos, for inAvail bytes.\n * Must be called at least twice: once with the data to encode, and once\n * with inAvail set to \"-1\" to alert encoder that EOF has been reached,\n * so flush last remaining bytes (if not multiple of 3).\n * </p><p>\n * Thanks to \"commons\" project in ws.apache.org for the bitwise operations,\n * and general approach.\n * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n * </p>\n *\n * @param in byte[] array of binary data to base64 encode.\n * @param inPos Position to start reading data from.\n * @param inAvail Amount of bytes available from input for encoding.\n */\nvoid encode(byte[] in, int inPos, int inAvail) {\n    if (inAvail < 0) {\n        if (eof) {\n            return;\n        }\n        eof = true;\n        if (modulus != 0) {\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            switch (modulus) {\n                case 1:\n                    buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buf[pos++] = PAD;\n                        buf[pos++] = PAD;\n                    }\n                    break;\n                case 2:\n                    buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buf[pos++] = PAD;\n                    }\n                    break;\n            }\n        }\n        if (lineLength > 0) {\n            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n            pos += lineSeparator.length;\n        }\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            int b = in[inPos + i] & 0xFF; // Ensure byte is treated as unsigned\n            x = (x << 8) | b;\n            modulus = (modulus + 1) % 3;\n            if (modulus == 0) {\n                if (buf == null || buf.length - pos < encodeSize) {\n                    resizeBuf();\n                }\n                buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];\n                buf[pos++] = encodeTable[x & MASK_6BITS];\n                currentLinePos += 4;\n                if (lineLength > 0 && currentLinePos >= lineLength) {\n                    System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                    pos += lineSeparator.length;\n                    currentLinePos = 0;\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}