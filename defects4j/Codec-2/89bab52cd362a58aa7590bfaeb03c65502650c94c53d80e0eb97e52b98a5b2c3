{
    "generation": "void encode(byte[] in, int inPos, int inAvail) {\n    // return immediately if EOF has already been reached\n    if (eof) {\n        return;\n    }\n    // inAvail < 0 is how we're informed of EOF in the underlying data we're encoding.\n    if (inAvail < 0) {\n        eof = true;\n        if (modulus != 0) {\n            // handle remaining bytes if the input size isn't a multiple of 3\n            x = x << (8 * (3 - modulus));\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            for (int i = 0; i < modulus + 1; i++) {\n                buf[pos++] = encodeTable[(x >> (18 - 6 * i)) & MASK_6BITS];\n            }\n            // URL-SAFE skips the padding to further reduce size.\n            if (encodeTable == STANDARD_ENCODE_TABLE) {\n                while ((modulus + 1) < 3) {\n                    buf[pos++] = PAD;\n                    modulus++;\n                }\n            }\n        }\n        if (lineLength > 0) {\n            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n            pos += lineSeparator.length;\n        }\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            modulus = (++modulus) % 3;\n            int b = in[inPos++];\n            if (b < 0) { b += 256; }\n            x = (x << 8) + b;\n            if (0 == modulus) {\n                buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];\n                buf[pos++] = encodeTable[x & MASK_6BITS];\n                currentLinePos += 4;\n                if (lineLength > 0 && lineLength <= currentLinePos) {\n                    System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                    pos += lineSeparator.length;\n                    currentLinePos = 0;\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}