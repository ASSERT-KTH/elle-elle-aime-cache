{
    "generation": "    /**\n     * Decompose a symmetric positive semidefinite matrix.\n     *\n     * @param matrix Symmetric positive semidefinite matrix.\n     * @param small Diagonal elements threshold under which column are\n     * considered to be dependent on previous ones and are discarded.\n     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n     * positive semidefinite.\n     */\n    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        final double[][] c = matrix.getData();\n        final double[][] b = new double[order][order];\n        final int[] index = new int[order];\n        for (int i = 0; i < order; ++i) {\n            index[i] = i;\n        }\n\n        int r = 0;\n        for (boolean loop = true; loop;) {\n\n            // find maximal diagonal element\n            int maxIndex = r;\n            for (int i = r + 1; i < order; ++i) {\n                if (c[index[i]][index[i]] > c[index[maxIndex]][index[maxIndex]]) {\n                    maxIndex = i;\n                }\n            }\n\n            // swap elements\n            int tmp = index[r];\n            index[r] = index[maxIndex];\n            index[maxIndex] = tmp;\n\n            // check diagonal element\n            if (c[index[r]][index[r]] < small) {\n\n                if (r == 0) {\n                    throw new NonPositiveDefiniteMatrixException(c[index[r]][index[r]], r, small);\n                }\n\n                // check remaining diagonal elements\n                for (int i = r; i < order; ++i) {\n                    if (c[index[i]][index[i]] < -small) {\n                        // there is at least one sufficiently negative diagonal element,\n                        // the symmetric positive semidefinite matrix is wrong\n                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                    }\n                }\n\n                // all remaining diagonal elements are close to zero, we consider we have\n                // found the rank of the symmetric positive semidefinite matrix\n                ++r;\n                loop = false;\n\n            } else {\n\n                // transform the matrix\n                final double sqrt = FastMath.sqrt(c[index[r]][index[r]]);\n                b[r][r] = sqrt;\n                final double inverse = 1 / sqrt;\n                for (int i = r + 1; i < order; ++i) {\n                    final double e = inverse * c[index[i]][index[r]];\n                    b[i][r] = e;\n                    c[index[i]][index[i]] -= e * e;\n                    for (int j = r + 1; j < i; ++j) {\n                        final double f = c[index[i]][index[j]] - e * b[j][r];\n                        c[index[i]][index[j]] = f;\n                        c[index[j]][index[i]] = f;\n                    }\n                }\n\n                // prepare next iteration\n                loop = ++r < order;\n            }\n        }\n\n        // build the root matrix\n        rank = r;\n        root = MatrixUtils.createRealMatrix(order, r);\n        for (int i = 0; i < order; ++i) {\n            for (int j = 0; j < r; ++j) {\n                root.setEntry(i, j, b[index[i]][j]);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}