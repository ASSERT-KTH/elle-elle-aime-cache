{
    "generation": "/**\n * Returns the current InputStream, decompressing and discarding any preceding \n * streams in solid compression mode if necessary.\n * \n * @return the current InputStream\n * @throws IOException if an I/O error occurs\n */\nprivate InputStream getCurrentStream() throws IOException {\n    if (deferredBlockStreams.isEmpty() && getCurrentEntry() == null) {\n        throw new IllegalStateException(\"No current 7z entry (call getNextEntry() first).\");\n    }\n    \n    while (deferredBlockStreams.size() > 1) {\n        // In solid compression mode we need to decompress all leading folder'\n        // streams to get access to an entry. We defer this until really needed\n        // so that entire blocks can be skipped without wasting time for decompression.\n        final InputStream stream = deferredBlockStreams.remove(0);\n        IOUtils.skip(stream, Long.MAX_VALUE);\n        stream.close();\n    }\n\n    // If the list is now empty (which can happen for zero-sized entries), \n    // do not attempt to return an element from the empty list\n    return deferredBlockStreams.isEmpty()? null : deferredBlockStreams.get(0);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}