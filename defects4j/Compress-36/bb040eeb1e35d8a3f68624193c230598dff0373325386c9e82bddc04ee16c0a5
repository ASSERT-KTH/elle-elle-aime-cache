{
    "generation": "/**\n * Returns the current input stream for the 7z entry.\n * \n * @return the current input stream\n * @throws IOException if an I/O error occurs\n * @throws IllegalStateException if no entry has been selected via getNextEntry()\n */\nprivate InputStream getCurrentStream() throws IOException {\n    if (deferredBlockStreams.isEmpty() || deferredBlockStreams.size() == 1 && getNextEntryIfNeeded()) {\n        // If there's only one stream and it's exhausted, advance to the next entry if available\n        while (deferredBlockStreams.size() > 1) {\n            // In solid compression mode we need to decompress all leading folder's\n            // streams to get access to an entry. We defer this until really needed\n            // so that entire blocks can be skipped without wasting time for decompression.\n            final InputStream stream = deferredBlockStreams.remove(0);\n            IOUtils.skip(stream, Long.MAX_VALUE);\n            stream.close();\n        }\n        if (deferredBlockStreams.isEmpty()) {\n            throw new IllegalStateException(\"No current 7z entry (call getNextEntry() first).\");\n        }\n    }\n    \n    return deferredBlockStreams.get(0);\n}\n\n// Assuming this method is already defined elsewhere in the class\n// private boolean getNextEntryIfNeeded() throws IOException;\n// This method should attempt to move to the next entry if the current one is exhausted\n// and return true if a new entry is available, false otherwise",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}