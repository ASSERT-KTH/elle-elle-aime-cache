{
    "generation": "/**\n * Try to fold shift operations\n */\nprivate Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n        long result;\n        double lval = left.getDouble();\n        double rval = right.getDouble();\n\n        // Convert the numbers to ints or longs\n        int lvalInt = (int) lval;\n        int rvalInt = (int) rval;\n\n        // Check origins\n        if (lval != lvalInt) {\n            error(FRACTIONAL_BITWISE_OPERAND, left);\n            return n;\n        }\n        if (rval != rvalInt) {\n            error(FRACTIONAL_BITWISE_OPERAND, right);\n            return n;\n        }\n\n        // Perform the operation\n        switch (n.getType()) {\n            case Token.LSH:\n                if (rvalInt < 0 || rvalInt >= 32) {\n                    error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n                    return n;\n                }\n                result = lvalInt << rvalInt;\n                break;\n            case Token.RSH:\n                // Cast to long to preserve sign bit for negative numbers\n                long lvalLong = (long) lvalInt;\n                if (rvalInt < 0 || rvalInt >= 32) {\n                    error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n                    return n;\n                }\n                result = lvalLong >> rvalInt;\n                break;\n            case Token.URSH:\n                long lvalUnsigned = Integer.toUnsignedLong(lvalInt);\n                if (rvalInt < 0 || rvalInt >= 32) {\n                    error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n                    return n;\n                }\n                result = lvalUnsigned >>> rvalInt;\n                break;\n            default:\n                throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType()));\n        }\n\n        Node newNumber = Node.newNumber(result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n\n        return newNumber;\n    }\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}