{
    "generation": "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n\n    // Convert right value to int\n    int rvalInt = (int) rval;\n    if (rvalInt != rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n\n    switch (n.getType()) {\n      case Token.LSH: {\n        // Left value can be converted to int\n        int lvalInt = (int) lval;\n        if (lvalInt != lval) {\n          error(FRACTIONAL_BITWISE_OPERAND, left);\n          return n;\n        }\n        result = lvalInt << rvalInt;\n        break;\n      }\n      case Token.RSH: {\n        // Left value can be converted to int\n        int lvalInt = (int) lval;\n        if (lvalInt != lval) {\n          error(FRACTIONAL_BITWISE_OPERAND, left);\n          return n;\n        }\n        result = lvalInt >> rvalInt;\n        break;\n      }\n      case Token.URSH: {\n        // Left value should be converted to long for unsigned right shift\n        long lvalLong = (long) lval;\n        if (lvalLong != lval) {\n          error(FRACTIONAL_BITWISE_OPERAND, left);\n          return n;\n        }\n        result = lvalLong >>> rvalInt;\n        break;\n      }\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n            Node.tokenToName(n.getType()));\n    }\n\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n\n    return newNumber;\n  }\n\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}