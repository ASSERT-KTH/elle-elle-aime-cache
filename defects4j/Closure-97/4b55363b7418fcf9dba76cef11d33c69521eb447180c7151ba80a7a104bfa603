{
    "generation": "/**\n * Try to fold shift operations\n */\nprivate Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n\n    long result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n\n    // Only the lower 5 bits are used when shifting, so don't do anything\n    // if the shift amount is outside [0,31]\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n\n    int rvalInt = (int) rval;\n\n    switch (n.getType()) {\n      case Token.LSH:\n      case Token.URSH:\n        if (lval >= 0) {\n          if (lval > Integer.MAX_VALUE) {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n          result = (long) lval << rvalInt;\n        } else {\n          if (lval < Integer.MIN_VALUE) {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n          result = ((long) lval) & 0xFFFFFFFFL;\n          result = result << rvalInt;\n        }\n        break;\n      case Token.RSH:\n        if (lval >= 0) {\n          if (lval > Integer.MAX_VALUE) {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n          result = (long) lval >> rvalInt;\n        } else {\n          if (lval < Integer.MIN_VALUE) {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n          result = (long) lval >> rvalInt;\n          if (rvalInt > 0) {\n            result |= (~0L) << (32 - rvalInt);\n          }\n        }\n        break;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n            Node.tokenToName(n.getType()));\n    }\n\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n\n    return newNumber;\n  }\n\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}