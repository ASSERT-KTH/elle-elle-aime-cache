{
    "generation": "private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n        double lval = left.getDouble();\n        double rval = right.getDouble();\n\n        // Check if left operand is an integer within 32-bit range\n        if (lval != Math.floor(lval) || lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE) {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n        }\n\n        // Check if right operand is an integer within [0, 32)\n        if (rval != Math.floor(rval) || rval < 0 || rval >= 32) {\n            error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n            return n;\n        }\n\n        // Convert operands to integers\n        int lvalInt = (int) lval;\n        int rvalInt = (int) rval;\n\n        int result;\n        switch (n.getType()) {\n            case Token.LSH:\n                result = lvalInt << rvalInt;\n                break;\n            case Token.RSH:\n                result = lvalInt >> rvalInt;\n                break;\n            case Token.URSH:\n                // Unsigned right shift\n                result = lvalInt >>> rvalInt;\n                break;\n            default:\n                throw new AssertionError(\"Unknown shift operator: \" +\n                        Node.tokenToName(n.getType()));\n        }\n\n        Node newNumber = Node.newNumber(result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n\n        return newNumber;\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}