{
    "generation": "\nprivate Node tryFoldShift(Node n, Node left, Node right) {\n\n  if (left.getType() == Token.NUMBER &&\n\n      right.getType() == Token.NUMBER) {\n\n    double lval = left.getDouble();\n\n    double rval = right.getDouble();\n\n    // Check if the left operand is within 32-bit integer range\n\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n\n      return n;\n\n    }\n\n    // Convert the shift amount to an integer and normalize it to 0-31\n\n    int rvalInt = (int) rval & 0x1F;\n\n    // Convert the left operand to int\n\n    int lvalInt = (int) lval;\n\n    if (lvalInt != lval) {\n\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n\n      return n;\n\n    }\n\n    // Perform the shift operation based on the node type\n\n    double result;\n\n    switch (n.getType()) {\n\n      case Token.LSH:\n\n        result = lvalInt << rvalInt;\n\n        break;\n\n      case Token.RSH:\n\n        result = lvalInt >> rvalInt;\n\n        break;\n\n      case Token.URSH:\n\n        result = lvalInt >>> rvalInt;\n\n        break;\n\n      default:\n\n        throw new AssertionError(\"Unknown shift operator: \" +\n\n            Node.tokenToName(n.getType()));\n\n    }\n\n    // Create a new number node with the result\n\n    Node newNumber = Node.newNumber(result);\n\n    n.getParent().replaceChild(n, newNumber);\n\n    reportCodeChange();\n\n    return newNumber;\n\n  }\n\n  return n;\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}