{
    "generation": "/**\n * Try to fold shift operations\n */\nprivate Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n        double lvalD = left.getDouble();\n        double rvalD = right.getDouble();\n\n        // Check ranges for left operand\n        if (!(lvalD >= Integer.MIN_VALUE && lvalD <= Integer.MAX_VALUE)) {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n        }\n\n        // Check ranges for right operand\n        if (!(rvalD >= 0 && rvalD < 32)) {\n            error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n            return n;\n        }\n\n        // Convert to integers\n        int lvalInt = (int) lvalD;\n        if (lvalInt != lvalD) {\n            error(FRACTIONAL_BITWISE_OPERAND, left);\n            return n;\n        }\n\n        int rvalInt = (int) rvalD;\n        if (rvalInt != rvalD) {\n            error(FRACTIONAL_BITWISE_OPERAND, right);\n            return n;\n        }\n\n        long result;\n        switch (n.getType()) {\n            case Token.LSH:\n                result = (long) lvalInt << rvalInt;\n                break;\n            case Token.RSH:\n                result = (long) lvalInt >> rvalInt;\n                break;\n            case Token.URSH:\n                // Use unsigned right shift\n                result = ((long) lvalInt) & 0xFFFFFFFFL >>> rvalInt;\n                break;\n            default:\n                throw new AssertionError(\"Unknown shift operator: \" +\n                    Node.tokenToName(n.getType()));\n        }\n\n        // Convert result back to double for Node.newNumber\n        Node newNumber = Node.newNumber((double) result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n\n        return newNumber;\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}