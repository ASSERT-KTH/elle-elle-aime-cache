{
    "generation": "private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n        double lval = left.getDouble();\n        double rval = right.getDouble();\n\n        // Check if left operand is within 32-bit integer range\n        if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n        }\n\n        // Check if shift amount is an integer\n        if (rval != (int) rval) {\n            error(FRACTIONAL_BITWISE_OPERAND, right);\n            return n;\n        }\n\n        int lvalInt = (int) lval;\n        int rvalInt = (int) rval;\n\n        // Check if left operand has fractional part\n        if (lvalInt != lval) {\n            error(FRACTIONAL_BITWISE_OPERAND, left);\n            return n;\n        }\n\n        // Mask shift amount to 5 bits\n        rvalInt &= 31;\n\n        int result;\n        switch (n.getType()) {\n            case Token.LSH:\n                result = lvalInt << rvalInt;\n                break;\n            case Token.RSH:\n                result = lvalInt >> rvalInt;\n                break;\n            case Token.URSH:\n                // Treat left operand as unsigned 32-bit integer\n                result = (int) ((lvalInt >>> rvalInt));\n                break;\n            default:\n                throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType()));\n        }\n\n        Node newNumber = Node.newNumber(result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n        return newNumber;\n    }\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}