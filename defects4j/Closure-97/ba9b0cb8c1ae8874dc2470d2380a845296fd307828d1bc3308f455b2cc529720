{
    "generation": "private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n        double lval = left.getDouble();\n        double rval = right.getDouble();\n\n        // Truncate operands to 32-bit integers by casting to int\n        int lvalInt = (int) lval;\n        int rvalInt = (int) rval;\n\n        // In JavaScript, shift amounts are always taken modulo 32\n        int shiftAmount = rvalInt & 0x1F; // equivalent to rvalInt % 32\n\n        int result;\n        switch (n.getType()) {\n            case Token.LSH:\n                result = lvalInt << shiftAmount;\n                break;\n            case Token.RSH:\n                result = lvalInt >> shiftAmount;\n                break;\n            case Token.URSH:\n                // Unsigned right shift: treat lvalInt as unsigned\n                result = (int) (lvalInt >>> shiftAmount);\n                break;\n            default:\n                throw new AssertionError(\"Unknown shift operator: \" +\n                        Node.tokenToName(n.getType()));\n        }\n\n        Node newNumber = Node.newNumber(result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n\n        return newNumber;\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}