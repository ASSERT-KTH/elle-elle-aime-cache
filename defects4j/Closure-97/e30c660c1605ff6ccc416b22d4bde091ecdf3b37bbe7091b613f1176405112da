{
    "generation": "/**\n * Try to fold shift operations\n */\nprivate Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n\n        double lval = left.getDouble();\n        double rval = right.getDouble();\n\n        if (rval < 0) {\n            error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n            return n;\n        }\n\n        // check if values can be represented as ints or longs without losing precision\n        long lvalLong = (long) lval;\n        long rvalLong = (long) rval;\n        int lvalInt = (int) lval;\n        int rvalInt = (int) rval;\n\n        if (lvalInt != lval || lvalLong < Integer.MIN_VALUE || lvalLong > Integer.MAX_VALUE) {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n        }\n\n        if (rvalInt != rval || rvalInt < 0 || rvalInt > 31) {\n            error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n            return n;\n        }\n\n        long result;\n        switch (n.getType()) {\n            case Token.LSH:\n                result = lvalInt << rvalInt;\n                break;\n            case Token.RSH:\n                result = lvalInt >> rvalInt;\n                break;\n            case Token.URSH:\n                // A Java int cannot store the unsigned value that JavaScript handles,\n                // so a possible loss of precision is fine here.\n                result = lvalLong >>> rvalInt;\n                break;\n            default:\n                throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType()));\n        }\n\n        Node newNumber = Node.newNumber(result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n\n        return newNumber;\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}