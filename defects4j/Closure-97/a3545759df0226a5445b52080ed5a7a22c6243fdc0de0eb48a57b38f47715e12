{
    "generation": "/**\n * Try to fold shift operations\n */\nprivate Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n        long result;\n        long lval = (long) left.getDouble();\n        int rval = (int) right.getDouble();\n\n        // check ranges. We do not do anything that would clip the double to\n        // a 32-bit range, since the user likely does not intend that.\n        if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE) {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n        }\n\n        // only the lower 5 bits are used when shifting, so don't do anything\n        // if the shift amount is outside [0,32)\n        rval &= 0x1F; // Mask to 5 bits\n\n        // Convert the numbers to ints\n        int lvalInt = (int) lval;\n        if (lvalInt != lval) {\n            error(FRACTIONAL_BITWISE_OPERAND, left);\n            return n;\n        }\n\n        if (rval != right.getDouble()) {\n            error(FRACTIONAL_BITWISE_OPERAND, right);\n            return n;\n        }\n\n        switch (n.getType()) {\n            case Token.LSH:\n                result = lvalInt << rval;\n                break;\n            case Token.RSH:\n                result = lvalInt >> rval;\n                break;\n            case Token.URSH:\n                // JavaScript handles zero shifts on signed numbers differently than\n                // Java as an Java int can not represent the unsigned 32-bit number\n                // where JavaScript can so use a long here.\n                result = lvalInt >>> rval;\n                // Ensure the result is treated as an unsigned 32-bit integer\n                result &= 0xFFFFFFFFL;\n                break;\n            default:\n                throw new AssertionError(\"Unknown shift operator: \" +\n                    Node.tokenToName(n.getType()));\n        }\n\n        Node newNumber = Node.newNumber(result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n\n        return newNumber;\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}