{
    "generation": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // Check range limits for the left operand\n      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      // Ensure right operand is within the valid shift range [0, 31]\n      if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      int lvalInt = (int) lval;\n      if (lvalInt != lval) {\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      int rvalInt = (int) rval;\n      if (rvalInt != rval) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      long result;\n\n      switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          // JavaScript does a 32-bit unsigned operation for '<<', so use masking\n          result = result & 0xFFFFFFFFL;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // Convert to unsigned 32-bit integer first\n          result = lvalInt & 0xFFFFFFFFL;\n          result = result >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType()));\n      }\n\n      // Convert the result back to a double for JavaScript compatibility\n      double resultDouble = result;\n      Node newNumber = Node.newNumber(resultDouble);\n      n.getParent().replaceChild(n, newNumber);\n      reportCodeChange();\n\n      return newNumber;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}