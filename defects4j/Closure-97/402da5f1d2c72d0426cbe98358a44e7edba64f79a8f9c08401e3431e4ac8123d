{
    "generation": "private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n\n        double lval = left.getDouble();\n        double rval = right.getDouble();\n\n        // Check for identity values\n        if (rval == 0) {\n            // When shifting by 0, the result is the same as the original number.\n            return n;\n        } else if (lval == 1 && (n.getType() == Token.RSH || n.getType() == Token.URSH)) {\n            // Right shifting 1 by any amount results in 0.\n            return Node.newNumber(0);\n        } else if (lval == 0 && n.getType() == Token.LSH) {\n            // Left shifting 0 by any amount results in 0.\n            return Node.newNumber(0);\n        }\n\n        // Check ranges.\n        if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE || lval % 1 != 0) {\n            error(FRACTIONAL_BITWISE_OPERAND, left);\n            return n;\n        }\n\n        if (rval < 0 || rval >= 32 || rval % 1 != 0) {\n            error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n            return n;\n        }\n\n        // Convert the numbers to ints\n        int lvalInt = (int) lval;\n        int rvalInt = (int) rval;\n\n        double result = 0;\n        switch (n.getType()) {\n            case Token.LSH:\n                result = (double)(lvalInt << rvalInt);\n                break;\n            case Token.RSH:\n                result = (double)(lvalInt >> rvalInt);\n                break;\n            case Token.URSH:\n                // JavaScript handles zero shifts on signed numbers differently than\n                // Java as an Java int can not represent the unsigned 32-bit number\n                // where JavaScript can so use a long here.\n                result = (double)((long) lvalInt >>> rvalInt);\n                break;\n            default:\n                throw new AssertionError(\"Unknown shift operator: \" +\n                    Node.tokenToName(n.getType()));\n        }\n\n        Node newNumber = Node.newNumber(result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n\n        return newNumber;\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}