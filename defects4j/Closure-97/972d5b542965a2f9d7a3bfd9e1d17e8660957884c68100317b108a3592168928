{
    "generation": "private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n        double lval = left.getDouble();\n        // check if left side value is within Integer range\n        if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n        }\n\n        int rval = (int) right.getDouble();\n        // check if right side value is a non-negative integer less than 32\n        if (!((right.getDouble() == rval) && (rval >= 0 && rval < 32))) {\n            error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n            return n;\n        }\n\n        int lvalInt = (int) lval;\n        // check if left side value is an integer without any fractional part\n        if (lvalInt != lval) {\n            error(FRACTIONAL_BITWISE_OPERAND, left);\n            return n;\n        }\n\n        int result;\n        switch (n.getType()) {\n            case Token.LSH:\n                result = lvalInt << rval;\n                break;\n            case Token.RSH:\n                result = lvalInt >> rval;\n                break;\n            case Token.URSH:\n                // United right shift uses non-negative integer zero extension on the left,\n                // always filling the leftmost bits with zeroes.\n                result = lvalInt & 0xffffffff >>> rval;\n                break;\n            default:\n                throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType()));\n        }\n\n        Node newNumber = Node.newNumber(result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n        return newNumber;\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}