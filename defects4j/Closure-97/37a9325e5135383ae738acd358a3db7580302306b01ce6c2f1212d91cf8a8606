{
    "generation": "/**\n * Try to fold shift operations\n */\nprivate Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n        double lval = left.getDouble();\n        double rval = right.getDouble();\n\n        // Check ranges for left operand\n        if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE) {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n        }\n\n        // Check ranges for right operand\n        if (rval < 0 || rval >= 32) {\n            error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n            return n;\n        }\n\n        // Convert the numbers to ints\n        int lvalInt = (int) lval;\n        if (lvalInt != lval) {\n            error(FRACTIONAL_BITWISE_OPERAND, left);\n            return n;\n        }\n\n        int rvalInt = (int) rval;\n        if (rvalInt != rval) {\n            error(FRACTIONAL_BITWISE_OPERAND, right);\n            return n;\n        }\n\n        long result;\n        switch (n.getType()) {\n            case Token.LSH:\n                result = lvalInt << rvalInt;\n                break;\n            case Token.RSH:\n                result = lvalInt >> rvalInt;\n                break;\n            case Token.URSH:\n                // Use long to handle unsigned right shift correctly\n                result = Integer.toUnsignedLong(lvalInt) >>> rvalInt;\n                break;\n            default:\n                throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType()));\n        }\n\n        Node newNumber = Node.newNumber(result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n\n        return newNumber;\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}