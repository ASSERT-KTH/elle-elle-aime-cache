{
    "generation": "/**\n * Resolve the referenced type within the enclosing scope.\n */\n@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Check for implicit prototype cycles before attempting resolution\n    // to prevent potential StackOverflowErrors\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      return registry.isLastGeneration()? getReferencedType() : this;\n    }\n\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration()? getReferencedType() : this;\n    }\n\n    // Check again after attempting registry resolution to catch any cycles\n    // introduced during that process\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      return registry.isLastGeneration()? getReferencedType() : this;\n    }\n\n    resolveViaProperties(t, enclosing);\n    \n    // Final check after all resolution attempts\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration()? getReferencedType() : this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}