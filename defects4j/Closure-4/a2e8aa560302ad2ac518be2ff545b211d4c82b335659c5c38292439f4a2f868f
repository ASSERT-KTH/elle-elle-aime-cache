{
    "generation": "/**\n * Resolve the referenced type within the enclosing scope.\n */\n@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // TODO(user): Investigate whether it is really necessary to keep two\n  // different mechanisms for resolving named types, and if so, which order\n  // makes more sense. Now, resolution via registry is first in order to\n  // avoid triggering the warnings built into the resolution via properties.\n  boolean resolved = resolveViaRegistry(t, enclosing);\n\n  if (resolved && (detectImplicitPrototypeCycle())) {\n    handleTypeCycle(t);\n    return is_nominal_abstract()? UnknownType.getInstance() : checkAbstract();\n  }\n\n  if (!resolved) resolveViaProperties(t, enclosing);\n\n  if (getReferencedType() instanceof FunctionType) {\n      FunctionType ft = ((FunctionType)(getReferencedType())); \n      if ((ftExtendsCycle(ft))) ft = checkExtendsft(ft, t);\n      \n      if (ft.findImplementsCycle()) setReferencedType(UnknownType.getInstance());\n  }\n\n  super.resolveInternal(t, enclosing);\n  if (isResolved()) {\n      finishPropertyContinuations();\n\n  }\n  return!registry.isLastGeneration()? this:getReferencedType();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}