{
    "generation": "/**\n * Resolve the referenced type within the enclosing scope.\n */\n@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Use a set to track resolved types and avoid recursion\n    Set<JSType> resolvedTypes = new HashSet<>();\n    return resolveInternalHelper(t, enclosing, resolvedTypes);\n}\n\nprivate JSType resolveInternalHelper(ErrorReporter t, StaticScope<JSType> enclosing, Set<JSType> resolvedTypes) {\n    if (resolvedTypes.contains(this)) {\n        // Cycle detected\n        handleTypeCycle(t);\n        return this;\n    }\n\n    resolvedTypes.add(this);\n\n    // Resolution via registry is first to avoid triggering warnings built into resolution via properties.\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n    }\n\n    if (resolved) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ?\n            getReferencedType() : this;\n    }\n\n    resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n        finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}