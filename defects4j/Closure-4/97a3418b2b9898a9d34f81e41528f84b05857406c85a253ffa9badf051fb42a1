{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    HashSet<JSType> typesInProgress = new HashSet<>();\n    boolean resolved = resolveViaRegistry(t, enclosing, typesInProgress);\n    if (detectImplicitPrototypeCycle(typesInProgress)) {\n        handleTypeCycle(t);\n    }\n\n    if (resolved) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ?\n              getReferencedType() : this;\n    }\n\n    resolved = resolveViaProperties(t, enclosing, typesInProgress);\n    if (detectImplicitPrototypeCycle(typesInProgress)) {\n        handleTypeCycle(t);\n    }\n\n    if (resolved) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n}\n\nprivate boolean resolveViaRegistry(ErrorReporter t, StaticScope<JSType> enclosing, HashSet<JSType> typesInProgress) {\n    if (typesInProgress.contains(this)) {\n        t.warning(\"Parse error. Cycle detected in inheritance chain of type \" + getName());\n        return true;\n    }\n    typesInProgress.add(this);\n    // Rest of the method...\n}\n\nprivate boolean resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing, HashSet<JSType> typesInProgress) {\n    if (typesInProgress.contains(this)) {\n        t.warning(\"Parse error. Cycle detected in inheritance chain of type \" + getName());\n        return true;\n    }\n    typesInProgress.add(this);\n    // Rest of the method...\n}\n\nprivate boolean detectImplicitPrototypeCycle(HashSet<JSType> typesInProgress) {\n    // Check for cycle keeping a track of types currently being processed\n    // ...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}