{
    "generation": "  /**\n   * Resolve the referenced type within the enclosing scope.\n   */\n  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n    if (isResolving) {\n      // Prevent re-entrant calls that can result in cycles.\n      t.report(CheckLevel.ERROR, getSourceName(), \"Cycle detected in type resolution\");\n      return unknownType; // Return an unknown type to break the cycle.\n    }\n\n    try {\n      isResolving = true;\n\n      boolean resolved = resolveViaRegistry(t, enclosing);\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n        return unknownType; // Return to avoid further processing.\n      }\n\n      if (resolved) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ?\n            getReferencedType() : this;\n      }\n\n      resolveViaProperties(t, enclosing);\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n        return unknownType; // Return to avoid further processing.\n      }\n\n      super.resolveInternal(t, enclosing);\n      if (isResolved()) {\n        finishPropertyContinuations();\n      }\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n\n    } finally {\n      // Ensure the resolving flag is reset even if an exception occurs.\n      isResolving = false;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}