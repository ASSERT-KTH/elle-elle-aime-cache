{
    "generation": "/**\n * Resolve the referenced type within the enclosing scope.\n */\n@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Use a stack to track the types being resolved to detect cycles\n    if (TypeResolver.containsCycle(enclosing, this)) {\n        handleTypeCycle(t);\n        return this;\n    }\n\n    // Add the current type to the resolution stack\n    TypeResolver.pushResolution(enclosing, this);\n\n    // Resolve via registry first\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n    }\n\n    if (resolved) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        TypeResolver.popResolution(enclosing, this);\n        return registry.isLastGeneration() ?\n            getReferencedType() : this;\n    }\n\n    // Resolve via properties if not resolved via registry\n    resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n        finishPropertyContinuations();\n    }\n    \n    // Remove the current type from the resolution stack\n    TypeResolver.popResolution(enclosing, this);\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n}\n\n// Helper class to manage type resolution stacks\nstatic class TypeResolver {\n    private static final ThreadLocal<Set<Object>> resolutionStack = ThreadLocal.withInitial(HashSet::new);\n\n    static boolean containsCycle(StaticScope<JSType> enclosing, NamedType type) {\n        return resolutionStack.get().contains(type);\n    }\n\n    static void pushResolution(StaticScope<JSType> enclosing, NamedType type) {\n        resolutionStack.get().add(type);\n    }\n\n    static void popResolution(StaticScope<JSType> enclosing, NamedType type) {\n        resolutionStack.get().remove(type);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}