{
    "generation": "/**\n * Resolve the referenced type within the enclosing scope.\n */\n@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Use a set to track resolved types to detect cycles\n    Set<String> resolvedTypes = new HashSet<>();\n    if (!resolveInternalHelper(t, enclosing, resolvedTypes)) {\n        resolveViaProperties(t, enclosing);\n        if (detectImplicitPrototypeCycle()) {\n            handleTypeCycle(t);\n        }\n    }\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n        finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n}\n\nprivate boolean resolveInternalHelper(ErrorReporter t, StaticScope<JSType> enclosing, Set<String> resolvedTypes) {\n    String typeName = getName();\n    if (resolvedTypes.contains(typeName)) {\n        handleTypeCycle(t);\n        return true; // Cycle detected\n    }\n    resolvedTypes.add(typeName);\n\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    if (resolved) {\n        if (detectImplicitPrototypeCycle()) {\n            handleTypeCycle(t);\n        }\n        return true;\n    }\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}