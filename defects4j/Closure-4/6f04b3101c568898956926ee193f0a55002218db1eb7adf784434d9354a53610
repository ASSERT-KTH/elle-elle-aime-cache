{
    "generation": "/**\n * Resolve the referenced type within the enclosing scope.\n */\n@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Resolve via registry first to avoid triggering warnings\n    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    if (resolvedViaRegistry) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration()?\n          getReferencedType() : this;\n    }\n\n    // Prevent infinite loop by checking if the type is already being resolved\n    if (enclosing.isBeingResolved(this)) {\n      // Handle cycle detection\n      handleTypeCycle(t);\n      return this;\n    }\n\n    enclosing.markAsBeingResolved(this);\n    try {\n      resolveViaProperties(t, enclosing);\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n\n      super.resolveInternal(t, enclosing);\n      if (isResolved()) {\n        finishPropertyContinuations();\n      }\n      return registry.isLastGeneration()?\n          getReferencedType() : this;\n    } finally {\n      enclosing.markAsResolved(this);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}