{
    "generation": "/**\n * Resolve the referenced type within the enclosing scope.\n */\n@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Use a set to track the resolution path to detect cycles\n    Set<JSType> resolutionPath = new HashSet<>();\n    return resolveInternalHelper(t, enclosing, resolutionPath);\n}\n\nprivate JSType resolveInternalHelper(ErrorReporter t, StaticScope<JSType> enclosing, Set<JSType> resolutionPath) {\n    if (resolutionPath.contains(this)) {\n        handleTypeCycle(t);\n        return this;\n    }\n\n    resolutionPath.add(this);\n\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n    }\n\n    if (resolved) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        resolutionPath.remove(this);\n        return registry.isLastGeneration() ?\n            getReferencedType() : this;\n    }\n\n    resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n        finishPropertyContinuations();\n    }\n    resolutionPath.remove(this);\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n}\n\nprivate void handleTypeCycle(ErrorReporter t) {\n    t.warning(\"Parse error. Cycle detected in inheritance chain of type \" + getReferencedType().getDisplayName());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}