{
    "generation": "  /**\n   * Resolve the referenced type within the enclosing scope.\n   */\n  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Use a set to track visited types and detect cycles\n    Set<JSType> visited = new HashSet<>();\n    visited.add(this);\n\n    // Attempt to resolve via registry first\n    boolean resolved = resolveViaRegistry(t, enclosing);\n\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    // Resolve via properties, but check for cycles\n    if (!resolveViaPropertiesWithCycleCheck(t, enclosing, visited)) {\n      // Cycle detected, handle appropriately\n      t.warning(\"Parse error. Cycle detected in inheritance chain of type \" + this.getReferenceName());\n      return this;\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }\n\n  /**\n   * Resolve the type via properties, checking for cycles.\n   */\n  private boolean resolveViaPropertiesWithCycleCheck(ErrorReporter t, StaticScope<JSType> enclosing, Set<JSType> visited) {\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      return false;\n    }\n\n    resolveViaProperties(t, enclosing);\n\n    // Check for new cycles after resolving properties\n    for (JSType propertyType : getAllPropertyTypes()) {\n      if (propertyType instanceof NamedType && !visited.add(propertyType)) {\n        return false; // Cycle detected\n      }\n      if (propertyType instanceof NamedType && !((NamedType) propertyType).resolveInternal(t, enclosing).isResolved()) {\n        return false; // Unresolved type in the chain\n      }\n    }\n\n    return true; // No cycles detected and all types resolved\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}