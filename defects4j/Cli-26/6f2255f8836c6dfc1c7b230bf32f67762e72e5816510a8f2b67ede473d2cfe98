{
    "generation": "/**\n * Create an Option using the current settings and with\n * the specified Option <code>char</code>.\n *\n * @param opt the <code>char</code> representation\n * of the Option\n * @return the Option instance\n * @throws IllegalArgumentException if <code>opt</code> is not\n * a valid character.  See Option.\n */\npublic static Option create(char opt) throws IllegalArgumentException {\n    // create the option\n    Option option = new Option(String.valueOf(opt), description);\n\n    // set the option properties\n    option.setLongOpt(longopt);\n    option.setRequired(required);\n    option.setOptionalArg(optionalArg);\n    option.setArgs(numberOfArgs);\n    option.setType(type);\n    option.setValueSeparator(valuesep);\n    option.setArgName(argName);\n\n    // reset the OptionBuilder properties\n    reset();\n\n    // return the Option instance\n    return option;\n}\n\n/**\n * Create an Option using the current settings and with\n * the specified Option <code>String</code>.\n *\n * @param opt the <code>String</code> representation\n * of the Option\n * @return the Option instance\n * @throws IllegalArgumentException if <code>opt</code> is not\n * a valid single character.  See Option.\n */\npublic static Option create(String opt) throws IllegalArgumentException {\n    if (opt == null || opt.length() != 1) {\n        throw new IllegalArgumentException(\"opt must be a single character\");\n    }\n    \n    // create the option\n    Option option = new Option(opt, description);\n\n    // set the option properties\n    option.setLongOpt(longopt);\n    option.setRequired(required);\n    option.setOptionalArg(optionalArg);\n    option.setArgs(numberOfArgs);\n    option.setType(type);\n    option.setValueSeparator(valuesep);\n    option.setArgName(argName);\n\n    // reset the OptionBuilder properties\n    reset();\n\n    // return the Option instance\n    return option;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}