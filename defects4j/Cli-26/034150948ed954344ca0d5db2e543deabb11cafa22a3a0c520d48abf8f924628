{
    "generation": "/**\n * Create an Option using the current settings and with\n * the specified Option <code>char</code>.\n *\n * @param opt the <code>java.lang.String</code> representation\n * of the Option\n * @return the Option instance\n * @throws IllegalArgumentException if <code>opt</code> is not\n * a valid character.  See Option.\n */\npublic static Option create(String opt) throws IllegalArgumentException\n{\n    // Validate the option character\n    if (opt == null || opt.length() == 0) {\n        throw new IllegalArgumentException(\"opt is null or empty\");\n    }\n\n    // Create the option\n    Option option = new Option(opt, OptionBuilder.description);\n\n    // Set the option properties only if they are set in OptionBuilder\n    if (OptionBuilder.longopt != null) {\n        option.setLongOpt(OptionBuilder.longopt);\n    }\n    if (OptionBuilder.required != null) {\n        option.setRequired(OptionBuilder.required);\n    }\n    if (OptionBuilder.optionalArg != null) {\n        option.setOptionalArg(OptionBuilder.optionalArg);\n    }\n    if (OptionBuilder.numberOfArgs != null) {\n        option.setArgs(OptionBuilder.numberOfArgs);\n    }\n    if (OptionBuilder.type != null) {\n        option.setType(OptionBuilder.type);\n    }\n    if (OptionBuilder.valuesep != null) {\n        option.setValueSeparator(OptionBuilder.valuesep);\n    }\n    if (OptionBuilder.argName != null) {\n        option.setArgName(OptionBuilder.argName);\n    }\n\n    // Reset the OptionBuilder properties\n    OptionBuilder.reset();\n\n    // Return the Option instance\n    return option;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}