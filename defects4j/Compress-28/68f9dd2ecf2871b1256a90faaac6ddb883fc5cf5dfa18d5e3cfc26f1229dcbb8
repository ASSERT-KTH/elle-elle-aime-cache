{
    "generation": "/**\n * Reads bytes from the current tar archive entry.\n *\n * This method is aware of the boundaries of the current\n * entry in the archive and will deal with them as if they\n * were this stream's start and EOF.\n *\n * @param buf The buffer into which to place bytes read.\n * @param offset The offset at which to place bytes read.\n * @param numToRead The number of bytes to read.\n * @return The number of bytes read, or -1 at EOF.\n * @throws IOException on error\n */\n@Override\npublic int read(byte[] buf, int offset, int numToRead) throws IOException {\n    int totalRead = 0;\n\n    if (hasHitEOF || entryOffset >= entrySize) {\n        return -1;\n    }\n\n    if (currEntry == null) {\n        throw new IllegalStateException(\"No current tar entry\");\n    }\n\n    int bytesRead = 0;\n    while (bytesRead < numToRead) {\n        int read = Math.min(numToRead - bytesRead, available());\n        if (read <= 0) {\n            break;\n        }\n        int ret = is.read(buf, offset + bytesRead, read);\n        count(ret);\n        if (ret == -1) {\n            hasHitEOF = true;\n            break;\n        }\n        bytesRead += ret;\n        entryOffset += ret;\n    }\n\n    if (bytesRead < numToRead && entryOffset < entrySize) {\n        throw new IOException(\"Truncated tar archive entry\");\n    }\n\n    return bytesRead == 0 && hasHitEOF? -1 : bytesRead;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}