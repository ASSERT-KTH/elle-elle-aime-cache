{
    "generation": "/**\n * Reads bytes from the current tar archive entry.\n *\n * This method is aware of the boundaries of the current\n * entry in the archive and will deal with them as if they\n * were this stream's start and EOF.\n *\n * @param buf The buffer into which to place bytes read.\n * @param offset The offset at which to place bytes read.\n * @param numToRead The number of bytes to read.\n * @return The number of bytes read, or -1 at EOF.\n * @throws IOException on error\n */\n@Override\npublic int read(byte[] buf, int offset, int numToRead) throws IOException {\n    int totalRead = 0;\n\n    if (hasHitEOF || entryOffset >= entrySize) {\n        return -1;\n    }\n\n    if (currEntry == null) {\n        throw new IllegalStateException(\"No current tar entry\");\n    }\n\n    numToRead = Math.min(numToRead, available());\n    \n    totalRead = is.read(buf, offset, numToRead);\n    \n    if (totalRead == -1) {\n        if (entryOffset < entrySize) {\n            // We've reached the end of the stream but haven't read all the expected bytes\n            throw new IOException(\"Truncated TAR archive entry\");\n        }\n        hasHitEOF = true;\n    } else {\n        count(totalRead);\n        entryOffset += totalRead;\n        \n        if (entryOffset > entrySize) {\n            // We've read more bytes than expected\n            throw new IOException(\"Read more bytes than expected for TAR archive entry\");\n        }\n    }\n\n    return totalRead;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}