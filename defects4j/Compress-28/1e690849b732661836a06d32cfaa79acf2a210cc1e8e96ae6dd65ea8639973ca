{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n        int totalRead = 0;\n\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        if (hasHitEOF || entryOffset >= entrySize) {\n            long skipped = is.skip(entrySize - entryOffset);\n            if (skipped != entrySize - entryOffset) {\n                throw new IOException(\"Failed to skip to the end of truncated entry\");\n            }\n            entryOffset = entrySize;\n            return -1;\n        }\n\n        numToRead = Math.min(numToRead, (int)(entrySize - entryOffset));\n        int bytesRead;\n        while (totalRead < numToRead) {\n            bytesRead = is.read(buf, offset + totalRead, numToRead - totalRead);\n            if (bytesRead == -1) {\n                hasHitEOF = true;\n                break;\n            }\n            totalRead += bytesRead;\n            entryOffset += bytesRead;\n        }\n\n        return totalRead == 0 ? -1 : totalRead;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}