{
    "generation": "/**\n * Processes a OBJECTLIT node.\n */\nprivate void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child != null;\n      child = child.getNext()) {\n    String name = null;\n    T type = null;\n    if (child.isStringKey()) {\n      // Bracket notation\n      name = child.getString();\n      type = typeSystem.getType(getScope(), n, name);\n    } else if (child.isGetProp() || child.isString()) {\n      // Dot notation or literal string\n      // Extract property name and type here\n      // ...\n    }\n\n    if (name != null && type != null) {\n      Property prop = getProperty(name);\n      if (!prop.scheduleRenaming(child,\n                                 processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n          compiler.report(JSError.make(\n              t.getSourceName(), child, propertiesToErrorFor.get(name),\n              Warnings.INVALIDATION, name,\n              (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}