{
    "generation": "    /**\n     * Processes a OBJECTLIT node.\n     */\n    private void handleObjectLit(NodeTraversal t, Node n) {\n        boolean allStrings = true;\n        boolean allNumbers = true;\n\n        for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n            // Maybe STRING, GET, SET\n            if (!child.isString()) {\n                allStrings = false;\n            }\n            if (!child.isNumber()) {\n                allNumbers = false;\n            }\n        }\n\n        if (!allStrings && !allNumbers) {\n            compiler.report(JSError.make(t.getSourceName(), n, Warnings.INVALIDATION,\n                \"Mix of string and number keys in object literal\"));\n            return;\n        }\n\n        for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n            String name = child.getString();\n            T type = typeSystem.getType(getScope(), n, name);\n\n            Property prop = getProperty(name);\n            if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n                if (propertiesToErrorFor.containsKey(name)) {\n                    compiler.report(JSError.make(\n                            t.getSourceName(), child, propertiesToErrorFor.get(name),\n                            Warnings.INVALIDATION, name,\n                            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}