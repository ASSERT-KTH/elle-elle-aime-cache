{
    "generation": "    /**\n     * Processes a OBJECTLIT node.\n     */\n    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        String name = null;\n        switch (child.getType()) {\n          case Token.STRING_KEY:\n          case Token.GETTER_DEF:\n          case Token.SETTER_DEF:\n            name = child.getString();\n            break;\n          case Token.GETELEM:\n            // Handle bracket notation\n            Node keyNode = child.getFirstChild();\n            if (keyNode.getType() == Token.STRING || keyNode.getType() == Token.NAME) {\n              name = keyNode.getString();\n            } else {\n              // If the key is not a string or name, we can't determine the property name\n              continue;\n            }\n            break;\n          default:\n            // Unsupported property type\n            continue;\n        }\n\n        // We should never see a mix of numbers and strings.\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}