{
    "generation": "    /**\n     * Processes a OBJECTLIT node.\n     */\n    private void handleObjectLit(NodeTraversal t, Node n) {\n      boolean hasSeenStringKey = false;\n      boolean hasSeenNumericKey = false;\n\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        // Identify if the key is a string or number\n        if (child.isStringKey()) {\n          hasSeenStringKey = true;\n        } else if (child.isQuotedString()) {\n          hasSeenStringKey = true;\n        } else if (child.isNumber()) {\n          hasSeenNumericKey = true;\n        }\n\n        // We should never see a mix of numbers and strings.\n        if (hasSeenStringKey && hasSeenNumericKey) {\n          compiler.report(JSError.make(t.getSourceName(), child, \n              Warnings.INVALIDATION, \"Mix of string and numeric keys in object literal\"));\n        }\n\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}