{
    "generation": "/**\n * Processes an OBJECTLIT node.\n */\nprivate void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n       child != null;\n       child = child.getNext()) {\n    // Maybe STRING, GET, SET\n\n    // We should never see a mix of numbers and strings.\n    String name = child.getString();\n    if (name == null) {\n      // Handle non-string property names (e.g., numbers)\n      name = child.getToken().toString();\n    }\n\n    T type = typeSystem.getType(getScope(), n, name);\n\n    Property prop = getProperty(name);\n    if (prop == null) {\n      // Create a new Property if it doesn't exist\n      prop = createNewProperty(name);\n    }\n\n    if (!prop.scheduleRenaming(child,\n                               processProperty(t, prop, type, null))) {\n      // TODO(user): It doesn't look like the user can do much in this\n      // case right now.\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n  }\n}\n\n// Additional helper method to create a new Property\nprivate Property createNewProperty(String name) {\n  Property newProp = new Property(name);\n  properties.put(name, newProp);\n  return newProp;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}