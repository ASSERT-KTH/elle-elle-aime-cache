{
    "generation": "/**\n * Processes a OBJECTLIT node.\n */\nprivate void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    String name = null;\n\n    if (child.isStringKey()) {\n      // Direct string key in object literal, e.g., {a: 0}\n      name = child.getString();\n    } else if (child.isGetterDef() || child.isSetterDef()) {\n      // Getter or setter definition, e.g., {get a() { ... }, set a(v) { ... }}\n      name = child.getString();\n    } else if (child.isComputedProp()) {\n      // Computed property, e.g., {[key]: value}\n      Node keyNode = child.getFirstChild();\n      if (keyNode.isStringLit() || keyNode.isName()) {\n        name = keyNode.getString();\n      } else {\n        // If the key is not a simple string or name, we cannot determine the property name\n        continue;\n      }\n    } else {\n      // Unhandled case, skip\n      continue;\n    }\n\n    T type = typeSystem.getType(getScope(), n, name);\n\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n      // TODO(user): It doesn't look like the user can do much in this case right now.\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}