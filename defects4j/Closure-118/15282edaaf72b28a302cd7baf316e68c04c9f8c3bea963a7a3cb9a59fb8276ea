{
    "generation": "    /**\n     * Processes a OBJECTLIT node.\n     */\n    private void handleObjectLit(NodeTraversal t, Node n) {\n      Map<String, Node> propertyNodes = new HashMap<>();\n\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        String name = child.getString();\n        Node existingNode = propertyNodes.get(name);\n\n        // If we've seen this property before, make sure the types are consistent\n        if (existingNode != null) {\n          T type = typeSystem.getType(getScope(), n, name);\n          if (!type.equals(typeSystem.getType(getScope(), existingNode, name))) {\n            // Types are inconsistent, report an error\n            compiler.report(JSError.make(\n                t.getSourceName(), child, INCONSISTENT_PROPERTIES_TYPE,\n                Warnings.INVALIDATION, name,\n                type.toString(), typeSystem.getType(getScope(), existingNode, name).toString(),\n                existingNode.getLocation().toString()));\n          }\n        } else {\n          // This is the first time we've seen this property, store it\n          propertyNodes.put(name, child);\n        }\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, typeSystem.getType(getScope(), n, name), null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                typeSystem.getType(getScope(), n, name) == null ? \"null\" : typeSystem.getType(getScope(), n, name).toString(),\n                n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}