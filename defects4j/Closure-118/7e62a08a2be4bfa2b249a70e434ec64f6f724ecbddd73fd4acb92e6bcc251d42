{
    "generation": "/**\n * Processes an OBJECTLIT node.\n */\nprivate void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    // OBJECTLIT children can be NAME (for string keys), GETPROP, STRING, or COMPUTEPROP\n    String name;\n    if (child.isString()) {\n      name = child.getString();\n    } else if (child.isGetProp()) {\n      name = child.getString();\n    } else if (child.isComputedProp()) {\n      // For computed properties, we may need to handle them differently\n      // Assuming we cannot determine the name statically, skip for now\n      continue;\n    } else {\n      // Unexpected node type in OBJECTLIT\n      continue;\n    }\n\n    T type = typeSystem.getType(getScope(), n, name);\n\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n      // Reporting an error if renaming scheduling fails\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}