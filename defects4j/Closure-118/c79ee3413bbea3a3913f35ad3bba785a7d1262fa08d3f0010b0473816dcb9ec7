{
    "generation": "/**\n * Processes a OBJECTLIT node.\n */\nprivate void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child!= null;\n      child = child.getNext()) {\n    // Maybe STRING, GET, SET\n\n    // We should never see a mix of numbers and strings.\n    String name;\n    if (child.isString()) {\n      name = child.getString();\n    } else if (child.isGetProp() || child.isComputedProp()) {\n      // Handle computed property names or getters\n      name = processQualifiedName(t, child);\n    } else {\n      // Invalid property name, report error\n      compiler.report(JSError.make(\n          t.getSourceName(), child, \"Invalid property name\",\n          Warnings.INVALID_PROPERTY_NAME, child.toString(), \"\", n.toString(), \"\"));\n      continue;\n    }\n\n    T type = typeSystem.getType(getScope(), n, name);\n\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child,\n                               processProperty(t, prop, type, null))) {\n      // TODO(user): It doesn't look like the user can do much in this\n      // case right now.\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n  }\n}\n\n// Additional helper method to handle qualified names (e.g., computed property names or getters)\nprivate String processQualifiedName(NodeTraversal t, Node node) {\n  if (node.isGetProp()) {\n    // Handle getter\n    return node.getFirstChild().getString();\n  } else if (node.isComputedProp()) {\n    // Handle computed property name\n    Node expr = node.getFirstChild().getNext();\n    if (expr.isString()) {\n      return expr.getString();\n    } else {\n      // Non-string computed property name, report error\n      compiler.report(JSError.make(\n          t.getSourceName(), expr, \"Computed property name must be a string\",\n          Warnings.INVALID_COMPUTED_PROPERTY, expr.toString(), \"\", node.toString(), \"\"));\n      return null;\n    }\n  }\n  return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}