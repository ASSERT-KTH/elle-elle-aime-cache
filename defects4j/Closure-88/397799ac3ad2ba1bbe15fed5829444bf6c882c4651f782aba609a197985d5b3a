{
    "generation": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable, boolean isLeftInAndOr) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n        if (isLeftInAndOr && NodeUtil.isLhs(n, n.getParent())) {\n            // If the variable is assigned a new value while in 'and' or 'or' condition,\n            // it should be treated as 'KILL' automatically.\n            return VariableLiveness.KILL;\n        } else if (NodeUtil.isLhs(n, n.getParent())) {\n            // The assignment occurs after the RHS is evaluated.\n            return VariableLiveness.KILL;\n        } else {\n            // If not, it's a read.\n            return VariableLiveness.READ;\n        }\n    }\n\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n            boolean childIsLeftInAndOr = NodeUtil.isAndOrNode(n);\n            VariableLiveness state = isVariableReadBeforeKill(child, variable, childIsLeftInAndOr);\n            if (state != VariableLiveness.MAYBE_LIVE) {\n                return state;\n            }\n        }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}