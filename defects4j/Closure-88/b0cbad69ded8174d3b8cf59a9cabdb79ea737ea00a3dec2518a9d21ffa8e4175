{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n\n    // Special handling for binary operations where the left side could be a read\n    if (n.isAssign() && NodeUtil.isName(n.getFirstChild())) {\n      Node lhs = n.getFirstChild();\n      if (variable.equals(lhs.getString())) {\n        // Check if there is any read before this assignment in the current expression\n        if (isVariableReadInExpression(n.getNext(), variable)) {\n          return VariableLiveness.READ;\n        }\n        return VariableLiveness.KILL;\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }\n\n  private boolean isVariableReadInExpression(Node n, String variable) {\n    if (n == null) {\n      return false;\n    }\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      // If n is not a lhs of an assignment, it is a read\n      if (!NodeUtil.isLhs(n, n.getParent())) {\n        return true;\n      }\n    }\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      if (isVariableReadInExpression(child, variable)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}