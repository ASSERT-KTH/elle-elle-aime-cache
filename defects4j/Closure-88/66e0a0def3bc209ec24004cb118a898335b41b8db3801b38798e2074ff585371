{
    "generation": "private VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      Node parent = n.getParent();\n      Node gramps = parent.getParent();\n      \n      // Special case when parent is in an expression with multiple assignments\n      if (parent.isAssign() && gramps != null && \n          (gramps.isAnd() || gramps.isOr() || \n           gramps.isSub() || gramps.isAdd() || \n           gramps.isHook())) {\n        return VariableLiveness.READ;\n      }\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Expressions are evaluated left-right, depth first.\n  for (Node child = n.getFirstChild();\n      child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}