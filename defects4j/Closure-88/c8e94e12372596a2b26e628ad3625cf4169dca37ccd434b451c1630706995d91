{
    "generation": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      Node assignment = n.getParent();\n      Node rhs = assignment.getChildAtIndex(1);\n      if (NodeUtil.isName(rhs) && rhs.getString().equals(variable)) {\n        // If the right-hand side of the assignment is the same variable,\n        // then it is not a new assignment and should not be considered a KILL.\n        return VariableLiveness.MAYBE_LIVE;\n      }\n      // If the right-hand side of the assignment is a different variable or\n      // an expression, then it is a new assignment and should be considered a KILL.\n      return VariableLiveness.KILL;\n    } else {\n      // If the variable is not on the left-hand side of an assignment,\n      // then it must be read before a later assignment or kill.\n      // Check if there is a later assignment to the variable.\n      boolean readBeforeKill = false;\n      for (Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) {\n        if (NodeUtil.isName(sibling) && variable.equals(sibling.getString()) &&\n            NodeUtil.isLhs(sibling, sibling.getParent())) {\n          readBeforeKill = true;\n          break;\n        }\n      }\n      if (readBeforeKill) {\n        return VariableLiveness.READ;\n      } else {\n        // If there is no later assignment to the variable,\n        // then it must be read before a kill.\n        return VariableLiveness.MAYBE_LIVE;\n      }\n    }\n  }\n\n  // Expressions are evaluated left-right, depth first.\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}