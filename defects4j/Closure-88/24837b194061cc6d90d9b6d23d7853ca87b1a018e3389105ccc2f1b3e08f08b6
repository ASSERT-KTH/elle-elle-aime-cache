{
    "generation": "/**\n * Give an expression and a variable. It returns READ, if the first\n * reference of that variable is a read. It returns KILL, if the first\n * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n */\nprivate VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable, boolean inConditionalChain) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // The expression to which the assignment is made is evaluated before\n      // the RHS is evaluated (normal left to right evaluation) but the KILL\n      // occurs after the RHS is evaluated.\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Expressions are evaluated left-right, depth first.\n  for (Node child = n.getFirstChild();\n      child!= null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      boolean newInConditionalChain = inConditionalChain ||\n          (n.getToken() == Token.AND || n.getToken() == Token.OR);\n      VariableLiveness state = isVariableReadBeforeKill(child, variable, newInConditionalChain);\n      if (state!= VariableLiveness.MAYBE_LIVE) {\n        if (inConditionalChain && state == VariableLiveness.KILL) {\n          // If we're in a conditional chain and encounter a KILL, it's effectively a MAYBE_LIVE\n          // because the assignment might not happen if the conditional chain short-circuits.\n          return VariableLiveness.MAYBE_LIVE;\n        }\n        return state;\n      }\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}