{
    "generation": "/**\n * Give an expression and a variable. It returns READ, if the first\n * reference of that variable is a read. It returns KILL, if the first\n * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n */\nprivate VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // The expression to which the assignment is made is evaluated before\n      // the RHS is evaluated (normal left to right evaluation) but the KILL\n      // occurs after the RHS is evaluated.\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Expressions are evaluated left-right, depth first.\n  for (Node child = n.getFirstChild();\n      child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n  }\n\n  // Additional check for assignment expressions within logical and arithmetic operations\n  if (n.isAssign()) {\n    VariableLiveness lhsState = isVariableReadBeforeKill(n.getFirstChild(), variable);\n    if (lhsState == VariableLiveness.READ) {\n      return VariableLiveness.READ;\n    }\n    VariableLiveness rhsState = isVariableReadBeforeKill(n.getLastChild(), variable);\n    if (rhsState != VariableLiveness.MAYBE_LIVE) {\n      return rhsState;\n    }\n  } else if (n.isAnd() || n.isOr() || n.isHook() || n.isAdd() || n.isSub()) {\n    // Check left side first\n    VariableLiveness leftState = isVariableReadBeforeKill(n.getFirstChild(), variable);\n    if (leftState != VariableLiveness.MAYBE_LIVE) {\n      return leftState;\n    }\n    // If left side is MAYBE_LIVE, check right side\n    VariableLiveness rightState = isVariableReadBeforeKill(n.getLastChild(), variable);\n    if (rightState != VariableLiveness.MAYBE_LIVE) {\n      return rightState;\n    }\n  }\n\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}