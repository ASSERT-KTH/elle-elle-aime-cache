{
    "generation": "/**\n * Determines if the first reference of a variable in an expression is a read or a kill.\n * \n * @param n The node to check.\n * @param variable The variable to track.\n * @return VariableLiveness indicating whether the variable is read, killed, or may be live.\n */\nprivate VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n        if (NodeUtil.isLhs(n, n.getParent())) {\n            // It's an assignment to the variable.\n            return VariableLiveness.KILL;\n        } else {\n            // It's a read of the variable.\n            return VariableLiveness.READ;\n        }\n    }\n\n    // Default to MAYBE_LIVE if no references are found.\n    VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n\n    // Traverse children in left-to-right, depth-first order.\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n            VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n            if (childState == VariableLiveness.READ) {\n                // If a read is found, set state to READ and break.\n                state = VariableLiveness.READ;\n                break;\n            } else if (childState == VariableLiveness.KILL) {\n                // If a kill is found and no read before it, set state to KILL.\n                if (state == VariableLiveness.MAYBE_LIVE) {\n                    state = VariableLiveness.KILL;\n                }\n            }\n        }\n    }\n\n    return state;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}