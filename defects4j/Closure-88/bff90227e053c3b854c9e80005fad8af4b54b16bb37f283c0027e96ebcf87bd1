{
    "generation": "/**\n * Give an expression and a variable. It returns READ, if the first\n * reference of that variable is a read. It returns KILL, if the first\n * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n */\nprivate VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // The expression to which the assignment is made is evaluated before\n      // the RHS is evaluated (normal left to right evaluation) but the KILL\n      // occurs after the RHS is evaluated.\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Expressions are evaluated left-right, depth first.\n  VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n  for (Node child = n.getFirstChild();\n      child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n      if (childState == VariableLiveness.READ) {\n        return VariableLiveness.READ;\n      } else if (childState == VariableLiveness.KILL) {\n        state = VariableLiveness.KILL;\n      }\n    }\n  }\n\n  // Special handling for short-circuit operators (&& and ||)\n  if (n.isAnd() || n.isOr()) {\n    VariableLiveness leftState = isVariableReadBeforeKill(n.getFirstChild(), variable);\n    if (leftState == VariableLiveness.KILL) {\n      return VariableLiveness.KILL;\n    }\n    if (leftState == VariableLiveness.READ) {\n      return VariableLiveness.READ;\n    }\n    // If the left side is MAYBE_LIVE, we need to check the right side\n    VariableLiveness rightState = isVariableReadBeforeKill(n.getLastChild(), variable);\n    if (rightState == VariableLiveness.READ) {\n      return VariableLiveness.READ;\n    }\n    if (rightState == VariableLiveness.KILL) {\n      state = VariableLiveness.KILL;\n    }\n  }\n\n  return state;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}