{
    "generation": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n        if (NodeUtil.isLhs(n, n.getParent())) {\n            // The expression to which the assignment is made is evaluated before\n            // the RHS is evaluated (normal left to right evaluation) but the KILL\n            // occurs after the RHS is evaluated.\n            return VariableLiveness.KILL;\n        } else {\n            return VariableLiveness.READ;\n        }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n            VariableLiveness state = isVariableReadBeforeKill(child, variable);\n            if (state != VariableLiveness.MAYBE_LIVE) {\n                return state;\n            }\n        }\n    }\n\n    // If the variable is not found in the children, check if it is used in the parent\n    // expression in a way that it is read before being assigned.\n    Node parent = n.getParent();\n    if (parent != null && NodeUtil.isAssignmentOp(parent)) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        if (rhs == n && NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {\n            return VariableLiveness.READ;\n        }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}