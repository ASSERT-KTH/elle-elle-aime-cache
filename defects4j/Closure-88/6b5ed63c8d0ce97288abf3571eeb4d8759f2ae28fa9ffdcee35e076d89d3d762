{
    "generation": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n        if (NodeUtil.isLhs(n, n.getParent())) {\n            return VariableLiveness.KILL;\n        } else {\n            return VariableLiveness.READ;\n        }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n            VariableLiveness state = isVariableReadBeforeKill(child, variable);\n            if (state != VariableLiveness.MAYBE_LIVE) {\n                return state;\n            }\n        }\n    }\n\n    // Special handling for short-circuit operators\n    if (n.isAnd() || n.isOr()) {\n        VariableLiveness leftState = isVariableReadBeforeKill(n.getFirstChild(), variable);\n        if (leftState == VariableLiveness.KILL) {\n            return VariableLiveness.KILL;\n        } else if (leftState == VariableLiveness.READ) {\n            VariableLiveness rightState = isVariableReadBeforeKill(n.getSecondChild(), variable);\n            if (rightState == VariableLiveness.KILL) {\n                return VariableLiveness.READ; // READ first, then KILL\n            } else if (rightState == VariableLiveness.READ) {\n                return VariableLiveness.READ; // READ first, then READ\n            }\n        }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}