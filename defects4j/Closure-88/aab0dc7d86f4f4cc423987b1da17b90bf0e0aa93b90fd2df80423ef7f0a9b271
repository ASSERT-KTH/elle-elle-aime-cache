{
    "generation": "private VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // The assignment to the variable is evaluated after the RHS,\n      // it should return KILL.\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Explicit check for assignment expressions (e.g., a = ...).\n  if (n.isAssign() || n.isVar()) {\n    Node lhs = NodeUtil.getBestLValue(n);\n    if (lhs != null && variable.equals(lhs.getString())) {\n      return VariableLiveness.KILL;\n    }\n  }\n\n  // Expressions are evaluated left-right, depth first.\n  VariableLiveness result = VariableLiveness.MAYBE_LIVE;\n  for (Node child = n.getFirstChild();\n       child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state == VariableLiveness.READ || state == VariableLiveness.KILL) {\n        return state;\n      }\n      if (state == VariableLiveness.MAYBE_LIVE) {\n        result = state;\n      }\n    }\n  }\n  return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}