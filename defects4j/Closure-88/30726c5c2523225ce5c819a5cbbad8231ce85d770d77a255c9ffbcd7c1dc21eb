{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      Node parent = n.getParent();\n      if (NodeUtil.isLhs(n, parent)) {\n        // If the variable is part of an assignment, check if it's the first reference.\n        // We need to ensure that this is not a read within the RHS of an assignment.\n        if (parent.isAssign() && parent.getFirstChild() == n) {\n          // This is a kill if it's the LHS of an assignment.\n          return VariableLiveness.KILL;\n        } else {\n          // If it's used in an expression and not the LHS of an assignment, it's a read.\n          return VariableLiveness.READ;\n        }\n      } else {\n        // If it's not part of the LHS of an assignment, it's a read.\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}