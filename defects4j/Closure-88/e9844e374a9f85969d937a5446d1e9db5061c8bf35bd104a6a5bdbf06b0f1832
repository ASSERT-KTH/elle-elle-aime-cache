{
    "generation": "/**\n * Give an expression and a variable. It returns READ, if the first\n * reference of that variable is a read. It returns KILL, if the first\n * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n */\nprivate VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // The expression to which the assignment is made is evaluated before\n      // the RHS is evaluated (normal left to right evaluation) but the KILL\n      // occurs after the RHS is evaluated.\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Expressions are evaluated left-right, depth first.\n  // Special handling for short-circuiting operators (e.g., &&, ||,?, :)\n  if (n.isExpression() && \n      (n.getToken() == Token.AND || n.getToken() == Token.OR || \n       n.getToken() == Token.HOOK || n.getToken() == TokenConditional)) {\n    // If the variable is referenced in the first operand, and it's not a KILL,\n    // then return that state. This is because the second operand is only \n    // evaluated if the first operand's value is not enough to determine the \n    // overall result.\n    VariableLiveness state = isVariableReadBeforeKill(n.getFirstChild(), variable);\n    if (state!= VariableLiveness.MAYBE_LIVE) {\n      return state;\n    }\n    // Otherwise, check the second operand. If it's a KILL, then return KILL.\n    // If it's a READ, then return MAYBE_LIVE, because the variable may be \n    // live if the first operand's value is not enough to determine the overall \n    // result, but dead if it is.\n    state = isVariableReadBeforeKill(n.getLastChild(), variable);\n    if (state == VariableLiveness.KILL) {\n      return VariableLiveness.KILL;\n    } else if (state == VariableLiveness.READ) {\n      return VariableLiveness.MAYBE_LIVE;\n    }\n  }\n\n  // General handling for other types of nodes\n  for (Node child = n.getFirstChild();\n      child!= null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state!= VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}