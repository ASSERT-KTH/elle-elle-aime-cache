{
    "generation": "private VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // The expression to which the assignment is made is evaluated before\n      // the RHS is evaluated (normal left to right evaluation) but the KILL\n      // occurs after the RHS is evaluated.\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Expressions are evaluated left-right, depth first.\n  for (Node child = n.getFirstChild();\n      child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state == VariableLiveness.KILL) {\n        // If we encounter a KILL, any subsequent READs should be ignored.\n        return state;\n      } else if (state == VariableLiveness.READ) {\n        // If we encounter a READ, we need to check if there is a subsequent KILL.\n        // If there is no KILL, the variable is READ.\n        for (Node sibling = child.getNext(); sibling != null; sibling = sibling.getNext()) {\n          if (isVariableReadBeforeKill(sibling, variable) == VariableLiveness.KILL) {\n            return VariableLiveness.MAYBE_LIVE;\n          }\n        }\n        return state;\n      }\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}