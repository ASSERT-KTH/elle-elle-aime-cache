{
    "generation": "private static final int maxStringCacheLen = 16; // Define the maximum length for caching\nprivate static String[] stringCache = new String[1024]; // Define the cache array\n\n/**\n * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n * <p />\n * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n * some more duplicates.\n */\nprivate static String cacheString(final char[] charBuf, final int start, final int count) {\n    // limit (no cache):\n    if (count > maxStringCacheLen)\n        return new String(charBuf, start, count);\n\n    // calculate hash:\n    int hash = 0;\n    int offset = start;\n    for (int i = 0; i < count; i++) {\n        hash = 31 * hash + charBuf[offset++];\n    }\n\n    // get from cache\n    final int index = (hash & (stringCache.length - 1));\n    String cached = stringCache[index];\n\n    if (cached == null) { // miss, add\n        cached = new String(charBuf, start, count);\n        stringCache[index] = cached;\n    } else { // hashcode hit, check equality\n        if (rangeEquals(charBuf, start, count, cached)) { // hit\n            return cached;\n        } else { // hashcode conflict\n            cached = new String(charBuf, start, count);\n            stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again\n        }\n    }\n    return cached;\n}\n\n/**\n * Helper method to check if the range of characters in the buffer matches the given string.\n */\nprivate static boolean rangeEquals(final char[] charBuf, final int start, final int count, final String s) {\n    if (s.length() != count) {\n        return false;\n    }\n    for (int i = 0; i < count; i++) {\n        if (charBuf[start + i] != s.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}