{
    "generation": "private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n    // Limit (no cache):\n    if (count > maxStringCacheLen)\n        return new String(charBuf, start, count);\n\n    // Calculate hash:\n    int hash = 0;\n    int offset = start;\n    for (int i = 0; i < count && offset < charBuf.length; i++) {\n        hash = 31 * hash + charBuf[offset++];\n    }\n\n    // Get from cache\n    final int index = hash & stringCache.length - 1;\n    String cached = stringCache[index];\n\n    if (cached == null) { // Miss, add\n        cached = new String(charBuf, start, count);\n        stringCache[index] = cached;\n    } else { // Hashcode hit, check equality\n        if (rangeEquals(charBuf, start, count, cached)) { // Hit\n            return cached;\n        } else { // Hashcode conflict\n            cached = new String(charBuf, start, count);\n            stringCache[index] = cached; // Update the cache, as recently used strings are more likely to show up again\n        }\n    }\n    return cached;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}