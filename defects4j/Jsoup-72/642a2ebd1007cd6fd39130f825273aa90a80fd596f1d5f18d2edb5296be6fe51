{
    "generation": "private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {\n    // Ensure stringCache is initialized\n    if (stringCache == null) {\n        throw new IllegalArgumentException(\"stringCache must be initialized\");\n    }\n\n    // limit (no cache):\n    if (count > maxStringCacheLen)\n        return new String(charBuf, start, count);\n\n    // calculate hash:\n    int hash = 0;\n    int offset = start;\n    for (int i = 0; i < count; i++) {\n        hash = 31 * hash + charBuf[offset++];\n    }\n\n    // get from cache\n    final int index = hash & (stringCache.length - 1);\n    String cached = stringCache[index];\n\n    if (cached == null || !rangeEquals(charBuf, start, count, cached)) { // miss, add\n        cached = new String(charBuf, start, count);\n        stringCache[index] = cached;\n    }\n    return cached;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}