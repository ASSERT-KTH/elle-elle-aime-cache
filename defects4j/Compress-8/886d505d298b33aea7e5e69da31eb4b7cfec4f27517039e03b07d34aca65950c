{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (buffer == null || length < 2) {\n        throw new IllegalArgumentException(\"Buffer must be at least 2 bytes long.\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n\n    boolean hasValidTrailer = false;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        // Check for trailing space or NUL to validate the trailer\n        if (i == end - 1 && (currentByte == (byte) ' ' || currentByte == 0)) {\n            hasValidTrailer = true;\n            continue;\n        }\n\n        // Stop processing at the first completely NULL buffer\n        if (currentByte == 0) {\n            break;\n        }\n\n        // Skip leading padding (spaces or zeros)\n        if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {\n            continue;\n        }\n\n        // Stop if an embedded space or NUL is found, which is invalid\n        if (currentByte == (byte) ' ' || currentByte == 0) {\n            throw new IllegalArgumentException(\n                    \"Invalid octal number - embedded space or NUL.\");\n        }\n\n        stillPadding = false;\n\n        // Check if byte is invalid (not an octal character)\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        // Calculate the result\n        result = (result << 3) + (currentByte - '0'); // Convert from ASCII\n    }\n\n    // Validate that there was a proper trailer\n    if (!hasValidTrailer) {\n        throw new IllegalArgumentException(\"Invalid octal number - no valid trailer.\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}