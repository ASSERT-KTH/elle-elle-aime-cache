{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"The length must be at least 2 bytes.\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n        int start = offset;\n        boolean hasTrailingSpaceOrNul = false;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            if (currentByte == 0 || currentByte == (byte) ' ') {\n                // Detect mandatory trailing space or NUL\n                hasTrailingSpaceOrNul = true;\n\n                // Further NULs or spaces are valid if they're trailing\n                if (!stillPadding) {\n                    while (++i < end) {\n                        if (buffer[i] != 0 && buffer[i] != (byte) ' ') {\n                            throw new IllegalArgumentException(\"Invalid embedded content after trailer.\");\n                        }\n                    }\n                    break;\n                }\n                continue;\n            }\n\n            stillPadding = false;\n\n            // Validate bytes are within the valid octal range\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        if (!hasTrailingSpaceOrNul) {\n            throw new IllegalArgumentException(\"Input must end with a space or NUL.\");\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}