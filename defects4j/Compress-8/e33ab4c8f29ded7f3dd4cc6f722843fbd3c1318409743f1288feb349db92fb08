{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n\n    // Ensuring minimum 2 bytes requirement\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Buffer needs to be at least 2 bytes long\");\n    }\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        if (stillPadding) {\n            // Skip leading spaces and zeros\n            if (currentByte == ' ' || currentByte == '0') {\n                continue;\n            }\n            // If we find a valid octal digit, we're no longer in the padding phase\n            stillPadding = false;\n        }\n\n        // Check if we've hit the end of the number\n        if (currentByte == ' ' || currentByte == '\\0') {\n            // If not all remaining bytes are spaces or nulls, throw an exception\n            for (int j = i + 1; j < end; j++) {\n                if (buffer[j] != ' ' && buffer[j] != 0) {\n                    throw new IllegalArgumentException(\"Trailing characters after number\");\n                }\n            }\n            break;\n        }\n\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}