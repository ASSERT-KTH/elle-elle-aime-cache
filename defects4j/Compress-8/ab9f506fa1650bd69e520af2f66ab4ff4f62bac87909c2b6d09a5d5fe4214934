{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2 bytes long\");\n        }\n\n        long    result = 0;\n        boolean stillPadding = true;\n        int     end = offset + length;\n        int     start = offset;\n\n        boolean hasTrailingSpaceOrNul = false;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte == 0 || currentByte == (byte) ' ') {\n                hasTrailingSpaceOrNul = true;\n                break; // Stop at trailing NUL or space\n            }\n\n            // Skip leading spaces\n            if (currentByte == (byte) ' ') {\n                if (stillPadding) {\n                    continue;\n                } else {\n                    throw new IllegalArgumentException(\n                            \"Invalid space within the octal number\");\n                }\n            }\n\n            if (stillPadding && currentByte == '0') { // Skip leading zero padding\n                continue;\n            }\n\n            stillPadding = false;\n\n            // Check invalid characters\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n\n            result = (result << 3) + (currentByte - '0'); // Convert from ASCII\n        }\n\n        if (stillPadding) { // All characters were padding\n            return 0L;\n        }\n\n        if (!hasTrailingSpaceOrNul) {\n            throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}