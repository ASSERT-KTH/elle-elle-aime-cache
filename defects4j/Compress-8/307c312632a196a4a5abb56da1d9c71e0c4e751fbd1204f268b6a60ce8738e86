{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes long.\");\n    }\n\n    int end = offset + length;\n\n    if (end > buffer.length) {\n        throw new IllegalArgumentException(\"Offset and length exceed buffer size.\");\n    }\n\n    // Check if the buffer is all NULs\n    boolean allNULs = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNULs = false;\n            break;\n        }\n    }\n\n    if (allNULs) {\n        return 0L;\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int start = offset;\n\n    boolean trailerFound = false;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            trailerFound = true;\n            break;\n        }\n\n        // Skip leading spaces\n        if (currentByte == (byte) ' ' || currentByte == '0') {\n            if (stillPadding) {\n                continue;\n            }\n            if (currentByte == (byte) ' ') {\n                break;\n            }\n        }\n\n        stillPadding = false;\n\n        // Validate octal characters\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // Convert from ASCII\n\n        // Check for illegal embedded space or NUL\n        if (i < end - 1) {\n            byte nextByte = buffer[i + 1];\n            if (nextByte == ' ' || nextByte == 0) {\n                trailerFound = true;\n            }\n        }\n    }\n\n    if (!trailerFound) {\n        throw new IllegalArgumentException(\"Parsed data must end with a space or NUL.\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}