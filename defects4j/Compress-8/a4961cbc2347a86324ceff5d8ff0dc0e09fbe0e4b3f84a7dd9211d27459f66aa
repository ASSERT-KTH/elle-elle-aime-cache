{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing, if length is less than 2, \n *                                  or if an invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Check if length is at least 2\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n    boolean foundValidDigit = false;\n\n    // Check if buffer contains all NULs\n    boolean allNULs = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNULs = false;\n            break;\n        }\n    }\n    if (allNULs) {\n        return 0L;\n    }\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        // Check for trailing space or NUL\n        if (currentByte == 0 || currentByte == ' ') {\n            if (foundValidDigit) {\n                // Check for additional trailing space or NUL\n                if (i + 1 < end && (buffer[i + 1] == 0 || buffer[i + 1] == ' ')) {\n                    i++; // Skip the additional trailing space or NUL\n                }\n                break;\n            } else if (currentByte == ' ') {\n                // If we encounter a space before any valid digit, it's invalid\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            continue;\n        }\n\n        // Skip leading spaces and zeros\n        if (currentByte == '0') {\n            if (stillPadding) {\n                continue;\n            }\n        } else if (currentByte == ' ') {\n            if (stillPadding) {\n                continue;\n            } else {\n                // Space after padding is invalid\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n        }\n\n        stillPadding = false;\n\n        // Check for valid octal digit\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        foundValidDigit = true;\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // Check for missing trailing space or NUL\n    if (!foundValidDigit) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, buffer[end - 1]));\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}