{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        // Check that length is at least 2 bytes\n        if (length < 2) {\n            throw new IllegalArgumentException(\"The length must be at least 2 bytes\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n        int start = offset;\n        boolean hasTrailingSpaceOrNul = false;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            // Check for trailing NUL or space\n            if (currentByte == 0 || currentByte == (byte) ' ') {\n                hasTrailingSpaceOrNul = true;\n                break;\n            }\n\n            // Skip leading spaces\n            if (currentByte == (byte) ' ' || currentByte == '0') {\n                if (stillPadding) {\n                    continue;\n                }\n            }\n\n            stillPadding = false;\n\n            // Check for valid octal digit\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n\n            result = (result << 3) + (currentByte - '0'); // Convert from ASCII\n        }\n\n        // Ensure there is a trailing space or NUL\n        if (!hasTrailingSpaceOrNul) {\n            throw new IllegalArgumentException(\"Trailing space or NUL is missing\");\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}