{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if(length < 2){\n        throw new IllegalArgumentException(\"Input buffer should be at least 2 bytes long\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n\n    for (int i = offset; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == 0) {\n            break;\n        }\n\n        if (currentByte == (byte) ' ' || currentByte == '0') {\n            if (stillPadding) {\n                continue;\n            }\n        }\n\n        stillPadding = false;\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                \"Invalid octal digit \\\"\" + (char) currentByte + \"\\\" at offset \" + (i - offset));\n        }\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // Must have trailing NUL or space\n    if (i < end || (buffer[i] != 0 && buffer[i] != ' ')) {\n        throw new IllegalArgumentException(\"Missing trailing NUL or space\");\n    }\n\n    // May have additional NUL or space\n    if (i + 1 < end && (buffer[i + 1] != 0 && buffer[i + 1] != ' ')) {\n        throw new IllegalArgumentException(\"Extra characters after trailing NUL or space\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}