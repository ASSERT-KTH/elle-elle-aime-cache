{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Buffer too short, must be at least 2 bytes long.\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n        int start = offset;\n        boolean hasTrailingChar = false;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            // Check for trailing space or NUL\n            if (currentByte == (byte) ' ' || currentByte == 0) {\n                hasTrailingChar = true;\n\n                if (stillPadding) {\n                    continue; // Skip leading spaces or NULs\n                }\n                break; // Stop parsing once we encounter trailing space or NUL\n            }\n\n            // Ensure all characters after the Numeric octal values are valid\n            if (stillPadding && currentByte == '0') {\n                continue; // Skip leading padding zeroes\n            }\n\n            stillPadding = false;\n\n            // Validate that the input is a valid octal digit (0-7 only)\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n\n            result = (result << 3) + (currentByte - '0'); // Convert to numeric octal representation\n        }\n\n        // If all NULs and no valid octal digits or no trailing space/NUL, throw exception\n        if (stillPadding || !hasTrailingChar) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, (byte) 0));\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}