{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Buffer length must be at least 2 bytes.\");\n    }\n\n    long result = 0;\n    boolean parsingNumber = false;\n    int end = offset + length;\n\n    for (int i = offset; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        if (currentByte == 0) {\n            if (!parsingNumber || (i == end - 1)) {\n                break;\n            } else {\n                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n        }\n\n        if (currentByte == ' ') {\n            if (!parsingNumber || (i == end - 1)) {\n                break;\n            } else {\n                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n        }\n\n        if (currentByte >= '0' && currentByte <= '7') {\n            parsingNumber = true;\n            result = (result << 3) + (currentByte - '0');\n        } else {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n    }\n\n    // Check if the last byte is a space or NUL\n    if (end > offset) {\n        byte lastByte = buffer[end - 1];\n        if (lastByte != ' ' && lastByte != 0) {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, lastByte));\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}