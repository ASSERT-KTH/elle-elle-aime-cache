{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Buffer length must be at least 2 bytes.\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n\n    for (int i = offset; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == 0) {\n            break;\n        }\n\n        // Skip leading spaces\n        if (currentByte == (byte) ' ') {\n            if (stillPadding) {\n                continue;\n            } else {\n                break; // Stop parsing if space appears after digits\n            }\n        }\n\n        // Check if the byte is a valid octal digit\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i - offset, currentByte));\n        }\n\n        stillPadding = false;\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // Check if there was at least one valid digit\n    if (stillPadding) {\n        return 0L; // All NULs or only spaces\n    }\n\n    // Ensure there is a trailing space or NUL\n    if (end - offset > 0) {\n        byte lastByte = buffer[end - 1];\n        if (lastByte != 0 && lastByte != (byte) ' ') {\n            throw new IllegalArgumentException(\n                    \"Missing trailing space or NUL at position \" + (end - offset));\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}