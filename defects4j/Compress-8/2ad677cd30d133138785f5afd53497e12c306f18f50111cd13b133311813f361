{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"The length must be at least 2 bytes.\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n\n        for (int i = offset; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            if (currentByte == 0) {\n                // Trailing NUL found\n                if (!stillPadding) {\n                    return result;\n                }\n                continue;\n            }\n\n            // Skip leading spaces\n            if (currentByte == (byte) ' ') {\n                if (stillPadding) {\n                    continue;\n                } else {\n                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, offset, currentByte));\n                }\n            }\n\n            // Must have trailing NUL or space\n            if (i == end - 1 && (currentByte == (byte) ' ' || currentByte == 0)) {\n                return result;\n            }\n\n            stillPadding = false;\n\n            // Check for valid octal digits\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, offset, currentByte));\n            }\n\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        // If we reach the end without finding a trailing NUL or space\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, offset, buffer[end - 1]));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}