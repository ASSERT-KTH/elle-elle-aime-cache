{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2 bytes.\");\n        }\n\n        long    result = 0;\n        boolean stillPadding = true;\n        int     end = offset + length;\n\n        for (int i = offset; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            // Check for trailing NUL or space\n            if (currentByte == 0 || currentByte == (byte) ' ') {\n                for (int j = i + 1; j < end; j++) {\n                    if (buffer[j] != 0 && buffer[j] != (byte) ' ') {\n                        throw new IllegalArgumentException(\"Invalid bytes found after trailing space or NUL.\");\n                    }\n                }\n                break;\n            }\n\n            // Skip leading spaces\n            if (currentByte == (byte) ' ') {\n                if (stillPadding) {\n                    continue;\n                }\n            }\n\n            stillPadding = false;\n\n            // Validate octal range\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n\n            // Convert ASCII octal to long\n            result = (result << 3) + (currentByte - '0');\n        }\n\n        // If the entire buffer is NUL or space, return 0\n        if (stillPadding) {\n            for (int i = offset; i < end; i++) {\n                if (buffer[i] != 0 && buffer[i] != (byte) ' ') {\n                    throw new IllegalArgumentException(\"Buffer is not all NULs or spaces.\");\n                }\n            }\n            return 0L;\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}