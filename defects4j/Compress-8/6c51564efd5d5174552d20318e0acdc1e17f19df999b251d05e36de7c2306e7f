{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the buffer has less than 2 bytes, if it contains non-octal digits, or if it does not meet trailing SPACE or NUL requirements.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"The input buffer must be at least 2 bytes long.\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        boolean foundNonZero = false; // New variable to track if non-zero character is found\n        int end = offset + length;\n        int start = offset;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            // Issue with trailing spaces only when there is a non-zero character\n            if (foundNonZero && (currentByte == 0 || currentByte == (byte)' ')) {\n                break;\n            }\n\n            // Skip leading spaces\n            if (currentByte == (byte)' ' || currentByte == '0') {\n                if (stillPadding) {\n                    if (currentByte != (byte)' ') {\n                        foundNonZero = true;\n                    }\n                    continue;\n                }\n            }\n\n            stillPadding = false;\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}