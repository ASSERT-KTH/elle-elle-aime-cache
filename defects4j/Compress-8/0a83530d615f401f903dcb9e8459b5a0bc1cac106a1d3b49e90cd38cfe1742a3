{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing, if a invalid byte is detected,\n *                                  or if the input parameters are invalid.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Check input parameters\n    if (buffer == null) {\n        throw new IllegalArgumentException(\"Buffer is null\");\n    }\n    if (offset < 0 || length < 2 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Invalid offset or length\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n\n    // Check if the buffer contains all NULs\n    boolean allNuls = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == 0 || currentByte == ' ') {\n            // Check for valid end of number\n            if (!stillPadding) {\n                // Skip trailing spaces or NULs\n                while (i + 1 < end && (buffer[i + 1] == 0 || buffer[i + 1] == ' ')) {\n                    i++;\n                }\n                // Ensure we've reached the end of the specified length\n                if (i == end - 1) {\n                    return result;\n                } else {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n            }\n            // Skip leading spaces\n            if (currentByte == ' ') {\n                continue;\n            }\n            // If we encounter a NUL while still padding, we're done\n            if (currentByte == 0) {\n                break;\n            }\n        }\n\n        stillPadding = false;\n\n        // Check for valid octal digit\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // If we've reached this point, we didn't find a valid end to the number\n    throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, start, buffer[end - 1]));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}