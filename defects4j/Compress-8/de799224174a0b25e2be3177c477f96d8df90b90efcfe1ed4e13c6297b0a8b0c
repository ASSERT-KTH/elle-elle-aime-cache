{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"length must be at least 2 bytes\");\n        }\n\n        long    result = 0;\n        boolean stillPadding = true;\n        int     end = offset + length;\n        int     start = offset;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            // Check for embedded NUL\n            if (currentByte == 0) {\n                if (i == start) {\n                    continue; // Leading NULs are allowed\n                }\n                break;\n            }\n\n            // Skip leading spaces\n            if (currentByte == (byte) ' ') {\n                if (stillPadding) {\n                    continue;\n                }\n                if (currentByte == (byte) ' ') {\n                    break;\n                }\n            }\n\n            // Must have trailing NUL or space\n            // May have additional NUL or space\n\n            stillPadding = false;\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        // Ensure the buffer contains a trailing space or NUL\n        if (end > start && buffer[end - 1] != 0 && buffer[end - 1] != (byte) ' ') {\n            throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n        }\n\n        return result;\n    }\n\n    private static String exceptionMessage(final byte[] buffer, final int offset, final int length, final int start, final byte currentByte) {\n        return String.format(\"Invalid byte '%s' at position %d in buffer from offset %d with length %d\", currentByte, start, offset, length);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}