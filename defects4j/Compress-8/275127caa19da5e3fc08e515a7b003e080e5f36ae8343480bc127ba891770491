{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing, \n *                                  if a invalid byte is detected, or \n *                                  if the buffer length is less than 2.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Buffer length must be at least 2 bytes\");\n    }\n\n    long    result = 0;\n    boolean stillPadding = true;\n    int     end = offset + length;\n    int     start = offset;\n    boolean foundTrailingSpaceOrNUL = false;\n\n    for (int i = start; i < end; i++){\n        final byte currentByte = buffer[i];\n\n        // Check for trailing space or NUL\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            foundTrailingSpaceOrNUL = true;\n            if (i == start) { // all NULs or leading space\n                if (i == end - 1 || buffer[i + 1] == 0 || buffer[i + 1] == (byte) ' ') {\n                    return 0L; // all NULs or single trailing space\n                } else {\n                    throw new IllegalArgumentException(\"Invalid input - not all NULs\");\n                }\n            }\n            if (i < end - 1 && buffer[i + 1]!= 0 && buffer[i + 1]!= (byte) ' ') {\n                throw new IllegalArgumentException(\"Invalid input - extra characters after trailer\");\n            }\n            break;\n        }\n\n        // Skip leading spaces\n        if (currentByte == (byte) ' ') {\n            if (stillPadding) {\n                continue;\n            } else {\n                throw new IllegalArgumentException(\"Invalid input - embedded space\");\n            }\n        }\n\n        stillPadding = false;\n\n        // Check for valid octal digit\n        // CheckStyle:MagicNumber OFF\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        // CheckStyle:MagicNumber ON\n    }\n\n    if (!foundTrailingSpaceOrNUL) {\n        throw new IllegalArgumentException(\"Invalid input - no trailing space or NUL\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}