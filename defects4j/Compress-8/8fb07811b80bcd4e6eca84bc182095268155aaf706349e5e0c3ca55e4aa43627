{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Buffer length must be at least 2 bytes.\");\n    }\n\n    long result = 0;\n    boolean parsingDigits = false;\n    int end = offset + length;\n\n    for (int i = offset; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        if (currentByte == 0) {\n            if (parsingDigits) {\n                break;\n            } else {\n                continue;\n            }\n        }\n\n        if (currentByte == ' ') {\n            if (parsingDigits) {\n                break;\n            } else {\n                continue;\n            }\n        }\n\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i - offset, currentByte));\n        }\n\n        parsingDigits = true;\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    // Ensure there is a trailing space or NUL after digits\n    if (parsingDigits) {\n        final byte lastByte = buffer[end - 1];\n        if (lastByte != ' ' && lastByte != 0) {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, length - 1, lastByte));\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}