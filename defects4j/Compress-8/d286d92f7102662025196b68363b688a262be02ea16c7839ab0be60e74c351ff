{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Buffer length must be at least 2 bytes.\");\n    }\n\n    long result = 0;\n    boolean parsingDigits = false;\n    int end = offset + length;\n\n    for (int i = offset; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        if (currentByte == 0) {\n            // If we've started parsing digits and encounter a NUL, it's invalid\n            if (parsingDigits) {\n                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n            continue; // Leading NULs are okay, but they don't start digit parsing\n        }\n\n        if (currentByte == ' ') {\n            if (parsingDigits) {\n                // Check the rest of the buffer for spaces or NULs\n                for (int j = i; j < end; j++) {\n                    if (buffer[j] != ' ' && buffer[j] != 0) {\n                        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, j, buffer[j]));\n                    }\n                }\n                return result;\n            } else {\n                continue; // Leading spaces are ignored\n            }\n        }\n\n        // At this point, currentByte should be an octal digit\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n\n        parsingDigits = true;\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    // If no digits were parsed and the buffer isn't all NULs, it's invalid\n    if (!parsingDigits) {\n        for (int i = offset; i < end; i++) {\n            if (buffer[i] != 0 && buffer[i] != ' ') {\n                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, buffer[i]));\n            }\n        }\n        return 0L; // All NULs or spaces\n    }\n\n    // Ensure the last byte is a space or NUL\n    int lastByteIndex = end - 1;\n    if (buffer[lastByteIndex] != ' ' && buffer[lastByteIndex] != 0) {\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, lastByteIndex, buffer[lastByteIndex]));\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}