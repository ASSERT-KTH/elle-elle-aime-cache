{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        boolean stillPadding = true;\n        int     end = offset + length;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"At least 2 bytes needed\");\n        }\n\n        int i = offset;\n        for (; i < end; i++){\n            final byte currentByte = buffer[i];\n            if (currentByte == 0) {\n                // CheckStyle:MagicNumber OFF\n                // we are done, we need to consume at least one digit\n                if (end - i > length - 2) {\n                // CheckStyle:MagicNumber ON\n                    break;\n                }\n            }\n\n        // Skip leading spaces\n            if (currentByte == (byte) ' ' || currentByte == '0') {\n                if (!stillPadding) {\n                    // embedded space/NUL?\n                    if (i < end - 1 && (buffer[i + 1] == ' ' || buffer[i + 1] == 0)) {\n                        i++; // advance to the last space/NUL if any\n                    }\n                    break;\n                }\n                if (currentByte == (byte) ' ') {\n                    stillPadding = false;\n                }\n                continue;\n            }\n\n            stillPadding = false;\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        // Check for trailing space/NUL\n        if (i == end || (i != end - 1 && buffer[i] != ' ' && buffer[i] != 0)) {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, buffer[i]));\n        }\n\n        return result;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}