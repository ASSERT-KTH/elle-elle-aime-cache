{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the length is less than 2 bytes,\n * if the trailing space/NUL is missing or if a invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n\n    for (int i = start; i < end; i++){\n        final byte currentByte = buffer[i];\n\n        // Skip leading spaces\n        if (currentByte == (byte) ' ' || currentByte == '0') {\n            if (stillPadding) {\n                continue;\n            }\n            if (currentByte == (byte) ' ') {\n                break;\n            }\n        }\n\n        // Check if the byte is a valid octal digit\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        // Convert from ASCII and calculate the result\n        result = (result << 3) + (currentByte - '0');\n        stillPadding = false;\n    }\n\n    // Must have trailing NUL or space\n    if (i < end || (buffer[i] != ' ' && buffer[i] != 0)) {\n        throw new IllegalArgumentException(\"Expected trailing space or NUL\");\n    }\n\n    // If an additional trailing NUL or space, check and skip\n    if (i + 1 < end && (buffer[i + 1] == ' ' || buffer[i + 1] == 0)) {\n        i++;\n    }\n\n    // If the buffer contains less characters than expected, throw an exception\n    if (i < end - 1) {\n        throw new IllegalArgumentException(\"Unexpected characters in the buffer\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}