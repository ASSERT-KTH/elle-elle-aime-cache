{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"The buffer must be at least 2 bytes long\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n\n        for (int i = offset; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            // Handle all NULs case\n            if (currentByte == 0) {\n                boolean allNUL = true;\n                for (int j = i; j < end; j++) {\n                    if (buffer[j] != 0) {\n                        allNUL = false;\n                        break;\n                    }\n                }\n                if (allNUL) {\n                    return 0L;\n                }\n                throw new IllegalArgumentException(\"Invalid input: not all NULs after encountering a NUL byte\");\n            }\n\n            // Skip leading spaces\n            if (currentByte == (byte) ' ') {\n                if (stillPadding) {\n                    continue;\n                }\n                throw new IllegalArgumentException(\"Invalid input: embedded or trailing space detected\");\n            }\n\n            stillPadding = false;\n\n            // Must have a valid octal digit\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        // Ensure trailing space or NUL\n        final byte lastByte = buffer[end - 1];\n        if (lastByte != (byte) ' ' && lastByte != 0) {\n            throw new IllegalArgumentException(\"The buffer must end with a space or NUL\");\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}