{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Buffer must be at least 2 bytes long\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n        \n        // Check for trailing space or NUL\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            // Ensure all remaining bytes are NUL or space\n            for (int j = i + 1; j < end; j++) {\n                if (buffer[j] != 0 && buffer[j] != (byte) ' ') {\n                    throw new IllegalArgumentException(\"Invalid data after trailing space or NUL\");\n                }\n            }\n            break;\n        }\n\n        // Skip leading spaces\n        if (stillPadding && (currentByte == (byte) ' ' || currentByte == (byte) '0')) {\n            continue;\n        }\n\n        stillPadding = false;\n\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        result = (result << 3) + (currentByte - '0'); // Convert from ASCII\n    }\n\n    // If the entire input is all NULs, return 0\n    if (stillPadding) {\n        for (int i = start; i < end; i++) {\n            if (buffer[i] != 0) {\n                throw new IllegalArgumentException(\"Buffer not entirely NUL when parsing 0\");\n            }\n        }\n        return 0L;\n    }\n\n    if (result > 0 && (buffer[end - 1] != 0) && (buffer[end - 1] != ' ')) {\n        throw new IllegalArgumentException(\"Buffer must end with either NUL or space\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}