{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n\n    long result = 0;\n    boolean parsingDigits = false;\n    int end = offset + length;\n\n    for (int i = offset; i < end; i++) {\n        byte currentByte = buffer[i];\n\n        if (currentByte == 0 || currentByte == ' ') {\n            if (!parsingDigits) {\n                continue; // Skip leading spaces\n            } else {\n                // Check for trailing space or NUL\n                if (i == end - 1 || buffer[i + 1] == 0 || buffer[i + 1] == ' ') {\n                    return result;\n                } else {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, i, currentByte));\n                }\n            }\n        }\n\n        if (currentByte >= '0' && currentByte <= '7') {\n            parsingDigits = true;\n            result = (result << 3) + (currentByte - '0');\n        } else {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n    }\n\n    if (!parsingDigits) {\n        return 0L; // All NULs or spaces\n    }\n\n    throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}