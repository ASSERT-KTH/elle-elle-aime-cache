{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing, \n *                                  if a invalid byte is detected, or \n *                                  if the buffer length is less than 2.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Buffer length must be at least 2 bytes long\");\n    }\n\n    long    result = 0;\n    boolean stillPadding = true;\n    int     end = offset + length;\n    int     start = offset;\n    boolean seenNonPadding = false; // track if we've seen non-padding bytes\n\n    for (int i = start; i < end; i++){\n        final byte currentByte = buffer[i];\n        \n        // check for trailing space/NUL\n        if (i == end - 1 && currentByte!= (byte) ' ' && currentByte!= 0) {\n            throw new IllegalArgumentException(\"Missing trailing space/NUL\");\n        }\n\n        if (currentByte == 0) {\n            if (seenNonPadding) { // if we've seen non-padding, break\n                break;\n            } else if (i == end - 1) { // if all NULs, return 0\n                return 0;\n            }\n            continue;\n        }\n\n        // Skip leading spaces\n        if (currentByte == (byte) ' ') {\n            if (stillPadding) {\n                continue;\n            } else { // embedded space, throw exception\n                throw new IllegalArgumentException(\"Embedded space in octal string\");\n            }\n        }\n\n        seenNonPadding = true; // mark that we've seen non-padding\n\n        // Check for valid octal digits\n        // CheckStyle:MagicNumber OFF\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        // CheckStyle:MagicNumber ON\n\n        stillPadding = false;\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}