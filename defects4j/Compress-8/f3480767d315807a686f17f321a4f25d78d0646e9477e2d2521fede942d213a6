{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == 0) {\n            break;\n        }\n\n        // Skip leading spaces\n        if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {\n            continue;\n        }\n\n        // Check for trailing space or NUL\n        if (currentByte == (byte) ' ' || currentByte == 0) {\n            if (i < end - 1 && (buffer[i + 1] != (byte) ' ' && buffer[i + 1] != 0)) {\n                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            break;\n        }\n\n        stillPadding = false;\n\n        // Check for valid octal digit\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}