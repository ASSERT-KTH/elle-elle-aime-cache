{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing, if an invalid byte is detected, or if the length is less than 2 bytes.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n\n    // Check if buffer contains all NULs\n    boolean allNuls = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        // Check for NUL terminator\n        if (currentByte == 0) {\n            // Check for trailing NUL or space\n            if (i == offset + length - 1 || (i < end - 1 && (buffer[i + 1] == 0 || buffer[i + 1] == ' '))) {\n                break;\n            }\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n\n        // Skip leading spaces and zeros\n        if (currentByte == ' ' || currentByte == '0') {\n            if (stillPadding) {\n                continue;\n            }\n            if (currentByte == ' ') {\n                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n        }\n\n        stillPadding = false;\n\n        // Check for valid octal digit\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // Check for trailing space\n    if (buffer[end - 1] != ' ') {\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}