{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n    boolean hasDigits = false;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        if (currentByte == 0) {\n            break;\n        }\n\n        // Skip leading spaces and zeros\n        if (currentByte == (byte) ' ' || currentByte == '0') {\n            if (stillPadding) {\n                continue;\n            }\n            if (currentByte == (byte) ' ') {\n                break;\n            }\n        }\n\n        stillPadding = false;\n\n        // Check for invalid characters\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        hasDigits = true;\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // Check if the input was valid\n    if (!hasDigits && !allNUL(buffer, offset, length)) {\n        throw new IllegalArgumentException(\"Invalid octal string\");\n    }\n\n    return result;\n}\n\nprivate static boolean allNUL(final byte[] buffer, final int offset, final int length) {\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}