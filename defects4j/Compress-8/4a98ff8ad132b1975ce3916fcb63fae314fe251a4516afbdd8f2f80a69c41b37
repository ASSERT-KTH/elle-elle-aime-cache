{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n\n    long result = 0;\n    boolean parsedDigits = false;\n    boolean stillPadding = true;\n    int end = offset + length;\n    byte lastByte = 0;\n\n    for (int i = offset; i < end; i++) {\n        byte currentByte = buffer[i];\n        if (stillPadding) {\n            if (currentByte == (byte) ' ' || currentByte == 0) {\n                continue;\n            } else {\n                stillPadding = false;\n            }\n        }\n        if (!stillPadding) {\n            if (currentByte >= '0' && currentByte <= '7') {\n                result = result * 8 + (currentByte - '0');\n                parsedDigits = true;\n                lastByte = currentByte;\n            } else if (currentByte == (byte) ' ' || currentByte == 0) {\n                if (parsedDigits) {\n                    break;\n                } else {\n                    // All bytes are space or NUL\n                    break;\n                }\n            } else {\n                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n        }\n    }\n\n    // If digits were parsed, ensure the last byte is space or NUL\n    if (parsedDigits && (lastByte != (byte) ' ' && lastByte != 0)) {\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end, (byte) 0));\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}