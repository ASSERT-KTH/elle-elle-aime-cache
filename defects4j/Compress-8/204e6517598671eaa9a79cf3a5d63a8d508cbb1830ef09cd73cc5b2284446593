{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Input buffer must be at least 2 bytes long.\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n\n    boolean foundTrailer = false;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            foundTrailer = true;\n\n            // Check if trailing space or NUL is followed only by space or NUL\n            for (int j = i + 1; j < end; j++) {\n                if (buffer[j] != 0 && buffer[j] != (byte) ' ') {\n                    throw new IllegalArgumentException(\"Invalid trailing characters after space or NUL.\");\n                }\n            }\n            break;\n        }\n\n        // Skip leading spaces\n        if (stillPadding && currentByte == (byte) ' ') {\n            continue;\n        }\n\n        stillPadding = false;\n\n        // Check if the character is valid octal\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte)\n            );\n        }\n\n        result = (result << 3) + (currentByte - '0'); // Convert from ASCII to number\n    }\n\n    if (!foundTrailer) {\n        throw new IllegalArgumentException(\"Input buffer missing required trailing space or NUL.\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}