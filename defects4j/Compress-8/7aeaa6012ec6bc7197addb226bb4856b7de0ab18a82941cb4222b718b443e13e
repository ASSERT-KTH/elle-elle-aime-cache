{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Buffer should be at least 2 bytes long\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n    boolean allNull = true;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        if (currentByte == 0) {\n            if (stillPadding || allNull) {\n                continue;\n            } else {\n                break;\n            }\n        }\n\n        if (currentByte == (byte) ' ' || currentByte == '0') {\n            if (stillPadding) {\n                continue;\n            }\n            if (currentByte == (byte) ' ' && result != 0) {\n                break;\n            }\n        } else if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        } else {\n            stillPadding = false;\n            allNull = false;\n        }\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return allNull ? 0L : result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}