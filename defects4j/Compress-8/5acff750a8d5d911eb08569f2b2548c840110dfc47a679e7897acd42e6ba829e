{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"length must be at least 2 bytes\");\n    }\n\n    int start = offset;\n    // Skip leading spaces\n    while (start < offset + length && buffer[start] == ' ') {\n        start++;\n    }\n\n    // Check if all remaining bytes are NULs\n    boolean allNULs = true;\n    for (int i = start; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            allNULs = false;\n            break;\n        }\n    }\n    if (allNULs) {\n        return 0L;\n    }\n\n    long result = 0;\n    boolean parsingDigits = false;\n    for (int i = start; i < offset + length; i++) {\n        byte currentByte = buffer[i];\n        if (currentByte == 0) {\n            // NUL byte\n            if (parsingDigits) {\n                // Check if it's trailing NUL\n                if (i == start) {\n                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n                }\n                // Ensure it's the trailing delimiter\n                if (i == offset + length - 1) {\n                    return result;\n                } else if (buffer[i + 1] == 0 || buffer[i + 1] == ' ') {\n                    return result;\n                } else {\n                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n                }\n            } else {\n                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n        } else if (currentByte == ' ') {\n            // Space character\n            if (parsingDigits) {\n                // Check if it's trailing space\n                if (i == start) {\n                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n                }\n                // Ensure it's the trailing delimiter\n                if (i == offset + length - 1) {\n                    return result;\n                } else if (buffer[i + 1] == 0 || buffer[i + 1] == ' ') {\n                    return result;\n                } else {\n                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n                }\n            } else {\n                // Leading space before digits\n                continue;\n            }\n        } else if (currentByte >= '0' && currentByte <= '7') {\n            // Octal digit\n            parsingDigits = true;\n            result = (result << 3) + (currentByte - '0');\n        } else {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n    }\n\n    // If we reach here, check if the last byte was a trailing space or NUL\n    if (parsingDigits && (buffer[offset + length - 1] == 0 || buffer[offset + length - 1] == ' ')) {\n        return result;\n    } else {\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, offset + length - 1, buffer[offset + length - 1]));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}