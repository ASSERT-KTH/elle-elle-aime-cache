{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (buffer == null || length < 2) {\n        throw new IllegalArgumentException(\"Buffer must be at least 2 bytes long\");\n    }\n\n    int end = offset + length;\n    if (end > buffer.length) {\n        throw new IllegalArgumentException(\"Length exceeds buffer size\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    boolean hasTrailer = false;\n\n    for (int i = offset; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        // Trailing space or NUL\n        if (currentByte == (byte) ' ' || currentByte == 0) {\n            hasTrailer = true;\n            break;\n        }\n\n        // Skip leading spaces or zeros\n        if (stillPadding) {\n            if (currentByte == (byte) ' ' || currentByte == '0') {\n                continue;\n            }\n            stillPadding = false;\n        }\n\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n\n        result = (result << 3) + (currentByte - '0'); // Convert from ASCII\n    }\n\n    // Ensure trailing space or NUL exists\n    if (!hasTrailer) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n    }\n\n    // Ensure valid octal number or valid padding-only case\n    if (stillPadding && result == 0) {\n        for (int i = offset; i < end; i++) {\n            if (buffer[i] != 0) {\n                throw new IllegalArgumentException(\"Invalid buffer, expected all NULs\");\n            }\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}