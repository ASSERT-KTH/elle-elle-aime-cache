{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (buffer == null || length < 2) {\n        throw new IllegalArgumentException(\"Buffer must be at least 2 bytes long\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    boolean hasValidEnding = false;\n    int end = offset + length;\n    int start = offset;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            hasValidEnding = true;\n            break;\n        }\n\n        // Skip leading padding\n        if (stillPadding && (currentByte == (byte) ' ' || currentByte == (byte) '0')) {\n            continue;\n        }\n\n        // If padding ends, but an invalid char is found, throw an exception\n        stillPadding = false;\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        result = (result << 3) + (currentByte - '0'); // Convert from ASCII\n    }\n\n    if (!hasValidEnding) {\n        throw new IllegalArgumentException(\"No valid trailing NUL or space found\");\n    }\n\n    // Ensure buffer contains only NULs if result is 0\n    if (result == 0) {\n        for (int i = start; i < end; i++) {\n            if (buffer[i] != 0) {\n                throw new IllegalArgumentException(\"Buffer must contain all NULs if result is 0\");\n            }\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}