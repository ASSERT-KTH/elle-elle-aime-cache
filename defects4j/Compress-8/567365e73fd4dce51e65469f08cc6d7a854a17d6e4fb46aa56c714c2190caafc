{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        boolean stillPadding = true;\n        int     end = offset + length;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" < 2\");\n        }\n\n        int i = offset;\n        // Skip leading spaces and zeros\n        for (; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte == (byte) ' ' || currentByte == '0') {\n                continue;\n            }\n            if (currentByte == 0 && i + 1 == end) {\n                // buffer has trailing NUL\n                break;\n            }\n            if (currentByte == 0) {\n                // Embedded NUL\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n            stillPadding = false;\n            break;\n        }\n\n        // Must have at least one digit\n        if (stillPadding) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, buffer[offset]));\n        }\n\n        for (; i < end; i++) {\n            final byte currentByte = buffer[i];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n            // CheckStyle:MagicNumber ON\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        // Check trailing space/NUL\n        if (i < end + 2\n            && (buffer[i - 1] != ' ' && buffer[i - 1] != 0)) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i - 1, buffer[i - 1]));\n        }\n        return result;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}