{
    "generation": "    /**\n     * For this distribution, X, this method returns P(X < <code>x</code>).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF evaluated at <code>x</code>. \n     * @throws MathException if the algorithm fails to converge; unless\n     * x is more than 20 standard deviations from the mean, in which case the\n     * convergence exception is caught and 0 or 1 is returned.\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        try {\n            return 0.5 * (1.0 + Erf.erf((x - mean) /\n                    (standardDeviation * Math.sqrt(2.0))));\n        } catch (Exception e) {\n            // Handle extreme cases explicitly to avoid convergence issues.\n            double zScore = (x - mean) / standardDeviation;\n            if (zScore < -20) {\n                return 0.0; // Extreme lower tail\n            } else if (zScore > 20) {\n                return 1.0; // Extreme upper tail\n            } else {\n                throw new MathException(\"Unable to evaluate cumulative probability\", e);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}