{
    "generation": "/**\n * For this distribution, X, this method returns P(X < code>x/code>).\n *\n * @param x the value at which the CDF is evaluated.\n * @return CDF evaluated at code>x/code>.\n * @throws MathException if the algorithm fails to converge; unless x is more\n *                       than 20 standard deviations from the mean, in which case\n *                       the convergence exception is caught and 0 or 1 is returned.\n */\npublic double cumulativeProbability(double x) throws MathException {\n    double threshold = 20.0 * standardDeviation;\n    double deviation = x - mean;\n\n    if (deviation < -threshold) {\n        return 0.0;\n    } else if (deviation > threshold) {\n        return 1.0;\n    } else {\n        try {\n            return 0.5 * (1.0 + Erf.erf(deviation / (standardDeviation * Math.sqrt(2.0))));\n        } catch (MathException e) {\n            // If Erf throws an exception, return 0 or 1 based on the deviation\n            if (deviation < 0) {\n                return 0.0;\n            } else {\n                return 1.0;\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}