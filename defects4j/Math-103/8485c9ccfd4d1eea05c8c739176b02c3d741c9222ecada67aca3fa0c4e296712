{
    "generation": "/**\n * For this distribution, X, this method returns P(X < <code>x</code>).\n * @param x the value at which the CDF is evaluated.\n * @return CDF evaluated at <code>x</code>. \n * @throws MathException if the algorithm fails to converge; unless\n * x is more than 20 standard deviations from the mean, in which case the\n * convergence exception is caught and 0 or 1 is returned.\n */\npublic double cumulativeProbability(double x) throws MathException {\n    try {\n        // Calculate the number of standard deviations from the mean\n        double z = (x - mean) / standardDeviation;\n        \n        // If z is more than 20 standard deviations from the mean, return 0 or 1\n        if (z < -20.0) {\n            return 0.0;\n        } else if (z > 20.0) {\n            return 1.0;\n        }\n        \n        // Otherwise, calculate the CDF using the error function\n        return 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));\n    } catch (MathException e) {\n        // If the algorithm fails to converge and z is more than 20 standard deviations from the mean,\n        // return 0 or 1 instead of throwing the exception\n        double z = (x - mean) / standardDeviation;\n        if (z < -20.0) {\n            return 0.0;\n        } else if (z > 20.0) {\n            return 1.0;\n        } else {\n            // If z is within 20 standard deviations, re-throw the exception\n            throw e;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}