{
    "generation": "/**\n * For this distribution, X, this method returns P(X &lt; <code>x</code>).\n * @param x the value at which the CDF is evaluated.\n * @return CDF evaluated at <code>x</code>. \n * @throws MathException if the algorithm fails to converge; unless\n * x is more than 20 standard deviations from the mean, in which case the\n * convergence exception is caught and 0 or 1 is returned.\n */\npublic double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / standardDeviation;\n    if (Math.abs(dev) > 20) { // top-coding for extreme values\n        return dev < 0? 0.0 : 1.0;\n    } else {\n        try {\n            return 0.5 * (1.0 + Erf.erf(dev / Math.sqrt(2.0)));\n        } catch (MaxIterationsExceededException e) {\n            // if convergence exception occurs within 20 std devs, rethrow\n            throw new MathException(e);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}