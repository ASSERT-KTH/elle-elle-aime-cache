{
    "generation": "/**\n * Attempts to fold GETELEM with a constant numeric index into an array literal.\n * \n * @param n     Node representing the GETELEM operation\n * @param left  Node representing the array literal\n * @param right Node representing the index\n * @return the folded Node if successful, otherwise the original Node\n */\nprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    \n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n\n    if (right.getType()!= Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex!= index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    // Fix: Check for assignment target before indexing check\n    if (n.getParent() instanceof Node.AssignOp \n        && n.getParent().getFirstChild() == n) {\n      return n; // Can't fold if used as assignment target\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem!= null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}