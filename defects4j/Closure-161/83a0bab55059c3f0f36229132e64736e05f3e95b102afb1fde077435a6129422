{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If GETPROP/GETELEM is used as assignment target, the array literal is actually a temporary\n    // and we cannot fold it here: \"[][0] += 1\"\n    if (right.getType() != Token.NUMBER || n.getParent().getType() == Token.ASSIGN) {\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    // Create a new EMPTY node if the index is out of bounds\n    if (elem == null) {\n      elem = NodeUtil.newUndefinedNode(right);\n      left.addChildToBack(NodeUtil.newUndefinedNode(right).srcref(right));\n    } else if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}