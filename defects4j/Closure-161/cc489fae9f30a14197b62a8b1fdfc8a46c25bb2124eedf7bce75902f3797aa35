{
    "generation": "/**\n * Attempts to fold a GETELEM node where the LHS is an array literal\n * and the index is a constant number.\n *\n * @param n    the GETELEM node to try to fold\n * @param left the array literal node (n's left child)\n * @param right the index node (n's right child)\n * @return the folded node, or the original node if folding was not possible\n */\nprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n\n    if (right.getType()!= Token.NUMBER) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex!= index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    // Adjust the index to account for potential empty slots at the start of the array\n    Node elem = left.getFirstChild();\n    int effectiveIndex = 0;\n    while (elem!= null && effectiveIndex < intIndex) {\n        if (elem.getType()!= Token.EMPTY) {\n            effectiveIndex++;\n        }\n        elem = elem.getNext();\n    }\n\n    if (effectiveIndex!= intIndex) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}