{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n\n    if (right.getType()!= Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex!= index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Check if the left node is an array literal (and not a general expression)\n    if (left.getType() == Token.ARRAYLIT) {\n      Node elem = left.getFirstChild();\n      for (int i = 0; elem!= null && i < intIndex; i++) {\n        elem = elem.getNext();\n      }\n\n      if (elem == null) {\n        // If the index is out of bounds for an array literal on the RHS of an assignment,\n        // we should not error, but rather return the original node, as the assignment\n        // will implicitly increase the array's length.\n        if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {\n          return n;\n        }\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n\n      if (elem.getType() == Token.EMPTY) {\n        elem = NodeUtil.newUndefinedNode(elem);\n      } else {\n        left.removeChild(elem);\n      }\n\n      // Replace the entire GETELEM with the value\n      n.getParent().replaceChild(n, elem);\n      reportCodeChange();\n      return elem;\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}