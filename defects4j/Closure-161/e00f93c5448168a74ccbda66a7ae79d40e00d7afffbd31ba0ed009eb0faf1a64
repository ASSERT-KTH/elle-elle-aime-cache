{
    "generation": "/**\n * Attempts to fold array access into a constant value.\n * \n * @param n     the GETELEM node to potentially fold\n * @param left  the array literal node\n * @param right the index node\n * @return the potentially folded node, or the original node if folding is not possible\n */\nprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    \n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n\n    if (right.getType()!= Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex!= index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    // Fix: Check if the assignment is to an array index, not just read access\n    if (parent.getType() == Token.ASSIGN) {\n        // If assignment, allow folding even if index is out of bounds\n        // because the array will be automatically resized\n    } else if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem!= null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n        // Fix: If elem is null (index out of bounds), create a new undefined node\n        // instead of reporting an error. This will be replaced in the assignment.\n        elem = NodeUtil.newUndefinedNode(left);\n    } else if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}