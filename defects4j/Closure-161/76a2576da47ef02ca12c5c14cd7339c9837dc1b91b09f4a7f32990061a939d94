{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n\n    if (right.getType()!= Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex!= index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    int childCount = 0;\n    while (elem!= null && childCount < intIndex) {\n      elem = elem.getNext();\n      childCount++;\n    }\n\n    if (elem == null) {\n      // Check if there are enough children in the array\n      if (childCount <= left.getChildCount()) {\n        // If there are enough children, but the last child is not yet processed, \n        // it's likely that the index is within bounds.\n        // This fixes the issue where the index is 1 when the array has at least 2 elements.\n        elem = left.getChildAtIndex(intIndex);\n      } else {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}