{
    "generation": "/**\n * Attempts to fold a GETELEM node with a numeric literal index into its constituent element.\n * \n * @param n     the GETELEM node to fold\n * @param left  the array literal node\n * @param right the numeric literal index node\n * @return the folded node, or the original node if folding is not possible\n */\nprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    \n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n\n    if (right.getType()!= Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex!= index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    // Fix: Check if the operation is an assignment before checking index bounds\n    if (parent.getType() == Token.ASSIGN) {\n        // In assignment, allow out-of-bounds index to create a new element\n        Node elem = left.getFirstChild();\n        for (int i = 0; elem!= null && i < intIndex; i++) {\n          elem = elem.getNext();\n        }\n        if (elem == null) {\n            // Create new elements up to the desired index\n            while (left.getChildCount() <= intIndex) {\n                left.addChildToBack(NodeUtil.newUndefinedNode(left));\n            }\n            return n; // Do not replace the GETELEM node in assignment\n        }\n    } else {\n        // Non-assignment operation: check index bounds as before\n        if (intIndex < 0 || left.getChildCount() <= intIndex) {\n          error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n          return n;\n        }\n\n        Node elem = left.getFirstChild();\n        for (int i = 0; elem!= null && i < intIndex; i++) {\n          elem = elem.getNext();\n        }\n\n        if (elem.getType() == Token.EMPTY) {\n          elem = NodeUtil.newUndefinedNode(elem);\n        } else {\n          left.removeChild(elem);\n        }\n\n        // Replace the entire GETELEM with the value\n        n.getParent().replaceChild(n, elem);\n        reportCodeChange();\n        return elem;\n    }\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}