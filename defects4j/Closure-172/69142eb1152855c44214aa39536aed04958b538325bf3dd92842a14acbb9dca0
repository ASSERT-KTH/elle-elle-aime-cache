{
    "generation": "private boolean isQualifiedNameInferred(String qName, Node n, JSDocInfo info, Node rhsValue, JSType valueType) {\n    if (valueType == null) {\n        return true;\n    }\n\n    // Always consider prototype properties of constructors and interfaces as declared.\n    if (qName != null && qName.endsWith(\".prototype\")) {\n        return false;\n    }\n\n    boolean inferred = true;\n    if (info != null) {\n        inferred = !(info.hasType()\n                || info.hasEnumParameterType()\n                || (isConstantSymbol(info, n) && valueType != null && !valueType.isUnknownType())\n                || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n    }\n\n    if (inferred && rhsValue != null && rhsValue.isFunction()) {\n        if (info != null) {\n            return false;\n        } else if (!scope.isDeclared(qName, false) && n.isUnscopedQualifiedName()) {\n            // Check if this assignment is within a conditional block.\n            for (Node current = n.getParent(); \n                 !(current.isScript() || current.isFunction()); \n                 current = current.getParent()) {\n                if (NodeUtil.isControlStructure(current)) {\n                    return true;\n                }\n            }\n\n            // Check if the assignment is in an inner scope.\n            AstFunctionContents contents = getFunctionAnalysisResults(scope.getRootNode());\n            if (contents == null || !contents.getEscapedQualifiedNames().contains(qName)) {\n                return false;\n            }\n        }\n    }\n    return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}