{
    "generation": "private boolean isQualifiedNameInferred(\n    String qName, Node n, JSDocInfo info,\n    Node rhsValue, JSType valueType) {\n  if (valueType == null) {\n    return true;\n  }\n\n  // Prototypes assigned to any object are inferred.\n  if (qName != null && (qName.endsWith(\".prototype\") || qName.endsWith(\".__proto__\"))) {\n    return true;\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType() || info.hasEnumParameterType() ||\n                (isConstantSymbol(info, n) && valueType != null && !valueType.isUnknownType()) ||\n                FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n\n  if (inferred && rhsValue != null && rhsValue.isFunction()) {\n    if (info != null) {\n      // If there's JSDoc for an assigned function name, it's not inferred.\n      return false;\n    }\n    if (!scope.isDeclared(qName, false) && n.isQualifiedName()) {\n\n      /* Check if this is in a conditional block.\n       * Functions assigned in conditional blocks are inferred.\n       */\n      for (Node current = n.getParent();\n           !(current.isScript() || current.isFunction());\n           current = current.getParent()) {\n        if (NodeUtil.isControlStructure(current)) {\n          return true;\n        }\n      }\n\n      // Check if this is assigned in an inner scope.\n      AstFunctionContents contents = getFunctionAnalysisResults(scope.getRootNode());\n      if (contents == null || !contents.getEscapedQualifiedNames().contains(qName)) {\n        return false;\n      }\n    }\n  }\n  return inferred;\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}