{
    "generation": "private boolean isQualifiedNameInferred(\n    String qName, Node n, JSDocInfo info,\n    Node rhsValue, JSType valueType) {\n\n  if (valueType == null) {\n    return true;\n  }\n\n  if (qName != null && qName.endsWith(\".prototype\")) {\n    return false;\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (isConstantSymbol(info, n) && valueType != null\n            && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n\n    if (rhsValue != null && rhsValue.isFunction()) {\n      if (!inferred) {\n        return false;\n      } else if (!scope.isDeclared(qName, false) &&\n          n.isUnscopedQualifiedName()) {\n        for (Node current = n.getParent();\n             !(current.isScript() || current.isFunction());\n             current = current.getParent()) {\n          if (NodeUtil.isControlStructure(current)) {\n            return true;\n          }\n        }\n        AstFunctionContents contents =\n            getFunctionAnalysisResults(scope.getRootNode());\n        if (contents == null ||\n            !contents.getEscapedQualifiedNames().contains(qName)) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}