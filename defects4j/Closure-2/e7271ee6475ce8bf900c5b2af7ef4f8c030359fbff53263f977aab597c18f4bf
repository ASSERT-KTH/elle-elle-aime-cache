{
    "generation": "/**\n * Check whether there's any property conflict for a particular super\n * interface\n * @param t The node traversal object that supplies context\n * @param n The node being visited\n * @param functionName The function name being checked\n * @param properties The property names in the super interfaces that have\n * been visited\n * @param currentProperties The property names in the super interface\n * that have been visited\n * @param interfaceType The super interface that is being visited\n */\nprivate void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n    String functionName, HashMap<String, ObjectType> properties,\n    HashMap<String, ObjectType> currentProperties,\n    ObjectType interfaceType) {\n  // Check if interfaceType is valid before proceeding\n  if (interfaceType == null || interfaceType.isUnknownType()) {\n    return;\n  }\n\n  ObjectType implicitProto = interfaceType.getImplicitPrototype();\n  Set<String> currentPropertyNames;\n\n  // Safely handle cases where implicitProto might be null\n  if (implicitProto != null) {\n    currentPropertyNames = implicitProto.getOwnPropertyNames();\n  } else {\n    // If implicitProto is null, use an empty set to avoid NPE\n    currentPropertyNames = new HashSet<>();\n  }\n\n  for (String name : currentPropertyNames) {\n    ObjectType oType = properties.get(name);\n    if (oType != null) {\n      if (!interfaceType.getPropertyType(name).isEquivalentTo(\n          oType.getPropertyType(name))) {\n        compiler.report(\n            t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                functionName, name, oType.toString(),\n                interfaceType.toString()));\n      }\n    }\n    currentProperties.put(name, interfaceType);\n  }\n\n  // Safely iterate over extended interfaces\n  for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n    if (iType != null) {\n      checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}