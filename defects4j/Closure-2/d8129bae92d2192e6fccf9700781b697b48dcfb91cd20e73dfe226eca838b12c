{
    "generation": "/**\n * Check whether there's any property conflict for a particular super interface\n * @param t The node traversal object that supplies context\n * @param n The node being visited\n * @param functionName The function name being checked\n * @param properties The property names in the super interfaces that have been visited\n * @param currentProperties The property names in the super interface that have been visited\n * @param interfaceType The super interface that is being visited\n */\nprivate void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    if (interfaceType == null) { // added null check for interfaceType\n      return;\n    }\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    if (implicitProto == null) { // added null check for implicitProto\n      compiler.report(\n          t.makeError(n, BAD_TYPE_ANNOTATION, functionName, interfaceType.toString()));\n      return;\n    }\n    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n    if (currentPropertyNames == null) { // added null check for currentPropertyNames\n      // This can be the case if interfaceType is proxy to a non-existent object\n      return;\n    }\n    for (String name : currentPropertyNames) {\n      ObjectType oType = properties.get(name);\n      if (oType!= null) {\n        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name))) {\n          compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));\n        }\n      }\n      currentProperties.put(name, interfaceType);\n    }\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      if (iType!= null) { // added null check for iType\n        checkInterfaceConflictProperties(t, n, functionName, properties,\n            currentProperties, iType);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}