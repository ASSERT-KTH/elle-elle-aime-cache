{
    "generation": "ObjectType implicitProto = interfaceType.getImplicitPrototype();\nif (implicitProto == null) {\n  // Handle the case where implicitProto is null\n  // Perhaps log a warning\n  compiler.report(t.makeWarning(n, BAD_TYPE_ANNOTATION, interfaceType.toString()));\n  return; // Skip further processing for this interface\n}\nSet<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\nfor (String name : currentPropertyNames) {\n  ObjectType oType = properties.get(name);\n  if (oType != null) {\n    if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n      compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n    }\n  }\n  currentProperties.put(name, interfaceType);\n}\nfor (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n  checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}