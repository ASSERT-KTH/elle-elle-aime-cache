{
    "generation": "  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    // Check for null implicit prototype\n    if (interfaceType == null || interfaceType.getImplicitPrototype() == null) {\n      return;\n    }\n\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    Set<String> currentPropertyNames;\n    currentPropertyNames = implicitProto.getOwnPropertyNames();\n\n    for (String name : currentPropertyNames) {\n      ObjectType oType = properties.get(name);\n      if (oType != null) {\n        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name))) {\n          compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));\n        }\n      }\n      currentProperties.put(name, interfaceType);\n    }\n    \n    // Check for null or empty extended interfaces\n    if (interfaceType.getCtorExtendedInterfaces() != null) {\n      for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n        checkInterfaceConflictProperties(t, n, functionName, properties,\n            currentProperties, iType);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}