{
    "generation": "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n    String functionName, HashMap<String, ObjectType> properties,\n    HashMap<String, ObjectType> currentProperties,\n    ObjectType interfaceType) {\n  if (interfaceType == null) {\n    // If the interfaceType is null, it means a non-existent interface\n    // is being extended, which should be reported as a warning.\n    compiler.report(\n        t.makeError(n, BAD_EXTENDS_NONEXISTENT_INTERFACE, functionName));\n    return;\n  }\n  ObjectType implicitProto = interfaceType.getImplicitPrototype();\n  if (implicitProto == null) {\n    // If the implicitProto is null, it means a bad type annotation,\n    // which shouldn't crash the program but should be reported.\n    compiler.report(\n        t.makeError(n, BAD_TYPE_ANNOTATION, functionName, interfaceType.toString()));\n    return;\n  }\n  Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n  for (String name : currentPropertyNames) {\n    ObjectType oType = properties.get(name);\n    if (oType != null) {\n      if (!interfaceType.getPropertyType(name).isEquivalentTo(\n          oType.getPropertyType(name))) {\n        compiler.report(\n            t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                functionName, name, oType.toString(),\n                interfaceType.toString()));\n      }\n    }\n    currentProperties.put(name, interfaceType);\n  }\n  for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n    checkInterfaceConflictProperties(t, n, functionName, properties,\n        currentProperties, iType);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}