{
    "generation": "import com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;\nimport com.fasterxml.jackson.databind.type.LogicalType;\n\nimport java.io.IOException;\n\npublic abstract class FixAbstractScalarUnwrappedDeserializer<T> extends StdScalarDeserializer<T> {\n    private static final long serialVersionUID = 1L;\n\n    protected FixAbstractScalarUnwrappedDeserializer(Class<T> vc) {\n        super(vc);\n    }\n\n    @Override\n    public T getNullValue(DeserializationContext ctxt) throws IOException {\n        return (T) ctxt.getDefaultValueDeserializer(handledType()).getNullValue(ctxt);\n    }\n\n    @Override\n    public Object getEmptyValue(DeserializationContext ctxt) throws IOException {\n        return (T) ctxt.getDefaultValueDeserializer(handledType()).getEmptyValue(ctxt);\n    }\n\n    @Override\n    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n        Object value = _parse(p, ctxt);\n        if (value == null) {\n            return null;\n        }\n        return (T) value;\n    }\n\n    protected abstract Object _parse(JsonParser p, DeserializationContext ctxt) throws IOException;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}