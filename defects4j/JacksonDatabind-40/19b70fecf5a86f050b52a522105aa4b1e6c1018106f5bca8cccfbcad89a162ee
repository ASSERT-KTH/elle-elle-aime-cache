{
    "generation": "public class DeserializationFeature {\n\n    public static final DeserializationFeature ACCEPT_EMPTY_STRING_AS_NULL_OBJECT = new DeserializationFeature(6,\n            \"ACCEPT_EMPTY_STRING_AS_NULL_OBJECT\");\n\n    private DeserializationFeature(int mask, String name) {\n        this._mask = mask;\n        this._name = name;\n    }\n\n    public boolean enabledByDefault() {\n        return false;\n    }\n\n    public boolean enableFor(DeserializationConfig config) {\n        return config.isEnabled(this);\n    }\n\n    public void enableIn(DeserializationConfig config) {\n        config.enable(this);\n    }\n\n    public void disableIn(DeserializationConfig config) {\n        config.disable(this);\n    }\n\n    public JsonDeserializer<?> modifyDeserializer(JsonDeserializer<?> deser, DeserializationConfig config) {\n        if (this == ACCEPT_EMPTY_STRING_AS_NULL_OBJECT) {\n            if (deser instanceof BeanDeserializer) {\n                return new EmptyStringAsNullDeserializer((BeanDeserializer) deser);\n            }\n            if (deser instanceof StdDeserializer<?>) {\n                return new EmptyStringAsNullStdDeserializer((StdDeserializer<?>) deser);\n            }\n        }\n        return deser;\n    }\n\n    private static class EmptyStringAsNullDeserializer extends BeanDeserializer {\n        public EmptyStringAsNullDeserializer(BeanDeserializer src) {\n            super(src);\n        }\n\n        @Override\n        public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n            if (p.getCurrentToken() == JsonToken.VALUE_STRING && \"\".equals(p.getText())) {\n                Class<?> rawType = getValueType().getRawClass();\n                if (rawType.isPrimitive()) {\n                    return ctxt.handleWeirdStringValue(rawType, \"\", \"Cannot coerce empty String [\\\"\\\"] to %s (but deserialization feature `ACCEPT_EMPTY_STRING_AS_NULL_OBJECT` enabled)\", rawType.getName());\n                }\n                return null;\n            }\n            return super.deserialize(p, ctxt);\n        }\n    }\n\n    private static class EmptyStringAsNullStdDeserializer<T> extends StdDeserializer<T> {\n        private final StdDeserializer<T> _delegate;\n\n        public EmptyStringAsNullStdDeserializer(StdDeserializer<T> src) {\n            super(src.handledType());\n            _delegate = src;\n        }\n\n        @Override\n        public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n            if (p.getCurrentToken() == JsonToken.VALUE_STRING && \"\".equals(p.getText())) {\n                Class<?> rawType = _delegate.handledType();\n                if (rawType.isPrimitive()) {\n                    return (T) ctxt.handleWeirdStringValue(rawType, \"\", \"Cannot coerce empty String [\\\"\\\"] to %s (but deserialization feature `ACCEPT_EMPTY_STRING_AS_NULL_OBJECT` enabled)\", rawType.getName());\n                }\n                return null;\n            }\n            return _delegate.deserialize(p, ctxt);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}