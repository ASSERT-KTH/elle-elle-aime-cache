{
    "generation": "import com.fasterxml.jackson.annotation.JsonSetter;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\nimport java.io.IOException;\n\npublic class TestSimpleTypes {\n\n    static class Wrapper<T>\n    {\n        public T value;\n\n        public Wrapper() { }\n        public Wrapper(T v) { value = v; }\n\n        @JsonDeserialize(using = MyDeserializer.class)\n        public void setValue(T v) {\n            value = v;\n        }\n    }\n\n    static class MyDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<Object>\n    {\n        public MyDeserializer() { super(Object.class); }\n\n        @Override\n        public Object deserialize(com.fasterxml.jackson.core.JsonParser jp,\n                                  com.fasterxml.jackson.databind.DeserializationContext ctxt)\n                throws IOException, com.fasterxml.jackson.core.JsonProcessingException\n        {\n            if (jp.getCurrentToken() == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n                if (jp.getText().trim().isEmpty()) {\n                    return null; //Deserialize empty String to null, instead of failing or returning an empty String\n                }\n            }\n            return jp.readValueAs(getValueClass());\n            // or for more robust handling of different types:\n//            JavaType type = getValueType();\n//            return jp.readValueAs(type);\n        }\n        \n    }\n    \n    public void _testEmptyToNullCoercion(Class<?> primType, Object emptyValue) throws Exception\n    {\n        ObjectMapper m = new ObjectMapper();\n        m.enable(com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n        Wrapper w = m.readValue(\"{\\\"value\\\":\\\"\\\"}\", Wrapper.class);\n        assertNull(\"Should not have passed\", w.value);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}