{
    "generation": "public class SimpleTypeCoercion {\n\n    public static Object coerceEmptyToZero(Class<?> primitiveType, String value) {\n        if (value == null || value.isEmpty()) {\n            if (primitiveType == int.class) {\n                return 0;\n            } else if (primitiveType == long.class) {\n                return 0L;\n            } else if (primitiveType == double.class) {\n                return 0.0;\n            } else if (primitiveType == float.class) {\n                return 0.0f;\n            }\n            // Add additional handling for other primitives if needed\n        }\n        \n        // Add parsing logic if value is not empty, assume it's a valid number\n        try {\n            if (primitiveType == int.class) {\n                return Integer.parseInt(value);\n            } else if (primitiveType == long.class) {\n                return Long.parseLong(value);\n            } else if (primitiveType == double.class) {\n                return Double.parseDouble(value);\n            } else if (primitiveType == float.class) {\n                return Float.parseFloat(value);\n            }\n        } catch (NumberFormatException e) {\n            // Handle the parsing error as appropriate; rethrowing or returning default\n            return (primitiveType == int.class) ? 0 : \n                   (primitiveType == long.class) ? 0L : \n                   (primitiveType == double.class) ? 0.0 : \n                   (primitiveType == float.class) ? 0.0f : null;\n        }\n\n        // Return null or throw an exception if type does not match known types\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}