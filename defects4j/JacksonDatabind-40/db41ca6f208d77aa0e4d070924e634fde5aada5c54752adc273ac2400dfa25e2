{
    "generation": "/**\n * Coerces empty values to null for primitive types.\n *\n * @param clazz  the primitive type class (e.g., int.class, long.class, etc.)\n * @param value  the value to be coerced (primitive wrapper instance)\n * @return null if the value is considered \"empty\" for the given type, otherwise the original value\n */\npublic Object coerceEmptyToNull(Class<?> clazz, Object value) {\n    if (value == null) {\n        return null; // already null, no coercion needed\n    }\n\n    if (clazz == int.class || clazz == Integer.class) {\n        return ((Integer) value) == 0? null : value;\n    } else if (clazz == long.class || clazz == Long.class) {\n        return ((Long) value) == 0L? null : value;\n    } else if (clazz == double.class || clazz == Double.class) {\n        return ((Double) value) == 0.0? null : value;\n    } else if (clazz == float.class || clazz == Float.class) {\n        return ((Float) value) == 0.0f? null : value;\n    } else {\n        // Either not a primitive type or not supported; return original value\n        return value;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}