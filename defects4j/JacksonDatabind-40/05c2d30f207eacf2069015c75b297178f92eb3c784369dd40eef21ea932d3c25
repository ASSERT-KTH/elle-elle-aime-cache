{
    "generation": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\n\npublic class TestSimpleTypes {\n\n    private ObjectMapper mapper;\n\n    public TestSimpleTypes() {\n        // Configure ObjectMapper to not coerce empty String to null for primitives\n        mapper = new ObjectMapper()\n                .configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, false);\n    }\n\n    public void testEmptyToNullCoercionForPrimitives() throws Exception {\n        _testEmptyToNullCoercion(int.class, Integer.valueOf(0));\n        _testEmptyToNullCoercion(long.class, Long.valueOf(0));\n        _testEmptyToNullCoercion(double.class, Double.valueOf(0.0));\n        _testEmptyToNullCoercion(float.class, Float.valueOf(0.0f));\n    }\n\n    private <T> void _testEmptyToNullCoercion(Class<T> clazz, T defaultValue) throws Exception {\n        String json = \"{\\\"value\\\":\\\"\\\"}\";\n        // Create a container class for deserialization\n        JsonNode node = mapper.readTree(json);\n        try {\n            T value = mapper.readValue(node.get(\"value\").traverse(), clazz);\n            // For primitives, empty string should deserialize to default value, not null\n            if (defaultValue.equals(value)) {\n                // Expected behavior: empty string deserializes to default value\n                System.out.println(\"Passed for \" + clazz.getSimpleName());\n            } else {\n                throw new AssertionError(\"Should have used default value for \" + clazz.getSimpleName());\n            }\n        } catch (Exception e) {\n            throw new AssertionError(\"Deserialization failed for \" + clazz.getSimpleName(), e);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}