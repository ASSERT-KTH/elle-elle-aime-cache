{
    "generation": "import com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;\nimport com.fasterxml.jackson.databind.type.LogicalType;\n\nimport java.io.IOException;\n\npublic abstract class FixEmptyToNullCoercionForPrimitives extends StdScalarDeserializer<Object> {\n    private static final long serialVersionUID = 1L;\n\n    protected FixEmptyToNullCoercionForPrimitives(Class<?> vc) {\n        super(vc);\n    }\n\n    @Override\n    public Object getNullValue(DeserializationContext ctxt) throws IOException {\n        return getEmptyValue(ctxt);\n    }\n\n    @Override\n    public LogicalType getEmptyAsNullType(DeserializationContext ctxt) {\n        return LogicalType.OtherScalar;\n    }\n\n    protected Object _parseEmptyString(JsonParser p, DeserializationContext ctxt) throws IOException {\n        // 04-Jan-2018, tatu: Need to double-check to prevent infinite recursion for\n        //    cases where we have same coercions at databind level...\n        if (ctxt.getParser().hasToken(JsonParser.Token.VALUE_STRING)\n                && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n            return getEmptyValue(ctxt);\n        }\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}