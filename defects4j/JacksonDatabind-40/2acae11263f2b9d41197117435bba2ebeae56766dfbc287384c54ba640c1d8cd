{
    "generation": "import com.fasterxml.jackson.annotation.JsonSetter;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\nimport java.io.IOException;\n\npublic class TestSimpleTypes_testEmptyToNullCoercionForPrimitives {\n\n    static class Wrapper {\n        public int i;\n        public long l;\n        public double d;\n        public float f;\n\n        public Wrapper() { }\n\n        public Wrapper(int i0, long l0, double d0, float f0) {\n            i = i0;\n            l = l0;\n            d = d0;\n            f = f0;\n        }\n\n        @JsonSetter(nulls=JsonSetter.Nulls.AS_EMPTY)\n        public void setI(int i) { this.i = i; }\n\n        @JsonSetter(nulls=JsonSetter.Nulls.AS_EMPTY)\n        public void setL(long l) { this.l = l; }\n\n        @JsonSetter(nulls=JsonSetter.Nulls.AS_EMPTY)\n        public void setD(double d) { this.d = d; }\n\n        @JsonSetter(nulls=JsonSetter.Nulls.AS_EMPTY)\n        public void setF(float f) { this.f = f; }\n    }\n\n    private void _testEmptyToNullCoercion(Class<?> primType, Object emptyValue) throws IOException\n    {\n        ObjectMapper mapper = new ObjectMapper();\n\n        mapper.setDefaultSetterInfo(JsonSetter.Value.forValueNulls(JsonSetter.Nulls.AS_EMPTY));\n        Wrapper w = mapper.readValue(\"{}\", Wrapper.class);\n\n        if (primType == int.class) {\n           if (emptyValue.equals(w.i)) {\n               throw new AssertionError(\"Should not have passed\");\n           }\n        } else if (primType == long.class) {\n           if (emptyValue.equals(w.l)) {\n               throw new AssertionError(\"Should not have passed\");\n           }\n        } else if (primType == double.class) {\n            if (emptyValue.equals(w.d)) {\n                throw new AssertionError(\"Should not have passed\");\n            }\n        } else if (primType == float.class) {\n            if (emptyValue.equals(w.f)) {\n                throw new AssertionError(\"Should not have passed\");\n            }\n        }\n\n\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}