{
    "generation": "import com.fasterxml.jackson.annotation.JsonSetter;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\nimport java.io.IOException;\n\npublic class TestSimpleTypes {\n\n    static class CoercePrimitives {\n        @JsonDeserialize(using = EmptyToNullDeserializer.class)\n        public int i;\n\n        @JsonDeserialize(using = EmptyToNullDeserializer.class)\n        public long l;\n\n        @JsonDeserialize(using = EmptyToNullDeserializer.class)\n        public double d;\n\n        @JsonDeserialize(using = EmptyToNullDeserializer.class)\n        public float f;\n\n        @JsonSetter(contentNulls = JsonSetter.Nulls.AS_EMPTY)\n        public String str;\n\n        public CoercePrimitives() {}\n        public CoercePrimitives(int i, long l, double d, float f, String str) {\n            this.i = i;\n            this.l = l;\n            this.d = d;\n            this.f = f;\n            this.str = str;\n        }\n\n    }    \n    \n    public void testEmptyToNullCoercionForPrimitives() throws Exception {\n        _testEmptyToNullCoercion(int.class, Integer.valueOf(0));\n        _testEmptyToNullCoercion(long.class, Long.valueOf(0));\n        _testEmptyToNullCoercion(double.class, Double.valueOf(0.0));\n        _testEmptyToNullCoercion(float.class, Float.valueOf(0.0f));\n    }\n\n    private void _testEmptyToNullCoercion(Class<?> primType, Object defaultValue) throws IOException\n    {\n        ObjectMapper m = new ObjectMapper();\n        m.enable(JsonSetter.Value.THROW_ON_EMPTY_STRING);\n\n        CoercePrimitives input = new CoercePrimitives(123, 456l, 789.01, 1234.56f, \"foo\");\n        String json = m.writeValueAsString(input);\n\n        // but if we try to read as primitive, should fail\n        try {\n            m.readValue(\"{}\", primType);\n            fail(\"Should not have passed\");\n        } catch (IOException e) {\n            verifyException(e, \"Cannot coerce empty String (\\\"\\\") to \"+primType.getSimpleName());\n        }\n\n        CoercePrimitives result = m.readValue(json, CoercePrimitives.class);\n\n        assertEquals(123, result.i);\n        assertEquals(456l, result.l);\n        assertEquals(789.01, result.d);\n        assertEquals(1234.56f, result.f);\n\n        result = m.readerForUpdating(result).readValue(\"{\\\"i\\\":\\\"\\\",\\\"l\\\":\\\"\\\",\\\"d\\\":\\\"\\\",\\\"f\\\":\\\"\\\",\\\"str\\\":\\\"\\\"}\", CoercePrimitives.class);\n\n        assertEquals(0, result.i);\n        assertEquals(0L, result.l);\n        assertEquals(0.0, result.d);\n        assertEquals(0.0f, result.f);\n        assertEquals(\"\", result.str);\n    }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}