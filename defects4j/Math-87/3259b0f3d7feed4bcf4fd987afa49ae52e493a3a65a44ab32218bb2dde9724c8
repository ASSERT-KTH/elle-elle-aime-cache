{
    "generation": "    /**\n     * <p>Render the specified text and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int start = 0;\n        int pos;\n\n        while (start < text.length()) {\n            pos = findWrapPos(text, width, start);\n\n            if (pos == -1) {\n                sb.append(rtrim(text.substring(start)));\n                return sb;\n            }\n\n            sb.append(rtrim(text.substring(start, pos))).append(defaultNewLine);\n\n            // all following lines must be padded with nextLineTabStop space \n            // characters\n            if (nextLineTabStop > 0 && pos < text.length()) {\n                sb.append(createPadding(nextLineTabStop));\n            }\n\n            start = pos;\n        }\n\n        return sb;\n    }\n\n    private int findWrapPos(String text, int width, int start) {\n        int pos = text.lastIndexOf(' ', width + start);\n        if (pos >= start) {\n            return pos + 1; // Move past the space\n        }\n        return -1; // No suitable wrap position found\n    }\n\n    private String rtrim(String str) {\n        int len = str.length();\n        int i;\n        for (i = len - 1; i >= 0; i--) {\n            if (!Character.isWhitespace(str.charAt(i))) {\n                break;\n            }\n        }\n        return str.substring(0, i + 1);\n    }\n\n    private String createPadding(int len) {\n        StringBuilder sb = new StringBuilder(len);\n        for (int i = 0; i < len; i++) {\n            sb.append(' ');\n        }\n        return sb.toString();\n    }\n\n    private String defaultNewLine = System.lineSeparator();",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}