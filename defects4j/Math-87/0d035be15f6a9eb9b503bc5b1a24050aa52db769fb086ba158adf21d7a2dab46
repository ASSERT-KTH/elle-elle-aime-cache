{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && isPivotColumn(i, col)) {\n                if (row == null) {\n                    row = i;\n                } else {\n                    return null; // More than one basic entry found in the column\n                }\n            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                return null; // Non-zero and non-one entry found, not a basic column\n            }\n        }\n        return row;\n    }\n\n    /**\n     * Checks if the column is a pivot column for the given row.\n     * @param row index of the row to check\n     * @param col index of the column to check\n     * @return true if the column is a pivot column for the row, false otherwise\n     */\n    private boolean isPivotColumn(int row, int col) {\n        for (int j = 0; j < getWidth(); j++) {\n            if (j != col && !MathUtils.equals(getEntry(row, j), 0.0, epsilon)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}