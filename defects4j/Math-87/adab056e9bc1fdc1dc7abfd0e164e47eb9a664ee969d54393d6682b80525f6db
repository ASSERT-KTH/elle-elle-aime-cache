{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon)) {\n                // if we haven't found a pivot element yet, mark this one\n                if (row == null) {\n                    boolean isPivot = true;\n                    // check that all other entries in this column are 0\n                    for (int k = getNumObjectiveFunctions(); k < getHeight(); k++) {\n                        if (k != i && !MathUtils.equals(getEntry(k, col), 0.0, epsilon)) {\n                            isPivot = false;\n                            break;\n                        }\n                    }\n                    if (isPivot) {\n                        row = i;\n                    }\n                } else {\n                    // we've already found a pivot element, so this column is not basic\n                    return null;\n                }\n            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                // if the entry is neither 1 nor 0, this column cannot be basic\n                return null;\n            }\n        }\n        return row;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}