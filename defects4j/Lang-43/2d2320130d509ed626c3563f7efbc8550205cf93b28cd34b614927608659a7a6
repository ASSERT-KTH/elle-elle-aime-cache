{
    "generation": "    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        int length = pattern.length();\n        if (escapingOn && c[start] == QUOTE) {\n            // Handle the case of an escaped single quote\n            pos.setIndex(start + 1); // Move past the quote\n            return appendTo == null ? null : appendTo.append(QUOTE);\n        }\n        int lastHold = start;\n        for (int i = start; i < length; i++) {\n            char currentChar = c[i];\n            pos.setIndex(i);\n            if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, i)) {\n                // Process escaped single quotes\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n                }\n                i += ESCAPED_QUOTE.length() - 1; // Advance past the escaped quote\n                lastHold = i + 1; // Update last hold position\n                continue;\n            }\n            if (currentChar == QUOTE) {\n                // Handle end of quoted string\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, i - lastHold);\n                }\n                pos.setIndex(i + 1); // Move past the closing quote\n                return appendTo;\n            }\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}