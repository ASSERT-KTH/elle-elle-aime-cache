{
    "generation": "/**\n * Consume a quoted string, adding it to <code>appendTo</code> if\n * specified.\n * \n * @param pattern pattern to parse\n * @param pos current parse position\n * @param appendTo optional StringBuffer to append\n * @param escapingOn whether to process escaped quotes\n * @return <code>appendTo</code>\n */\nprivate StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    int lastHold = start;\n    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n        if (escapingOn && i < pattern.length() - 1 && c[i] == QUOTE && c[i + 1] == QUOTE) {\n            // Handle escaped quote by skipping the next quote\n            appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n            pos.setIndex(i + 2); // Move beyond the escaped quote\n            lastHold = pos.getIndex();\n            i = pos.getIndex() - 1; // Re-check the new current position\n        } else {\n            switch (c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n                return appendTo == null? null : appendTo.append(c, lastHold,\n                        pos.getIndex() - lastHold - 1); // Exclude the closing quote\n            default:\n                next(pos);\n            }\n        }\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}