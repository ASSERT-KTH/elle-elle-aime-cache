{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        int lastHold = start;\n\n        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n            char ch = c[i];\n            pos.setIndex(i);\n\n            if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, i)) {\n                // Append from last hold to current position\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n                }\n                // Skip the escaped sequence\n                i += ESCAPED_QUOTE.length() - 1;\n                lastHold = i + 1;\n            } else if (ch == QUOTE) {\n                // Closing quote found\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, i - lastHold);\n                }\n                pos.setIndex(i + 1);\n                return appendTo;\n            }\n        }\n\n        // Unterminated quoted string\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}