{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        if (c[start] != QUOTE) {\n            throw new IllegalArgumentException(\"Quoted string must start with a quote.\");\n        }\n        int lastHold = start;\n        for (int i = pos.getIndex() + 1; i < pattern.length(); i++) {\n            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                appendTo.append(c, lastHold + 1, i - lastHold - 1).append(QUOTE);\n                i += ESCAPED_QUOTE.length() - 1;\n                lastHold = i;\n                continue;\n            }\n            if (c[i] == QUOTE) {\n                appendTo.append(c, lastHold + 1, i - lastHold - 1);\n                pos.setIndex(i + 1);\n                return appendTo;\n            }\n        }\n        throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}