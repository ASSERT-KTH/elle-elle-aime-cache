{
    "generation": "/**\n * Consume a quoted string, adding it to <code>appendTo</code> if\n * specified.\n * \n * @param pattern pattern to parse\n * @param pos current parse position\n * @param appendTo optional StringBuffer to append\n * @param escapingOn whether to process escaped quotes\n * @return <code>appendTo</code>\n */\nprivate StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n        if (appendTo!= null) {\n            appendTo.append(QUOTE);\n        }\n        return appendTo;\n    }\n    int lastHold = start;\n    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n        if (escapingOn && i + 1 < pattern.length() && pattern.charAt(i) == QUOTE && pattern.charAt(i + 1) == QUOTE) {\n            if (appendTo!= null) {\n                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n            }\n            pos.setIndex(i + 2);\n            lastHold = pos.getIndex();\n        } else if (c[i] == QUOTE) {\n            next(pos);\n            if (appendTo!= null) {\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold - 1);\n            }\n            return appendTo;\n        }\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}