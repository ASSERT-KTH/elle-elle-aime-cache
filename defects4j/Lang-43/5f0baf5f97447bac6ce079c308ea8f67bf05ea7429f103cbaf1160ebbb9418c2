{
    "generation": "    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        int lastHold = start;\n        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n                i += ESCAPED_QUOTE.length() - 1; // Adjust the index after processing\n                pos.setIndex(i + 1);\n                lastHold = pos.getIndex();\n                continue;\n            }\n            switch (c[i]) { // Use 'i' instead of 'pos.getIndex()'\n            case QUOTE:\n                if (i < pattern.length() - 1 && c[i + 1] == QUOTE) {\n                    // Found escaped quote, add a single quote and continue\n                    appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n                    i++; // Skip the next quote as it's part of the escape\n                    lastHold = i + 1;\n                } else {\n                    // End of quoted string\n                    appendTo.append(c, lastHold, i - lastHold);\n                    pos.setIndex(i + 1);\n                    return appendTo;\n                }\n                break;\n            default:\n                break;\n            }\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}