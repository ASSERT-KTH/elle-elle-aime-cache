{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        if (c[start] != QUOTE) {\n            throw new IllegalArgumentException(\"Quoted string must start with a quote at position \" + start);\n        }\n        if (appendTo != null) {\n            appendTo.append(c[start]);\n        }\n        pos.setIndex(start + 1);\n        boolean escaped = false;\n        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                if (appendTo != null) {\n                    appendTo.append(c, pos.getIndex(), ESCAPED_QUOTE.length());\n                }\n                pos.setIndex(i + ESCAPED_QUOTE.length());\n                escaped = true;\n                continue;\n            }\n            switch (c[i]) {\n            case QUOTE:\n                if (escaped) {\n                    escaped = false; // Reset escaped flag\n                } else {\n                    if (appendTo != null) {\n                        appendTo.append(c, pos.getIndex(), i - pos.getIndex());\n                    }\n                    pos.setIndex(i + 1);\n                    return appendTo;\n                }\n                break;\n            default:\n                // Continue parsing\n            }\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}