{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        int lastHold = start;\n        boolean inQuote = false;\n\n        while (pos.getIndex() < pattern.length()) {\n            char currentChar = c[pos.getIndex()];\n\n            if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, pos.getIndex())) {\n                // Process escaped quote\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n                }\n                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n                lastHold = pos.getIndex();\n            } else if (currentChar == QUOTE) {\n                // Handle quote\n                if (escapingOn && (pos.getIndex() + 1 < pattern.length()) && pattern.charAt(pos.getIndex() + 1) == QUOTE) {\n                    // Escaped single quote (e.g., '' -> treat as one quote)\n                    if (appendTo != null) {\n                        appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n                    }\n                    pos.setIndex(pos.getIndex() + 2); // Skip both quotes\n                    lastHold = pos.getIndex();\n                } else {\n                    // End of quoted string\n                    next(pos);\n                    if (appendTo != null) {\n                        appendTo.append(c, lastHold, pos.getIndex() - lastHold - 1);\n                    }\n                    return appendTo;\n                }\n            } else {\n                // Regular character, move to the next position\n                next(pos);\n            }\n        }\n\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}