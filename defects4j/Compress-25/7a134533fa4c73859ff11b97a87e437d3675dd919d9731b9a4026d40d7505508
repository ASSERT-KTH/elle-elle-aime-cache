{
    "generation": "/**\n * @param encoding the encoding to use for file names, use null\n * for the platform's default encoding\n * @param useUnicodeExtraFields whether to use InfoZIP Unicode\n * Extra Fields (if present) to set the file names.\n * @param allowStoredEntriesWithDataDescriptor whether the stream\n * will try to read STORED entries that use a data descriptor\n * @since 1.1\n */\npublic ZipArchiveInputStream(InputStream inputStream,\n                             String encoding,\n                             boolean useUnicodeExtraFields,\n                             boolean allowStoredEntriesWithDataDescriptor) throws IOException {\n    zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    this.useUnicodeExtraFields = useUnicodeExtraFields;\n    this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;\n    \n    // Initialize buf\n    buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE);\n    \n    // Wrap input stream with PushbackInputStream\n    in = new PushbackInputStream(inputStream, buf.capacity());\n    \n    // Read first bytes\n    int n = IOUtils.readFully(in, buf.array());\n    if (n > 0) {\n        buf.limit(n);\n        pushback(buf.array(), 0, n);\n        buf.rewind();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}