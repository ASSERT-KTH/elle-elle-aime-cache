{
    "generation": "/**\n * @param encoding the encoding to use for file names, use null\n * for the platform's default encoding\n * @param useUnicodeExtraFields whether to use InfoZIP Unicode\n * Extra Fields (if present) to set the file names.\n * @param allowStoredEntriesWithDataDescriptor whether the stream\n * will try to read STORED entries that use a data descriptor\n * @since 1.1\n */\npublic ZipArchiveInputStream(InputStream inputStream,\n                             String encoding,\n                             boolean useUnicodeExtraFields,\n                             boolean allowStoredEntriesWithDataDescriptor) {\n    zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    this.useUnicodeExtraFields = useUnicodeExtraFields;\n    in = new PushbackInputStream(inputStream, 1024); // Specify a buffer size\n    this.allowStoredEntriesWithDataDescriptor =\n        allowStoredEntriesWithDataDescriptor;\n    // Read the first 4 bytes to start reading from the beginning of the archive\n    if (in.read(new byte[4], 0, 4)!= 4) {\n        throw new RuntimeException(\"Failed to read the first 4 bytes\");\n    }\n    in.unread(new byte[4], 0, 4); // Push back the 4 bytes to read them again\n    // haven't read anything so far\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}