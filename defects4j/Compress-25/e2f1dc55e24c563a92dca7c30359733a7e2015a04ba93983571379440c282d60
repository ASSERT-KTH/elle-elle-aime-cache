{
    "generation": "public ZipArchiveInputStream(InputStream inputStream,\n                             String encoding,\n                             boolean useUnicodeExtraFields,\n                             boolean allowStoredEntriesWithDataDescriptor) throws ArchiveException {\n    zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    this.useUnicodeExtraFields = useUnicodeExtraFields;\n    in = new PushbackInputStream(inputStream, buf.capacity());\n    this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;\n\n    // Read the End of Central Directory record\n    try {\n        // Seek to the end of the stream\n        long streamPos = in.available();\n        if (streamPos < END_SIGNATURre.length) {\n            throw new ArchiveException(\"File is too short to be a zip file\");\n        }\n\n        // Read the end signature\n        byte[] signature = new byte[END_SIGNATURE.length];\n        in.read(signature);\n\n        // Check if the signature matches\n        if (!Arrays.equals(signature, END_SIGNATURE)) {\n            throw new ArchiveException(\"End of central directory signature not found\");\n        }\n\n        // Read the number of this disk\n        short diskNumber = readShort(in);\n\n        // Read the number of the disk with the start of the central directory\n        short centralDirStartDisk = readShort(in);\n\n        // Read the total number of entries in the central directory on this disk\n        short entriesThisDisk = readShort(in);\n\n        // Read the total number of entries in the central directory\n        short totalEntries = readShort(in);\n\n        // Read the size of the central directory\n        int centralDirSize = readInt(in);\n\n        // Read the offset of the start of the central directory with respect to the starting disk number\n        int centralDirOffset = readInt(in);\n\n        // ... other fields ...\n\n        // Position the stream at the start of the central directory\n        in.reset();\n        in.skip(centralDirOffset);\n\n        // Now the stream is positioned at the start of the central directory\n        // and ready to read entries\n\n    } catch (IOException e) {\n        throw new ArchiveException(\"Error reading EOF record\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}