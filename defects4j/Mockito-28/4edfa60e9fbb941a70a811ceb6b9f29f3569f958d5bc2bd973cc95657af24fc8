{
    "generation": "    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            if (mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)) {\n                injectField(fieldInstance, field);\n            }\n        }\n    }\n\n    private void injectField(Object fieldInstance, Field field) {\n        field.setAccessible(true);\n        try {\n            field.set(fieldInstance, mockCandidateFilter.getCandidate(field));\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}