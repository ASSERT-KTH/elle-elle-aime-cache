{
    "generation": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n    for(Field field : fields) {\n        List<Object> compatibleMocks = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (!compatibleMocks.isEmpty()) {\n            Object bestMatchingMock = getBestMatchingMock(compatibleMocks, field);\n            mockInjector.inject(bestMatchingMock, field, fieldInstance);\n        }\n    }\n}\n\nprivate Object getBestMatchingMock(List<Object> compatibleMocks, Field field) {\n    return compatibleMocks.stream()\n            .sorted((mock1, mock2) -> {\n                Class<?> fieldType = field.getType();\n                if (fieldType.isAssignableFrom(mock1.getClass()) && !fieldType.isAssignableFrom(mock2.getClass())) {\n                    return -1;\n                } else if (!fieldType.isAssignableFrom(mock1.getClass()) && fieldType.isAssignableFrom(mock2.getClass())) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            })\n            .findFirst()\n            .orElseThrow(() -> new IllegalStateException(\"No compatible mock found\"));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}