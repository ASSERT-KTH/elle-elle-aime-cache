{
    "generation": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        Collection<Object> matchingMocks = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (!matchingMocks.isEmpty()) {\n            // find the best matching mock (exact type takes priority over ancestor type)\n            Object bestMatch = null;\n            for (Object mock : matchingMocks) {\n                if (field.getType().isInstance(mock)) {\n                    bestMatch = mock;\n                    break;\n                } else {\n                    if (bestMatch == null) {\n                        bestMatch = mock;\n                    }\n                }\n            }\n            if (bestMatch!= null) {\n                try {\n                    field.set(fieldInstance, bestMatch);\n                } catch (IllegalAccessException e) {\n                    // handle exception\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}