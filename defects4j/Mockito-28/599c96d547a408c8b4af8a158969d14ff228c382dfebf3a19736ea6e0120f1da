{
    "generation": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        Optional<Object> bestMatch = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (bestMatch.isPresent()) {\n            bestMatch.ifPresent(mock -> injectField(field, fieldInstance, mock));\n            break; // Ensure the mock is injected only once in the best matching type\n        }\n    }\n}\n\nprivate void injectField(Field field, Object fieldInstance, Object mock) {\n    try {\n        field.setAccessible(true);\n        field.set(fieldInstance, mock);\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(\"Failed to inject mock into field: \" + field.getName(), e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}