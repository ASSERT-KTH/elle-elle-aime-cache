{
    "generation": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        Object mock = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (mock != null) {\n            field.setAccessible(true);\n            try {\n                field.set(fieldInstance, mock);\n                mocks.remove(mock); // Ensure the mock is only injected once\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(\"Unable to inject mock\", e);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}