{
    "generation": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        // First, try to inject into fields with the exact type\n        if (field.getType().equals(fieldInstance.getClass())) {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            mocks.remove(fieldInstance); // Remove the mock from the set to prevent duplicate injection\n        }\n    }\n    \n    // Then, try to inject into fields with ancestor types\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        if (field.getType().isAssignableFrom(fieldInstance.getClass())) {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}