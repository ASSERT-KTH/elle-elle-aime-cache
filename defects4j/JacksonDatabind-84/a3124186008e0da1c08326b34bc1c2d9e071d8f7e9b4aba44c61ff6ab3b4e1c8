{
    "generation": "import com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.io.IOException;\n\npublic class TestTypeFactoryWithRecursiveTypes {\n\n    @JsonAutoDetect(fieldVisibility = Visibility.ANY)\n    static class Base {\n        public int base = 1;\n    }\n\n    @JsonAutoDetect(fieldVisibility = Visibility.ANY)\n    static class Sub extends Base {\n        public int sub = 2;\n    }\n\n\n    private ObjectMapper objectMapper() {\n        return new ObjectMapper();\n    }\n\n    public void testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType() throws IOException {\n        TypeFactory tf = TypeFactory.defaultInstance();\n        tf.constructType(Base.class);\n        tf.constructType(Sub.class);\n        Sub sub = new Sub();\n        String serialized = objectMapper().writeValueAsString(sub);\n        assertEquals(\"{\\\"base\\\":1,\\\"sub\\\":2}\", serialized);\n    }\n\n    private void assertEquals(String expected, String actual) {\n        if (!expected.equals(actual)) {\n            throw new AssertionError(\"Expected: \" + expected + \", Actual: \" + actual);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}