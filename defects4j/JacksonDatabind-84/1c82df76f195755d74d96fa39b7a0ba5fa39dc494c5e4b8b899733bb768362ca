{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Warning about typeOfThis if it doesn't resolve to an ObjectType\n  // is handled further upstream.\n  // TODO(nicksantos): Handle this correctly if we have a UnionType.\n  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n\n  // Handle UnionType for typeOfThis\n  if (typeOfThis instanceof UnionType) {\n    UnionType unionType = (UnionType) typeOfThis;\n    ImmutableList.Builder<JSType> objectTypes = ImmutableList.builder();\n    for (JSType member : unionType.getAlternates()) {\n      if (member instanceof ObjectType) {\n        objectTypes.add(member);\n      }\n    }\n    if (objectTypes.build().isEmpty()) {\n      // If no object types are found, throw an appropriate exception or handle it as needed.\n      throw new IllegalArgumentException(\"@this type of a function must be an object\");\n    }\n    typeOfThis = objectTypes.build().size() == 1 ? objectTypes.build().get(0) : unionType.fromTypeList(objectTypes.build());\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}