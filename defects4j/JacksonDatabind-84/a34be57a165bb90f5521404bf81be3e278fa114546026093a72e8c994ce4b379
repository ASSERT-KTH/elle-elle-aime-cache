{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n\n    if (resolvedTypeOfThis instanceof UnionType) {\n        UnionType unionType = (UnionType) resolvedTypeOfThis;\n        boolean containsObjectType = false;\n\n        for (JSType alternative : unionType.getAlternates()) {\n            if (alternative instanceof ObjectType) {\n                containsObjectType = true;\n                break;\n            }\n        }\n\n        if (!containsObjectType) {\n            t.warning(\"The @this type of a function must be an object\", sourceName, lineno, null, 0);\n        }\n    } else if (!(resolvedTypeOfThis instanceof ObjectType)) {\n        t.warning(\"The @this type of a function must be an object\", sourceName, lineno, null, 0);\n    } else {\n        typeOfThis = (ObjectType) resolvedTypeOfThis;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n        resolvedInterfaces.add(resolvedIface);\n        changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n        implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n        for (int i = 0; i < subTypes.size(); i++) {\n            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n        }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}