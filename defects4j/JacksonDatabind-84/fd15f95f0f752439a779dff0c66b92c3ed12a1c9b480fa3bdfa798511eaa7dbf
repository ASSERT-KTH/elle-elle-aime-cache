{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Handle typeOfThis correctly if it's a UnionType\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis instanceof UnionType) {\n        UnionType unionType = (UnionType) resolvedTypeOfThis;\n        boolean allObjects = true;\n        for (JSType alt : unionType.getAlternates()) {\n            if (!(alt instanceof ObjectType)) {\n                allObjects = false;\n                break;\n            }\n        }\n        if (allObjects) {\n            typeOfThis = unionType;\n        } else {\n            // Handle the case where not all alternates are ObjectType\n            // This could involve error reporting or other logic depending on the context\n            // For now, we just set it to an unknown ObjectType\n            typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n        }\n    } else if (resolvedTypeOfThis instanceof ObjectType) {\n        typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else {\n        // Handle the case where resolvedTypeOfThis is not an ObjectType or UnionType\n        // This could involve error reporting or other logic depending on the context\n        // For now, we just set it to an unknown ObjectType\n        typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n        resolvedInterfaces.add(resolvedIface);\n        changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n        implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n        for (int i = 0; i < subTypes.size(); i++) {\n            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n        }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}