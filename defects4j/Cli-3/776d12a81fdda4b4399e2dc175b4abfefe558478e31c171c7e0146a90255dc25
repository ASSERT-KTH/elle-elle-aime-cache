{
    "generation": "public void testSimplePattern()\n{\n    try {\n        Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n        String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n    \n        CommandLineParser parser = new PosixParser();\n        CommandLine line = parser.parse(options,args);\n\n        // tests the char methods of CommandLine that delegate to\n        // the String methods\n        assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n        assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\n        assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n        assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\n        assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\n        assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));\n        assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));\n        assertEquals(\"boolean true flag c\", true, line.hasOption('c'));\n        assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));\n        assertEquals(\"boolean false flag d\", false, line.hasOption('d'));\n        assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\n        assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));\n        assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\n        assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));\n        \n        // Corrected comparison\n        Double expectedDouble = new Double(4.5);\n        Double actualDouble = (Double) line.getOptionObject(\"n\");\n        assertEquals(\"number flag n\", expectedDouble.doubleValue(), actualDouble.doubleValue(), 0.000001);\n        assertEquals(\"number flag n\", expectedDouble, actualDouble);\n        \n        assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));\n        assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));\n        /// DATES NOT SUPPORTED YET.\n        //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n        //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n    }\n    catch( ParseException exp ) {\n        fail( exp.getMessage() );\n    }\n    catch( java.net.MalformedURLException exp ) {\n        fail( exp.getMessage() );\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}