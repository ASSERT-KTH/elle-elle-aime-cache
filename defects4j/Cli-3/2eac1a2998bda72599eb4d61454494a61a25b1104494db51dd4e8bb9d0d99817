{
    "generation": "import org.apache.commons.lang.math.NumberUtils;\n\n/**\n * <p>Create a number from a String. If a . is present, it creates a Double, otherwise a Long. </p>\n *\n * @param str the value\n * @return the number represented by <code>str</code>, if <code>str</code>\n * is not a number, null is returned.\n */\npublic static Number createNumber(String str)\n{\n    if (str == null) {\n        return null;\n    }\n\n    char decimalPoint = NumberUtils.DECIMAL_POINT;\n    int decimalPointIndex = str.indexOf(decimalPoint);\n\n    if (decimalPointIndex > -1 && decimalPointIndex != str.lastIndexOf(decimalPoint)) {\n        System.err.println(\"Invalid number format: \" + str);\n        return null;\n    }\n\n    try {\n        if (decimalPointIndex > -1) {\n            return Double.valueOf(str);\n        } else {\n            return Long.valueOf(str);\n        }\n    } catch (NumberFormatException nfe) {\n        System.err.println(nfe.getMessage());\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}