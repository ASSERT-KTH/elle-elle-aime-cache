{
    "generation": "private void determineLMParameter(double[] diagonal, double[] res, double[][] jacobian, int[] permutation,\n                                 double delta, double[] lmDir, double[] work1, double[] work2, double[] work3) {\n    double diag, fp, sum2, par, temp;\n    for (int j = 0; j < solvedCols; j++) {\n        lmDir[j] = point[permutation[j]];\n    }\n    for (int j = 0; j < solvedCols; j++) {\n        diag = diagonal[j];\n        for (int k = j; k < solvedCols; k++) {\n            sum2 = 0;\n            for (int i = 0; i <= k; i++) {\n                sum2 += jacobian[i][permutation[j]] * jacobian[i][permutation[k]];\n            }\n            work1[k] = sum2;\n            work2[k] = sum2;\n        }\n        fp = res[permutation[j]];\n        for (int k = j; k < solvedCols; k++) {\n            work1[k] = sum2 * lmDir[k] + fp * jacobian[j][permutation[k]];\n            work3[k] = diag * lmDir[k];\n        }\n    }\n    par = delta;\n    for (int j = 0; j < solvedCols; j++) {\n        double sum = work1[j];\n        for (int k = j + 1; k < solvedCols; k++) {\n            sum += work2[k] * lmDir[k];\n        }\n        double s1 = diag * point[permutation[j]];\n        double s2 = diagonal[j] * work3[j];\n        double w = work1[j] / diag;\n        for (int k = j + 1; k < solvedCols; k++) {\n            work1[k] += work2[k] * w;\n            lmDir[k] += work2[k] * lmDir[j];\n        }\n        temp = s1 / diagonal[j];\n        diagonal[j] = s2 / diagonal[j];\n        lmDir[j] = temp;\n        par += diagonal[j] * (temp * temp);\n    }\n    lmPar = par;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}