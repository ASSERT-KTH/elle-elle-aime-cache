{
    "generation": "// Fixed version of the buggy function\npublic void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    }\n\n    // If DiagnosticGroups did not override the plain checkTypes option, we need to consider the plain checkTypes value.\n    if (!options.enables(DiagnosticGroups.CHECK_TYPES) && !options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      if (!options.checkTypes) {\n        // Turn off the parser type warnings as they were not explicitly enabled.\n        options.setWarningLevel(\n            DiagnosticGroup.forType(\n                RhinoErrorReporter.TYPE_PARSE_ERROR),\n            CheckLevel.OFF);\n      }\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    // Handle the CHECK_VARIABLES group based on the checkSymbols option.\n    // If checkSymbols is false and the warning guard doesn't explicitly disable CHECK_VARIABLES, then disable it.\n    if (!options.checkSymbols &&\n        (warningsGuard == null || !warningsGuard.disables(\n            DiagnosticGroups.CHECK_VARIABLES))) {\n      guards.add(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}