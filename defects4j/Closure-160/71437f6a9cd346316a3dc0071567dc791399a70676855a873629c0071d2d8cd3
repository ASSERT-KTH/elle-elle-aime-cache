{
    "generation": "  /**\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   */\n  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // Handle the case where a specific error type is asked for, but would be suppressed by QUIET.\n    handleQuietWarningLevel(options);\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    if (!options.checkSymbols &&\n        (warningsGuard == null || !warningsGuard.disables(\n            DiagnosticGroups.CHECK_VARIABLES))) {\n      guards.add(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n  }\n\n   /**\n   * If --warning_level=QUIET is passed and a specific warning from --jscomp_error is also passed,\n   * this method ensures that this specific warning is not suppressed.\n   */\n   private void handleQuietWarningLevel(CompilerOptions options) {\n     if (options.warningLevel.equals(CheckLevel.QUIET) && !options.jscomp_error.isEmpty()) {\n        // Set the warning level to DEFAULT, so that QUIET does not suppress the specific errors.\n        options.warningLevel = CheckLevel.DEFAULT;\n        // Then, manually disable the warnings again which were not requested explicitly.\n        for (DiagnosticGroup group : getDiagnosticGroups().getRegisteredGroups()) {\n          if (!options.jscomp_error.contains(group.getId()) && options.getWarningLevel(group) == CheckLevel.OFF) {\n            options.setWarningLevel(group, CheckLevel.OFF);\n          }\n        }\n     }\n   }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}