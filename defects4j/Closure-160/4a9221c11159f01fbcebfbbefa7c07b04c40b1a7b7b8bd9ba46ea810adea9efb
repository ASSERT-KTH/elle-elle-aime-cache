{
    "generation": "/**\n * Initialize the compiler options. Only necessary if you're not doing\n * a normal compile() job.\n */\npublic void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger) );\n    } else {\n      PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n\n  // DiagnosticGroups override the plain checkTypes option.\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  }\n\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n  }\n\n  List<WarningsGuard> guards = Lists.newArrayList();\n  guards.add( new SuppressDocWarningsGuard( getDiagnosticGroups().getRegisteredGroups() ) );\n  guards.add(options.getWarningsGuard());\n\n  if (!options.checkSymbols) {\n    // If checkSymbols is off, turn off the missing variable declarations warning.\n    guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n  } else {\n    // If checkSymbols is on, but the warning level is QUIET, then explicitly turn on the undefined variable error.\n    if (options.getWarningLevel(DiagnosticGroups.CHECK_VARIABLES).isOff()) {\n      guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.MISSING_UNDEFINED_VARIABLES, CheckLevel.ERROR));\n    }\n  }\n\n  this.warningsGuard = new ComposeWarningsGuard(guards);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}