{
    "generation": "import com.google.javascript.jscomp.CompilerOptions;\nimport com.google.javascript.jscomp.DiagnosticsGroups;\nimport com.google.javascript.jscomp.WarningsGuard;\nimport com.google.javascript.jscomp.WarningLevel;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic class JscompErrorOverridesWarningsGuard implements WarningsGuard {\n    private final WarningsGuard delegate;\n    private final CompilerOptions options;\n\n    public JscompErrorOverridesWarningsGuard(WarningsGuard delegate, CompilerOptions options) {\n        this.delegate = delegate;\n        this.options = options;\n    }\n\n    @Override\n    public WarningLevel getCheckLevel(DiagnosticsGroups group) {\n        WarningLevel level = delegate.getCheckLevel(group);\n        if (options.jscompErrors.containsKey(group.getName())) {\n            return WarningLevel.ERROR;\n        }\n        return level;\n    }\n}\n\npublic class YourCompilerClass {\n    private WarningsGuard warningsGuard;\n    private CompilerOptions options;\n\n    public void initOptions(CompilerOptions options) {\n        this.options = options;\n        if (errorManager == null) {\n            if (outStream == null) {\n                setErrorManager(\n                    new LoggerErrorManager(createMessageFormatter(), logger));\n            } else {\n                PrintStreamErrorManager printer =\n                    new PrintStreamErrorManager(createMessageFormatter(), outStream);\n                printer.setSummaryDetailLevel(options.summaryDetailLevel);\n                setErrorManager(printer);\n            }\n        }\n\n        // DiagnosticGroups override the plain checkTypes option.\n        if (options.enables(DiagnosticsGroups.CHECK_TYPES)) {\n            options.checkTypes = true;\n        } else if (options.disables(DiagnosticsGroups.CHECK_TYPES)) {\n            options.checkTypes = false;\n        } else if (!options.checkTypes) {\n            // If DiagnosticGroups did not override the plain checkTypes\n            // option, and checkTypes is enabled, then turn off the\n            // parser type warnings.\n            options.setWarningLevel(\n                DiagnosticsGroups.getTypeParseErrorGroup(),\n                WarningLevel.OFF);\n        }\n\n        if (options.checkGlobalThisLevel.isOn()) {\n            options.setWarningLevel(\n                DiagnosticsGroups.GLOBAL_THIS,\n                options.checkGlobalThisLevel);\n        }\n\n        // Initialize the warnings guard.\n        List<WarningsGuard> guards = Lists.newArrayList();\n        guards.add(\n            new SuppressDocWarningsGuard(\n                getDiagnosticGroups().getRegisteredGroups()));\n        guards.add(options.getWarningsGuard());\n\n        // All passes must run the variable check. This synthesizes\n        // variables later so that the compiler doesn't crash. It also\n        // checks the externs file for validity. If you don't want to warn\n        // about missing variable declarations, we shut that specific\n        // error off.\n        if (!options.checkSymbols &&\n            (warningsGuard == null || !warningsGuard.disables(\n                DiagnosticsGroups.CHECK_VARIABLES))) {\n            guards.add(new DiagnosticsGroupWarningsGuard(\n                DiagnosticsGroups.CHECK_VARIABLES, WarningLevel.OFF));\n        }\n\n        this.warningsGuard = new ComposeWarningsGuard(guards);\n\n        // Ensure that jscomp_errors are treated as errors regardless of the warning level.\n        this.warningsGuard = new JscompErrorOverridesWarningsGuard(this.warningsGuard, options);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}