{
    "generation": "public Range getDataRange(ValueAxis axis) {\n\n    Range result = null;\n    List mappedDatasets = new ArrayList();\n    List includedAnnotations = new ArrayList();\n    boolean isDomainAxis = true;\n\n    // Determine if it's a domain axis\n    int domainIndex = getDomainAxisIndex(axis);\n    if (domainIndex >= 0) {\n        isDomainAxis = true;\n        mappedDatasets.addAll(getDatasetsMappedToDomainAxis(new Integer(domainIndex)));\n        if (domainIndex == 0) {\n            addAnnotationsIfInstanceOf();\n        }\n    } else {\n        // Determine if it's a range axis\n        int rangeIndex = getRangeAxisIndex(axis);\n        if (rangeIndex >= 0) {\n            isDomainAxis = false;\n            mappedDatasets.addAll(getDatasetsMappedToRangeAxis(new Integer(rangeIndex)));\n            if (rangeIndex == 0) {\n                addAnnotationsIfInstanceOf();\n            }\n        }\n    }\n\n    // Iterate through datasets and calculate the combined range\n    Iterator iterator = mappedDatasets.iterator();\n    while (iterator.hasNext()) {\n        XYDataset d = (XYDataset) iterator.next();\n        if (d != null) {\n            XYItemRenderer r = getRendererForDataset(d);\n            if (isDomainAxis) {\n                if (r != null) {\n                    Range rendererRange = r.findDomainBounds(d);\n                    if (rendererRange != null) {\n                        result = Range.combine(result, rendererRange);\n                    }\n                } else {\n                    Range datasetRange = DatasetUtilities.findDomainBounds(d);\n                    if (datasetRange != null) {\n                        result = Range.combine(result, datasetRange);\n                    }\n                }\n            } else {\n                if (r != null) {\n                    Range rendererRange = r.findRangeBounds(d);\n                    if (rendererRange != null) {\n                        result = Range.combine(result, rendererRange);\n                    }\n                } else {\n                    Range datasetRange = DatasetUtilities.findRangeBounds(d);\n                    if (datasetRange != null) {\n                        result = Range.combine(result, datasetRange);\n                    }\n                }\n            }\n\n            // Add annotations from the renderer if not null\n            if (r != null) {\n                Collection c = r.getAnnotations();\n                if (c != null) {\n                    iteratorAnnotations(c, includedAnnotations);\n                }\n            }\n        }\n    }\n\n    // Process included annotations\n    processIncludedAnnotations(includedAnnotations, isDomainAxis, result);\n\n    return result;\n}\n\nprivate void addAnnotationsIfInstanceOf() {\n    Iterator iterator = this.annotations.iterator();\n    while (iterator.hasNext()) {\n        XYAnnotation annotation = (XYAnnotation) iterator.next();\n        if (annotation instanceof XYAnnotationBoundsInfo) {\n            includedAnnotations.add(annotation);\n        }\n    }\n}\n\nprivate void iteratorAnnotations(Collection c, List includedAnnotations) {\n    Iterator i = c.iterator();\n    while (i.hasNext()) {\n        XYAnnotation a = (XYAnnotation) i.next();\n        if (a instanceof XYAnnotationBoundsInfo) {\n            includedAnnotations.add(a);\n        }\n    }\n}\n\nprivate void processIncludedAnnotations(List includedAnnotations, boolean isDomainAxis, Range result) {\n    Iterator it = includedAnnotations.iterator();\n    while (it.hasNext()) {\n        XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next();\n        if (xyabi.getIncludeInDataBounds()) {\n            if (isDomainAxis) {\n                Range xRange = xyabi.getXRange();\n                if (xRange != null) {\n                    result = Range.combine(result, xRange);\n                }\n            } else {\n                Range yRange = xyabi.getYRange();\n                if (yRange != null) {\n                    result = Range.combine(result, yRange);\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}