{
    "generation": "/** Helper to escape javascript string as well as regular expression */\nstatic String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    int i = 0;\n    while (i < s.length()) {\n        char c = s.charAt(i);\n        if (c == '\\\\' && i + 1 < s.length()) {\n            i++;\n            char nextChar = s.charAt(i);\n            if (nextChar == 'x') {\n                if (i + 4 < s.length() && isValidHex(s.substring(i + 1, i + 5))) {\n                    int code = Integer.parseInt(s.substring(i + 1, i + 5), 16);\n                    c = (char) code;\n                    i += 4;\n                }\n            } else if (isValidHex(String.valueOf(nextChar))) {\n                if (i + 1 < s.length() && isValidHex(s.substring(i, i + 2))) {\n                    int code = Integer.parseInt(s.substring(i, i + 2), 16);\n                    c = (char) code;\n                    i += 1;\n                }\n            }\n        }\n        switch (c) {\n            case '\\0': sb.append(\"\\\\0\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\t': sb.append(\"\\\\t\"); break;\n            case '\\\\': sb.append(backslashEscape); break;\n            case '\\\"': sb.append(doublequoteEscape); break;\n            case '\\'': sb.append(singlequoteEscape); break;\n            case '>':\n                if (i >= 2 &&\n                        ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n                                (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                        END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                        START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n        i++;\n    }\n    sb.append(quote);\n    return sb.toString();\n}\n\n// A helper method to check if a string is a valid hexadecimal number\nprivate static boolean isValidHex(String s) {\n    try {\n        Integer.parseInt(s, 16);\n        return true;\n    } catch (NumberFormatException e) {\n        return false;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}