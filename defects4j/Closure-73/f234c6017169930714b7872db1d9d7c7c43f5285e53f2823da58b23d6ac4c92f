{
    "generation": "static String strEscape(String s, char quote,\n    String doublequoteEscape,\n    String singlequoteEscape,\n    String backslashEscape,\n    CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\0': sb.append(\"\\\\0\"); break;\n      case '\\n': sb.append(\"\\\\n\"); break;\n      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\\\':\n        if (i + 1 < s.length()) {\n          if (s.charAt(i + 1) == 'x') {\n            sb.append(\"\\\\x\");   // preserve \"\\x\" as-is\n            i += 1;             // skip 'x'\n            c = (char) Integer.parseInt(s.substring(i + 1, i + 3), 16);\n            i += 2;             // skip two hex digits\n            // Unicode-escape the character if needed based on outputCharsetEncoder\n            handleUnicodeEscape(sb, c, outputCharsetEncoder);\n          } else {\n            sb.append(backslashEscape);\n          }\n        } else {\n          sb.append(backslashEscape);\n        }\n        break;\n      case '\\\"': sb.append(doublequoteEscape); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '>':\n        if (i >= 2 &&\n            ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n             (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n          sb.append(\"\\\\>\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      case '<':\n        final String END_SCRIPT = \"/script\";\n        final String START_COMMENT = \"!--\";\n\n        if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n          sb.append(\"<\\\\\");\n        } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n          sb.append(\"<\\\\\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      default:\n        handleUnicodeEscape(sb, c, outputCharsetEncoder);\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n\nprivate static void handleUnicodeEscape(StringBuilder sb, char c, CharsetEncoder outputCharsetEncoder) {\n  if (outputCharsetEncoder != null) {\n    if (outputCharsetEncoder.canEncode(c)) {\n      sb.append(c);\n    } else {\n      appendHexJavaScriptRepresentation(sb, c);\n    }\n  } else {\n    if (c >= 0x20 && c <= 0x7E) {\n      sb.append(c);\n    } else {\n      appendHexJavaScriptRepresentation(sb, c);\n    }\n  }\n}\n\nprivate static void appendHexJavaScriptRepresentation(StringBuilder sb, char c) {\n  sb.append(String.format(\"\\\\u%04x\", (int) c));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}