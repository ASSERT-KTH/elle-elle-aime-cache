{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean isVarArgsFunction = functionType.hasVarArgs();\n\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      if (parameters.hasNext()) {\n        parameter = parameters.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n      } else if (isVarArgsFunction) {\n        // For varargs function, assign the varargs parameter type\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), functionType.getTypeOfVarArgs(), call, ordinal);\n      } else {\n        // Extra arguments provided to a non-varargs function\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(call.getChildCount() - 1),\n            String.valueOf(functionType.getMinArguments()),\n            functionType.getMaxArguments() != Integer.MAX_VALUE\n                ? \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n        return;\n      }\n    }\n\n    // Check if there are fewer arguments than the minimum required\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    if (numArgs < minArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), String.valueOf(minArgs),\n          functionType.getMaxArguments() != Integer.MAX_VALUE\n              ? \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}