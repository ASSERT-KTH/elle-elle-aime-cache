{
    "generation": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  List<Parameter> parameters = functionType.getParameters();\n  boolean hasVarArgs = functionType.isVarArgs();\n\n  int ordinal = 0;\n  for (Parameter parameter : parameters) {\n    if (arguments.hasNext()) {\n      Node argument = arguments.next();\n      JSType argumentType = getJSType(argument);\n      JSType parameterType = getJSType(parameter);\n\n      validator.expectArgumentMatchesParameter(t, argument, argumentType, parameterType, call, ordinal + 1);\n    } else {\n      // Missing argument for a required parameter\n      // Handle missing arguments if necessary\n      break;\n    }\n    ordinal++;\n  }\n\n  if (hasVarArgs && arguments.hasNext()) {\n    Parameter varArgsParameter = parameters.get(parameters.size() - 1);\n    JSType varArgsType = getJSType(varArgsParameter);\n\n    while (arguments.hasNext()) {\n      Node argument = arguments.next();\n      JSType argumentType = getJSType(argument);\n\n      // Assume var-args are an array type, adjust as necessary\n      JSType expectedType = varArgsType;\n      validator.expectArgumentMatchesParameter(t, argument, argumentType, expectedType, call, ordinal + 1);\n      ordinal++;\n    }\n  } else if (arguments.hasNext()) {\n    // Too many arguments for non-varargs function\n    int numArgs = call.getChildCount() - 1;\n    int maxArgs = functionType.getMaxArguments();\n    if (numArgs > maxArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n             validator.getReadableJSTypeName(call.getFirstChild(), false),\n             String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n             maxArgs != Integer.MAX_VALUE ?\n             \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  } else {\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    if (numArgs < minArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n             validator.getReadableJSTypeName(call.getFirstChild(), false),\n             String.valueOf(numArgs), String.valueOf(minArgs),\n             functionType.getMaxArguments() != Integer.MAX_VALUE ?\n             \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}