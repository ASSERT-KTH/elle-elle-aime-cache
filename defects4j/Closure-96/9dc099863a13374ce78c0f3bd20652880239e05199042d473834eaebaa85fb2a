{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  \n  // Check all arguments against parameters\n  while (arguments.hasNext()) {\n    argument = arguments.next();\n    ordinal++;\n    \n    if (parameters.hasNext()) {\n      // If we have a formal parameter, check against it\n      parameter = parameters.next();\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    } else if (functionType.isVarArgs()) {\n      // If we're out of formal parameters but the function is varargs,\n      // check against the varargs type\n      JSType varArgsType = functionType.getVarArgsType();\n      if (varArgsType != null) {\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), varArgsType, call, ordinal);\n      }\n    } else {\n      // If we're out of parameters and it's not varargs, we'll handle\n      // the argument count check below\n      break;\n    }\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs != Integer.MAX_VALUE ?\n            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}