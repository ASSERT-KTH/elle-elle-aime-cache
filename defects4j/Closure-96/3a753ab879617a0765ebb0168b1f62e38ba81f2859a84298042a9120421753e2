{
    "generation": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  List<Parameter> parameters = functionType.getParameters();\n  int numParameters = parameters.size();\n  int numArgs = call.getChildCount() - 1;\n\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || (maxArgs != -1 && maxArgs < numArgs)) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE ?\n            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    return;\n  }\n\n  int ordinal = 0;\n  for (int i = 0; i < numParameters && arguments.hasNext(); i++) {\n    Node argument = arguments.next();\n    Parameter parameter = parameters.get(i);\n    ordinal++;\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // Handle variadic arguments\n  Parameter varParam = functionType.getVarParameter();\n  if (varParam != null) {\n    JSType varParamType = getJSType(varParam);\n    while (arguments.hasNext()) {\n      Node argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), varParamType, call, ordinal);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}