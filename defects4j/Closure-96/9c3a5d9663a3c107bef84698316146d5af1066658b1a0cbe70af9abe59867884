{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    List<Parameter> parameters = functionType.getParameters();\n    int numParams = parameters.size();\n    int numArgs = call.getChildCount() - 1;\n\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(minArgs),\n                maxArgs != Integer.MAX_VALUE ?\n                \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n        return;\n    }\n\n    Iterator<Parameter> paramsIter = parameters.iterator();\n    int ordinal = 0;\n    while (paramsIter.hasNext() && arguments.hasNext()) {\n        Parameter parameter = paramsIter.next();\n        Node argument = arguments.next();\n        ordinal++;\n\n        if (parameter.isRestParameter()) {\n            // Handle variadic arguments\n            JSType paramType = parameter.getType();\n            JSType argType = getJSType(argument);\n            if (argType != null && paramType != null) {\n                validator.expectArgumentMatchesParameter(t, argument, argType, paramType, call, ordinal);\n            }\n            // Consume the remaining arguments and check their types against the variadic parameter type\n            while (arguments.hasNext()) {\n                Node extraArg = arguments.next();\n                ordinal++;\n                validator.expectArgumentMatchesParameter(t, extraArg, getJSType(extraArg), paramType, call, ordinal);\n            }\n            break; // Exit the loop after handling variadic parameters\n        } else {\n            JSType paramType = parameter.getType();\n            JSType argType = getJSType(argument);\n            if (argType != null && paramType != null) {\n                validator.expectArgumentMatchesParameter(t, argument, argType, paramType, call, ordinal);\n            }\n        }\n    }\n\n    // If there are still arguments left after processing all parameters, report an error\n    if (arguments.hasNext()) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(minArgs),\n                maxArgs != Integer.MAX_VALUE ?\n                \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}