{
    "generation": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext() && parameters.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (numArgs < minArgs || numArgs > maxArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(minArgs),\n                maxArgs != Integer.MAX_VALUE ?\n                \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}