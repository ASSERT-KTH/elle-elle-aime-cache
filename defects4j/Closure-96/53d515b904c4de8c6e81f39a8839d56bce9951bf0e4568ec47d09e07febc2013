{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean inVarArgs = false;\n\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n\n      if (parameters.hasNext() || inVarArgs) {\n        if (!inVarArgs) {\n          parameter = parameters.next();\n          if (parameter.isVarArgs()) {\n            inVarArgs = true;\n          }\n        }\n\n        JSType expectedType = inVarArgs ? parameter.getJSType().getParameterType() : parameter.getJSType();\n        JSType actualType = getJSType(argument);\n\n        validator.expectArgumentMatchesParameter(t, argument, actualType, expectedType, call, ordinal);\n      } else {\n        // More arguments than parameters, and not in varargs mode\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), null, call, ordinal);\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || (maxArgs != FunctionType.UNKNOWN_ARITY && maxArgs < numArgs)) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE && maxArgs != FunctionType.UNKNOWN_ARITY ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}