{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node argument = null;\n\n    // Process all provided arguments\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n\n      if (parameters.hasNext()) {\n        // If parameters are available, validate them.\n        Node parameter = parameters.next();\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n      } else if (!functionType.hasVarArgs()) {\n        // If no parameters and not a var_args function, report an error.\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal),\n            String.valueOf(functionType.getMinArguments()),\n            functionType.getMaxArguments() != Integer.MAX_VALUE ?\n                \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n        return;\n      } else {\n        // If var_args is allowed, validate against the var_args type.\n        JSType varArgsType = functionType.getVarArgsType();\n        if (varArgsType != null) {\n          validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), varArgsType, call, ordinal);\n        }\n      }\n    }\n\n    // Check if there are too few arguments provided\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    if (numArgs < minArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), String.valueOf(minArgs),\n          functionType.getMaxArguments() != Integer.MAX_VALUE ?\n              \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}