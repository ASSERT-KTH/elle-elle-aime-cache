{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 1;\n  Node parameter = null;\n  Node argument = null;\n  while (arguments.hasNext()) {\n    if (parameters.hasNext()) {\n      parameter = parameters.next();\n    } else {\n      // If there are no parameters left in the list, then this must be a var_args function.\n      parameter = functionType.getLastParameter();\n    }\n    argument = arguments.next();\n    validator.expectArgumentMatchesParameter(t, argument,\n      getJSType(argument), getJSType(parameter), call, ordinal);\n    ordinal++;\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}