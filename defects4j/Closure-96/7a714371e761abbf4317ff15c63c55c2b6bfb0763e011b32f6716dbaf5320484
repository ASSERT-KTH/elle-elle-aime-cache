{
    "generation": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  List<Parameter> parameters = functionType.getParameters();\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  // Check if the number of arguments is within the acceptable range\n  if (numArgs < minArgs || (maxArgs != Integer.MAX_VALUE && numArgs > maxArgs)) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE ?\n            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    return;\n  }\n\n  int ordinal = 0;\n  for (Parameter parameter : parameters) {\n    if (!arguments.hasNext()) {\n      // No more arguments but parameters are still left\n      // This should not happen because we already checked argument counts\n      break;\n    }\n\n    Node argument = arguments.next();\n    ordinal++;\n\n    JSType parameterType = getJSType(parameter);\n    JSType argumentType = getJSType(argument);\n\n    validator.expectArgumentMatchesParameter(t, argument, argumentType, parameterType, call, ordinal);\n\n    if (parameter.isVarArgs()) {\n      // Handle varargs\n      while (arguments.hasNext()) {\n        Node extraArgument = arguments.next();\n        ordinal++;\n        JSType extraArgumentType = getJSType(extraArgument);\n        validator.expectArgumentMatchesParameter(t, extraArgument, extraArgumentType, parameterType, call, ordinal);\n      }\n      break; // Exit after handling varargs\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}