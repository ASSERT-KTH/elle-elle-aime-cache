{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  boolean isVarArgs = functionType.isVarArgs();\n\n  // Check all explicitly defined parameters\n  while (parameters.hasNext()) {\n    parameter = parameters.next();\n    if (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    } else if (!isVarArgs) {\n      // If there are no more arguments but the function is not var_args,\n      // report an error\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(call.getChildCount() - 1), \n          String.valueOf(functionType.getMinArguments()),\n          String.valueOf(functionType.getMaxArguments()));\n      return;\n    }\n  }\n\n  // Check var_args\n  while (arguments.hasNext()) {\n    argument = arguments.next();\n    ordinal++;\n    if (isVarArgs) {\n      JSType varArgType = functionType.getVarArgType();\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), varArgType, call, ordinal);\n    } else {\n      // If there are more arguments than parameters and the function is not var_args,\n      // report an error\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(call.getChildCount() - 1), \n          String.valueOf(functionType.getMinArguments()),\n          String.valueOf(functionType.getMaxArguments()));\n      return;\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}