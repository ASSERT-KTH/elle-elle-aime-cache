{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  while (arguments.hasNext() && parameters.hasNext()) {\n    // Increment ordinal here so rest parameters have a valid ordinal.\n    ordinal++;\n    parameter = parameters.next();\n    argument = arguments.next();\n    if (parameter.isVarArgs()) {\n      // We only support checking the type of the rest argument.\n      // If there are more arguments, we can't check their types according\n      // to JSDoc.\n      validator.expectArgumentMatchesRestParameter(t, argument,\n          getJSType(argument), call, ordinal);\n      break;\n    }\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // Check that rest arguments are correct.\n  while (arguments.hasNext()) {\n    argument = arguments.next();\n    parameter = functionType.getParameters().getOnlyElement();\n    // Parameter should have been a rest parameter, or it should not exist.\n    // The following check handles both cases.\n    if (parameter != null && !parameter.isVarArgs()) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(ordinal - 1),\n              String.valueOf(ordinal - 1), \"\");\n    }\n    validator.expectArgumentMatchesRestParameter(t, argument,\n        getJSType(argument), call, ordinal);\n    ordinal++;\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs != Integer.MAX_VALUE ?\n            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  } else if (maxArgs < numArgs && !functionType.getParameters().isEmpty() &&\n              !functionType.getParameters().getOnlyElement().isVarArgs()) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            \" and no more than \" + maxArgs + \" argument(s)\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}