{
    "generation": "  /**\n   * Visits the parameters of a CALL or a NEW node.\n   */\n  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean isVarArgs = functionType.isVarArgs();\n\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n\n      if (parameters.hasNext() || isVarArgs) {\n        if (parameters.hasNext()) {\n          parameter = parameters.next();\n        } else {\n          // For var_args, use the last parameter type\n          parameter = functionType.getLastParameter();\n        }\n\n        JSType argType = getJSType(argument);\n        JSType paramType = getJSType(parameter);\n\n        if (isVarArgs && !parameters.hasNext()) {\n          // For var_args, the type should be (paramType|undefined)\n          paramType = paramType.getLeastSupertype(JSTypeNative.VOID_TYPE);\n        }\n\n        validator.expectArgumentMatchesParameter(t, argument, argType, paramType, call, ordinal);\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}