{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  int numPassedArgs = 0; // track the number of passed arguments\n\n  // Check non-varargs parameters first\n  while (parameters.hasNext() && arguments.hasNext()) {\n    parameter = parameters.next();\n    argument = arguments.next();\n    ordinal++;\n    numPassedArgs++;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // If there are remaining arguments, check against varargs parameter (if any)\n  if (functionType.isVarArgs()) {\n    parameter = functionType.getVarArgsParameter();\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      numPassedArgs++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal + 1);\n      ordinal++;\n    }\n  }\n\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numPassedArgs || (maxArgs!= Integer.MAX_VALUE && maxArgs < numPassedArgs)) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numPassedArgs), String.valueOf(minArgs),\n            maxArgs!= Integer.MAX_VALUE?\n            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}