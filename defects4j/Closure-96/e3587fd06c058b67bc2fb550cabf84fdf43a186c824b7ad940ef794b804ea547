{
    "generation": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    List<ParamType> parameters = functionType.getParameters();\n    int numParams = parameters.size();\n    int numArgs = call.getChildCount() - 1;\n\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || (maxArgs != Integer.MAX_VALUE && maxArgs < numArgs)) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n               String.valueOf(numArgs), String.valueOf(minArgs),\n               maxArgs != Integer.MAX_VALUE ?\n               \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n        return;\n    }\n\n    for (int i = 0; i < numParams; i++) {\n        Node argument = arguments.next();\n        ParamType parameter = parameters.get(i);\n        validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(parameter), call, i + 1);\n    }\n\n    if (functionType.isVarArgs()) {\n        JSType varArgType = getJSType(parameters.get(numParams - 1));\n        while (arguments.hasNext()) {\n            Node argument = arguments.next();\n            validator.expectArgumentMatchesParameter(t, argument,\n                    getJSType(argument), varArgType, call, numParams + 1);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}