{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  boolean isVarArgs = functionType.isVarArgs();\n  while (arguments.hasNext()) {\n    argument = arguments.next();\n    ordinal++;\n\n    if (parameters.hasNext()) {\n      parameter = parameters.next();\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    } else if (isVarArgs) {\n      // If there are no parameters left but it's a var_args function,\n      // just check the type against the var_args type\n      Node varArgsParameter = functionType.getVarArgsParameter();\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(varArgsParameter), call, ordinal);\n    } else {\n      // If there are no parameters left and it's not a var_args function,\n      // report an error for excess arguments\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(ordinal), \n          String.valueOf(functionType.getMinArguments()),\n          String.valueOf(functionType.getMaxArguments()));\n      break;\n    }\n  }\n\n  if (!isVarArgs) {\n    int numParams = functionType.getParameterCount();\n    int numArgs = call.getChildCount() - 1;\n    if (numParams < numArgs) {\n      // already reported above\n    } else if (numParams > numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), \n          String.valueOf(functionType.getMinArguments()),\n          String.valueOf(functionType.getMaxArguments()));\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}