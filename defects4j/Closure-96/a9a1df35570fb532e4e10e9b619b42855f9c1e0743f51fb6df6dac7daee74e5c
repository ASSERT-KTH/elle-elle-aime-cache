{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  boolean isVarArgsFunction = functionType.isVarArgs();\n  while (arguments.hasNext()) {\n    argument = arguments.next();\n    ordinal++;\n\n    if (parameters.hasNext()) {\n      parameter = parameters.next();\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    } else if (!isVarArgsFunction) {\n      // If we're past the last parameter and the function is not varargs, we should report an error.\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(call.getChildCount() - 1), \n          String.valueOf(functionType.getMinArguments()), \n          String.valueOf(functionType.getMaxArguments()));\n    } else {\n      // If we're past the last parameter and the function is varargs, we should check the type of the varargs parameter.\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), functionType.getVarArgsType(), call, ordinal);\n    }\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  if (minArgs > numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(minArgs),\n        \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}