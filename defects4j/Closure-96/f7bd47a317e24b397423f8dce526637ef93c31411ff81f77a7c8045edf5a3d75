{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n\n  while (arguments.hasNext()) {\n    Node argument = arguments.next();\n    ordinal++;\n\n    if (parameters.hasNext()) {\n      Node parameter = parameters.next();\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    } else if (!functionType.isVarArgs()) {\n      // Report an error if the function is not variadic and there are extra arguments\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(ordinal),\n          String.valueOf(functionType.getMinArguments()),\n          functionType.getMaxArguments() != Integer.MAX_VALUE ?\n              \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n    } else {\n      // For a variadic function, validate the rest of the arguments\n      JSType varArgsType = functionType.getVarArgsType();\n      if (varArgsType != null) {\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), varArgsType, call, ordinal);\n      }\n    }\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (numArgs < minArgs || (!functionType.isVarArgs() && numArgs > maxArgs)) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE ?\n            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}