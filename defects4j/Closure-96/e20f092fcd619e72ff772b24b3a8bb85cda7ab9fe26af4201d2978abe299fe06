{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  List<Parameter> parameters = functionType.getParameters();\n  int numParams = parameters.size();\n  int numArgs = call.getChildCount() - 1; // number of arguments\n\n  int ordinal = 0;\n  while (arguments.hasNext() && ordinal < numParams) {\n    Node argument = arguments.next();\n    Parameter parameter = parameters.get(ordinal);\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // Check if there are remaining arguments and the function accepts var_args\n  if (arguments.hasNext() && functionType.isVarArgs()) {\n    Parameter varParam = parameters.get(numParams - 1);\n    while (arguments.hasNext()) {\n      Node argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(varParam), call, ordinal);\n    }\n  } else if (arguments.hasNext()) {\n    // Too many arguments\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n        functionType.getMaxArguments() != Integer.MAX_VALUE ?\n        \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n  } else if (numArgs < functionType.getMinArguments()) {\n    // Too few arguments\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n        functionType.getMaxArguments() != Integer.MAX_VALUE ?\n        \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}