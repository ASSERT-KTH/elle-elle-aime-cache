{
    "generation": "/**\n * Visits the parameters of a CALL or a NEW node.\n */\nprivate void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  boolean isVarArgs = functionType.isVarArgs();\n  \n  // Separate loops to handle varargs and non-varargs cases\n  while (parameters.hasNext()) {\n    parameter = parameters.next();\n    if (arguments.hasNext()) {\n      argument = arguments.next();\n    } else if (isVarArgs) {\n      // No more arguments, but varargs allows this\n      break;\n    } else {\n      // No more arguments, but not varargs, report error\n      report(t, call, MISSING_ARGUMENTS,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(ordinal + 1));\n      return;\n    }\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // Check for extra arguments in non-varargs case\n  if (!isVarArgs && arguments.hasNext()) {\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(ordinal), \n          String.valueOf(functionType.getMinArguments()), \n          String.valueOf(functionType.getMaxArguments()));\n    }\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs!= Integer.MAX_VALUE?\n            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}