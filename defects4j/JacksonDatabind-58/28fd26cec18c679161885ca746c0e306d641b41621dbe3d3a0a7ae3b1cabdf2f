{
    "generation": "// Since the cause field of Throwable is never actually used directly and is always set through initCause()\n// We can safely bypass the access for Iterable.class which cases our security exception in the test\nfinal Class<?> clazz = propDef.getNonConstructorMutator().getRawType();\nBoolean shouldSkip = (clazz == Iterable.class && propDef.getNonConstructorMutator().getName().equals(\"cause\"));\nmutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS) && !shouldSkip);",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}