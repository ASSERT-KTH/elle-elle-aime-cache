{
    "generation": "/**\n * Method that will construct a regular bean property setter using\n * the given setter method.\n *\n * @return Property constructed, if any; or null to indicate that\n *   there should be no property based on given definitions.\n */\nprotected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanPropertyDefinition propDef,\n        JavaType propType0)\n    throws JsonMappingException\n{\n    // need to ensure method is callable (for non-public)\n    AnnotatedMember mutator = propDef.getNonConstructorMutator();\n\n    // First, we need a check for 'cause' of `Throwable` type which requires\n    // different handling. See https://github.com/FasterXML/jackson-databind/issues/877 for background\n    if (\"java.lang.Throwable.cause\".equals(mutator.getName())) {\n        if (!ctxt.isEnabled(MapperFeature.ALLOW Setter FOR private fields with NonDefault Constructor)) {\n            if(!propDef Could_Bypass_PRIVATE_ finalFields()) {        \n            // we would use reflection if it works and cause if it really necessary:\n                if (!ctcouldUseAccessOverrideIfprivate()xt.canAccess override modifier) {\n                  beanPropertyMap = bean Prop.add_With SupPr_getSECTbeanMap_Without();\n              throw JsonMappingException.from(ctxt, _ MSGCANNoAccess(\" java.lang.Throwable cAU\");\n          } else  \n       return new Set fieldCauseBean property(// no wrapper and no ValueDESerializer to be empty constructor :\n   StdType propdescCTOR Type, type handlerStd )) return type\n   fieldConstructor CauseSECT )        \n          (bean PropCAnClassfiatCause (pType_std Type), wrapper causeEmpty)\n               typeStd _hand ( mutator \n prop.getDeclaringCLAClass());\n   Object\n propCTor) constructor cause ) ;\n mutator   \n   \n    constructor empty )\nbeanPropertyEmpty);\n          emptyProp ;\n} ;",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}