{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n    if (n.isGetProp()) {\n        ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n        if (objectType != null) {\n            String propName = n.getLastChild().getString();\n            if (objectType.getConstructor() != null &&\n                objectType.getConstructor().isInterface()) {\n                objectType = FunctionType.getTopDefiningInterface(\n                    objectType, propName);\n            } else {\n                // classes\n                ObjectType originalType = objectType;\n                while (objectType != null && !objectType.hasOwnProperty(propName)) {\n                    objectType = objectType.getImplicitPrototype();\n                }\n                // Changed objectType to originalType for error message\n                if (objectType == null && originalType != null) {\n                    return originalType.toString();\n                }\n            }\n\n            if (objectType != null &&\n                (objectType.getConstructor() != null ||\n                 objectType.isFunctionPrototypeType())) {\n                return objectType.toString() + \".\" + propName;\n            }\n        }\n    }\n\n    // ... rest of the code\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}