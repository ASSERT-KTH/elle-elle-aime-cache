{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n\n    ObjectType objectType = null;\n    String propName = null;\n\n    // For GETPROP, navigate through the prototype chain to find the original definition\n    if (n.isGetProp()) {\n      objectType = getJSType(n.getFirstChild()).dereference();\n      propName = n.getLastChild().getString();\n      if (objectType != null) {\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n      }\n    }\n\n    // Return the readable name\n    if (objectType != null && propName != null) {\n      return getReadableTypeName(objectType) + \".\" + propName;\n    }\n\n    // Apply dereference if needed\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n\n    // Return the readable type name\n    return getReadableTypeName(type);\n}\n\n// Helper function to get a readable name for a given type\nprivate String getReadableTypeName(JSType type) {\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}