{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n    JSType type = getJSType(n);\n    if (n.isGetProp()) {\n        ObjectType objectType = type.dereference();\n        if (objectType != null) {\n            String propName = n.getLastChild().getString();\n            if (objectType.getConstructor() != null && objectType.getConstructor().isInterface()) {\n                objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n            } else {\n                // classes\n                while (objectType != null && !objectType.hasOwnProperty(propName)) {\n                    objectType = objectType.getImplicitPrototype();\n                }\n            }\n            if (objectType != null &&\n                (objectType.getConstructor() != null || objectType.isFunctionPrototypeType())) {\n                return objectType.toString() + \".\" + propName;\n            }\n        }\n    }\n\n    if (dereference) {\n        ObjectType dereferenced = type.dereference();\n        if (dereferenced != null) {\n            type = dereferenced;\n        }\n    }\n\n    // Incorporate more specific conditions here to correctly identify function prototype types and object types with constructors\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n        return type.toString();\n    }\n\n    // Handle GETPROP nodes more specifically here\n    if (n.isGetProp()) {\n        Node parent = n.getFirstChild();\n        JSType parentType = getJSType(parent);\n        ObjectType parentObjectType = parentType.dereference();\n        if (parentObjectType != null) {\n            return parentObjectType.toString() + \".\" + n.getLastChild().getString();\n        }\n    }\n\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n        return qualifiedName;\n    } else if (type.isFunctionType()) {\n        // Don't show complex function names.\n        return \"function\";\n    } else {\n        return type.toString();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}