{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n\n  // The best type name is the actual type name.\n\n  // If we're analyzing a GETPROP, the property may be inherited by the\n  // prototype chain. So climb the prototype chain and find out where\n  // the property was originally defined.\n  if (n.isGetProp()) {\n    JSType objectType = getJSType(n.getFirstChild());\n    if (objectType != null) {\n      objectType = dereference ? objectType.dereference() : objectType;\n      if (objectType instanceof ObjectType) {\n        String propName = n.getLastChild().getString();\n        ObjectType originalType = findOriginalType((ObjectType) objectType, propName);\n        if (originalType != null) {\n          // Don't show complex function names or anonymous types.\n          // Instead, try to get a human-readable type name.\n          if (originalType.getConstructor() != null ||\n              originalType.isFunctionPrototypeType()) {\n            return originalType.toString() + \".\" + propName;\n          }\n        }\n      }\n    }\n  }\n\n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType dereferenced = type.dereference();\n    if (dereferenced != null) {\n      type = dereferenced;\n    }\n  }\n  if (type.isFunctionPrototypeType() ||\n      (type.toObjectType() != null &&\n       type.toObjectType().getConstructor() != null)) {\n    return type.toString();\n  }\n  String qualifiedName = n.getQualifiedName();\n  if (qualifiedName != null) {\n    return qualifiedName;\n  } else if (type.isFunctionType()) {\n    // Don't show complex function names.\n    return \"function\";\n  } else {\n    return type.toString();\n  }\n}\n\nprivate ObjectType findOriginalType(ObjectType objectType, String propName) {\n  if (objectType == null) {\n    return null;\n  }\n  if (objectType.hasOwnProperty(propName)) {\n    return objectType;\n  }\n  if (objectType.getConstructor() != null && objectType.getConstructor().isInterface()) {\n    return FunctionType.getTopDefiningInterface(objectType, propName);\n  } else {\n    // classes\n    ObjectType proto = objectType.getImplicitPrototype();\n    return findOriginalType(proto, propName);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}