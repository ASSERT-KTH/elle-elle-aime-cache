{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n  // The best type name is the actual type name.\n\n  // If we're analyzing a GETPROP, the property may be inherited by the\n  // prototype chain. So climb the prototype chain and find out where\n  // the property was originally defined.\n  if (n.isGetProp()) {\n    JSType type = getJSType(n.getFirstChild());\n    if (type != null) {\n      ObjectType objectType = type.toObjectType();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        // Find the type where the property is originally defined\n        while (objectType != null && !objectType.hasOwnProperty(propName)) {\n          objectType = objectType.getImplicitPrototype();\n        }\n        if (objectType != null) {\n          // Get the constructor type if available\n          FunctionType constructor = objectType.getConstructor();\n          if (constructor != null) {\n            return constructor.getDisplayName() + \".prototype.\" + propName;\n          } else if (objectType.isFunctionPrototypeType()) {\n            return \"Function.prototype.\" + propName;\n          } else {\n            return objectType.getDisplayName() + \".\" + propName;\n          }\n        }\n      }\n    }\n  }\n\n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType dereferenced = type.dereference();\n    if (dereferenced != null) {\n      type = dereferenced;\n    }\n  }\n  if (type.isFunctionPrototypeType() ||\n      (type.toObjectType() != null &&\n       type.toObjectType().getConstructor() != null)) {\n    return type.getDisplayName();\n  }\n  String qualifiedName = n.getQualifiedName();\n  if (qualifiedName != null) {\n    return qualifiedName;\n  } else if (type.isFunctionType()) {\n    // Don't show complex function names.\n    return \"function\";\n  } else {\n    return type.getDisplayName();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}