{
    "generation": "Node parseInputs() {\n    boolean devMode = options.devMode != DevMode.OFF;\n\n    if (externsRoot != null) {\n        externsRoot.detachChildren();\n    }\n    if (jsRoot != null) {\n        jsRoot.detachChildren();\n    }\n\n    jsRoot = IR.block();\n    jsRoot.setIsSyntheticBlock(true);\n\n    externsRoot = IR.block();\n    externsRoot.setIsSyntheticBlock(true);\n\n    externAndJsRoot = IR.block(externsRoot, jsRoot);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    if (options.tracer.isOn()) {\n        tracker = new PerformanceTracker(jsRoot, options.tracer);\n        addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer = newTracer(\"parseInputs\");\n\n    try {\n        for (CompilerInput input : externs) {\n            Node n = input.getAstRoot(this);\n            if (n != null) {\n                externsRoot.addChildToBack(n);\n            }\n        }\n\n        if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n            processAMDAndCommonJSModules();\n        }\n\n        if (options.dependencyOptions.needsManagement() && !options.skipAllPasses && options.closurePass) {\n            manageDependencies();\n        }\n\n        for (CompilerInput input : inputs) {\n            Node n = input.getAstRoot(this);\n\n            if (n == null || n.getJSDocInfo() == null) {\n                continue;\n            }\n\n            if (n.getJSDocInfo().isExterns()) {\n                externsRoot.addChildToBack(n);\n                input.setIsExtern(true);\n            } else {\n                if (devMode) {\n                    runSanityCheck();\n                }\n                if (options.sourceMapOutputPath != null || options.nameReferenceReportPath != null) {\n                    SourceInformationAnnotator sia = new SourceInformationAnnotator(input.getName(), devMode);\n                    NodeTraversal.traverse(this, n, sia);\n                }\n                jsRoot.addChildToBack(n);\n            }\n        }\n        return externAndJsRoot;\n    } finally {\n        stopTracer(tracer, \"parseInputs\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}