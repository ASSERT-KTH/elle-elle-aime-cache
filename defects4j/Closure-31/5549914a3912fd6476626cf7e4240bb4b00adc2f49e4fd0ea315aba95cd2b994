{
    "generation": "if (options.dependencyOptions.needsManagement() &&\n    !options.skipAllPasses &&\n    options.closurePass) {\n  for (CompilerInput input : inputs) {\n    for (String provide : input.getProvides()) {\n      getTypeRegistry().forwardDeclareType(provide);\n    }\n  }\n\n  try {\n    inputs =\n        (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n        .manageDependencies(options.dependencyOptions, inputs);\n    staleInputs = true;\n  } catch (CircularDependencyException e) {\n    report(JSError.make(\n        JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n\n    if (hasErrors()) {\n      return null;\n    }\n  } catch (MissingProvideException e) {\n    report(JSError.make(\n        MISSING_ENTRY_ERROR, e.getMessage()));\n\n    if (hasErrors()) {\n      return null;\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}