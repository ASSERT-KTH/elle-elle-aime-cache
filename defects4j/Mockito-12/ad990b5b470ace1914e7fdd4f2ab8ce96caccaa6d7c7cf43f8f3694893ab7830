{
    "generation": "/**\n * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. \n * Handles nested generics by recursively resolving the type.\n * \n * @param field\n * @return\n */\npublic Class<?> getGenericType(Field field) {        \n    Type generic = field.getGenericType();\n    if (generic!= null && generic instanceof ParameterizedType) {\n        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        if (actual instanceof ParameterizedType) {\n            // Handle nested generics\n            return getGenericTypeFromParameterizedType((ParameterizedType) actual);\n        } else if (actual instanceof Class) {\n            // Direct Class reference\n            return (Class<?>) actual;\n        } else {\n            // Handle other types (e.g., TypeVariable, WildcardType)\n            throw new UnsupportedOperationException(\"Unsupported type: \" + actual.getClass().getName());\n        }\n    }\n    \n    return Object.class;\n}\n\n// Helper method to handle nested generics\nprivate Class<?> getGenericTypeFromParameterizedType(ParameterizedType type) {\n    Class<?> rawType = (Class<?>) type.getRawType();\n    if (rawType.equals(Set.class) || rawType.equals(List.class) || rawType.equals(Map.class)) {\n        // For common collection types, return the raw type if we can't resolve the nested generic\n        return rawType;\n    }\n    Type actual = type.getActualTypeArguments()[0];\n    if (actual instanceof ParameterizedType) {\n        // Recursively resolve nested generics\n        return getGenericTypeFromParameterizedType((ParameterizedType) actual);\n    } else if (actual instanceof Class) {\n        // Direct Class reference within the nested generic\n        return (Class<?>) actual;\n    } else {\n        // If we can't resolve the type, return the raw type\n        return rawType;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}