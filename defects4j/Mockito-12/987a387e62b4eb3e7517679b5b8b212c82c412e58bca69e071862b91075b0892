{
    "generation": "/**\n * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. \n * Handles nested generics by recursively resolving the type.\n * \n * @param field\n * @return\n */\npublic Class<?> getGenericType(Field field) {        \n    Type generic = field.getGenericType();\n    if (generic!= null && generic instanceof ParameterizedType) {\n        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        if (actual instanceof ParameterizedType) {\n            // Handle nested generics by recursively resolving the type\n            return getGenericTypeFromParameterizedType((ParameterizedType) actual);\n        } else if (actual instanceof TypeVariable) {\n            // Type variables are not instantiation-time constants, so return Object.class\n            return Object.class;\n        } else if (actual instanceof WildcardType) {\n            // For wildcard types, return the upper bound or Object.class if unbounded\n            return getBoundsFromWildcard((WildcardType) actual);\n        } else if (actual instanceof Class) {\n            // If the actual type is a Class, return it\n            return (Class<?>) actual;\n        } else {\n            // This should not happen, but handle it just in case\n            throw new IllegalStateException(\"Unhandled type: \" + actual);\n        }\n    }\n    \n    return Object.class;\n}\n\n// Helper method to handle nested generics\nprivate Class<?> getGenericTypeFromParameterizedType(ParameterizedType type) {\n    Type rawType = type.getRawType();\n    if (rawType instanceof Class) {\n        return (Class<?>) rawType;\n    } else {\n        throw new IllegalStateException(\"Cannot resolve raw type to Class: \" + rawType);\n    }\n}\n\n// Helper method to handle wildcard types\nprivate Class<?> getBoundsFromWildcard(WildcardType type) {\n    Type[] upperBounds = type.getUpperBounds();\n    if (upperBounds.length > 0) {\n        Type bound = upperBounds[0];\n        if (bound instanceof ParameterizedType) {\n            return getGenericTypeFromParameterizedType((ParameterizedType) bound);\n        } else if (bound instanceof Class) {\n            return (Class<?>) bound;\n        }\n    }\n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}