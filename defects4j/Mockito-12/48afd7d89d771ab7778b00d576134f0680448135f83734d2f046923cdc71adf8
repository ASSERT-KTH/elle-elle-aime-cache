{
    "generation": "/**\n * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. \n * \n * @param field\n * @return\n */\npublic Class getGenericType(Field field) {        \n    Type generic = field.getGenericType();\n    if (generic!= null && generic instanceof ParameterizedType) {\n        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        // handle nested generics\n        if (actual instanceof ParameterizedType) {\n            return Object.class; // cannot resolve nested generics\n        } else {\n            try {\n                // attempt to cast the type to a Class\n                return (Class) actual;\n            } catch (ClassCastException e) {\n                // if the cast fails, return Object.class\n                return Object.class;\n            }\n        }\n    }\n    \n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}