{
    "generation": "/**\n * Finds the generic type (parametrized type) of the field. If the field is not generic, it returns Object.class.\n * \n * @param field The field to analyze\n * @return The generic type of the field, or Object.class if not generic\n */\npublic Class getGenericType(Field field) {\n    Type generic = field.getGenericType();\n    \n    if (generic != null) {\n        if (generic instanceof ParameterizedType) {\n            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n            if (actual instanceof Class) {\n                return (Class) actual;\n            } else if (actual instanceof ParameterizedType) {\n                // Handle nested generics\n                return (Class) ((ParameterizedType) actual).getRawType();\n            }\n        } else if (generic instanceof Class) {\n            // If the generic type is a Class, return it directly\n            return (Class) generic;\n        }\n    }\n    \n    // If we can't determine the generic type, return Object.class\n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}