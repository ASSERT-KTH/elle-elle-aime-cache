{
    "generation": "/**\n * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. \n * Handles nested generics by recursively resolving the type.\n * \n * @param field\n * @return\n */\npublic Class<?> getGenericType(Field field) {        \n    Type generic = field.getGenericType();\n    if (generic!= null && generic instanceof ParameterizedType) {\n        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        if (actual instanceof ParameterizedType) {\n            // Handle nested generics\n            return getGenericTypeFromParameterizedType((ParameterizedType) actual);\n        } else if (actual instanceof Class) {\n            return (Class<?>) actual;\n        } else {\n            // Handle TypeVariable, WildcardType, etc. by returning a bound if possible\n            return getTypeBound(actual);\n        }\n    }\n    \n    return Object.class;\n}\n\n// Helper method to handle nested generics\nprivate Class<?> getGenericTypeFromParameterizedType(ParameterizedType type) {\n    Type rawType = type.getRawType();\n    if (rawType instanceof Class) {\n        return (Class<?>) rawType;\n    } else {\n        // If raw type is not a Class, it's likely a TypeVariable or WildcardType, return a bound if possible\n        return getTypeBound(rawType);\n    }\n}\n\n// Helper method to get a bound from TypeVariable, WildcardType, etc.\nprivate Class<?> getTypeBound(Type type) {\n    if (type instanceof TypeVariable) {\n        Type[] bounds = ((TypeVariable<?>) type).getBounds();\n        return bounds.length > 0? (Class<?>) bounds[0] : Object.class;\n    } else if (type instanceof WildcardType) {\n        Type[] upperBounds = ((WildcardType) type).getUpperBounds();\n        return upperBounds.length > 0? (Class<?>) upperBounds[0] : Object.class;\n    } else {\n        // If all else fails, return Object.class\n        return Object.class;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}