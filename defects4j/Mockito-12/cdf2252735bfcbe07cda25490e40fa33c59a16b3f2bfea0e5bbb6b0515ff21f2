{
    "generation": "    /**\n     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.\n     *\n     * @param field\n     * @return\n     */\n    public Class<?> getGenericType(Field field) {\n        Type generic = field.getGenericType();\n        Type actual = Object.class; // Default to Object.class\n\n        if (generic != null && generic instanceof ParameterizedType) {\n            ParameterizedType paramType = (ParameterizedType) generic;\n            actual = paramType.getActualTypeArguments()[0];\n\n            if (actual instanceof ParameterizedType) {\n                // Handle nested generics\n                actual = ((ParameterizedType) actual).getRawType();\n            } else if (actual instanceof Class<?>) {\n                // Directly handle Class type\n                actual = (Class<?>) actual;\n            }\n        }\n\n        return (Class<?>) actual;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}