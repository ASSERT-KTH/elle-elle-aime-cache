{
    "generation": "/**\n * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. \n * Handles nested generics by recursively resolving the type.\n * \n * @param field\n * @return\n */\npublic Class<?> getGenericType(Field field) {        \n    Type generic = field.getGenericType();\n    if (generic!= null && generic instanceof ParameterizedType) {\n        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        if (actual instanceof ParameterizedType) {\n            // Handle nested generics\n            return getGenericTypeFromParameterizedType((ParameterizedType) actual);\n        } else if (actual instanceof Class) {\n            // Direct class reference\n            return (Class<?>) actual;\n        } else {\n            // Handle other type representations (e.g., TypeVariable, WildcardType)\n            // For simplicity, this example returns Object.class for unhandled cases\n            // You may need to extend this based on specific requirements\n            return Object.class;\n        }\n    }\n    \n    return Object.class;\n}\n\n// Helper method to recursively handle nested generics\nprivate Class<?> getGenericTypeFromParameterizedType(ParameterizedType type) {\n    Type rawType = type.getRawType();\n    if (rawType instanceof Class) {\n        return (Class<?>) rawType;\n    } else {\n        // If the raw type is not a Class (e.g., another ParameterizedType), \n        // for simplicity, this example returns Object.class\n        // You may need to extend this based on specific requirements\n        return Object.class;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}