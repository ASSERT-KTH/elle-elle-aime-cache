{
    "generation": "/**\n * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. \n * Handles nested generics by recursively resolving the type.\n * \n * @param field\n * @return\n */\npublic Class<?> getGenericType(Field field) {        \n    Type generic = field.getGenericType();\n    if (generic!= null && generic instanceof ParameterizedType) {\n        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        if (actual instanceof ParameterizedType) {\n            // Handle nested generics\n            return (Class<?>) getGenericTypeFromParameterizedType((ParameterizedType) actual);\n        } else if (actual instanceof Class) {\n            return (Class<?>) actual;\n        } else {\n            // Handle cases where actual type is not a Class (e.g., TypeVariable, WildcardType)\n            return Object.class;\n        }\n    }\n    \n    return Object.class;\n}\n\n// Helper method to recursively resolve type from ParameterizedType\nprivate Class<?> getGenericTypeFromParameterizedType(ParameterizedType type) {\n    Class<?> rawType = (Class<?>) type.getRawType();\n    if (rawType.getTypeParameters().length == 0) {\n        return rawType;\n    }\n    // If the raw type has type parameters, we return the first type argument as a Class\n    // This assumption might need adjustment based on the specific requirements of handling nested generics\n    Type actual = type.getActualTypeArguments()[0];\n    if (actual instanceof ParameterizedType) {\n        return getGenericTypeFromParameterizedType((ParameterizedType) actual);\n    } else if (actual instanceof Class) {\n        return (Class<?>) actual;\n    } else {\n        return Object.class;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}