{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // Skip VOID nodes as they are extra semicolons, which are allowed.\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n\n    if (parent == null) {\n        return;\n    }\n\n    // Skip ExprResult nodes as they are handled elsewhere.\n    if (n.isExprResult()) {\n        return;\n    }\n\n    // Allow QualifiedName nodes with JSDoc information.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        return;\n    }\n\n    // Check if the expression result is used.\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n\n    // Check if the node is a simple operator.\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n    // Handle comma operators separately.\n    if (parent.getType() == Token.COMMA) {\n        // If it's the last child in a comma chain, check if the result is used.\n        if (n == parent.getLastChild()) {\n            if (!isResultUsed) {\n                // Traverse ancestors to ensure it's not used in EXPR_RESULT or BLOCK.\n                for (Node ancestor : parent.getAncestors()) {\n                    int ancestorType = ancestor.getType();\n                    if (ancestorType == Token.COMMA) continue;\n                    if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n                        reportUselessCode(t, n, isSimpleOp);\n                        return;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n        return;\n    }\n\n    // For other parents, check if they are not EXPR_RESULT or BLOCK.\n    if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n        // Special case for FOR loops with specific structures.\n        if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n            (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n            return;\n        }\n    }\n\n    // Check if the node is simple or has no side effects.\n    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) && !isResultUsed) {\n        reportUselessCode(t, n, isSimpleOp);\n    }\n}\n\nprivate void reportUselessCode(NodeTraversal t, Node n, boolean isSimpleOp) {\n    String msg;\n    if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n              \"' operator is not being used.\";\n    } else {\n        msg = \"This code lacks side-effects. Is there a bug?\";\n    }\n\n    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}