{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n        return;\n    }\n\n    if (parent == null) {\n        return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n        return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n        if (isResultUsed) {\n            return;\n        }\n        if (n == parent.getLastChild()) {\n            for (Node an : parent.getAncestors()) {\n                int ancestorType = an.getType();\n                if (ancestorType == Token.COMMA) continue;\n                if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n                else break;\n            }\n        }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n        if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n            return;\n        }\n    }\n    if (\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n            msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n            msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n                \"' operator is not being used.\";\n        }\n\n        t.getCompiler().report(\n            t.makeError(n, level, USELESS_CODE_ERROR, msg));\n        // TODO(johnlenz): determine if it is necessary to\n        // try to protect side-effect free statements as well.\n        if (!NodeUtil.isStatement(n)) {\n            problemNodes.add(n);\n        }\n    }\n    \n    // New condition to handle cases like 'if(x);'\n    if (n.isBlock() && parent.isIf()) {\n        if (n.hasChildren() && n.getFirstChild().isOnlyWhiteSpace()) {\n            t.getCompiler().report(\n                t.makeError(n.getFirstChild(), level, USELESS_CODE_ERROR, \"Empty block in if statement\"));\n            problemNodes.add(n.getFirstChild());\n        }\n    }\n\n    // Handle cases like 'x == 3;' and 'x == bar();'\n    if (n.isExprResult() && n.getFirstChild().isGetProp()) {\n        if (!NodeUtil.isExpressionResultUsed(n.getFirstChild())) {\n            t.getCompiler().report(\n                t.makeError(n.getFirstChild(), level, USELESS_CODE_ERROR, \"Property access with no side effects\"));\n            problemNodes.add(n.getFirstChild());\n        }\n    }\n\n    // Handle cases like 'var x = 'test'\\n'str''\n    if (n.isString() && parent.isExprResult() && !isResultUsed) {\n        t.getCompiler().report(\n            t.makeError(n, level, USELESS_CODE_ERROR, \"Unused string literal\"));\n        problemNodes.add(n);\n    }\n\n    // Handle cases like 'a = (5, 6)', 'a = (bar(), 6, 7)', etc.\n    if (parent.isAssign() && n.isComma()) {\n        Node lastChild = n.getLastChild();\n        if (!NodeUtil.mayHaveSideEffects(lastChild, t.getCompiler())) {\n            t.getCompiler().report(\n                t.makeError(lastChild, level, USELESS_CODE_ERROR, \"Useless expression in comma operator\"));\n            problemNodes.add(lastChild);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}