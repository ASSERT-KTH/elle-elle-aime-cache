{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() || n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    if (n.isExprResult()) {\n      return;\n    }\n\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) {\n            continue;\n          }\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n            return;\n          }\n          else {\n            break;\n          }\n        }\n      }\n    }\n    else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n\n    if (n.isString() || isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n      String msg;\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      }\n      else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      else {\n        msg = \"This code lacks side-effects. Is there a bug?\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}