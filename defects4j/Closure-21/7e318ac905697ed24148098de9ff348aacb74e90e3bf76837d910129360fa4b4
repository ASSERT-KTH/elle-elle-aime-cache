{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n\n    if (parent == null) {\n        return;\n    }\n\n    // Do not try to remove a block or an expr result. These cases handle by child visitors.\n    if (n.isExprResult()) {\n        return;\n    }\n\n    // Ignore no-op statements meant for attaching JSDoc information.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n    if (parent.getType() == Token.COMMA) {\n        if (isResultUsed) {\n            return;\n        }\n        if (n == parent.getLastChild()) {\n            for (Node an : parent.getAncestors()) {\n                int ancestorType = an.getType();\n                if (ancestorType == Token.COMMA) continue;\n                if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n                else break;\n            }\n        }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n        if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 && \n              (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n            return;\n        }\n    }\n\n    if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n            msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n            msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n                  \"' operator is not being used.\";\n        }\n\n        t.getCompiler().report(\n            t.makeError(n, level, USELESS_CODE_ERROR, msg));\n\n        // Wrap the node in a preserving call to prevent its removal.\n        if (!NodeUtil.isStatement(n)) {\n            Node preservingCall = IR.call(IR.name(\"JSCOMPILER_PRESERVE\").srcref(n), n.detach());\n            parent.replaceChild(n, preservingCall);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}