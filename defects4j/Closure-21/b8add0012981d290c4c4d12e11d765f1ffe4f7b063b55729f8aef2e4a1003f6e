{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // Ignore VOID nodes (extra semicolons at the block level)\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n\n    if (parent == null) {\n        return;\n    }\n\n    // Do not try to remove a block or an expr result.\n    // These cases are handled elsewhere.\n    if (n.isExprResult()) {\n        return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n    if (parent.getType() == Token.COMMA) {\n        // For comma operators, check the last child\n        if (n == parent.getLastChild()) {\n            if (!isResultUsed && !(n.isString() && isSimpleOp)) {\n                String msg = \"This code lacks side-effects. Is there a bug?\";\n                if (n.isString()) {\n                    msg = \"Is there a missing '+' on the previous line?\";\n                } else if (isSimpleOp) {\n                    msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n                          \"' operator is not being used.\";\n                }\n                t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n                if (!NodeUtil.isStatement(n)) {\n                    problemNodes.add(n);\n                }\n            }\n        }\n        return;\n    }\n\n    // For other parent types, check if the expression lacks side effects\n    if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n        // Special case for FOR loop initialization and condition\n        if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n            (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n            return;\n        }\n\n        if (!(isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n            return;\n        }\n\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n            msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n            msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n                  \"' operator is not being used.\";\n        }\n\n        t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n        if (!NodeUtil.isStatement(n)) {\n            problemNodes.add(n);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}