{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  // I've been unable to think of any cases where this indicates a bug,\n  // and apparently some people like keeping these semicolons around,\n  // so we'll allow it.\n  if (n.isEmpty() ||\n      n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (n.isExprResult()) {\n    return;\n  }\n\n  // This no-op statement was there so that JSDoc information could\n  // be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo()!= null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  \n  // Fix: Check for comma expressions in more cases\n  if (parent.getType() == Token.COMMA) {\n    if (isResultUsed) {\n      return;\n    }\n    if (n!= parent.getLastChild() &&!isUsedInCommaExpression(n, parent)) {\n      reportUselessCode(t, n, isSimpleOp);\n      return;\n    }\n    for (Node an : parent.getAncestors()) {\n      int ancestorType = an.getType();\n      if (ancestorType == Token.COMMA) continue;\n      if (ancestorType!= Token.EXPR_RESULT && ancestorType!= Token.BLOCK) return;\n      else break;\n    }\n  } else if (parent.getType()!= Token.EXPR_RESULT && parent.getType()!= Token.BLOCK) {\n    if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n      if (!isUsedInParenExpression(n, parent)) {\n        reportUselessCode(t, n, isSimpleOp);\n      }\n      return;\n    }\n  }\n  if ((isSimpleOp ||!NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    reportUselessCode(t, n, isSimpleOp);\n  }\n}\n\n// Helper method to check if a node is used in a comma expression\nprivate boolean isUsedInCommaExpression(Node n, Node parent) {\n  Node grandParent = parent.getParent();\n  if (grandParent == null) return false;\n  if (grandParent.getType() == Token.ASSIGN) return true; // e.g., `a = (b, c)`\n  if (grandParent.getType() == Token.RETURN) return true; // e.g., `return (a, b)`\n  return isUsedInParenExpression(n, grandParent);\n}\n\n// Helper method to check if a node is used in a parenthesized expression\nprivate boolean isUsedInParenExpression(Node n, Node parent) {\n  Node grandParent = parent.getParent();\n  if (grandParent == null) return false;\n  if (grandParent.getType() == Token.PAREN) { // e.g., `(a, b)` or `(a == b)`\n    Node greatGrandParent = grandParent.getParent();\n    if (greatGrandParent!= null) {\n      int greatGrandParentType = greatGrandParent.getType();\n      if (greatGrandParentType == Token.IF || greatGrandParentType == Token.WHILE \n          || greatGrandParentType == Token.FOR || greatGrandParentType == Token.DO) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n// Helper method to report useless code\nprivate void reportUselessCode(NodeTraversal t, Node n, boolean isSimpleOp) {\n  String msg = \"This code lacks side-effects. Is there a bug?\";\n  if (n.isString()) {\n    msg = \"Is there a missing '+' on the previous line?\";\n  } else if (isSimpleOp) {\n    msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n        \"' operator is not being used.\";\n  }\n\n  t.getCompiler().report(\n      t.makeError(n, level, USELESS_CODE_ERROR, msg));\n  // TODO(johnlenz): determine if it is necessary to\n  // try to protect side-effect free statements as well.\n  if (!NodeUtil.isStatement(n)) {\n    problemNodes.add(n);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}