{
    "generation": "import org.jsoup.nodes.Entities;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Entities {\n    private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");\n\n    public static String unescape(String string) {\n        if (!string.contains(\"&\")) {\n            return string;\n        }\n\n        Matcher m = unescapePattern.matcher(string);\n        StringBuilder accum = new StringBuilder(string.length());\n\n        int lastEnd = 0;\n        while (m.find()) {\n            // Append the text before the match\n            accum.append(string, lastEnd, m.start());\n\n            // Try to resolve the entity\n            String replacement = resolveEntity(m);\n            if (replacement != null) {\n                accum.append(replacement);\n            } else {\n                // If not resolved, keep the original entity\n                accum.append(m.group(0));\n            }\n\n            lastEnd = m.end();\n        }\n        // Append any remaining text after the last match\n        accum.append(string.substring(lastEnd));\n\n        return accum.toString();\n    }\n\n    private static String resolveEntity(Matcher m) {\n        String num = m.group(3);\n        if (num != null) {\n            try {\n                int base = m.group(2) != null ? 16 : 10;\n                int charval = Integer.parseInt(num, base);\n                if (charval >= 0 && charval <= 0x10FFFF) {\n                    return Character.toString((char) charval);\n                }\n            } catch (NumberFormatException e) {\n                // Ignore and return null\n            }\n        } else {\n            String name = m.group(1);\n            if (full.containsKey(name)) {\n                return Character.toString(full.get(name));\n            }\n        }\n        return null;\n    }\n\n    // Assuming full is a map containing named entities\n    private static final java.util.Map<String, Character> full = new java.util.HashMap<>();\n    static {\n        // Initialize the map with named entities\n        full.put(\"amp\", '&');\n        full.put(\"lt\", '<');\n        full.put(\"gt\", '>');\n        full.put(\"quot\", '\\\"');\n        full.put(\"apos\", '\\'');\n        // Add more as needed\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}