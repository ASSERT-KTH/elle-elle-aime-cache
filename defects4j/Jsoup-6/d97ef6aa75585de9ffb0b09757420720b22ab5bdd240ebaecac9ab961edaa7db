{
    "generation": "static String unescape(String string) {\n    if (!string.contains(\"&\"))\n        return string;\n\n    Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n    StringBuffer accum = new StringBuffer(string.length()); \n\n    while (m.find()) {\n        int charval = -1;\n        String num = m.group(3);\n        if (num!= null) {\n            try {\n                int base = m.group(2)!= null? 16 : 10; \n                charval = Integer.valueOf(num, base);\n                if (charval > 0xFFFF) { // out of range, skip\n                    m.appendReplacement(accum, m.group(0));\n                    continue;\n                }\n            } catch (NumberFormatException e) {\n                m.appendReplacement(accum, m.group(0)); // skip invalid num\n                continue;\n            }\n        } else {\n            String name = m.group(1);\n            if (full.containsKey(name))\n                charval = full.get(name);\n            else { // unknown entity, skip\n                m.appendReplacement(accum, m.group(0));\n                continue;\n            }\n        }\n\n        if (charval!= -1) {\n            String c;\n            if (charval < 128) { // ASCII\n                c = Character.toString((char) charval);\n            } else { // non-ASCII, possibly multi-byte UTF-16\n                c = String.valueOf(Character.toChars(charval));\n            }\n            m.appendReplacement(accum, Matcher.quoteReplacement(c));\n        }\n    }\n    m.appendTail(accum);\n    return accum.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}