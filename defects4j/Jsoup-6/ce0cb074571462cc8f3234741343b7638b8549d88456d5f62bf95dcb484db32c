{
    "generation": "static String unescape(String string) {\n    if (!string.contains(\"&\")) {\n        return string;\n    }\n\n    Pattern unescapePattern = Pattern.compile(\"&#x([0-9a-fA-F]+);|&#(\\\\d+);|&([a-zA-Z]+);\");\n    Matcher m = unescapePattern.matcher(string);\n    StringBuilder accum = new StringBuilder(string.length());\n\n    int lastEnd = 0;\n    while (m.find()) {\n        accum.append(string, lastEnd, m.start());\n\n        String hexValue = m.group(1);\n        if (hexValue != null) {\n            try {\n                int charval = Integer.parseInt(hexValue, 16);\n                accum.appendCodePoint(charval);\n            } catch (NumberFormatException e) {\n                // Invalid hex value, append as is\n                accum.append(m.group(0));\n            }\n            continue;\n        }\n\n        String decimalValue = m.group(2);\n        if (decimalValue != null) {\n            try {\n                int charval = Integer.parseInt(decimalValue);\n                accum.appendCodePoint(charval);\n            } catch (NumberFormatException e) {\n                // Invalid decimal value, append as is\n                accum.append(m.group(0));\n            }\n            continue;\n        }\n\n        String name = m.group(3);\n        if (name != null) {\n            Integer charval = full.get(name);\n            if (charval != null) {\n                accum.appendCodePoint(charval);\n            } else {\n                // Unknown named entity, append as is\n                accum.append(m.group(0));\n            }\n            continue;\n        }\n\n        // Fallback: append as is\n        accum.append(m.group(0));\n        lastEnd = m.end();\n    }\n    accum.append(string.substring(lastEnd));\n\n    return accum.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}