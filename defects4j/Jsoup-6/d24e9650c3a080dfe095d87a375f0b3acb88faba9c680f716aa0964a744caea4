{
    "generation": "static String unescape(String string) {\n    if (!string.contains(\"&\"))\n        return string;\n\n    Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n    StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n    // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required\n\n    while (m.find()) {\n        int charval = -1;\n        String num = m.group(3);\n        if (num != null) { // Handle numeric character references (&#x and &#)\n            try {\n                int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator\n                charval = Integer.parseInt(num, base); // Corrected to parseInt for primitive handling\n            } catch (NumberFormatException e) {\n                charval = -1; // Ignore invalid numeric references\n            }\n        } else { // Handle named character references (&name;)\n            String name = m.group(1);\n            if (name != null && full.containsKey(name)) { // Ensure name is non-null and in the map\n                charval = full.get(name);\n            }\n        }\n\n        if (charval != -1 && charval <= 0xFFFF) { // Valid character range; ensure within range\n            String c = Character.toString((char) charval);\n            m.appendReplacement(accum, Matcher.quoteReplacement(c)); // Use quoteReplacement to handle special chars\n        } else {\n            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // Use original if invalid or out of range\n        }\n    }\n    m.appendTail(accum);\n    return accum.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}