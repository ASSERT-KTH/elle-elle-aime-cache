{
    "generation": "/**\n * Unescapes a string containing HTML entities.\n * \n * @param string the string to unescape\n * @return the unescaped string\n */\nstatic String unescape(String string) {\n    if (!string.contains(\"&\"))\n        return string;\n\n    Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n    StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n\n    while (m.find()) {\n        int charval = -1;\n        String num = m.group(2)!= null? m.group(3) : m.group(1); // handle both numeric and named entities\n        if (num!= null) {\n            if (m.group(2)!= null) { // numeric entity\n                try {\n                    int base = m.group(2).equalsIgnoreCase(\"x\")? 16 : 10; \n                    charval = Integer.valueOf(num, base);\n                } catch (NumberFormatException e) {\n                    // skip invalid numeric entities, append original text\n                    m.appendReplacement(accum, m.group(0));\n                    continue;\n                }\n            } else { // named entity\n                if (full.containsKey(num))\n                    charval = full.get(num);\n            }\n\n            if (charval!= -1 && charval <= 0xFFFF) { // within valid Unicode range\n                String c = Character.toString((char) charval);\n                m.appendReplacement(accum, c);\n            } else {\n                m.appendReplacement(accum, m.group(0));\n            }\n        } else {\n            m.appendReplacement(accum, m.group(0)); // unknown entity, append original text\n        }\n    }\n    m.appendTail(accum);\n    return accum.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}