{
    "generation": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Entities {\n    private static final Pattern unescapePattern = Pattern.compile(\"&#(\\\\d+);|&#x([0-9a-fA-F]+);|&([a-zA-Z]+);\");\n    private static final Map<String, Integer> full = new HashMap<>();\n\n    static {\n        // Populate the map with HTML entity names and their corresponding character values\n        full.put(\"amp\", 38);\n        full.put(\"lt\", 60);\n        full.put(\"gt\", 62);\n        full.put(\"quot\", 34);\n        full.put(\"apos\", 39);\n        // Add more entities as needed\n    }\n\n    static String unescape(String string) {\n        if (!string.contains(\"&\"))\n            return string;\n\n        Matcher m = unescapePattern.matcher(string);\n        StringBuffer accum = new StringBuffer(string.length());\n\n        while (m.find()) {\n            int charval = -1;\n            String num = m.group(1);\n            if (num != null) {\n                try {\n                    charval = Integer.parseInt(num, 10);\n                } catch (NumberFormatException e) {\n                    // skip\n                }\n            } else if ((num = m.group(2)) != null) {\n                try {\n                    charval = Integer.parseInt(num, 16);\n                } catch (NumberFormatException e) {\n                    // skip\n                }\n            } else {\n                String name = m.group(3);\n                if (full.containsKey(name))\n                    charval = full.get(name);\n            }\n\n            if (charval != -1 && charval <= 0xFFFF) { // valid range\n                String c = Character.toString((char) charval);\n                m.appendReplacement(accum, c);\n            } else {\n                m.appendReplacement(accum, m.group(0)); // keep the original entity if invalid\n            }\n        }\n        m.appendTail(accum);\n        return accum.toString();\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(unescape(\"&#92; &#36;\")); // Output: \\ $\n        System.out.println(unescape(\"&amp; &lt; &gt; &quot; &apos;\")); // Output: & < > \" '\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}