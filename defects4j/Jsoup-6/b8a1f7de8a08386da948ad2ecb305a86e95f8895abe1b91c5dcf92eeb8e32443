{
    "generation": "static String unescape(String string) {\n    if (!string.contains(\"&\"))\n        return string;\n\n    Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n    StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n\n    while (m.find()) {\n        int charval = -1;\n        String num = m.group(3);\n        if (num!= null) {\n            try {\n                int base = m.group(2)!= null? 16 : 10; // 2 is hex indicator\n                charval = Integer.valueOf(num, base);\n            } catch (NumberFormatException e) {\n                // skip\n            }\n        } else {\n            String name = m.group(1);\n            if (full.containsKey(name))\n                charval = full.get(name);\n        }\n\n        if (charval!= -1) {\n            // handle Unicode characters\n            if (charval > 0xFFFF) {\n                String c = Character.toString((char) charval);\n                // Java can only handle Unicode characters up to U+FFFF in a single char\n                // so convert above U+FFFF to a surrogate pair\n                if (charval >= 0x10000 && charval <= 0x10FFFF) {\n                    int high = (charval - 0x10000) / 0x400 + 0xD800;\n                    int low = (charval - 0x10000) % 0x400 + 0xDC00;\n                    c = new String(new char[] {(char) high, (char) low});\n                }\n                m.appendReplacement(accum, c);\n            } else {\n                m.appendReplacement(accum, Character.toString((char) charval));\n            }\n        } else {\n            m.appendReplacement(accum, m.group(0));\n        }\n    }\n    m.appendTail(accum);\n    return accum.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}