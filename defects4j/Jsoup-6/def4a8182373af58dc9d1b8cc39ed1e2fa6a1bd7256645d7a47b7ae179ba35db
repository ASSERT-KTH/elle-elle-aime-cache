{
    "generation": "/**\n * Unescapes a string containing HTML entities into a raw string.\n * \n * @param string the string to unescape\n * @return the unescaped string\n */\nstatic String unescape(String string) {\n    if (!string.contains(\"&\"))\n        return string;\n\n    Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n    StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n\n    while (m.find()) {\n        int charval = -1;\n        String num = m.group(3);\n        if (num!= null) {\n            try {\n                int base = m.group(2)!= null? 16 : 10; // 2 is hex indicator\n                charval = Integer.valueOf(num, base);\n                if (charval > 0xFFFF) { // Unicode code point out of range for a single char\n                    // Handle supplementary characters (e.g., emojis)\n                    String c = Character.toString((char) (0xD800 + (charval - 0x10000) / 0x400));\n                    c += Character.toString((char) (0xDC00 + (charval - 0x10000) % 0x400));\n                    m.appendReplacement(accum, c);\n                } else {\n                    String c = Character.toString((char) charval);\n                    m.appendReplacement(accum, c);\n                }\n            } catch (NumberFormatException e) {\n                // skip\n            }\n        } else {\n            String name = m.group(1);\n            if (full.containsKey(name)) {\n                charval = full.get(name);\n                if (charval!= -1) {\n                    m.appendReplacement(accum, Character.toString((char) charval));\n                } else {\n                    m.appendReplacement(accum, m.group(0));\n                }\n            } else {\n                // Handle unknown entity by appending original text\n                m.appendReplacement(accum, m.group(0));\n            }\n        }\n    }\n    m.appendTail(accum);\n    return accum.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}