{
    "generation": "static String unescape(String string) {\n    if (!string.contains(\"&\"))\n        return string;\n\n    Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n    StringBuffer accum = new StringBuffer(string.length());\n\n    while (m.find()) {\n        int charval = -1;\n        String num = m.group(3);\n        if (num != null) {\n            try {\n                int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator\n                charval = Integer.parseInt(num, base);\n            } catch (NumberFormatException e) {\n                m.appendReplacement(accum, m.group(0)); // Invalid numeric entity, keep as is.\n                continue;\n            }\n        } else {\n            String name = m.group(1);\n            if (name != null && full.containsKey(name)) {\n                charval = full.get(name);\n            } else {\n                m.appendReplacement(accum, m.group(0)); // Invalid named entity, keep as is.\n                continue;\n            }\n        }\n\n        if (charval >= 0 && charval <= 0xFFFF) {\n            String c = Character.toString((char) charval);\n            m.appendReplacement(accum, Matcher.quoteReplacement(c));\n        } else if (charval > 0xFFFF && charval <= Character.MAX_CODE_POINT) {\n            String c = new String(Character.toChars(charval));\n            m.appendReplacement(accum, Matcher.quoteReplacement(c));\n        } else {\n            m.appendReplacement(accum, m.group(0)); // Invalid charval, keep as is.\n        }\n    }\n    m.appendTail(accum);\n    return accum.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}