{
    "generation": "/**\n * Unescapes a string containing HTML entities into a raw string.\n * @param string string to unescape\n * @return unescaped string\n */\nstatic String unescape(String string) {\n    if (!string.contains(\"&\"))\n        return string;\n\n    Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\n    StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n\n    while (m.find()) {\n        int charval = -1;\n        String num = m.group(3);\n        if (num!= null) {\n            try {\n                int base = m.group(2)!= null? 16 : 10; // 2 is hex indicator\n                charval = Integer.parseInt(num, base); // Using Integer.parseInt instead of Integer.valueOf\n            } catch (NumberFormatException e) {\n                // skip, but append original match to avoid data loss\n                m.appendReplacement(accum, m.group(0));\n                continue;\n            }\n        } else {\n            String name = m.group(1);\n            if (full.containsKey(name))\n                charval = full.get(name);\n        }\n\n        if (charval!= -1) {\n            if (charval > 0xFFFF) { // out of range\n                // Handle surrogate pairs or high Unicode code points\n                String c = Character.toString((char) charval);\n                if (charval > 0xFFFF) {\n                    // Split into surrogate pair (if necessary)\n                    if (charval <= 0x10FFFF) {\n                        int high = 0xD800 + ((charval - 0x10000) >> 10);\n                        int low = 0xDC00 + ((charval - 0x10000) & 0x3FF);\n                        c = new String(new char[] {(char) high, (char) low});\n                    } else {\n                        // Handle invalid code points (e.g., above 0x10FFFF)\n                        // You may choose to append the original match, throw an exception, etc.\n                        c = m.group(0); // Append original for now\n                    }\n                }\n                m.appendReplacement(accum, c);\n            } else {\n                m.appendReplacement(accum, Character.toString((char) charval));\n            }\n        } else {\n            m.appendReplacement(accum, m.group(0));\n        }\n    }\n    m.appendTail(accum);\n    return accum.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}