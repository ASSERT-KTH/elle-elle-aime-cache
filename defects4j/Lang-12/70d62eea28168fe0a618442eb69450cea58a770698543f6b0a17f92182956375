{
    "generation": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n\n    if (start == 0 && end == 0) {\n        if (!letters && !numbers) {\n            end = Character.MAX_CODE_POINT;\n            start = Character.MIN_CODE_POINT;\n        } else {\n            end = 'z' + 1;\n            start = ' ';\n        }\n    } else if (end <= start) {\n        throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n    }\n\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n\n    char[] buffer = new char[count];\n    int gap = end - start;\n\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(chars.length)];\n        }\n        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {\n            int charCount = Character.charCount(ch);\n            if (charCount == 1) {\n                buffer[count] = ch;\n            } else if (charCount == 2 && count > 0) {\n                char[] chars = Character.toChars(ch);\n                buffer[count--] = chars[1];\n                buffer[count] = chars[0];\n            } else {\n                count++;\n            }\n        } else {\n            count++;\n        }\n    }\n\n    return new String(buffer);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}