{
    "generation": "public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                            char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n\n    if (start == 0 && end == 0) {\n        if (!letters && !numbers) {\n            end = Integer.MAX_VALUE;\n        } else {\n            end = 'z' + 1;\n            start = ' ';                \n        }\n    }\n\n    if (chars != null) {\n        if (chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n        // Adjust start and end to be within the bounds of the chars array\n        start = Math.max(0, start);\n        end = Math.min(chars.length, end);\n    }\n\n    int gap = end - start;\n    if (gap <= 0) {\n        throw new IllegalArgumentException(\"Invalid range: start=\" + start + \", end=\" + end);\n    }\n\n    char[] buffer = new char[count];\n    int bufferPos = 0;\n\n    while (bufferPos < count) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n\n        if (letters && Character.isLetter(ch)\n                || numbers && Character.isDigit(ch)\n                || !letters && !numbers) {\n            if (ch >= 0xD800 && ch <= 0xDFFF) {  // surrogate pairs\n                if (ch >= 0xDC00 && ch <= 0xDFFF) {  // low surrogate\n                    if (bufferPos == count - 1) {\n                        continue;  // skip if it's the last position\n                    }\n                    buffer[bufferPos++] = ch;\n                    buffer[bufferPos++] = (char) (0xD800 + random.nextInt(0x400));  // high surrogate\n                } else if (ch >= 0xD800 && ch <= 0xDBFF) {  // high surrogate\n                    if (bufferPos == count - 1) {\n                        continue;  // skip if it's the last position\n                    }\n                    buffer[bufferPos++] = (char) (0xDC00 + random.nextInt(0x400));  // low surrogate\n                    buffer[bufferPos++] = ch;\n                }\n                // Skip private use high surrogates (0xDB80-0xDBFF)\n            } else {\n                buffer[bufferPos++] = ch;\n            }\n        }\n    }\n    return new String(buffer, 0, bufferPos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}