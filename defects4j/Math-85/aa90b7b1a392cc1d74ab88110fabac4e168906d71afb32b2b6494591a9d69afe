{
    "generation": "/**\n * This method attempts to find two values a and b satisfying:\n * <ul>\n * <li> <code> lowerBound <= a < initial < b <= upperBound </code> </li>\n * <li> <code> f(a) * f(b) <= 0 </code> </li>\n * </ul>\n * If f is continuous on <code>[a,b],</code> this means that <code>a</code>\n * and <code>b</code> bracket a root of f.\n * <p>\n * The algorithm starts by setting\n * <code>a := initial - 1; b := initial + 1,</code> examines the value of the\n * function at <code>a</code> and <code>b</code> and keeps moving\n * the endpoints out by one unit each time through a loop that terminates\n * when one of the following happens: <ul>\n * <li> <code> f(a) * f(b) <= 0 </code> --  success!</li>\n * <li> <code> a = lower </code> and <code> b = upper </code> -- ConvergenceException </li>\n * <li> <code> maximumIterations</code> iterations elapse -- ConvergenceException </li>\n * </ul></p>\n *\n * @param function the function\n * @param initial initial midpoint of interval being expanded to bracket a root\n * @param lowerBound lower bound (a is never lower than this value)\n * @param upperBound upper bound (b never is greater than this value)\n * @param maximumIterations maximum number of iterations to perform\n * @return a two element array holding {a, b}.\n * @throws ConvergenceException if the algorithm fails to find a and b satisfying the desired conditions\n * @throws FunctionEvaluationException if an error occurs evaluating the function\n * @throws IllegalArgumentException if function is null, maximumIterations is not positive, or initial is not between lowerBound and upperBound\n */\npublic static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound);\n    }\n\n    double a = initial - 1; // Corrected the initialization of a\n    double b = initial + 1; // Corrected the initialization of b\n    double fa = function.value(a);\n    double fb = function.value(b);\n    int numIterations = 0;\n\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));\n\n    if (fa * fb >= 0.0) {\n        throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);\n    }\n\n    return new double[]{a, b};\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}