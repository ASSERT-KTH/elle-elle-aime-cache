{
    "generation": "    public static double[] bracket(UnivariateRealFunction function,\n            double initial, double lowerBound, double upperBound,\n            int maximumIterations) throws ConvergenceException,\n            FunctionEvaluationException {\n\n        if (function == null) {\n            throw new IllegalArgumentException(\"function is null\");\n        }\n        if (maximumIterations <= 0)  {\n            throw new IllegalArgumentException(\n                  \"bad value for maximum iterations number: \" + maximumIterations);\n        }\n        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n            throw new IllegalArgumentException(\n                  \"invalid bracketing parameters:  lower bound=\" + lowerBound +\n                  \", initial=\" + initial +\n                  \", upper bound=\" + upperBound);\n        }\n        double a = initial - 1.0;\n        double b = initial + 1.0;\n        double fa;\n        double fb;\n        int numIterations = 0 ;\n\n        do {\n            if (a <= lowerBound && b >= upperBound) {\n                throw new ConvergenceException(\n                  \"interval [\" + lowerBound + \", \" + upperBound + \"] too small\");\n            }\n            fa = function.value(a);\n            fb = function.value(b);\n            numIterations++ ;\n\n            if (fa * fb <= 0.0) {\n                break;\n            }\n\n            a = Math.max(a - 1.0, lowerBound);\n            b = Math.min(b + 1.0, upperBound);\n        } while (numIterations < maximumIterations);\n\n        if (fa * fb >= 0.0 ) {\n            throw new ConvergenceException(\n                      \"number of iterations=\" + numIterations +\n                      \", maximum iterations=\" + maximumIterations +\n                      \", initial=\" + initial +\n                      \", lower bound=\" + lowerBound +\n                      \", upper bound=\" + upperBound +\n                      \", final a value=\" + a +\n                      \", final b value=\" + b +\n                      \", f(a)=\" + fa +\n                      \", f(b)=\" + fb);\n        }\n\n        return new double[]{a, b};\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}