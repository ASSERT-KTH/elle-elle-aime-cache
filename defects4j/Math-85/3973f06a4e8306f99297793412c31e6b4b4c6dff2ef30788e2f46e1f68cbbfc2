{
    "generation": "public static double[] bracket(UnivariateRealFunction function,\n                               double initial, double lowerBound, double upperBound,\n                               int maximumIterations) throws ConvergenceException,\n        FunctionEvaluationException {\n\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n            \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n            \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n            lowerBound, initial, upperBound);\n    }\n\n    double a = Math.max(initial - 1, lowerBound);\n    double b = Math.min(initial + 1, upperBound);\n    double fa = function.value(a);\n    double fb = function.value(b);\n    int numIterations = 1;\n\n    while (numIterations < maximumIterations) {\n        if (fa * fb <= 0.0) {\n            return new double[]{a, b};\n        }\n        if (a == lowerBound && b == upperBound) {\n            throw new ConvergenceException(\n                \"Unable to bracket the root within the given bounds after {0} iterations.\",\n                numIterations);\n        }\n        if (fa * fb > 0.0) {\n            if (a > lowerBound) {\n                a -= 1.0;\n                a = Math.max(a, lowerBound);\n                fa = function.value(a);\n            }\n            if (b < upperBound) {\n                b += 1.0;\n                b = Math.min(b, upperBound);\n                fb = function.value(b);\n            }\n        }\n        numIterations++;\n    }\n\n    throw new ConvergenceException(\n        \"Failed to find a bracketing interval after {0} iterations. \" +\n        \"Initial: {1}, Lower Bound: {2}, Upper Bound: {3}, Final a: {4}, Final b: {5}, f(a): {6}, f(b): {7}\",\n        numIterations, initial, lowerBound, upperBound, a, b, fa, fb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}