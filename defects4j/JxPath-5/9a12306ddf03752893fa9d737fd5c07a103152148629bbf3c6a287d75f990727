{
    "generation": "    private int compareNodePointers(\n        Object p1,\n        int depth1,\n        Object p2,\n        int depth2)\n    {\n        if (p1 instanceof JXPathVariable || p2 instanceof JXPathVariable) {\n            // Comparing a variable with a NodePointer is not supported.\n            // Variables are not ordered, so we return a special value to indicate this.\n            return Integer.MAX_VALUE;\n        }\n\n        NodePointer nodePointer1 = (NodePointer) p1;\n        NodePointer nodePointer2 = (NodePointer) p2;\n\n        if (depth1 < depth2) {\n            int r = compareNodePointers(nodePointer1, depth1, nodePointer2.parent, depth2 - 1);\n            return r == 0 ? -1 : r;\n        }\n        if (depth1 > depth2) {\n            int r = compareNodePointers(nodePointer1.parent, depth1 - 1, nodePointer2, depth2);\n            return r == 0 ? 1 : r;\n        }\n        if (nodePointer1 == null && nodePointer2 == null) {\n            return 0;\n        }\n\n        if (nodePointer1 != null && nodePointer1.equals(nodePointer2)) {\n            return 0;\n        }\n\n        if (depth1 == 1) {\n            throw new JXPathException(\n                    \"Cannot compare pointers that do not belong to the same tree: '\"\n                            + nodePointer1 + \"' and '\" + nodePointer2 + \"'\");\n        }\n        int r = compareNodePointers(nodePointer1.parent, depth1 - 1, nodePointer2.parent, depth2 - 1);\n        if (r != 0) {\n            return r;\n        }\n\n        return nodePointer1.parent.compareChildNodePointers(nodePointer1, nodePointer2);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}