{
    "generation": "private int compareNodePointers(\n        NodePointer p1,\n        int depth1,\n        NodePointer p2,\n        int depth2) \n{\n    // If both pointers are null, consider them equal\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n\n    // If both pointers are variables, consider them not comparable\n    if (p1 instanceof VariablePointer && p2 instanceof VariablePointer) {\n        throw new JXPathException(\n                \"Cannot compare two variable pointers: '\" + p1 + \"' and '\" + p2 + \"'\");\n    }\n\n    // If one pointer is a variable and the other is a node, consider them not comparable\n    if ((p1 instanceof VariablePointer)!= (p2 instanceof VariablePointer)) {\n        throw new JXPathException(\n                \"Cannot compare a variable pointer with a node pointer: '\" + p1 + \"' and '\" + p2 + \"'\");\n    }\n\n    // Compare non-variable pointers\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n\n    if (p1!= null && p1.equals(p2)) {\n        return 0;\n    }\n\n    if (depth1 == 1) {\n        throw new JXPathException(\n                \"Cannot compare pointers that do not belong to the same tree: '\" + p1 + \"' and '\" + p2 + \"'\");\n    }\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r!= 0) {\n        return r;\n    }\n\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}