{
    "generation": "/**\n * Compares two NodePointers. If they are equal, returns 0.\n * If p1 is a descendant of p2, returns -1. If p2 is a descendant of p1, returns 1.\n * If neither is a descendant of the other and they are not equal, \n * checks if they belong to the same tree and then compares their child node pointers.\n * \n * @param p1 NodePointer to compare\n * @param depth1 Depth of p1\n * @param p2 NodePointer to compare\n * @param depth2 Depth of p2\n * @return -1 if p1 is a descendant of p2, 1 if p2 is a descendant of p1, \n *         0 if they are equal, or the result of comparing their child node pointers\n */\nprivate int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    // Check if either pointer is null\n    if (p1 == null && p2 == null) {\n        return 0; // Both null, consider them equal\n    }\n    if (p1 == null || p2 == null) {\n        return p1 == null? -1 : 1; // One is null, consider it less/more\n    }\n\n    // Check if pointers belong to the same tree\n    if (!p1.isEnabled() ||!p2.isEnabled() || p1.getRoot().equals(p2.getRoot()) == false) {\n        throw new JXPathException(\n                \"Cannot compare pointers that do not belong to the same tree: '\"\n                        + p1 + \"' and '\" + p2 + \"'\");\n    }\n\n    // Depth comparison\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n\n    // Pointers have the same depth, check for equality or compare child node pointers\n    if (p1.equals(p2)) {\n        return 0;\n    }\n\n    if (depth1 == 1) { // Root level, no parents to compare\n        // If we reach here, it means the roots are not equal but belong to the same tree, \n        // which might be unexpected. However, the original code's behavior is preserved.\n        return p1.compareTo(p2);\n    }\n\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r!= 0) {\n        return r;\n    }\n\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}