{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    // Handle null NodePointers separately to avoid NullPointerException\n    if (p1 == null && p2 == null) {\n        return 0; // Both null, consider equal\n    }\n    if (p1 == null || p2 == null) {\n        return p1 == null? -1 : 1; // One null, other not, consider unequal\n    }\n\n    // Check if either pointer is a VariablePointer (not part of a document tree)\n    if (p1.isVariablePointer() || p2.isVariablePointer()) {\n        // If one is a VariablePointer and the other is not, consider unequal\n        if (p1.isVariablePointer()!= p2.isVariablePointer()) {\n            return p1.isVariablePointer()? -1 : 1;\n        }\n        // Both are VariablePointers, compare their values\n        return p1.getValue().equals(p2.getValue())? 0 : \n               p1.getValue().toString().compareTo(p2.getValue().toString());\n    }\n\n    // Original logic for NodePointers within the same document tree\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n\n    if (p1.equals(p2)) {\n        return 0;\n    }\n\n    if (depth1 == 1) {\n        throw new JXPathException(\n                \"Cannot compare pointers that do not belong to the same tree: '\"\n                        + p1 + \"' and '\" + p2 + \"'\");\n    }\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r!= 0) {\n        return r;\n    }\n\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}