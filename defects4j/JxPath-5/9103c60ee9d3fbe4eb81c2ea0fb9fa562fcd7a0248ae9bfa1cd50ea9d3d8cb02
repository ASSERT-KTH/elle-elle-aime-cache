{
    "generation": "private int compareNodePointers(\n    Object p1,\n    int depth1,\n    Object p2,\n    int depth2)\n{\n    // check if either p1 or p2 is a variable\n    if (!(p1 instanceof NodePointer) || !(p2 instanceof NodePointer)) {\n        throw new JXPathException(\n                \"Cannot compare pointers of different types: \"\n                        + p1.getClass().getName() + \" and \"\n                        + p2.getClass().getName()\n                        + \". This could happen when comparing a variable with a node.\");\n    }\n\n    NodePointer np1 = (NodePointer) p1;\n    NodePointer np2 = (NodePointer) p2;\n\n    if (depth1 < depth2) {\n        int r = compareNodePointers(np1, depth1, np2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(np1.parent, depth1 - 1, np2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    if (np1 == null && np2 == null) {\n        return 0;\n    }\n\n    if (np1 != null && np1.equals(np2)) {\n        return 0;\n    }\n\n    if (depth1 == 1) {\n        throw new JXPathException(\n                \"Cannot compare pointers that do not belong to the same tree: '\"\n                        + np1 + \"' and '\" + np2 + \"'\");\n    }\n    int r = compareNodePointers(np1.parent, depth1 - 1, np2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n\n    return np1.parent.compareChildNodePointers(np1, np2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}