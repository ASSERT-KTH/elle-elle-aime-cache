{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.getParent(), depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.getParent(), depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n\n    if (p1 != null && p1.equals(p2)) {\n        return 0;\n    }\n\n    if (depth1 == 1) {\n        if (p1 == null || p2 == null) {\n            // If one of the pointers is null and the other is not, they do not belong to the same tree\n            return p1 == null ? -1 : 1;\n        }\n        if (p1.getParent() == null || p2.getParent() == null) {\n            // Both pointers are at the root level, but not the same node\n            return p1.compareChildNodePointers(p1, p2);\n        }\n        throw new JXPathException(\n                \"Cannot compare pointers that do not belong to the same tree: '\"\n                        + p1 + \"' and '\" + p2 + \"'\");\n    }\n    int r = compareNodePointers(p1.getParent(), depth1 - 1, p2.getParent(), depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n\n    return p1.getParent().compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}