{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    // Handle null cases for p1 and p2 for proper comparison\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1 == null) {\n        return -1;\n    }\n    if (p2 == null) {\n        return 1;\n    }\n    \n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n\n    // Check if the node pointers are equal\n    if (p1.equals(p2)) {\n        return 0;\n    }\n\n    // Ensure we return a proper result for pointers from different trees\n    if (p1.parent == null || p2.parent == null) {\n        if (!p1.getNamespaceURI().equals(p2.getNamespaceURI())) {\n            return p1.getNamespaceURI().compareTo(p2.getNamespaceURI());\n        }\n        return p1.toString().compareTo(p2.toString());\n    }\n\n    // Recursively compare parent node pointers\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n\n    // Finally, compare child node pointers at the current level\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}