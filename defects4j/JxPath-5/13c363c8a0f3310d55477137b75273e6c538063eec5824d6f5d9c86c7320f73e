{
    "generation": "private int compareNodePointers(Object p1, int depth1, Object p2, int depth2) {\n    if (p1 instanceof NodePointer && p2 instanceof NodePointer) {\n        return compareNodePointers((NodePointer) p1, depth1, (NodePointer) p2, depth2);\n    }\n    // If one of the pointers is not a NodePointer (i.e., it's a variable), they are not equal\n    return p1.equals(p2) ? 0 : -1;\n}\n\nprivate int compareNodePointers(NodePointer p1, int depth1, NodePointer p2, int depth2) {\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n\n    if (p1 != null && p1.equals(p2)) {\n        return 0;\n    }\n\n    if (depth1 == 1) {\n        throw new JXPathException(\"Cannot compare pointers that do not belong to the same tree: '\" + p1 + \"' and '\" + p2 + \"'\");\n    }\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}