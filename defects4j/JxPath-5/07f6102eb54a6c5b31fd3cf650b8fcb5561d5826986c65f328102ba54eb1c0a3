{
    "generation": "/**\n * Compares two NodePointers.\n * \n * @param p1 NodePointer to compare\n * @param depth1 Depth of p1\n * @param p2 NodePointer to compare\n * @param depth2 Depth of p2\n * @return -1 if p1 is \"less than\" p2, 1 if p1 is \"greater than\" p2, 0 if equal\n */\nprivate int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    // Check if either pointer is a VariablePointer (not part of a document tree)\n    if (p1 instanceof VariablePointer || p2 instanceof VariablePointer) {\n        // If one is a VariablePointer and the other is not, they are not equal\n        if (!(p1 instanceof VariablePointer) ||!(p2 instanceof VariablePointer)) {\n            return p1 instanceof VariablePointer? -1 : 1;\n        }\n        // Both are VariablePointers, compare their values\n        return ((VariablePointer) p1).getValue().compareTo(((VariablePointer) p2).getValue());\n    }\n\n    // Original logic for comparing NodePointers within a document tree\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n\n    if (p1!= null && p1.equals(p2)) {\n        return 0;\n    }\n\n    if (depth1 == 1) {\n        throw new JXPathException(\n                \"Cannot compare pointers that do not belong to the same tree: '\"\n                        + p1 + \"' and '\" + p2 + \"'\");\n    }\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r!= 0) {\n        return r;\n    }\n\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}