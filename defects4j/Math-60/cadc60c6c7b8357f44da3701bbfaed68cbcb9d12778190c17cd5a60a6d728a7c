{
    "generation": "/**\n * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n * If {@code x} is more than a certain number of standard deviations from the mean, 0 or 1 is returned,\n * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n *\n * @param x Value at which the CDF is evaluated.\n * @return CDF evaluated at {@code x}.\n * @throws MathException if the algorithm fails to converge\n */\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    double result;\n    try {\n        result = 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));\n        if (Double.isNaN(result)) {\n            if (x < (mean - 30 * standardDeviation)) {\n                return 0;\n            } else if (x > (mean + 30 * standardDeviation)) {\n                return 1;\n            } else {\n                throw new MathException(\"Continued fraction diverged to NaN for value \" + x);\n            }\n        }\n    } catch (MaxIterationsExceededException ex) {\n        if (x < (mean - 30 * standardDeviation)) {\n            return 0;\n        } else if (x > (mean + 30 * standardDeviation)) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}