{
    "generation": "/**\n * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,\n * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n *\n * @param x Value at which the CDF is evaluated.\n * @return CDF evaluated at {@code x}.\n * @throws MathException if the algorithm fails to converge\n */\npublic double cumulativeProbability(double x) throws MathException {\n    // Handle extreme values first to avoid convergence issues\n    if (x < mean - 40 * standardDeviation) {\n        return 0.0;\n    } else if (x > mean + 40 * standardDeviation) {\n        return 1.0;\n    }\n\n    final double dev = x - mean;\n    try {\n        double result = 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n        \n        // Handle potential numerical instability\n        if (result < Double.MIN_VALUE) {\n            return 0.0;\n        } else if (result > 1.0 - Double.MIN_VALUE) {\n            return 1.0;\n        }\n        \n        return result;\n    } catch (MaxIterationsExceededException ex) {\n        // If convergence fails, use approximations for extreme values\n        if (x < mean - 20 * standardDeviation) {\n            return 0.0;\n        } else if (x > mean + 20 * standardDeviation) {\n            return 1.0;\n        } else {\n            throw ex;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}