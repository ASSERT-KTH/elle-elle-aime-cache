{
    "generation": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        final double dev = x - mean;\n\n        // Handle extreme values explicitly to avoid unnecessary computation\n        if (x < mean - 40 * standardDeviation) {\n            return 0.0; // P(X < x) is effectively 0\n        } else if (x > mean + 40 * standardDeviation) {\n            return 1.0; // P(X < x) is effectively 1\n        }\n\n        try {\n            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            // Catching specific exceptions and handling appropriately\n            if (x < mean - 20 * standardDeviation) {\n                return 0.0; // Extreme left tail\n            } else if (x > mean + 20 * standardDeviation) {\n                return 1.0; // Extreme right tail\n            } else {\n                throw ex; // Rethrow if the value is not in the extreme range\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}