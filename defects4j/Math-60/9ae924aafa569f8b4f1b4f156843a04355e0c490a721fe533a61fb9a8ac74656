{
    "generation": "/**\n * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,\n * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n *\n * @param x Value at which the CDF is evaluated.\n * @return CDF evaluated at {@code x}.\n */\npublic double cumulativeProbability(double x) {\n    final double dev = x - mean;\n    final double\u56db\u5341\u4e2a\u6807\u51c6\u5dee = 40 * standardDeviation;\n    \n    // \u76f4\u63a5\u8fd4\u56de0\u62161\uff0c\u5982\u679cx\u8d85\u51fa40\u4e2a\u6807\u51c6\u5dee\n    if (dev < -\u56db\u5341\u4e2a\u6807\u51c6\u5dee) {\n        return 0.0;\n    } else if (dev > \u56db\u5341\u4e2a\u6807\u51c6\u5dee) {\n        return 1.0;\n    }\n    \n    // \u8ba1\u7b97\u6807\u51c6\u5316\u7684\u504f\u5dee\n    double t = dev / (standardDeviation * Math.sqrt(2.0));\n    \n    // \u4f7f\u7528\u8bef\u5dee\u51fd\u6570\u8ba1\u7b97\u7d2f\u79ef\u6982\u7387\n    double result = 0.5 * (1.0 + Erf.erf(t));\n    \n    // \u786e\u4fdd\u7ed3\u679c\u5728[0,1]\u8303\u56f4\u5185\n    if (result < 0.0) {\n        return 0.0;\n    } else if (result > 1.0) {\n        return 1.0;\n    } else {\n        return result;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}