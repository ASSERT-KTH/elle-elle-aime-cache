{
    "generation": "/**\n * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,\n * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n *\n * @param x Value at which the CDF is evaluated.\n * @return CDF evaluated at {@code x}.\n * @throws MathException if the algorithm fails to converge\n */\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    final double scaledDev = dev / (standardDeviation * FastMath.sqrt(2.0));\n\n    // Handle extreme values directly\n    if (scaledDev < -40) {\n        return 0.0;\n    } else if (scaledDev > 40) {\n        return 1.0;\n    }\n\n    try {\n        return 0.5 * (1.0 + Erf.erf(scaledDev));\n    } catch (MaxIterationsExceededException ex) {\n        // If we still encounter an exception, handle extreme values\n        if (scaledDev < -20) { // JDK 1.5 blows at 38\n            return 0;\n        } else if (scaledDev > 20) {\n            return 1;\n        } else {\n            throw ex;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}