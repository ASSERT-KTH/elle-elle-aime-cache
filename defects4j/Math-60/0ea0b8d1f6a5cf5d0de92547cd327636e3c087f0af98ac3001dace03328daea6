{
    "generation": "/**\n * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,\n * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n *\n * @param x Value at which the CDF is evaluated.\n * @return CDF evaluated at {@code x}.\n * @throws MathException if the algorithm fails to converge\n */\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    final double absDev = FastMath.abs(dev);\n    \n    // Check for extreme values first\n    if (absDev > 40 * standardDeviation) {\n        return dev > 0 ? 1 : 0;\n    }\n    \n    try {\n        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n    } catch (MaxIterationsExceededException ex) {\n        // If Erf.erf fails, use a more robust approximation\n        double z = dev / standardDeviation;\n        double t = 1 / (1 + 0.2316419 * FastMath.abs(z));\n        double y = FastMath.exp(-0.5 * z * z) / FastMath.sqrt(2 * FastMath.PI);\n        \n        double cdf;\n        if (z > 0) {\n            cdf = 1 - y * t * (0.31938153 + t * (-0.356563782 + t * (1.781477937 + t * (-1.821255978 + t * 1.330274429))));\n        } else {\n            cdf = y * t * (0.31938153 + t * (-0.356563782 + t * (1.781477937 + t * (-1.821255978 + t * 1.330274429))));\n        }\n        \n        if (cdf < 0) {\n            return 0;\n        } else if (cdf > 1) {\n            return 1;\n        } else {\n            return cdf;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}