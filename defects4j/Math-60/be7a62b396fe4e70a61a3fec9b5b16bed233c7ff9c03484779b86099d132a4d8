{
    "generation": "/**\n * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,\n * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n *\n * @param x Value at which the CDF is evaluated.\n * @return CDF evaluated at {@code x}.\n * @throws MathException if the algorithm fails to converge\n */\npublic double cumulativeProbability(double x) throws MathException {\n    final double dev = x - mean;\n    final double absDev = Math.abs(dev);\n    \n    if (absDev > 40 * standardDeviation) {\n        return dev > 0 ? 1.0 : 0.0;\n    }\n    \n    try {\n        double z = dev / (standardDeviation * FastMath.sqrt(2.0));\n        double erfResult = Erf.erf(z);\n        return 0.5 * (1.0 + erfResult);\n    } catch (MaxIterationsExceededException ex) {\n        // Fallback to a more robust approximation for extreme values\n        if (dev < -20 * standardDeviation) {\n            return 0.0;\n        } else if (dev > 20 * standardDeviation) {\n            return 1.0;\n        } else {\n            // Use a simple approximation for values between -20 and 20 standard deviations\n            double z = dev / (standardDeviation * FastMath.sqrt(2.0));\n            double t = 1.0 / (1.0 + 0.3275911 * FastMath.abs(z));\n            double approxErf = 1.0 - t * (0.254829592 + t * (-0.284496736 + t * (1.421413741 + t * (-1.453152027 + t * 1.061405429))));\n            if (z < 0) {\n                approxErf = -approxErf;\n            }\n            return 0.5 * (1.0 + approxErf);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}