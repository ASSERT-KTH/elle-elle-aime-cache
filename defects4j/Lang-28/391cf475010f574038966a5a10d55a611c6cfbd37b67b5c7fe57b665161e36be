{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    if (index >= input.length() || index + 1 >= input.length()) {\n        return 0;\n    }\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= input.length()) {\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        if (end >= input.length() || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        String entityStr = input.subSequence(start, end).toString();\n        int entityValue;\n        try {\n            entityValue = isHex ? Integer.parseInt(entityStr, 16) : Integer.parseInt(entityStr, 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        if (entityValue >= 0x10000) {\n            // Convert to surrogate pair\n            int inside = entityValue - 0x10000;\n            char highSurrogate = (char) ((inside >> 10) + 0xD800);\n            char lowSurrogate = (char) ((inside & 0x3FF) + 0xDC00);\n            out.write(highSurrogate);\n            out.write(lowSurrogate);\n            return (end - index + 1);\n        } else {\n            out.write(entityValue);\n            return (end - index + 1);\n        }\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}