{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // TODO: Protect from ArrayIndexOutOfBoundsException\n    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n\n    int start = index + 2;\n    boolean isHex = false;\n\n    if (start < input.length()) {\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n    } else {\n        return 0; // Incomplete entity\n    }\n\n    int end = start;\n    while (end < input.length() && input.charAt(end) != ';') {\n        end++;\n    }\n\n    if (end >= input.length() || input.charAt(end) != ';') {\n        return 0; // No terminating semicolon\n    }\n\n    String entityStr = input.subSequence(start, end).toString();\n    int entityValue;\n    try {\n        if (isHex) {\n            entityValue = Integer.parseInt(entityStr, 16);\n        } else {\n            entityValue = Integer.parseInt(entityStr, 10);\n        }\n    } catch (NumberFormatException nfe) {\n        return 0;\n    }\n\n    if (entityValue <= 0xFFFF) {\n        out.write(entityValue);\n    } else {\n        // Convert code point to surrogate pair and write\n        int supplementaryPlane = entityValue - 0x10000;\n        int highSurrogate = 0xD800 + (supplementaryPlane >> 10);\n        int lowSurrogate = 0xDC00 + (supplementaryPlane & 0x3FF);\n        out.write(highSurrogate);\n        out.write(lowSurrogate);\n    }\n\n    // Calculate the number of characters consumed\n    int charsConsumed = end - index + 1; // From '&' to ';'\n    if (isHex) {\n        charsConsumed++; // Account for 'x' or 'X'\n    }\n    return charsConsumed;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}