{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        if(index >= input.length() - 1) {\n            return 0; // Protects from ArrayIndexOutOfBounds at the start.\n        }\n\n        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            if(start >= input.length()) {\n                return 0; // Protects from ArrayIndexOutOfBounds after '&','#'.\n            }\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            int end = start;\n            while(end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n\n            if (end >= input.length() || input.charAt(end) != ';') {\n                return 0; // Protects from ArrayIndexOutOfBounds or missing ';'.\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n\n                if (Character.isSupplementaryCodePoint(entityValue)) {\n                    out.write(Character.toChars(entityValue)); // Write supplementary character properly.\n                } else {\n                    out.write(entityValue); // Write non-supplementary characters as int.\n                }\n            } catch(NumberFormatException nfe) {\n                return 0;\n            }\n\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}