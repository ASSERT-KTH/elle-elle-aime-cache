{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // Check if the current character is '&' and the next character is '#'\n        if (input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check if the next character is 'x' or 'X' for hexadecimal\n            if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n                start++;\n                isHex = true;\n            }\n\n            int end = start;\n            // Find the ';' that terminates the numeric entity\n            while (end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // If the ';' is found, parse the numeric entity\n            if (end < input.length()) {\n                int entityValue;\n                try {\n                    if (isHex) {\n                        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                    } else {\n                        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                    }\n                } catch (NumberFormatException nfe) {\n                    return 0;\n                }\n\n                // Write the character to the output\n                out.write(entityValue);\n\n                // Return the length of the consumed input\n                return (end - index) + 1;\n            }\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}