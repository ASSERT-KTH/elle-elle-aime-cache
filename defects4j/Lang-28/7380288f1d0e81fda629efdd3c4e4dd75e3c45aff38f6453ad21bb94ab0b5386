{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Protect from ArrayIndexOutOfBounds\n    if (index + 1 >= input.length() || input.charAt(index)!= '&' || input.charAt(index + 1)!= '#') {\n        return 0;\n    }\n\n    int start = index + 2;\n    boolean isHex = false;\n\n    if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n        start++;\n        isHex = true;\n    }\n\n    int end = start;\n    while (end < input.length() && input.charAt(end)!= ';') {\n        end++;\n    }\n\n    if (end >= input.length() || input.charAt(end)!= ';') {\n        return 0; // Not a valid entity\n    }\n\n    int entityValue;\n    try {\n        String entityStr = input.subSequence(start, end).toString();\n        if (isHex) {\n            entityValue = Integer.parseInt(entityStr, 16);\n        } else {\n            entityValue = Integer.parseInt(entityStr, 10);\n        }\n    } catch (NumberFormatException nfe) {\n        return 0;\n    }\n\n    // Handle supplementary characters correctly\n    if (entityValue > 0xFFFF) {\n        out.write(Character.highSurrogate(entityValue));\n        out.write(Character.lowSurrogate(entityValue));\n    } else {\n        out.write(entityValue);\n    }\n\n    return 2 + (end - start) + (isHex? 1 : 0) + 1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}