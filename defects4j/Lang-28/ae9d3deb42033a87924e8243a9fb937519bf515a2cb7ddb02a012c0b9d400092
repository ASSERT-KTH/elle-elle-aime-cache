{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    if(index < input.length() - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while(end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n\n        if(end == input.length()) {\n            return 0; // ';' not found, return 0 to indicate no translation was done\n        }\n\n        int entityValue;\n        try {\n            if(isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch(NumberFormatException nfe) {\n            return 0; // Number format exception, return 0 to indicate no translation was done\n        }\n\n        if (entityValue < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            out.write(entityValue);\n        } else {\n            out.write(Character.highSurrogate(entityValue));\n            out.write(Character.lowSurrogate(entityValue));\n        }\n\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }\n\n    return 0; // Indicate no translation was done\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}