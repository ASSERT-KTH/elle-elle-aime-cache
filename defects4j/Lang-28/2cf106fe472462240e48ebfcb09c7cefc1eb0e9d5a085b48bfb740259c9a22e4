{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Protect from ArrayIndexOutOfBoundsException\n    if (index >= input.length() - 1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n\n    int start = index + 2;\n    boolean isHex = false;\n\n    char firstChar = input.charAt(start);\n    if (firstChar == 'x' || firstChar == 'X') {\n        start++;\n        isHex = true;\n    }\n\n    int end = start;\n    while (end < input.length() && input.charAt(end) != ';') {\n        end++;\n    }\n\n    if (end >= input.length() || input.charAt(end) != ';') {\n        return 0; // No valid entity found\n    }\n\n    String entityStr = input.subSequence(start, end).toString();\n    int entityValue;\n    try {\n        entityValue = isHex ? Integer.parseInt(entityStr, 16) : Integer.parseInt(entityStr, 10);\n    } catch (NumberFormatException nfe) {\n        return 0;\n    }\n\n    if (entityValue <= 0xFFFF) {\n        out.write(entityValue);\n    } else {\n        // Convert to surrogate pair and write\n        int supplemental Plane = (entityValue - 0x10000) / 0x400;\n        int supExtra = (entityValue - 0x10000) % 0x400;\n        int highSurrogate = 0xD800 + supplementalPlane;\n        int lowSurrogate = 0xDC00 + supExtra;\n        out.write(highSurrogate);\n        out.write(lowSurrogate);\n    }\n\n    return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}