{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    if (index < 0 || index >= input.length() || index + 1 >= input.length()) {\n        return 0;\n    }\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        if (end >= input.length() || input.charAt(end) != ';') {\n            return 0; // No valid entity found\n        }\n\n        int entityValue;\n        try {\n            if (isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            // Convert to surrogate pair\n            int supplementalPlane = (entityValue - 0x10000) >> 10;\n            int lowSurrogate = 0xDC00 | (entityValue - 0x10000) & 0x3FF;\n            int highSurrogate = 0xD800 | supplementalPlane;\n            out.write(highSurrogate);\n            out.write(lowSurrogate);\n        } else {\n            out.write(entityValue);\n        }\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}