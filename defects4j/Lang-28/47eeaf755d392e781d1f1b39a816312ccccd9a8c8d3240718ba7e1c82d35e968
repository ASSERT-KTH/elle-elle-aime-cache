{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // Ensure that we do not go out of bounds\n        if (index < 0 || index >= input.length() || input.charAt(index) != '&' || (index + 1) >= input.length() || input.charAt(index + 1) != '#') {\n            return 0;\n        }\n\n        int start = index + 2;\n        boolean isHex = false;\n\n        // Check if the character is 'x' or 'X' to determine if it's a hexadecimal entity\n        if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        // Finding the end of the numeric entity (searching for ';')\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // If the end of the entity is not found, return 0\n        if (end >= input.length() || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            // Parse the numeric entity value (hex or decimal)\n            if (isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Write the character(s) represented by the entity value\n        if (Character.isValidCodePoint(entityValue)) {\n            if (entityValue >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                out.write(Character.toChars(entityValue));\n            } else {\n                out.write(entityValue);\n            }\n        } else {\n            return 0;\n        }\n\n        // Return the number of consumed characters: 2 (&#) + length of the entity + 1 (;)\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}