{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // TODO: Protect from ArrayIndexOutOfBounds\n        if (index < input.length() - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check if the next character indicates hex encoding\n            if (start < input.length()) {\n                char firstChar = input.charAt(start);\n                if (firstChar == 'x' || firstChar == 'X') {\n                    start++;\n                    isHex = true;\n                }\n            }\n\n            // Find the endpoint for the numeric entity\n            int end = start;\n            while (end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // If we didn't find a semicolon, it's not a valid entity\n            if (end == input.length() || input.charAt(end) != ';') {\n                return 0;\n            }\n\n            int entityValue;\n            try {\n                // Parse the numeric value, either in hex or decimal\n                if (isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                return 0;\n            }\n\n            // Write the character(s) corresponding to the entity value\n            if (Character.isSupplementaryCodePoint(entityValue)) {\n                out.write(Character.toChars(entityValue));\n            } else {\n                out.write(entityValue);\n            }\n\n            // Return the length of the consumed input\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}