{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Protect from ArrayIndexOutOfBounds\n    if(index + 1 >= input.length() || input.charAt(index)!= '&' || input.charAt(index + 1)!= '#') {\n        return 0;\n    }\n    int start = index + 2;\n    boolean isHex = false;\n\n    char firstChar = input.charAt(start);\n    if(firstChar == 'x' || firstChar == 'X') {\n        start++;\n        isHex = true;\n    }\n\n    int end = start;\n    while(end < input.length() && input.charAt(end)!= ';') {\n        end++;\n    }\n\n    if(end >= input.length() || input.charAt(end)!= ';') {\n        return 0;\n    }\n\n    String entityString = input.subSequence(start, end).toString();\n    int entityValue;\n    try {\n        if(isHex) {\n            entityValue = Integer.parseInt(entityString, 16);\n        } else {\n            entityValue = Integer.parseInt(entityString, 10);\n        }\n    } catch(NumberFormatException nfe) {\n        return 0;\n    }\n\n    if(entityValue <= 0x7F) {\n        out.write(entityValue);\n    } else if(entityValue <= 0x7FF) {\n        out.write(0xC0 | (entityValue >> 6));\n        out.write(0x80 | (entityValue & 0x3F));\n    } else if(entityValue <= 0xFFFF) {\n        out.write(0xE0 | (entityValue >> 12));\n        out.write(0x80 | ((entityValue >> 6) & 0x3F));\n        out.write(0x80 | (entityValue & 0x3F));\n    } else {\n        out.write(0xF0 | (entityValue >> 18));\n        out.write(0x80 | ((entityValue >> 12) & 0x3F));\n        out.write(0x80 | ((entityValue >> 6) & 0x3F));\n        out.write(0x80 | (entityValue & 0x3F));\n    }\n    return 2 + (end - start) + (isHex? 1 : 0) + 1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}