{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Protect from ArrayIndexOutOfBounds\n    if (index < 0 || index >= input.length() - 2) {\n        return 0;\n    }\n\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= input.length()) {\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // Validate that ';' was found\n        if (end == input.length() || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String numberString = input.subSequence(start, end).toString();\n            if (isHex) {\n                entityValue = Integer.parseInt(numberString, 16);\n            } else {\n                entityValue = Integer.parseInt(numberString, 10);\n            }\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Handle supplementary characters\n        if (Character.isValidCodePoint(entityValue)) {\n            if (entityValue >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                out.write(Character.toChars(entityValue));\n            } else {\n                out.write(entityValue);\n            }\n        } else {\n            return 0;\n        }\n\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1; // \"&\" + \"#\" + (digits) + \";\" (+ \"x\" if isHex)\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}