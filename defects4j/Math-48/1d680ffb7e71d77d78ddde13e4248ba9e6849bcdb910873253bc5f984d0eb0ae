{
    "generation": "protected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Keep track of inverted intervals.\n    boolean inverted = false;\n\n    // Keep finding better approximations.\n    while (true) {\n        // Calculate the next approximation.\n        final double denominator = f1 - f0;\n        if (denominator == 0.0) {\n            // Avoid division by zero, return the midpoint.\n            double midpoint = 0.5 * (x0 + x1);\n            return midpoint;\n        }\n        final double x = x1 - ((f1 * (x1 - x0)) / denominator);\n        final double fx = computeObjectiveValue(x);\n\n        // If the new approximation is the exact root, return it.\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Check if the function value is within the function value accuracy.\n        if (Math.abs(fx) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x;\n                case LEFT_SIDE:\n                    return inverted ? x : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x;\n                case BELOW_SIDE:\n                    return (fx <= 0) ? x : x0;\n                case ABOVE_SIDE:\n                    return (fx >= 0) ? x : x0;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Update the bounds with the new approximation.\n        if (f1 * fx < 0) {\n            // The root is now between x and x1.\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // No adjustment needed.\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n        x1 = x;\n        f1 = fx;\n\n        // Check if the interval is sufficiently small.\n        if (Math.abs(x1 - x0) < Math.max(rtol * Math.abs(x1), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (fx <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (fx >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Prevent infinite loop by checking the number of evaluations.\n        if (getEvaluations() >= getMaxEvaluations()) {\n            throw new ConvergenceException(LocalizedFormats.TOO_MANY_FUNCTION_EVALUATIONS);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}