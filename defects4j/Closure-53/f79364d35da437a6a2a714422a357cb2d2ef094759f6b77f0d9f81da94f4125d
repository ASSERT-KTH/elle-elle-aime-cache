{
    "generation": "    /**\n     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n     * Note that the resulting expression will always evaluate to\n     * true, as would the x = {...} expression.\n     */\n    private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap) {\n      // Compute all of the assignments necessary\n      List<Node> nodes = Lists.newArrayList();\n      Node val = ref.getAssignedValue();\n\n      // Validate the type of the assigned value\n      Preconditions.checkState(val != null && val.getType() == Token.OBJECTLIT);\n      blacklistVarReferencesInTree(val, v.scope);\n\n      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n      for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n        String var = key.getString();\n        Node value = key.removeFirstChild();\n        nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n      }\n\n      // Handle remaining variables in the map\n      for (String var : all) {\n        nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)),\n                   NodeUtil.newUndefinedNode(null)));\n      }\n\n      // Build the replacement node\n      nodes.add(new Node(Token.TRUE)); // Ensure expression evaluates to true\n\n      Node replacement;\n      if (nodes.size() == 1) {\n        replacement = nodes.get(0);\n      } else {\n        replacement = new Node(Token.COMMA);\n        Node cur = replacement;\n        for (int i = 0; i < nodes.size() - 1; i++) {\n          cur.addChildToBack(new Node(Token.COMMA, nodes.get(i), new Node(Token.EMPTY)));\n          cur = cur.getLastChild();\n        }\n        cur.addChildToBack(nodes.get(nodes.size() - 1));\n      }\n\n      Node replace = ref.getParent();\n      replacement.copyInformationFromForTree(replace);\n\n      if (replace.getType() == Token.VAR) {\n        replace.getParent().replaceChild(\n            replace, NodeUtil.newExpr(replacement));\n      } else {\n        replace.getParent().replaceChild(replace, replacement);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}