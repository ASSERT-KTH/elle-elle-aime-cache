{
    "generation": "    /**\n     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n     * Note that the resulting expression will always evaluate to\n     * true, as would the x = {...} expression.\n     */\n    private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap) {\n      // Compute all of the assignments necessary\n      List<Node> nodes = Lists.newArrayList();\n      Node val = ref.getAssignedValue();\n      blacklistVarReferencesInTree(val, v.scope);\n      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n      for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext()) {\n        String var = key.getString();\n        Node value = key.removeFirstChild();\n        // TODO: Copy type information.\n        Node varNode = Node.newString(Token.NAME, varmap.get(var));\n        varNode.copyInformationFromForTree(key);\n        Node assignNode = new Node(Token.ASSIGN, varNode, value);\n        assignNode.copyInformationFromForTree(key);\n        nodes.add(assignNode);\n        all.remove(var);\n      }\n\n      // Handle variables not in the object literal.\n      for (String var : all) {\n        Node varNode = Node.newString(Token.NAME, varmap.get(var));\n        varNode.setStaticSourceFile(ref.getParent().getStaticSourceFile());\n        Node undefinedNode = NodeUtil.newUndefinedNode(null);\n        undefinedNode.setStaticSourceFile(ref.getParent().getStaticSourceFile());\n        Node assignNode = new Node(Token.ASSIGN, varNode, undefinedNode);\n        assignNode.setStaticSourceFile(ref.getParent().getStaticSourceFile());\n        nodes.add(assignNode);\n      }\n\n      // All assignments evaluate to true, so ensure the expression\n      // statement evaluates to true.\n      Node trueNode = new Node(Token.TRUE);\n      trueNode.setStaticSourceFile(ref.getParent().getStaticSourceFile());\n      nodes.add(trueNode);\n\n      // Join these using commas.\n      Node replacement = null;\n      for (int i = nodes.size() - 1; i >= 0; i--) {\n        if (replacement == null) {\n          replacement = nodes.get(i);\n        } else {\n          Node commaNode = new Node(Token.COMMA, nodes.get(i), replacement);\n          commaNode.setStaticSourceFile(ref.getParent().getStaticSourceFile());\n          replacement = commaNode;\n        }\n      }\n\n      Node replace = ref.getParent();\n      replacement.copyInformationFromForTree(replace);\n\n      if (replace.getType() == Token.VAR) {\n        replace.getParent().replaceChild(\n            replace, NodeUtil.newExpr(replacement));\n      } else {\n        replace.getParent().replaceChild(replace, replacement);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}