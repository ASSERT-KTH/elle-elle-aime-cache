{
    "generation": "private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) {\n  // Compute all of the assignments necessary\n  List<Node> nodes = new ArrayList<>();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = new LinkedHashSet<>(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(new Node(Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)), value));\n    all.remove(var);\n  }\n\n  // TODO(user): Better source information.\n  for (String var : all) {\n    nodes.add(new Node(Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)), NodeUtil.newUndefinedNode(null)));\n  }\n\n  // All assignments evaluate to true, so make sure that the\n  // expr statement evaluates to true in case it matters.\n  nodes.add(new Node(Token.TRUE));\n\n  // Join these using COMMA. A COMMA node must have 2 children, so we\n  // create a tree. In the tree, the first child is the COMMA to match\n  // the parser, otherwise tree equality tests fail.\n  if (nodes.size() == 1) {\n    // If there's only one node, which is true, use it directly\n    Node replacement = nodes.get(0);\n    replacement.copyInformationFromForTree(ref.getParent());\n    Node replace = ref.getParent();\n    if (replace.getType() == Token.VAR) {\n      replace.getParent().replaceChild(replace, NodeUtil.newExpr(replacement));\n    } else {\n      replace.getParent().replaceChild(replace, replacement);\n    }\n  } else {\n    // Build a comma-separated sequence of nodes\n    Node replacement = new Node(Token.COMMA);\n    Node cur = replacement;\n    for (int i = 0; i < nodes.size() - 1; i++) {\n      cur.addChildToBack(nodes.get(i));\n      cur = cur.addChildToBack(Token.COMMA);\n    }\n    cur.addChildToBack(nodes.get(nodes.size() - 1));\n\n    replacement.copyInformationFromForTree(ref.getParent());\n    Node replace = ref.getParent();\n    if (replace.getType() == Token.VAR) {\n      replace.getParent().replaceChild(replace, NodeUtil.newExpr(replacement));\n    } else {\n      replace.getParent().replaceChild(replace, replacement);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}