{
    "generation": "private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) {\n  // Compute all of the assignments necessary\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    nodes.add(new Node(Token.ASSIGN, new Node(Token.NAME, varmap.get(var)), value));\n    all.remove(var);\n  }\n\n  for (String var : all) {\n    nodes.add(new Node(Token.ASSIGN, new Node(Token.NAME, varmap.get(var)), new Node(Token.UNDEFINED)));\n  }\n\n  // All assignments evaluate to true, so make sure that the expr statement evaluates to true in case it matters.\n  nodes.add(new Node(Token.TRUE));\n\n  // Join these using COMMA. A COMMA node must have 2 children, so we create a tree.\n  // In the tree the first child be the COMMA to match the parser, otherwise tree equality tests fail.\n  nodes = Lists.reverse(nodes);\n\n  Node replacement;\n  if (nodes.size() >= 2) {\n    replacement = new Node(Token.COMMA, nodes.get(nodes.size() - 2), nodes.get(nodes.size() - 1));\n    for (int i = nodes.size() - 3; i >= 0; i--) {\n      replacement = new Node(Token.COMMA, nodes.get(i), replacement);\n    }\n  } else if (nodes.size() == 1) {\n    replacement = nodes.get(0);\n  } else {\n    replacement = new Node(Token.TRUE); // Fallback, should not occur\n  }\n\n  Node replace = ref.getParent();\n  replacement.copyInformationFromForTree(replace);\n\n  if (replace.getType() == Token.VAR) {\n    replace.getParent().replaceChild(replace, new Node(Token.EXPR_RESULT, replacement));\n  } else {\n    replace.getParent().replaceChild(replace, replacement);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}