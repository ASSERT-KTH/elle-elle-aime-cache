{
    "generation": "    /**\n     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n     * Note that the resulting expression will always evaluate to\n     * true, as would the x = {...} expression.\n     */\n    private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap) {\n        // Compute all of the assignments necessary\n        List<Node> nodes = Lists.newArrayList();\n        Node val = ref.getAssignedValue();\n        blacklistVarReferencesInTree(val, v.scope);\n        Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n        Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n        for (Node key = val.getFirstChild(); key != null;\n             key = key.getNext()) {\n            String var = key.getString();\n            Node value = key.removeFirstChild();\n            // TODO: Copy type information.\n            nodes.add(\n                new Node(Token.ASSIGN,\n                         Node.newString(Token.NAME, varmap.get(var)), value));\n            all.remove(var);\n        }\n\n        // Add undefined assignments for variables not in the object literal\n        for (String var : all) {\n            nodes.add(\n                new Node(Token.ASSIGN,\n                         Node.newString(Token.NAME, varmap.get(var)),\n                         NodeUtil.newUndefinedNode(null)));\n        }\n\n        // Ensure the result evaluates to true\n        nodes.add(new Node(Token.TRUE));\n\n        // Join the nodes using COMMA\n        Node replacement = null;\n        if (nodes.size() == 1) {\n            // If there's only a single node, use it as the replacement directly\n            replacement = nodes.get(0);\n        } else {\n            replacement = new Node(Token.COMMA);\n            Node cur = replacement;\n            for (int i = 0; i < nodes.size(); i++) {\n                cur.addChildToBack(nodes.get(i));\n                if (i < nodes.size() - 1) {\n                    Node nextComma = new Node(Token.COMMA);\n                    cur.addChildToBack(nextComma);\n                    cur = nextComma;\n                }\n            }\n        }\n\n        Node replace = ref.getParent();\n        replacement.copyInformationFromForTree(replace);\n\n        if (replace.getType() == Token.VAR) {\n            replace.getParent().replaceChild(\n                replace, NodeUtil.newExpr(replacement));\n        } else {\n            replace.getParent().replaceChild(replace, replacement);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}