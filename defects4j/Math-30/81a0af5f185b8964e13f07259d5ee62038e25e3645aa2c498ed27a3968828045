{
    "generation": "/**\n * @param Umin smallest Mann-Whitney U value\n * @param n1 number of subjects in first sample\n * @param n2 number of subjects in second sample\n * @return two-sided asymptotic p-value\n * @throws ConvergenceException if the p-value can not be computed\n * due to a convergence error\n * @throws MaxCountExceededException if the maximum number of\n * iterations is exceeded\n */\nprivate double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n\n    final int n1n2prod = n1 * n2;\n\n    // Expected value of U\n    final double EU = n1n2prod / 2.0;\n    // Variance of U\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n\n    // Continuity correction\n    final double correction;\n    if (Umin < EU) {\n        correction = -0.5;\n    } else if (Umin > EU) {\n        correction = 0.5;\n    } else {\n        correction = 0.0;\n    }\n\n    // Z-score with continuity correction\n    final double z = (Umin - EU + correction) / FastMath.sqrt(VarU);\n\n    // Standard normal distribution\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n    // Two-sided p-value\n    final double pOneSide = standardNormal.cumulativeProbability(z);\n    final double pValue = 2 * Math.min(pOneSide, 1 - pOneSide);\n\n    return pValue;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}