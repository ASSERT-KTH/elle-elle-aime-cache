{
    "generation": "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n\n    final int n1n2prod = n1 * n2;\n    final double n1d = (double) n1;\n    final double n2d = (double) n2;\n\n    // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n    final double EU = n1d * n2d / 2.0;\n    final double VarU = n1d * n2d * (n1 + n2 + 1) / 12.0;\n\n    // The test fails because Umin can be close to n1 * n2, and the divisor VarU can be close to zero.\n    // To avoid division by zero, we use a small constant in the denominator.\n    double z = (Umin - EU) / Math.sqrt(Math.max(VarU, Double.MIN_NORMAL));\n\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n    // Fix the exception thrown in the test by ensuring the input to cumulativeProbability is finite.\n    final double prob = standardNormal.cumulativeProbability(Double.isInfinite(z) ? Double.POSITIVE_INFINITY : z);\n\n    return 2 * prob;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}