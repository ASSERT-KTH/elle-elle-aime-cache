{
    "generation": "/**\n * @param Umin smallest Mann-Whitney U value\n * @param n1 number of subjects in first sample\n * @param n2 number of subjects in second sample\n * @return two-sided asymptotic p-value\n * @throws ConvergenceException if the p-value can not be computed\n * due to a convergence error\n * @throws MaxCountExceededException if the maximum number of\n * iterations is exceeded\n */\nprivate double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n\n    final int n1n2prod = (long) n1 * n2; // Cast to long to avoid overflow\n\n    // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n    final double EU = (double) n1n2prod / 2.0;\n    final double VarU = (double) n1n2prod * (n1 + n2 + 1) / 12.0;\n\n    // Check for zero variance to avoid NaN and division by zero\n    if (VarU == 0) {\n        return 1.0; // or handle this case according to your statistical requirements\n    }\n\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n    // Use the survival function for large z values to avoid underflow\n    if (z > 5) { // Most standard normal distributions have negligible probability mass beyond z=5\n        return 2 * (1 - standardNormal.cumulativeProbability(5));\n    } else {\n        return 2 * (1 - standardNormal.cumulativeProbability(z));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}