{
    "generation": "/**\n * @param Umin smallest Mann-Whitney U value\n * @param n1 number of subjects in first sample\n * @param n2 number of subjects in second sample\n * @return two-sided asymptotic p-value\n * @throws ConvergenceException if the p-value can not be computed\n * due to a convergence error\n * @throws MaxCountExceededException if the maximum number of\n * iterations is exceeded\n */\nprivate double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n\n    final int n1n2prod = n1 * n2;\n\n    // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n\n    // Fix: handle the case where z is very large to avoid numerical issues\n    // with the cumulative distribution function\n    if (z > 6) { // Using 6 as a threshold, values above this will yield ~0\n        return 0;\n    } else if (z < -6) { // Similarly, handle very negative z values\n        return 1;\n    }\n\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n    // Fix: Ensure the returned p-value is within valid range [0, 1]\n    return FastMath.min(1, FastMath.max(0, 2 * (1 - standardNormal.cumulativeProbability(FastMath.abs(z)))));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}