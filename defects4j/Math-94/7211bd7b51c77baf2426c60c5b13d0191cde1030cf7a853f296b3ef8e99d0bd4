{
    "generation": "/**\n * <p>\n * Gets the greatest common divisor of the absolute value of two numbers,\n * using the \"binary gcd\" method which avoids division and modulo\n * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n * Stein (1961).\n * </p>\n * \n * @param u a non-zero number\n * @param v a non-zero number\n * @return the greatest common divisor, never zero\n * @since 1.1\n */\npublic static int gcd(int u, int v) {\n    if (u * v == 0) {\n        return Math.abs(u) + Math.abs(v);\n    }\n    // keep u and v negative, as negative integers range down to\n    // -2^31, while positive numbers can only be as large as 2^31-1\n    // (i.e. we can't necessarily negate a negative number without\n    // overflow)\n    /* assert u!=0 && v!=0; */\n    int au = Math.abs(u);\n    int av = Math.abs(v);\n    if (au == av) {\n        return au;\n    }\n    if (au < av) {\n        int t = au;\n        au = av;\n        av = t;\n    }\n    \n    int k = 0;\n    while (k < 31 && ((au & 1) == 0) && ((av & 1) == 0)) {\n        au /= 2;\n        av /= 2;\n        k++;\n    }\n    \n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    \n    int t = (au & 1) == 1 ? av : -(au / 2);\n    do {\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n        if (t > 0) {\n            au = t;\n        } else {\n            av = -t;\n        }\n        t = (av - au) / 2;\n    } while (t != 0);\n    \n    return au * (1 << k);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}