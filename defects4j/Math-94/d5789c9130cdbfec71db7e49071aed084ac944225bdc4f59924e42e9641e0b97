{
    "generation": "    /**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     *\n     * @param u a non-zero number\n     * @param v a non-zero number\n     * @return the greatest common divisor, never zero\n     * @since 1.1\n     */\n    public static int gcd(int u, int v) {\n        // adjust the signs\n        if (u < 0) {\n            u = -u;\n        }\n        if (v < 0) {\n            v = -v;\n        }\n        if (u == 0 && v == 0) {\n            throw new IllegalArgumentException(\"GCD(0, 0) is undefined.\");\n        }\n        if (u == 0) {\n            return v;\n        }\n        if (v == 0) {\n            return u;\n        }\n\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0) {\n            u /= 2;\n            v /= 2;\n            k++;\n        }\n\n        int t = (u % 2 == 0) ? v : u;\n        do {\n            while ((t & 1) == 0) {\n                t /= 2;\n            }\n            if (t > 0) {\n                u = t;\n            } else {\n                v = -t;\n            }\n            t = (v - u) / 2;\n        } while (t != 0);\n\n        return u * (1 << k);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}