{
    "generation": "    public static int gcd(int u, int v) {\n        if (u == 0) {\n            return Math.abs(v);\n        }\n        if (v == 0) {\n            return Math.abs(u);\n        }\n        // Use absolute values to ensure non-negative results\n        u = Math.abs(u);\n        v = Math.abs(v);\n        \n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0) { // while u and v are both even...\n            u >>= 1;\n            v >>= 1;\n            k++; // cast out twos.\n        }\n        \n        // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n        while ((u & 1) == 0) { // u is even\n            u >>= 1;\n        }\n        while ((v & 1) == 0) { // v is even\n            v >>= 1;\n        }\n        \n        // From here on, u and v are both odd\n        while (u != v) {\n            if (u > v) {\n                u = (u - v) >> 1;\n            } else {\n                v = (v - u) >> 1;\n            }\n        }\n        \n        return u << k; // gcd is u*2^k (which equals v*2^k)\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}