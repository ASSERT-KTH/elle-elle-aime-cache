{
    "generation": "/**\n * <p>\n * Gets the greatest common divisor of the absolute value of two numbers,\n * using the \"binary gcd\" method which avoids division and modulo\n * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n * Stein (1961).\n * </p>\n *\n * @param u a non-zero number\n * @param v a non-zero number\n * @return the greatest common divisor, never zero\n * @since 1.1\n */\npublic static int gcd(int u, int v) {\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n\n    // Ensure both numbers are positive\n    u = Math.abs(u);\n    v = Math.abs(v);\n\n    // Find the greatest power of 2 that divides both u and v\n    int k = 0;\n    while (((u | v) & 1) == 0) {\n        u >>= 1;\n        v >>= 1;\n        k++;\n    }\n\n    // Now u and v are both odd\n    while (u != 0) {\n        // Cast out twos from u\n        while ((u & 1) == 0) {\n            u >>= 1;\n        }\n\n        // Cast out twos from v\n        while ((v & 1) == 0) {\n            v >>= 1;\n        }\n\n        // Now u and v are both odd, swap if necessary so u <= v\n        if (u >= v) {\n            u -= v;\n        } else {\n            v -= u;\n        }\n\n        // Repeat the process\n        u >>= Integer.numberOfTrailingZeros(u);  // Equivalent to u /= 2\n    }\n\n    return v << k; // gcd is v * 2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}