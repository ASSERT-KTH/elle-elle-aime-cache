{
    "generation": "/**\n * <p>\n * Gets the greatest common divisor of the absolute value of two numbers,\n * using the \"binary gcd\" method which avoids division and modulo\n * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n * Stein (1961).\n * </p>\n * \n * @param u a number\n * @param v a number\n * @return the greatest common divisor, never zero\n * @since 1.1\n */\npublic static int gcd(int u, int v) {\n    u = Math.abs(u); // absolute value to handle negative numbers\n    v = Math.abs(v); // absolute value to handle negative numbers\n\n    if (u == 0) {\n        return v; // gcd(0, v) = v\n    }\n    if (v == 0) {\n        return u; // gcd(u, 0) = u\n    }\n\n    // keep u and v positive\n    /* assert u!=0 && v!=0; */\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0) { // while u and v are both even...\n        u /= 2;\n        v /= 2;\n        k++; // cast out twos.\n    }\n    // B2. Initialize: u and v have been divided by 2^k and at least\n    // one is odd.\n    int t = ((u & 1) == 1)? v : (u / 2)/* B3 */;\n    // t  : u was odd, v may be even (t replaces v)\n    // t!= : u was even, v is odd (t replaces u)\n    do {\n        /* assert u>0 && v>0; */\n        // B4/B3: cast out twos from t.\n        while ((t & 1) == 0) { // while t is even..\n            t /= 2; // cast out twos\n        }\n        // B5 [reset max(u,v)]\n        if (t > v) {\n            t = v;\n            v = u;\n            u = t;\n        } else {\n            v = t;\n        }\n        // B6/B3. at this point both u and v should be odd.\n        t = (v - u) / 2;\n        // |u| larger: t positive (replace u)\n        // |v| larger: t negative (replace v)\n    } while (t!= 0);\n    return u * (1 << k); // gcd is u*2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}