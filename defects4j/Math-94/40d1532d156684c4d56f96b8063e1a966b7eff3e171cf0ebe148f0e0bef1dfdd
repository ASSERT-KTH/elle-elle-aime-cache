{
    "generation": "public static int gcd(int u, int v) {\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n    \n    // Use absolute values for the algorithm to ensure positivity.\n    u = Math.abs(u);\n    v = Math.abs(v);\n    \n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    while ((u & 1) == 0) {\n        u /= 2; // make u odd\n    }\n    \n    int t;\n    do {\n        while ((v & 1) == 0) {\n            v /= 2; // make v odd\n        }\n        \n        // Ensure u <= v.\n        if (u > v) {\n            int temp = u;\n            u = v;\n            v = temp;\n        }\n\n        v = v - u; // v is now guaranteed to be even\n\n    } while (v != 0);\n\n    return u * (1 << k);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}