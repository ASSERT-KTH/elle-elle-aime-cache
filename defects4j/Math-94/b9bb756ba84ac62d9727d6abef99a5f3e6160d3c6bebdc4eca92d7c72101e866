{
    "generation": "    public static int gcd(int u, int v) {\n        if (u == 0 && v == 0) {\n            return 0; // GCD(0, 0) is undefined, but returning 0 for this case as per typical conventions\n        }\n        if (u == 0) {\n            return Math.abs(v); // GCD(0, v) = |v|\n        }\n        if (v == 0) {\n            return Math.abs(u); // GCD(u, 0) = |u|\n        }\n\n        // Make both numbers positive to simplify calculations\n        u = Math.abs(u);\n        v = Math.abs(v);\n\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0) { // while u and v are both even...\n            u >>= 1; // divide by 2\n            v >>= 1; // divide by 2\n            k++;     // increment power of 2 factor\n        }\n\n        // B2. Ensure at least one of them is odd\n        while ((u & 1) == 0) {\n            u >>= 1; // make u odd\n        }\n        while ((v & 1) == 0) {\n            v >>= 1; // make v odd\n        }\n\n        // B3. Subtract until we find the GCD\n        while (u != v) {\n            if (u > v) {\n                u = u - v; // u and v remain positive\n            } else {\n                v = v - u; // u and v remain positive\n            }\n            while ((u & 1) == 0) {\n                u >>= 1; // ensure u is odd\n            }\n            while ((v & 1) == 0) {\n                v >>= 1; // ensure v is odd\n            }\n        }\n\n        // B4. Combine the common factor of 2^k\n        return u << k; // u is the GCD\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}