{
    "generation": "/**\n * <p>\n * Gets the greatest common divisor of the absolute value of two numbers,\n * using the \"binary gcd\" method which avoids division and modulo\n * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n * Stein (1961).\n * </p>\n * \n * @param u a number\n * @param v a number\n * @return the greatest common divisor\n * @since 1.1\n */\npublic static int gcd(int u, int v) {\n    u = Math.abs(u);\n    v = Math.abs(v);\n\n    if (u == 0) {\n        return v;\n    }\n    if (v == 0) {\n        return u;\n    }\n\n    // keep u and v positive\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...\n        u /= 2;\n        v /= 2;\n        k++; // cast out twos.\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    int t;\n    do {\n        // B3: \n        while ((u & 1) == 0) { // while u is even..\n            u /= 2; // cast out twos\n        }\n        // B5 [reset max(u,v)]\n        t = (v - u);\n        while ((t & 1) == 0 && t!= 0) { // while t is even..\n            t /= 2; // cast out twos\n        }\n        if (t > 0) {\n            v = t;\n        } else {\n            u = -t;\n        }\n    } while (u!= v);\n    return u * (1 << k); // gcd is u*2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}