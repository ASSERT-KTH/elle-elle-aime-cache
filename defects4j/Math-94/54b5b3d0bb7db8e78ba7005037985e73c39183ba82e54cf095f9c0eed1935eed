{
    "generation": "public static int gcd(int u, int v) {\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n    // Keep u and v negative to avoid overflow when negating\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & v & 1) == 0 && k < 31) { // while u and v are both even...\n        u >>= 1;\n        v >>= 1;\n        k++; // cast out twos\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    int t = ((u & 1) == 1) ? v : -(u >> 1);\n\n    // Main loop\n    do {\n        // B4/B3: cast out twos from t.\n        while ((t & 1) == 0) { // while t is even...\n            t >>= 1; // cast out twos\n        }\n        // B5 [reset max(u,v)]\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        // B6/B3. At this point both u and v should be odd.\n        t = (v - u) >> 1;\n    } while (t != 0);\n\n    return -u * (1 << k); // gcd is u * 2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}