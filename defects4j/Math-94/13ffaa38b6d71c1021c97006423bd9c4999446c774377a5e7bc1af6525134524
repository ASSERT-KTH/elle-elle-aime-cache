{
    "generation": "/**\n * <p>\n * Gets the greatest common divisor of the absolute value of two numbers,\n * using the \"binary gcd\" method which avoids division and modulo\n * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n * Stein (1961).\n * </p>\n * \n * @param u a non-zero number\n * @param v a non-zero number\n * @return the greatest common divisor, never zero\n * @since 1.1\n */\npublic static int gcd(int u, int v) {\n    // Handle the special case where one or both numbers are zero\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n\n    // Keep u and v negative to avoid overflow\n    u = Math.abs(u);\n    v = Math.abs(v);\n\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { \n        u >>= 1;\n        v >>= 1;\n        k++; \n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    while (u != 0) {\n        // B3. [Reduce]\n        while ((u & 1) == 0) {\n            u >>= 1;\n        }\n        while ((v & 1) == 0) {\n            v >>= 1;\n        }\n\n        // B4. [Subtract]\n        if (u >= v) {\n            u -= v;\n        } else {\n            int temp = u;\n            u = v;\n            v = temp;\n        }\n    }\n\n    return v << k; // gcd is v*2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}