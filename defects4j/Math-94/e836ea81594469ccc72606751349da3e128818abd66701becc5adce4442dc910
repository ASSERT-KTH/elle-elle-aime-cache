{
    "generation": "public static int gcd(int u, int v) {\n    if (u == 0 || v == 0) {\n        return Math.abs(u) + Math.abs(v);\n    }\n    \n    int absU = Math.abs(u);\n    int absV = Math.abs(v);\n    \n    // B1. [Find power of 2]\n    int k = 0;\n    while ((absU & 1) == 0 && (absV & 1) == 0 && k < 31) {\n        absU /= 2;\n        absV /= 2;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    \n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    int t = (absU & 1) == 1 ? absV : -(absU / 2);\n    \n    do {\n        // B4/B3: cast out twos from t.\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n        // B5 [reset max(u,v)]\n        if (t > 0) {\n            absU = t;\n        } else {\n            absV = -t;\n        }\n        // B6/B3. at this point both u and v should be odd.\n        t = (absV - absU) / 2;\n    } while (t != 0);\n    \n    return absU << k; // gcd is u*2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}