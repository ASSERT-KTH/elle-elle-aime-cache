{
    "generation": "    public static int gcd(int u, int v) {\n        // Handle special cases\n        if (u == 0 && v == 0) {\n            return 0; // gcd(0, 0) is mathematically undefined, return 0.\n        }\n        if (u == 0) {\n            return Math.abs(v); // gcd(0, v) = |v|\n        }\n        if (v == 0) {\n            return Math.abs(u); // gcd(u, 0) = |u|\n        }\n\n        // Ensure u and v are positive for simplicity\n        u = Math.abs(u);\n        v = Math.abs(v);\n\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0) { // while u and v are both even...\n            u >>= 1; // equivalent to u /= 2\n            v >>= 1; // equivalent to v /= 2\n            k++; // cast out twos.\n        }\n\n        // B2. Make one number odd\n        while ((u & 1) == 0) {\n            u >>= 1; // Divide u by 2 until it becomes odd\n        }\n\n        // From here on, u is guaranteed to be odd\n        do {\n            while ((v & 1) == 0) {\n                v >>= 1; // Divide v by 2 until it becomes odd\n            }\n\n            // Ensure u <= v (swap if necessary)\n            if (u > v) {\n                int temp = u;\n                u = v;\n                v = temp;\n            }\n\n            v = v - u; // v now holds the difference (v - u), which is even\n        } while (v != 0);\n\n        // gcd is u * 2^k\n        return u << k; // equivalent to u * (1 << k)\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}