{
    "generation": "    /**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * \n     * @param u a number\n     * @param v a number\n     * @return the greatest common divisor, never negative\n     * @since 1.1\n     */\n    public static int gcd(int u, int v) {\n        if (u == 0 && v == 0) {\n            return 0; // gcd(0, 0) is conventionally considered 0\n        }\n        if (u == 0) {\n            return Math.abs(v); // gcd(0, v) = |v|\n        }\n        if (v == 0) {\n            return Math.abs(u); // gcd(u, 0) = |u|\n        }\n\n        // Make u and v positive\n        u = Math.abs(u);\n        v = Math.abs(v);\n\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0) { // while u and v are both even...\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos\n        }\n\n        // Ensure u is odd\n        while ((u & 1) == 0) { \n            u /= 2; \n        }\n\n        // Process the algorithm\n        do {\n            // Ensure v is odd\n            while ((v & 1) == 0) { \n                v /= 2; \n            }\n\n            // Subtract smaller from larger\n            if (u > v) {\n                int temp = u;\n                u = v;\n                v = temp;\n            }\n            v -= u;\n\n        } while (v != 0);\n\n        // Restore factor of 2\n        return u * (1 << k);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}