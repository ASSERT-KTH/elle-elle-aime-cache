{
    "generation": "/**\n * <p>\n * Gets the greatest common divisor of the absolute value of two numbers,\n * using the \"binary gcd\" method which avoids division and modulo\n * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n * Stein (1961).\n * </p>\n * \n * @param u a non-zero number\n * @param v a non-zero number\n * @return the greatest common divisor, never zero\n * @since 1.1\n */\npublic static int gcd(int u, int v) {\n    if (u == 0) return Math.abs(v);\n    if (v == 0) return Math.abs(u);\n\n    // Make both numbers positive\n    u = Math.abs(u);\n    v = Math.abs(v);\n\n    // B1. [Find power of 2]\n    int k;\n    for (k = 0; ((u | v) & 1) == 0; ++k) {\n        u >>= 1;\n        v >>= 1;\n    }\n\n    // B2. Divide u by 2 until odd\n    while ((u & 1) == 0) {\n        u >>= 1;\n    }\n\n    // B3. [Main loop]\n    do {\n        while ((v & 1) == 0) {\n            v >>= 1;\n        }\n\n        // Swap if necessary\n        if (u > v) {\n            int temp = u;\n            u = v;\n            v = temp;\n        }\n\n        v = v - u;\n    } while (v != 0);\n\n    // B6. Restore common factors of 2\n    return u << k;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}