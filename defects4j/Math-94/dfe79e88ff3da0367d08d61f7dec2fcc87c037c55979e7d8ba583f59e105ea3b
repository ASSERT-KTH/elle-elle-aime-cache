{
    "generation": "public static int gcd(int u, int v) {\n    if (u == 0 && v == 0) {\n        return 0;\n    }\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n\n    // Make both u and v negative to handle overflow correctly\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n\n    // Step 1: Remove common factors of 2\n    int k = 0;\n    while (((u & 1) == 0) && ((v & 1) == 0) && (k < 31)) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n\n    // Step 2: Make u odd\n    while ((u & 1) == 0) {\n        u /= 2;\n    }\n\n    // Main loop\n    while (v != 0) {\n        // Make v odd\n        while ((v & 1) == 0) {\n            v /= 2;\n        }\n\n        // Now u and v are both odd\n        if (u > v) {\n            int temp = u;\n            u = v;\n            v = temp;\n        } // Swap to make u <= v\n\n        v = (v - u) / 2;\n    }\n\n    // Restore the common factors of 2\n    return -u << k;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}