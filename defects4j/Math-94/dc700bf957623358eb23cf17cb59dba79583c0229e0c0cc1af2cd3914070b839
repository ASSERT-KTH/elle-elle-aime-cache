{
    "generation": "    public static int gcd(int u, int v) {\n        if (u == 0 && v == 0) {\n            return 0; // both numbers are zero, gcd is undefined\n        }\n        if (u == 0) {\n            return Math.abs(v); // gcd of 0 and a number is the absolute value of the other number\n        }\n        if (v == 0) {\n            return Math.abs(u); // gcd of a number and 0 is the absolute value of the number\n        }\n        // keep u and v negative to avoid overflow issues when negating\n        if (u > 0) {\n            u = -u;\n        }\n        if (v > 0) {\n            v = -v;\n        }\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0) { // while u and v are both even\n            u /= 2;\n            v /= 2;\n            k++; // remove common factors of 2\n        }\n        // make u odd\n        while ((u & 1) == 0) {\n            u /= 2;\n        }\n        do {\n            // make v odd\n            while ((v & 1) == 0) {\n                v /= 2;\n            }\n            // use subtraction to reduce the problem\n            if (u > v) {\n                int temp = u;\n                u = v;\n                v = temp;\n            }\n            v = v - u; // v is now non-negative and smaller than u\n        } while (v != 0);\n        return -u * (1 << k); // gcd is u * 2^k\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}