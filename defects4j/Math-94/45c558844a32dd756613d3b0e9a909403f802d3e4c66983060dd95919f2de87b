{
    "generation": "public static int gcd(int u, int v) {\n    // Handle special cases\n    if (u == 0) return Math.abs(v);\n    if (v == 0) return Math.abs(u);\n    \n    // Make sure u and v are positive\n    u = Math.abs(u);\n    v = Math.abs(v);\n    \n    // Find the greatest power of 2 that divides both u and v\n    int k = 0;\n    while ((u | v) % 2 == 0) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    \n    // Make sure u is odd\n    while (u % 2 == 0) {\n        u /= 2;\n    }\n    \n    // From here on, u is always odd\n    while (v != 0) {\n        // Remove all factors of 2 in v, because they are not common\n        while (v % 2 == 0) {\n            v /= 2;\n        }\n        \n        // Now u and v are both odd, swap if necessary so u <= v\n        if (u > v) {\n            int temp = u;\n            u = v;\n            v = temp;\n        }\n        \n        // Remove the common factor of u from v\n        v -= u;\n    }\n    \n    // Restore the common factors of 2\n    return u << k;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}