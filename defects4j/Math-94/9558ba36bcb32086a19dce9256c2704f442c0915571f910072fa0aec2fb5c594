{
    "generation": "    public static int gcd(int u, int v) {\n        if (u == 0) {\n            return Math.abs(v);\n        }\n        if (v == 0) {\n            return Math.abs(u);\n        }\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n\n        u = Math.abs(u);\n        v = Math.abs(v);\n\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0) { // while u and v are both even...\n            u >>= 1;\n            v >>= 1;\n            k++; // cast out twos.\n        }\n\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        // one is odd.\n        while ((u & 1) == 0) { // Make u odd.\n            u >>= 1;\n        }\n\n        do {\n            while ((v & 1) == 0) { // Make v odd.\n                v >>= 1;\n            }\n\n            // B5 [reset max(u,v)]\n            if (u > v) {\n                int temp = u;\n                u = v;\n                v = temp;\n            }\n            v -= u; // B6/B3. at this point v is even.\n        } while (v != 0);\n\n        return u << k; // gcd is u*2^k\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}