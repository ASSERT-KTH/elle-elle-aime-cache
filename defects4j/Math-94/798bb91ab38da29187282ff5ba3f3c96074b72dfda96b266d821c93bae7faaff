{
    "generation": "public static int gcd(int u, int v) {\n    // If u or v is 0, return the absolute value of the other\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n\n    // Keep u and v negative, handling constraints\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n\n    // If we finished due to exceeding maximum iterations, throw an exception\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n\n    do {\n        // B4/B3: cast out twos from t.\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n\n        // B5 [reset max(u,v)]\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n\n        // B6/B3. at this point both u and v should be odd.\n        t = (v - u) / 2;\n\n    } while (t != 0);\n\n    // Return gcd is u*2^k and make it positive\n    return Math.abs(u) * (1 << k);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}