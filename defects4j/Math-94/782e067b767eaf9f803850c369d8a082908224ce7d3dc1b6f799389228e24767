{
    "generation": "/**\n * <p>\n * Gets the greatest common divisor of the absolute value of two numbers,\n * using the \"binary gcd\" method which avoids division and modulo\n * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n * Stein (1961).\n * </p>\n * \n * @param u a non-zero number\n * @param v a non-zero number\n * @return the greatest common divisor, never zero\n * @since 1.1\n */\npublic static int gcd(int u, int v) {\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n    // keep u and v negative, as negative integers range down to\n    // -2^31, while positive numbers can only be as large as 2^31-1\n    // (i.e. we can't necessarily negate a negative number without\n    // overflow)\n    // assert u!=0 && v!=0;\n    if (u > 0) {\n        u = -u;\n    } // make u negative\n    if (v > 0) {\n        v = -v;\n    } // make v negative\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0) { // while u and v are both even...\n        u /= 2;\n        v /= 2;\n        k++; // cast out twos.\n    }\n    // B2. Initialize: u and v have been divided by 2^k and at least\n    // one is odd.\n    do {\n        // B3.\n        if (u > v) {\n            int t = u;\n            u = v;\n            v = t;\n        }\n        // Here v >= u.\n        if (u > 0) { // u is odd\n            v = v - u;\n        } else { // u is even\n            v = v + u;\n        }\n        // v is odd (since we originally had at least one odd),\n        // so B3 applies and v >= u >= 0.\n        // B4: cast out twos\n        while ((v & 1) == 0) { // while v is even...\n            v /= 2;\n        }\n    } while (v!= u);\n    return -u * (1 << k); // gcd is u*2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}