{
    "generation": "private void guessAOmega() {\n    double sx = 0;\n    double sx2 = 0;\n    double sy = 0;\n    double sxy = 0;\n\n    final int len = observations.length;\n    double startX = observations[0].getX();\n    double endX = observations[len - 1].getX();\n    double xRange = endX - startX;\n\n    for (int i = 0; i < len; i++) {\n        double x = observations[i].getX() - startX;\n        double y = observations[i].getY();\n\n        sx += x;\n        sx2 += x * x;\n        sy += y;\n        sxy += x * y;\n    }\n\n    double sy_ = sx * sy / len;\n    double sxy_ = sx * sxy / len;\n\n    double sxx_ = sx * sx / len;\n    double sx2_ = sx2 / len;\n\n    double syy_ = 0;\n    double sx2y2_ = 0;\n    for (int i = 0; i < len; i++) {\n        double y = observations[i].getY() - sy_ ;\n        double x2 = (observations[i].getX() - startX) * (observations[i].getX() - startX);\n        syy_ += y * y ;\n        sx2y2_ += x2 * y * y ;\n    }\n    syy_ /= len;\n    sx2y2_ /= len;\n\n    double c1 = syy_ * sx2_ - sxy_ * sxy_;\n    double c2 = sxy_ * sx2_ - sx_ * sxy_;\n    double c3 = sx2_ * sx2_ - sxx_ * sxx_;\n\n    if (c1 <= 0 || c2 <= 0 || c3 <= 0) {\n        omega = 2 * FastMath.PI / xRange;\n        a = (sy / len);\n    } else {\n        a = FastMath.sqrt(c1) * FastMath.sqrt(sx2_ / c3);\n        omega = FastMath.sqrt(c3) * FastMath.sqrt(syy_ / c2) / xRange;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}