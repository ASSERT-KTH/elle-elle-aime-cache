{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // Compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double v1x = v1.getX();\n    final double v1y = v1.getY();\n    final double v1z = v1.getZ();\n    final double v2x = v2.getX();\n    final double v2y = v2.getY();\n    final double v2z = v2.getZ();\n    \n    final double v1Norm2 = v1x * v1x + v1y * v1y + v1z * v1z;\n    final double v2Norm2 = v2x * v2x + v2y * v2y + v2z * v2z;\n    final double rho = FastMath.rint((v1x * v2x + v1y * v2y + v1z * v2z) / v2Norm2 * 256.0) / 256.0;\n    \n    // Compute v3 = v1 - rho v2\n    final double v3x = v1x - rho * v2x;\n    final double v3y = v1y - rho * v2y;\n    final double v3z = v1z - rho * v2z;\n    \n    // Compute cross product from v3 and v2\n    return new Vector3D(v3y * v2z - v3z * v2y,\n                       v3z * v2x - v3x * v2z,\n                       v3x * v2y - v3y * v2x);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}