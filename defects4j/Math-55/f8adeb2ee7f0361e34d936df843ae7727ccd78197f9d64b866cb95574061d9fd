{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // Reduce cancellation errors by preconditioning\n    final double rho = (v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ()) /\n                      (v2.getX() * v2.getX() + v2.getY() * v2.getY() + v2.getZ() * v2.getZ());\n\n    final Vector3D v3 = new Vector3D(v1.getX() - rho * v2.getX(),\n                                     v1.getY() - rho * v2.getY(),\n                                     v1.getZ() - rho * v2.getZ());\n\n    // Compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3.getY() * v2.getZ() - v3.getZ() * v2.getY(),\n                        v3.getZ() * v2.getX() - v3.getX() * v2.getZ(),\n                        v3.getX() * v2.getY() - v3.getY() * v2.getX());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}