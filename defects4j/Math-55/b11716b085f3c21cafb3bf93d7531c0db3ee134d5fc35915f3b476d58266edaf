{
    "generation": "/** Compute the cross-product of two vectors.\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector\n */\npublic static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    double rho = (v1.dotProduct(v2) * 255) / (FastMath.hypot(v2.getX(), v2.getY(), v2.getZ()) * FastMath.hypot(v2.getX(), v2.getY(), v2.getZ()));\n    rho = Math.round(rho) / 255.0;\n\n    // compute v3 = v1 - rho v2\n    Vector3D v3 = new Vector3D(v1.getX() - rho * v2.getX(), v1.getY() - rho * v2.getY(), v1.getZ() - rho * v2.getZ());\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3.y * v2.z - v3.z * v2.y, v3.z * v2.x - v3.x * v2.z, v3.x * v2.y - v3.y * v2.x);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}