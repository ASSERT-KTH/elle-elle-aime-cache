{
    "generation": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n      // Compute the scalars for rescaling\n      final double scale1 = FastMath.max(FastMath.abs(v1.getX()),\n                                         FastMath.abs(v1.getY()),\n                                         FastMath.abs(v1.getZ()));\n      final double scale2 = FastMath.max(FastMath.abs(v2.getX()),\n                                         FastMath.abs(v2.getY()),\n                                         FastMath.abs(v2.getZ()));\n\n      // Rescale vectors\n      final Vector3D v1Scaled = new Vector3D(v1.getX() / scale1, v1.getY() / scale1, v1.getZ() / scale1);\n      final Vector3D v2Scaled = new Vector3D(v2.getX() / scale2, v2.getY() / scale2, v2.getZ() / scale2);\n\n      // Compute cross product\n      final double crossX = v1Scaled.getY() * v2Scaled.getZ() - v1Scaled.getZ() * v2Scaled.getY();\n      final double crossY = v1Scaled.getZ() * v2Scaled.getX() - v1Scaled.getX() * v2Scaled.getZ();\n      final double crossZ = v1Scaled.getX() * v2Scaled.getY() - v1Scaled.getY() * v2Scaled.getX();\n\n      // Rescale back to original magnitudes\n      return new Vector3D(crossX * scale1 * scale2, crossY * scale1 * scale2, crossZ * scale1 * scale2);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}