{
    "generation": "/** Compute the cross-product of two vectors.\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector\n */\npublic static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    double rho = (8 * (v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ())) / (255 * (v2.getX() * v2.getX() + v2.getY() * v2.getY() + v2.getZ() * v2.getZ()));\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    Vector3D v3 = new Vector3D(v1.getX() - rho * v2.getX(), v1.getY() - rho * v2.getY(), v1.getZ() - rho * v2.getZ());\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3.getY() * v2.getZ() - v3.getZ() * v2.getY(), v3.getZ() * v2.getX() - v3.getX() * v2.getZ(), v3.getX() * v2.getY() - v3.getY() * v2.getX());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}