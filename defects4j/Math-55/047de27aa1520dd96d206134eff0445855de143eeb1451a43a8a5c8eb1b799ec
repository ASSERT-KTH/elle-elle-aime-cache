{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double scale = 1.0 / (FastMath.max(FastMath.max(FastMath.abs(v1.x), FastMath.abs(v1.y)), FastMath.abs(v1.z)) *\n                               FastMath.max(FastMath.max(FastMath.abs(v2.x), FastMath.abs(v2.y)), FastMath.abs(v2.z)));\n    final Vector3D u1 = new Vector3D(scale, v1);\n    final Vector3D u2 = new Vector3D(scale, v2);\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double dx1 = u1.x - u2.x;\n    final double dy1 = u1.y - u2.y;\n    final double dz1 = u1.z - u2.z;\n    final Vector3D v3 = new Vector3D(dx1, dy1, dz1);\n\n    // compute cross product from v3 and v2\n    final Vector3D cross = new Vector3D(\n        v3.y * u2.z - v3.z * u2.y,\n        v3.z * u2.x - v3.x * u2.z,\n        v3.x * u2.y - v3.y * u2.x\n    );\n\n    // rescale result\n    return new Vector3D(1.0 / scale, cross);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}