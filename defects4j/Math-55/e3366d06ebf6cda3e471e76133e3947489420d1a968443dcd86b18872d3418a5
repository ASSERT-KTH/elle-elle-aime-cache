{
    "generation": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      double rho = Math.rint((v1.dotProduct(v2) / v2.dotProduct(v2)) * 256) / 256;\n\n      // compute v3 = v1 - rho * v2\n      Vector3D v3 = new Vector3D(1.0, v1, -rho, v2);\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(v3.getY() * v2.getZ() - v3.getZ() * v2.getY(), \n                          v3.getZ() * v2.getX() - v3.getX() * v2.getZ(), \n                          v3.getX() * v2.getY() - v3.getY() * v2.getX());\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}