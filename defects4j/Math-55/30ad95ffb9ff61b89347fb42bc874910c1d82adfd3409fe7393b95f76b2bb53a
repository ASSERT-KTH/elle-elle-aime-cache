{
    "generation": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n      // Rescale both vectors without losing precision,\n      // to ensure their norms are the same order of magnitude\n\n      // Replace v1 by v3 = v1 - rho * v2 with rho chosen to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // Compute rho as an 8-bit approximation of v1.dot(v2) / v2.dot(v2)\n      final double rho = v1.dot(v2) / v2.dot(v2);\n\n      // Compute v3 = v1 - rho * v2\n      final Vector3D v3 = new Vector3D(v1.getX() - rho * v2.getX(),\n                                       v1.getY() - rho * v2.getY(),\n                                       v1.getZ() - rho * v2.getZ());\n\n      // Compute the cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(v3.getY() * v2.getZ() - v3.getZ() * v2.getY(),\n                          v3.getZ() * v2.getX() - v3.getX() * v2.getZ(),\n                          v3.getX() * v2.getY() - v3.getY() * v2.getX());\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}