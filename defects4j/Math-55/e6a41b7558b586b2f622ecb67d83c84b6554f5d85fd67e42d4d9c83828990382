{
    "generation": "/** Compute the cross-product of two vectors.\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector\n */\npublic static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n  // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n  double dotProductV1V2 = v1.dotProduct(v2);\n  double dotProductV2V2 = v2.dotProduct(v2);\n  double rho            = (dotProductV1V2 / dotProductV2V2) * 255.0;\n  rho                   = (rho - (int) rho) * 255.0;\n  int rhoInt            = (int) rho;\n  rho                   = rhoInt / 255.0;\n\n  // rescale both vectors without losing precision,\n  // to ensure their norm are the same order of magnitude\n  double normV2         = FastMath.hypot(FastMath.hypot(v2.getX(), v2.getY()), v2.getZ());\n  Vector3D scaledV1     = new Vector3D(v1.getX() / normV2, v1.getY() / normV2, v1.getZ() / normV2);\n  Vector3D scaledV2     = new Vector3D(v2.getX() / normV2, v2.getY() / normV2, v2.getZ() / normV2);\n\n  // we reduce cancellation errors by preconditioning,\n  // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n  // v3 without loss of precision. See Kahan lecture\n  // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n  // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n  Vector3D v3           = new Vector3D(scaledV1.getX() - rho * scaledV2.getX(),\n                                        scaledV1.getY() - rho * scaledV2.getY(),\n                                        scaledV1.getZ() - rho * scaledV2.getZ());\n\n  // compute cross product from v3 and v2 instead of v1 and v2\n  double x              = (v3.getY() * scaledV2.getZ() - v3.getZ() * scaledV2.getY()) * normV2;\n  double y              = (v3.getZ() * scaledV2.getX() - v3.getX() * scaledV2.getZ()) * normV2;\n  double z              = (v3.getX() * scaledV2.getY() - v3.getY() * scaledV2.getX()) * normV2;\n\n  return new Vector3D(x, y, z);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}