{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // Compute scaling factors\n      double norm1 = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);\n      double norm2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);\n      double scale = Math.max(norm1, norm2);\n\n      // Rescale the vectors to reduce numerical precision issues\n      double scaledX1 = v1.x / scale;\n      double scaledY1 = v1.y / scale;\n      double scaledZ1 = v1.z / scale;\n\n      double scaledX2 = v2.x / scale;\n      double scaledY2 = v2.y / scale;\n      double scaledZ2 = v2.z / scale;\n\n      // Compute cross product with rescaled components\n      double resultX = scaledY1 * scaledZ2 - scaledZ1 * scaledY2;\n      double resultY = scaledZ1 * scaledX2 - scaledX1 * scaledZ2;\n      double resultZ = scaledX1 * scaledY2 - scaledY1 * scaledX2;\n\n      // Scale the result back to the original magnitude\n      return new Vector3D(resultX * scale * scale, resultY * scale * scale, resultZ * scale * scale);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}