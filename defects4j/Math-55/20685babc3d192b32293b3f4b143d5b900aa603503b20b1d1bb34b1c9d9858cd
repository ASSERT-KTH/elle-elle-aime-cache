{
    "generation": "/** Compute the cross-product of two vectors.\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector3D\n */\npublic static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // Compute rho to precondition vectors for better numerical stability\n    double rho = v1.dot(v2) / v2.dot(v2);\n    \n    // Compute v3 = v1 - rho * v2\n    Vector3D v3 = v1.subtract(v2.scalarMultiply(rho));\n    \n    // Compute the cross product of v3 and v2\n    double crossX = v3.getY() * v2.getZ() - v3.getZ() * v2.getY();\n    double crossY = v3.getZ() * v2.getX() - v3.getX() * v2.getZ();\n    double crossZ = v3.getX() * v2.getY() - v3.getY() * v2.getX();\n    \n    return new Vector3D(crossX, crossY, crossZ);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}