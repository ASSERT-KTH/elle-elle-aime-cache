{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      double norm2 = v2.dotProduct(v2);\n      double rho = v1.dotProduct(v2) / norm2;\n      double scaledX = v1.x - rho * v2.x;\n      double scaledY = v1.y - rho * v2.y;\n      double scaledZ = v1.z - rho * v2.z;\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(scaledY * v2.z - scaledZ * v2.y, scaledZ * v2.x - scaledX * v2.z, scaledX * v2.y - scaledY * v2.x);\n\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}