{
    "generation": "/** Compute the cross-product of two vectors.\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector\n */\npublic static Vector3D crossProduct(final Vector3D v1, final VectorD v2) {\n    // Compute rho as an 8-bit approximation of v1.v2 / v2.v2\n    double v1DotV2 = v1.dotProduct(v2);\n    double v2DotV2 = v2.dotProduct(v2);\n    double inv = 1.0 / v2DotV2;\n    double s = v1DotV2 * inv;\n    // Round s to 8 bits\n    int si = (int) (Double.doubleToLongBits(s) >> 52);\n    double rho = Double.longBitsToDouble(((long) si) << 52);\n\n    // Compute v3 = v1 - rho * v2\n    Vector3D v3 = v1.subtract(v2.scalarMultiply(rho));\n\n    // Compute cross product from v3 and v2\n    double c1 = v3.y * v2.z - v3.z * v2.y;\n    double c2 = v3.z * v2.x - v3.x * v2.z;\n    double c3 = v3.x * v2.y - v3.y * v2.x;\n\n    // Normalize the result\n    double norm = Math.sqrt(c1 * c1 + c2 * c2 + c3 * c3);\n    if (norm == 0) {\n        return new Vector3D(0, 0, 0);\n    }\n\n    return new Vector3D(c1 / norm, c2 / norm, c3 / norm);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}