{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      double v2NormSq = v2.dotProduct(v2);\n      double v1DotV2  = v1.dotProduct(v2);\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      double rho = v2NormSq!= 0? (v1DotV2 / v2NormSq) * 256 : 0;\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n      double v1x = v1.x - (rho / 256) * v2.x;\n      double v1y = v1.y - (rho / 256) * v2.y;\n      double v1z = v1.z - (rho / 256) * v2.z;\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(v1y * v2.z - v1z * v2.y,\n                          v1z * v2.x - v1x * v2.z,\n                          v1x * v2.y - v1y * v2.x);\n\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}