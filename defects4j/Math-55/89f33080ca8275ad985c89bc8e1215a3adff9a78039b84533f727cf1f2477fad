{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double norm1 = v1.getNorm();\n    final double norm2 = v2.getNorm();\n    if ((norm1 == 0.0) || (norm2 == 0.0)) {\n        return new Vector3D(0, 0, 0);\n    }\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double scale = FastMath.floor(FastMath.pow(2.0, FastMath.floor(FastMath.log(norm1 / norm2) / FastMath.log(2.0))));\n    final Vector3D v3 = new Vector3D(1, v1, -scale, v2);\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3.y * v2.z - v3.z * v2.y,\n                       v3.z * v2.x - v3.x * v2.z,\n                       v3.x * v2.y - v3.y * v2.x);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}