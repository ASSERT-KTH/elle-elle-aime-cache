{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // prepare computation\n    double x1 = v1.getX();\n    double y1 = v1.getY();\n    double z1 = v1.getZ();\n    double x2 = v2.getX();\n    double y2 = v2.getY();\n    double z2 = v2.getZ();\n\n    // find normalized components\n    double n1 = FastMath.sqrt(x1 * x1 + y1 * y1 + z1 * z1);\n    double n2 = FastMath.sqrt(x2 * x2 + y2 * y2 + z2 * z2);\n    if ((n1 == 0) || (n2 == 0)) {\n        return new Vector3D(0, 0, 0);\n    }\n    double inv = 1.0 / (n1 * n2);\n    double c = inv * (x1 * x2 + y1 * y2 + z1 * z2);\n    if (c < -0.99999999999) {\n        return new Vector3D(0, 0, 0);\n    }\n\n    // compute vectorial product\n    double nx = FastMath.abs(x1) + FastMath.abs(x2);\n    double ny = FastMath.abs(y1) + FastMath.abs(y2);\n    double nz = FastMath.abs(z1) + FastMath.abs(z2);\n    if (nz > nx && nz > ny) {\n        double f = 1.0 / FastMath.sqrt((1 + c) * (1 - c));\n        double alpha = x2 * y1 - x1 * y2;\n        double beta  = (x1 * x2 + y1 * y2) * f;\n        double tx = (x1 + x2) * f;\n        double ty = (y1 + y2) * f;\n        double gamma = 0.5 * (tx * ty - beta * alpha);\n        return new Vector3D((x2 * z1 - x1 * z2) * f,\n                          (y2 * z1 - y1 * z2) * f,\n                          gamma);\n    } else if (ny > nx) {\n        double f = 1.0 / FastMath.sqrt((1 + c) * (1 - c));\n        double alpha = y2 * z1 - y1 * z2;\n        double beta  = (y1 * y2 + z1 * z2) * f;\n        double ty = (y1 + y2) * f;\n        double tz = (z1 + z2) * f;\n        double gamma = 0.5 * (ty * tz - beta * alpha);\n        return new Vector3D(gamma,\n                          (z2 * x1 - z1 * x2) * f,\n                          (x2 * y1 - x1 * y2) * f);\n    } else {\n        double f = 1.0 / FastMath.sqrt((1 + c) * (1 - c));\n        double alpha = z2 * x1 - z1 * x2;\n        double beta  = (z1 * z2 + x1 * x2) * f;\n        double tz = (z1 + z2) * f;\n        double tx = (x1 + x2) * f;\n        double gamma = 0.5 * (tz * tx - beta * alpha);\n        return new Vector3D((y2 * z1 - y1 * z2) * f,\n                          gamma,\n                          (y1 * x2 - y2 * x1) * f);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}