{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double x1 = v1.getX();\n    final double y1 = v1.getY();\n    final double z1 = v1.getZ();\n    final double x2 = v2.getX();\n    final double y2 = v2.getY();\n    final double z2 = v2.getZ();\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double ratio = (x1 * x2 + y1 * y2 + z1 * z2) / (x2 * x2 + y2 * y2 + z2 * z2);\n    final double rho   = Math.rint(256 * ratio) / 256;\n\n    // compute v3 = v1 - rho v2\n    final double x3 = x1 - rho * x2;\n    final double y3 = y1 - rho * y2;\n    final double z3 = z1 - rho * z2;\n\n    // compute cross product from v3 and v2\n    return new Vector3D(y3 * z2 - z3 * y2,\n                        z3 * x2 - x3 * z2,\n                        x3 * y2 - y3 * x2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}