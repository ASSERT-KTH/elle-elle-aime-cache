{
    "generation": "/** Compute the cross-product of two vectors.\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector\n */\npublic static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    double dotProductV1V2 = v1.dotProduct(v2);\n    double dotProductV2V2 = v2.dotProduct(v2);\n    double rho = MathEx.extractExponent(dotProductV1V2) - MathEx.extractExponent(dotProductV2V2);\n    double scaledDotProductV1V2 = FastMath.pow(2, rho) * dotProductV1V2;\n    rho = (int) (scaledDotProductV1V2 / dotProductV2V2 + 0.5);\n\n    // compute v3 = v1 - rho v2\n    Vector3D v3 = v1.subtract(rho * v2);\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3.y * v2.z - v3.z * v2.y, v3.z * v2.x - v3.x * v2.z, v3.x * v2.y - v3.y * v2.x);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}