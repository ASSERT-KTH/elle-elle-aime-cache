{
    "generation": "  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node originArray = arrayNode.copy(); // Make a copy of the original array to keep its position\n    boolean hasNonString = false;\n    Node elem = arrayNode.getFirstChild();\n\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n      } else {\n        hasNonString = true;\n        if (sb.length() > 0) {\n          Node newNode = Node.newString(sb.toString()).detach();\n          foldedSize = sb.length();\n          sb = new StringBuilder();\n          originArray.replaceChild(elem, newNode);\n          elem = newNode;\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      Node newNode = Node.newString(sb.toString()).detach();\n      foldedSize += sb.length();\n      originArray.replaceChild(originArray.getLastChild().getNext(), newNode);\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n\n    if (hasNonString) {\n      // Only replace the original array with a new one if necessary\n      parent.replaceChild(left, originArray);\n    }\n\n    if (foldedSize < originalSize) {\n      t.getCompiler().reportCodeChange();\n    } else {\n      // Revert the changes if the folded size is not smaller than the original size\n      parent.replaceChild(left, arrayNode);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}