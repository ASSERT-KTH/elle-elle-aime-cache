{
    "generation": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                              Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n        return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    StringBuilder sb = new StringBuilder();\n    Node elem = arrayNode.getFirstChild();\n\n    while (elem != null) {\n        if (NodeUtil.isImmutableValue(elem)) {\n            sb.append(NodeUtil.getStringValue(elem));\n            if (elem.getNext() != null && NodeUtil.isImmutableValue(elem.getNext())) {\n                sb.append(joinString);\n            }\n        } else {\n            if (sb.length() > 0) {\n                parent.replaceChild(n, Node.newCall(parent.getSecondChild(),\n                    Node.newArray(Node.newString(sb.toString()), elem),\n                    functionName.cloneNode()).srcref(n));\n                return;\n            }\n            parent.replaceChild(n, Node.newCall(parent.getSecondChild(),\n                Node.newArray(elem), functionName.cloneNode())\n                .srcref(n));\n            return;\n        }\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        parent.replaceChild(n, Node.newString(sb.toString()).srcref(n));\n    } else {\n        parent.replaceChild(n, Node.newString(\"\").srcref(n));\n    }\n    t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}