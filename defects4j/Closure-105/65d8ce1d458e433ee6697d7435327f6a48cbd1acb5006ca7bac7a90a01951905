{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                     Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  StringBuilder sb = new StringBuilder();\n  boolean canFold = true;\n  Node elem = arrayNode.getFirstChild();\n\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sb.length() > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n    } else {\n      canFold = false;\n      break;\n    }\n    elem = elem.getNext();\n  }\n\n  if (canFold) {\n    String foldedString = sb.toString();\n    int foldedSize = foldedString.length() + 2; // +2 for the quotes\n    int originalSize = InlineCostEstimator.getCost(n);\n\n    if (foldedSize < originalSize) {\n      Node foldedStringNode = Node.newString(foldedString);\n      parent.replaceChild(n, foldedStringNode);\n      t.getCompiler().reportCodeChange();\n    }\n  } else {\n    // If we can't fully fold, we can still optimize by removing empty strings\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    sb = new StringBuilder();\n    elem = arrayNode.getFirstChild();\n\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        String value = NodeUtil.getStringValue(elem);\n        if (!value.isEmpty()) {\n          if (sb.length() > 0) {\n            sb.append(joinString);\n          }\n          sb.append(value);\n        }\n      } else {\n        if (sb.length() > 0) {\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    if (!arrayFoldedChildren.isEmpty() && arrayFoldedChildren.size() < arrayNode.getChildCount()) {\n      Node newNode = NodeUtil.newCallNode(NodeUtil.newGetProp(NodeUtil.newArrayLiteral(), \"join\"), right);\n      for (Node child : arrayFoldedChildren) {\n        newNode.getFirstChild().getNext().addChildToBack(child.cloneTree());\n      }\n      parent.replaceChild(n, newNode);\n      t.getCompiler().reportCodeChange();\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}