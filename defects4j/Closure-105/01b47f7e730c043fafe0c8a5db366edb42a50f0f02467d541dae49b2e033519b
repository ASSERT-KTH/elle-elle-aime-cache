{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n        return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    if (joinString == null) {\n        return;\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n        if (NodeUtil.isImmutableValue(elem)) {\n            String elemValue = NodeUtil.getStringValue(elem);\n            if (elemValue == null) {\n                elem = elem.getNext();\n                continue;\n            }\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            sb.append(elemValue);\n        } else {\n            if (sb.length() > 0) {\n                // + 2 for the quotes.\n                foldedSize += sb.length() + 2;\n                arrayFoldedChildren.add(Node.newString(sb.toString()));\n                sb = new StringBuilder();\n            }\n            foldedSize += InlineCostEstimator.getCost(elem);\n            arrayFoldedChildren.add(elem);\n        }\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma, minus the last one if present.\n    foldedSize += Math.max(0, arrayFoldedChildren.size() - 1);\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n        case 0:\n            Node emptyStringNode = Node.newString(\"\");\n            parent.replaceChild(n, emptyStringNode);\n            break;\n\n        case 1:\n            Node foldedStringNode = arrayFoldedChildren.remove(0);\n            if (foldedSize > originalSize) {\n                return;\n            }\n            arrayNode.detachChildren();\n            if (foldedStringNode.getType() != Token.STRING) {\n                // If the Node is not a string literal, ensure that\n                // it is coerced to a string.\n                Node replacement = new Node(Token.ADD,\n                    Node.newString(\"\"), foldedStringNode);\n                foldedStringNode = replacement;\n            }\n            parent.replaceChild(n, foldedStringNode);\n            break;\n\n        default:\n            // Check if we can optimize the case with empty strings at the start\n            while (arrayFoldedChildren.size() > 0 && \n                   arrayFoldedChildren.get(0).getType() == Token.STRING &&\n                   arrayFoldedChildren.get(0).getString().isEmpty()) {\n                arrayFoldedChildren.remove(0);\n                if (sb.length() == 0) {\n                    sb.append(joinString);\n                } else {\n                    sb.insert(0, joinString);\n                }\n            }\n\n            // Check if we can optimize the case with empty strings at the end\n            while (arrayFoldedChildren.size() > 0 && \n                   arrayFoldedChildren.get(arrayFoldedChildren.size() - 1).getType() == Token.STRING &&\n                   arrayFoldedChildren.get(arrayFoldedChildren.size() - 1).getString().isEmpty()) {\n                arrayFoldedChildren.remove(arrayFoldedChildren.size() - 1);\n                sb.append(joinString);\n            }\n\n            if (sb.length() > 0) {\n                foldedSize += sb.length() + 2;  // +2 for quotes\n                arrayFoldedChildren.add(Node.newString(sb.toString()));\n            }\n\n            // No folding could actually be performed.\n            if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n                return;\n            }\n            int kJoinOverhead = \"[].join()\".length();\n            foldedSize += kJoinOverhead;\n            foldedSize += InlineCostEstimator.getCost(right);\n            if (foldedSize > originalSize) {\n                return;\n            }\n            arrayNode.detachChildren();\n            for (Node node : arrayFoldedChildren) {\n                arrayNode.addChildToBack(node);\n            }\n            break;\n    }\n    t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}