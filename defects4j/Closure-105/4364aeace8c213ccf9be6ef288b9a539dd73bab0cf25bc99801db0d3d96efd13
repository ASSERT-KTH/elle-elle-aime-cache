{
    "generation": "  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    if (joinString == null) {\n      return; // Safeguard against null join strings.\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n      } else {\n        if (sb.length() > 0) {\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        // Handle scenario where folding is beneficial.\n        StringBuilder foldedStringBuilder = new StringBuilder();\n        List<Node> newArrayChildren = Lists.newLinkedList();\n        boolean hasNonStringElement = false;\n\n        for (Node child : arrayFoldedChildren) {\n          if (NodeUtil.isImmutableValue(child)) {\n            if (foldedStringBuilder.length() > 0) {\n              foldedStringBuilder.append(joinString);\n            }\n            foldedStringBuilder.append(NodeUtil.getStringValue(child));\n          } else {\n            if (foldedStringBuilder.length() > 0) {\n              newArrayChildren.add(Node.newString(foldedStringBuilder.toString()));\n              foldedStringBuilder = new StringBuilder();\n            }\n            hasNonStringElement = true;\n            newArrayChildren.add(child);\n          }\n        }\n\n        if (foldedStringBuilder.length() > 0) {\n          newArrayChildren.add(Node.newString(foldedStringBuilder.toString()));\n        }\n\n        if (!hasNonStringElement && foldedSize <= originalSize) {\n          parent.replaceChild(n, Node.newString(foldedStringBuilder.toString()));\n        } else {\n          if (newArrayChildren.size() == arrayNode.getChildCount()) {\n            return; // No folding could actually simplify the array.\n          }\n          int kJoinOverhead = \"[].join()\".length();\n          foldedSize += kJoinOverhead;\n          foldedSize += InlineCostEstimator.getCost(right);\n          if (foldedSize > originalSize) {\n            return;\n          }\n          arrayNode.detachChildren();\n          for (Node newChild : newArrayChildren) {\n            arrayNode.addChildToBack(newChild);\n          }\n        }\n        break;\n    }\n    t.getCompiler().reportCodeChange();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}