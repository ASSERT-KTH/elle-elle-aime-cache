{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n        return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n        if (NodeUtil.isImmutableValue(elem)) {\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            sb.append(NodeUtil.getStringValue(elem));\n        } else {\n            if (sb.length() > 0) {\n                // + 2 for the quotes.\n                foldedSize += sb.length() + 2;\n                arrayFoldedChildren.add(Node.newString(sb.toString()));\n                sb = new StringBuilder();\n            }\n            foldedSize += InlineCostEstimator.getCost(elem);\n            arrayFoldedChildren.add(elem);\n        }\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n        case 0:\n            Node emptyStringNode = Node.newString(\"\");\n            parent.replaceChild(n, emptyStringNode);\n            break;\n\n        case 1:\n            Node foldedStringNode = arrayFoldedChildren.remove(0);\n            if (foldedSize > originalSize) {\n                return;\n            }\n            arrayNode.detachChildren();\n            if (foldedStringNode.getType() != Token.STRING) {\n                // If the Node is not a string literal, ensure that\n                // it is coerced to a string.\n                Node replacement = new Node(Token.ADD,\n                    Node.newString(\"\"), foldedStringNode);\n                foldedStringNode = replacement;\n            }\n            parent.replaceChild(n, foldedStringNode);\n            break;\n\n        default:\n            // Handle cases where the join string is not an empty string\n            if (arrayFoldedChildren.size() == arrayNode.getChildCount() && joinString.isEmpty()) {\n                return;\n            }\n            \n            StringBuilder foldedString = new StringBuilder();\n            for (int i = 0; i < arrayFoldedChildren.size(); i++) {\n                Node child = arrayFoldedChildren.get(i);\n                if (child.isString()) {\n                    if (i > 0) {\n                        foldedString.append(joinString);\n                    }\n                    foldedString.append(child.getString());\n                } else {\n                    if (foldedString.length() > 0) {\n                        arrayFoldedChildren.set(i - 1, Node.newString(foldedString.toString()));\n                        foldedString = new StringBuilder();\n                    }\n                    if (i < arrayFoldedChildren.size() - 1) {\n                        StringBuilder nextString = new StringBuilder();\n                        for (int j = i + 1; j < arrayFoldedChildren.size(); j++) {\n                            Node nextChild = arrayFoldedChildren.get(j);\n                            if (nextChild.isString()) {\n                                if (nextString.length() > 0) {\n                                    nextString.append(joinString);\n                                }\n                                nextString.append(nextChild.getString());\n                                arrayFoldedChildren.remove(j);\n                                j--;\n                            } else {\n                                break;\n                            }\n                        }\n                        if (nextString.length() > 0) {\n                            arrayFoldedChildren.add(i + 1, Node.newString(nextString.toString()));\n                        }\n                    }\n                }\n            }\n            if (foldedString.length() > 0) {\n                arrayFoldedChildren.add(Node.newString(foldedString.toString()));\n            }\n\n            // Recalculate folded size\n            foldedSize = 0;\n            for (Node child : arrayFoldedChildren) {\n                foldedSize += InlineCostEstimator.getCost(child);\n            }\n            foldedSize += arrayFoldedChildren.size() - 1; // commas\n            foldedSize += \"[].join()\".length() + InlineCostEstimator.getCost(right);\n\n            if (foldedSize > originalSize) {\n                return;\n            }\n\n            arrayNode.detachChildren();\n            for (Node node : arrayFoldedChildren) {\n                arrayNode.addChildToBack(node);\n            }\n            break;\n    }\n    t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}