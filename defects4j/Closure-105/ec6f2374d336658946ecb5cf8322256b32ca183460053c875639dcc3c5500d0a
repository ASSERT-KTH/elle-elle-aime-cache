{
    "generation": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n        return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    boolean first = true;\n    Node elem = arrayNode.getFirstChild();\n\n    // Merges adjacent String nodes.\n    while (elem != null) {\n        if (NodeUtil.isImmutableValue(elem)) {\n            if (!first) {\n                sb.append(joinString);\n            }\n            sb.append(NodeUtil.getStringValue(elem));\n        } else {\n            if (sb.length() > 0) {\n                // + 2 for the quotes.\n                foldedSize += sb.length() + 2;\n                arrayFoldedChildren.add(Node.newString(sb.toString()));\n                sb = new StringBuilder();\n            }\n            foldedSize += InlineCostEstimator.getCost(elem);\n            arrayFoldedChildren.add(elem);\n        }\n        elem = elem.getNext();\n        first = false;\n    }\n\n    if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each separator.\n    foldedSize += Math.max(arrayFoldedChildren.size() - 1, 0);\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n        case 0:\n        case 1:\n            Node foldedNode = arrayFoldedChildren.size() > 0 ? arrayFoldedChildren.remove(0) : Node.newString(\"\");\n            if (foldedSize > originalSize) {\n                return;\n            }\n            parent.replaceChild(n, foldedNode);\n            break;\n\n        default:\n            // No folding could actually be performed.\n            if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n                return;\n            }\n            int kJoinOverhead = \"[].join()\".length();\n            foldedSize += kJoinOverhead;\n            foldedSize += InlineCostEstimator.getCost(right);\n            if (foldedSize > originalSize) {\n                return;\n            }\n            arrayNode.detachChildren();\n            for (Node node : arrayFoldedChildren) {\n                arrayNode.addChildToBack(node);\n            }\n            break;\n    }\n    t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}