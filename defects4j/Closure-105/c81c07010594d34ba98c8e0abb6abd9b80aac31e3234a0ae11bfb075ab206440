{
    "generation": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n        return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n\n    if (arrayNode.getChildCount() == 0) {\n        parent.replaceChild(n, Node.newString(\"\"));\n        t.getCompiler().reportCodeChange();\n        return;\n    }\n\n    Node elem = arrayNode.getFirstChild();\n    while (elem != null) {\n        if (sb.length() > 0) {\n            sb.append(joinString);\n        }\n        if (NodeUtil.isImmutableValue(elem)) {\n            sb.append(NodeUtil.getStringValue(elem));\n        } else {\n            sb.append(elem.getType().toString()); // For non-string types, just append the type\n        }\n        elem = elem.getNext();\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    int foldedSize = sb.length();\n    foldedSize += InlineCostEstimator.getCost(right); // Add the cost of the joinString\n\n    if (foldedSize < originalSize) {\n        parent.replaceChild(n, Node.newString(sb.toString()));\n        t.getCompiler().reportCodeChange();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}