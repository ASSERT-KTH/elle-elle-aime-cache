{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  StringBuilder sb = new StringBuilder();\n  Node elem = arrayNode.getFirstChild();\n  boolean allStrings = true;\n\n  // Merges adjacent String nodes.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sb.length() > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n    } else {\n      allStrings = false;\n    }\n    elem = elem.getNext();\n  }\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  Node replacementNode;\n\n  if (allStrings) {\n    replacementNode = Node.newString(sb.toString());\n  } else {\n    // If not all elements are strings, we can't fully fold the join.\n    // However, we can still try to fold parts of the array.\n    List<Node> arrayFoldedChildren = Lists.newArrayList();\n    sb = new StringBuilder();\n    elem = arrayNode.getFirstChild();\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n      } else {\n        if (sb.length() > 0) {\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n      return;\n    }\n\n    int foldedSize = 0;\n    for (Node node : arrayFoldedChildren) {\n      foldedSize += InlineCostEstimator.getCost(node);\n    }\n    foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length();\n    foldedSize += \"[].join()\".length();\n    foldedSize += InlineCostEstimator.getCost(right);\n\n    if (foldedSize > originalSize) {\n      return;\n    }\n\n    arrayNode.detachChildren();\n    for (Node node : arrayFoldedChildren) {\n      arrayNode.addChildToBack(node);\n    }\n    replacementNode = n;\n  }\n\n  parent.replaceChild(n, replacementNode);\n  t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}