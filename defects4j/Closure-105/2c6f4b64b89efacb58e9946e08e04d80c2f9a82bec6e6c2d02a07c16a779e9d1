{
    "generation": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  Node elem = arrayNode.getFirstChild();\n  StringBuilder sb = new StringBuilder();\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (elem.getType() == Token.NULL) {\n        sb.append(\"null\");\n      } else if (elem.getType() == Token.NUMBER || elem.getType() == Token.BOOLEAN) {\n        sb.append(elem.getString());\n      } else if (elem.getType() == Token.STRING) {\n        sb.append(NodeUtil.getStringValue(elem));\n      }\n    } else {\n      sb = new StringBuilder();\n      break;\n    }\n    if (elem.getNext() != null) {\n      sb.append(NodeUtil.getStringValue(right));\n    }\n    elem = elem.getNext();\n  }\n\n  if (elem == null) {\n    Node foldedStringNode = Node.newString(sb.toString());\n    parent.replaceChild(n, foldedStringNode);\n    t.getCompiler().reportCodeChange();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}