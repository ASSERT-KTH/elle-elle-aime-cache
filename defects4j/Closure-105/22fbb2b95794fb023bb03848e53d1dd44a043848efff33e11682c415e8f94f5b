{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n  // Merges adjacent String nodes.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sb.length() > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n    } else {\n      if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    elem = elem.getNext();\n  }\n\n  if (sb.length() > 0) {\n    // + 2 for the quotes.\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n  // one for each comma.\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      Node emptyStringNode = Node.newString(\"\");\n      parent.replaceChild(n, emptyStringNode);\n      break;\n\n    case 1:\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize >= originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // If the Node is not a string literal, ensure that\n        // it is coerced to a string.\n        Node replacement = new Node(Token.ADD,\n            Node.newString(\"\"), foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      parent.replaceChild(n, foldedStringNode);\n      break;\n\n    default:\n      // Handle the case where the array fold results in multiple elements.\n      // We need to merge adjacent strings and only replace if it's a size win.\n      List<Node> simplifiedChildren = new ArrayList<>();\n      StringBuilder tempSb = new StringBuilder();\n      for (Node child : arrayFoldedChildren) {\n        if (NodeUtil.isImmutableValue(child)) {\n          tempSb.append(NodeUtil.getStringValue(child));\n        } else {\n          if (tempSb.length() > 0) {\n            simplifiedChildren.add(Node.newString(tempSb.toString()));\n            tempSb.setLength(0);\n          }\n          simplifiedChildren.add(child);\n        }\n      }\n      if (tempSb.length() > 0) {\n        simplifiedChildren.add(Node.newString(tempSb.toString()));\n      }\n\n      int kJoinOverhead = \"[].join()\".length();\n      int newFoldedSize = 0;\n      for (Node child : simplifiedChildren) {\n        newFoldedSize += InlineCostEstimator.getCost(child);\n      }\n      newFoldedSize += (simplifiedChildren.size() - 1); // for commas\n      newFoldedSize += kJoinOverhead;\n      newFoldedSize += InlineCostEstimator.getCost(right);\n\n      if (newFoldedSize >= originalSize) {\n        return;\n      }\n\n      arrayNode.detachChildren();\n      for (Node node : simplifiedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      break;\n  }\n  t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}