{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n        return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n        if (NodeUtil.isImmutableValue(elem)) {\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            sb.append(NodeUtil.getStringValue(elem));\n        } else {\n            if (sb.length() > 0) {\n                // + 2 for the quotes.\n                foldedSize += sb.length() + 2;\n                arrayFoldedChildren.add(Node.newString(sb.toString()));\n                sb = new StringBuilder();\n            }\n            foldedSize += InlineCostEstimator.getCost(elem);\n            arrayFoldedChildren.add(elem);\n        }\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n        case 0:\n            Node emptyStringNode = Node.newString(\"\");\n            parent.replaceChild(n, emptyStringNode);\n            break;\n\n        case 1:\n            Node foldedStringNode = arrayFoldedChildren.get(0);\n            if (foldedSize > originalSize) {\n                return;\n            }\n            arrayNode.detachChildren();\n            if (foldedStringNode.getType() != Token.STRING) {\n                // If the Node is not a string literal, ensure that\n                // it is coerced to a string.\n                Node replacement = new Node(Token.ADD,\n                    Node.newString(\"\"), foldedStringNode);\n                foldedStringNode = replacement;\n            }\n            parent.replaceChild(n, foldedStringNode);\n            break;\n\n        default:\n            // Handle non-string literals and optimize the join operation\n            boolean allImmutable = true;\n            StringBuilder combined = new StringBuilder();\n            for (Node node : arrayFoldedChildren) {\n                if (NodeUtil.isImmutableValue(node)) {\n                    if (combined.length() > 0) {\n                        combined.append(joinString);\n                    }\n                    combined.append(NodeUtil.getStringValue(node));\n                } else {\n                    allImmutable = false;\n                    break;\n                }\n            }\n\n            if (allImmutable) {\n                // All elements are immutable, so we can create a single string\n                Node newStringNode = Node.newString(combined.toString());\n                parent.replaceChild(n, newStringNode);\n            } else {\n                // Some elements are not immutable, create a new array\n                // with optimized string concatenation\n                Node newArray = new Node(Token.ARRAYLIT);\n                StringBuilder currentString = new StringBuilder();\n                for (Node node : arrayFoldedChildren) {\n                    if (NodeUtil.isImmutableValue(node)) {\n                        if (currentString.length() > 0) {\n                            currentString.append(joinString);\n                        }\n                        currentString.append(NodeUtil.getStringValue(node));\n                    } else {\n                        if (currentString.length() > 0) {\n                            newArray.addChildToBack(Node.newString(currentString.toString()));\n                            currentString = new StringBuilder();\n                        }\n                        newArray.addChildToBack(node);\n                    }\n                }\n                if (currentString.length() > 0) {\n                    newArray.addChildToBack(Node.newString(currentString.toString()));\n                }\n\n                // Recreate the join operation\n                Node newJoin = NodeUtil.newCallNode(\n                    NodeUtil.newGetProp(newArray, \"join\"),\n                    Node.newString(joinString));\n                parent.replaceChild(n, newJoin);\n            }\n            break;\n    }\n    t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}