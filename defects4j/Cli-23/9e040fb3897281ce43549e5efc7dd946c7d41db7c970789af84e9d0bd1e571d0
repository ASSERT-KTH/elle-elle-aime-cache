{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        int lastPos = pos;\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width - nextLineTabStop, 0); // Subtract padding length from width\n\n        if (pos == -1)\n        {\n            sb.append(text);\n\n            return sb;\n        } else if (pos == lastPos)\n        {\n            // Instead of throwing an exception, try to split at the last space\n            // before the width limit to avoid infinite loop\n            int lastSpacePos = text.substring(0, width - nextLineTabStop).lastIndexOf(' ');\n            if (lastSpacePos!= -1)\n            {\n                sb.append(rtrim(text.substring(0, lastSpacePos))).append(defaultNewLine);\n                text = padding + text.substring(lastSpacePos + 1).trim();\n                pos = findWrapPos(text, width - nextLineTabStop, 0); // Continue with the remaining text\n            } else\n            {\n                // If no space is found, split at the width limit (this might break words)\n                sb.append(rtrim(text.substring(0, width - nextLineTabStop))).append(defaultNewLine);\n                text = padding + text.substring(width - nextLineTabStop).trim();\n                pos = findWrapPos(text, width - nextLineTabStop, 0); // Continue with the remaining text\n            }\n        } else\n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}