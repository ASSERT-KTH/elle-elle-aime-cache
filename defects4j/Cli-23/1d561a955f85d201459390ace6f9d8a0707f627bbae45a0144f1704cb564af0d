{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                        int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    int lastPos = pos;\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width - nextLineTabStop, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n\n        if (pos <= nextLineTabStop)\n        {\n            // If the wrap position is within the padding, move to the next word\n            pos = text.indexOf(' ', nextLineTabStop);\n            if (pos == -1)\n            {\n                // If no space found, wrap at the end of the line\n                pos = text.length();\n            }\n        }\n\n        if (pos <= lastPos)\n        {\n            // Prevent infinite loop by forcing a break\n            pos = lastPos + 1;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        lastPos = pos - nextLineTabStop;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}