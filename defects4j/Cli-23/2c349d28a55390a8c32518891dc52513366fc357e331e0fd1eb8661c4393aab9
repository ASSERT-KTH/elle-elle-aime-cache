{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, nextLineTabStop);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space\n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            int lastPos = pos;\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, nextLineTabStop);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            } else\n            if (pos == lastPos)\n            {\n                throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }\n\n    private int findWrapPos(String text, int width, int startPos)\n    {\n        if (text == null || text.length() <= startPos)\n        {\n            return -1;\n        }\n\n        int length = text.length();\n        int pos = startPos + width;\n\n        if (pos >= length)\n        {\n            return length;\n        }\n\n        // find the last whitespace character before the width limit\n        for (int i = pos; i > startPos; i--)\n        {\n            if (Character.isWhitespace(text.charAt(i)))\n            {\n                return i;\n            }\n        }\n\n        // if no whitespace character is found, return the width limit\n        return pos;\n    }\n\n    private String rtrim(String text)\n    {\n        if (text == null)\n        {\n            return null;\n        }\n\n        int length = text.length();\n        int lastIndex = length - 1;\n\n        while (lastIndex >= 0 && Character.isWhitespace(text.charAt(lastIndex)))\n        {\n            lastIndex--;\n        }\n\n        return text.substring(0, lastIndex + 1);\n    }\n\n    private String createPadding(int nextLineTabStop)\n    {\n        StringBuilder padding = new StringBuilder();\n        for (int i = 0; i < nextLineTabStop; i++)\n        {\n            padding.append(' ');\n        }\n        return padding.toString();\n    }\n\n    private static final String defaultNewLine = System.lineSeparator();",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}