{
    "generation": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            int lastPos = pos;\n            text = padding + text.substring(lastPos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            } else if (pos == lastPos)\n            {\n                // The bug here is that adding only padding might not increase the \n                // text length sufficiently for a new wrap position. One possible fix \n                // is to increase the position by nextLineTabStop and skip \n                // padding length and any extra spaces.\n                pos = lastPos + nextLineTabStop;\n                while (pos < text.length() && Character.isWhitespace(text.charAt(pos))) {\n                    pos++;\n                }\n                if (pos >= text.length()) {\n                    sb.append(text);\n                    return sb;\n                }\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}