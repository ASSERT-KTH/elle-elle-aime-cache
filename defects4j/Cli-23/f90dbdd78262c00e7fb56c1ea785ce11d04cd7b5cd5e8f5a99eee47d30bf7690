{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                        int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        int lastPos = pos;\n        String tmpText = text.substring(pos);\n        int trimStartIndex = 0;\n        int trimEndIndex = tmpText.length();\n\n        // Find the start of non-whitespace characters.\n        while(trimStartIndex < tmpText.length() && Character.isWhitespace(tmpText.charAt(trimStartIndex))) {\n            trimStartIndex++;\n        }\n\n        // Find the end of non-whitespace characters.\n        while(trimEndIndex > trimStartIndex && Character.isWhitespace(tmpText.charAt(trimEndIndex - 1))) {\n            trimEndIndex--;\n        }\n\n        tmpText = tmpText.substring(trimStartIndex, trimEndIndex);\n        pos = findWrapPos(padding + tmpText, width, 0) - nextLineTabStop;\n\n        if (pos == -1)\n        {\n            sb.append(padding).append(tmpText);\n\n            return sb;\n        } else if (pos == lastPos)\n        {\n            throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\n        }\n\n        sb.append(padding).append(rtrim(tmpText.substring(0, pos))).append(defaultNewLine);\n        text = tmpText.substring(pos);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}