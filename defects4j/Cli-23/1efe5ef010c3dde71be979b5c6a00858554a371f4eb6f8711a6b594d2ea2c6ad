{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        int lastPos = pos;\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n            return sb;\n        } else if (pos == lastPos) {\n            throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n\nprivate String createPadding(int length) {\n    StringBuilder sb = new StringBuilder(length);\n    for (int i = 0; i < length; i++) {\n        sb.append(' ');\n    }\n    return sb.toString();\n}\n\nprivate int findWrapPos(String text, int width, int startPos) {\n    int pos = text.lastIndexOf(' ', startPos + width);\n    if (pos == -1) {\n        pos = text.indexOf(' ', startPos);\n    }\n    return pos == -1 ? -1 : pos;\n}\n\nprivate String rtrim(String s) {\n    int i = s.length() - 1;\n    while (i >= 0 && Character.isWhitespace(s.charAt(i))) {\n        i--;\n    }\n    return s.substring(0, i + 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}