{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        int lastPos = pos;\n        // \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f: \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d trim() \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432\n        text = padding + text.substring(pos).trim();\n        \n        // \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f: \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043b\u044fEmitter.wrapPos()\n        if (text.length() <= width) {\n            sb.append(text);\n            return sb;\n        }\n\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n\n            return sb;\n        } else if (pos == lastPos)\n        {\n            // \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f: \u0432\u043c\u0435\u0441\u0442\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f -.lock() \u043e\u0431\u0440\u0435\u0437\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e width\n            sb.append(rtrim(text.substring(0, width))).append(defaultNewLine);\n            text = text.substring(width);\n        } else\n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}