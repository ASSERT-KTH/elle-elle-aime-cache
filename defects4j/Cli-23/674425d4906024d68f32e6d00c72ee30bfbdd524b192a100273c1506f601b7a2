{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        int lastPos = pos;\n        String trimmedText = text.substring(pos).trim();\n        // check if the trimmed text is too long\n        if (trimmedText.length() > width - nextLineTabStop) {\n            // split the trimmed text into chunks of maximum width - nextLineTabStop\n            String[] chunks = splitTextIntoChunks(trimmedText, width - nextLineTabStop);\n            for (int i = 0; i < chunks.length; i++) {\n                if (i > 0) {\n                    sb.append(defaultNewLine);\n                }\n                sb.append(padding).append(rtrim(chunks[i]));\n            }\n            return sb;\n        }\n        text = padding + trimmedText;\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n\n            return sb;\n        } else\n        if (pos == lastPos)\n        {\n            throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n\n// helper function to split text into chunks\nprivate String[] splitTextIntoChunks(String text, int chunkSize) {\n    String[] chunks = new String[(text.length() + chunkSize - 1) / chunkSize];\n    for (int i = 0; i < chunks.length; i++) {\n        int start = i * chunkSize;\n        int end = Math.min(start + chunkSize, text.length());\n        chunks[i] = text.substring(start, end);\n    }\n    return chunks;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}