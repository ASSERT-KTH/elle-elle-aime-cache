{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // Handle collections\n    if (l instanceof Collection) {\n        if (r instanceof Collection) {\n            // Compare two collections\n            Iterator<?> iterL = ((Collection<?>) l).iterator();\n            Iterator<?> iterR = ((Collection<?>) r).iterator();\n            return findMatch(iterL, iterR);\n        } else {\n            // Compare collection to single value\n            Iterator<?> iterL = ((Collection<?>) l).iterator();\n            return contains(iterL, r);\n        }\n    } else if (r instanceof Collection) {\n        // Compare single value to collection\n        Iterator<?> iterR = ((Collection<?>) r).iterator();\n        return contains(iterR, l);\n    }\n\n    // Handle iterators\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator<?>) l, (Iterator<?>) r);\n    }\n    if (l instanceof Iterator) {\n        return contains((Iterator<?>) l, r);\n    }\n    if (r instanceof Iterator) {\n        return contains((Iterator<?>) r, l);\n    }\n\n    // Handle simple equality\n    return Objects.equals(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}