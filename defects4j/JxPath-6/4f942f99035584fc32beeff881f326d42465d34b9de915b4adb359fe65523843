{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    // Handle contexts\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // Handle collections by comparing each element\n    if (l instanceof Collection && r instanceof Collection) {\n        Collection<?> lc = (Collection<?>) l;\n        Collection<?> rc = (Collection<?>) r;\n        if (lc.size()!= rc.size()) return false;\n        Iterator<?> lit = lc.iterator();\n        Iterator<?> rit = rc.iterator();\n        while (lit.hasNext()) {\n            if (!equal(context, lit.next(), rit.next())) return false;\n        }\n        return true;\n    }\n\n    // Handle iterator to single value comparison\n    if (l instanceof Iterator &&!(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    // Direct equality check for non-collection, non-iterator types\n    return Objects.equals(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}