{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n//        System.err.println(\"COMPARING: \" +\n//            (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n//            (r == null ? \"null\" : r.getClass().getName()));\n\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        if (l instanceof Collection) {\n            if (r instanceof Collection) {\n                return ((Collection) l).equals(r);\n            } else {\n                return contains((Collection) l, r);\n            }\n        }\n\n        if (r instanceof Collection) {\n            return contains((Collection) r, l);\n        }\n\n        if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n            return contains((Iterator) l, r);\n        }\n        if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n            return contains((Iterator) r, l);\n        }\n        if (l instanceof Iterator && r instanceof Iterator) {\n            return findMatch((Iterator) l, (Iterator) r);\n        }\n        return l == null ? r == null : l.equals(r);\n    }\n\n    private boolean contains(Collection<?> collection, Object value) {\n        return collection.contains(value);\n    }\n\n    private boolean contains(Iterator<?> iterator, Object value) {\n        while (iterator.hasNext()) {\n            if (equal(null, new ConstantExpression(iterator.next()), new ConstantExpression(value))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private boolean findMatch(Iterator<?> leftIterator, Iterator<?> rightIterator) {\n        while (leftIterator.hasNext() && rightIterator.hasNext()) {\n            if (equal(null, new ConstantExpression(leftIterator.next()), new ConstantExpression(rightIterator.next()))) {\n                return true;\n            }\n        }\n        return !leftIterator.hasNext() && !rightIterator.hasNext();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}