{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    if ((l instanceof Iterator) &&!(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    // Fix: If l is not an Iterator, but r is a single value that could be in a collection,\n    // try to find r in a collection that would contain l.\n    if (!(l instanceof Iterator) && (r instanceof String || r instanceof Number || r instanceof Boolean)) {\n        Collection collection = getCollectionContaining(l);\n        if (collection!= null) {\n            return collection.contains(r);\n        }\n    }\n    return equal(l, r);\n}\n\n// Helper method to get a collection containing the given object.\nprivate Collection getCollectionContaining(Object obj) {\n    // Implement this method according to your needs.\n    // For example, if obj is a DOM Node, you could return its parent's child nodes.\n    // If obj is a Java object, you could return a collection of its siblings.\n    // For simplicity, this example just returns null.\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}