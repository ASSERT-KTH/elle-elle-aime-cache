{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n        // Ensure nodes are handled correctly\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        // Convert collections to iterators for comparison\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        // Handle cases where one or both values are iterators\n        if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n            return contains((Iterator) l, r);\n        }\n        if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n            return contains((Iterator) r, l);\n        }\n        if (l instanceof Iterator && r instanceof Iterator) {\n            return findMatch((Iterator) l, (Iterator) r);\n        }\n\n        // Handle null cases before invoking equal\n        if (l == null || r == null) {\n            return l == r;\n        }\n\n        // Fix equality for non-iterator cases\n        if (l instanceof Number && r instanceof Number) {\n            return ((Number) l).doubleValue() == ((Number) r).doubleValue();\n        } else if (l instanceof Boolean && r instanceof Boolean) {\n            return l.equals(r);\n        } else if (l instanceof String && r instanceof String) {\n            return l.equals(r);\n        }\n\n        return l.equals(r);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}