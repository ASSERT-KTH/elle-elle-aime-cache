{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n//        System.err.println(\"COMPARING: \" +\n//            (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n//            (r == null ? \"null\" : r.getClass().getName()));\n\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        // Check for null values\n        if (l == null && r == null) {\n            return true;\n        }\n        if (l == null || r == null) {\n            return false;\n        }\n\n        // Handle iterator comparisons\n        if (l instanceof Iterator || r instanceof Iterator) {\n            if (!(l instanceof Iterator)) {\n                l = new SingleElementIterator(l);\n            }\n            if (!(r instanceof Iterator)) {\n                r = new SingleElementIterator(r);\n            }\n            return findMatch((Iterator) l, (Iterator) r);\n        }\n\n        // Handle other types of comparisons\n        if (l instanceof Number && r instanceof Number) {\n            return ((Number) l).doubleValue() == ((Number) r).doubleValue();\n        }\n        if (l instanceof Boolean && r instanceof Boolean) {\n            return ((Boolean) l).booleanValue() == ((Boolean) r).booleanValue();\n        }\n        if (l instanceof String && r instanceof String) {\n            return l.equals(r);\n        }\n\n        // For other types, use the default equals method\n        return l.equals(r);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}