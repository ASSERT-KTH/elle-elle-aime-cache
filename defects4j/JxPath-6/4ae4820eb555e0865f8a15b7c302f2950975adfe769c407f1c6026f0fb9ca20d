{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        if ((l instanceof Iterator) || (r instanceof Iterator)) {\n            Iterator<?> lit = (l instanceof Iterator) ? (Iterator<?>) l : singletonIterator(l);\n            Iterator<?> rit = (r instanceof Iterator) ? (Iterator<?>) r : singletonIterator(r);\n            return findMatch(lit, rit);\n        }\n\n        return (l == r) || (l != null && l.equals(r));\n    }\n\n    private Iterator<?> singletonIterator(Object obj) {\n        return new Iterator<Object>() {\n            private boolean hasNext = true;\n\n            @Override\n            public boolean hasNext() {\n                return hasNext;\n            }\n\n            @Override\n            public Object next() {\n                if (!hasNext) {\n                    throw new NoSuchElementException();\n                }\n                hasNext = false;\n                return obj;\n            }\n        };\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}