{
    "generation": "protected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    if (l instanceof Collection && r instanceof Collection) {\n        return equal((Collection) l, (Collection) r);\n    }\n\n    if (l instanceof Collection) {\n        return contains((Collection) l, r);\n    }\n\n    if (r instanceof Collection) {\n        return contains((Collection) r, l);\n    }\n\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    return equal(l, r);\n}\n\nprivate boolean equal(Collection l, Collection r) {\n    if (l.size() != r.size()) {\n        return false;\n    }\n    Iterator lIterator = l.iterator();\n    Iterator rIterator = r.iterator();\n    while (lIterator.hasNext() && rIterator.hasNext()) {\n        if (!equal(lIterator.next(), rIterator.next())) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate boolean contains(Collection collection, Object element) {\n    for (Object obj : collection) {\n        if (equal(obj, element)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}