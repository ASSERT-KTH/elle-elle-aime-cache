{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n//    System.err.println(\"COMPARING: \" +\n//        (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n//        (r == null ? \"null\" : r.getClass().getName()));\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    return safeEquals(l, r);\n}\n\nprivate boolean contains(Iterator iterator, Object value) {\n    while (iterator.hasNext()) {\n        if (safeEquals(iterator.next(), value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate boolean findMatch(Iterator leftIterator, Iterator rightIterator) {\n    List<Object> rightList = new ArrayList<>();\n    rightIterator.forEachRemaining(rightList::add);\n\n    while (leftIterator.hasNext()) {\n        if (contains(rightList.iterator(), leftIterator.next())) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate boolean safeEquals(Object left, Object right) {\n    if (left == null) {\n        return right == null;\n    }\n    return left.equals(right);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}