{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    if (l instanceof Iterator) {\n        l = convertIteratorToCollection((Iterator) l);\n    }\n\n    if (r instanceof Iterator) {\n        r = convertIteratorToCollection((Iterator) r);\n    }\n\n    if ((l instanceof Collection) && !(r instanceof Collection)) {\n        return contains(((Collection) l), r);\n    }\n\n    if (!(l instanceof Collection) && (r instanceof Collection)) {\n        return contains(((Collection) r), l);\n    }\n    \n    if (l instanceof Collection && r instanceof Collection) {\n        return findMatch(((Collection) l).iterator(), ((Collection) r).iterator());\n    }\n\n    return l == r || (l != null && l.equals(r));\n}\n\nprivate Collection convertIteratorToCollection(Iterator iterator) {\n    Collection collection = new ArrayList();\n    while (iterator.hasNext()) {\n        collection.add(iterator.next());\n    }\n    return collection;\n}\n\nprivate boolean contains(Collection collection, Object element) {\n    return collection.contains(element);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}