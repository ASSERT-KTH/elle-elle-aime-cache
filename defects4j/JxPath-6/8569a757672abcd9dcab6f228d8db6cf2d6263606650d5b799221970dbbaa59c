{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    // Normalize contexts to node pointers if necessary\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // Special handling for collections\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    // Asymmetric iterator comparison\n    if ((l instanceof Iterator) &&!(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n\n    // Symmetric comparisons\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    if (l instanceof Comparable && r instanceof Comparable) {\n        // Fix: ensure proper comparison for non-iterator, comparable types\n        return ((Comparable) l).compareTo(r) == 0;\n    }\n    // Original, potentially problematic comparison for non-comparable types\n    return l.equals(r); // was: return equal(l, r); - recursive call removed\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}