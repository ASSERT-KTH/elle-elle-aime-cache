{
    "generation": "protected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // Convert collections to iterators\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    // Handle cases where one or both operands are iterators\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        return containsAll((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return containsAll((Iterator) r, l);\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n\n    // If both operands are not iterators, perform direct comparison\n    return equal(l, r);\n}\n\n// Helper method to check if an iterator contains all elements of a given object\nprivate boolean containsAll(Iterator<?> iter, Object obj) {\n    while (iter.hasNext()) {\n        Object item = iter.next();\n        if (equal(item, obj)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// Existing helper methods (assumed to be implemented elsewhere)\n// private boolean contains(Iterator<?> iter, Object obj) { ... }\n// private boolean findMatch(Iterator<?> iter1, Iterator<?> iter2) { ... }\n// private boolean equal(Object l, Object r) { ... }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}