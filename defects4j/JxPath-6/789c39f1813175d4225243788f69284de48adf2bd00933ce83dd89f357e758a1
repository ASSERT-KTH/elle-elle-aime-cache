{
    "generation": "    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        if (l instanceof Iterator && !(r instanceof Iterator)) {\n            return contains((Iterator) l, r);\n        }\n        if (!(l instanceof Iterator) && r instanceof Iterator) {\n            return contains((Iterator) r, l);\n        }\n        if (l instanceof Iterator && r instanceof Iterator) {\n            return iteratorsEqual((Iterator) l, (Iterator) r);\n        }\n        return equalObjects(l, r);\n    }\n\n    private boolean contains(Iterator iter, Object value) {\n        while (iter.hasNext()) {\n            Object item = iter.next();\n            if (equalObjects(item, value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private boolean iteratorsEqual(Iterator iter1, Iterator iter2) {\n        while (iter1.hasNext() && iter2.hasNext()) {\n            if (!equalObjects(iter1.next(), iter2.next())) {\n                return false;\n            }\n        }\n        return !iter1.hasNext() && !iter2.hasNext();\n    }\n\n    private boolean equalObjects(Object a, Object b) {\n        if (a == b) {\n            return true;\n        }\n        if (a == null || b == null) {\n            return false;\n        }\n        if (a.equals(b)) {\n            return true;\n        }\n        // Additional checks can be added here if necessary\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}