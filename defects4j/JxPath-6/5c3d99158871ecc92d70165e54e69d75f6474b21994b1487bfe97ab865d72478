{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    // Normalize contexts to single node pointers\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // Normalize collections to iterators\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    // Asymmetric iterator comparisons\n    if ((l instanceof Iterator) &&!(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    // Symmetric iterator comparisons\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    // **FIXED**: Proper null handling and Override equals if not iterators\n    return (l == null)? (r == null) : \n           (r == null)? false : \n           (l.getClass() == r.getClass())? l.equals(r) : \n           toString(l).equals(toString(r));\n}\n\n// Helper method for consistent toString() handling\nprivate String toString(Object obj) {\n    return (obj == null)? \"null\" : obj.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}