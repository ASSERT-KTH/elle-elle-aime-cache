{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    boolean lIsCollection = l instanceof Collection;\n    boolean rIsCollection = r instanceof Collection;\n\n    if (lIsCollection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (rIsCollection) {\n        r = ((Collection) r).iterator();\n    }\n\n    boolean lIsIterable = l instanceof Iterator;\n    boolean rIsIterable = r instanceof Iterator;\n\n    if (lIsIterable && !rIsIterable && !rIsCollection) {\n        return contains((Iterator) l, r);\n    }\n    if (!lIsIterable && rIsIterable && !lIsCollection) {\n        return contains((Iterator) r, l);\n    }\n    if (lIsIterable && rIsIterable) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n\n    // Handle case where one side is a collection and the other is a single value\n    if (lIsCollection && !rIsCollection && !rIsIterable) {\n        return ((Collection) left.compute(context)).contains(r);\n    }\n    if (rIsCollection && !lIsCollection && !lIsIterable) {\n        return ((Collection) right.compute(context)).contains(l);\n    }\n\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}