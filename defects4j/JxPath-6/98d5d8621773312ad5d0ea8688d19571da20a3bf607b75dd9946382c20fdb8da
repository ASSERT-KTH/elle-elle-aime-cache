{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    if ((l instanceof Iterator) &&!(r instanceof Iterator)) {\n        Iterator it = (Iterator) l;\n        while (it.hasNext()) {\n            if (equalValue(it.next(), r)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        Iterator it = (Iterator) r;\n        while (it.hasNext()) {\n            if (equalValue(l, it.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        Iterator it1 = (Iterator) l;\n        Iterator it2 = (Iterator) r;\n        while (it1.hasNext() && it2.hasNext()) {\n            if (!equalValue(it1.next(), it2.next())) {\n                return false;\n            }\n        }\n        return!it1.hasNext() &&!it2.hasNext();\n    }\n    return equalValue(l, r);\n}\n\n// Helper function to compare two values\nprivate boolean equalValue(Object l, Object r) {\n    if (l == null && r == null) {\n        return true;\n    }\n    if (l == null || r == null) {\n        return false;\n    }\n    if (l.getClass().equals(r.getClass())) {\n        return l.equals(r);\n    }\n    return l.toString().equals(r.toString());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}