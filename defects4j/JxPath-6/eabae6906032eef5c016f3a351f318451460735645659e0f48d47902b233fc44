{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    // Normalize contexts to single node pointers if necessary\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // Handle collection to iterator conversion\n    if (l instanceof Collection &&!(l instanceof String)) { // exclude Strings, which are also Collections\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection &&!(r instanceof String)) { // exclude Strings, which are also Collections\n        r = ((Collection) r).iterator();\n    }\n\n    // Asymmetrical iterator comparisons\n    if ((l instanceof Iterator) &&!(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n\n    // Symmetrical comparisons\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n\n    // Base case: compare non-iterator, non-collection objects\n    return Objects.equals(l, r); // Use Java's Objects.equals for null-safe comparison\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}