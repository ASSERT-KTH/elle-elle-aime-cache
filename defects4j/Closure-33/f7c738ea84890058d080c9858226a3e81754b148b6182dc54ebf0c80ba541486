{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n  // We only want to match contraints on anonymous types.\n\n  // Handle the case where the constraint object is a record type.\n  //\n  // param constraintObj {{prop: (number|undefined)}}\n  // function f(constraintObj) {}\n  // f({});\n  //\n  // We want to modify the object literal to match the constraint, by\n  // taking any each property on the record and trying to match\n  // properties on this object.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          // Infer a type that is the least supertype of the property type\n          // and the native void type if the property doesn't exist.\n          JSType voidType = getNativeType(JSTypeNative.VOID_TYPE);\n          typeToInfer = propType.getLeastSupertype(voidType);\n        }\n        // Define the inferred property type\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  } else if (constraintObj.isAnonymousType()) {\n    // If the constraint object is not a record type but is an anonymous type,\n    // infer the property types directly.\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        defineInferredProperty(prop, propType, null);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}