{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            // FIX: Use getNativeType(JSTypeNative.OBJECT_TYPE) instead of VOID_TYPE\n            // to infer object types for undeclared properties\n            typeToInfer = getNativeType(JSTypeNative.OBJECT_TYPE)\n               .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        } else if (hasProperty(prop)) {\n          // FIX: If property is already declared, ensure its type is a supertype\n          // of the constraint property type to avoid type mismatches\n          JSType declaredType = getPropertyType(prop);\n          if (!declaredType.isSupertype(propType)) {\n            defineInferredProperty(prop, declaredType.getLeastSupertype(propType), null);\n          }\n        }\n      }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}