{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types.\n\n  // Handle the case where the constraint object is a record type.\n  //\n  // param constraintObj {{prop: (number|undefined)}}\n  // function f(constraintObj) {}\n  // f({});\n  //\n  // We want to modify the object literal to match the constraint, by\n  // taking any each property on the record and trying to match\n  // properties on this object.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      } else {\n        // If the property is already declared, ensure its type is compatible with the constraint.\n        JSType currentType = getPropertyType(prop);\n        JSType newType = currentType.getLeastSupertype(propType);\n        setPropertyType(prop, newType);\n      }\n    }\n  } else {\n    // Handle other types of constraints if necessary.\n    // For example, if constraintObj is a union type or a function type.\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}