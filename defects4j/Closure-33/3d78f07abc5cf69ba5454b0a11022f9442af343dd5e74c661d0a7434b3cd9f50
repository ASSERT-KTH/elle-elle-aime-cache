{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            \n            // Handle union types\n            if (propType.isUnionType()) {\n                propType = propType.getLeastSupertype(getNativeType(JSTypeNative.UNKNOWN_TYPE));\n            }\n\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    // Handle nested object types\n                    if (propType.isObjectType()) {\n                        ObjectType nestedObjType = (ObjectType) propType;\n                        ObjectTypeBuilder builder = new ObjectTypeBuilder(registry);\n                        for (String nestedProp : nestedObjType.getOwnPropertyNames()) {\n                            builder.addProperty(nestedProp, nestedObjType.getPropertyType(nestedProp), null);\n                        }\n                        typeToInfer = builder.build();\n                    } else {\n                        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                            .getLeastSupertype(propType);\n                    }\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}