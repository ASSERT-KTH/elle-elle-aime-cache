{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types.\n\n  // Handle the case where the constraint object is a record type\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (hasProperty(prop) && getPropertyJSType(prop).isEquivalentTo(propType)) {\n          // If the property already exists and its type matches the constraint type, do nothing.\n          continue;\n        } else if (hasProperty(prop) && !getPropertyJSType(prop).isUnknownType()) {\n          // If the property already exists with another type, find the least supertype.\n          typeToInfer = getNativeType(JSTypeNative.UNKNOWN_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}