{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                        .getLeastSupertype(propType);\n                } else {\n                    // If the property type is an object, recursively call matchConstraint\n                    if (propType.isObjectType()) {\n                        ObjectType objectPropType = propType.toObjectType();\n                        if (isPropertyTypeSubtype(prop, objectPropType)) {\n                            getProperty(prop).toObjectType().matchConstraint(objectPropType);\n                        }\n                    }\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}