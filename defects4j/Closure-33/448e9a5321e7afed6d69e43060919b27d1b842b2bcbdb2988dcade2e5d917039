{
    "generation": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types.\n\n  // Handle the case where the constraint object is a record type.\n  //\n  // param constraintObj {{prop: (number|undefined)}}\n  // function f(constraintObj) {}\n  // f({});\n  //\n  // We want to modify the object literal to match the constraint, by\n  // taking any each property on the record and trying to match\n  // properties on this object.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!hasProperty(prop)) {\n        // If the property is not present, define it with the type from the constraint.\n        defineInferredProperty(prop, propType, null);\n      } else if (!isPropertyTypeDeclared(prop)) {\n        // If the property is present but not explicitly declared, infer its type.\n        JSType currentType = getPropertyType(prop);\n        JSType inferredType = currentType.getLeastUpperBound(propType);\n        defineInferredProperty(prop, inferredType, null);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}