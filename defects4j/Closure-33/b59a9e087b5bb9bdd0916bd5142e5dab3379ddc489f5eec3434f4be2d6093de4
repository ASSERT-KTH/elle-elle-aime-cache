{
    "generation": "  @Override\n  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!hasProperty(prop)) {\n          // Directly define the property with UNDEFINED as the least supertype\n          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n          defineInferredProperty(prop, typeToInfer, null);\n        } else if (!isPropertyTypeDeclared(prop)) {\n          // Only update type if the property type is not declared\n          defineInferredProperty(prop, propType, null);\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}