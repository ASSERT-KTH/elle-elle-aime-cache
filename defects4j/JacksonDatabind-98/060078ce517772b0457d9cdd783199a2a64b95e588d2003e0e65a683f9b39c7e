{
    "generation": "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    // Deserialize buffered data\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.add(values[i]); // add value to buffer before assignment\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n                // Apply deserializer if type id is NOT a plain `String`\n                if (!typeId.equals(extProp.getDefaultTypeId())) {\n                    // For enum types, the type id might be a string representation of the enum constant.\n                    // Deserialize it to the enum constant.\n                    if (typeProp.getType().isEnumType()) {\n                        Class<?> enumType = typeProp.getType().getRawClass();\n                        values[i] = Enum.valueOf(enumType, typeId);\n                    } else {\n                        values[i] = mapper.convertValue(typeId, typeProp.getType().getRawClass());\n                    }\n                } else {\n                    values[i] = typeId;\n                }\n                buffer.add(values[i]);\n            }\n        }\n    }\n    // Build object using the constructor\n    Object bean = creator.build(ctxt, buffer);\n    // Assign non-creator properties\n    for (int i = 0; i < len; ++i) {\n        SettableBeanProperty prop = _properties[i].getProperty();\n        if (prop.getCreatorIndex() < 0) {\n            prop.set(bean, values[i]);\n        }\n    }\n    return bean;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}