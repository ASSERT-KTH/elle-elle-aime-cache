{
    "generation": "@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException\n{\n    // May need to resolve types for delegate-based creators:\n    JsonDeserializer<Object> delegate = null;\n    if (_valueInstantiator!= null) {\n        // [databind#2324]: check both array-delegating and delegating\n        AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n        if (delegateCreator!= null) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            delegate = findDeserializer(ctxt, delegateType, property);\n            // Fix: Ensure delegate-based creators can handle single-value input\n            if (delegate instanceof JsonDeserializer none &&!ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)) {\n                delegate = new DelegatingDeserializer(delegate);\n            }\n        }\n    }\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    final JavaType valueType = _containerType.getContentType();\n    if (valueDeser == null) {\n        // [databind#125]: May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        if (valueDeser == null) {\n            // And we may also need to get deserializer for String\n            valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n        }\n    } else { // if directly assigned, probably not yet contextual, so:\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n    }\n    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n    //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n    if (isDefaultDeserializer(valueDeser)) {\n        valueDeser = null;\n    }\n    return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n}\n\n// Helper class to enable single-value input for delegate-based creators\nprivate static class DelegatingDeserializer extends JsonDeserializer<Object> {\n    private final JsonDeserializer<?> delegate;\n    \n    public DelegatingDeserializer(JsonDeserializer<?> delegate) {\n        this.delegate = delegate;\n    }\n    \n    @Override\n    public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n        if (p.isExpectedStartArrayToken()) {\n            return delegate.deserialize(p, ctxt);\n        }\n        JsonToken token = p.getCurrentToken();\n        if (token == JsonToken.VALUE_STRING || token == JsonToken.VALUE_NUMBER_INT || token == JsonToken.VALUE_NUMBER_FLOAT ||\n                token == JsonToken.VALUE_TRUE || token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_NULL) {\n            return ctxt Handles.getDefaultValue(delegate.handledType());\n        }\n        throw ctxt\u00f6h\u00a0F dieses criwarehouse-printerno?\";\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}