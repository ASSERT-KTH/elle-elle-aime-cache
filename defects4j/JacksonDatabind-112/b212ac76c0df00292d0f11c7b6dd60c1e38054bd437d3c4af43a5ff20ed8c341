{
    "generation": "@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException\n{\n    // May need to resolve types for delegate-based creators:\n    JsonDeserializer<Object> delegate = null;\n    if (_valueInstantiator != null) {\n        // [databind#2324]: check both array-delegating and delegating\n        AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n        if (delegateCreator != null) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            delegate = findDeserializer(ctxt, delegateType, property);\n        }\n    }\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    final JavaType valueType = _containerType.getContentType();\n    if (valueDeser == null) {\n        // [databind#125]: May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        if (valueDeser == null) {\n            // And we may also need to get deserializer for String\n            valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n        }\n    } else { // if directly assigned, probably not yet contextual, so:\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n    }\n    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n    //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n\n    // Check if the valueDeserializer is the default one and if so, try to create a new one using valueType.\n    // This is to handle the case where no default no-arguments constructor is found.\n    if (isDefaultDeserializer(valueDeser)) {\n        try {\n            valueDeser = ctxt.findRootValueDeserializer(valueType);\n        } catch (JsonMappingException e) {\n            // Handle the exception or log a warning if creation of a new deserializer fails.\n        }\n    }\n    return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}