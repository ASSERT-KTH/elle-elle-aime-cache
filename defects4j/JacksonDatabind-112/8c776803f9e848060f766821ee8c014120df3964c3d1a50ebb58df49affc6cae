{
    "generation": "@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException\n{\n    // May need to resolve types for delegate-based creators:\n    JsonDeserializer<Object> delegate = null;\n    if (_valueInstantiator != null) {\n        // [databind#2324]: check both array-delegating and delegating\n        AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n        if (delegateCreator != null) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            delegate = findDeserializer(ctxt, delegateType, property);\n        }\n    }\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    final JavaType valueType = _containerType.getContentType();\n    if (valueDeser == null) {\n        // [databind#125]: May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        if (valueDeser == null) {\n            // Check for no-arguments constructor as well before looking for a value deserializer\n            if (!valueType.isJavaLangObject() && valueType.getRawClass().getDeclaredConstructors().length == 0) {\n                try {\n                    Class<?> clazz = Class.forName(valueType.getRawClass().getName(), true, Thread.currentThread().getContextClassLoader());\n                    if (clazz.isEnum()) {\n                        valueDeser = ctxt.getConfig().introspect(ctorHint(clazz)).findEnumDeserializer(ctxt, valueType, property);\n                    }\n                } catch (ClassNotFoundException e) { /* ignore */ }\n            }\n            if (valueDeser == null) {\n                // And we may also need to get deserializer for String\n                valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n            }\n        }\n    } else { // if directly assigned, probably not yet contextual, so:\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n    }\n    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n    //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n    if (isDefaultDeserializer(valueDeser)) {\n        valueDeser = null;\n    }\n    return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}