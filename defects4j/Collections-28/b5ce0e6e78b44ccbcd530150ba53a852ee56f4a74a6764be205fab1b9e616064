{
    "generation": "package org.apache.commons.collections4.trie;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.SortedMap;\n\n\npublic class PatriciaTrie<E> extends AbstractPatriciaTrie<String, E> {\n\n\n    public PatriciaTrie(KeyAnalyzer<? super String> keyAnalyzer) {\n        super(keyAnalyzer);\n    }\n\n\n    public PatriciaTrie() {\n        super(new StringKeyAnalyzer());\n    }\n\n\n    public PatriciaTrie(Map<? extends String, ? extends E> map) {\n        super(new StringKeyAnalyzer(), map);\n    }\n\n    @Override\n    public SortedMap<String, E> prefixMap(String key) {\n        return new PrefixRangeMap(key, null, true);\n    }\n\n    private class PrefixRangeMap extends RangeMap {\n\n        private final String prefix;\n        private transient volatile Set<Map.Entry<String, E>> entrySet;\n\n        protected PrefixRangeMap(String fromKey, String toKey, boolean toInclusive)\n        {\n            super(fromKey, toKey, toInclusive);\n            this.prefix = fromKey;\n        }\n\n\n\n        @Override\n        public void clear() {\n            PatriciaTrie.this.keySet(prefix, null).clear(); // Fix: using keySet instead of prefixMap\n        }\n\n\n        @Override\n        public Set<Map.Entry<String, E>> entrySet()\n        {\n            if (entrySet == null) {\n                entrySet = Collections.unmodifiableSet(new EntrySet());\n            }\n            return entrySet;\n        }\n\n        private final class EntrySet extends AbstractPatriciaTrie<String, E>.RangeEntrySet {\n\n\n            @Override\n            public boolean contains(final Object o) {\n\n                if (!(o instanceof Map.Entry)) {\n                    return false;\n                }\n                final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) o;\n                final Object entryKey = entry.getKey();\n                if (! (entryKey instanceof String)) {\n                    return false;\n                }\n\n                String key = (String) entryKey;\n                if (!prefix.startsWith(key) && !key.startsWith(prefix)) {\n                   return false;\n                }\n\n\n                final E value = PatriciaTrie.this.get(key);\n                if (value == null) {\n                    return false;\n                }\n                final Object entryValue = entry.getValue();\n\n                return  value.equals(entryValue);\n            }\n\n\n        }\n\n\n    }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}