{
    "generation": "public class PatriciaTrie<V> implements Trie<String, V> {\n\n    private Node<V> root;\n\n    public PatriciaTrie() {\n        this.root = new Node<>();\n    }\n\n    // Other methods...\n\n    @Override\n    public SortedMap<String, V> prefixMap(String prefix) {\n        Node<V> node = findNode(prefix, true);\n        if (node == null) {\n            return Collections.emptySortedMap();\n        }\n        return new PrefixMap<>(prefix, node);\n    }\n\n    // Internal node class and other utility methods...\n\n    private class PrefixMap<V> extends AbstractMap<String, V> implements SortedMap<String, V> {\n\n        private final String prefix;\n        private final Node<V> node;\n\n        public PrefixMap(String prefix, Node<V> node) {\n            this.prefix = prefix;\n            this.node = node;\n        }\n\n        @Override\n        public Set<Entry<String, V>> entrySet() {\n            Set<Entry<String, V>> entrySet = new TreeSet<>(Comparator.comparing(Map.Entry::getKey));\n            collectEntries(node, prefix, entrySet);\n            return entrySet;\n        }\n\n        @Override\n        public void clear() {\n            node.clear(root, prefix);\n        }\n\n        @Override\n        public Comparator<? super String> comparator() {\n            return null;\n        }\n\n        @Override\n        public SortedMap<String, V> subMap(String fromKey, String toKey) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public SortedMap<String, V> headMap(String toKey) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public SortedMap<String, V> tailMap(String fromKey) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String firstKey() {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String lastKey() {\n            throw new UnsupportedOperationException();\n        }\n\n        private void collectEntries(Node<V> node, String prefix, Set<Entry<String, V>> entrySet) {\n            if (node.value != null) {\n                entrySet.add(new SimpleEntry<>(prefix, node.value));\n            }\n            for (Map.Entry<String, Node<V>> entry : node.children.entrySet()) {\n                collectEntries(entry.getValue(), prefix + entry.getKey(), entrySet);\n            }\n        }\n    }\n\n    // Node class and other internal methods...\n\n    private static class Node<V> {\n        V value;\n        final Map<String, Node<V>> children = new TreeMap<>();\n\n        void clear(Node<V> root, String prefix) {\n            if (children.isEmpty()) {\n                removePrefix(root, prefix);\n            } else {\n                for (Node<V> child : children.values()) {\n                    child.clear(root, prefix + child.prefix);\n                }\n            }\n        }\n\n        private void removePrefix(Node<V> node, String prefix) {\n            if (prefix.isEmpty()) {\n                node.children.remove(prefix);\n            } else {\n                Node<V> child = node.children.get(prefix.substring(0, 1));\n                if (child != null) {\n                    child.removePrefix(child, prefix.substring(1));\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}