{
    "generation": "package org.apache.commons.collections4.trie;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.SortedMap;\n\npublic class PatriciaTrie<V> extends AbstractPatriciaTrie<V> {\n\n    private static final long serialVersionUID = 5072873775569727102L;\n\n    public PatriciaTrie() {\n        super();\n    }\n\n    public PatriciaTrie(final Comparator<? super String> comparator) {\n        super(comparator);\n    }\n\n    public PatriciaTrie(final Map<? extends String, ? extends V> map) {\n        super(map);\n    }\n\n\n    @Override\n    public SortedMap<String, V> prefixMap(final String prefix) {\n        return new PrefixRangeMap(prefix, null);\n    }\n\n\n    private class PrefixRangeMap extends RangeMap {\n\n        /**\n         * Constructs a new instance.\n         *\n         * @param fromKey\n         *            low endpoint of the range (inclusive)\n         * @param toKey\n         *            high endpoint of the range (noninclusive)\n         */\n        protected PrefixRangeMap(final String fromKey, final String toKey) {\n            super(fromKey == null ? null : fromKey + '\\0', toKey);\n        }\n\n\n        @Override\n        public void clear() {\n            final String fromKey = this.fromKey == null ? null : this.fromKey.substring(0, this.fromKey.length() - 1);\n            final PatriciaTrie<V>.PrefixRangeMap map = new PrefixRangeMap(fromKey, this.toKey);\n\n            final Set<Map.Entry<String, V>> entries = map.entrySet();\n\n            for (final Map.Entry<String, V> entry : entries) {\n                 PatriciaTrie.this.remove(entry.getKey());\n            }\n        }\n\n\n        @Override\n        protected boolean inRange(final String key) {\n            if (fromKey == null) {\n                return key.compareTo(toKey) < 0;\n            }\n            return key.compareTo(fromKey.substring(0, fromKey.length() - 1)) >= 0 && key.compareTo(toKey) < 0;\n        }\n    }\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}