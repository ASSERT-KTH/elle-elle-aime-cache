{
    "generation": "/**\n * Returns a view of the mappings contained in this trie with keys\n * that are prefixed by the specified prefix. Modifying the returned map\n * (via {@code put}, {@code remove}, or {@code clear}) will directly impact\n * the underlying trie.\n *\n * @param prefix the prefix to filter keys by, null means all keys\n * @return a SortedMap view of the mappings with keys prefixed by {@code prefix}\n */\npublic SortedMap<String, Integer> prefixMap(String prefix) {\n    return new PrefixMapView(prefix);\n}\n\n// Inner class to manage the view\nprivate class PrefixMapView extends AbstractSortedMap<String, Integer> {\n    private final String prefix;\n    private final Comparator<? super String> comparator = PatriciaTrie.this.comparator();\n\n    public PrefixMapView(String prefix) {\n        this.prefix = prefix;\n    }\n\n    @Override\n    public Comparator<? super String> comparator() {\n        return comparator;\n    }\n\n    @Override\n    public SortedSet<String> keySet() {\n        return new PrefixKeySet();\n    }\n\n    @Override\n    public Collection<Integer> values() {\n        return new PrefixValueCollection();\n    }\n\n    @Override\n    public Set<Map.Entry<String, Integer>> entrySet() {\n        return new PrefixEntrySet();\n    }\n\n    @Override\n    public void clear() {\n        if (prefix == null) { // Clearing all\n            PatriciaTrie.this.clear();\n        } else {\n            // Find and remove all nodes with keys prefixed by 'prefix'\n            removeNodesWithPrefix(PatriciaTrie.this.root, prefix);\n        }\n    }\n\n    // Implementation of the removeNodesWithPrefix method\n    private void removeNodesWithPrefix(Node node, String prefix) {\n        if (node == null) return;\n        \n        if (node.key!= null && node.key.startsWith(prefix)) {\n            // Handle leaf node or nodes that are part of the prefix\n            removeNode(node);\n        } else {\n            // Recursively check child nodes if the current key is a prefix of the search prefix\n            if (prefix.startsWith(node.key)) {\n                for (Node child : node.children.values()) {\n                    removeNodesWithPrefix(child, prefix);\n                }\n            }\n            // If all children are removed, remove this node if it doesn't have a value\n            if (node.children.isEmpty() && node.value == null) {\n                removeNode(node);\n            }\n        }\n    }\n\n    // Other methods (keySet, values, entrySet) implementation...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}