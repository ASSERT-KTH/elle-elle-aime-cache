{
    "generation": "public synchronized SortedMap<K, V> prefixMap(final K prefix) {\n    final Node<K, V> head = head();\n    final Node<K, V> tail = tail();\n    final Node<K, V> prefixNode = findPrefixNode(prefix, head, tail, false);\n\n    if (prefixNode == null) {\n        return Collections.emptySortedMap();\n    }\n\n    final SortedMap<K, V> result = new TreeMap<>();\n    final Iterator<Map.Entry<K, V>> iterator = new Iterator<Map.Entry<K, V>>() {\n        private Node<K, V> nextNode = prefixNode.firstChild;\n\n        @Override\n        public boolean hasNext() {\n            return nextNode != null && isPrefix(prefixNode, nextNode);\n        }\n\n        @Override\n        public Map.Entry<K, V> next() {\n            if (!hasNext()) {\n                throw new NoSuchElementException();\n            }\n            Map.Entry<K, V> entry = nextNode.entry;\n            nextNode = nextNode.nextSibling;\n            return entry;\n        }\n\n        @Override\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n    };\n\n    while (iterator.hasNext()) {\n        Map.Entry<K, V> entry = iterator.next();\n        result.put(entry.getKey(), entry.getValue());\n    }\n\n    return new SortedMap<K, V>() {\n        @Override\n        public K firstKey() {\n            return result.firstKey();\n        }\n\n        @Override\n        public K lastKey() {\n            return result.lastKey();\n        }\n\n        @Override\n        public int size() {\n            return result.size();\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return result.isEmpty();\n        }\n\n        @Override\n        public V get(Object key) {\n            return result.get(key);\n        }\n\n        @Override\n        public V put(K key, V value) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public V remove(Object key) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void putAll(Map<? extends K, ? extends V> m) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void clear() {\n            result.clear();\n            // Clear the entries from the original trie\n            for (Map.Entry<K, V> entry : result.entrySet()) {\n                trie.remove(entry.getKey());\n            }\n        }\n\n        @Override\n        public Set<K> keySet() {\n            return result.keySet();\n        }\n\n        @Override\n        public Collection<V> values() {\n            return result.values();\n        }\n\n        @Override\n        public Set<Map.Entry<K, V>> entrySet() {\n            return result.entrySet();\n        }\n\n        @Override\n        public SortedMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) {\n            return result.subMap(fromKey, fromInclusive, toKey, toInclusive);\n        }\n\n        @Override\n        public SortedMap<K, V> headMap(K toKey, boolean inclusive) {\n            return result.headMap(toKey, inclusive);\n        }\n\n        @Override\n        public SortedMap<K, V> tailMap(K fromKey, boolean inclusive) {\n            return result.tailMap(fromKey, inclusive);\n        }\n\n        @Override\n        public Comparator<? super K> comparator() {\n            return result.comparator();\n        }\n    };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}