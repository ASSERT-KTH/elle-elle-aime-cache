{
    "generation": "@Override\npublic SortedMap<K, V> prefixMap(K prefix) {\n    if (prefix == null) {\n        throw new NullPointerException(\"Prefix must not be null\");\n    }\n    return new PrefixMap(prefix);\n}\n\nprivate class PrefixMap extends AbstractMap<K, V> implements SortedMap<K, V> {\n    private final K prefix;\n\n    public PrefixMap(K prefix) {\n        this.prefix = prefix;\n    }\n\n    @Override\n    public V put(K key, V value) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Comparator<? super K> comparator() {\n        return PatriciaTrie.this.comparator();\n    }\n\n    @Override\n    public Set<Entry<K, V>> entrySet() {\n        Set<Entry<K, V>> result = new HashSet<>();\n        for (Map.Entry<K, V> entry : PatriciaTrie.this.entrySet()) {\n            if (entry.getKey().toString().startsWith(prefix.toString())) {\n                result.add(entry);\n            }\n        }\n        return result;\n    }\n\n    @Override\n    public K firstKey() {\n        K first = null;\n        for (K key : keySet()) {\n            if (first == null || comparator().compare(key, first) < 0) {\n                first = key;\n            }\n        }\n        return first;\n    }\n\n    @Override\n    public SortedMap<K, V> headMap(K toKey) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public K lastKey() {\n        K last = null;\n        for (K key : keySet()) {\n            if (last == null || comparator().compare(key, last) > 0) {\n                last = key;\n            }\n        }\n        return last;\n    }\n\n    @Override\n    public SortedMap<K, V> subMap(K fromKey, K toKey) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public SortedMap<K, V> tailMap(K fromKey) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Set<K> keySet() {\n        Set<K> result = new HashSet<>();\n        for (Map.Entry<K, V> entry : entrySet()) {\n            result.add(entry.getKey());\n        }\n        return result;\n    }\n\n    @Override\n    public Collection<V> values() {\n        Collection<V> result = new ArrayList<>();\n        for (Map.Entry<K, V> entry : entrySet()) {\n            result.add(entry.getValue());\n        }\n        return result;\n    }\n\n    @Override\n    public void clear() {\n        List<K> keysToRemove = new ArrayList<>();\n        for (K key : keySet()) {\n            keysToRemove.add(key);\n        }\n        for (K key : keysToRemove) {\n            PatriciaTrie.this.remove(key);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}