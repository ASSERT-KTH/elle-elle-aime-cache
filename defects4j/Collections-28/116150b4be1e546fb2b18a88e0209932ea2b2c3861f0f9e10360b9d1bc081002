{
    "generation": "@Override\npublic SortedMap<K, V> prefixMap(final K prefix) {\n    if (prefix == null) {\n        throw new IllegalArgumentException(\"The prefix must not be null\");\n    }\n\n    final Node<K, V> node = root.getChild(prefix);\n    if (node == null) {\n        return new TreeMap<>();\n    }\n\n    final TreeMap<K, V> map = new TreeMap<>();\n    node.collectKeys(map);\n\n    return new SortedMap<K, V>() {\n        @Override\n        public Comparator<? super K> comparator() {\n            return map.comparator();\n        }\n\n        @Override\n        public K firstKey() {\n            return map.firstKey();\n        }\n\n        @Override\n        public K lastKey() {\n            return map.lastKey();\n        }\n\n        @Override\n        public int size() {\n            return map.size();\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return map.isEmpty();\n        }\n\n        @Override\n        public boolean containsKey(final Object key) {\n            return map.containsKey(key);\n        }\n\n        @Override\n        public boolean containsValue(final Object value) {\n            return map.containsValue(value);\n        }\n\n        @Override\n        public V get(final Object key) {\n            return map.get(key);\n        }\n\n        @Override\n        public V put(final K key, final V value) {\n            V oldValue = map.put(key, value);\n            if (oldValue == null) {\n                // Ensure the key is added to the trie\n                PatriciaTrie.this.put(key, value);\n            }\n            return oldValue;\n        }\n\n        @Override\n        public V remove(final Object key) {\n            V oldValue = map.remove(key);\n            if (oldValue != null) {\n                // Ensure the key is removed from the trie\n                PatriciaTrie.this.remove(key);\n            }\n            return oldValue;\n        }\n\n        @Override\n        public void putAll(final Map<? extends K, ? extends V> m) {\n            for (Map.Entry<? extends K, ? extends V> entry : m.entrySet()) {\n                put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        @Override\n        public void clear() {\n            for (K key : new ArrayList<>(map.keySet())) {\n                map.remove(key);\n                PatriciaTrie.this.remove(key);\n            }\n        }\n\n        @Override\n        public Set<K> keySet() {\n            return map.keySet();\n        }\n\n        @Override\n        public Collection<V> values() {\n            return map.values();\n        }\n\n        @Override\n        public Set<Map.Entry<K, V>> entrySet() {\n            return map.entrySet();\n        }\n\n        @Override\n        public SortedMap<K, V> subMap(final K fromKey, final K toKey) {\n            return new TreeMap<>(map.subMap(fromKey, toKey));\n        }\n\n        @Override\n        public SortedMap<K, V> headMap(final K toKey) {\n            return new TreeMap<>(map.headMap(toKey));\n        }\n\n        @Override\n        public SortedMap<K, V> tailMap(final K fromKey) {\n            return new TreeMap<>(map.tailMap(fromKey));\n        }\n    };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}