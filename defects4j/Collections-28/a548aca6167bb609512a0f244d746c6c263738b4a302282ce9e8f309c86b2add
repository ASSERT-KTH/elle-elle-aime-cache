{
    "generation": "public SortedMap<K, V> prefixMap(K prefix) {\n    return new PrefixRangeMap(prefix);\n}\n\nprivate class PrefixRangeMap extends AbstractSortedMap<K, V> {\n    private final K prefix;\n\n    PrefixRangeMap(K prefix) {\n        this.prefix = prefix;\n    }\n\n    @Override\n    public void clear() {\n        Iterator<Entry<K, V>> it = entrySet().iterator();\n        while (it.hasNext()) {\n            it.next();\n            it.remove();\n        }\n    }\n\n    @Override\n    public Set<Entry<K, V>> entrySet() {\n        return new EntrySet();\n    }\n\n    private class EntrySet extends AbstractSet<Entry<K, V>> {\n        @Override\n        public Iterator<Entry<K, V>> iterator() {\n            return new PrefixEntryIterator(prefix);\n        }\n\n        @Override\n        public int size() {\n            int size = 0;\n            Iterator<Entry<K, V>> it = iterator();\n            while (it.hasNext()) {\n                it.next();\n                size++;\n            }\n            return size;\n        }\n\n        @Override\n        public void clear() {\n            PrefixRangeMap.this.clear();\n        }\n    }\n\n    private class PrefixEntryIterator implements Iterator<Entry<K, V>> {\n        private final K prefix;\n        private Entry<K, V> next;\n        private Entry<K, V> lastReturned;\n\n        PrefixEntryIterator(K prefix) {\n            this.prefix = prefix;\n            this.next = PatriciaTrie.this.firstEntry();\n            advance();\n        }\n\n        private void advance() {\n            while (next != null && !next.getKey().toString().startsWith(prefix.toString())) {\n                next = PatriciaTrie.this.nextEntry(next.getKey());\n            }\n        }\n\n        @Override\n        public boolean hasNext() {\n            return next != null;\n        }\n\n        @Override\n        public Entry<K, V> next() {\n            if (!hasNext()) {\n                throw new NoSuchElementException();\n            }\n            lastReturned = next;\n            next = PatriciaTrie.this.nextEntry(next.getKey());\n            advance();\n            return lastReturned;\n        }\n\n        @Override\n        public void remove() {\n            if (lastReturned == null) {\n                throw new IllegalStateException();\n            }\n            PatriciaTrie.this.remove(lastReturned.getKey());\n            lastReturned = null;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}