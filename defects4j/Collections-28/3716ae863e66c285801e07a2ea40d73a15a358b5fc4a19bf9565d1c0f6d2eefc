{
    "generation": "@Override\npublic SortedMap<K, V> prefixMap(final K prefix) {\n    final Node<K, V> node = root.getPrefixNode(prefix, Node.VALUE);\n    if (node == null) {\n        return Collections.emptySortedMap();\n    }\n\n    final Set<K> keySet = new TreeSet<>(node.prefixComparator(prefix));\n    final Map<K, V> map = new TreeMap<>(keySet.comparator());\n    node.addAllKeysToMap(prefix, map);\n\n    return new SortedMap<K, V>() {\n        @Override\n        public V put(K key, V value) {\n            V oldValue = map.put(key, value);\n            if (oldValue == null) {\n                root.put(key, value);\n            } else {\n                root.put(key, value);\n            }\n            return oldValue;\n        }\n\n        @Override\n        public V remove(Object key) {\n            V oldValue = map.remove(key);\n            if (oldValue != null) {\n                root.remove(key);\n            }\n            return oldValue;\n        }\n\n        @Override\n        public void clear() {\n            for (K key : new ArrayList<>(map.keySet())) {\n                map.remove(key);\n                root.remove(key);\n            }\n        }\n\n        @Override\n        public V get(Object key) {\n            return map.get(key);\n        }\n\n        @Override\n        public int size() {\n            return map.size();\n        }\n\n        @Override\n        public boolean containsKey(Object key) {\n            return map.containsKey(key);\n        }\n\n        @Override\n        public boolean containsValue(Object value) {\n            return map.containsValue(value);\n        }\n\n        @Override\n        public Set<K> keySet() {\n            return map.keySet();\n        }\n\n        @Override\n        public Collection<V> values() {\n            return map.values();\n        }\n\n        @Override\n        public Set<Entry<K, V>> entrySet() {\n            return map.entrySet();\n        }\n\n        @Override\n        public K firstKey() {\n            return map.firstKey();\n        }\n\n        @Override\n        public K lastKey() {\n            return map.lastKey();\n        }\n\n        @Override\n        public K lowerKey(K key) {\n            return map.lowerKey(key);\n        }\n\n        @Override\n        public K floorKey(K key) {\n            return map.floorKey(key);\n        }\n\n        @Override\n        public K ceilingKey(K key) {\n            return map.ceilingKey(key);\n        }\n\n        @Override\n        public K higherKey(K key) {\n            return map.higherKey(key);\n        }\n\n        @Override\n        public Map<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) {\n            return map.subMap(fromKey, fromInclusive, toKey, toInclusive);\n        }\n\n        @Override\n        public Map<K, V> headMap(K toKey, boolean inclusive) {\n            return map.headMap(toKey, inclusive);\n        }\n\n        @Override\n        public Map<K, V> tailMap(K fromKey, boolean inclusive) {\n            return map.tailMap(fromKey, inclusive);\n        }\n\n        @Override\n        public Comparator<? super K> comparator() {\n            return map.comparator();\n        }\n    };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}