{
    "generation": "import java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.SortedMap;\n\npublic class PatriciaTrie<V> extends AbstractPatriciaTrie<V> {\n\n    public PatriciaTrie() {\n        this(null);\n    }\n\n\n    public PatriciaTrie(final Comparator<? super String> comparator) {\n        super(comparator);\n    }\n\n\n    @Override\n    public SortedMap<String, V> prefixMap(final String prefix) {\n        return new PrefixMap(prefix);\n    }\n\n    private class PrefixMap extends AbstractPatriciaTrie<V>.PrefixMapView implements SortedMap<String, V> {\n\n        public PrefixMap(final String prefix) {\n            super(prefix);\n        }\n\n        private SortedMap<String,V> getSortedMap(){\n            return PatriciaTrie.this.subMap(prefix, firstKey(prefix + Character.MAX_VALUE));\n        }\n\n        @Override\n        public void clear() {\n            getSortedMap().clear();\n        }\n\n        @Override\n        public Comparator<? super String> comparator() {\n            return PatriciaTrie.this.comparator();\n        }\n\n        @Override\n        public String firstKey() {\n           return getSortedMap().firstKey();\n        }\n\n        @Override\n        public SortedMap<String, V> headMap(final String toKey) {\n           return getSortedMap().headMap(toKey);\n        }\n\n        @Override\n        public String lastKey() {\n            return getSortedMap().lastKey();\n        }\n\n\n        @Override\n        public SortedMap<String, V> subMap(final String fromKey, final String toKey) {\n           return getSortedMap().subMap(fromKey, toKey);\n        }\n\n        @Override\n        public SortedMap<String, V> tailMap(final String fromKey) {\n            return getSortedMap().tailMap(fromKey);\n        }\n\n\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}