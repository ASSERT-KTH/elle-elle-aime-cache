{
    "generation": "public <V> SortedMap<String, V> prefixMap(String prefix) {\n    if (prefix == null) {\n        throw new IllegalArgumentException(\"Prefix must not be null\");\n    }\n\n    if (prefix.isEmpty()) {\n        return new TreeMap<>(this);\n    }\n\n    Node<String, V> root = root();\n    Node<String, V> node = findNode(root, prefix, 0);\n    if (node == null) {\n        return Collections.emptySortedMap();\n    }\n\n    TreeMap<String, V> result = new TreeMap<>();\n    collectValues(node, prefix, result);\n    return result;\n}\n\nprivate <V> Node<String, V> findNode(Node<String, V> node, String prefix, int depth) {\n    if (node == null) {\n        return null;\n    }\n\n    if (depth == prefix.length()) {\n        return node;\n    }\n\n    char ch = prefix.charAt(depth);\n    for (Node<String, V> child : node.children) {\n        if (child != null && child.key.charAt(child.keyOffset) == ch) {\n            Node<String, V> result = findNode(child, prefix, depth + 1);\n            if (result != null) {\n                return result;\n            }\n        }\n    }\n    return null;\n}\n\nprivate <V> void collectValues(Node<String, V> node, String prefix, TreeMap<String, V> result) {\n    if (node == null) {\n        return;\n    }\n\n    if (node.value != null) {\n        result.put(prefix, node.value);\n    }\n\n    for (Node<String, V> child : node.children) {\n        if (child != null) {\n            collectValues(child, prefix + child.key, result);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}