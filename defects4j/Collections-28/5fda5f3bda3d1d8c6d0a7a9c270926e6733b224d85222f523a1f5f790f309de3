{
    "generation": "/**\n * Returns a view of the portions of this trie whose keys are prefixed by the given prefix.\n * Note that the returned map will throw {@link IllegalArgumentException} on attempts to insert, update, or remove mappings.\n * \n * @param <K>  the type of the keys in this trie\n * @param <V>  the type of the values in this trie\n * @param prefix the prefix to filter by, may be null\n * @return a SortedMap view of the mapped values\n */\npublic <K extends String, V> SortedMap<K, V> prefixMap(K prefix) {\n    // Create a custom SortedMap implementation that delegates to the trie for read operations\n    // and updates the trie in write operations (like clear())\n    return new AbstractSortedMap<K, V>() {\n        @Override\n        public SortedSet<K> keySet() {\n            // Filter the original trie's key set based on the prefix\n            return new TreeSet<>(keySet().stream()\n                   .filter(k -> k.startsWith(prefix))\n                   .collect(Collectors.toList()));\n        }\n\n        @Override\n        public Collection<V> values() {\n            // Filter the original trie's values based on the keys that match the prefix\n            return keySet().stream()\n                   .map(trie::get)\n                   .collect(Collectors.toList());\n        }\n\n        @Override\n        public void clear() {\n            // Update the original trie when the prefix map is cleared\n            keySet().forEach(trie::remove);\n        }\n\n        @Override\n        public Comparator<? super K> comparator() {\n            // Preserve the comparator from the original trie\n            return PatriciaTrie.this.comparator();\n        }\n    };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}