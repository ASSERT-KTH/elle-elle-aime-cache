{
    "generation": "public class PatriciaTrie<K, V> extends AbstractTrie<K, V> {\n\n    // ... other existing code ...\n\n    @Override\n    public SortedMap<K, V> prefixMap(K prefix) {\n        return new PrefixMap(prefix);\n    }\n\n    private class PrefixMap extends AbstractMap<K, V> implements SortedMap<K, V> {\n\n        private final K prefix;\n\n        PrefixMap(K prefix) {\n            this.prefix = prefix;\n        }\n\n        @Override\n        public Comparator<? super K> comparator() {\n            return PatriciaTrie.this.comparator();\n        }\n\n        @Override\n        public SortedMap<K, V> subMap(K fromKey, K toKey) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public SortedMap<K, V> headMap(K toKey) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public SortedMap<K, V> tailMap(K fromKey) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public K firstKey() {\n            Entry<K, V> entry = PatriciaTrie.this.selectors.ceilingEntry(prefix);\n            if (entry != null && PatriciaTrie.this.keyAnalyzer.isPrefix(prefix, entry.getKey())) {\n                return entry.getKey();\n            }\n            return null;\n        }\n\n        @Override\n        public K lastKey() {\n            Entry<K, V> entry = PatriciaTrie.this.selectors.floorEntry(prefix);\n            if (entry != null && PatriciaTrie.this.keyAnalyzer.isPrefix(prefix, entry.getKey())) {\n                return entry.getKey();\n            }\n            return null;\n        }\n\n        @Override\n        public Set<K> keySet() {\n            return new KeySet();\n        }\n\n        @Override\n        public Collection<V> values() {\n            return new Values();\n        }\n\n        @Override\n        public Set<Entry<K, V>> entrySet() {\n            return new EntrySet();\n        }\n\n        @Override\n        public void clear() {\n            Iterator<K> iterator = keySet().iterator();\n            while (iterator.hasNext()) {\n                iterator.next();\n                iterator.remove();\n            }\n        }\n\n        // ... other existing code ...\n    }\n\n    // ... other existing code ...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}