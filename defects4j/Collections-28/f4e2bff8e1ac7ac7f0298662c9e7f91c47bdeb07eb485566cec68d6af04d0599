{
    "generation": "@Override\npublic SortedMap<K, V> prefixMap(final K prefix) {\n    final Node<K, V> root = getRoot();\n    final Node<K, V> node = findNode(prefix, root, 0);\n    if (node == null) {\n        return Collections.emptySortedMap();\n    }\n\n    final SortedMap<K, V> map = new TreeMap<>(comparator);\n    collectKeysAndValues(node, new StringBuilder(prefix.toString()), map);\n\n    return new SortedMap<K, V>() {\n        @Override\n        public Comparator<? super K> comparator() {\n            return PatriciaTrie.this.comparator;\n        }\n\n        @Override\n        public K firstKey() {\n            return map.firstKey();\n        }\n\n        @Override\n        public V get(Object key) {\n            return map.get(key);\n        }\n\n        @Override\n        public K lastKey() {\n            return map.lastKey();\n        }\n\n        @Override\n        public V put(K key, V value) {\n            return map.put(key, value);\n        }\n\n        @Override\n        public V remove(Object key) {\n            V oldValue = map.remove(key);\n            if (oldValue != null) {\n                PatriciaTrie.this.remove(key);\n            }\n            return oldValue;\n        }\n\n        @Override\n        public int size() {\n            return map.size();\n        }\n\n        @Override\n        public SortedMap<K, V> subMap(K fromKey, K toKey) {\n            return map.subMap(fromKey, toKey);\n        }\n\n        @Override\n        public SortedMap<K, V> headMap(K toKey) {\n            return map.headMap(toKey);\n        }\n\n        @Override\n        public SortedMap<K, V> tailMap(K fromKey) {\n            return map.tailMap(fromKey);\n        }\n\n        @Override\n        public Set<K> keySet() {\n            return map.keySet();\n        }\n\n        @Override\n        public Collection<V> values() {\n            return map.values();\n        }\n\n        @Override\n        public Set<Entry<K, V>> entrySet() {\n            return map.entrySet();\n        }\n\n        @Override\n        public void clear() {\n            for (K key : map.keySet()) {\n                PatriciaTrie.this.remove(key);\n            }\n            map.clear();\n        }\n\n        @Override\n        public boolean containsKey(Object key) {\n            return map.containsKey(key);\n        }\n\n        @Override\n        public boolean containsValue(Object value) {\n            return map.containsValue(value);\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return map.isEmpty();\n        }\n    };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}