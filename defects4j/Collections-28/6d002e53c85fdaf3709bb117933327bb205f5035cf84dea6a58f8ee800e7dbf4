{
    "generation": "package org.apache.commons.collections4.trie;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\nimport java.util.SortedMap;\n\npublic abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {\n\n    protected AbstractPatriciaTrie(final KeyAnalyzer<? super K> analyzer) {\n        super(analyzer);\n    }\n\n    protected AbstractPatriciaTrie(final KeyAnalyzer<? super K> analyzer, final Map<? extends K, ? extends V> map) {\n        super(analyzer, map);\n    }\n    \n    @Override\n    public SortedMap<K, V> prefixMap(final K prefix) {\n        return new PrefixRangeMap(prefix, null);\n    }\n\n\n    private class PrefixRangeMap extends RangeMap {\n\n        public PrefixRangeMap(final K fromKey, final K toKey) {\n            super(fromKey, toKey);\n        }\n\n\n        @Override\n        public void clear() {\n            final TrieEntry<K, V> entry = AbstractPatriciaTrie.this.getEntry(fromKey);\n            if (entry == null) {\n                return;\n            }\n\n            if(toKey == null) {\n                final TrieEntry<K, V> firstEntry = AbstractPatriciaTrie.this.firstEntry(entry);\n                if(firstEntry != null){\n                    AbstractPatriciaTrie.this.delete(firstEntry);\n                }\n            } else {\n                // the trie may contain multiple mappings which match the prefix, so we must iterate and remove all\n                Iterator<Map.Entry<K,V>> iterator = entrySet().iterator();\n\n                while(iterator.hasNext()) {\n                    AbstractPatriciaTrie.this.remove(iterator.next().getKey());\n                }\n            }\n        }\n\n\n        @Override\n        public Set<Map.Entry<K, V>> entrySet() {\n            if (fromKey == null) {\n                return AbstractPatriciaTrie.this.entrySet();\n            }\n\n            return new EntrySet(fromKey, toKey) {\n\n                @Override\n                public Iterator<Map.Entry<K, V>> iterator() {\n\n                    return new TrieMapIterator(fromKey, toKey);\n                }\n            };\n        }\n\n    }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}