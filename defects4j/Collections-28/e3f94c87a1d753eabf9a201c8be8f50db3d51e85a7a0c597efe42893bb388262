{
    "generation": "package org.apache.commons.collections4.trie;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry;\n\n/**\n * \n * @since 4.0\n * @version $Id$\n * @param <K> the type of the keys in this map\n * @param <V> the type of the values in this map\n */\nclass PrefixTrieMap<K, V> extends AbstractPatriciaTrie.PrefixTrie<K, V> {\n\n    private static final long serialVersionUID = 5800947562115306935L;\n\n    protected final Trie<K, V> delegate;\n    protected final K prefix;\n    protected final int offset;\n    protected final int length;\n\n    public PrefixTrieMap(final Trie<K, V> delegate, final K prefix) {\n        super(delegate.getKeyAnalyzer());\n        this.delegate = delegate;\n        this.prefix = prefix;\n        final int offset = delegate.getKeyAnalyzer().lengthInBits(prefix);\n        this.offset = offset;\n        this.length = offset == 0 ? 0 : getKeyAnalyzer().lengthInBits(prefix) - offset;\n    }\n\n    private AbstractPatriciaTrie<K, V>.TrieEntry<K, V> cast(final Map.Entry<?, ?> o) {\n        return (AbstractPatriciaTrie<K, V>.TrieEntry<K, V>) o;\n    }\n\n    @Override\n    public void clear() {\n        final int offset = this.offset;\n        final int length = this.length;\n        if (length == 0) {\n            delegate.clear();\n        } else {\n            final K prefix = this.prefix;\n            final Trie<K, V>.TrieEntry<K, V> entry = delegate.getEntry(prefix);\n            if (entry != null) {\n                ((AbstractPatriciaTrie<K, V>.TrieEntry<K, V>) entry).removeAll();\n            }\n        }\n    }\n\n    @Override\n    public boolean containsKey(final Object k) {\n        final int offset = this.offset;\n        if (k != null && offset > 0) {\n            final String key = getKeyAnalyzer().toString(k);\n            final String prefix = getKeyAnalyzer().toString(this.prefix);\n            if (key.startsWith(prefix)) {\n                return delegate.containsKey(getKeyAnalyzer().toComparable(key.substring(prefix.length())));\n            }\n        }\n        return offset == 0 && delegate.containsKey(k);\n    }\n\n    @Override\n    public boolean containsValue(final Object value) {\n        if (value == null) {\n            return super.containsValue(value);\n        }\n        final Collection<TrieEntry<K, V>> entries = super.entrySet();\n        for (final TrieEntry<K, V> entry : entries) {\n            if (entry.getValue().equals(value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private K prefix(final K k) {\n        final String str = getKeyAnalyzer().toString(k);\n        return getKeyAnalyzer().toComparable(str.substring(getKeyAnalyzer().toString(prefix).length()));\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public Set<java.util.Map.Entry<K, V>> entrySet() {\n        return (Set<java.util.Map.Entry<K, V>>) super.entrySet();\n    }\n\n    @Override\n    public V get(final Object k) {\n        final K key = getKeyAnalyzer().toComparable(k);\n        final int offset = this.offset;\n        if (key != null && offset > 0) {\n            final String skey = getKeyAnalyzer().toString(key);\n            final String sprefix = getKeyAnalyzer().toString(this.prefix);\n            if (skey.startsWith(sprefix)) {\n                return delegate.get(getKeyAnalyzer().toComparable(skey.substring(sprefix.length())));\n            }\n            return null;\n        }\n        return delegate.get(key);\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return super.isEmpty();\n    }\n\n    @Override\n    public Set<K> keySet() {\n        return super.keySet();\n    }\n\n    @Override\n    public V put(final K key, final V value) {\n        final int offset = this.offset;\n        if (offset > 0) {\n            return delegate.put(getKeyAnalyzer().toComparable(getKeyAnalyzer().toString(prefix)\n                + getKeyAnalyzer().toString(key)), value);\n        }\n        return delegate.put(key, value);\n    }\n\n    @Override\n    public void putAll(final Map<? extends K, ? extends V> m) {\n        if (m.size() == 0) {\n            return;\n        }\n        final int offset = this.offset;\n        if (offset > 0) {\n            for (final Map.Entry<? extends K, ? extends V> entry : m.entrySet()) {\n                final K key = entry.getKey();\n                delegate.put(getKeyAnalyzer().toComparable(getKeyAnalyzer().toString(prefix)\n                    + getKeyAnalyzer().toString(key)), entry.getValue());\n            }\n            return;\n        }\n        delegate.putAll(m);\n    }\n\n    @Override\n    public V remove(final Object key) {\n        final int offset = this.offset;\n        if (key != null && offset > 0) {\n            final String skey = getKeyAnalyzer().toString(key);\n            final String sprefix = getKeyAnalyzer().toString(this.prefix);\n            if (skey.startsWith(sprefix)) {\n                return delegate.remove(getKeyAnalyzer().toComparable(skey.substring(sprefix.length())));\n            }\n            return null;\n        }\n        return delegate.remove(key);\n    }\n\n    @Override\n    public int size() {\n        return super.size();\n    }\n\n    @Override\n    public Collection<V> values() {\n        return super.values();\n    }\n\n    @Override\n    protected TrieEntry<K, V> getClosestEntryForKey(final K key, final int length) {\n        final TrieEntry<K, V> entry = delegate.getClosestEntryForKey(getKeyAnalyzer().toComparable(\n            getKeyAnalyzer().toString(prefix) + getKeyAnalyzer().toString(key)), length);\n        if (entry != null && getKeyAnalyzer().isPrefix(prefix, entry.getKey())) {\n            return entry;\n        }\n        return null;\n    }\n\n    @Override\n    protected TrieEntry<K, V> getLongestPrefixEntry(final K key, final int length) {\n        final TrieEntry<K, V> entry = delegate.getLongestPrefixEntry(getKeyAnalyzer().toComparable(\n            getKeyAnalyzer().toString(prefix) + getKeyAnalyzer().toString(key)), length);\n        if (entry != null && getKeyAnalyzer().isPrefix(prefix, entry.getKey())) {\n            return entry;\n        }\n        return null;\n    }\n\n    @Override\n    protected K getKey(final K key) {\n        final String sKey = getKeyAnalyzer().toString(key);\n        return getKeyAnalyzer().toComparable(sKey.substring(this.offset, sKey.length()));\n    }\n\n    @Override\n    protected TrieEntry<K, V> root() {\n        return delegate.getEntry(prefix);\n    }\n\n    @Override\n    protected void removeAll(final TrieEntry<K, V> entry) {\n        ((AbstractPatriciaTrie<K, V>.TrieEntry<K, V>) entry).removeAll();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}