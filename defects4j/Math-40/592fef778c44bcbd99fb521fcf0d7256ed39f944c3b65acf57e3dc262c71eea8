{
    "generation": "@Override\nprotected double doSolve() {\n    final int maxEval = getMaxEvaluations();\n    final double min = getMin();\n    final double max = getMax();\n    final double initial = getStartValue();\n    final double functionValueAccuracy = getFunctionValueAccuracy();\n    final double absoluteAccuracy = getAbsoluteAccuracy();\n    final double relativeAccuracy = getRelativeAccuracy();\n\n    verifySequence(min, initial, max);\n\n    // Return the initial guess if it is good enough\n    double yInitial = computeObjectiveValue(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        return initial;\n    }\n\n    // Return the first endpoint if it is good enough\n    double yMin = computeObjectiveValue(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        return min;\n    }\n\n    // Return the second endpoint if it is good enough\n    double yMax = computeObjectiveValue(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        return max;\n    }\n\n    // Prepare loop\n    double x0 = min;\n    double y0 = yMin;\n    double x1 = max;\n    double y1 = yMax;\n    double x2 = initial;\n    double y2 = yInitial;\n\n    // Loop until convergence is reached\n    while (true) {\n        // Check for convergence\n        double tolerance = absoluteAccuracy + relativeAccuracy * Math.abs(x2);\n        if (Math.abs(x1 - x0) <= tolerance) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return Math.abs(y0) < Math.abs(y1) ? x0 : x1;\n                case LEFT_SIDE:\n                    return x0;\n                case RIGHT_SIDE:\n                    return x1;\n                case BELOW_SIDE:\n                    return y0 <= 0 ? x0 : x1;\n                case ABOVE_SIDE:\n                    return y0 < 0 ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Calculate next guess\n        double dx = (x1 - x0) / (y1 - y0) * y2;\n        double x3 = x2 - dx;\n\n        // Check if we're out of bounds\n        if (x3 < x0 || x3 > x1) {\n            x3 = 0.5 * (x0 + x1);\n        }\n\n        // Evaluate function at new point\n        double y3 = computeObjectiveValue(x3);\n\n        if (Math.abs(y3) <= functionValueAccuracy) {\n            return x3;\n        }\n\n        // Update points\n        if (y0 * y3 < 0) {\n            x1 = x3;\n            y1 = y3;\n        } else {\n            x0 = x3;\n            y0 = y3;\n        }\n\n        x2 = x3;\n        y2 = y3;\n\n        // Check if we've exceeded the maximum number of evaluations\n        if (getEvaluations() >= maxEval) {\n            throw new TooManyEvaluationsException(maxEval);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}