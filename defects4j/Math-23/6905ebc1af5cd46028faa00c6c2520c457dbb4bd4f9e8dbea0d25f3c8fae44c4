{
    "generation": "@Override\nprotected UnivariatePointValuePair doOptimize() {\n    final boolean isMinim = getGoalType() == GoalType.MINIMIZE;\n    final double lo = getMin();\n    final double mid = getStartValue();\n    final double hi = getMax();\n\n    // Optional additional convergence criteria.\n    final ConvergenceChecker<UnivariatePointValuePair> checker\n        = getConvergenceChecker();\n\n    double a;\n    double b;\n    if (lo < hi) {\n        a = lo;\n        b = hi;\n    } else {\n        a = hi;\n        b = lo;\n    }\n\n    double x = mid;\n    double v = x;\n    double w = x;\n    double d = 0;\n    double e = 0;\n    double fx = computeObjectiveValue(x);\n    if (!isMinim) {\n        fx = -fx;\n    }\n    double fv = fx;\n    double fw = fx;\n\n    UnivariatePointValuePair previous = null;\n    UnivariatePointValuePair current\n        = new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n    // Best point encountered so far (which is the initial guess).\n    UnivariatePointValuePair best\n        = new UnivariatePointValuePair(current.getPoint(), current.getValue());\n\n    int iter = 0;\n    while (true) {\n        final double m = 0.5 * (a + b);\n        final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;\n        final double tol2 = 2 * tol1;\n\n        // Default stopping criterion.\n        final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);\n        if (!stop) {\n            double p = 0;\n            double q = 0;\n            double r = 0;\n            double u = 0;\n\n            if (FastMath.abs(e) > tol1) { // Fit parabola.\n                // Rest of the method...\n            } else {\n                // Rest of the method...\n            }\n\n            // Rest of the method...\n\n            // User-defined convergence checker.\n            previous = current;\n            current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\n\n            // Update best if current point is better.\n            if (current.getValue() < best.getValue()) {\n                best = new UnivariatePointValuePair(current.getPoint(), current.getValue());\n            }\n\n            if (checker != null) {\n                if (checker.converged(iter, previous, current)) {\n                    return best;\n                }\n            }\n\n            // Rest of the method...\n        } else { // Default termination (Brent's criterion).\n            return best;\n        }\n        ++iter;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}