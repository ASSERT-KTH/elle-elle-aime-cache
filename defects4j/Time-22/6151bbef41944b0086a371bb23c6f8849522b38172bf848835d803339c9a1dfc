{
    "generation": "/**\n * Creates a period from the given millisecond duration with the standard period type\n * and ISO rules, ensuring that the calculation is performed with the time-only period type.\n * <p>\n * The calculation uses the hour, minute, second and millisecond fields.\n *\n * @param duration  the duration, in milliseconds\n */\nprotected BasePeriod(long duration) {\n    this(duration, PeriodType.standard(), ISOChronology.getInstance());\n    long totalSeconds = duration / DateTimeConstants.MILLIS_PER_SECOND;\n    long totalMinutes = totalSeconds / DateTimeConstants.SECONDS_PER_MINUTE;\n    long totalHours = totalMinutes / DateTimeConstants.MINUTES_PER_HOUR;\n    long days = (totalHours / DateTimeConstants.HOURS_PER_DAY);\n    if (days > 0) { // avoid division by zero\n        totalHours %= DateTimeConstants.HOURS_PER_DAY;\n    }\n    if (totalHours > 0) { // avoid division by zero\n        totalMinutes %= DateTimeConstants.MINUTES_PER_HOUR;\n    }\n    if (totalMinutes > 0) { // avoid division by zero\n        totalSeconds %= DateTimeConstants.SECONDS_PER_MINUTE;\n    }\n    set(DurationFieldType.hours(), totalHours);\n    set(DurationFieldType.minutes(), totalMinutes % DateTimeConstants.MINUTES_PER_HOUR);\n    set(DurationFieldType.seconds(), totalSeconds % DateTimeConstants.SECONDS_PER_MINUTE);\n    set(DurationFieldType.millis(), duration % DateTimeConstants.MILLIS_PER_SECOND);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}