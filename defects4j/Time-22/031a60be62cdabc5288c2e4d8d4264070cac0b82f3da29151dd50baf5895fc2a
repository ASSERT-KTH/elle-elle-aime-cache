{
    "generation": "    /**\n     * Creates a period from the given millisecond duration with the standard period type\n     * and ISO rules, ensuring that the calculation is performed with the time-only period type.\n     * <p>\n     * The calculation uses the hour, minute, second and millisecond fields.\n     *\n     * @param duration  the duration, in milliseconds\n     */\n    protected BasePeriod(long duration) {\n        super(PeriodType.time(), new Chronology() {\n            @Override\n            public DateTimeZone getZone() {\n                return DateTimeZone.UTC;\n            }\n\n            @Override\n            public Chronology withUTC() {\n                return this;\n            }\n\n            @Override\n            public Chronology withZone(DateTimeZone zone) {\n                return this;\n            }\n\n            // Implement other required methods of Chronology with minimal functionality\n            @Override\n            public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getDateTimeMillis(long instant, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int[] get(int fieldIndex, long instant) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getMinimumValue(int fieldIndex) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getMaximumValue(int fieldIndex) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long roundFloor(long instant) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long roundCeiling(long instant) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long roundHalfFloor(long instant) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long roundHalfCeiling(long instant) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long roundHalfEven(long instant) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public DurationField centuries() {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public DurationField years() {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public DurationField months() {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public DurationField weeks() {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public DurationField days() {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public DurationField hours() {\n                return DurationFieldType.hours().getField(this);\n            }\n\n            @Override\n            public DurationField minutes() {\n                return DurationFieldType.minutes().getField(this);\n            }\n\n            @Override\n            public DurationField seconds() {\n                return DurationFieldType.seconds().getField(this);\n            }\n\n            @Override\n            public DurationField millis() {\n                return DurationFieldType.millis().getField(this);\n            }\n        }, duration);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}