{
    "generation": "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n\n    if (start < 0 || length < 0 || start > buffer.length - length) {\n        throw new ArrayIndexOutOfBoundsException();\n    }\n\n    if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n        int csize = (int) current.getCSize();\n        if (readBytesOfEntry >= csize) {\n            return -1;\n        }\n        if (offsetInBuffer >= lengthOfLastRead) {\n            offsetInBuffer = 0;\n            if ((lengthOfLastRead = inf.read(buf)) == -1) {\n                throw new IOException(\"Truncated ZIP file\"); // Check for truncation\n            }\n            count(lengthOfLastRead);\n            bytesReadFromStream += lengthOfLastRead;\n        }\n        int toRead = Math.min(Math.min(length, lengthOfLastRead - offsetInBuffer), csize - readBytesOfEntry);\n        System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n        offsetInBuffer += toRead;\n        readBytesOfEntry += toRead;\n        crc.update(buffer, start, toRead);\n        return toRead;\n    }\n\n    if (inf.needsInput()) {\n        fill();\n        if (lengthOfLastRead > 0) {\n            bytesReadFromStream += lengthOfLastRead;\n        }\n    }\n\n    int read = 0;\n    try {\n        read = inf.inflate(buffer, start, length);\n    } catch (DataFormatException e) {\n        throw new ZipException(e.getMessage());\n    }\n    if (read == 0 && inf.finished()) {\n        throw new IOException(\"Truncated ZIP file\"); // Check for truncation\n    }\n    crc.update(buffer, start, read);\n    return read;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}