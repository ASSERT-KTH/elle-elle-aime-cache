{
    "generation": "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n\n    if (start >= 0 && length >= 0 && start <= buffer.length && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            // ... previous stored method block ...\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            if (inf.finished()) {\n                throw new IOException(\"Truncated ZIP file\");\n            }\n            throw new ZipException(e.getMessage());\n        }\n        if (read == 0 && inf.finished()) {\n            throw new IOException(\"Truncated ZIP file\");\n        }\n        crc.update(buffer, start, read);\n        return read;\n    }\n    throw new ArrayIndexOutOfBoundsException();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}