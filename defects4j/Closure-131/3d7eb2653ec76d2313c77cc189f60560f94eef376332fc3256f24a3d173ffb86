{
    "generation": "/**\n * Checks if a given string is a valid JavaScript identifier.\n * \n * @param s the input string to check\n * @return true if the string is a valid JavaScript identifier, false otherwise\n */\npublic static boolean isJSIdentifier(String s) {\n  int length = s.length();\n\n  // JavaScript identifiers cannot be empty and must start with a valid start character\n  if (length == 0 ||\n     !isValidJSIdentifierStart(s.charAt(0))) {\n    return false;\n  }\n\n  // Check each subsequent character to ensure it's a valid part of a JavaScript identifier\n  for (int i = 1; i < length; i++) {\n    if (!isValidJSIdentifierPart(s.charAt(i))) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Helper methods to align with JavaScript identifier rules (ECMAScript 2015, 11.6)\nprivate static boolean isValidJSIdentifierStart(char c) {\n  // JavaScript allows: \n  // - Uppercase and lowercase ASCII letters (A-Z, a-z)\n  // - Dollar sign ($) and underscore (_)\n  // - Unicode escape sequences (e.g., \\u200D)\n  // - Unicode code points U+0080 to U+FFFF (non-ASCII characters)\n  return \n    (c >= 'A' && c <= 'Z') || \n    (c >= 'a' && c <= 'z') || \n    c == '$' || \n    c == '_' || \n    (c >= '\\u0080' && c <= '\\uFFFF');\n}\n\nprivate static boolean isValidJSIdentifierPart(char c) {\n  // In addition to the start characters, JavaScript also allows:\n  // - Digits (0-9)\n  return \n    isValidJSIdentifierStart(c) || \n    (c >= '0' && c <= '9');\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}