{
    "generation": "/**\n * Writes a BitSet to a DataOutput, packing bits into bytes.\n * \n * @param header DataOutput to write to\n * @param bits BitSet to write\n * @param length Number of bits to write from the BitSet\n * @throws IOException if an I/O error occurs\n */\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i)? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) { // Changed from == 0 to < 0\n            header.write(cache);\n            shift = 7;\n            cache = 0;\n        }\n    }\n    if (shift < 7 && length > 0) { // Added condition to check if there are remaining bits\n        cache <<= shift; // Left shift to align remaining bits to most significant position\n        header.write(cache);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}