{
    "generation": "/**\n * Writes a BitSet to the provided DataOutput, using the specified number of bits.\n * \n * @param header the output stream to write to\n * @param bits the BitSet to write\n * @param length the number of bits to write from the BitSet\n * @throws IOException if an I/O error occurs\n */\nprivate void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n    int cache = 0;\n    int shift = 7;\n    for (int i = 0; i < length; i++) {\n        cache |= ((bits.get(i)? 1 : 0) << shift);\n        --shift;\n        if (shift < 0) { // Changed from == 0 to < 0 to handle cases where length is not a multiple of 8\n            header.write(cache);\n            if (i < length - 1) { // Only reset if there are more bits to write\n                shift = 7;\n                cache = 0;\n            }\n        }\n    }\n    if (shift!= 7) { // Write remaining cache if not all bits were written in full bytes\n        header.write(cache);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}