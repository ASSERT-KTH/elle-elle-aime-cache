{
    "generation": "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader != null) {\n        hdrMap = new LinkedHashMap<>();\n\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            // Read the header from the first line of the file\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord != null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n\n        // Build the name to index mappings\n        if (headerRecord != null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n                final boolean emptyHeader = header == null || header.trim().isEmpty();\n                if ((containsHeader && !emptyHeader) || (emptyHeader && !this.format.getIgnoreEmptyHeaders())) {\n                    if (containsHeader && !emptyHeader) {\n                        throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                \"\\\" in \" + Arrays.toString(headerRecord));\n                    } else if (emptyHeader && !this.format.getIgnoreEmptyHeaders()) {\n                        throw new IllegalArgumentException(\"Header contains an empty name at index: \" + i);\n                    }\n                } else {\n                    hdrMap.put(header, i);\n                }\n            }\n        }\n    }\n    return hdrMap;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}