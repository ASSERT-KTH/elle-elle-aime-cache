{
    "generation": "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader != null) {\n        hdrMap = new LinkedHashMap<>();\n\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            // read the header from the first line of the file\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord != null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n\n        if (headerRecord != null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final String trimmedHeader = header.trim();\n                final boolean containsHeader = hdrMap.containsKey(trimmedHeader);\n                final boolean emptyHeader = trimmedHeader.isEmpty();\n\n                if (emptyHeader && this.format.getIgnoreEmptyHeaders()) {\n                    // Skip empty headers if ignoreEmptyHeaders is true\n                    continue;\n                }\n\n                if (containsHeader) {\n                    throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                            \"\\\" in \" + Arrays.toString(headerRecord));\n                }\n\n                // Use trimmed header for mapping\n                hdrMap.put(trimmedHeader, i);\n            }\n        }\n    }\n    return hdrMap;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}