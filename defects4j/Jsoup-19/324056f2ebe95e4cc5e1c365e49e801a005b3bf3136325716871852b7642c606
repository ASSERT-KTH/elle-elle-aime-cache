{
    "generation": "/**\n * Tests if the attribute's URL conforms to one of the specified protocols.\n * Resolves relative URLs to absolute, and updates the attribute if necessary.\n * \n * @param el         Element containing the attribute\n * @param attr       Attribute to test\n * @param protocols  Allowed protocols\n * @return True if the attribute's URL conforms to one of the allowed protocols\n */\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String originalValue = attr.getValue();\n    String value = el.absUrl(attr.getKey());\n    if (!preserveRelativeLinks)\n        attr.setValue(value);\n    \n    // Check original value to allow custom protocols without a colon (e.g., \"cid\", \"data\")\n    for (Protocol protocol : protocols) {\n        if (protocol.hasColon()) {\n            String prot = protocol.toString() + \":\";\n            if (value.toLowerCase().startsWith(prot)) {\n                return true;\n            }\n        } else {\n            if (originalValue.equalsIgnoreCase(protocol.toString()) \n                || (originalValue.startsWith(protocol.toString() + \":\") && value.toLowerCase().startsWith(protocol.toString() + \":\"))) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}