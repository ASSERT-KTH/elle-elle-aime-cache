{
    "generation": "/**\n * Tests if the provided attribute value starts with any of the allowed protocols.\n * \n * @param el         Element containing the attribute\n * @param attr       Attribute to check\n * @param protocols  Set of allowed protocols\n * @return true if the attribute value starts with an allowed protocol, false otherwise\n */\nprivate boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = el.absUrl(attr.getKey());\n    if (!preserveRelativeLinks)\n        attr.setValue(value);\n    \n    // Check for custom protocols (e.g., 'cid', 'data') without a colon (:)\n    for (Protocol protocol : protocols) {\n        String protWithColon = protocol.toString() + \":\";\n        String protWithoutColon = protocol.toString();\n        \n        if (value.toLowerCase().startsWith(protWithColon) || \n            // Special case for protocols without a colon (e.g., 'cid', 'data')\n            (value.toLowerCase().equals(protWithoutColon) || value.toLowerCase().startsWith(protWithoutColon + \"/\"))) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}