{
    "generation": "    /**\n     * Writes a PAX extended header with the given map as contents.\n     * @since 1.4\n     */\n    void writePaxHeaders(String entryName,\n                         Map<String, String> headers) throws IOException {\n        String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n        // Ensure the name does not exceed the maximum length\n        if (name.length() >= TarConstants.NAMELEN) {\n            name = name.substring(0, TarConstants.NAMELEN - 1);\n        }\n        // Create a new TarArchiveEntry for the PAX extended header\n        TarArchiveEntry pex = new TarArchiveEntry(name,\n                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n        StringWriter w = new StringWriter();\n        // Iterate through each header entry to format and write them\n        for (Map.Entry<String, String> h : headers.entrySet()) {\n            String key = h.getKey();\n            String value = h.getValue();\n            int len = key.length() + value.length()\n                + 3 /* blank, equals and newline */\n                + String.valueOf(key.length() + value.length() + 3).length() /* length of length */;\n            // Construct line with calculated initial length\n            String line = len + \" \" + key + \"=\" + value + \"\\n\";\n            int actualLength = line.getBytes(CharsetNames.UTF_8).length;\n            while (len != actualLength) {\n                len = actualLength;\n                // Re-compute line if its actual byte length doesn't match calculated length\n                line = len + \" \" + key + \"=\" + value + \"\\n\";\n                actualLength = line.getBytes(CharsetNames.UTF_8).length;\n            }\n            w.write(line);\n        }\n        // Convert written data to UTF-8 encoded bytes\n        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n        // Set the size of the TarArchiveEntry to the length of the data\n        pex.setSize(data.length);\n        // Write the entry and then the data to the archive\n        putArchiveEntry(pex);\n        write(data);\n        // Close the archive entry to finish\n        closeArchiveEntry();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}