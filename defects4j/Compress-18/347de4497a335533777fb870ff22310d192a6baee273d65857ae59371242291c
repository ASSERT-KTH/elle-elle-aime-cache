{
    "generation": "void writePaxHeaders(String entryName,\n                     Map<String, String> headers) throws IOException {\n    String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n        // TarEntry's constructor would think this is a directory\n        // and not allow any data to be written\n    if (name.length() >= TarConstants.NAMELEN) {\n        name = name.substring(0, TarConstants.NAMELEN - 1);\n    }\n    TarArchiveEntry pex = new TarArchiveEntry(name,\n                                              TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n    StringWriter w = new StringWriter();\n    for (Map.Entry<String, String> h : headers.entrySet()) {\n        String key = h.getKey();\n        String value = h.getValue();\n        int len = key.length() + value.length()\n            + 3 /* blank, equals and newline */\n            + 3 /* displayed length of length (max two digits for lengths under 100) */;\n        String line = String.format(java.util.Locale.ROOT, \"%d %s=%s\\n\", len, key, value);\n        int actualLength = line.getBytes(StandardCharsets.UTF_8).length;\n        if (len != actualLength) {\n            len = actualLength;\n            line = String.format(java.util.Locale.ROOT, \"%d %s=%s\\n\", len, key, value);\n        }\n        w.write(line);\n    }\n    byte[] data = w.toString().getBytes(StandardCharsets.UTF_8);\n    pex.setSize(data.length);\n    putArchiveEntry(pex);\n    write(data);\n    closeArchiveEntry();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}