{
    "generation": "/**\n * Writes a PAX extended header with the given map as contents.\n * @since 1.4\n */\nvoid writePaxHeaders(String entryName,\n                     Map<String, String> headers) throws IOException {\n    String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n    // TarEntry's constructor would think this is a directory\n    // and not allow any data to be written\n    if (name.length() >= TarConstants.NAMELEN) {\n        name = name.substring(0, TarConstants.NAMELEN - 1);\n    }\n    TarArchiveEntry pex = new TarArchiveEntry(name,\n                                              TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n    // Calculate the total size of the headers beforehand\n    int totalSize = 0;\n    for (Map.Entry<String, String> h : headers.entrySet()) {\n        String key = h.getKey();\n        String value = h.getValue();\n        int len = key.length() + value.length()\n            + 3 /* blank, equals and newline */;\n        String line = len + \" \" + key + \"=\" + value + \"\\n\";\n        totalSize += line.getBytes(CharsetNames.UTF_8).length;\n        // Adjust for cases where UTF-8 encoding isn't a single octet per character\n        while (line.getBytes(CharsetNames.UTF_8).length!= len + 1) {\n            len = line.getBytes(CharsetNames.UTF_8).length - 1; // exclude newline\n            line = len + \" \" + key + \"=\" + value + \"\\n\";\n        }\n        totalSize -= line.getBytes(CharsetNames.UTF_8).length; // subtract the previous incorrect addition\n        totalSize += line.getBytes(CharsetNames.UTF_8).length; // add the corrected length\n    }\n\n    pex.setSize(totalSize);\n    putArchiveEntry(pex);\n\n    StringWriter w = new StringWriter();\n    for (Map.Entry<String, String> h : headers.entrySet()) {\n        String key = h.getKey();\n        String value = h.getValue();\n        int len = key.length() + value.length()\n            + 3 /* blank, equals and newline */;\n        String line = len + \" \" + key + \"=\" + value + \"\\n\";\n        while (line.getBytes(CharsetNames.UTF_8).length!= len + 1) {\n            len = line.getBytes(CharsetNames.UTF_8).length - 1; // exclude newline\n            line = len + \" \" + key + \"=\" + value + \"\\n\";\n        }\n        w.write(line);\n    }\n    byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n    write(data);\n    closeArchiveEntry();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}