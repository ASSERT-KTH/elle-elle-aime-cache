{
    "generation": "/**\n* Writes a PAX extended header with the given map as contents.\n* @since 1.4\n*/\nvoid writePaxHeaders(String entryName,\n                     Map<String, String> headers) throws IOException {\n    String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n    // TarEntry's constructor would think this is a directory\n    // and not allow any data to be written\n    if (name.length() >= TarConstants.NAMELEN) {\n        name = name.substring(0, TarConstants.NAMELEN - 1);\n    }\n    TarArchiveEntry pex = new TarArchiveEntry(name,\n                                              TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n    StringWriter w = new StringWriter();\n    for (Map.Entry<String, String> h : headers.entrySet()) {\n        String key = h.getKey();\n        String value = h.getValue();\n        String line = key + \"=\" + value + \"\\n\";\n        byte[] lineBytes = line.getBytes(CharsetNames.UTF_8);\n        int len = lineBytes.length;\n        String lenStr = Integer.toString(len);\n        String paxLine = lenStr + \" \" + line;\n        w.write(paxLine);\n    }\n    byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n    pex.setSize(data.length);\n    putArchiveEntry(pex);\n    write(data);\n    closeArchiveEntry();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}