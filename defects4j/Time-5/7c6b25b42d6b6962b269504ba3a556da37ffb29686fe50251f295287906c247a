{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n        millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n        millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n\n        int years = getYears();\n        int months = getMonths();\n        \n        // Handle years and months separately, if present\n        if (years != 0 || months != 0) {\n            months = FieldUtils.safeAdd(months, years * 12); // Convert years into months\n            years = months / 12; // Normalize to years\n            months = months % 12; // Remaining months\n        }\n\n        // Create the base result with the normalized millis\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        // Ensure years and months are added back to the result if supported\n        if (type.isSupported(DurationFieldType.years()) && years != 0) {\n            result = result.withYears(years);\n        }\n        if (type.isSupported(DurationFieldType.months()) && months != 0) {\n            result = result.withMonths(months);\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}