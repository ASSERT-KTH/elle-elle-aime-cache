{
    "generation": "/**\n * Normalizes this period using standard rules, assuming a 12 month year,\n * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n * providing control over how the result is split into fields.\n * \n * @param type  the period type of the new period, null means standard type\n * @return a normalized period equivalent to this period\n * @throws ArithmeticException if any field is too large to be represented\n * @throws UnsupportedOperationException if this period contains non-zero\n *  years or months but the specified period type does not support them\n * @since 1.5\n */\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    \n    // Normalize years and months\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n        if (years!= 0 || months!= 0) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n        }\n    } else {\n        // If years/months are not supported, reset them to 0\n        years = 0;\n        months = 0;\n    }\n    \n    // Normalize weeks and days\n    if (type.isSupported(DurationFieldType.weeks()) || type.isSupported(DurationFieldType.days())) {\n        if (weeks!= 0 || days!= 0) {\n            int totalDays = FieldUtils.safeAdd(FieldUtils.safeMultiply(weeks, 7), days);\n            weeks = totalDays / 7;\n            days = totalDays % 7;\n        }\n    } else {\n        // If weeks/days are not supported, reset them to 0\n        weeks = 0;\n        days = 0;\n    }\n    \n    // Create the result period, ensuring only supported fields are set\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    if (type.isSupported(DurationFieldType.years())) {\n        result = result.withYears(years);\n    }\n    if (type.isSupported(DurationFieldType.months())) {\n        result = result.withMonths(months);\n    }\n    if (type.isSupported(DurationFieldType.weeks())) {\n        result = result.withWeeks(weeks);\n    }\n    if (type.isSupported(DurationFieldType.days())) {\n        result = result.withDays(days);\n    }\n    if (type.isSupported(DurationFieldType.hours())) {\n        result = result.withHours(hours);\n    }\n    if (type.isSupported(DurationFieldType.minutes())) {\n        result = result.withMinutes(minutes);\n    }\n    if (type.isSupported(DurationFieldType.seconds())) {\n        result = result.withSeconds(seconds);\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}