{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        if (type.isSupported(DurationFieldType.years())) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            result = result.withYears(years);\n        }\n        if (type.isSupported(DurationFieldType.months())) {\n            months = months % 12;\n            result = result.withMonths(months);\n        }\n    }\n    \n    // Normalize weeks and days if supported\n    int weeks = getWeeks();\n    int days = getDays();\n    if (weeks != 0 && type.isSupported(DurationFieldType.weeks())) {\n        days += weeks * DateTimeConstants.DAYS_PER_WEEK;\n        result = result.withWeeks(0);\n    }\n    if (days != 0 && type.isSupported(DurationFieldType.days())) {\n        result = result.withDays(days);\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}