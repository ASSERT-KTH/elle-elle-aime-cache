{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        int years = getYears();\n        int months = getMonths();\n\n        // Normalize months to be between 0 and 11\n        if (years != 0 || months != 0) {\n            years += months / 12;\n            months = months % 12;\n        }\n\n        // Construct the result period with the given type and UTC chronology\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        // Add years and months to the result if present\n        if (type.isSupported(DurationFieldType.years())) {\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n        } else if (years != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported: years\");\n        }\n\n        if (type.isSupported(DurationFieldType.months())) {\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        } else if (months != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported: months\");\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}