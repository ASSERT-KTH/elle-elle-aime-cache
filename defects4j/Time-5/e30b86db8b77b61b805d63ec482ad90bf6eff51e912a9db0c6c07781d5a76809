{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n    \n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        if (!type.isSupported(DurationFieldType.years()) || !type.isSupported(DurationFieldType.months())) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}