{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    int weeks = getWeeks();\n    millis += (((long) weeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    int normalizedDays = (int) (millis / DateTimeConstants.MILLIS_PER_DAY);\n    millis -= normalizedDays * DateTimeConstants.MILLIS_PER_DAY;\n    Period result;\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            result = new Period(type).withYears(years).withMonths(months).withDays(normalizedDays).withMillis((int) millis);\n        } else {\n            throw new UnsupportedOperationException(\"Both years and months must be supported by PeriodType for this operation\");\n        }\n    } else {\n        result = new Period(type).withDays(normalizedDays).withMillis((int) millis);\n    }\n\n    if (type.isSupported(DurationFieldType.weeks()) && weeks != 0) {\n        result = result.plusWeeks(weeks);\n    } else if (weeks != 0) {\n        throw new UnsupportedOperationException(\"Weeks are not supported by the specified PeriodType\");\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}