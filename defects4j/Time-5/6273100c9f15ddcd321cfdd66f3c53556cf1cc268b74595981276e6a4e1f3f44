{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis(); // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        int totalMonths = 0;\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        }\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n            int normalizedYears = 0;\n            int normalizedMonths = totalMonths;\n            if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n                normalizedYears = totalMonths / 12;\n                normalizedMonths = totalMonths % 12;\n            } else if (type.isSupported(DurationFieldType.years())) {\n                normalizedYears = totalMonths / 12;\n                normalizedMonths = 0; // discard remaining months since the type does not support months\n            }\n            if (normalizedYears != 0) {\n                result = result.withYears(normalizedYears);\n            }\n            if (normalizedMonths != 0) {\n                result = result.withMonths(normalizedMonths);\n            }\n        } else if (totalMonths != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}