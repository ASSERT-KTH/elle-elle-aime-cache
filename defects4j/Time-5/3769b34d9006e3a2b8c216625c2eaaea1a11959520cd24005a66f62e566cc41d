{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  \n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years!= 0 || months!= 0) {\n        if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years!= 0 && type.isSupported(DurationFieldType.years())) {\n                result = result.withYears(years);\n            }\n            if (months!= 0 && type.isSupported(DurationFieldType.months())) {\n                result = result.withMonths(months);\n            }\n        } else {\n            throw new UnsupportedOperationException(\"Period type does not support years or months\");\n        }\n    }\n    int weeks = getWeeks();\n    int days = getDays();\n    if (weeks!= 0 || days!= 0) {\n        if (type.isSupported(DurationFieldType.weeks()) || type.isSupported(DurationFieldType.days())) {\n            weeks = FieldUtils.safeAdd(weeks, days / 7);\n            days = days % 7;\n            if (weeks!= 0 && type.isSupported(DurationFieldType.weeks())) {\n                result = result.withWeeks(weeks);\n            }\n            if (days!= 0 && type.isSupported(DurationFieldType.days())) {\n                result = result.withDays(days);\n            }\n        } else {\n            throw new UnsupportedOperationException(\"Period type does not support weeks or days\");\n        }\n    }\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millisecs = getMillis();\n    if (hours!= 0 || minutes!= 0 || seconds!= 0 || millisecs!= 0) {\n        if (type.isSupported(DurationFieldType.hours()) || type.isSupported(DurationFieldType.minutes()) || \n            type.isSupported(DurationFieldType.seconds()) || type.isSupported(DurationFieldType.millis())) {\n            seconds = FieldUtils.safeAdd(seconds, minutes * 60);\n            minutes = 0;\n            seconds = FieldUtils.safeAdd(seconds, hours * 3600);\n            hours = 0;\n            millisecs = FieldUtils.safeAdd(millisecs, seconds * 1000);\n            seconds = 0;\n            if (hours!= 0 && type.isSupported(DurationFieldType.hours())) {\n                result = result.withHours(hours);\n            }\n            if (minutes!= 0 && type.isSupported(DurationFieldType.minutes())) {\n                result = result.withMinutes(minutes);\n            }\n            if (seconds!= 0 && type.isSupported(DurationFieldType.seconds())) {\n                result = result.withSeconds(seconds);\n            }\n            if (millisecs!= 0 && type.isSupported(DurationFieldType.millis())) {\n                result = result.withMillis(millisecs);\n            }\n        } else {\n            throw new UnsupportedOperationException(\"Period type does not support time fields\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}