{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        if (!type.isSupported(DurationFieldType.years()) && years != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        if (!type.isSupported(DurationFieldType.months()) && months != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n\n    // Normalize weeks, days, hours, minutes, seconds, and millis\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millisPart = getMillis();\n\n    if (type.isSupported(DurationFieldType.weeks()) && weeks != 0) {\n        days += weeks * DateTimeConstants.DAYS_PER_WEEK;\n        weeks = 0;\n    }\n\n    if (type.isSupported(DurationFieldType.days()) && days != 0) {\n        hours += days * DateTimeConstants.HOURS_PER_DAY;\n        days = 0;\n    }\n\n    if (type.isSupported(DurationFieldType.hours()) && hours != 0) {\n        minutes += hours * DateTimeConstants.MINUTES_PER_HOUR;\n        hours = 0;\n    }\n\n    if (type.isSupported(DurationFieldType.minutes()) && minutes != 0) {\n        seconds += minutes * DateTimeConstants.SECONDS_PER_MINUTE;\n        minutes = 0;\n    }\n\n    if (type.isSupported(DurationFieldType.seconds()) && seconds != 0) {\n        millisPart += seconds * DateTimeConstants.MILLIS_PER_SECOND;\n        seconds = 0;\n    }\n\n    if (type.isSupported(DurationFieldType.millis()) && millisPart != 0) {\n        result = result.withMillis(millisPart);\n    }\n\n    if (type.isSupported(DurationFieldType.weeks()) && weeks != 0) {\n        result = result.withWeeks(weeks);\n    }\n\n    if (type.isSupported(DurationFieldType.days()) && days != 0) {\n        result = result.withDays(days);\n    }\n\n    if (type.isSupported(DurationFieldType.hours()) && hours != 0) {\n        result = result.withHours(hours);\n    }\n\n    if (type.isSupported(DurationFieldType.minutes()) && minutes != 0) {\n        result = result.withMinutes(minutes);\n    }\n\n    if (type.isSupported(DurationFieldType.seconds()) && seconds != 0) {\n        result = result.withSeconds(seconds);\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}