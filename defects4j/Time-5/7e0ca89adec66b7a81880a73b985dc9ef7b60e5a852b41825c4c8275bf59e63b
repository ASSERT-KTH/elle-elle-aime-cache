{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    int years = getYears();\n    int months = getMonths();\n    long totalMonths = years * 12L + months;\n    \n    Period result = new Period(millis, PeriodType.standard(), ISOChronology.getInstanceUTC());\n    if (totalMonths != 0) {\n        if (type.contains(DurationFieldType.years())) {\n            years = FieldUtils.safeToInt(totalMonths / 12);\n            months = FieldUtils.safeToInt(totalMonths % 12);\n            result = result.withYears(years).withMonths(months);\n        } else if (type.contains(DurationFieldType.months())) {\n            result = result.withMonths(FieldUtils.safeToInt(totalMonths));\n        } else {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n    \n    return result.withPeriodType(type);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}