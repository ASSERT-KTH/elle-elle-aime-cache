{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (months < 0) {\n            years--;\n            months += 12;\n        }\n    }\n    \n    long totalMonths = years * 12L + months;\n    \n    Period result = new Period(millis, PeriodType.standard(), ISOChronology.getInstanceUTC());\n    if (type.isSupported(DurationFieldType.years())) {\n        result = result.withYears((int) (totalMonths / 12));\n    }\n    if (type.isSupported(DurationFieldType.months())) {\n        result = result.withMonths((int) (totalMonths % 12));\n    } else if (!type.isSupported(DurationFieldType.years())) {\n        result = result.withMonths((int) totalMonths);\n    }\n    \n    if (!type.isSupported(DurationFieldType.weeks())) {\n        int days = result.getDays() + result.getWeeks() * 7;\n        result = result.withWeeks(0).withDays(days);\n    }\n    \n    return result.withPeriodType(type);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}