{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    \n    // First normalize years and months since they are calendar specific\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        // If type doesn't support years, add them to months\n        if (!type.containsField(DurationFieldType.years())) {\n            months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n            years = 0;\n        }\n    }\n    \n    // Convert all duration fields to millis\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    // Create a new period with the normalized duration fields\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    // Add back the normalized years and months if they're supported by the type\n    if (months != 0 && type.containsField(DurationFieldType.months())) {\n        result = result.withMonths(months);\n    }\n    if (years != 0 && type.containsField(DurationFieldType.years())) {\n        result = result.withYears(years);\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}