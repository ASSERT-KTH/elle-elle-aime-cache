{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // Convert year/month fields to total months first\n    int totalMonths = getYears() * 12 + getMonths();\n    \n    // Handle all fields that can be converted to millis\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    // Create period with the milliseconds\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    // Add the normalized months back if the type supports it\n    if (totalMonths != 0) {\n        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n            int years = totalMonths / 12;\n            int months = totalMonths % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        } else if (type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(totalMonths);\n        } else if (totalMonths != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}