{
    "generation": "/**\n * Normalizes this period using standard rules, assuming a 12 month year,\n * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n * providing control over how the result is split into fields.\n *...\n */\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  \n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    // Check if years or months are supported by the period type\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n        int years = getYears();\n        int months = getMonths();\n        if (years!= 0 || months!= 0) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (type.isSupported(DurationFieldType.years()) && years!= 0) {\n                result = result.withYears(years);\n            }\n            if (type.isSupported(DurationFieldType.months()) && months!= 0) {\n                result = result.withMonths(months);\n            }\n        }\n    }\n    \n    // Handle weeks, days, hours, minutes, seconds separately\n    if (type.isSupported(DurationFieldType.weeks())) {\n        result = result.withWeeks(getWeeks());\n    }\n    if (type.isSupported(DurationFieldType.days())) {\n        result = result.withDays(getDays());\n    }\n    if (type.isSupported(DurationFieldType.hours())) {\n        result = result.withHours(getHours());\n    }\n    if (type.isSupported(DurationFieldType.minutes())) {\n        result = result.withMinutes(getMinutes());\n    }\n    if (type.isSupported(DurationFieldType.seconds())) {\n        result = result.withSeconds(getSeconds());\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}