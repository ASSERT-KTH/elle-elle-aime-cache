{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis(); // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    // Create the normalized time-based period\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    // Handle years and months explicitly\n    int years = getYears();\n    int months = getMonths();\n\n    if ((years != 0 || months != 0) && (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months()))) {\n        years = FieldUtils.safeAdd(years, months / 12); // Normalize months to years\n        months = months % 12; // Remainder months\n\n        if (type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years); // Add normalized years if supported\n        } else if (years != 0) {\n            throw new UnsupportedOperationException(\"Years are not supported by the specified period type.\");\n        }\n\n        if (type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months); // Add normalized months if supported\n        } else if (months != 0) {\n            throw new UnsupportedOperationException(\"Months are not supported by the specified period type.\");\n        }\n    } else if (years != 0 || months != 0) {\n        throw new UnsupportedOperationException(\"Years or months are not supported by the specified period type.\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}