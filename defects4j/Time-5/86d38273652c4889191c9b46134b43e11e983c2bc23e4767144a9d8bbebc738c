{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  \n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years!= 0 || months!= 0) {\n        if (type instanceof StandardPeriodType &&!type.isSupported(DurationFieldType.years()) &&!type.isSupported(DurationFieldType.months())) {\n            throw new UnsupportedOperationException(\"PeriodType does not support years or months\");\n        }\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years!= 0) {\n            result = result.withYears(years);\n        }\n        if (months!= 0) {\n            result = result.withMonths(months);\n        }\n    } else if (type instanceof StandardPeriodType) {\n        long weeks = (getWeeks() * 7 * DateTimeConstants.MILLIS_PER_DAY);\n        long days = (getDays() + weeks / DateTimeConstants.MILLIS_PER_DAY);\n        if (days >= 7 * DateTimeConstants.MILLIS_PER_DAY) {\n            long weeksToSubtract = days / (7 * DateTimeConstants.MILLIS_PER_DAY);\n            result = result.withWeeks((int) weeksToSubtract);\n            result = result.withDays((int) (days % (7 * DateTimeConstants.MILLIS_PER_DAY)));\n        } else {\n            result = result.withDays((int) (days));\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}