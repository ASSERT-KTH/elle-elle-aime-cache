{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = 0L;\n    if (type.isSupported(DurationFieldType.weeks())) {\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    }\n    if (type.isSupported(DurationFieldType.days())) {\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    }\n    if (type.isSupported(DurationFieldType.hours())) {\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    }\n    if (type.isSupported(DurationFieldType.minutes())) {\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    }\n    if (type.isSupported(DurationFieldType.seconds())) {\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    }\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (type.isSupported(DurationFieldType.years())) {\n        if (years != 0 || months != 0) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n    } else if (type.isSupported(DurationFieldType.months())) {\n        if (years != 0 || months != 0) {\n            months = FieldUtils.safeAdd(months, years * 12);\n            result = result.withMonths(months);\n        }\n    } else if (years != 0 || months != 0) {\n        throw new UnsupportedOperationException(\"Period type does not support years or months\");\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}