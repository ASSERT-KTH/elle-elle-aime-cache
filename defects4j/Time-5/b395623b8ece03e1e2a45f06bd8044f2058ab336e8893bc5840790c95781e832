{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type,ISOChronology.getInstanceUTC());\n    \n    int years = getYears();\n    int months = getMonths();\n    \n    if (years != 0 || months != 0) {\n        // Normalize months to be between 0 and 11\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        \n        if (type.getYears() != null && years != 0) {\n            result = result.withYears(years);\n        }\n        if (type.getMonths() != null && months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    \n    // Normalize weeks and days\n    int weeks = getWeeks();\n    int days = getDays();\n    if (weeks != 0 || days != 0) {\n        weeks = FieldUtils.safeAdd(weeks, days / 7);\n        days = days % 7;\n        \n        if (type.getWeeks() != null && weeks != 0) {\n            result = result.withWeeks(weeks);\n        }\n        if (type.getDays() != null && days != 0) {\n            result = result.withDays(days);\n        }\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}