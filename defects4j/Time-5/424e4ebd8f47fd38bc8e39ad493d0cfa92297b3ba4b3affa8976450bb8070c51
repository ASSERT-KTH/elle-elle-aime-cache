{
    "generation": "/**\n * Normalizes this period using standard rules, assuming a 12 month year,\n * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n * providing control over how the result is split into fields.\n * \n * @param type  the period type of the new period, null means standard type\n * @return a normalized period equivalent to this period\n * @throws ArithmeticException if any field is too large to be represented\n * @throws UnsupportedOperationException if this period contains non-zero\n *  years or months but the specified period type does not support them\n * @since 1.5\n */\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    \n    // Check if years and months are supported by the period type\n    if ((getYears()!= 0 || getMonths()!= 0) \n            &&!type.isSupported(DurationFieldType.years()) \n            &&!type.isSupported(DurationFieldType.months())) {\n        throw new UnsupportedOperationException(\"Field is not supported\");\n    }\n    \n    long millis = getMillis();  \n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    int years = getYears();\n    int months = getMonths();\n    if (years!= 0 || months!= 0) {\n        // Normalize months to years if years are supported by the period type\n        if (type.isSupported(DurationFieldType.years())) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n        }\n        if (years!= 0 && type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        }\n        if (months!= 0 && type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        }\n    }\n    \n    // Normalize weeks to days if weeks are not supported by the period type\n    if (getWeeks()!= 0 &&!type.isSupported(DurationFieldType.weeks())) {\n        int days = FieldUtils.safeAdd(getDays(), getWeeks() * 7);\n        result = result.withDays(days).withWeeks(0);\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}