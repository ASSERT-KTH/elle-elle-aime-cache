{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // Calculate total months first\n    int years = getYears();\n    int months = getMonths();\n    int totalMonths = years * 12 + months;\n    \n    // Calculate remaining fields in millis\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    // Create period with millis\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    // If the type supports months, add them back\n    if (totalMonths != 0) {\n        if (!type.isSupported(DurationFieldType.months()) && totalMonths != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        result = result.withMonths(totalMonths);\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}