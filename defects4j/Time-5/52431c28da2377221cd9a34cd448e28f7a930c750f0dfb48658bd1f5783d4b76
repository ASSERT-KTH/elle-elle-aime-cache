{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    // Create an intermediate period with all fields\n    Period result = new Period(millis, PeriodType.standard(), ISOChronology.getInstanceUTC());\n    \n    int years = getYears();\n    int months = getMonths();\n    \n    if (years != 0 || months != 0) {\n        // Normalize years and months\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        \n        // Add normalized years and months to the result\n        if (type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        } else if (years != 0) {\n            // If years are not supported, convert years to months\n            months = FieldUtils.safeAdd(months, years * 12);\n        }\n        \n        if (type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        } else if (months != 0) {\n            // If months are not supported, convert months to days\n            long days = (long) months * 30;  // Approximation: 1 month = 30 days\n            result = result.plusDays(Math.toIntExact(days));\n        }\n    }\n    \n    // Convert the result to the specified period type\n    return result.normalizedStandard(type);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}