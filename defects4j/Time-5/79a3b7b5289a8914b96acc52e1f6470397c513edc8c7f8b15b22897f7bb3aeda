{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        \n        // Initialize the new period with the same fields as the original\n        long millis = getMillis();\n        int years = getYears();\n        int months = getMonths();\n        int weeks = getWeeks();\n        int days = getDays();\n        int hours = getHours();\n        int minutes = getMinutes();\n        int seconds = getSeconds();\n\n        // Normalize months to be between 0 and 11\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n\n        // Normalize weeks and days\n        if (type.getWeeks()) {\n            days = FieldUtils.safeAdd(days, weeks * DateTimeConstants.DAYS_PER_WEEK);\n            weeks = 0;\n        }\n\n        // Normalize days and hours\n        if (type.getDays()) {\n            hours = FieldUtils.safeAdd(hours, days * DateTimeConstants.HOURS_PER_DAY);\n            days = 0;\n        }\n\n        // Normalize hours and minutes\n        if (type.getHours()) {\n            minutes = FieldUtils.safeAdd(minutes, hours * DateTimeConstants.MINUTES_PER_HOUR);\n            hours = 0;\n        }\n\n        // Normalize minutes and seconds\n        if (type.getMinutes()) {\n            seconds = FieldUtils.safeAdd(seconds, minutes * DateTimeConstants.SECONDS_PER_MINUTE);\n            minutes = 0;\n        }\n\n        // Normalize seconds and millis\n        if (type.getSeconds()) {\n            millis += seconds * DateTimeConstants.MILLIS_PER_SECOND;\n            seconds = 0;\n        }\n\n        // Create the result period\n        Period result = new Period(millis, years, months, weeks, days, hours, minutes, seconds, type);\n        \n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}