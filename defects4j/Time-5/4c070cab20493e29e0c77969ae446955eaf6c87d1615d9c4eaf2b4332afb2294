{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n\n        // Check for unsupported fields\n        if ((getYears() != 0 && !type.isSupported(DurationFieldType.years())) ||\n            (getMonths() != 0 && !type.isSupported(DurationFieldType.months())) ||\n            (getWeeks() != 0 && !type.isSupported(DurationFieldType.weeks())) ||\n            (getDays() != 0 && !type.isSupported(DurationFieldType.days())) ||\n            (getHours() != 0 && !type.isSupported(DurationFieldType.hours())) ||\n            (getMinutes() != 0 && !type.isSupported(DurationFieldType.minutes())) ||\n            (getSeconds() != 0 && !type.isSupported(DurationFieldType.seconds())) ||\n            (getMillis() != 0 && !type.isSupported(DurationFieldType.millis()))) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n\n        long millis = getMillis(); // Start with the milliseconds\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n\n        if (years != 0 || months != 0) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n\n            if (type.isSupported(DurationFieldType.years()) && years != 0) {\n                result = result.withYears(years);\n            }\n            if (type.isSupported(DurationFieldType.months()) && months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}