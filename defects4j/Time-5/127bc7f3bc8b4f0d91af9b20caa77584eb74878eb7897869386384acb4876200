{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    \n    // First validate all non-zero fields are supported\n    if (getYears() != 0 && !type.isSupported(DurationFieldType.years())) {\n        throw new UnsupportedOperationException(\"Period contains years but period type does not support years\");\n    }\n    if (getMonths() != 0 && !type.isSupported(DurationFieldType.months())) {\n        throw new UnsupportedOperationException(\"Period contains months but period type does not support months\");\n    }\n    \n    // Handle years and months first\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (type.isSupported(DurationFieldType.years())) {\n            months += years * 12;\n        }\n    }\n    \n    // Handle remaining fields\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    // Add normalized months if needed\n    if (months != 0 && type.isSupported(DurationFieldType.months())) {\n        result = result.withMonths(months);\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}