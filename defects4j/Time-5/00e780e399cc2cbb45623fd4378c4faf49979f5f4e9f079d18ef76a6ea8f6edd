{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUE's\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        // Create period with requested type and convert millis into the appropriate units\n        Chronology chrono = ISOChronology.getInstanceUTC();\n        long years = millis / DateTimeConstants.MILLIS_PER_YEAR;\n        millis %= DateTimeConstants.MILLIS_PER_YEAR;\n        long months = millis / DateTimeConstants.MILLIS_PER_MONTH;\n        millis %= DateTimeConstants.MILLIS_PER_MONTH;\n\n        // Check if period type supports years or months, throw exception if not\n        if (!type.isSupported(DurationFieldType.years()) && years != 0) {\n            throw new UnsupportedOperationException(\"Field 'years' is not supported by the specified period type\");\n        }\n        if (!type.isSupported(DurationFieldType.months()) && months != 0) {\n            throw new UnsupportedOperationException(\"Field 'months' is not supported by the specified period type\");\n        }\n\n        // Adjust months if years are present\n        years += months / 12;\n        months %= 12;\n\n        // Adjust mistake in previous conversion\n        months += daysToStandardMonths(millis, chrono);\n        millis = daysToStandardDays(millis, chrono);\n\n        Period result = new Period(millis, type, chrono);\n        result = result.withMonths(months);\n\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n\n        return result;\n    }\n\n    // Helper functions to convert days to standard months and vice versa\n    private long daysToStandardMonths(long days, Chronology chrono) {\n        return (days / chrono.days().getAverageValues().getAverageMillisPerMonth());\n    }\n\n    private long daysToStandardDays(long days, Chronology chrono) {\n        return (days % chrono.days().getAverageValues().getAverageMillisPerMonth());\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}