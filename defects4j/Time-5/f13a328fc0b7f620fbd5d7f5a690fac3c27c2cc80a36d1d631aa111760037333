{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    // Create a new period with the calculated millis and the specified type\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    // Handle years and months normalization\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        // Check if the period type supports years and months\n        if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            \n            // Only set years if the type supports it\n            if (years != 0 && type.isSupported(DurationFieldType.years())) {\n                result = result.withYears(years);\n            }\n            // Only set months if the type supports it\n            if (months != 0 && type.isSupported(DurationFieldType.months())) {\n                result = result.withMonths(months);\n            }\n        } else {\n            // If the type doesn't support years or months, convert them to months\n            int totalMonths = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n            if (type.isSupported(DurationFieldType.months())) {\n                result = result.withMonths(totalMonths);\n            }\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}