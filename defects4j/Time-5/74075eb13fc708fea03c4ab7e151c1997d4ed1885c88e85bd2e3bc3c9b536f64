{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        \n        if (type.getYears() != null) {\n            result = result.withYears(years);\n        }\n        if (type.getMonths() != null) {\n            result = result.withMonths(months);\n        }\n    }\n    \n    if (type.getWeeks() != null && getWeeks() != 0) {\n        result = result.withWeeks(getWeeks());\n    }\n    \n    if (type.getDays() != null && getDays() != 0) {\n        result = result.withDays(getDays());\n    }\n    \n    if (type.getHours() != null && getHours() != 0) {\n        result = result.withHours(getHours());\n    }\n    \n    if (type.getMinutes() != null && getMinutes() != 0) {\n        result = result.withMinutes(getMinutes());\n    }\n    \n    if (type.getSeconds() != null && getSeconds() != 0) {\n        result = result.withSeconds(getSeconds());\n    }\n    \n    if (type.getMillis() != null && getMillis() != 0) {\n        result = result.withMillis(getMillis());\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}