{
    "generation": "    /**\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     */\n    private static int greatestCommonDivisor(int u, int v) {\n        if (u == 0 || v == 0) {\n            throw new ArithmeticException(\"Cannot compute GCD of zero\");\n        }\n\n        // Handle special case for Integer.MIN_VALUE to prevent overflow\n        if (u == Integer.MIN_VALUE && v == Integer.MIN_VALUE) {\n            return Integer.MIN_VALUE; // GCD is the absolute largest value\n        }\n\n        // Make u and v absolute values, avoiding overflow for Integer.MIN_VALUE\n        u = Math.abs(u);\n        v = Math.abs(v);\n\n        // From Commons Math: if either operand is 1, return 1\n        if (u == 1 || v == 1) {\n            return 1;\n        }\n\n        // B1. Find greatest power of 2 that divides both u and v\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n            u >>>= 1; // Divide u by 2\n            v >>>= 1; // Divide v by 2\n            k++;      // Keep track of the number of divisions\n        }\n\n        // Handle overflow case if both values are divisible by 2 more than 31 times\n        if (k == 31) {\n            throw new ArithmeticException(\"Overflow: GCD is 2^31\");\n        }\n\n        // B2. Make u odd (ensure at least one number is odd)\n        while ((u & 1) == 0) {\n            u >>>= 1;\n        }\n\n        // B3. Execute the iterative GCD steps\n        do {\n            while ((v & 1) == 0) { // Make v odd\n                v >>>= 1;\n            }\n\n            // Replace the larger number with their absolute difference\n            if (u > v) {\n                int temp = u;\n                u = v;\n                v = temp;\n            }\n\n            v = v - u; // Always positive because u <= v\n        } while (v != 0);\n\n        // GCD is u multiplied by 2^k\n        return u << k;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}