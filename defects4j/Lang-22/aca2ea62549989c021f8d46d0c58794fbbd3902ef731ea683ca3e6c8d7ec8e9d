{
    "generation": "    private static int greatestCommonDivisor(int u, int v) {\n        // If either operand is abs 1, return 1:\n        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n            return 1;\n        }\n        // Handle special case for Integer.MIN_VALUE to avoid overflow:\n        if (u == Integer.MIN_VALUE && (v & 1) == 0) {\n            v = Math.abs(v / 2);\n            return greatestCommonDivisor(Integer.MIN_VALUE / 2, v);\n        }\n        if (v == Integer.MIN_VALUE && (u & 1) == 0) {\n            u = Math.abs(u / 2);\n            return greatestCommonDivisor(u, Integer.MIN_VALUE / 2);\n        }\n        // Keep u and v negative to avoid overflow from -2^31:\n        if (u > 0) {\n            u = -u;\n        }\n        if (v > 0) {\n            v = -v;\n        }\n\n        // B1. Find power of 2\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        if (k == 31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n\n        // B2. At least one of u or v is now odd.\n        int t = ((u & 1) == 1) ? v : -(u / 2);\n\n        // Begin the main loop.\n        do {\n            // B4. Cast out twos from t.\n            while ((t & 1) == 0) { // while t is even...\n                t /= 2;\n            }\n\n            // B5. Reset max(u, v).\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n\n            // B6. Set t to (v - u) / 2.\n            t = (v - u) / 2;\n        } while (t != 0);\n\n        // Return gcd as u * 2^k.\n        return -u * (1 << k);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}