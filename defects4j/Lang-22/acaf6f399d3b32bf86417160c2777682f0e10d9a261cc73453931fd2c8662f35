{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    // if either operand is 0 or both are equal, return the absolute value of the non-zero operand\n    if (u == 0) return Math.abs(v);\n    if (v == 0) return Math.abs(u);\n    if (u == v) return Math.abs(u);\n    \n    // Make u and v positive\n    u = Math.abs(u);\n    v = Math.abs(v);\n    \n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...\n        u >>= 1; // equivalent to u /= 2\n        v >>= 1; // equivalent to v /= 2\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    while ((u & 1) == 0) { // make u odd\n        u >>= 1;\n    }\n    \n    // From this point, u is always odd.\n    do {\n        while ((v & 1) == 0) { // make v odd\n            v >>= 1;\n        }\n        \n        // B5 [reset max(u,v)]\n        if (u > v) {\n            // Swap u and v so that u <= v.\n            int temp = u; \n            u = v; \n            v = temp;\n        }\n        \n        // Now v >= u and v - u is non-negative.\n        v = v - u; // Here v becomes even, which will be divided again in the next loop iteration.\n    } while (v != 0);\n    \n    return u << k; // gcd is u * 2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}