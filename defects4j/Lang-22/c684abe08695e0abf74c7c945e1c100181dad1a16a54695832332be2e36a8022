{
    "generation": "    private static int greatestCommonDivisor(int u, int v) {\n        if (u == 0 || v == 0) {\n            throw new ArithmeticException(\"GCD is undefined for zero values\");\n        }\n        \n        // Use absolute values to handle negative inputs properly\n        u = Math.abs(u);\n        v = Math.abs(v);\n\n        // Edge case: prevent overflow when negating Integer.MIN_VALUE\n        if (u == Integer.MIN_VALUE && v == Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"overflow: GCD cannot be computed accurately\");\n        }\n\n        // Apply binary GCD algorithm\n        int shift;\n        for (shift = 0; ((u | v) & 1) == 0; shift++) { // u and v both even\n            u >>= 1;\n            v >>= 1;\n        }\n\n        while ((u & 1) == 0) { // u is even\n            u >>= 1;\n        }\n\n        do {\n            while ((v & 1) == 0) { // v is even\n                v >>= 1;\n            }\n\n            if (u > v) { // Swap if necessary\n                int temp = u;\n                u = v;\n                v = temp;\n            }\n\n            v = v - u; // Here v >= u so v - u >= 0\n        } while (v != 0);\n\n        return u << shift; // Multiply back by the powers of 2\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}