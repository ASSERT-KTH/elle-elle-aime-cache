{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    if (u == 0 || v == 0) {\n        throw new ArithmeticException(\"GCD is undefined for zero input.\");\n    }\n    u = Math.abs(u);\n    v = Math.abs(v);\n\n    // From Commons Math:\n    // if either operand is abs 1, return 1:\n    if (u == 1 || v == 1) {\n        return 1;\n    }\n\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...\n        u /= 2; v /= 2; k++; // cast out twos.\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    int t = ((u & 1) == 1) ? v : -(u / 2); // B3\n\n    do {\n        // B4/B3: cast out twos from t.\n        while ((t & 1) == 0) { // while t is even..\n            t /= 2; // cast out twos\n        }\n\n        // B5 [reset max(u,v)]\n        if (t > 0) {\n            u = t;\n        } else {\n            v = -t;\n        }\n        // B6/B3. at this point both u and v should be odd.\n        t = (v - u) / 2;\n        // |u| larger: t positive (replace u)\n        // |v| larger: t negative (replace v)\n    } while (t != 0);\n\n    return u * (1 << k); // gcd is u*2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}