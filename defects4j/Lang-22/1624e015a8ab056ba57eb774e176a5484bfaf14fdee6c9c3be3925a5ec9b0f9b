{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    // handle the edge cases for zero\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n    \n    // if either operand is abs 1, return 1:\n    if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n        return 1;\n    }\n    \n    // Keep track of sign separately; only use absolute values for calculations\n    u = Math.abs(u);\n    v = Math.abs(v);\n    \n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0) { // while u and v are both even...\n        u >>= 1;\n        v >>= 1;\n        k++; // cast out twos.\n    }\n    \n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    int t = (u & 1) == 1 ? v : u;\n    \n    // t will take the absolute value\n    do {\n        // B4/B3: cast out twos from t\n        while ((t & 1) == 0) {\n            t >>= 1;\n        }\n        \n        // B5 [reset max(u,v)]\n        if (u > t) { // replace u with t if |u| > |v|\n            int tmp = t;\n            t = u;\n            u = tmp;\n        }\n        \n        // B6/B3. at this point both u and t are odd, set t = |v| - |u| \n        t -= u; // |v| larger: t positive (replace v)\n        \n    } while (t != 0);\n    \n    return u << k; // gcd is u*2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}