{
    "generation": "// Fixed implementation of the greatestCommonDivisor function\nprivate static int greatestCommonDivisor(int u, int v) {\n    if (u == 0) {\n        return Math.abs(v);\n    }\n    if (v == 0) {\n        return Math.abs(u);\n    }\n\n    // Use absolute values for calculation to avoid negative issues\n    u = Math.abs(u);\n    v = Math.abs(v);\n\n    // B1. [Find power of 2]\n    int k = 0;\n    // While u and v are both even, cast out twos\n    while ((u & 1) == 0 && (v & 1) == 0) {\n        u >>= 1;\n        v >>= 1;\n        k++;\n    }\n\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd\n    // Make sure u is odd\n    while ((u & 1) == 0) {\n        u >>= 1;\n    }\n\n    do {\n        // Make sure v is odd\n        while ((v & 1) == 0) {\n            v >>= 1;\n        }\n\n        // B5 [reset max(u, v)]\n        // Both u and v are odd now\n        if (u > v) {\n            int temp = u;\n            u = v;\n            v = temp;\n        }\n\n        v = v - u;\n    } while (v != 0);\n\n    return u << k; // gcd is u * 2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}