{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    // Handle special cases where either u or v is 0\n    if (u == 0) return Math.abs(v);\n    if (v == 0) return Math.abs(u);\n    \n    // Convert to positive to handle negative numbers correctly\n    u = Math.abs(u);\n    v = Math.abs(v);\n    \n    // Find the greatest power of 2 that divides both u and v\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u >>= 1;\n        v >>= 1;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    \n    // Make u odd\n    while ((u & 1) == 0) {\n        u >>= 1;\n    }\n    \n    // Main loop\n    while (v != 0) {\n        // Make v odd\n        while ((v & 1) == 0) {\n            v >>= 1;\n        }\n        \n        // Now u and v are both odd, swap if necessary to make u <= v\n        if (u > v) {\n            int temp = u;\n            u = v;\n            v = temp;\n        }\n        \n        // Subtract u from v\n        v -= u;\n    }\n    \n    // Restore the common factors of 2\n    return u << k;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}