{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    // From Commons Math:\n    // If either operand is abs 1, return 1:\n    if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n        return 1;\n    }\n    // Keep u and v non-negative\n    if (u < 0) { u = -u; }\n    if (v < 0) { v = -v; }\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && u != 0 && v != 0) {\n        u >>= 1;\n        v >>= 1;\n        k++;\n    }\n    if (u == 0) {\n        return v << k;\n    }\n    if (v == 0) {\n        return u << k;\n    }\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    int t = ((u & 1) == 1) ? v : u;\n    do {\n        // B4/B3: cast out twos from t.\n        while ((t & 1) == 0) {\n            t >>= 1;\n        }\n        // B5 [reset max(u,v)]\n        if (u > t) {\n            u -= t;\n        } else {\n            int temp = u;\n            u = t - u;\n            t = temp;\n        }\n        t = u;\n    } while (t != 0);\n    return v << k; // gcd is v*2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}