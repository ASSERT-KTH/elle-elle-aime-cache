{
    "generation": "    private static int greatestCommonDivisor(int u, int v) {\n        // If either operand is absolute 1, return 1, GCD cannot go below 1\n        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n            return 1;\n        }\n        // Keep u and v negative to handle edge cases like Integer.MIN_VALUE\n        if (u > 0) u = -u; // make u negative\n        if (v > 0) v = -v; // make v negative\n\n        // Special case to handle Integer.MIN_VALUE to avoid overflow\n        if (u == Integer.MIN_VALUE && v == 0) return Integer.MIN_VALUE;\n        if (v == Integer.MIN_VALUE && u == 0) return Integer.MIN_VALUE;\n\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        if (k == 31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n\n        // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n        while (u != 0) {\n            while ((u & 1) == 0) { // remove all factors of 2 from u\n                u /= 2;\n            }\n            while ((v & 1) == 0) { // remove all factors of 2 from v\n                v /= 2;\n            }\n\n            // Subtract smaller from larger\n            if (u > v) {\n                int temp = u;\n                u = v;\n                v = temp;\n            }\n            v = v - u; // v now holds the difference\n        }\n\n        return -u * (1 << k); // gcd is u * 2^k\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}