{
    "generation": "    private static int greatestCommonDivisor(int u, int v) {\n        if (u == 0 || v == 0) {\n            throw new ArithmeticException(\"Cannot compute GCD for zero.\");\n        }\n\n        u = Math.abs(u);\n        v = Math.abs(v);\n\n        if (u == v) {\n            return u;\n        }\n\n        if (u == 1 || v == 1) {\n            return 1;\n        }\n\n        // Use the \"binary GCD\" algorithm\n        int shift;\n        for (shift = 0; ((u | v) & 1) == 0; ++shift) {\n            u >>= 1;\n            v >>= 1;\n        }\n\n        while ((u & 1) == 0) {\n            u >>= 1;\n        }\n\n        do {\n            while ((v & 1) == 0) {\n                v >>= 1;\n            }\n\n            if (u > v) {\n                int temp = u;\n                u = v;\n                v = temp;\n            }\n\n            v = v - u;\n        } while (v != 0);\n\n        return u << shift;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}