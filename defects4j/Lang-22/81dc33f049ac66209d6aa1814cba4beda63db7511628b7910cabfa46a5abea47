{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    // From Commons Math:\n    // if either operand is abs 1, return 1:\n    if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n        return 1;\n    }\n    // Keep u and v non-negative to avoid overflow issues with negation\n    u = Math.abs(u);\n    v = Math.abs(v);\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...\n        u >>= 1;\n        v >>= 1;\n        k++; // cast out twos.\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B2. Initialize: u and v have been divided by 2^k and at least\n    //     one is odd.\n    while (u != v) {\n        if (u > v) {\n            u -= v;\n        } else {\n            v -= u;\n        }\n        // B3. [Divide out powers of 2]\n        while ((u & 1) == 0) {\n            u >>= 1;\n        }\n        while ((v & 1) == 0) {\n            v >>= 1;\n        }\n    }\n    return u * (1 << k); // gcd is u*2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}