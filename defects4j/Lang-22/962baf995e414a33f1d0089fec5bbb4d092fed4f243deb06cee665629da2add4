{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    // From Commons Math:\n    //if either operand is abs 1, return 1:\n    if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n        return 1;\n    }\n\n    // Keep u and v negative, as negative integers range down to\n    // -2^31, while positive numbers can only be as large as 2^31-1\n    if (u > 0) {\n        u = -u;\n    }\n    if (v > 0) {\n        v = -v;\n    }\n\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n        u /= 2;\n        v /= 2;\n        k++;\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n\n    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n    int t = (u & 1) == 1 ? v : -(u / 2);\n\n    do {\n        while ((t & 1) == 0) {\n            t /= 2;\n        }\n\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        t = (v - u) / 2;\n    } while (t != 0);\n\n    // The previous version directly used -u * (1 << k) which could overflow\n    // We need to handle the multiplication more carefully\n    u = -u;\n    return k > 0 ? u << k : u;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}