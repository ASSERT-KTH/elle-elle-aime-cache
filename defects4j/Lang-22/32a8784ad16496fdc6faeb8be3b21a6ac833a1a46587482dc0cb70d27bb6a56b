{
    "generation": "    private static int greatestCommonDivisor(int u, int v) {\n        // Ensure parameters are non-zero\n        if (u == 0 || v == 0) {\n            throw new ArithmeticException(\"Zero not allowed as an argument for gcd\");\n        }\n\n        // From Commons Math:\n        // If either operand is abs 1, return 1:\n        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n            return 1;\n        }\n\n        // Keep u and v positive to avoid issues with two's complement\n        u = Math.abs(u);\n        v = Math.abs(v);\n\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...\n            u >>>= 1; // Divide by 2\n            v >>>= 1; // Divide by 2\n            k++;      // Track power of 2\n        }\n\n        if (k == 31) {\n            throw new ArithmeticException(\"Overflow: gcd is 2^31\");\n        }\n\n        // B2. Initialize: u and v have been divided by 2^k and at least one is odd.\n        while ((u & 1) == 0) {\n            u >>>= 1;\n        }\n\n        // Perform the algorithm\n        do {\n            while ((v & 1) == 0) { // Remove factors of 2 in v\n                v >>>= 1;\n            }\n\n            if (u > v) {\n                int temp = u;\n                u = v;\n                v = temp;\n            }\n\n            v = v - u; // Subtract smaller number from larger\n        } while (v != 0);\n\n        // Restore common factor of 2\n        return u << k; // gcd is u * 2^k\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}