{
    "generation": "private static int greatestCommonDivisor(int u, int v) {\n    // From Commons Math:\n    //if either operand is abs 1, return 1:\n    if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n        return 1;\n    }\n    // Keep u and v non-negative, as positive integers range up to\n    // 2^31-1, while negative numbers can only be as large as -2^31\n    // (i.e., we can negate a positive number without overflow)\n    u = Math.abs(u);\n    v = Math.abs(v);\n    // B1. [Find power of 2]\n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...\n        u >>= 1; v >>= 1; k++; // cast out twos using right shift\n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    // B2. Initialize: u and v have been divided by 2^k and at least\n    //     one is odd.\n    int t = ((u & 1) == 1) ? v : u >> 1; // B3\n    // t: u was odd, v may be even (t replaces v)\n    // t: u was even, v is odd (t replaces u)\n    do {\n        /* assert u > 0 && v > 0; */\n        // B4/B3: cast out twos from t.\n        while ((t & 1) == 0) { // while t is even..\n            t >>= 1; // cast out twos using right shift\n        }\n        // B5 [reset max(u,v)]\n        if (t > 0) {\n            if (u < t) {\n                u = t;\n            } else {\n                u -= t;\n            }\n        } else {\n            if (v < -t) {\n                v = -t;\n            } else {\n                v += t;\n            }\n        }\n        // B6/B3. at this point both u and v should be odd.\n        t = (u < v) ? -((v - u) >> 1) : (u - v) >> 1;\n        // |u| smaller: t negative (replace v)\n        // |v| smaller: t positive (replace u)\n    } while (t != 0);\n    return u << k; // gcd is u*2^k\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}