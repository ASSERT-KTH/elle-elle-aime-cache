{
    "generation": "/**\n * Computes the GEN and KILL set.\n *\n * @param n Root node.\n * @param gen Local variables that are live because of the instruction at\n *        {@code n} will be added to this set.\n * @param kill Local variables that are killed because of the instruction at\n *        {@code n} will be added to this set.\n * @param conditional {@code true} if any assignments encountered are\n *        conditionally executed. These assignments might not kill a variable.\n */\nprivate void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            lhs = lhs.getLastChild();\n          }\n          // Fix: Handle non-name LHS (e.g., a[1] in the test case)\n          if (NodeUtil.isName(lhs) || NodeUtil.isGetProp(lhs)) {\n            addToSetIfLocal(lhs, kill);\n            addToSetIfLocal(lhs, gen);\n          } else {\n            // Traverse the LHS to find names that might be killed or generated\n            traverseLHSForGenKill(lhs, gen, kill);\n          }\n          computeGenKill(rhs, gen, kill, conditional);\n        }\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Assume both sides are conditional.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          if (!NodeUtil.isAssign(n)) {\n            // assignments such as a += 1 reads a.\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }\n\n// New method to traverse the LHS for GEN/KILL sets when it's not a simple name\nprivate void traverseLHSForGenKill(Node lhs, BitSet gen, BitSet kill) {\n  switch (lhs.getType()) {\n    case Token.GETPROP:\n      Node obj = lhs.getFirstChild();\n      if (NodeUtil.isName(obj) || NodeUtil.isGetProp(obj)) {\n        traverseLHSForGenKill(obj, gen, kill);\n      }\n      // FALL THROUGH to handle the property name\n    case Token.STRING:\n    case Token.NUMBER:\n      // Property access, do not add to GEN/KILL sets\n      break;\n    default:\n      throw new IllegalStateException(\"Unexpected LHS type: \" + lhs.getType());\n  }\n  // Add the LHS to the GEN set if it's a local variable\n  addToSetIfLocal(lhs, gen);\n  // Add the LHS to the KILL set if it's a local variable and not conditional\n  if (!conditional) {\n    addToSetIfLocal(lhs, kill);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}