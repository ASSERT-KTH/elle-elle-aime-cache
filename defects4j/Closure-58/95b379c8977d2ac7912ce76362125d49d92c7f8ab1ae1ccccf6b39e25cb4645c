{
    "generation": "  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      // ... (other cases here) ...\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            lhs = lhs.getLastChild();\n          } else if(NodeUtil.isName(lhs)) {\n            // for(a in y) or for(a[1] in y)\n            // Do nothing, it's already a name\n          } else {\n            // for(a[1] = something in y)\n            // We need to find the actual variable name\n            while (!NodeUtil.isName(lhs)) {\n              lhs = lhs.getFirstChild();\n            }\n          }\n            addToSetIfLocal(lhs, kill);\n            addToSetIfLocal(lhs, gen);\n          computeGenKill(rhs, gen, kill, conditional);\n        }\n        return;\n\n      // ... (other cases here) ...\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}