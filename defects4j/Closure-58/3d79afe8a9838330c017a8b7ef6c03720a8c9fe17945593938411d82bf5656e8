{
    "generation": "/**\n * ...\n */\nprivate void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n  switch (n.getType()) {\n    case Token.SCRIPT:\n    case Token.BLOCK:\n    case Token.FUNCTION:\n      return;\n\n    case Token.WHILE:\n    case Token.DO:\n    case Token.IF:\n      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n          conditional);\n      return;\n\n    case Token.FOR:\n      if (!NodeUtil.isForIn(n)) {\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n      } else {\n        // for(x in y) {...}\n        Node lhs = n.getFirstChild();\n        Node rhs = lhs.getNext();\n        if (NodeUtil.isVar(lhs)) {\n          // for(var x in y) {...}\n          lhs = lhs.getLastChild();\n        }\n        if (!NodeUtil.isName(lhs)) {\n          computeGenKill(lhs, gen, kill, conditional);\n        } else {\n          addToSetIfLocal(lhs, kill);\n          addToSetIfLocal(lhs, gen);\n        }\n        computeGenKill(rhs, gen, kill, conditional);\n      }\n      return;\n\n    //...rest of the code...\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}