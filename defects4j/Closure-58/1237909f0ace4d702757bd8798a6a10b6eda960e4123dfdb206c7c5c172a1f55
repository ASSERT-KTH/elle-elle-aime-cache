{
    "generation": "private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n  // ...\n  case Token.FOR:\n    if (!NodeUtil.isForIn(n)) {\n      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n    } else {\n      // for(x in y) {...}\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (NodeUtil.isName(lhs)) {\n        // for(var x in y) {...} or for(x in y)\n        if (NodeUtil.isVar(lhs.getParent())) {\n          lhs = lhs.getParent();\n        }\n      } else if (NodeUtil.isArrayPatternElement(lhs) && NodeUtil.isName(lhs.getLastChild())) {\n        // for([x] in y)\n        lhs = lhs.getLastChild();\n      } else if (NodeUtil.isObjectPatternElement(lhs) && NodeUtil.isEmptyPattern(lhs.getLastChild())) {\n        // for({x: {}} in y)\n        lhs = lhs.getFirstChild();\n      }\n\n      addVariableToSet(lhs, kill);\n      addVariableToSet(lhs, gen);\n      computeGenKill(rhs, gen, kill, conditional);\n    }\n    return;\n  // ...\n}\n\nprivate void addVariableToSet(Node node, BitSet set) {\n  if (NodeUtil.isName(node)) {\n    addToSetIfLocal(node, set);\n  } else if (NodeUtil.isArrayPatternElement(node) && NodeUtil.isName(node.getLastChild())) {\n    // ArrayPatternElement case: [x]\n    addToSetIfLocal(node.getLastChild(), set);\n  } else if (NodeUtil.isObjectPatternElement(node) && NodeUtil.isEmptyPattern(node.getLastChild())) {\n    // ObjectPatternElement case: {x: {}}\n    addToSetIfLocal(node.getFirstChild(), set);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}