{
    "generation": "/**\n * Generate a random sample from the distribution.\n *\n * @param sampleSize the number of random values to generate.\n * @return an array representing the random sample.\n * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n * positive.\n */\npublic T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n    if (sampleSize <= 0) {\n        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                sampleSize);\n    }\n\n    final T[] out = (T[]) java.lang.reflect.Array.newInstance(getClassOfT(), sampleSize);\n\n    for (int i = 0; i < sampleSize; i++) {\n        out[i] = sample();\n    }\n\n    return out;\n}\n\n// Add the following method to infer the class of T at runtime\nprivate Class<?> getClassOfT() {\n    if (singletons.isEmpty()) {\n        throw new RuntimeException(\"Cannot infer the class of T from an empty list of singletons.\");\n    }\n    return getCommonSuperclass(singletons.stream().map(Object::getClass).toArray(Class[]::new));\n}\n\n// Helper method to get the common superclass of an array of classes\nprivate Class<?> getCommonSuperclass(Class<?>[] classes) {\n    Class<?> commonSuperclass = classes[0];\n    for (int i = 1; i < classes.length; i++) {\n        while (!commonSuperclass.isAssignableFrom(classes[i])) {\n            commonSuperclass = commonSuperclass.getSuperclass();\n            if (commonSuperclass.equals(Object.class)) {\n                return Object.class;\n            }\n        }\n    }\n    return commonSuperclass;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}