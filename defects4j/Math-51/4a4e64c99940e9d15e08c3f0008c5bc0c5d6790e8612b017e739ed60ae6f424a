{
    "generation": "protected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    if (f0 * f1 > 0.0) {\n        throw new NoBracketingException(x0, x1, f0, f1);\n    }\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Keep track of inverted intervals.\n    boolean inverted = f0 > f1;\n\n    // Keep finding better approximations.\n    int maxIterations = 3624;\n    for (int iter = 0; iter < maxIterations; iter++) {\n        // Calculate the next approximation.\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n\n        // If the new approximation is the exact root, return it.\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Update the bounds with the new approximation.\n        if (f0 * fx < 0) {\n            x1 = x;\n            f1 = fx;\n        } else {\n            x0 = x;\n            f0 = fx;\n        }\n\n        // If the function value of the last approximation is too small,\n        // return the approximation.\n        if (Math.abs(f1) <= ftol || Math.abs(x1 - x0) < Math.max(rtol * Math.abs(x1), atol)) {\n            return x1;\n        }\n    }\n\n    // If we have exhaust all iterations, throw an exception.\n    throw new TooManyEvaluationsException(maxIterations);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}