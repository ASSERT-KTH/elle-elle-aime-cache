{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Keep track of inverted intervals.\n    boolean inverted = false;\n\n    while (true) {\n        // Calculate the next approximation.\n        double denominator = f1 - f0;\n        if (denominator == 0.0) {\n            // Avoid division by zero; cannot proceed.\n            throw new MathIllegalStateException(LocalizedFormats.ZERO_DENOMINATOR);\n        }\n        double x = x1 - ((f1 * (x1 - x0)) / denominator);\n        double fx = computeObjectiveValue(x);\n\n        // If the new approximation is the exact root, return it.\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Determine which subinterval to keep.\n        if (f1 * fx < 0) {\n            // The root is between x and x1.\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            // The root is between x0 and x.\n            // Apply the Illinois method: halve f0 to accelerate convergence.\n            f0 *= 0.5;\n        }\n        x1 = x;\n        f1 = fx;\n\n        // Check convergence based on function value.\n        if (Math.abs(f1) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Check convergence based on interval size.\n        if (Math.abs(x1 - x0) < Math.max(rtol * Math.abs(x1), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}