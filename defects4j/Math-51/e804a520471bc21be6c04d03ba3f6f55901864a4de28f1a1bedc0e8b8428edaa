{
    "generation": "protected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution\n    verifyBracketing(x0, x1);\n\n    // Get accuracies\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Keep track of inverted intervals\n    boolean inverted = false;\n\n    // Track previous f0 and f1 to prevent stagnation\n    double prevF0 = f0;\n    double prevF1 = f1;\n\n    // Keep finding better approximations\n    while (true) {\n        // Calculate the next approximation\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n\n        // If the new approximation is the exact root, return it\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Update the bounds with the new approximation\n        if (f1 * fx < 0) {\n            // f(x1) and f(x) have opposite signs; interval [x0, x1] becomes [x, x1]\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            // f(x0) and f(x) have opposite signs; interval [x0, x1] becomes [x0, x]\n            switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                default:\n                    // In case of unrecognized method, default to no scaling\n                    break;\n            }\n        }\n\n        // Ensure bounds are updated to avoid stagnation in evaluations\n        if (FastMath.abs(f0 - prevF0) < ftol && FastMath.abs(f1 - prevF1) < ftol) {\n            f0 *= 0.5;\n        }\n\n        // Update from [x0, x1] to [x0, x]\n        x1 = x;\n        f1 = fx;\n\n        // Record previous f0 and f1\n        prevF0 = f0;\n        prevF1 = f1;\n\n        // Check convergence criteria for function value\n        if (FastMath.abs(f1) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Check convergence criteria for interval size\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}