{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    boolean inverted = false;\n\n    while (true) {\n        double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        double fx = computeObjectiveValue(x);\n\n        if (fx == 0.0) {\n            return x;\n        }\n\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else if (f0 * fx < 0) {\n            f1 = fx;\n        } else {\n            // Update formula cannot make any progress.\n            // Break out of the current iteration and update one of the bounds.\n            break;\n        }\n\n        x1 = x;\n        f1 = fx;\n\n        if (FastMath.abs(f1) <= ftol) {\n            // ... (rest of the code)\n        }\n\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            // ... (rest of the code)\n        }\n    }\n\n    // Update one of the bounds.\n    if (FastMath.abs(x1 - x0) < atol) {\n        throw new TooManyEvaluationsException(getMaxEvaluations(), atol);\n    } else {\n        x0 = x1;\n        f0 = f1;\n        x1 = x0 + (inverted ? -atol : atol);\n        f1 = computeObjectiveValue(x1);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}