{
    "generation": "  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return evaluatesToLocalValue(value.getLastChild(), locals)\n            || (locals.apply(value.getFirstChild())\n                && evaluatesToLocalValue(value.getFirstChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        // Pre-increment/decrement results in local value, post-increment does not.\n        return value.getBooleanProp(Node.INCRDECR_PROP);\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return false;\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value);\n      case Token.NEW:\n        // Only safe if we know it's not aliased from inside the constructor\n        return callHasLocalResult(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals or constructs known to be immutable.\n        return true;\n      case Token.IN:\n        // The \"IN\" operator results in a local boolean.\n        return true;\n      default:\n        // Other operators force a local value:\n        // \"x = '' + g\" (x is now a local string)\n        // \"x -= g\" (x is now a local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n        throw new IllegalStateException(\n            \"Unexpected expression node: \" + value +\n            \"\\n parent: \" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}