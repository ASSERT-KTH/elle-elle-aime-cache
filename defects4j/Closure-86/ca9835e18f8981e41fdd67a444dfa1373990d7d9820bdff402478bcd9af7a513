{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n        case Token.ASSIGN:\n            // Check if the value being assigned is immutable\n            return NodeUtil.isImmutableValue(value.getLastChild())\n                    || (locals.test(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals)\n                    && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n                    && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return false; // 'this' should not be considered local\n        case Token.NAME:\n            return isImmutableValue(value) || locals.test(value); // Fix locals.apply to locals.test\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // There is no information about the locality of object properties.\n            return false;\n        case Token.CALL:\n            return callHasLocalResult(value)\n                    || isToStringMethodCall(value);\n        case Token.NEW:\n            return false; // Returning a new object should not be considered local.\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals objects with non-literal children are allowed.\n            return true;\n        case Token.IN:\n            // IN operator results in a local boolean value.\n            return true;\n        default:\n            // Other operations force a local value:\n            //  x = '' + g (x is now a local string)\n            //  x -= g (x is now a local number)\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n\n            throw new IllegalStateException(\"Unexpected expression node\" + value +\n                    \"\\n parent:\" + value.getParent());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}