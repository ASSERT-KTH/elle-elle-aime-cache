{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n        case Token.ASSIGN:\n            return NodeUtil.isImmutableValue(value.getLastChild())\n                    || (locals.apply(value.getFirstChild())\n                    && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals)\n                && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n                && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return NodeUtil.isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            return false;\n        case Token.CALL:\n            return NodeUtil.callHasLocalResult(value)\n                    || NodeUtil.isToStringMethodCall(value);\n        case Token.NEW:\n            return NodeUtil.constructorHasLocalResult(value);\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            return true;\n        case Token.IN:\n            return true;\n        default:\n            return NodeUtil.isAssignmentOp(value)\n                    || NodeUtil.isSimpleOperator(value)\n                    || NodeUtil.isImmutableValue(value);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}