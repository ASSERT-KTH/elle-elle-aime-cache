{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // The value of the assignment operator is the value of its right-hand side.\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.COMMA:\n        // The value of the comma operator is the value of its right-most operand.\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        // Logical AND/OR result in a local value only if both operands evaluate to local values.\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        // Hook (ternary operator) result depends on its second and third operand.\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        // Pre-increment/decrement results in a primitive and is a local value.\n        // Post-increment/decrement depends on the property `INCRDECR_PROP`.\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return false;\n        }\n      case Token.THIS:\n        // `this` is not a local value by default unless explicitly marked by `locals`.\n        return locals.apply(value);\n      case Token.NAME:\n        // A named variable is local if it's immutable or explicitly marked as local.\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // Object property access is not a local value unless explicitly marked by `locals`.\n        return locals.apply(value);\n      case Token.CALL:\n        // A function call is local if it has no side effects and returns a local result.\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // We cannot assume \"new\" objects are local unless we specifically know they are not aliased.\n        return false;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Functions, literals, and object/array literals are always local.\n        return true;\n      case Token.IN:\n        // The `IN` operator always results in a local value (a boolean).\n        return true;\n      default:\n        // Other operators result in a local value if they're simple or involve immutable values.\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node: \" + value +\n            \"\\n parent: \" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}