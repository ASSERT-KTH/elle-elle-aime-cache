{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getSecondChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        return value.getBooleanProp(Node.INCRDECR_PROP)\n            && evaluatesToLocalValue(value.getFirstChild(), locals);\n      case Token.THIS:\n        return false; // 'this' is not local.\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        return false; // Property access cannot be determined to be local.\n      case Token.CALL:\n        return callHasLocalResult(value) || isToStringMethodCall(value);\n      case Token.NEW:\n        return callHasLocalResult(value); // Updated to ensure locality respect for \"new\".\n      case Token.FUNCTION:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        return true; // Literals and defined structures are local.\n      case Token.IN:\n        return true; // The 'in' operator results are always local.\n      default:\n        // Other operators forcing local values or immutable ones.\n        return isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}