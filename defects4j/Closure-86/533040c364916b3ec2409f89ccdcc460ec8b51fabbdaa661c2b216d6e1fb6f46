{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else if (NodeUtil.isImmutableValue(value.getFirstChild())) {\n        return true;\n      } else {\n        break;\n      }\n    case Token.THIS:\n    case Token.NAME:\n      return locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      if (callHasLocalResult(value)) {\n        return true;\n      } else if (isToStringMethodCall(value)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        break;\n      }\n    case Token.NEW:\n      return locals.apply(value);\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      return true;\n    case Token.IN:\n      return true;\n    default:\n      break;\n  }\n\n  if (isAssignmentOp(value)\n      || isSimpleOperator(value)\n      || isImmutableValue(value)) {\n    return true;\n  }\n\n  throw new IllegalStateException(\n      \"Unexpected expression node\" + value +\n      \"\\n parent:\" + value.getParent());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}