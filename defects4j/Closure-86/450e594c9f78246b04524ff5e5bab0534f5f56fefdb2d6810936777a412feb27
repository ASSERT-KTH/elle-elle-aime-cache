{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n        case Token.ASSIGN:\n            // A result that is aliased by a non-local name, is effectively the\n            // same as returning a non-local name, but this doesn't matter if the\n            // value is immutable.\n            Node right = value.getLastChild();\n            Node left = value.getFirstChild();\n            return NodeUtil.isImmutableValue(right)\n                   || (NodeUtil.isImmutableValue(left) && evaluatesToLocalValue(right, locals))\n                   || (locals.apply(left) && evaluatesToLocalValue(right, locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals)\n               && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n               && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return true; // Pre-increment/decrement is local\n            } else {\n                return false; // Post-increment/decrement is non-local\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return NodeUtil.isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // Property references are generally non-local\n            return locals.apply(value);\n        case Token.CALL:\n            return callHasLocalResult(value)\n                || isToStringMethodCall(value)\n                || locals.apply(value);\n        case Token.NEW:\n            // New objects are generally non-local unless explicitly handled\n            return callHasLocalResult(value) || locals.apply(value);\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals themselves are local\n            return true;\n        case Token.IN:\n            return true; // Comparisons always result in local boolean\n        default:\n            // Other operations force a local value\n            if (isAssignmentOp(value)\n                || isSimpleOperator(value)\n                || isImmutableValue(value)) {\n                return true;\n            }\n\n            throw new IllegalStateException(\n                \"Unexpected expression node: \" + value +\n                \"\\n parent: \" + value.getParent());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}