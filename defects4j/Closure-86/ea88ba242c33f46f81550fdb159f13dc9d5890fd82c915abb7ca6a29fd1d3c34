{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n\n      case Token.THIS:\n      case Token.ARGUMENTS:\n        return false;\n\n      case Token.NAME:\n        // A known immutable value or explicitly local name are considered local.\n        return NodeUtil.isImmutableValue(value) || locals.apply(value);\n\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // Object properties and array accesses are assumed to not be locally scoped.\n        return false;\n\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value);\n\n      case Token.NEW:\n        // A \"new\" object is not considered local unless it's immutable.\n        return false;\n\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals or functions are considered local.\n        return true;\n\n      case Token.IN:\n        return true;\n\n      default:\n        // Other operations that produce primitive or immutable values are local.\n        if (NodeUtil.isAssignmentOp(value)\n            || NodeUtil.isSimpleOperator(value)\n            || NodeUtil.isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node: \" + value +\n            \"\\n parent: \" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}