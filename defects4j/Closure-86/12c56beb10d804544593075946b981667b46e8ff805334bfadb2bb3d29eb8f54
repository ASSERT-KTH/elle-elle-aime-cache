{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n        case Token.ASSIGN:\n            // A result that is aliased by a non-local name, is the effectively the\n            // same as returning a non-local name, but this doesn't matter if the\n            // value is immutable.\n            Node rightChild = value.getLastChild();\n            return NodeUtil.isImmutableValue(rightChild)\n                || (locals.apply(value)\n                    && evaluatesToLocalValue(rightChild, locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals)\n                && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n                && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return NodeUtil.isImmutableValue(value.getFirstChild());\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // There is no information about the locality of object properties.\n            return false;\n        case Token.CALL:\n            return callHasLocalResult(value)\n                || isToStringMethodCall(value)\n                || (locals.apply(value) && evaluatesToLocalValue(value.getFirstChild(), locals));\n        case Token.NEW:\n            // We can't assume new objects are local unless we know\n            // they don't alias themselves.\n            return false;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals objects with non-literal children are not necessarily local.\n            return !hasNonLiteralChildren(value);\n        case Token.IN:\n            // IN operator should be treated as a simple operator\n            return true;\n        default:\n            // Other op force a local value:\n            //  x = '' + g (x is now an local string)\n            //  x -= g (x is now an local number)\n            if (isAssignmentOp(value)\n                || isSimpleOperator(value)\n                || isImmutableValue(value)) {\n                return true;\n            }\n\n            throw new IllegalStateException(\n                \"Unexpected expression node\" + value +\n                \"\\n parent:\" + value.getParent());\n    }\n}\n\n// Helper method to check if a node has non-literal children\nstatic boolean hasNonLiteralChildren(Node node) {\n    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n        if (!NodeUtil.isLiteralValue(child)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}