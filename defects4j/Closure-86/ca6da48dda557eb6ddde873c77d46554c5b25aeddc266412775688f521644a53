{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n        case Token.ASSIGN:\n            // If the assigned value is immutably local or it's a local name (checked by locals predicate)\n            // along with its right-hand side evaluating to a local value.\n            return NodeUtil.isImmutableValue(value.getLastChild())\n                || (locals.test(value.getFirstChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            // Only the last value matters for comma.\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            // Both left and right parts need to be local.\n            return evaluatesToLocalValue(value.getFirstChild(), locals)\n                && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            // Both result branches (2nd and 3rd children) need to be local.\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n                && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                // Pre-Increment/Decrement results are local\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                // Post-Increment/Decrement results can be non-local\n                return false;\n            }\n        case Token.THIS:\n            // 'this' is considered not local\n            return false;\n        case Token.NAME:\n            // A name is local if it's an immutable value or if the locals predicate returns true.\n            return isImmutableValue(value) || locals.test(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // Properties/elements are assumed to be non-local by default.\n            return false;\n        case Token.CALL:\n            // Calls to functions with local results, or toString() intrinsic method call indicates locality.\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n        case Token.NEW:\n            // A 'new' object is considered not local unless known otherwise (complex determination).\n            return false;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // All literal constructions are local.\n            return true;\n        case Token.IN:\n            // Result of 'in' operator is a local boolean.\n            return true;\n        default:\n            // For operations, check if they are assignment operations, simple operators, or immutable values.\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\n                \"Unexpected expression node: \" + value + \"\\n parent: \" + value.getParent());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}