{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        Node target = value.getFirstChild();\n        Node assignedValue = value.getLastChild();\n        if (NodeUtil.isImmutableValue(assignedValue)\n            || (locals.apply(target) && evaluatesToLocalValue(assignedValue, locals))) {\n          return true;\n        }\n        // Assignment to a local that is not a simple name (e.g., obj.prop) is not local.\n        return target.isName() && locals.apply(target);\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        Node operand = value.getFirstChild();\n        // Pre-increment/decrement results in a local value, post does not.\n        return value.getBooleanProp(Node.INCRDECR_PROP)\n            && locals.apply(operand);\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return NodeUtil.isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // Property references are assumed to be non-local unless they are known to be local.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // New objects are not local unless we can guarantee they are never aliased.\n        // This is a limitation, as currently we assume new is not local.\n        return false;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // IN operator is considered to produce a local boolean value.\n        return true;\n      default:\n        // Other operators force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || NodeUtil.isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}