{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n        case Token.ASSIGN:\n            // Assignment's result is local if the right-hand side is local or immutable.\n            return NodeUtil.isImmutableValue(value.getLastChild())\n                    || (locals.apply(value)\n                    && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            // The last operand in a comma expression determines the localness.\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            // Both operands must be local for logical operators.\n            return evaluatesToLocalValue(value.getFirstChild(), locals)\n                    && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            // Both the then and else expressions must be local.\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n                    && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            // Pre-increment/decrement results in a local value if the operand is local.\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                // Post-increment/decrement modifies the variable, which may not be local.\n                return false;\n            }\n        case Token.THIS:\n            // 'this' is considered local if marked as such by the predicate.\n            return locals.apply(value);\n        case Token.NAME:\n            // Names are local if marked by the predicate or are immutable values.\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // Property accesses are not considered local unless the object is local and immutable.\n            return isImmutableValue(value.getFirstChild())\n                    && evaluatesToLocalValue(value.getFirstChild(), locals);\n        case Token.CALL:\n            // Function calls are local if they are pure or the function is marked as local.\n            return callHasLocalResult(value)\n                    || isToStringMethodCall(value)\n                    || locals.apply(value);\n        case Token.NEW:\n            // 'new' expressions are local if the constructor is pure and arguments are local.\n            // This is a simplification; more complex analysis may be needed.\n            return callHasLocalResult(value)\n                    && evaluatesToLocalValue(value.getSecondChild(), locals);\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals are always local.\n            return true;\n        case Token.IN:\n            // 'in' operator results are local if both operands are local.\n            return evaluatesToLocalValue(value.getFirstChild(), locals)\n                    && evaluatesToLocalValue(value.getLastChild(), locals);\n        default:\n            // Other operators that produce primitive values are considered local.\n            if (isAssignmentOp(value)\n                    || isSimpleOperator(value)\n                    || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\n                    \"Unexpected expression node: \" + value +\n                            \"\\n parent: \" + value.getParent());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}