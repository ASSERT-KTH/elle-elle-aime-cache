{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n        case Token.ASSIGN:\n            // A result that is aliased by a non-local name, is the effectively the\n            // same as returning a non-local name, but this doesn't matter if the\n            // value is immutable.\n            return NodeUtil.isImmutableValue(value.getLastChild())\n                || (locals.apply(value.getFirstChild())\n                    && evaluatesToLocalValue(value.getLastChild(), locals));\n        \n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        \n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals)\n                && evaluatesToLocalValue(value.getLastChild(), locals);\n        \n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n                && evaluatesToLocalValue(value.getLastChild(), locals);\n        \n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                // Pre-increment/decrement always results in a local number\n                return true;\n            } else {\n                // Post-increment/decrement depends on the operand\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            }\n        \n        case Token.THIS:\n            return locals.apply(value);\n        \n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        \n        case Token.GETELEM:\n        case Token.GETPROP:\n            // Property access is non-local unless the object is known to be local\n            Node object = value.getFirstChild();\n            return evaluatesToLocalValue(object, locals) && locals.apply(value);\n        \n        case Token.CALL:\n            return callHasLocalResult(value)\n                || isToStringMethodCall(value)\n                || (locals.apply(value.getFirstChild()) && evaluatesToLocalValue(value, locals));\n        \n        case Token.NEW:\n            // Consider 'new' to be local only if the constructor is local\n            return locals.apply(value.getFirstChild());\n        \n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals are always local\n            return true;\n        \n        case Token.IN:\n            // 'in' operator always results in a local boolean\n            return true;\n        \n        default:\n            // Other ops force a local value if they're assignment ops,\n            // simple operators, or immutable values\n            if (isAssignmentOp(value)\n                || isSimpleOperator(value)\n                || isImmutableValue(value)) {\n                return true;\n            }\n\n            throw new IllegalStateException(\n                \"Unexpected expression node\" + value +\n                \"\\n parent:\" + value.getParent());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}