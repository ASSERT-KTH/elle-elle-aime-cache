{
    "generation": "/**\n * Checks name referenced in node to determine if it might have\n * changed.\n * @return Whether the replacement can be made.\n */\nprivate boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    // Traverse all children of the property access, not just the first one\n    for (Node child = node.getFirstChild(); child!= null; child = child.getNext()) {\n      if (child.isName() && isNameAssignedTo(child.getString(), replacement)) {\n        return false;\n      }\n      // Recursively check child nodes in case of nested property accesses\n      if (child.isGetProp() &&!isSafeReplacement(child, replacement)) {\n        return false;\n      }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}