{
    "generation": "/**\n * Checks name referenced in node to determine if it might have\n * changed.\n * @return Whether the replacement can be made.\n */\nprivate boolean isSafeReplacement(Node node, Node replacement) {\n  // No checks are needed for simple names.\n  if (node.isName()) {\n    return true;\n  }\n  Preconditions.checkArgument(node.isGetProp());\n\n  Node nameNode = node.getFirstChild();\n  if (nameNode.isName()) {\n    String name = nameNode.getString();\n    // Check if the name is assigned to in the current scope or its parents.\n    if (isNameAssignedTo(name, node)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Helper method to determine if a name is assigned to in the given scope or its parents.\n */\nprivate boolean isNameAssignedTo(String name, Node node) {\n  Node current = node;\n  while (current != null) {\n    Node parent = current.getParent();\n    if (parent != null && parent.isAssign() && parent.getFirstChild().isName() && parent.getFirstChild().getString().equals(name)) {\n      return true;\n    }\n    current = parent;\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}