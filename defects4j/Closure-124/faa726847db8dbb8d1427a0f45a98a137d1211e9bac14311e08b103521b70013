{
    "generation": "  /**\n   * Checks name referenced in node to determine if it might have\n   * changed.\n   * @return Whether the replacement can be made.\n   */\n  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    Node firstChild = node.getFirstChild();\n    if (firstChild.isName()\n        && isNameAssignedTo(firstChild.getString(), replacement)) {\n      return false;\n    }\n\n    // Check if the property access is on a name that might have changed\n    Node parent = node.getParent();\n    if (parent != null && parent.isAssign()) {\n      Node lhs = parent.getFirstChild();\n      if (lhs.isGetProp() && lhs.getFirstChild().isName() && lhs.getFirstChild().getString().equals(firstChild.getString())) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}