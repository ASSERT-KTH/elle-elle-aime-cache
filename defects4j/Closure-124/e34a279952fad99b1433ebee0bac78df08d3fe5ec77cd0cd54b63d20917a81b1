{
    "generation": "/**\n * Checks name referenced in node to determine if it might have\n * changed.\n * @return Whether the replacement can be made.\n */\nprivate boolean isSafeReplacement(Node node, Node replacement) {\n  // No checks are needed for simple names.\n  if (node.isName()) {\n    return true;\n  }\n  Preconditions.checkArgument(node.isGetProp());\n\n  Node originalNode = node;\n  node = node.getFirstChild();\n  if (node.isName()\n      && isNameAssignedTo(node.getString(), replacement)) {\n    return false;\n  }\n\n  // Check if any parent node is a name and is assigned to the replacement\n  Node parent = originalNode.getParent();\n  while (parent != null) {\n    if (parent.isName() && isNameAssignedTo(parent.getString(), replacement)) {\n      return false;\n    }\n    parent = parent.getParent();\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}