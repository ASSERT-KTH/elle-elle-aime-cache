{
    "generation": "/**\n * Checks name referenced in node to determine if it might have\n * changed.\n * @return Whether the replacement can be made.\n */\nprivate boolean isSafeReplacement(Node node, Node replacement) {\n  // No checks are needed for simple names.\n  if (node.isName()) {\n    return true;\n  }\n  Preconditions.checkArgument(node.isGetProp());\n\n  Node propertyAccess = node;\n  Node propNameNode = propertyAccess.getLastChild(); // Get property name node\n\n  // Traverse up the property access chain (e.g., x.y.z)\n  while (propertyAccess.isGetProp()) {\n    Node baseNode = propertyAccess.getFirstChild(); // Get base node (e.g., x in x.y)\n\n    if (baseNode.isName() && isNameAssignedTo(baseNode.getString(), replacement)) {\n      return false;\n    }\n\n    propertyAccess = baseNode; // Move up the chain\n    if (!propertyAccess.isGetProp()) break; // Exit if not a property access\n    propNameNode = propertyAccess.getLastChild(); // Update property name node\n  }\n\n  // Check the final base node (if it's a name)\n  if (propertyAccess.isName() && isNameAssignedTo(propertyAccess.getString(), replacement)) {\n    return false;\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}