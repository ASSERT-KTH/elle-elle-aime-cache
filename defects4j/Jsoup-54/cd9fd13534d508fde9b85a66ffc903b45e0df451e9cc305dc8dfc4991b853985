{
    "generation": "private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n    Map<String, Integer> usedKeys = new HashMap<>();\n    for (Attribute attribute : source.attributes()) {\n        String key = attribute.getKey();\n        String sanitizedKey = sanitizeAttributeKey(key, usedKeys);\n        el.setAttribute(sanitizedKey, attribute.getValue());\n    }\n}\n\nprivate String sanitizeAttributeKey(String key, Map<String, Integer> usedKeys) {\n    // Ensure the key starts with a valid character\n    if (!key.isEmpty() && !isValidStartChar(key.charAt(0))) {\n        key = \"_\" + key;\n    }\n\n    // Replace invalid characters in the rest of the key\n    StringBuilder sanitizedBuilder = new StringBuilder();\n    for (int i = 0; i < key.length(); i++) {\n        char c = key.charAt(i);\n        if (i == 0) {\n            if (isValidStartChar(c)) {\n                sanitizedBuilder.append(c);\n            } else {\n                sanitizedBuilder.append('_');\n            }\n        } else {\n            if (isValidChar(c)) {\n                sanitizedBuilder.append(c);\n            } else {\n                sanitizedBuilder.append('_');\n            }\n        }\n    }\n    String sanitizedKey = sanitizedBuilder.toString();\n\n    // Handle empty keys\n    if (sanitizedKey.isEmpty()) {\n        sanitizedKey = \"attr\";\n    }\n\n    // Handle collisions\n    if (usedKeys.containsKey(sanitizedKey)) {\n        int count = usedKeys.get(sanitizedKey);\n        sanitizedKey += \"_\" + count;\n        usedKeys.put(sanitizedKey, count + 1);\n    } else {\n        usedKeys.put(sanitizedKey, 1);\n    }\n\n    return sanitizedKey;\n}\n\nprivate boolean isValidStartChar(char c) {\n    return Character.isLetter(c) || c == '_' || c == ':';\n}\n\nprivate boolean isValidChar(char c) {\n    return Character.isLetterOrDigit(c) || c == '_' || c == ':' || c == '.' || c == '-';\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}