{
    "generation": "private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n        return;\n    }\n\n    int visits = 0;\n    do {\n        // Traverse all children of the current node\n        Node c = node.getFirstChild();\n        while (c != null) {\n            traverse(c);\n            Node next = c.getNext();\n            c = next;\n        }\n\n        // Visit the current node\n        visit(node);\n        visits++;\n\n        // Ensure that we do not get stuck in an infinite loop\n        Preconditions.checkState(visits < 10000, \"too many iterations\");\n\n        // Check if the node needs to be retraversed\n    } while (shouldRetraverse(node));\n\n    // Exit the node after all possible revisits\n    exitNode(node);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}