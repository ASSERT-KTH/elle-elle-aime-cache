{
    "generation": "private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    Node lastModifiedChild = null;\n    do {\n      Node c = node.getFirstChild();\n      boolean childRevisited = false;\n      while(c!= null) {\n        Node next = c.getNext();\n        if (lastModifiedChild == c) {\n          childRevisited = true;\n        } else {\n          traverse(c);\n        }\n        c = next;\n      }\n\n      if (childRevisited || shouldRetraverse(node)) {\n        visit(node);\n        visits++;\n        lastModifiedChild = node; // track last modified child to revisit in next iteration\n      }\n\n      Preconditions.checkState(visits < 10000, \"too many iterations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}