{
    "generation": "private void traverse(Node node) {\n  // The goal here is to avoid retraversing\n  // the entire AST to catch newly created opportunities.\n  // So we track whether a \"unit of code\" has changed,\n  // and revisit immediately.\n  if (!shouldVisit(node)) {\n    return;\n  }\n\n  int visits = 0;\n  do {\n    Node c = node.getFirstChild();\n    while(c!= null) {\n      traverse(c);\n      Node next = c.getNext();\n      c = next;\n    }\n\n    visit(node);\n    visits++;\n\n    // Add a check to break out of the loop if the node's children have changed\n    if (node.hasChildren() && node.getFirstChild()!= null && node.getFirstChild().getNext()!= null) {\n      break;\n    }\n\n    Preconditions.checkState(visits < 10000, \"too many iterations\");\n  } while (shouldRetraverse(node));\n\n  exitNode(node);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}