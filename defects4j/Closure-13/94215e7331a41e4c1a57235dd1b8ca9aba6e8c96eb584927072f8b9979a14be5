{
    "generation": "/**\n * Traverse the AST, visiting nodes as necessary.\n * \n * The goal here is to avoid retraversing the entire AST to catch newly created opportunities.\n * So we track whether a \"unit of code\" has changed, and revisit immediately.\n * \n * @param node the current node to visit\n */\nprivate void traverse(Node node) {\n    if (!shouldVisit(node)) {\n        return;\n    }\n\n    int visits = 0;\n    Node current = node;\n    do {\n        // Traverse children first to ensure parent nodes are visited after their children\n        Node c = current.getFirstChild();\n        while (c!= null) {\n            traverse(c);\n            c = c.getNext();\n        }\n\n        // Visit the current node after its children\n        visit(current);\n        visits++;\n\n        // Check if the node or any of its children have changed, requiring re-traversal\n        current = shouldRetraverse(node)? node : null;\n    } while (current!= null);\n\n    Preconditions.checkState(visits < 10000, \"too many iterations\");\n    exitNode(node);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}