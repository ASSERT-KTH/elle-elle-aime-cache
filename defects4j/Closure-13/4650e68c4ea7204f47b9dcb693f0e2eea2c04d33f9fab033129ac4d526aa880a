{
    "generation": "private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n        return;\n    }\n\n    boolean changed;\n    do {\n        changed = false;\n        Node c = node.getFirstChild();\n        while (c != null) {\n            Node next = c.getNext();\n            traverse(c);\n            c = next;\n        }\n\n        if (visit(node)) {\n            changed = true;\n        }\n\n        c = node.getFirstChild();\n        while (c != null) {\n            Node next = c.getNext();\n            if (shouldRetraverse(c)) {\n                traverse(c);\n                changed = true;\n            }\n            c = next;\n        }\n\n        Preconditions.checkState(changed || !shouldRetraverse(node), \"Infinite loop detected in traverse\");\n    } while (changed || shouldRetraverse(node));\n\n    exitNode(node);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}