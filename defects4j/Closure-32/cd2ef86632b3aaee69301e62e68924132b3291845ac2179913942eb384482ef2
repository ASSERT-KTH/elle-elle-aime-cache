{
    "generation": "@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n        return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n        line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n\n    do {\n        switch (token) {\n            case STAR:\n                if (ignoreStar) {\n                    // Skip leading '*', ignore the star for this iteration.\n                } else {\n                    // The star is part of the comment.\n                    if (builder.length() > 0) {\n                        builder.append(' ');\n                    }\n                    builder.append('*');\n                }\n\n                token = next();\n                continue;\n\n            case EOL:\n                if (option != WhitespaceOption.SINGLE_LINE) {\n                    builder.append(\"\\n\");\n                }\n\n                ignoreStar = true;\n                token = next();\n                continue;\n\n            default:\n                ignoreStar = false;\n                state = State.SEARCHING_ANNOTATION;\n\n                // Handle termination conditions.\n                if (token == JsDocToken.EOC || token == JsDocToken.EOF ||\n                    (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n                    String multilineText = builder.toString();\n\n                    if (option != WhitespaceOption.PRESERVE) {\n                        multilineText = multilineText.trim();\n                    }\n\n                    int endLineno = stream.getLineno();\n                    int endCharno = stream.getCharno();\n\n                    if (multilineText.length() > 0) {\n                        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n                    }\n\n                    return new ExtractionInfo(multilineText, token);\n                }\n\n                // Append the token's content, ensuring proper spacing.\n                if (builder.length() > 0) {\n                    builder.append(' ');\n                }\n                builder.append(toString(token));\n\n                line = stream.getRemainingJSDocLine();\n\n                // Trim end of the line if not preserving whitespace.\n                if (option != WhitespaceOption.PRESERVE) {\n                    line = trimEnd(line);\n                }\n\n                builder.append(line);\n                token = next();\n        }\n    } while (true);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}