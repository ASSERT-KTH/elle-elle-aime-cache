{
    "generation": "/**\n * Extracts the text found on the current line and all subsequent\n * until either an annotation, end of comment or end of file is reached.\n * Note that if this method detects an end of line as the first token, it\n * will quit immediately (indicating that there is no text where it was\n * expected).  Note that token = info.token; should be called after this\n * method is used to update the token properly in the parser.\n *\n * @param token The start token.\n * @param option How to handle whitespace.\n *\n * @return The extraction information.\n */\n@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n        return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option!= WhitespaceOption.PRESERVE) {\n        line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n    int initialIndentation = -1; // Track initial indentation\n\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it's easier\n    // to do this here than in the tokenizer.\n\n    do {\n        switch (token) {\n            case STAR:\n                if (ignoreStar) {\n                    // Mark the position after the star as the new start of the line.\n                } else {\n                    // The star is part of the comment.\n                    if (builder.length() > 0) {\n                        builder.append(' ');\n                    }\n\n                    builder.append('*');\n                }\n\n                token = next();\n                continue;\n\n            case EOL:\n                if (option!= WhitespaceOption.SINGLE_LINE) {\n                    builder.append(\"\\n\");\n                }\n\n                ignoreStar = true;\n                token = next();\n                continue;\n\n            default:\n                ignoreStar = false;\n                state = State.SEARCHING_ANNOTATION;\n\n                // All tokens must be separated by a space.\n\n                if (token == JsDocToken.EOC ||\n                    token == JsDocToken.EOF ||\n                    // When we're capturing a license block, annotations\n                    // in the block are ok.\n                    (token == JsDocToken.ANNOTATION &&\n                     option!= WhitespaceOption.PRESERVE)) {\n                    String multilineText = builder.toString();\n\n                    if (option!= WhitespaceOption.PRESERVE) {\n                        // Preserve indentation\n                        if (initialIndentation!= -1) {\n                            multilineText = preserveIndentation(multilineText, initialIndentation);\n                        } else {\n                            multilineText = multilineText.trim();\n                        }\n                    }\n\n                    int endLineno = stream.getLineno();\n                    int endCharno = stream.getCharno();\n\n                    if (multilineText.length() > 0) {\n                        jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                                endLineno, endCharno);\n                    }\n\n                    return new ExtractionInfo(multilineText, token);\n                }\n\n                if (builder.length() > 0) {\n                    builder.append(' ');\n                }\n                builder.append(toString(token));\n\n                line = stream.getRemainingJSDocLine();\n\n                // Track initial indentation\n                if (initialIndentation == -1) {\n                    initialIndentation = getLeadingWhitespaceCount(line);\n                }\n\n                if (option!= WhitespaceOption.PRESERVE) {\n                    line = trimEnd(line);\n                }\n\n                // Preserve existing indentation\n                if (option == WhitespaceOption.PRESERVE && initialIndentation!= -1) {\n                    line = addLeadingWhitespace(line, initialIndentation);\n                }\n\n                builder.append(line);\n                token = next();\n        }\n    } while (true);\n}\n\n// Helper methods to preserve indentation\nprivate int getLeadingWhitespaceCount(String line) {\n    int count = 0;\n    for (char c : line.toCharArray()) {\n        if (Character.isWhitespace(c)) {\n            count++;\n        } else {\n            break;\n        }\n    }\n    return count;\n}\n\nprivate String addLeadingWhitespace(String line, int count) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < count; i++) {\n        sb.append(' ');\n    }\n    sb.append(line.trim());\n    return sb.toString();\n}\n\nprivate String preserveIndentation(String text, int indentation) {\n    String[] lines = text.split(\"\\n\");\n    StringBuilder sb = new StringBuilder();\n    for (String line : lines) {\n        sb.append(addLeadingWhitespace(line, indentation)).append(\"\\n\");\n    }\n    return sb.toString().trim();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}