{
    "generation": "  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno();\n\n    StringBuilder builder = new StringBuilder();\n\n    boolean ignoreStar = false;\n\n    do {\n      token = next();\n      switch (token) {\n        case STAR:\n          if (!ignoreStar) {\n            builder.append('*');\n          }\n          continue;\n\n        case EOL:\n          if (option == WhitespaceOption.PRESERVE) {\n            builder.append(\"\\n\");\n            // keep track of extra whitespaces after the star\n            int charno = stream.getCharno();\n            for (int i = startCharno; i < charno; i++) {\n              builder.append(' ');\n            }\n            startCharno = charno + 1;\n          } else {\n            builder.append(\" \");\n          }\n          ignoreStar = true;\n          continue;\n\n        case EOC:\n        case EOF:\n          String multilineText = builder.toString();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            multilineText = multilineText.trim();\n          }\n\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n\n          if (multilineText.length() > 0) {\n            jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                endLineno, endCharno);\n          }\n\n          return new ExtractionInfo(multilineText, token);\n\n        default:\n          ignoreStar = false;\n          builder.append(toString(token));\n          if (option == WhitespaceOption.PRESERVE) {\n            int charno = stream.getCharno();\n            for (int i = startCharno; i < charno; i++) {\n              builder.append(' ');\n            }\n            startCharno = charno;\n          }\n          continue;\n      }\n    } while (true);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}