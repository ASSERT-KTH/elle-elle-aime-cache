{
    "generation": "@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n    boolean inAsciiArt = false;\n    int currentLineIndent = 0;\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n            currentLineIndent = 0;\n          } else {\n            // The star is part of the comment.\n            if (builder.length() > 0 && !inAsciiArt) {\n              builder.append(' ');\n            }\n\n            if (!inAsciiArt) {\n              builder.append('*');\n            }\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n\n          ignoreStar = true;\n          inAsciiArt = false;\n          currentLineIndent = 0;\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              // When we're capturing a license block, annotations\n              // in the block are ok.\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          if (builder.length() > 0 && !inAsciiArt) {\n            builder.append(' ');\n          }\n\n          if (token == JsDocToken.STRING) {\n            inAsciiArt = true;\n            currentLineIndent = countLeadingWhitespace(stream.getRemainingJSDocLine());\n          }\n\n          builder.append(toString(token));\n\n          line = stream.getRemainingJSDocLine();\n\n          if (option == WhitespaceOption.PRESERVE || inAsciiArt) {\n            if (inAsciiArt) {\n              int lineIndent = countLeadingWhitespace(line);\n              if (lineIndent > currentLineIndent) {\n                builder.append(line.substring(0, lineIndent - currentLineIndent));\n                line = line.substring(lineIndent - currentLineIndent);\n              }\n            }\n            builder.append(line);\n          } else {\n            line = trimEnd(line);\n            if (!line.isEmpty()) {\n              builder.append(line.trim());\n            }\n          }\n\n          token = next();\n      }\n    } while (true);\n  }\n\n  private int countLeadingWhitespace(String line) {\n    int count = 0;\n    for (int i = 0; i < line.length(); i++) {\n      if (Character.isWhitespace(line.charAt(i))) {\n        count++;\n      } else {\n        break;\n      }\n    }\n    return count;\n  }\n\n  private String trimEnd(String s) {\n    int len = s.length();\n    while (len > 0 && Character.isWhitespace(s.charAt(len - 1))) {\n      len--;\n    }\n    return s.substring(0, len);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}