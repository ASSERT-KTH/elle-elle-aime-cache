{
    "generation": "@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n      token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  StringBuilder builder = new StringBuilder();\n  state = State.SEARCHING_ANNOTATION;\n\n  do {\n    switch (token) {\n      case STAR:\n        if (builder.length() > 0) {\n          builder.append('\\n');\n        }\n        token = next();\n        continue;\n\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append('\\n');\n        }\n        token = next();\n        continue;\n\n      default:\n        if (token == JsDocToken.EOC ||\n            token == JsDocToken.EOF ||\n            (token == JsDocToken.ANNOTATION &&\n             option != WhitespaceOption.PRESERVE)) {\n          String multilineText = builder.toString();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            multilineText = multilineText.trim();\n          }\n\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n\n          if (multilineText.length() > 0) {\n            jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                endLineno, endCharno);\n          }\n\n          return new ExtractionInfo(multilineText, token);\n        }\n\n        if (token != JsDocToken.EOL && builder.length() > 0 && builder.charAt(builder.length() - 1) != '\\n') {\n          builder.append(' ');\n        }\n        builder.append(toString(token));\n\n        String line = stream.getRemainingJSDocLine();\n\n        if (option != WhitespaceOption.PRESERVE) {\n          line = trimEnd(line);\n        }\n\n        if (!line.isEmpty()) {\n          if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\\n') {\n            builder.append(' ');\n          }\n          builder.append(line);\n        }\n\n        token = next();\n    }\n  } while (true);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}