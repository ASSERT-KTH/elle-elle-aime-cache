{
    "generation": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  String line = stream.getRemainingJSDocLine();\n  if (option != WhitespaceOption.PRESERVE) {\n    line = line.trim();\n  }\n\n  StringBuilder builder = new StringBuilder();\n  builder.append(line);\n\n  state = State.SEARCHING_ANNOTATION;\n  token = next();\n\n  boolean ignoreStar = false;\n\n  do {\n    switch (token) {\n      case STAR:\n        if (ignoreStar) {\n          // Do nothing if star is the first token of the line. It equals blank in the result.\n        } else {\n          // Append '*' to the builder if it's not the first token of the line.\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append('*');\n        }\n\n        token = next();\n        continue;\n\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append(\"\\n\");\n        }\n\n        ignoreStar = true;\n        token = next();\n        continue;\n\n      default:\n        ignoreStar = false;\n        state = State.SEARCHING_ANNOTATION;\n\n        if (token == JsDocToken.EOC || token == JsDocToken.EOF) {\n          String multilineText = builder.toString();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            multilineText = multilineText.trim();\n          }\n\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n\n          // If first token was a license or preserve annotation add extracted text to JSDocInfo,\n          // else handle the token as normal text.\n          if (annotationType == JsDocToken.ANNOTATION_LICENSE ||\n              annotationType == JsDocToken.ANNOTATION_PRESERVE) {\n            if (multilineText.length() > 0) {\n              jsdocBuilder.setLicense(multilineText, startLineno, startCharno, endLineno, endCharno);\n            }\n          } else if (multilineText.length() > 0) {\n            jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n          }\n\n          return new ExtractionInfo(multilineText, token);\n        }\n\n        if (builder.length() > 0) {\n          builder.append(' ');\n        }\n        builder.append(toString(token));\n\n        line = stream.getRemainingJSDocLine();\n\n        if (option != WhitespaceOption.PRESERVE) {\n          line = trimEnd(line);\n        }\n\n        builder.append(line);\n        token = next();\n    }\n  } while (true);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}