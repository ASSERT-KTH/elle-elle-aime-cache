{
    "generation": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    StringBuilder builder = new StringBuilder();\n\n    state = State.SEARCHING_ANNOTATION;\n\n    // Preserve the first line of the textual block as it is, without trimming.\n    // This preserves the indentation for ASCII art.\n    builder.append(stream.getRemainingJSDocLine());\n    if (builder.charAt(0) == '@') {\n        // If the block starts with '@' its a tag declaration, remove the tag.\n        int idx = builder.indexOf(\" \");\n        builder.delete(0, idx + 1);\n    }\n\n    token = next();\n\n    do {\n      switch (token) {\n        case STAR:\n          // If the star is the first character in a line, skip it.\n          if (stream.getCharno() == 0) {\n            token = next();\n            continue;\n          }\n          builder.append('*');\n          builder.append(stream.getRemainingJSDocLine());\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n          token = next();\n          continue;\n\n        default:\n          state = State.SEARCHING_ANNOTATION;\n          if (token == JsDocToken.EOC || token == JsDocToken.EOF) {\n            String multilineText = builder.toString().trim();\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          token = next();\n      }\n    } while (true);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}