{
    "generation": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  StringBuilder builder = new StringBuilder();\n  builder.append(stream.getRemainingJSDocLine().trim());\n\n  boolean insideBlock = true;\n\n  while (insideBlock) {\n    switch (token = next()) {\n      case EOL:\n        builder.append(\"\\n\");\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          startCharno = stream.getCharno() + 1;\n        }\n        break;\n      case STAR:\n        builder.append(\"*\");\n        builder.append(stream.getRemainingJSDocLine().trim());\n        break;\n      default:\n        stream.pushBack(token);\n        insideBlock = false;\n    }\n  }\n\n  if (option != WhitespaceOption.PRESERVE) {\n    builder = new StringBuilder(builder.toString().trim());\n  }\n\n  int endLineno = stream.getLineno();\n  int endCharno = stream.getCharno();\n\n  if (builder.length() > 0) {\n    jsdocBuilder.markText(builder.toString(), startLineno, startCharno, endLineno, endCharno);\n  }\n\n  return new ExtractionInfo(builder.toString(), token);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}