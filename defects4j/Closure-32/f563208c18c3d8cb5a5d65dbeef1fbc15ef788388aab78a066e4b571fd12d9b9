{
    "generation": "/**\n * Extracts the text found on the current line and all subsequent lines\n * until either an annotation, end of comment, or end of file is reached.\n * Note that if this method detects an end of line as the first token, it\n * will quit immediately (indicating that there is no text where it was\n * expected). Note that token = info.token; should be called after this\n * method is used to update the token properly in the parser.\n *\n * @param token The start token.\n * @param option How to handle whitespace.\n *\n * @return The extraction information.\n */\n@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n        return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    StringBuilder builder = new StringBuilder();\n\n    boolean ignoreStar = false;\n    boolean preserveWhitespace = (option == WhitespaceOption.PRESERVE);\n\n    do {\n        switch (token) {\n            case STAR:\n                if (ignoreStar) {\n                    ignoreStar = false;\n                } else {\n                    if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\\n') {\n                        builder.append(' ');\n                    }\n                    builder.append('*');\n                }\n                token = next();\n                continue;\n\n            case EOL:\n                if (!preserveWhitespace && option != WhitespaceOption.SINGLE_LINE) {\n                    builder.append(\"\\n\");\n                }\n                ignoreStar = true;\n                token = next();\n                continue;\n\n            default:\n                ignoreStar = false;\n                if (token == JsDocToken.EOC || token == JsDocToken.EOF ||\n                        (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n                    String multilineText = builder.toString();\n                    if (!preserveWhitespace) {\n                        multilineText = multilineText.trim();\n                    }\n                    int endLineno = stream.getLineno();\n                    int endCharno = stream.getCharno();\n                    if (multilineText.length() > 0) {\n                        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n                    }\n                    return new ExtractionInfo(multilineText, token);\n                }\n\n                if (builder.length() > 0 && builder.charAt(builder.length() - 1) != '\\n') {\n                    builder.append(' ');\n                }\n                builder.append(toString(token));\n\n                String line = stream.getRemainingJSDocLine();\n                if (!preserveWhitespace) {\n                    line = trimEnd(line);\n                }\n                builder.append(line);\n                token = next();\n        }\n    } while (true);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}