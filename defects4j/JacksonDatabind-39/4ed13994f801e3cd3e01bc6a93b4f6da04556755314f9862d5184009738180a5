{
    "generation": "@Override\npublic Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    JsonNode node = p.readValueAsTree();\n    // Check if the 'type' node exists in the JSON object\n    if (node.has(\"type\") && node.get(\"type\").asText().equals(\"event\")) {\n        // if 'type' node exists, and its value is 'event', proceed as normal\n        JsonDeserializer<Object> deserializer = ctxt.findRootValueDeserializer(ctxt.constructType(Object.class));\n        return deserializer.deserialize(p, ctxt);\n    } else {\n        // if 'type' node does not exist, or its value is not 'event', skip the children and return null\n        p.skipChildren();\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}