{
    "generation": "@Override\npublic Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    // Initialize the target object\n    ObjectCodec oc = p.getCodec();\n    JsonNode node = oc.readTree(p);\n    CallRecord result = new CallRecord();\n\n    // Parse the JSON node and populate the CallRecord object\n    if (node.has(\"version\")) {\n        result.version = node.get(\"version\").asDouble();\n    }\n    if (node.has(\"application\")) {\n        result.application = node.get(\"application\").asText();\n    }\n    if (node.has(\"item\")) {\n        JsonNode itemNode = node.get(\"item\");\n        if (itemNode.has(\"type\")) {\n            String type = itemNode.get(\"type\").asText();\n            if (\"event\".equals(type)) {\n                result.item = oc.treeToValue(itemNode, Event.class);\n            }\n        }\n    }\n    if (node.has(\"item2\")) {\n        JsonNode item2Node = node.get(\"item2\");\n        if (item2Node.has(\"type\")) {\n            String type = item2Node.get(\"type\").asText();\n            if (\"event\".equals(type)) {\n                result.item2 = oc.treeToValue(item2Node, Event.class);\n            }\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}