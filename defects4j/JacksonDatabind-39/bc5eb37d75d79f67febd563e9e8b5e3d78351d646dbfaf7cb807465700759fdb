{
    "generation": "@Override\npublic Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    // Start the deserialization process\n    p.nextToken();\n\n    // Use a JsonNode to parse the content\n    JsonNode node = p.getCodec().readTree(p);\n    \n    // Create a new instance of CallRecord\n    CallRecord result = new CallRecord();\n\n    // Manually set the fields based on the JSON\n    if (node.has(\"version\")) {\n        result.version = node.get(\"version\").asDouble();\n    }\n    if (node.has(\"application\")) {\n        result.application = node.get(\"application\").asText();\n    }\n    if (node.has(\"item\")) {\n        JsonNode itemNode = node.get(\"item\");\n        if (itemNode.has(\"type\") && itemNode.has(\"location\")) {\n            String type = itemNode.get(\"type\").asText();\n            if (\"event\".equals(type)) {\n                result.item = new Event(itemNode.get(\"location\").asText());\n            } else {\n                // For unknown types, set item to null\n                result.item = null;\n            }\n        }\n    }\n    if (node.has(\"item2\")) {\n        JsonNode item2Node = node.get(\"item2\");\n        if (item2Node.has(\"type\") && item2Node.has(\"location\")) {\n            String type = item2Node.get(\"type\").asText();\n            if (\"event\".equals(type)) {\n                result.item2 = new Event(item2Node.get(\"location\").asText());\n            } else {\n                // For unknown types, set item2 to null\n                result.item2 = null;\n            }\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}