{
    "generation": "/**\n * Creates a time period for the week in which the specified date/time\n * falls, calculated relative to the specified time zone and locale.\n *\n * @param time  the date/time (<code>null</code> not permitted).\n * @param zone  the time zone (<code>null</code> not permitted).\n * @param locale  the locale (<code>null</code> not permitted).\n */\npublic Week(Date time, TimeZone zone, Locale locale) {\n    if (time == null) {\n        throw new IllegalArgumentException(\"Null 'time' argument.\");\n    }\n    if (zone == null) {\n        throw new IllegalArgumentException(\"Null 'zone' argument.\");\n    }\n    if (locale == null) {\n        throw new IllegalArgumentException(\"Null 'locale' argument.\");\n    }\n\n    this.startTime = time;\n    this.timeZone = zone;\n    this.locale = locale;\n\n    // Determine the first day of the week based on the locale\n    Calendar calendar = new GregorianCalendar(zone, locale);\n    int firstDayOfWeek = calendar.getFirstDayOfWeek();\n\n    // Set the calendar to the given date\n    calendar.setTime(time);\n\n    // Adjust the calendar to the first day of the week\n    int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);\n    int dayOffset = (dayOfWeek - firstDayOfWeek + 7) % 7;\n    calendar.add(Calendar.DAY_OF_YEAR, -dayOffset);\n\n    // Set the start time to the first millisecond of the first day of the week\n    calendar.set(Calendar.HOUR_OF_DAY, 0);\n    calendar.set(Calendar.MINUTE, 0);\n    calendar.set(Calendar.SECOND, 0);\n    calendar.set(Calendar.MILLISECOND, 0);\n    this.startTime = calendar.getTime();\n\n    // Calculate the week number\n    int week = calendar.get(Calendar.WEEK_OF_YEAR);\n    this.week = week;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}