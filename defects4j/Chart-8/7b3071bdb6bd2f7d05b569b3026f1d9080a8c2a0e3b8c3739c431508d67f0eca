{
    "generation": "/**\n * Creates a time period for the week in which the specified date/time\n * falls, calculated relative to the specified time zone and locale.\n *\n * @param time  the date/time (<code>null</code> not permitted).\n * @param zone  the time zone (<code>null</code> not permitted).\n * @param locale the locale (<code>null</code> not permitted).\n */\npublic Week(Date time, TimeZone zone, Locale locale) {\n    // Ensure that the arguments are not null\n    if (time == null) {\n        throw new IllegalArgumentException(\"Null 'time' argument.\");\n    }\n    if (zone == null) {\n        throw new IllegalArgumentException(\"Null 'zone' argument.\");\n    }\n    if (locale == null) {\n        throw new IllegalArgumentException(\"Null 'locale' argument.\");\n    }\n\n    // Create a new Calendar instance with the provided time zone and locale\n    Calendar calendar = Calendar.getInstance(zone, locale);\n    calendar.setTime(time);\n\n    // Calculate the week of the year\n    int year = calendar.get(Calendar.YEAR);\n    int weekOfWeekyear = calendar.get(Calendar.WEEK_OF_YEAR);\n\n    // Adjust for the first day of the week, which is locale-dependent\n    if (locale.equals(Locale.US)) {\n        if (calendar.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY \n            && calendar.get(Calendar.DAY_OF_YEAR) == 1 \n            && calendar.get(Calendar.MONTH) == Calendar.DECEMBER) {\n            weekOfWeekyear = 1;\n            year += 1;\n        }\n    }\n\n    // Set the week and year values\n    this.year = year;\n    this.week = weekOfWeekyear;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}