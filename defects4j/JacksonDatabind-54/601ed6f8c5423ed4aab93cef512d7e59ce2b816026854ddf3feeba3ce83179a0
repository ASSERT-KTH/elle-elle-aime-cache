{
    "generation": "    @SuppressWarnings(\"deprecation\")\n    protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n            AnnotatedMember am, boolean defaultUseStaticTyping)\n        throws JsonMappingException\n    {\n        // Identify if there is an enforced serialization type\n        JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);\n\n        // Handle container types with content type serializers\n        if (contentTypeSer != null) {\n            if (serializationType == null) {\n                serializationType = declaredType;\n            }\n            JavaType ct = serializationType.getContentType();\n            if (ct == null) {\n                throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property '\"\n                        + propDef.getName() + \"' (of type \" + _beanDesc.getType() + \"); serialization type \" \n                        + serializationType + \" has no content\");\n            }\n            serializationType = serializationType.withContentTypeHandler(contentTypeSer);\n        }\n\n        Object valueToSuppress = null;\n        boolean suppressNulls = false;\n\n        JsonInclude.Value inclV = _defaultInclusion.withOverrides(propDef.findInclusion());\n        JsonInclude.Include inclusion = inclV.getValueInclusion();\n        if (inclusion == JsonInclude.Include.USE_DEFAULTS) {\n            inclusion = JsonInclude.Include.ALWAYS;\n        }\n\n        // Determine the applicable type for value suppression logic\n        JavaType actualType = (serializationType == null) ? declaredType : serializationType;\n\n        switch (inclusion) {\n        case NON_DEFAULT:\n            if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {\n                valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);\n            } else {\n                valueToSuppress = getDefaultValue(actualType);\n            }\n            suppressNulls = (valueToSuppress == null);\n            if (valueToSuppress != null && valueToSuppress.getClass().isArray()) {\n                valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n            }\n            break;\n\n        case NON_ABSENT:\n            suppressNulls = true;\n            if (declaredType.isReferenceType()) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n\n        case NON_EMPTY:\n            suppressNulls = true;\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            break;\n\n        case NON_NULL:\n            suppressNulls = true;\n            break;\n\n        case ALWAYS:\n        default:\n            if (declaredType.isContainerType() &&\n                !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        }\n\n        BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n                am, _beanDesc.getClassAnnotations(), declaredType,\n                ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n\n        Object serDef = _annotationIntrospector.findNullSerializer(am);\n        if (serDef != null) {\n            bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n        }\n\n        NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);\n        if (unwrapper != null) {\n            bpw = bpw.unwrappingWriter(unwrapper);\n        }\n\n        return bpw;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}