{
    "generation": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n\n        if (newPos >= 0) {\n            // Ensure correct leap year handling by setting the computed millis\n            long computedMillis = bucket.computeMillis(false, text);\n            DateTimeZone effectiveZone = chrono.getZone();\n            DateTime epochDateTime = new DateTime(computedMillis, chrono.withZone(effectiveZone));\n            \n            if (epochDateTime.getMonthOfYear() == 2 && epochDateTime.getDayOfMonth() == 29) {\n                // If parsing Feb 29, ensure the year remains leap year\n                if (!epochDateTime.year().isLeap()) {\n                    while (!epochDateTime.year().isLeap()) {\n                        epochDateTime = epochDateTime.minusYears(1);\n                    }\n                    computedMillis = epochDateTime.getMillis();\n                }\n            }\n        \n            instant.setMillis(computedMillis);\n        }\n\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}