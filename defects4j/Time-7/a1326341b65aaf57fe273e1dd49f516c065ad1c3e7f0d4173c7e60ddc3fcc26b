{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    // Create a new chronology with a default year for parsing purposes\n    Chronology parsingChrono = chrono.withUTC().withYear(defaultYear);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, parsingChrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    // Compute the parsed instant\n    long parsedMillis = bucket.computeMillis(false, text);\n    \n    // Check if we need to adjust for a leap year\n    if (bucket.getOffsetInteger() != null) {\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    \n    // Set the parsed instant, adjusting for leap years if necessary\n    long adjustedMillis = parsedMillis;\n    if (chrono.dayOfMonth().isLeap(adjustedMillis)) {\n        // If the parsed instant is Feb 29 but the year of the original instant isn't a leap year,\n        // we need to adjust to Feb 28\n        long originalYear = chrono.year().get(instantMillis);\n        if (!chrono.year().isLeap(originalYear)) {\n            adjustedMillis = chrono.dayOfMonth().set(adjustedMillis, 28);\n        }\n    }\n    \n    instant.setMillis(adjustedMillis);\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}