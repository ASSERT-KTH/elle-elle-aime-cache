{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Get the correct year from the bucket\n    int year = bucket.getYear();\n    if (year == -1) {\n        year = defaultYear;\n    }\n\n    // Create a temporary instant to validate the parsed date\n    ReadWritableInstant tempInstant = new MutableDateTime(year, bucket.getMonthOfYear(), bucket.getDayOfMonth(), 0, 0, 0, 0, chrono);\n\n    // Check if the date is valid\n    if (tempInstant.getChronology().dayOfMonth().isValid(tempInstant.getMillis())) {\n        instant.setMillis(tempInstant.getMillis());\n    } else {\n        throw new IllegalFieldValueException(DateTimeFieldType.dayOfMonth(), tempInstant.getDayOfMonth(), tempInstant.getChronology().dayOfMonth().get(tempInstant.getMillis()));\n    }\n\n    if (iOffsetParsed && bucket.getOffsetInteger()!= null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone()!= null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone!= null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}