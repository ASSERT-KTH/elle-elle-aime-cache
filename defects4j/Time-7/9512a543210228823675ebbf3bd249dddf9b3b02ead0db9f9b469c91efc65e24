{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    \n    // Calculate the correct default year based on the instant\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    // Set the millis based on the parsed values\n    long newMillis = bucket.computeMillis(false, text);\n    \n    // Check if the parsed date is February 29th\n    if (bucket.getYear() != null && bucket.getMonthOfYear() != null && bucket.getDayOfMonth() != null) {\n        int year = bucket.getYear();\n        int month = bucket.getMonthOfYear();\n        int day = bucket.getDayOfMonth();\n        \n        if (month == 2 && day == 29) {\n            // Ensure the year is a leap year\n            if (!chrono.year().isLeap(year)) {\n                // If not a leap year, adjust to February 28th\n                bucket.setDayOfMonth(28);\n                newMillis = bucket.computeMillis(false, text);\n            }\n        }\n    }\n    \n    instant.setMillis(newMillis);\n    \n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    \n    instant.setChronology(chrono);\n    \n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    \n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}