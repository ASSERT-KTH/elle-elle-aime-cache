{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    // Adjust defaultYear if parsing February 29\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    // Check if parsing February 29 in a non-leap year\n    if (bucket.getMonthOfYear() == 2 && bucket.getDayOfMonth() == 29 && !isLeapYear(bucket.getYear())) {\n        // Adjust to the nearest leap year\n        int year = bucket.getYear();\n        while (!isLeapYear(year)) {\n            year++;\n        }\n        bucket.setYear(year);\n    }\n    \n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}\n\nprivate boolean isLeapYear(int year) {\n    return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}