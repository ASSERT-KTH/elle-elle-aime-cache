{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    \n    // Initialize defaultYear with the year from the input instant\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    // Create a DateTimeParserBucket with the correct year\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    \n    int newPos = parser.parseInto(bucket, text, position);\n    \n    // Compute the millis using the computed year, which may differ from the default year\n    long computedMillis = bucket.computeMillis(false, text);\n    int computedYear = chrono.year().get(computedMillis);\n    \n    // Check if the computed year is different from the default year\n    if (computedYear != defaultYear) {\n        // Recompute the millis with the correct year to handle leap years properly\n        bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, computedYear);\n        parser.parseInto(bucket, text, position);\n        computedMillis = bucket.computeMillis(false, text);\n    }\n    \n    instant.setMillis(computedMillis);\n    \n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}