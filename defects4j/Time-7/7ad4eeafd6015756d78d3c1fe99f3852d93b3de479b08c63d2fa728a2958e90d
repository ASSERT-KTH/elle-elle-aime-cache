{
    "generation": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n\n        try {\n            instant.setMillis(bucket.computeMillis(false, text));\n        } catch (IllegalFieldValueException e) {\n            // Handle cases where the parsed date is invalid\n            // For example, non-leap year February 29\n            // Bucket will store the invalid fields, so we need to adjust them\n\n            // For invalid day of month, adjust to the last day of the month\n            if (bucket.saveField(DateTimeFieldType.dayOfMonth(), bucket.getField(DateTimeFieldType.dayOfMonth()))) {\n                DateTimeField dayOfMonthField = bucket.getField(DateTimeFieldType.dayOfMonth());\n                // Set to the last day of the month\n                int lastDayOfMonth = dayOfMonthField.getMaximumValue();\n                bucket.saveField(DateTimeFieldType.dayOfMonth(), lastDayOfMonth);\n            }\n\n            // Recalculate millis\n            instant.setMillis(bucket.computeMillis(false, text));\n        }\n\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}