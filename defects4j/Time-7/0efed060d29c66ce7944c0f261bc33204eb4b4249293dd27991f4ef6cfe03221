{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    // Create a copy of the instant to avoid modifying the original instant\n    ReadWritableInstant copy = instant.copy();\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        copy.getMillis(), copy.getChronology(), iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    copy.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger()!= null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone()!= null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    copy.setChronology(chrono);\n    if (iZone!= null) {\n        copy.setZone(iZone);\n    }\n    \n    // Update the original instant with the parsed values\n    instant.setMillis(copy.getMillis());\n    instant.setChronology(copy.getChronology());\n    instant.setZone(copy.getZone());\n    \n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}