{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    // Compute the millis with partial fields set\n    long computedMillis = bucket.computeMillis(false, text);\n    \n    // Check if the date is valid, especially for leap year considerations\n    if (!chrono.dayOfMonth().isSupported() || !chrono.monthOfYear().isSupported()) {\n        throw new UnsupportedOperationException(\"Chronology does not support dayOfMonth or monthOfYear\");\n    }\n    \n    int year = chrono.year().get(computedMillis);\n    int month = chrono.monthOfYear().get(computedMillis);\n    int day = chrono.dayOfMonth().get(computedMillis);\n    \n    if (!chrono.dayOfMonth().isValid(year, month, day)) {\n        throw new IllegalFieldValueException(\"Day\", day, \"is not valid for month \" + month + \" and year \" + year);\n    }\n    \n    instant.setMillis(computedMillis);\n    \n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}