{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    // Check if the parsed month is February and the day is 29\n    if (bucket.getField(DateTimeFieldType.monthOfYear()) != null && \n        bucket.getField(DateTimeFieldType.dayOfMonth()) != null) {\n        int month = bucket.getField(DateTimeFieldType.monthOfYear()).get(bucket.getMillis());\n        int day = bucket.getField(DateTimeFieldType.dayOfMonth()).get(bucket.getMillis());\n        if (month == 2 && day == 29) {\n            // Ensure the year is a leap year\n            int year = bucket.getField(DateTimeFieldType.year()).get(bucket.getMillis());\n            if (!chrono.year().isLeap(year)) {\n                // If not a leap year, adjust the year to the nearest leap year\n                year = (year / 4) * 4;\n                if (!chrono.year().isLeap(year)) {\n                    year += 4;\n                }\n                bucket.saveField(DateTimeFieldType.year(), year);\n            }\n        }\n    }\n    \n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}