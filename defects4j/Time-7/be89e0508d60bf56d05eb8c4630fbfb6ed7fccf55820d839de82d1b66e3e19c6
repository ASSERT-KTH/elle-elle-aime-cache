{
    "generation": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        long computedMillis = bucket.computeMillis(false, text);\n\n        // Check parsed date with the computed millis, adjust if necessary\n        instant.setMillis(computedMillis);\n        Chronology parsedChrono = chrono;\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            parsedChrono = parsedChrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            parsedChrono = parsedChrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(parsedChrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n\n        instant.setMillis(computedMillis);  // Ensure the millis are set again after setting zone\n        instant.setChronology(parsedChrono);  // Ensure the chronology is set after setting zone\n\n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}