{
    "generation": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n\n        // Adjust the date to be within the valid range for the month\n        int newYear = bucket.getChronology().getDateTimeField(DateTimeFieldType.year()).get(bucket.getMillis());\n        int newMonthOfYear = bucket.getChronology().getDateTimeField(DateTimeFieldType.monthOfYear()).get(bucket.getMillis());\n        int newDayOfMonth = bucket.getChronology().getDateTimeField(DateTimeFieldType.dayOfMonth()).get(bucket.getMillis());\n\n        try {\n            instant.setMillis(bucket.computeMillis(false, text));\n\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n            instant.setChronology(chrono);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n        } catch (IllegalFieldValueException ex) {\n            // Set the date to the last valid day of the month if out of range\n            try {\n                int lastDayOfMonth = chrono.dayOfMonth().getMaximumValue(newYear, newMonthOfYear);\n                DateTimeFieldType dayOfMonthField = DateTimeFieldType.dayOfMonth();\n                instant.set(dayOfMonthField, lastDayOfMonth);\n                instant.set(bucket.getChronology().getDateTimeField(DateTimeFieldType.monthOfYear()), newMonthOfYear);\n                instant.set(bucket.getChronology().getDateTimeField(DateTimeFieldType.year()), newYear);\n            } catch (IllegalFieldValueException e) {\n                return ~position; // Return the negation of the start position if parsing fails\n            }\n        }\n\n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}