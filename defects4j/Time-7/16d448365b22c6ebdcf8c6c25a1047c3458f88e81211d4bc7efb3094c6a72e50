{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    \n    // Create a new chronology that allows for leap year calculations\n    Chronology parseChrono = chrono.withUTC();\n    \n    int defaultYear = parseChrono.year().get(instantLocal);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, parseChrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    // Compute the millis using the parsed values\n    long newMillis = bucket.computeMillis(false, text);\n    \n    // Update the instant with the new millis\n    instant.setMillis(newMillis);\n    \n    // If an offset was parsed, update the chronology\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    \n    // Set the chronology of the instant\n    instant.setChronology(chrono);\n    \n    // If a specific zone was set on the formatter, apply it\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    \n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}