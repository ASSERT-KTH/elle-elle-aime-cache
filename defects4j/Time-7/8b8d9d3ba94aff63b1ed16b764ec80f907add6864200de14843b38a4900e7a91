{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n\n    // Set the default year based on the instantLocal value,\n    // but do this after the chronology has been selected\n    int defaultYear = chrono.year().get(instantLocal);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        // If parse failed, return the error position as it is\n        return newPos;\n    }\n\n    // Check if the parsed date is February 29th and the year is not a leap year\n    if (bucket.get(DateTimeFieldType.monthOfYear()) == 2 && bucket.get(DateTimeFieldType.dayOfMonth()) == 29\n        && !bucket.getChronology().year().isLeap(bucket.computeMillis(false, text))) {\n        // If it is, try to adjust the year to the next leap year,\n        // this might throw an IllegalFieldValueException if it's not possible\n        try {\n            bucket.set(DateTimeFieldType.year(), bucket.get(DateTimeFieldType.year()) + 1);\n            while (!bucket.getChronology().year().isLeap(bucket.computeMillis(false, text))) {\n                bucket.set(DateTimeFieldType.year(), bucket.get(DateTimeFieldType.year()) + 1);\n            }\n        } catch (IllegalFieldValueException e) {\n            // If adjusting the year is not possible, return the error position\n            return ~position;\n        }\n    }\n\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}