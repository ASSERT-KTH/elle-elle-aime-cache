{
    "generation": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n\n        // Adjust the defaultYear to handle leap-year scenarios properly\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        \n        int newPos = parser.parseInto(bucket, text, position);\n\n        // Check whether the text was successfully parsed before modifying the instant\n        if (newPos >= 0) {\n            long parsedMillis = bucket.computeMillis(false, text);\n\n            // Validate day-of-month fits within the resolved calendar\n            if (bucket.getZone() != null || bucket.getOffsetInteger() != null) {\n                // Temporarily update to the resolved zone or offset to correctly calculate resolved fields\n                Chronology resolvedChrono = chrono;\n                if (bucket.getZone() != null) {\n                    resolvedChrono = chrono.withZone(bucket.getZone());\n                } else if (bucket.getOffsetInteger() != null) {\n                    int parsedOffset = bucket.getOffsetInteger();\n                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                    resolvedChrono = chrono.withZone(parsedZone);\n                }\n                chrono = resolvedChrono;\n            }\n\n            // Perform leap-year validation\n            if (bucket.getSavedField(chrono.dayOfMonth()) != null && bucket.getSavedField(chrono.monthOfYear()) != null) {\n                int parsedMonth = bucket.getSavedField(chrono.monthOfYear()).getValue();\n                int parsedDay = bucket.getSavedField(chrono.dayOfMonth()).getValue();\n                if (parsedMonth == 2 && parsedDay == 29) {\n                    if (!chrono.year().isLeap(defaultYear)) {\n                        throw new IllegalArgumentException(\"Only leap years allow February 29\");\n                    }\n                }\n            }\n\n            // Set the final computed millis\n            instant.setMillis(parsedMillis);\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n            instant.setChronology(chrono);\n\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n        }\n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}