{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));\n\n    int newPos = parser.parseInto(bucket, text, position);\n\n    if (newPos >= 0 && bucket.getSaveNumbers()[Calendar.MONTH] == 2 && bucket.getSaveNumbers()[Calendar.DAY_OF_MONTH] == 29) {\n        DateTimeZone zone = instant.getZone();\n        Chronology parsedChrono = bucket.getChronology();\n        if (parsedChrono == null) {\n            parsedChrono = chrono.withZone(zone);\n        }\n        if (!parsedChrono.isLeapYear(parsedChrono.year().get(instantLocal))) {\n            throw new IllegalFieldValueException(\"Cannot parse \" + text.subSequence(0, newPos) + \": Value 29 for dayOfMonth must be in the range [1,28] since year \" + parsedChrono.year().get(instantLocal) + \" is not a leap year\");\n        }\n    }\n\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}