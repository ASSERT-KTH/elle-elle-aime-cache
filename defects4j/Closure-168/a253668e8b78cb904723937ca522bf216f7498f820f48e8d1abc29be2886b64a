{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n    if (t.inGlobalScope()) {\n        return;\n    }\n\n    if (n.isReturn() && n.getFirstChild() != null) {\n        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n    }\n\n    if (t.getScopeDepth() <= 2) {\n        return;\n    }\n\n    if (n.isName() && NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) {\n        String name = n.getString();\n        Scope scope = t.getScope();\n        Var var = scope.getVar(name);\n        if (var != null) {\n            Scope ownerScope = var.getScope();\n            if (ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode()).recordAssignedName(name);\n            }\n\n            if (scope != ownerScope && ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n                // Propagate the type of the variable to the outer scope\n                JSType type = var.getType();\n                if (type != null) {\n                    Var outerVar = ownerScope.getVar(name);\n                    if (outerVar != null) {\n                        outerVar.setType(type);\n                    }\n                }\n            }\n        }\n    } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {\n        String name = NodeUtil.getRootOfQualifiedName(n).getString();\n        Scope scope = t.getScope();\n        Var var = scope.getVar(name);\n        if (var != null) {\n            Scope ownerScope = var.getScope();\n            if (scope != ownerScope && ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode())\n                    .recordEscapedQualifiedName(n.getQualifiedName());\n                // Propagate the type of the property to the outer scope\n                JSType type = var.getType();\n                if (type != null) {\n                    Var outerVar = ownerScope.getVar(name);\n                    if (outerVar != null) {\n                        outerVar.setType(type);\n                    }\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}