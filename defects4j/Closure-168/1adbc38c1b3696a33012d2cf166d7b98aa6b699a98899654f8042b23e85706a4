{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  if (t.getScopeDepth() <= 2) {\n    // The first-order function analyzer looks at two types of variables:\n    //\n    // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n    //\n    // 2) Local variables that are assigned more than once.\n    //\n    // We treat all global variables as escaped by default, so there's\n    // no reason to do this extra computation for them.\n    return;\n  }\n\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      // Be careful of bleeding functions, which create variables\n      // in the inner scope, not the scope where the name appears.\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  } else if (n.isCall()) {\n    // Check the types of the arguments passed to the function\n    Node function = n.getFirstChild();\n    if (function.isGetProp()) {\n      String methodName = function.getLastChild().getString();\n      Node object = function.getFirstChild();\n      if (object.isThis()) {\n        // This is a method call on 'this'\n        JSType objectType = object.getJSType();\n        if (objectType != null) {\n          JSType methodType = objectType.findPropertyType(methodName);\n          if (methodType != null && methodType.isFunctionType()) {\n            FunctionType functionType = methodType.toMaybeFunctionType();\n            Node parameters = functionType.getParametersNode();\n            Node args = n.getLastChild();\n            int paramIndex = 0;\n            while (parameters != null && args != null) {\n              JSType paramType = parameters.getJSType();\n              JSType argType = args.getJSType();\n              if (paramType != null && argType != null && !argType.isSubtype(paramType)) {\n                // Emit a warning if the argument type does not match the parameter type\n                t.report(args, TypeValidator.TYPE_MISMATCH_WARNING,\n                    \"actual parameter \" + (paramIndex + 1) + \" of \" + methodName +\n                    \" does not match formal parameter\\n\" +\n                    \"found   : \" + argType + \"\\n\" +\n                    \"required: \" + paramType);\n              }\n              parameters = parameters.getNext();\n              args = args.getNext();\n              paramIndex++;\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}