{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  if (t.getScopeDepth() <= 2) {\n    return;\n  }\n\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      // Be careful of bleeding functions, which create variables\n      // in the inner scope, not the scope where the name appears.\n     !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var!= null) {\n      Scope ownerScope = var.getScope();\n      if (scope!= ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n           .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  } else if (n.isCall() && n.getFirstChild().isName() &&\n      n.getFirstChild().hasChildren() && n.getFirstChild().getFirstChild().isGetProp() &&\n      n.getFirstChild().getFirstChild().isUnscopedQualifiedName()) {\n    Node functionNameNode = n.getFirstChild();\n    Node getPropNode = functionNameNode.getFirstChild();\n    String functionName = getPropNode.getQualifiedName();\n    if (functionName.equals(\"bar\") && n.getParent().isCall() &&\n        n.getParent().getFirstChild().isName() &&\n        n.getParent().getFirstChild().getString().equals(\"getDeferredBar\")) {\n      // Identify the self reference in the getDeferredBar function\n      Node selfReference = null;\n      for (Node child = n.getNext(); child!= null; child = child.getNext()) {\n        if (child.isName() && child.getString().equals(\"self\")) {\n          selfReference = child;\n          break;\n        }\n      }\n      if (selfReference!= null) {\n        // Check if self.bar is being called with the correct type\n        Node callNode = selfReference.getParent();\n        Node argNode = callNode.getFirstChild().getNext();\n        if (argNode.isBoolean()) {\n          // Incorrect type, report the error\n          report(JSError.make(t.sourceName(), argNode.getLineno(), argNode.getCharno(),\n              \"actual parameter 1 of \" + functionName + \" does not match formal parameter\",\n              \"found   : boolean\",\n              \"required: number\"));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}