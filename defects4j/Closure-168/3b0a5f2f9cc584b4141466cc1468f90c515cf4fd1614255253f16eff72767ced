{
    "generation": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      // If we are in the global scope, ignore Node\n      if (t.inGlobalScope()) {\n        return;\n      }\n\n      // If the Node is a return statement and it has a first child (the returned value)\n      if (n.isReturn() && n.getFirstChild() != null) {\n        // Record the fact that a non-empty return statement exists\n        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n      }\n\n      // If the scope depth is less than or equal to 2\n      if (t.getScopeDepth() <= 2) {\n        // We skip analysis for these scopes\n        return;\n      }\n\n      // If the Node is a name (variable) and it is an l-value (could be assigned to),\n      // and it is not a name of a bleeding function (function that creates variables in inner scope)\n      if (n.isName() && NodeUtil.isLValue(n) &&\n          !NodeUtil.isBleedingFunctionName(n)) {\n        String name = n.getString();\n        Scope scope = t.getScope();\n        Var var = scope.getVar(name);\n        // If the variable exists\n        if (var != null) {\n          Scope ownerScope = var.getScope();\n          // If the variable is local (not global)\n          if (ownerScope.isLocal()) {\n            // Record the fact that this name was assigned\n            data.get(ownerScope.getRootNode()).recordAssignedName(name);\n          }\n          // If the variable is accessed from a scope other than its defining scope and it is local\n          if (scope != ownerScope && ownerScope.isLocal()) {\n            // Record the fact that this was an escaped variable\n            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n          }\n        }\n      }\n      // If the Node is a property access (getProp) and it is an unscoped qualified name,\n      // and it is an l-value (could be assigned to)\n      else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n               NodeUtil.isLValue(n)) {\n        String name = NodeUtil.getRootOfQualifiedName(n).getString();\n        Scope scope = t.getScope();\n        Var var = scope.getVar(name);\n        // If the variable exists and it is local (not global)\n        if (var != null && var.getScope().isLocal()) {\n          // Record the fact that this was an escaped qualified name\n          data.get(var.getScope().getRootNode())\n              .recordEscapedQualifiedName(n.getQualifiedName());\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}