{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  if (t.getScopeDepth() <= 2) {\n    // The first-order function analyzer looks at two types of variables:\n    //\n    // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n    //\n    // 2) Local variables that are assigned more than once.\n    //\n    // We treat all global variables as escaped by default, so there's\n    // no reason to do this extra computation for them.\n    return;\n  }\n\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      // Be careful of bleeding functions, which create variables\n      // in the inner scope, not the scope where the name appears.\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n             NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  } else if (n.isCall()) {\n    // Check the arguments of the function call to ensure type correctness\n    Node calledNode = n.getFirstChild();\n    Node argNode = calledNode.getNext();\n    if (calledNode.isGetProp() && calledNode.isQualifiedName()) {\n      String qualifiedName = calledNode.getQualifiedName();\n      JSType functionType = t.getTypeResolver().getType(calledNode);\n      if (functionType != null && functionType instanceof FunctionType) {\n        FunctionType function = (FunctionType) functionType;\n        Node paramList = function.getParametersNode();\n        int i = 0;\n        for (Node param = paramList.getFirstChild(), arg = argNode;\n             param != null && arg != null;\n             param = param.getNext(), arg = arg.getNext(), i++) {\n          JSType paramType = param.getJSType();\n          JSType argType = t.getTypeInfo().getType(arg);\n          if (paramType != null && argType != null && !paramType.isEquivalentTo(argType)) {\n            t.report(arg, TypeMismatch.WARNING, argType, paramType);\n          }\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}