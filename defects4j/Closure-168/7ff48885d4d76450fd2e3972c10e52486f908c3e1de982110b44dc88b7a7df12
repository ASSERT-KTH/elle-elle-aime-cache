{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  if (t.getScopeDepth() <= 2) {\n    // The first-order function analyzer looks at two types of variables:\n    //\n    // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n    //\n    // 2) Local variables that are assigned more than once.\n    //\n    // We treat all global variables as escaped by default, so there's\n    // no reason to do this extra computation for them.\n    return;\n  }\n\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      // Be careful of bleeding functions, which create variables\n      // in the inner scope, not the scope where the name appears.\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  } else if (n.isCall()) {\n    // Check for type mismatches in function calls\n    Node functionNode = n.getFirstChild();\n    if (functionNode.isName() || functionNode.isGetProp()) {\n      String functionName = functionNode.getQualifiedName();\n      Var functionVar = t.getScope().getVar(functionName);\n      if (functionVar != null && functionVar.getType() != null) {\n        JSType functionType = functionVar.getType();\n        if (functionType.isFunctionType()) {\n          FunctionType functionFuncType = functionType.toMaybeFunctionType();\n          if (functionFuncType != null) {\n            Node args = n.getSecondChild();\n            Node params = functionFuncType.getParametersNode();\n            int i = 0;\n            for (Node arg = args; arg != null && i < params.getChildCount(); arg = arg.getNext(), i++) {\n              JSType paramType = params.getChildAtIndex(i).getJSType();\n              JSType argType = arg.getJSType();\n              if (argType != null && paramType != null && !paramType.isUnknownType() && !argType.isSubtype(paramType)) {\n                t.report(n, TypeValidator.INVALID_ARGUMENT_TYPE, paramType.toString(), argType.toString(), i + 1);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}