{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n    if (t.inGlobalScope()) {\n        return;\n    }\n\n    if (n.isReturn() && n.getFirstChild() != null) {\n        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n    }\n\n    if (t.getScopeDepth() <= 2) {\n        // The first-order function analyzer looks at two types of variables:\n        //\n        // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n        //\n        // 2) Local variables that are assigned more than once.\n        //\n        // We treat all global variables as escaped by default, so there's\n        // no reason to do this extra computation for them.\n        return;\n    }\n\n    if (n.isName() && NodeUtil.isLValue(n) &&\n        // Be careful of bleeding functions, which create variables\n        // in the inner scope, not the scope where the name appears.\n        !NodeUtil.isBleedingFunctionName(n)) {\n        String name = n.getString();\n        Scope scope = t.getScope();\n        Var var = scope.getVar(name);\n        if (var != null) {\n            Scope ownerScope = var.getScope();\n            if (ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode()).recordAssignedName(name);\n            }\n\n            if (scope != ownerScope && ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n            }\n        }\n    } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n        NodeUtil.isLValue(n)) {\n        String name = NodeUtil.getRootOfQualifiedName(n).getString();\n        Scope scope = t.getScope();\n        Var var = scope.getVar(name);\n        if (var != null) {\n            Scope ownerScope = var.getScope();\n            if (scope != ownerScope && ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode())\n                    .recordEscapedQualifiedName(n.getQualifiedName());\n            }\n        }\n    } else if (n.isCall()) {\n        // Check the arguments of the call to ensure they match the expected types\n        Node functionNode = n.getFirstChild();\n        Node argNode = functionNode.getNext();\n        if (functionNode != null && argNode != null) {\n            Var functionVar = t.getScope().getVar(functionNode.getQualifiedName());\n            if (functionVar != null) {\n                JSType functionType = functionVar.getType();\n                if (functionType != null && functionType.isFunctionType()) {\n                    FunctionType fnType = functionType.toMaybeFunctionType();\n                    if (fnType != null) {\n                        Node paramList = fnType.getParametersNode();\n                        Node param = paramList.getFirstChild();\n                        Node arg = argNode;\n                        int i = 0;\n                        while (param != null && arg != null) {\n                            JSType paramType = param.getJSType();\n                            JSType argType = arg.getJSType();\n                            if (paramType != null && argType != null && !paramType.isSubtype(argType)) {\n                                t.report(n, mismatchedTypesWarning, paramType, argType);\n                            }\n                            param = param.getNext();\n                            arg = arg.getNext();\n                            i++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}