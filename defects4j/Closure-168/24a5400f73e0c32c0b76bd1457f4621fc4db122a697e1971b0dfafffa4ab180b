{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t == null || t.inGlobalScope()) {\n    return;\n  }\n\n  if (n.isReturn() && n.getFirstChild() != null) {\n    Node scopeRoot = t.getScopeRoot();\n    if (scopeRoot != null) {\n      data.get(scopeRoot).recordNonEmptyReturn();\n    }\n  }\n\n  if (t.getScopeDepth() <= 2) {\n    return;\n  }\n\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    if (scope != null) {\n      Var var = scope.getVar(name);\n      if (var != null) {\n        Scope ownerScope = var.getScope();\n        if (ownerScope != null && ownerScope.isLocal()) {\n          Node rootNode = ownerScope.getRootNode();\n          if (rootNode != null) {\n            data.get(rootNode).recordAssignedName(name);\n          }\n\n          if (scope != ownerScope) {\n            data.get(rootNode).recordEscapedVarName(name);\n          }\n        }\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    if (scope != null) {\n      Var var = scope.getVar(name);\n      if (var != null) {\n        Scope ownerScope = var.getScope();\n        if (ownerScope != null && scope != ownerScope && ownerScope.isLocal()) {\n          Node rootNode = ownerScope.getRootNode();\n          if (rootNode != null) {\n            data.get(rootNode).recordEscapedQualifiedName(n.getQualifiedName());\n          }\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}