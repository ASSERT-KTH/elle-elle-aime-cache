{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  if (t.getScopeDepth() <= 2) {\n    // The first-order function analyzer looks at two types of variables:\n    //\n    // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n    //\n    // 2) Local variables that are assigned more than once.\n    //\n    // We treat all global variables as escaped by default, so there's\n    // no reason to do this extra computation for them.\n    return;\n  }\n\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      // Be careful of bleeding functions, which create variables\n      // in the inner scope, not the scope where the name appears.\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  } else if (n.isCall()) {\n    // Handle function calls to ensure the parameters match the function signature\n    Node callee = n.getFirstChild();\n    if (callee != null && callee.isGetProp()) {\n      String methodName = callee.getLastChild().getString();\n      Scope scope = t.getScope();\n      Var methodVar = scope.getVar(methodName);\n      if (methodVar != null && methodVar.getType() != null) {\n        Node methodNode = methodVar.getNode();\n        if (methodNode != null && methodNode.isFunction()) {\n          Node paramList = methodNode.getFirstChild().getNext();\n          for (Node param = paramList.getFirstChild(); param != null; param = param.getNext()) {\n            if (param.isName()) {\n              String paramName = param.getString();\n              Node arg = n.getFirstChild().getNext();\n              if (arg != null && arg.isName()) {\n                Var argVar = scope.getVar(arg.getString());\n                if (argVar != null && !argVar.getType().isSubtypeOf(methodVar.getType())) {\n                  // Report type mismatch\n                  t.report(JSError.make(n, TypeValidator.TYPE_MISMATCH_WARNING));\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}