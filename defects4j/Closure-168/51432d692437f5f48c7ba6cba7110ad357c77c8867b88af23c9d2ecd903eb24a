{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (t.inGlobalScope()) {\n        return;\n    }\n\n    if (n.isReturn() && n.getFirstChild() != null) {\n        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n    }\n\n    if (t.getScopeDepth() <= 2) {\n        // The first-order function analyzer looks at two types of variables:\n        //\n        // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n        //\n        // 2) Local variables that are assigned more than once.\n        //\n        // We treat all global variables as escaped by default, so there's\n        // no reason to do this extra computation for them.\n        return;\n    }\n\n    if (n.isName() && NodeUtil.isLValue(n) &&\n        // Be careful of bleeding functions, which create variables\n        // in the inner scope, not the scope where the name appears.\n        !NodeUtil.isBleedingFunctionName(n)) {\n        String name = n.getString();\n        Scope scope = t.getScope();\n        Var var = scope.getVar(name);\n        if (var != null) {\n            Scope ownerScope = var.getScope();\n            if (ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode()).recordAssignedName(name);\n            }\n\n            if (scope != ownerScope && ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n            }\n        }\n    } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n               NodeUtil.isLValue(n)) {\n        String name = NodeUtil.getRootOfQualifiedName(n).getString();\n        Scope scope = t.getScope();\n        Var var = scope.getVar(name);\n        if (var != null) {\n            Scope ownerScope = var.getScope();\n            if (scope != ownerScope && ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode())\n                    .recordEscapedQualifiedName(n.getQualifiedName());\n            }\n        }\n    } else if (n.isCall()) {\n        // Check function calls for type mismatches\n        Node funcNode = n.getFirstChild();\n        if (funcNode != null) {\n            FunctionType functionType = JSType.toMaybeFunctionType(funcNode.getJSType());\n            if (functionType != null) {\n                Node argNode = funcNode.getNext();\n                int paramIndex = 0;\n                for (Node param : functionType.getParameters()) {\n                    if (argNode != null) {\n                        JSType expectedType = param.getJSType();\n                        JSType actualType = argNode.getJSType();\n                        if (expectedType != null && actualType != null && !expectedType.isEquivalentTo(actualType)) {\n                            compiler.report(JSError.make(argNode, TypeCheck.PARAMETER_MISMATCH, expectedType.toString(), actualType.toString(), String.valueOf(paramIndex + 1)));\n                        }\n                        argNode = argNode.getNext();\n                        paramIndex++;\n                    }\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}