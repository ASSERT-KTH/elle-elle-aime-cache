{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope() || t.getScopeDepth() <= 2) {\n    // Skip global scope or if scope depth is 2 or less as we have handled these scenarios\n    return;\n  }\n\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      !NodeUtil.isBleedingFunctionName(n)) {\n    // Check local variables that are assigned or escaped\n    handleLocalVariables(t, n);\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    // Check local qualified names that are escaped\n    handleLocalQualifiedNames(t, n);\n  }\n\n  // Check for non-empty return statements\n  if (n.isReturn() && n.getFirstChild() != null) {\n    t.getData().get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n}\n\nprivate void handleLocalVariables(NodeTraversal t, Node n) {\n  String name = n.getString();\n  Scope scope = t.getScope();\n  Var var = scope.getVar(name);\n  if (var != null) {\n    Scope ownerScope = var.getScope();\n    if (ownerScope.isLocal()) {\n      t.getData().get(ownerScope.getRootNode()).recordAssignedName(name);\n      if (scope != ownerScope) {\n        t.getData().get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  }\n}\n\nprivate void handleLocalQualifiedNames(NodeTraversal t, Node n) {\n  String name = NodeUtil.getRootOfQualifiedName(n).getString();\n  Scope scope = t.getScope();\n  Var var = scope.getVar(name);\n  if (var != null) {\n    Scope ownerScope = var.getScope();\n    if (scope != ownerScope && ownerScope.isLocal()) {\n      t.getData().get(ownerScope.getRootNode())\n          .recordEscapedQualifiedName(n.getQualifiedName());\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}