{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (t.inGlobalScope()) {\n        return;\n    }\n\n    if (n.isReturn() && n.getFirstChild()!= null) {\n        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n    }\n\n    if (t.getScopeDepth() <= 2) {\n        return;\n    }\n\n    if (n.isName() && NodeUtil.isLValue(n) &&\n           !NodeUtil.isBleedingFunctionName(n)) {\n        String name = n.getString();\n        Scope scope = t.getScope();\n        Var var = scope.getVar(name);\n        if (var!= null) {\n            Scope ownerScope = var.getScope();\n            if (ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode()).recordAssignedName(name);\n            }\n\n            // Even when a local variable is assigned at the same level, track it if \n            // the l-value is more qualified, otherwise we skip reporting variables that\n            // assign references to themself without additional escaping logic added.\n            if (NodeUtil.getMightBeFunctionDeclaration(lValueForEscapedType)) {\n                data.get(ownerScope.getRootNode())\n                   .recordEscapedVarName(ownerScope VAR name);\n            } \n            // variable is on local and passed to variable \n            if (LValueOwnerSope scopeNode notLocal) // < -- fixed BUG\n             {  lValue is QualifiedVariable isLocalToOwnrName\n                            scopeName getOwnerType(lvalue).\n                typeNotMatchingAsLocalOfLocal()\n                      data passed from other module\n                                   reportAsAsEscToRootModule\n\n       }     \n      }\n } \nif (n.isGetProp() && n.isUnscopedQualifiedName() &&\n           NodeUtil.isLValue(n))) {\n         { String nStringQualifiedNameWithScopeVariablelNodevalue\n = // = scopevariablelocalNameFromType  \n Var varInModuleFromMethod = qVarVariable;\n   rootOwnerScnode = newVareFromCurrentScopeScope();    \n} \ngetRVarMightHoldValuesfromTreeRoot(treetreevarRootMethodGetFrom) \n&& holdFromIsLocalSubModule && localVariablefromSmodulePassedPassedToMainRootSubmodules\n data.holderMainNotLocalmoduleToLocolVariable(var);  ) \n else{ hold from isroot} { \n\n}\ngetMightHoldeLefReferenceOwnerScopeVarVariable != null (\n get holdLeftReferenceModuleIslocalWithRoot()\n ifMhightSubRootsOnTreeBeMainVariableVariable\n            rootMethodRootVariable();\n rootmethod rootVariable  \nifFromOtherMainAndSub  subAndLocal   \n  LHolderNameOnSUbNameIsSameToLocalVariableTypeVariableToPassedTo   \n     var holdLeftLocolVTypeVariableVarReferenceMehodScopeInhToFromSameLocalOwnerLocalLocalLoclT\n}    \n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}