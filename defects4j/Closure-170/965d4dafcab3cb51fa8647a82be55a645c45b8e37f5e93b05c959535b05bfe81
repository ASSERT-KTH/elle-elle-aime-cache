{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName)) {\n            // Check if the variable is used as the lhs of an assignment.\n            if (parent.isAssign() && parent.getFirstChild() == n) {\n              // Skip this node if it's part of a chain of assignments.\n              Node assignParent = parent.getParent();\n              while (assignParent.isAssign()) {\n                if (assignParent.getFirstChild()!= parent) {\n                  break;\n                }\n                parent = assignParent;\n                assignParent = parent.getParent();\n              }\n              if (parent.getParent() == cfgNode && cfgNode.isAssign()) {\n                return;  // Skip the use in this case.\n              }\n            }\n            numUsesWithinCfgNode++;\n          }\n        }\n\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}