{
    "generation": "/**\n * Computes the number of uses of the variable varName and store it in\n * numUseWithinUseCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName)) {\n        // Check if this is an assignment to the variable\n        boolean isAssignment = parent.isAssign() && parent.getFirstChild() == n;\n        \n        // Check if we're inside a hook (ternary operator)\n        boolean insideHook = false;\n        Node ancestor = parent;\n        while (ancestor != null && ancestor != cfgNode) {\n          if (ancestor.isHook()) {\n            insideHook = true;\n            break;\n          }\n          ancestor = ancestor.getParent();\n        }\n        \n        // Count use if it's not an assignment or if it's inside a hook\n        if (!isAssignment || insideHook) {\n          numUsesWithinCfgNode++;\n        }\n      }\n    }\n\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}