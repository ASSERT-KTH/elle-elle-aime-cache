{
    "generation": "/**\n * Computes the number of uses of the variable varName and store it in\n * numUseWithinUseCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName)) {\n        // Check if the name node is on the left-hand side of an assignment\n        if (parent.isAssign() && parent.getFirstChild() == n) {\n          // Don't count lhs of assignments\n          return;\n        }\n        // Don't count uses in the same ternary operator condition\n        if (parent.isCond() && parent.getFirstChild() == n) {\n          return;\n        }\n        // Don't count uses in the same logical operator condition\n        if (parent.isAnd() || parent.isOr() || parent.isHook()) {\n          if (parent.getFirstChild() == n || parent.getChildAtIndex(1) == n) {\n            return;\n          }\n        }\n        // Count the use\n        numUsesWithinCfgNode++;\n      }\n    }\n\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}