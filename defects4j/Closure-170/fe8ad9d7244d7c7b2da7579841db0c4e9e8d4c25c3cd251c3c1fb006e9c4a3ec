{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName)) {\n            // We make a special exception when the entire cfgNode is a chain\n            // of assignments, since in that case the assignment statements\n            // will happen after the inlining of the right hand side.\n            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n            //   and remove this special case.\n            if (!(parent.isAssign() && parent.getFirstChild() == n) &&\n                !isInTernaryCondition(n, parent)) {\n              // Don't count lhs of top-level assignment chain\n              // Don't count uses in the condition part of a ternary operator\n              numUsesWithinCfgNode++;\n            }\n          }\n        }\n\n        private boolean isInTernaryCondition(Node n, Node parent) {\n          // Check if the node is part of the condition of a ternary operator\n          while (parent != null) {\n            if (parent.isHook() && parent.getFirstChild() == n) {\n              return true;\n            }\n            n = parent;\n            parent = n.getParent();\n          }\n          return false;\n        }\n\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}