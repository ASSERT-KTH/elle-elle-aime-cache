{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName)) {\n            // Check if the node is the left-hand side of an assignment\n            boolean isLhsOfAssign = parent.isAssign() && parent.getFirstChild() == n;\n            \n            // Check if the parent is a hook (ternary operator)\n            boolean isInHook = parent.isHook();\n            \n            // Check if the parent is an operation node\n            boolean isInOperation = parent.isAdd() || parent.isSub() || parent.isMul() || parent.isDiv() ||\n                                    parent.isMod() || parent.isBitAnd() || parent.isBitOr() || parent.isBitXor() ||\n                                    parent.isLsh() || parent.isRsh() || parent.isUrsh();\n\n            if (!isLhsOfAssign || (isInHook || isInOperation)) {\n              // Count the use if it's not the LHS of an assignment, or if it's \n              // inside a hook or operation even if it's the LHS\n              numUsesWithinCfgNode++;\n            }\n          }\n        }\n\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}