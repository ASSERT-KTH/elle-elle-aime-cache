{
    "generation": "/**\n * Computes the number of uses of the variable varName and store it in\n * numUseWithinCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName)) {\n        // Check if the name node is part of an assignment\n        if (parent.isAssign() && parent.getFirstChild() == n) {\n          // This is the lhs of an assignment, do not count\n          return;\n        }\n        // Check if the name node is part of a ternary operation and is the condition\n        if (parent.isHook() && (parent.getFirstChild() == n)) {\n          // This is the condition part of a ternary, do not count\n          return;\n        }\n        // Count the use of the variable\n        numUsesWithinCfgNode++;\n      }\n    }\n\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}