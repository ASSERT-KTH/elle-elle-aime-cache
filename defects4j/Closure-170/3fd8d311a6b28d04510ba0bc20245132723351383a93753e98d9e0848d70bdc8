{
    "generation": "private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName) &&\n            // Check if the name is used in a side-effect expression or\n            // under a special context like conditional statements\n              !(parent.isAssign() && parent.getFirstChild() == n) &&\n              !(parent.isConditional() && parent.getFirstChild().isAssign()) &&\n              !(parent.isLogicalOr() && parent.getFirstChild().isAssign()) &&\n              !(parent.isBinaryOperation() && parent.getFirstChild().isAssign())) {\n              // Don't count lhs of top-level assignment or special context\n              numUsesWithinCfgNode++;\n          }\n        }\n\n      };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}