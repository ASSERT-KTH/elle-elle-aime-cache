{
    "generation": "/**\n * Computes the number of uses of the variable varName and store it in\n * numUseWithinUseCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName) &&\n         !(parent.isAssign() &&\n             (parent.getFirstChild() == n || \n              **isConditionalParent(parent, n)**))) {\n        // Don't count lhs of top-level assignment chain or conditional assignments\n        numUsesWithinCfgNode++;\n      }\n    }\n\n    /**\n     * Checks if the parent node is a conditional statement (e.g.,?:, ||, &&, *, etc.)\n     * that contains an assignment to the variable as one of its operands.\n     */\n    private boolean isConditionalParent(Node parent, Node n) {\n      switch (parent.getToken()) {\n        case QUEST:\n        case OR:\n        case AND:\n        case MUL:\n          // Check if the variable assignment is within the conditional operands\n          return **containsAssignOperand(parent, n)**;\n        default:\n          return false;\n      }\n    }\n\n    /**\n     * Checks if the parent node's operands contain an assignment to the variable.\n     */\n    private boolean containsAssignOperand(Node parent, Node n) {\n      for (Node child = parent.getFirstChild(); child!= null; child = child.getNext()) {\n        if (child.isAssign() && child.getFirstChild() == n) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}