{
    "generation": "/**\n * Computes the number of uses of the variable varName and store it in\n * numUseWithinCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName) &&\n        // We make a special exception when the entire cfgNode is a chain\n        // of assignments, since in that case the assignment statements\n        // will happen after the inlining of the right hand side.\n        // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n        //   and remove this special case.\n          !(parent.isAssign() &&\n           (parent.getFirstChild() == n) &&\n           // Ensure that we are not in a hook expression (ternary operator)\n           !parent.getParent().isHook())) {\n          // Don't count lhs of top-level assignment chain that is not part of a hook\n          numUsesWithinCfgNode++;\n      }\n    }\n\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}