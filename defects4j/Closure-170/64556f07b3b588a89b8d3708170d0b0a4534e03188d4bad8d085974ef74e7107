{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName)) {\n            // Count as a use if it's not the left-hand side of an assignment,\n            // or if it's the left-hand side of the top-level assignment in the cfgNode\n            if (!parent.isAssign() || parent.getFirstChild() != n) {\n              numUsesWithinCfgNode++;\n            } else {\n              // If it's the left-hand side of an assignment, check if it's used elsewhere in the cfgNode\n              Node current = cfgNode;\n              while (current != null) {\n                if (current.isAssign() && current.getFirstChild() == n) {\n                  // If it's the left-hand side of any assignment in the cfgNode, don't count it as a use\n                  return;\n                }\n                current = current.getNext();\n              }\n              // If we've reached here, it's the left-hand side of the top-level assignment\n              numUsesWithinCfgNode++;\n            }\n          }\n        }\n\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}