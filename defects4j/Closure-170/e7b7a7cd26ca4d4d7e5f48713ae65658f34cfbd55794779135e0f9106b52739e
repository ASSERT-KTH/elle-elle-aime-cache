{
    "generation": "/**\n * Computes the number of uses of the variable varName and store it in\n * numUseWithinUseCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName) &&\n          // We make a special exception when the entire cfgNode is a chain\n          // of assignments, since in that case the assignment statements\n          // will happen after the inlining of the right hand side.\n          // Check if the parent is an assignment and the node is its first child\n          // or if the parent is a conditional expression and the node is not its \n          // condition.\n         !(parent.isAssign() && parent.getFirstChild() == n) &&\n         !(parent.isConditional() && parent.getFirstChild() == n)) {\n            // Don't count lhs of top-level assignment chain\n            numUsesWithinCfgNode++;\n      }\n    }\n\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}