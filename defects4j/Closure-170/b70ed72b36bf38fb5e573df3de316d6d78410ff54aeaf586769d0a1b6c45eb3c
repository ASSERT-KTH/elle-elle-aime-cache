{
    "generation": "/**\n * Computes the number of uses of the variable varName and store it in\n * numUseWithinUseCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName) &&\n         !(isTopLevelAssign(parent, n, cfgNode))) {\n        numUsesWithinCfgNode++;\n      }\n    }\n\n    /**\n     * Checks if the given node is the LHS of a top-level assignment chain\n     * within the provided cfgNode.\n     */\n    private boolean isTopLevelAssign(Node parent, Node n, Node cfgNode) {\n      return parent.isAssign() && parent.getFirstChild() == n &&\n          (cfgNode == parent || cfgNode.getFirstChild() == parent);\n    }\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}