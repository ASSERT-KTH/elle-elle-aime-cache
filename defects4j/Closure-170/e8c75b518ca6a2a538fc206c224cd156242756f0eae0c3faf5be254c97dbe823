{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n        numUsesWithinCfgNode = 0;\n        AbstractCfgNodeTraversalCallback gatherCb =\n            new AbstractCfgNodeTraversalCallback() {\n\n            @Override\n            public void visit(NodeTraversal t, Node n, Node parent) {\n                if (n.isName() && n.getString().equals(varName)) {\n                    // Don't count lhs of top-level assignment chain\n                    if (parent.isAssign() && parent.getFirstChild() == n) {\n                        return;\n                    }\n                    // Don't count lhs of assignments within ternary expressions\n                    if (parent.isHook() && parent.getFirstChild() != n) {\n                        Node hookParent = parent.getParent();\n                        if (hookParent != null && hookParent.isAssign() && \n                            hookParent.getFirstChild() == n) {\n                            return;\n                        }\n                    }\n                    numUsesWithinCfgNode++;\n                }\n            }\n        };\n\n        NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}