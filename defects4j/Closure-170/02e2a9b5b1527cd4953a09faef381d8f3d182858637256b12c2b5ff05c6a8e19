{
    "generation": "/**\n * Computes the number of uses of the variable varName and store it in\n * numUseWithinUseCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName) &&\n          // Check if the node is part of an assignment expression and that assignment is not a descendant of cfgNode\n          (!getNodeWithRole(n, Node.Role.LHS) != null &&\n          !isDescendant(getNodeWithRole(n, Node.Role.LHS).getParent(), cfgNode))) {\n        numUsesWithinCfgNode++;\n      }\n    }\n\n    // Helper method to get the node with a specific role\n    private Node getNodeWithRole(Node n, Node.Role role) {\n      Node traversal = n;\n      while (traversal != null) {\n        if (traversal.getRole() == role) {\n          return traversal;\n        }\n        traversal = traversal.getParent();\n      }\n      return null;\n    }\n\n    // Helper method to check if a node is a descendant of another node\n    private boolean isDescendant(Node n, Node potentialAncestor) {\n      Node traversal = n;\n      while (traversal != null) {\n        if (traversal == potentialAncestor) {\n          return true;\n        }\n        traversal = traversal.getParent();\n      }\n      return false;\n    }\n\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}