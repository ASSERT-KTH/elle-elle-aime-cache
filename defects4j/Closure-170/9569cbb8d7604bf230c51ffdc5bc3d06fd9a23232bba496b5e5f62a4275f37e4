{
    "generation": "/**\n * Computes the number of uses of the variable varName and store it in\n * numUseWithinUseCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName)) {\n        // Check if the node is part of an assignment\n        boolean isAssignmentLHS = parent.isAssign() && parent.getFirstChild() == n;\n        \n        // Allow counting if it's not the left-hand side of an assignment,\n        // or if it's part of a conditional expression (hook)\n        if (!isAssignmentLHS || \n            (parent.isHook() || \n             (parent.isAssign() && parent.getParent() != null && parent.getParent().isHook()))) {\n          numUsesWithinCfgNode++;\n        }\n      }\n    }\n\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}