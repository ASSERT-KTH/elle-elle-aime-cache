{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName)) {\n            // We make a special exception when the entire cfgNode is a chain\n            // of assignments, since in that case the assignment statements\n            // will happen after the inlining of the right hand side.\n            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n            //   and remove this special case.\n            if (!(parent.isAssign() && parent.getFirstChild() == n) &&\n                !isLeftHandSideOfTernaryAssignment(n, parent)) {\n              // Don't count lhs of top-level assignment chain or lhs of ternary assignment\n              numUsesWithinCfgNode++;\n            }\n          }\n        }\n\n        /**\n         * Checks if the node is the left-hand side of a ternary assignment.\n         */\n        private boolean isLeftHandSideOfTernaryAssignment(Node n, Node parent) {\n          if (parent.isHook()) {\n            Node condition = parent.getFirstChild();\n            Node thenPart = condition.getNext();\n            Node elsePart = thenPart.getNext();\n            return isLeftHandSideOfAssignment(n, thenPart) || isLeftHandSideOfAssignment(n, elsePart);\n          }\n          return false;\n        }\n\n        /**\n         * Checks if the node is the left-hand side of an assignment within a given part of a ternary expression.\n         */\n        private boolean isLeftHandSideOfAssignment(Node n, Node part) {\n          if (part == null) {\n            return false;\n          }\n          if (part.isAssign() && part.getFirstChild() == n) {\n            return true;\n          }\n          return false;\n        }\n\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}