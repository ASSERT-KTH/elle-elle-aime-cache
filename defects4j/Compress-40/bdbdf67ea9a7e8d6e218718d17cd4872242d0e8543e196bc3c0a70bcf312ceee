{
    "generation": "/**\n * Returns at most 63 bits read from the underlying stream.\n *\n * @param count the number of bits to read, must be a positive\n * number not bigger than 63.\n * @return the bits concatenated as a long using the stream's byte order.\n *         -1 if the end of the underlying stream has been reached before reading\n *         the requested number of bits\n * @throws IOException on error\n */\npublic long readBits(final int count) throws IOException {\n    if (count < 0 || count > 63) { // Fixed: MAXIMUM_CACHE_SIZE -> 63\n        throw new IllegalArgumentException(\"count must not be negative or greater than 63\");\n    }\n    while (bitsCachedSize < count) {\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= (nextByte << bitsCachedSize);\n        } else {\n            bitsCached <<= 8;\n            bitsCached |= nextByte;\n        }\n        bitsCachedSize += 8;\n    }\n    \n    final long bitsOut;\n    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = (bitsCached & MASKS[count]);\n        bitsCached >>>= count;\n    } else {\n        // Fix: Avoid overflow by splitting the shift into two steps\n        final int remainingBits = bitsCachedSize - count;\n        if (remainingBits > 32) { // More than 32 bits to shift, do in two steps\n            bitsCached >>= 32;\n            bitsCached >>>= (remainingBits - 32);\n        } else {\n            bitsCached >>>= remainingBits;\n        }\n        bitsOut = (bitsCached & MASKS[count]);\n        // Undo the additional shift for bitsOut calculation\n        if (remainingBits > 32) {\n            bitsOut <<= (remainingBits - 32);\n        }\n        bitsOut |= (bitsCached >> 32) & (MASKS[count] >>> (remainingBits - 32));\n    }\n    bitsCachedSize -= count;\n    return bitsOut;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}