{
    "generation": "/**\n * Returns at most 63 bits read from the underlying stream.\n *\n * @param count the number of bits to read, must be a positive\n * number not bigger than 63.\n * @return the bits concatenated as a long using the stream's byte order.\n *         -1 if the end of the underlying stream has been reached before reading\n *         the requested number of bits\n * @throws IOException on error\n */\npublic long readBits(final int count) throws IOException {\n    if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n        throw new IllegalArgumentException(\"count must not be positive and less than or equal to \" + MAXIMUM_CACHE_SIZE);\n    }\n    loadBytesIfNecessary(count);\n\n    final long bitsOut;\n    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = (bitsCached & MASKS[count]);\n    } else {\n        bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n        bitsCached <<= count;\n    }\n    bitsCachedSize -= count;\n    return bitsOut;\n}\n\nprivate void loadBytesIfNecessary(final int count) throws IOException {\n    while (bitsCachedSize < count) {\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            throw new EOFException(\"Unexpected end of input stream\");\n        }\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= (nextByte << bitsCachedSize);\n        } else {\n            bitsCached >>= 8;\n            bitsCached |= (nextByte << (bitsCachedSize >= 8 ? bitsCachedSize - 8 : 56));\n        }\n        bitsCachedSize += 8;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}