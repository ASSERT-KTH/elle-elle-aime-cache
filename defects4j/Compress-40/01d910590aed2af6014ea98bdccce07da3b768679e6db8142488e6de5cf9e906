{
    "generation": "/**\n * Returns at most 63 bits read from the underlying stream.\n *\n * @param count the number of bits to read, must be a positive\n * number not bigger than 63.\n * @return the bits concatenated as a long using the stream's byte order.\n *         -1 if the end of the underlying stream has been reached before reading\n *         the requested number of bits\n * @throws IOException on error\n */\npublic long readBits(final int count) throws IOException {\n    if (count < 0 || count > 63) {\n        throw new IllegalArgumentException(\"count must not be negative or greater than 63\");\n    }\n    long result = 0;\n    int remaining = count;\n    while (remaining > 0) {\n        if (bitsCachedSize == 0) {\n            final long nextByte = in.read();\n            if (nextByte < 0) {\n                if (result == 0) {\n                    return -1;\n                }\n                break;\n            }\n            bitsCached = nextByte;\n            bitsCachedSize = 8;\n        }\n        final int bitsToTake = Math.min(remaining, bitsCachedSize);\n        long bits;\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            bits = bitsCached & MASKS[bitsToTake];\n            bitsCached >>>= bitsToTake;\n        } else {\n            bits = (bitsCached >>> (bitsCachedSize - bitsToTake)) & MASKS[bitsToTake];\n            bitsCached <<= bitsToTake;\n        }\n        result = (result << bitsToTake) | bits;\n        bitsCachedSize -= bitsToTake;\n        remaining -= bitsToTake;\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}