{
    "generation": "public long readBits(final int count) throws IOException {\n    if (count < 0 || count > 63) { // Ensure count is within valid range [0, 63]\n        throw new IllegalArgumentException(\"count must not be negative or greater than 63\");\n    }\n    while (bitsCachedSize < count) {\n        final int nextByte = in.read(); // In Java, read returns an int in range [0, 255] or -1 for EOF\n        if (nextByte < 0) {\n            return -1; // Properly return -1 for end of stream\n        }\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= ((long) nextByte << bitsCachedSize); // Cast to long to avoid truncation issues\n        } else {\n            bitsCached <<= 8;\n            bitsCached |= nextByte;\n        }\n        bitsCachedSize += 8;\n    }\n\n    final long bitsOut;\n    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = (bitsCached & MASKS[count]);\n        bitsCached >>>= count;\n    } else {\n        bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n    }\n    bitsCachedSize -= count;\n    return bitsOut;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}