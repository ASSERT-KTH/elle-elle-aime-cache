{
    "generation": "/**\n * Returns at most 63 bits read from the underlying stream.\n *\n * @param count the number of bits to read, must be a positive\n * number not bigger than 63.\n * @return the bits concatenated as a long using the stream's byte order.\n *         -1 if the end of the underlying stream has been reached before reading\n *         the requested number of bits\n * @throws IOException on error\n */\npublic long readBits(final int count) throws IOException {\n    if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n        throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n    }\n    \n    long bitsOut = 0;\n    int remaining = count;\n\n    while (remaining > 0) {\n        if (bitsCachedSize < remaining) {\n            if (bitsCachedSize > 0) {\n                // Extract the available bits\n                long extractedBits;\n                if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                    extractedBits = bitsCached & MASKS[bitsCachedSize];\n                    bitsOut |= extractedBits << (remaining - bitsCachedSize);\n                } else {\n                    extractedBits = bitsCached >>> (64 - bitsCachedSize);\n                    bitsOut = (bitsOut << bitsCachedSize) | extractedBits;\n                }\n                remaining -= bitsCachedSize;\n                bitsCached = 0;\n                bitsCachedSize = 0;\n            }\n\n            // Read more bytes\n            final long nextByte = in.read();\n            if (nextByte < 0) {\n                return nextByte;\n            }\n            bitsCached = nextByte;\n            bitsCachedSize = 8;\n        } else {\n            // Extract the required bits\n            long extractedBits;\n            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n                extractedBits = bitsCached & MASKS[remaining];\n                bitsOut |= extractedBits;\n                bitsCached >>>= remaining;\n            } else {\n                extractedBits = bitsCached >>> (bitsCachedSize - remaining);\n                bitsOut = (bitsOut << remaining) | extractedBits;\n            }\n            bitsCachedSize -= remaining;\n            remaining = 0;\n        }\n    }\n\n    return bitsOut;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}