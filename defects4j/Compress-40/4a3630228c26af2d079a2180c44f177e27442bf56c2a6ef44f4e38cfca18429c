{
    "generation": "/**\n * Returns at most 63 bits read from the underlying stream.\n *\n * @param count the number of bits to read, must be a positive\n * number not bigger than 63.\n * @return the bits concatenated as a long using the stream's byte order.\n *         -1 if the end of the underlying stream has been reached before reading\n *         the requested number of bits\n * @throws IOException on error\n */\npublic long readBits(final int count) throws IOException {\n    if (count < 0 || count > 63) {\n        throw new IllegalArgumentException(\"count must not be negative or greater than 63\");\n    }\n    while (bitsCachedSize < count) {\n        final int nextByte = in.read();\n        if (nextByte < 0) {\n            // If end of stream is reached and we don't have enough bits, return -1\n            if (bitsCachedSize == 0) {\n                return -1;\n            }\n            // Otherwise, return the bits we have, even if it's less than requested\n            long bitsOut = getBitsFromCache(count);\n            resetCache();\n            return bitsOut;\n        }\n        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= ((long) nextByte) << bitsCachedSize;\n        } else {\n            bitsCached = (bitsCached << 8) | nextByte;\n        }\n        bitsCachedSize += 8;\n    }\n    long bitsOut = getBitsFromCache(count);\n    bitsCachedSize -= count;\n    return bitsOut;\n}\n\nprivate long getBitsFromCache(int count) {\n    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n        return (bitsCached & MASKS[count]);\n    } else {\n        return (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n    }\n}\n\nprivate void resetCache() {\n    bitsCached = 0;\n    bitsCachedSize = 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}