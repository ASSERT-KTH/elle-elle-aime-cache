{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    // Initialize creator properties to null, to detect if any are set\n    Map<String, SettableBeanProperty> creatorProps = creator.properties();\n    Map<String, Object> creatorParamValues = new HashMap<>(creatorProps.size());\n    for (SettableBeanProperty prop : creatorProps.values()) {\n        creatorParamValues.put(prop.getName(), null);\n    }\n\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp!= null) {\n            creatorParamValues.put(propName, _deserializeWithErrorWrapping(p, ctxt, creatorProp));\n            if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                creatorParamValues.put(propName, null); // reset if handled by external type id\n            }\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular property? needs buffering\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop!= null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        // external type id (or property that depends on it)?\n        if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n            continue;\n        }\n        /* As per [JACKSON-313], things marked as ignorable should not be\n         * passed to any setter\n         */\n        if (_ignorableProps!= null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        // \"any property\"?\n        if (_anySetter!= null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n\n    // Try to build using creator, if all required properties are present\n    try {\n        for (SettableBeanProperty prop : creatorProps.values()) {\n            if (creatorParamValues.get(prop.getName()) == null) {\n                throw new IllegalStateException(\"No value provided for creator property '\" + prop.getName() + \"'\");\n            }\n        }\n        Object bean = creator.build(ctxt, creatorParamValues.values().toArray());\n        if (bean.getClass()!= _beanType.getRawClass()) {\n            throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n        }\n        // if so, need to copy all remaining tokens into buffer (should be none, at this point)\n        while (t == JsonToken.FIELD_NAME) {\n            p.nextToken(); // to skip name\n            tokens.copyCurrentStructure(p);\n            t = p.nextToken();\n        }\n        return ext.complete(p, ctxt, bean);\n    } catch (Exception e) {\n        // Fallback to original logic if creator build fails\n        wrapAndThrow(e, _beanType.getRawClass(), null, ctxt);\n    }\n\n    // We hit END_OBJECT; resolve the pieces:\n    try {\n        return ext.complete(p, ctxt, buffer, creator);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null; // never gets here\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}