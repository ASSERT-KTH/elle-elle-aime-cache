{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    while (t == JsonToken.FIELD_NAME) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // first: let's check to see if this might be part of value with external type id:\n            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n                // Property was handled by external type handler\n            } else {\n                // Buffer the creator property value\n                buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));\n            }\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular property? needs buffering\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        // external type id (or property that depends on it)?\n        if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n            continue;\n        }\n        /* As per [JACKSON-313], things marked as ignorable should not be\n         * passed to any setter\n         */\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        // \"any property\"?\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n        t = p.nextToken();\n    }\n\n    // At this point, we should have all creator properties buffered\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        wrapAndThrow(e, _beanType.getRawClass(), null, ctxt);\n        return null; // never gets here\n    }\n\n    // We need to handle remaining properties (if any)\n    if (p.getCurrentToken() == JsonToken.FIELD_NAME) {\n        while (p.getCurrentToken() == JsonToken.FIELD_NAME) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to skip name\n            tokens.copyCurrentStructure(p);\n        }\n    }\n\n    if (bean.getClass() != _beanType.getRawClass()) {\n        throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n    }\n\n    return ext.complete(p, ctxt, bean);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}