{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    String propName;\n    // We don't know when we are done setting creator properties; so let's wait\n    // until we at least have the type id\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n\n        // external type id (or property that depends on it)?\n        if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n            // we can just continue, type id will be handled\n            if (creator.findCreatorProperty(propName)!= null) {\n                // creator property but type id was handled, so we still need to deserialize it\n                buffer.assignParameter(creator.findCreatorProperty(propName), _deserializeWithErrorWrapping(p, ctxt, creator.findCreatorProperty(propName)));\n            }\n            continue;\n        }\n\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp!= null) {\n            buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));\n            // check if all creator props are set\n            if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    continue; // never gets here\n                }\n                // at this point we are done setting creator properties\n                // let's copy the rest of the object into the token buffer\n                while (t == JsonToken.FIELD_NAME) {\n                    p.nextToken(); // to skip name\n                    tokens.copyCurrentStructure(p);\n                    t = p.nextToken();\n                }\n                if (bean.getClass()!= _beanType.getRawClass()) {\n                    throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                }\n                return ext.complete(p, ctxt, bean);\n            }\n        }\n        // Object Id property?\n        else if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular property? needs buffering\n        else {\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop!= null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n        }\n        /* As per [JACKSON-313], things marked as ignorable should not be\n         * passed to any setter\n         */\n        if (_ignorableProps!= null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        // \"any property\"?\n        if (_anySetter!= null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n\n    // We hit END_OBJECT; resolve the pieces:\n    try {\n        return ext.complete(p, ctxt, buffer, creator);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null; // never gets here\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}