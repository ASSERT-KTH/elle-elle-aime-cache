{
    "generation": "protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n\n        // external type id (or property that depends on it)?\n        if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n            continue;\n        }\n\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            buffer.bufferProperty(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));\n            // Last creator property to set?\n            if (buffer.isAllPropertiesSet()) {\n                Object bean = creator.build(ctxt, buffer);\n                // if so, need to copy all remaining tokens into buffer\n                while (t == JsonToken.FIELD_NAME) {\n                    String remainingPropName = p.getCurrentName();\n                    p.nextToken(); // to skip name\n                    SettableBeanProperty prop = _beanProperties.find(remainingPropName);\n                    if (prop != null) {\n                        buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                    } else if (_anySetter != null) {\n                        buffer.bufferAnyProperty(_anySetter, remainingPropName, _anySetter.deserialize(p, ctxt));\n                    } else {\n                        handleUnknownProperty(p, ctxt, bean, remainingPropName);\n                    }\n                    t = p.nextToken();\n                }\n                return ext.complete(p, ctxt, bean);\n            }\n            continue;\n        }\n\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n\n        // regular property? needs buffering\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n\n        /* As per [JACKSON-313], things marked as ignorable should not be\n         * passed to any setter\n         */\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n\n        // \"any property\"?\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n\n    // We hit END_OBJECT; resolve the pieces:\n    try {\n        return ext.complete(p, ctxt, buffer, creator);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null; // never gets here\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}