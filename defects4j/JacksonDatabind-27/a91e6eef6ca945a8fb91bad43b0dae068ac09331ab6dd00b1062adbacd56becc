{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // Handle cases where this property is part of external type id mechanism\n            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n                continue;\n            } else {\n                // Assign value for the creator property\n                buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));\n                t = p.nextToken(); // move to the next token\n                continue;\n            }\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // Regular property (not creator)?\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        // External type id or related property\n        if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n            continue;\n        }\n        // Known ignorable properties\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        // Any setter for unknown properties\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            continue;\n        }\n        // If all else fails, buffer the token\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n    }\n\n    // At this point, no more FIELD_NAME tokens; handle creator construction\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        wrapAndThrow(e, _beanType.getRawClass(), null, ctxt);\n        return null; // should not happen\n    }\n\n    // Handle remaining token buffering\n    return ext.complete(p, ctxt, bean);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}