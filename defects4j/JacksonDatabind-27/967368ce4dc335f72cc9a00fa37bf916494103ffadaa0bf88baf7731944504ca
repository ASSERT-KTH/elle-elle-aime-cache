{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    SettableBeanProperty classProp = creator.findCreatorProperty(_typePropertyName);\n    boolean processedClass = false;\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            if (creatorProp != classProp) {\n                // Buffer other properties\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n                t = p.nextToken();\n            } else {\n                // Process class property\n                processedClass = true;\n                if (!ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n                    throw ctxt.mappingException(\"Invalid type id for external id property '\" + propName + \"'\");\n                }\n            }\n        } else {\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            t = p.nextToken();\n        }\n    }\n\n    if (!processedClass) {\n        throw ctxt.mappingException(\"Missing external type id property '\" + _typePropertyName + \"'\");\n    }\n\n    // Build object\n    Object bean = creator.build(ctxt, buffer.getBuffered());\n    // Copy any remaining tokens into new TokenBuffer\n    TokenBuffer remaining = tokens.asCopyOfValueTokens();\n    // Add buffer to remaining tokens and reconstruct parser\n    remaining.insert(1, \"payload\").copyCurrentStructure(beanToString(bean, mapper));\n    JsonParser newParser = remaining.asParser();\n    newParser.nextToken(); // Move to first field name\n    // Deserialize remaining properties\n    return _beanDeserializer.deserialize(newParser, ctxt);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}