{
    "generation": "/**\n * Parses a time zone ID into the given bucket.\n * \n * @return position if parsed, ~position if not parsed\n */\npublic int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    // Sort IDs by length in descending order to avoid prefix matching\n    for (String id : ALL_IDS.stream().sorted((a, b) -> Integer.compare(b.length(), a.length())).toArray(String[]::new)) {\n        if (str.startsWith(id)) {\n            // Verify the ID is not a prefix of another ID\n            if (id.length() == str.length() ||!Character.isLetterOrDigit(str.charAt(id.length()))) {\n                bucket.setZone(DateTimeZone.forID(id));\n                return position + id.length();\n            }\n        }\n    }\n    return ~position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}