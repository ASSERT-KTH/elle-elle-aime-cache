{
    "generation": "/**\n * Parses a time zone ID from the given text, starting at the given position.\n * \n * @param bucket  the bucket to fill, not null\n * @param text    the text to parse, not null\n * @param position  the position to start parsing from\n * @return the new position, ~position if failed\n */\npublic int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    // Sort IDs by length in descending order to avoid partial matches (e.g., \"Dawson\" in \"Dawson_Creek\")\n    for (String id : ALL_IDS.stream().sorted((a, b) -> Integer.compare(b.length(), a.length())).toArray(String[]::new)) {\n        if (str.startsWith(id)) {\n            bucket.setZone(DateTimeZone.forID(id));\n            return position + id.length();\n        }\n    }\n    return ~position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}