{
    "generation": "/**\n * Parses a time zone ID from the given text, starting at the specified position.\n * \n * @param bucket  the bucket to store the parsed zone\n * @param text    the text to parse\n * @param position  the position to start parsing from\n * @return the new position if parsed, ~position if not parsed\n */\npublic int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    // Sort IDs by length in descending order to avoid substring matches\n    for (String id : ALL_IDS.stream().sorted((a, b) -> Integer.compare(b.length(), a.length())).toArray(String[]::new)) {\n        if (str.startsWith(id)) {\n            // Check if the ID is followed by a non-alphabetic character or end of string\n            int idLength = id.length();\n            if (idLength == str.length() ||!Character.isLetter(str.charAt(idLength))) {\n                bucket.setZone(DateTimeZone.forID(id));\n                return position + idLength;\n            }\n        }\n    }\n    return ~position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}