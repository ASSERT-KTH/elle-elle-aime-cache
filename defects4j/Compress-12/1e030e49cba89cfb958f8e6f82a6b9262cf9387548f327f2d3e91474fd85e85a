{
    "generation": "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n\n    if (currEntry != null) {\n        long numToSkip = entrySize - entryOffset;\n\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n\n        readBuf = null;\n    }\n\n    byte[] headerBuf = getRecord();\n\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n\n    currEntry = new TarArchiveEntry(headerBuf);\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n\n    if (currEntry.isGNULongNameEntry()) {\n        // Read the name as a UTF-8 string, considering null termination\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        int read;\n        byte[] buf = new byte[SMALL_BUFFER_SIZE];\n        while ((read = in.read(buf)) != -1) {\n            bos.write(buf, 0, read);\n            if (read < SMALL_BUFFER_SIZE) {\n                break;\n            }\n        }\n        byte[] longNameBytes = bos.toByteArray();\n        int nullIndex = -1;\n        for (int i = 0; i < longNameBytes.length; i++) {\n            if (longNameBytes[i] == 0) {\n                nullIndex = i;\n                break;\n            }\n        }\n        if (nullIndex != -1) {\n            longNameBytes = Arrays.copyOfRange(longNameBytes, 0, nullIndex);\n        }\n        String longName = new String(longNameBytes, StandardCharsets.UTF_8);\n        currEntry.setName(longName);\n        getNextEntry();\n        if (currEntry == null) {\n            // Malformed tar file - long entry name not followed by entry\n            return null;\n        }\n    }\n\n    if (currEntry.isPaxHeader()) { // Process Pax headers\n        paxHeaders();\n    }\n\n    if (currEntry.isGNUSparse()) { // Process sparse files\n        readGNUSparse();\n    }\n\n    // If the size of the next element in the archive has changed\n    // due to a new size being reported in the posix header\n    // information, we update entrySize here so that it contains\n    // the correct value.\n    entrySize = currEntry.getSize();\n    return currEntry;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}