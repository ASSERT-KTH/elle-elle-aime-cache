{
    "generation": "    /**\n     * Walks through all recorded entries and adds the data available\n     * from the local file header.\n     *\n     * <p>Also records the offsets for the data to read from the\n     * entries.</p>\n     */\n    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                            entriesWithoutUTF8Flag)\n        throws IOException {\n        // changing the name of a ZipArchiveEntry is going to change\n        // the hashcode - see COMPRESS-164\n        // Map needs to be reconstructed in order to keep central\n        // directory order\n        Map<String, ZipArchiveEntry> origMap = new HashMap<>();\n        for (Map.Entry<String, ZipArchiveEntry> ent : nameMap.entrySet()) {\n            origMap.put(ent.getKey(), ent.getValue());\n        }\n        nameMap.clear();\n        for (ZipArchiveEntry ze : entries.keySet()) {\n            OffsetEntry offsetEntry = entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n            String orig = ze.getName();\n            if (entriesWithoutUTF8Flag.containsKey(ze)) {\n                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                         nc.comment);\n            }\n            if (!orig.equals(ze.getName())) {\n                // if the name changed, we need to update the name map\n                ZipArchiveEntry origZa = origMap.get(orig);\n                if (origZa == null) {\n                    // this should not happen as orig is the name of ze\n                    // when still using the central directory encoding\n                    throw new IllegalStateException(\n                        \"orig: '\" + orig + \"' not in orig map - name: '\"\n                        + ze.getName() + \"'\");\n                }\n                nameMap.put(ze.getName(), origZa);\n            } else {\n                nameMap.put(ze.getName(), ze);\n            }\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}