{
    "generation": "private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                        entriesWithoutUTF8Flag)\n    throws IOException {\n\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n\n        byte[] b = new byte[SHORT];\n\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n\n        byte[] fileNameBytes = new byte[fileNameLen];\n        archive.readFully(fileNameBytes);\n        String fileName = new String(fileNameBytes, StandardCharsets.UTF_8);\n\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            if (nc.name == null) {\n                nc.name = fileName;\n            }\n            if (nc.comment == null) {\n                nc.comment = \"\"; // assuming comment can be empty\n            }\n        }\n\n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n\n        ze.setExtra(localExtraData);\n\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);\n        }\n\n        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n            + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n        if (!ze.getName().equals(fileName)) {\n            String orig = ze.getName();\n            ze.setName(fileName);\n            nameMap.remove(orig);\n            nameMap.put(ze.getName(), ze);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}