{
    "generation": "/**\n * Walks through all recorded entries and adds the data available\n * from the local file header.\n *\n * <p>Also records the offsets for the data to read from the\n * entries.</p>\n */\nprivate void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                        entriesWithoutUTF8Flag)\n    throws IOException {\n    // changing the name of a ZipArchiveEntry is going to change\n    // the hashcode - see COMPRESS-164\n    // Map needs to be reconstructed in order to keep central\n    // directory order\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n        byte[] b = new byte[SHORT];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n        // Fix: Read and process the filename before skipping\n        byte[] fileNameBytes = new byte[fileNameLen];\n        archive.readFully(fileNameBytes);\n        // lenToSkip should be the remaining bytes after reading the filename\n        int lenToSkip = extraFieldLen;\n        while (lenToSkip > 0) {\n            int skipped = archive.skipBytes(lenToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip extra field in\"\n                                           + \" local file header\");\n            }\n            lenToSkip -= skipped;\n        }\n        // Fix: Set the dataOffset after correctly skipping the extra fields\n        offsetEntry.dataOffset = archive.getPos();\n        ze.setExtra(extractExtraField(archive, extraFieldLen));\n\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            String orig = ze.getName();\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                     nc.comment);\n            if (!orig.equals(ze.getName())) {\n                nameMap.remove(orig);\n                nameMap.put(ze.getName(), ze);\n            }\n        }\n    }\n}\n\n// Helper method for extracting extra field (added for clarity)\nprivate byte[] extractExtraField(RAFInputStream archive, int extraFieldLen) throws IOException {\n    byte[] localExtraData = new byte[extraFieldLen];\n    archive.readFully(localExtraData);\n    return localExtraData;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}