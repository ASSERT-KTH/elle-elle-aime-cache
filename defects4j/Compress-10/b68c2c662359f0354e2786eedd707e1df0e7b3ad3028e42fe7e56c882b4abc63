{
    "generation": "    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                            entriesWithoutUTF8Flag)\n        throws IOException {\n        Map<ZipArchiveEntry, OffsetEntry> updatedEntries = new LinkedHashMap<>(); // Add this line to keep the original order\n        for (ZipArchiveEntry ze : entries.keySet()) {\n            OffsetEntry offsetEntry = entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            long fileEndOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen;\n\n            // Change from skipping bytes to reading bytes and then throwing exception if didn't fully read\n            byte[] fileNameBytes = new byte[fileNameLen];\n            int bytesRead = archive.read(fileNameBytes);\n            if (bytesRead != fileNameLen) {\n                throw new RuntimeException(\"failed to read file name in local file header\");\n            }\n\n            byte[] localExtraData = new byte[extraFieldLen];\n            bytesRead = archive.read(localExtraData);\n            if (bytesRead != extraFieldLen) {\n                throw new RuntimeException(\"failed to read extra field in local file header\");\n            }\n            ze.setExtra(localExtraData);\n            offsetEntry.dataOffset = fileEndOffset + extraFieldLen;\n\n            if (entriesWithoutUTF8Flag.containsKey(ze)) {\n                String orig = ze.getName();\n                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);\n                if (!orig.equals(ze.getName())) {\n                    nameMap.remove(orig);\n                    nameMap.put(ze.getName(), ze);\n                }\n            }\n            updatedEntries.put(ze, offsetEntry); // Add this line to maintain the order\n        }\n        entries = updatedEntries; // Replace the original map with the updated one\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}