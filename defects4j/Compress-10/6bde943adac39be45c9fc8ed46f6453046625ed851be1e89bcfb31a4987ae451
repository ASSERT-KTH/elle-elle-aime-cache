{
    "generation": "private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag)\n        throws IOException {\n    // Iterate over the entries to resolve local file header data\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n\n        // Read filename length\n        byte[] b = new byte[ZipShort.SIZE];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n\n        // Read extra field length\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n\n        // Skip filename\n        int lenToSkip = fileNameLen;\n        while (lenToSkip > 0) {\n            int skipped = archive.skipBytes(lenToSkip);\n            if (skipped <= 0) {\n                throw new IOException(\"Failed to skip file name in local file header\");\n            }\n            lenToSkip -= skipped;\n        }\n\n        // Read local extra data\n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n        ze.setExtra(localExtraData);\n\n        // Calculate data offset\n        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH +\n                ZipShort.SIZE + ZipShort.SIZE + fileNameLen + extraFieldLen;\n\n        // Handle entries without UTF8 flag\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            String orig = ze.getName();\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);\n            if (!orig.equals(ze.getName())) {\n                nameMap.remove(orig);\n                nameMap.put(ze.getName(), ze);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}