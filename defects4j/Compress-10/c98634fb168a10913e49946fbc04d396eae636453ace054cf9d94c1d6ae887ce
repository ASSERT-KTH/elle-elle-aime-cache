{
    "generation": "/**\n * Walks through all recorded entries and adds the data available\n * from the local file header.\n *\n * <p>Also records the offsets for the data to read from the\n * entries.</p>\n */\nprivate void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                        entriesWithoutUTF8Flag)\n    throws IOException {\n    // changing the name of a ZipArchiveEntry is going to change\n    // the hashcode - see COMPRESS-164\n    // Map needs to be reconstructed in order to keep central\n    // directory order\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n        byte[] b = new byte[SHORT];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n        \n        // Fix: Properly handle UTF-8 encoded file names in local file headers\n        if (hasUTF8ExtraField(archive, offset, extraFieldLen)) {\n            String fileName = readUTF8FileName(archive, fileNameLen);\n            ze.setName(fileName);\n        } else {\n            // Original code for non-UTF8 file names\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n        }\n        \n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n        ze.setExtra(localExtraData);\n        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n            + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            String orig = ze.getName();\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                     nc.comment);\n            if (!orig.equals(ze.getName())) {\n                nameMap.remove(orig);\n                nameMap.put(ze.getName(), ze);\n            }\n        }\n    }\n}\n\n// Helper methods for the fix\n\nprivate boolean hasUTF8ExtraField(RandomAccessFile archive, long offset, int extraFieldLen) throws IOException {\n    archive.seek(offset + LFH_OFFSET_FOR_EXTRA_FIELD_LEN);\n    byte[] b = new byte[SHORT];\n    archive.readFully(b);\n    int id = ZipShort.getValue(b);\n    return id == ZipExtraField.UFT8_NAME_MESSAGE_HEADER_ID;\n}\n\nprivate String readUTF8FileName(RandomAccessFile archive, int fileNameLen) throws IOException {\n    byte[] fileNameBytes = new byte[fileNameLen];\n    archive.readFully(fileNameBytes);\n    return new String(fileNameBytes,.StandardCharsets.UTF_8);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}