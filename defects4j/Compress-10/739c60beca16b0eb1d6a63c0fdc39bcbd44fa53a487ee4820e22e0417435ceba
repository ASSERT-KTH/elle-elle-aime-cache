{
    "generation": "private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag) throws IOException {\n    ZipArchiveEntry[] orderedEntries = entries.keySet().toArray(new ZipArchiveEntry[0]);\n\n    for (ZipArchiveEntry ze : orderedEntries) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n\n        byte[] b = new byte[SHORT];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n\n        byte[] fileName = new byte[fileNameLen];\n        archive.readFully(fileName);\n\n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n        ze.setExtra(localExtraData);\n\n        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            String orig = ze.getName();\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);\n            if (!orig.equals(ze.getName())) {\n                nameMap.remove(orig);\n                nameMap.put(ze.getName(), ze);\n            }\n        } else {\n            // Set the file name from the local file header\n            try {\n                ze.setName(new String(fileName, StandardCharsets.UTF_8));\n            } catch (UnsupportedEncodingException e) {\n                // Fall back to default charset if UTF-8 not supported\n                ze.setName(new String(fileName));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}