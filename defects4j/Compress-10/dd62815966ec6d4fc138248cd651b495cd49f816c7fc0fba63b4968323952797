{
    "generation": "private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag) throws IOException {\n    // changing the name of a ZipArchiveEntry is going to change the hashcode.\n    // Map needs to be reconstructed in order to keep central directory order.\n    Map<ZipArchiveEntry, OffsetEntry> newEntries = new LinkedHashMap<>();\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n        byte[] b = new byte[SHORT];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n\n        // Ensure archive pointer is at correct position\n        long currentPosition = archive.getFilePointer();\n        archive.seek(currentPosition + fileNameLen);\n\n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n        ze.setExtra(localExtraData);\n        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            String orig = ze.getName();\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);\n            if (!orig.equals(ze.getName())) {\n                nameMap.remove(orig);\n                nameMap.put(ze.getName(), ze);\n            }\n        }\n        newEntries.put(ze, offsetEntry);\n    }\n    entries = newEntries;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}