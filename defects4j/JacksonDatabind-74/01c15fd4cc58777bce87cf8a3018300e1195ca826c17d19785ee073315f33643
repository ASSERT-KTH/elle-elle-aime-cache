{
    "generation": "    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n            TokenBuffer tb) throws IOException\n    {\n        JsonToken currToken = p.getCurrentToken();\n\n        // If the current token is FIELD_NAME, try to find a default deserializer\n        if (currToken == JsonToken.FIELD_NAME && p.getCurrentName().equals(_typePropertyName)) {\n            p.nextToken();\n            if (p.getCurrentToken() == JsonToken.VALUE_STRING\n                    && p.getText().isEmpty()\n                    && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                return null;\n            }\n            p.nextToken(); // Move to the next token for deserialization\n        }\n\n        // If the current token is VALUE_STRING, try to handle it as a null case if it's empty\n        if (currToken == JsonToken.VALUE_STRING && p.getText().isEmpty()\n                && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n            return null;\n        }\n\n        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n        if (deser != null) {\n            if (tb != null) {\n                tb.writeEndObject();\n                p = tb.asParser(p);\n                // Must move to the point to the first token:\n                // But only if starting from the middle of the TokenBuffer, not from the initial JsonParser\n                if (currToken != JsonToken.START_OBJECT) {\n                    p.nextToken();\n                }\n            }\n            return deser.deserialize(p, ctxt);\n        }\n\n        // Or, perhaps we just bumped into a \"natural\" value (boolean/int/double/String)?\n        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n        if (result != null) {\n            return result;\n        }\n\n        // Or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n        if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n            return super.deserializeTypedFromAny(p, ctxt);\n        }\n\n        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n                \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}