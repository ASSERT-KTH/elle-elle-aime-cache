{
    "generation": "protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n        TokenBuffer tb) throws IOException\n{\n    // First, try to find the 'type' field to determine the type of object to deserialize.\n    String typePropertyName = _typePropertyName(ctxt.getConfig());\n    if (p.getCurrentToken() == JsonToken.START_OBJECT) {\n        String typeStr = null;\n        while (p.nextToken() != JsonToken.END_OBJECT) {\n            String fieldName = p.getCurrentName();\n            p.nextToken();\n            if (typePropertyName.equals(fieldName)) {\n                typeStr = p.getText();\n                break;\n            }\n        }\n        // If 'type' is present, handle it as before.\n        if (typeStr != null) {\n            JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt, typeStr);\n            if (deser != null) {\n                if (tb != null) {\n                    tb.writeEndObject();\n                    p = tb.asParser(p);\n                    p.nextToken();\n                }\n                return deser.deserialize(p, ctxt);\n            }\n        }\n        // If 'type' is not present, try to deserialize the 'value' field directly.\n        else {\n            while (p.nextToken() != JsonToken.END_OBJECT) {\n                String fieldName = p.getCurrentName();\n                p.nextToken();\n                if (\"value\".equals(fieldName)) {\n                    Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n                    if (result != null) {\n                        return result;\n                    }\n                    else if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n                        return super.deserializeTypedFromAny(p, ctxt);\n                    }\n                }\n            }\n        }\n    }\n    ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n            \"missing property 'type' that is to contain type id  (for class \"+baseTypeName()+\")\");\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}