{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                type = _handleUnknownTypeId(ctxt, typeId);\n                if (type == null) {\n                    // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...\n                    return ctxt.findNullValueDeserializer(Object.class, _property);\n                }\n                //... would this actually work?\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            } else {\n                if ((_baseType!= null)\n                        && _baseType.getClass() == type.getClass()) {\n                    if (!type.hasGenericTypes()) {\n                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                    }\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            }\n            _deserializers.put(typeId, deser);\n        }\n        return deser;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}