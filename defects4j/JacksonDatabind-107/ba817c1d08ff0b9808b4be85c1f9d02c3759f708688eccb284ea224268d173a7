{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        // Attempt to resolve type based on type ID\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // Use the default deserializer if no type ID is available\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // Handle unknown type ID\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) {\n                    // If _handleUnknownTypeId returns null, return null\n                    return null;\n                }\n                // Find deserializer for the handled type\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            // Specialize type if base type is available and classes match\n            if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n                if (!type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            // Find deserializer for the resolved type\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        // Cache the deserializer for future use\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}