{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) {\n                    // Use the DeserializationProblemHandler if available\n                    DeserializationProblemHandler handler = ctxt.getProblemHandlers().stream()\n                        .filter(h -> h.handleUnknownTypeId(ctxt, _baseType, typeId, _idResolver, \"Unknown type ID: \" + typeId) != null)\n                        .findFirst()\n                        .orElse(null);\n                    if (handler != null) {\n                        actual = handler.handleUnknownTypeId(ctxt, _baseType, typeId, _idResolver, \"Unknown type ID: \" + typeId);\n                    }\n                }\n                if (actual != null) {\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                } else {\n                    // If no handler can help, return a deserializer for Void.class as a last resort\n                    deser = ctxt.findContextualValueDeserializer(ctxt.constructType(Void.class), _property);\n                }\n            }\n        } else {\n            if ((_baseType != null)\n                    && _baseType.getClass() == type.getClass()) {\n                if (!type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}