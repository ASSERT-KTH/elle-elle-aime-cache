{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                // use the default impl if no type id available:\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                    if (actual!= null) { \n                        // explicitly check for non-null to ensure a deserializer is found\n                        deser = ctxt.findContextualValueDeserializer(actual, _property);\n                    } else {\n                        // if no type was found and no deserializer, throw an exception instead of returning null\n                        throw new JsonMappingException(ctxt, \"Unknown type id '\" + typeId + \"': no default type id handler registered\");\n                    }\n                }\n            } else {\n                //... (rest of the function remains the same)\n                if ((_baseType!= null)\n                        && _baseType.getClass() == type.getClass()) {\n                    //...\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            }\n            _deserializers.put(typeId, deser);\n        }\n        return deser;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}