{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    if (nextLineTabStop >= width)\n    {\n        // stops infinite loop happening\n        nextLineTabStop = width - 1;\n    }\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        int leadingSpaces = getLeadingSpaces(text);\n        text = text.substring(leadingSpaces);\n        pos = findWrapPos(text, width - leadingSpaces, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text.substring(0));\n\n            return sb;\n        }\n        \n        sb.append(text.substring(0, pos)).append(defaultNewLine);\n        text = text.substring(pos);\n    }\n}\n\n// New helper function to get leading spaces\nprivate int getLeadingSpaces(String text) {\n    int count = 0;\n    for (char c : text.toCharArray()) {\n        if (Character.isWhitespace(c)) {\n            count++;\n        } else {\n            break;\n        }\n    }\n    return count;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}