{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n * @param indent The initial indentation level (added in the fix)\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text, int indent)\n{\n    int pos = findWrapPos(text, width - indent, 0);\n\n    if (pos == -1)\n    {\n        sb.append(createPadding(indent)).append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(createPadding(indent)).append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    if (nextLineTabStop >= width)\n    {\n        // stops infinite loop happening\n        nextLineTabStop = width - 1;\n    }\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        text = text.substring(pos).trim();\n        pos = findWrapPos(text, width - indent, 0);\n\n        if (pos == -1)\n        {\n            sb.append(createPadding(indent)).append(text);\n\n            return sb;\n        }\n        \n        if ( (text.length() > width - indent) && (pos == nextLineTabStop - indent - 1) ) \n        {\n            pos = width - indent;\n        }\n\n        sb.append(createPadding(indent)).append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}