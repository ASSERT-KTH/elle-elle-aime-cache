{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    while (true)\n    {\n        // all following lines must be padded with nextLineTabStop space characters\n        final String padding = createPadding(nextLineTabStop);\n        text = padding + text.substring(pos).trim();\n        \n        if (text.length() > width)\n        {\n            // line is longer than the max width, do a manual wrap\n            int wrappedPos = 0;\n            while ((wrappedPos = findWrapPos(text, width, nextLineTabStop + wrappedPos))!= -1)\n            {\n                if (wrappedPos > pos + 1)\n                {\n                    sb.append(text.substring(0, wrappedPos)).append(defaultNewLine);\n                }\n                \n                // text is getting too small to wrap safely, render what's remaining and leave the loop \n                if ((text.length() - wrappedPos) > (nextLineTabStop))    \n                {\n                    text = padding + text.substring(wrappedPos);\n                }\n                else \n                {\n                    wrappedPos = -1;    \n                }\n            }\n\n        }\n\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n\n            return sb;\n        }\n            \n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n        {\n            pos = width;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}