{
    "generation": "JSType meet(JSType that) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n      if (alternate.isSubtype(that)) {\n        builder.addAlternate(alternate);\n      }\n    }\n\n    if (that instanceof UnionType) {\n      for (JSType otherAlternate : ((UnionType) that).alternates) {\n        if (otherAlternate.isSubtype(this)) {\n          builder.addAlternate(otherAlternate);\n        }\n      }\n    } else if (that.isSubtype(this)) {\n      builder.addAlternate(that);\n    }\n    \n    JSType result = builder.build();\n    if (result == null && this.isObject() && that.isObject()) {\n      // If the meet result is null (i.e., no common subtype) and both types are objects, \n      // we should return NO_OBJECT_TYPE instead of NO_TYPE\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return result!= null? result : getNativeType(JSTypeNative.NO_TYPE);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}