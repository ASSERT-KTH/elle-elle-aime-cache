{
    "generation": "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n  if (result != null) {\n    return result;\n  } else {\n    // If both types are object types and no common subtype was found,\n    // return NO_OBJECT_TYPE; else, return NO_TYPE.\n    boolean bothObjects = isAllAlternatesObjects(this) && isAllAlternatesObjects(that);\n    return bothObjects ? getNativeType(JSTypeNative.NO_OBJECT_TYPE) : getNativeType(JSTypeNative.NO_TYPE);\n  }\n}\n\nprivate boolean isAllAlternatesObjects(JSType type) {\n  if (type instanceof UnionType) {\n    for (JSType alternate : ((UnionType) type).alternates) {\n      if (!alternate.isObject()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return type.isObject();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}