{
    "generation": "JSType meet(JSType that) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n        if (alternate.hasCommonSupertype(that)) {\n            builder.addAlternate(alternate);\n        }\n    }\n\n    if (that instanceof UnionType) {\n        for (JSType otherAlternate : ((UnionType) that).alternates) {\n            if (this.hasCommonSupertype(otherAlternate)) {\n                builder.addAlternate(otherAlternate);\n            }\n        }\n    } else if (this.hasCommonSupertype(that)) {\n        builder.addAlternate(that);\n    }\n\n    JSType result = builder.build();\n    if (result != null) {\n      return result;\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}