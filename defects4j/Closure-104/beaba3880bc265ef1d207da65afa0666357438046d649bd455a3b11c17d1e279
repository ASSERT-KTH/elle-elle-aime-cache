{
    "generation": "JSType meet(JSType that) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n    boolean addedAlternate = false;\n\n    for (JSType alternate : alternates) {\n        if (alternate.isSubtype(that)) {\n            builder.addAlternate(alternate);\n            addedAlternate = true;\n        }\n    }\n\n    if (that instanceof UnionType) {\n        for (JSType otherAlternate : ((UnionType) that).alternates) {\n            if (otherAlternate.isSubtype(this)) {\n                builder.addAlternate(otherAlternate);\n                addedAlternate = true;\n            }\n        }\n    } else if (that.isSubtype(this)) {\n        builder.addAlternate(that);\n        addedAlternate = true;\n    }\n\n    JSType result = builder.build();\n    if (result != null) {\n        return result;\n    } else if (this.isObject() && that.isObject()) {\n        // Check if any alternate is an object type\n        for (JSType alternate : alternates) {\n            if (alternate.isObject()) {\n                return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n            }\n        }\n        if (that instanceof UnionType) {\n            for (JSType alternate : ((UnionType) that).alternates) {\n                if (alternate.isObject()) {\n                    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n                }\n            }\n        } else if (that.isObject()) {\n            return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n        }\n    }\n\n    return getNativeType(JSTypeNative.NO_TYPE);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}