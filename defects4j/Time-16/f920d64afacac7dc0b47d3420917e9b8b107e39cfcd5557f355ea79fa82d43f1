{
    "generation": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        \n        // Use the chronology of the instant but with the proper year handling.\n        chrono = selectChronology(chrono);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, instant.get(DateTimeFieldType.year())); // Use the instant's year as default.\n        \n        int newPos = parser.parseInto(bucket, text, position);\n        if (newPos < 0) {\n            return newPos;\n        }\n\n        long parsedMillis = bucket.computeMillis(false, text);\n        if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        } else if (iZone != null) {\n            chrono = chrono.withZone(iZone);\n        }\n        instant.setChronology(chrono);\n        instant.setMillis(parsedMillis);\n\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            instant.setZone(parsedZone);\n        }\n        \n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}