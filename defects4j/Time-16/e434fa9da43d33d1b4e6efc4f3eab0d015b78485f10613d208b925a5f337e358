{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, instant.getYear()); // Use the year of the instant as the default year\n\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        return newPos; // Parsing failed, early return\n    }\n    long computedMillis = bucket.computeMillis(false, text);\n    instant.setMillis(computedMillis);\n\n    // Adjust chronology if offset or zone was parsed\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n\n    if (iZone != null) {\n        instant.setZone(iZone);\n    } else if (!iOffsetParsed && bucket.getOffsetInteger() == null) {\n        // Retain input instant's original zone when no explicit zone/offset is parsed\n        instant.setZone(instant.getZone());\n    }\n\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}