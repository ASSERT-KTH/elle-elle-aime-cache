{
    "generation": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        chrono = selectChronology(chrono);\n\n        // Adjust for local time\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n\n        if (newPos >= 0) {\n            long millis = bucket.computeMillis(false, text);\n\n            // Setting default year to prevent incorrect behavior\n            int defaultYear = instant.get(DateTimeFieldType.year());\n            if (bucket.getSavedFieldCount() == 1 && bucket.getSavedField(DateTimeFieldType.year()) == null) {\n                millis = bucket.computeMillis(true, text);\n                millis = DateTimeUtils.getChronology(chrono)\n                        .year().set(millis, defaultYear);\n            }\n\n            instant.setMillis(millis);\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n            instant.setChronology(chrono);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n        }\n\n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}