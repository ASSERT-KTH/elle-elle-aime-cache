{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    \n    // Retain the original year from the instant to use as the default year\n    int originalYear = instant.getChronology().year().get(instantMillis);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, originalYear); // Use the original year as the default year\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    // Only update the fields that were actually parsed\n    if (newPos >= 0) {\n        long newMillis = bucket.computeMillis(false, text);\n        if (bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        \n        // Merge the parsed values with the original instant\n        ReadablePartial partial = bucket.toReadablePartial();\n        for (DateTimeFieldType type : partial.getFieldTypes()) {\n            int value = partial.get(type);\n            instant.set(type, value);\n        }\n        \n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    }\n    \n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}