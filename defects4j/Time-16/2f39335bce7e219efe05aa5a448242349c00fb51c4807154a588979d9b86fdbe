{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    \n    // Create a DateTimeParserBucket with the original year\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    \n    // Add the original year to the bucket to preserve it\n    bucket.saveField(DateTimeFieldType.year(), instant.getYear());\n    \n    int newPos = parser.parseInto(bucket, text, position);\n    \n    // Compute new millis based on parsed fields\n    long newMillis = bucket.computeMillis(false, text);\n    \n    // Merge the new millis with the original instant, preserving unparsed fields\n    long mergedMillis = mergeInstant(instant, newMillis);\n    \n    instant.setMillis(mergedMillis);\n    \n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}\n\n// Helper method to merge the new parsed datetime with the original instant\nprivate long mergeInstant(ReadWritableInstant original, long newMillis) {\n    Chronology chrono = original.getChronology();\n    long originalMillis = original.getMillis();\n    \n    // Create MutableDateTime objects for easier field manipulation\n    MutableDateTime originalDt = new MutableDateTime(originalMillis, chrono);\n    MutableDateTime newDt = new MutableDateTime(newMillis, chrono);\n    \n    // Merge fields: keep original fields unless they were parsed\n    if (!newDt.isYearSet()) {\n        newDt.setYear(originalDt.getYear());\n    }\n    if (!newDt.isMonthOfYearSet()) {\n        newDt.setMonthOfYear(originalDt.getMonthOfYear());\n    }\n    if (!newDt.isDayOfMonthSet()) {\n        newDt.setDayOfMonth(originalDt.getDayOfMonth());\n    }\n    if (!newDt.isHourOfDaySet()) {\n        newDt.setHourOfDay(originalDt.getHourOfDay());\n    }\n    if (!newDt.isMinuteOfHourSet()) {\n        newDt.setMinuteOfHour(originalDt.getMinuteOfHour());\n    }\n    if (!newDt.isSecondOfMinuteSet()) {\n        newDt.setSecondOfMinute(originalDt.getSecondOfMinute());\n    }\n    if (!newDt.isMillisOfSecondSet()) {\n        newDt.setMillisOfSecond(originalDt.getMillisOfSecond());\n    }\n    \n    return newDt.getMillis();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}