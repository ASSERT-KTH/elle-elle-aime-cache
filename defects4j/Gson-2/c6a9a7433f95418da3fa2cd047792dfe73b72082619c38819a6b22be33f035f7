{
    "generation": "public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n        TypeAdapter<T2> adapter = (TypeAdapter<T2>) typeAdapter;\n        return new TypeAdapter<T2>() {\n          @Override\n          public void write(JsonWriter out, T2 value) throws IOException {\n            adapter.write(out, value);\n          }\n\n          @Override\n          public T2 read(JsonReader in) throws IOException {\n            T1 deserialized = typeAdapter.read(in);\n            if (requestedType.isInstance(deserialized)) {\n              return requestedType.cast(deserialized);\n            } else {\n              throw new JsonSyntaxException(\"Expected \" + requestedType.getName() + \" but was \" + deserialized.getClass().getName());\n            }\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}