{
    "generation": "/**\n * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n * that the deserialized type matches the type requested.\n */\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;  // return null if type is not assignable\n        }\n        // Only return the typeAdapter when the requested type is the same or it's a superclass of the clazz\n        return requestedType == clazz || requestedType.isAssignableFrom(clazz) ? (TypeAdapter<T2>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}