{
    "generation": "/**\n * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n * that the deserialized type matches the type requested.\n */\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n    final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n  return new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\")\n    public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n      final Class<? super T2> requestedType = typeToken.getRawType();\n      if (!clazz.isAssignableFrom(requestedType)) {\n        return null;\n      }\n      // Additional check to ensure type adapter's type matches the requested type\n      if (typeToken.getType()!= getTypeToken(typeAdapter).getType()) {\n        return null;\n      }\n      return (TypeAdapter<T2>) typeAdapter;\n    }\n\n    private <T> TypeToken<T> getTypeToken(TypeAdapter<T> typeAdapter) {\n      // Assuming Gson's TypeAdapter has a meisjes() method to retrieve its type\n      // or a similar way to get the type, as it's not provided in the original snippet\n      // This implementation might vary based on actual Gson's TypeAdapter implementation\n      return (TypeToken<T>) typeAdapter.getClass().getDeclaredField(\"type\").get(typeAdapter);\n    }\n\n    @Override public String toString() {\n      return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n    }\n  };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}