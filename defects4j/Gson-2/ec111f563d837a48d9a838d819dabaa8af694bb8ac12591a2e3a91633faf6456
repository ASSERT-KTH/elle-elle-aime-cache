{
    "generation": "static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n    final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n  return new TypeAdapterFactory() {\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n      if (!clazz.isAssignableFrom(typeToken.getRawType())) {\n        return null;\n      }\n      return new TypeAdapter<T2>() {\n        @Override\n        public T2 read(JsonReader in) throws IOException {\n          JsonElement element = new JsonTreeReader(gson).nextValue();\n          if (!element.getClass().isAssignableFrom(clazz)) {\n            throw new JsonSyntaxException(\"Expected \" + clazz.getName() + \" but was \"\n                + element.getClass().getName());\n          }\n          return typeAdapter.fromJsonTree(element);\n        }\n\n        @Override\n        public void write(JsonWriter out, T2 value) throws IOException {\n          typeAdapter.write(out, value);\n        }\n      };\n    }\n\n    @Override\n    public String toString() {\n      return \"Factory[typeHierarchy=\" + clazz.getName() + \", adapter=\" + typeAdapter + \"]\";\n    }\n  };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}