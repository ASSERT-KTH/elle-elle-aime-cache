{
    "generation": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.current(); // Use current() instead of consume() to check the character without removing it\n    switch (c) {\n        case '>':\n            r.advance(); // Consume the '>' character\n            if (t.tagPending.selfClosing) {\n                t.emitTagPending();\n            } else {\n                t.transition(Data);\n            }\n            t.tagPending.selfClosing = false; // Reset selfClosing to false after processing\n            break;\n        case '/':\n            r.advance(); // Consume the '/' character\n            c = r.current(); // Check the next character\n            if (c == '>') {\n                t.tagPending.selfClosing = true;\n                // Do not transition immediately, instead handle the '>' case in the next iteration\n            } else {\n                t.error(this);\n                t.transition(BeforeAttributeName);\n            }\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        default:\n            t.error(this);\n            t.transition(BeforeAttributeName);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}