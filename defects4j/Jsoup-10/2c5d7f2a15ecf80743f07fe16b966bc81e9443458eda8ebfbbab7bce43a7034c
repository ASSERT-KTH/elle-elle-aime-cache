{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            base = new URL(baseUri);\n        } catch (MalformedURLException e) {\n            // the base is unsuitable, but the attribute may be abs on its own, so try that\n            try {\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException ex) {\n                return \"\";\n            }\n        }\n\n        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n        try {\n            URL abs = new URL(base, relUrl);\n            String absUrl = abs.toExternalForm();\n\n            // Handle the specific case where the relative URL is a query string\n            if (relUrl.startsWith(\"?\")) {\n                int pathEnd = base.getPath().length();\n                String path = base.getPath().endsWith(\"/\") ? base.getPath() : base.getPath() + \"/\";\n                String query = relUrl.substring(1);\n                absUrl = base.getProtocol() + \"://\" + base.getHost() + (base.getPort() != -1 ? \":\" + base.getPort() : \"\") + path + base.getFile() + \"?\" + query;\n            }\n\n            return absUrl;\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}