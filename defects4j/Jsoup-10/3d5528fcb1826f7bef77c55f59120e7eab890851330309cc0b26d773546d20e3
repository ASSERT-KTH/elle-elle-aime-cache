{
    "generation": "import org.jsoup.nodes.Element;\nimport org.jsoup.helper.Validate;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Node;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.NodeTraversor;\nimport org.jsoup.select.NodeVisitor;\nimport org.jsoup.select.QueryParser;\nimport org.jsoup.select.Selector;\nimport org.jsoup.select.SelectorList;\nimport org.jsoup.select.TagAndClassVisitor;\nimport org.jsoup.select.TraversingVisitor;\nimport org.jsoup.select.NodeFilter;\n\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URISyntaxException;\n\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        try {\n            URL base = new URL(baseUri);\n            if (relUrl.startsWith(\"?\")) {\n                // Handle query string specifically\n                URI baseUri = base.toURI();\n                URI absUri = new URI(baseUri.getScheme(), baseUri.getAuthority(), baseUri.getPath(), relUrl.substring(1), null);\n                return absUri.toURL().toExternalForm();\n            } else {\n                // Handle other relative or absolute URLs\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            }\n        } catch (MalformedURLException | URISyntaxException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}