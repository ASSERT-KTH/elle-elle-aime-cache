{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        try {\n            URL base = new URL(baseUri);\n            if (relUrl.startsWith(\"?\")) {\n                // Special case: relative URL is just a query string.\n                // Construct the absolute URL by combining base's scheme, authority, path, and the relative query.\n                String baseUrl = base.getProtocol() + \"://\" + base.getHost();\n                if (base.getPort() != -1) {\n                    baseUrl += \":\" + base.getPort();\n                }\n                baseUrl += base.getPath();\n                String absUrl = baseUrl + relUrl;\n                return absUrl;\n            } else {\n                // Normal case: let Java's URL class resolve the relative URL against the base.\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            }\n        } catch (MalformedURLException e) {\n            // If the base URL is malformed, try to parse the relative URL as an absolute one.\n            try {\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e2) {\n                // If both base and relative URLs are malformed, return an empty string.\n                return \"\";\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}