{
    "generation": "/**\n * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n * <code>&lt;img src></code>).\n * ...\n */\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be absolute on its own\n                URI absoluteUri = new URI(urlDecode(relUrl));\n                return absoluteUri.isAbsolute() ? absoluteUri.toString() : \"\";\n            }\n            // Check if relUrl is an absolute URI, if it is, return it\n            URI absoluteUri = new URI(urlDecode(relUrl));\n            if (absoluteUri.isAbsolute()) {\n                return absoluteUri.toString();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', instead to '//path/file?foo'\n            URL abs = new URL(base, relUrl);\n            if (abs.getQuery() != null) { // only if the query is non-null\n                abs = new URL(abs.getProtocol(), abs.getHost(), absBasePath(abs) + '?' + abs.getQuery());\n            }\n            return abs.toExternalForm();\n        } catch (MalformedURLException | URISyntaxException e) {\n            return \"\";\n        }\n    }\n}\n\nprivate static String absBasePath(URL url) {\n    String path = url.getPath();\n    String basePath = \"/\";\n    int index = path.lastIndexOf('/');\n    if (index > 0) {\n        basePath = path.substring(0, index + 1);\n    }\n    return basePath;\n}\n\nprivate static String urlDecode(String encodedURL) {\n    try {\n        return URLDecoder.decode(encodedURL, StandardCharsets.UTF_8.toString());\n    } catch (UnsupportedEncodingException e) {\n        return \"\";\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}