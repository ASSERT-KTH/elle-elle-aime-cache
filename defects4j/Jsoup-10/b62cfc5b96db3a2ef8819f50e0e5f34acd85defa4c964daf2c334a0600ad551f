{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            base = new URL(baseUri);\n        } catch (MalformedURLException e) {\n            // the base is unsuitable, but the attribute may be abs on its own, so try that\n            try {\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e2) {\n                return \"\";\n            }\n        }\n\n        // Handle relative URLs with query strings\n        if (relUrl.startsWith(\"?\")) {\n            String basePath = base.getPath();\n            String newUrl = base.getProtocol() + \"://\" + base.getAuthority() + basePath + relUrl;\n            try {\n                URL abs = new URL(newUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        } else {\n            try {\n                // Use URI to handle relative paths correctly\n                URI uri = new URI(baseUri);\n                URI resolvedUri = uri.resolve(relUrl);\n                return resolvedUri.toString();\n            } catch (URISyntaxException e) {\n                return \"\";\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}