{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // augment the list with the default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    }\n\n    if (valueList!= null &&!valueList.isEmpty()) {\n        List defaultList = (List) this.defaultValues.get(option);\n        if (defaultList!= null &&!defaultList.isEmpty()) {\n            // calculate how many default values to add\n            int numToAdd = option.getArgument().getMaximum() - valueList.size();\n            int numInDefault = defaultList.size();\n            int startAt = 0;\n            List dl = new ArrayList(defaultList);\n            // remove all arguments that were already found\n            for (Object o : valueList) {\n                if (dl.contains(o)) {\n                    dl.remove(o);\n                }\n            }\n            numInDefault = dl.size();\n            if (numToAdd > numInDefault) {\n                numToAdd = numInDefault;\n            }\n            // add the default values to the end of the list\n            for (int i = 0; i < numToAdd; i++) {\n                valueList.add(defaultList.get(startAt + i));\n            }\n        }\n    }\n\n    return valueList == null? Collections.emptyList() : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}