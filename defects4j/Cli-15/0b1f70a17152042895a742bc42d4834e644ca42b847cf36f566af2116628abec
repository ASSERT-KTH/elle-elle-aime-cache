{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = new ArrayList<>(defaultValues);\n    }\n\n    // Ensure the list has the required number of default values\n    Argument argument = option.getArgument();\n    if (argument != null) {\n        int min = argument.getMinimum();\n        int max = argument.getMaximum();\n        int currentSize = valueList.size();\n\n        // Add default values from the option if necessary\n        List additionalDefaults = (List) this.defaultValues.get(option);\n        if (additionalDefaults != null) {\n            while (currentSize < min && currentSize < max) {\n                if (additionalDefaults.size() > 0) {\n                    valueList.add(additionalDefaults.remove(0));\n                    currentSize++;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // Add default values from the provided defaultValues if necessary\n        while (currentSize < min && currentSize < max) {\n            if (defaultValues.size() > 0) {\n                valueList.add(defaultValues.remove(0));\n                currentSize++;\n            } else {\n                break;\n            }\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}