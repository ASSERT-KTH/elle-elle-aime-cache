{
    "generation": "    public List getValues(final Option option,\n                          List defaultValues) {\n        // initialize the return list\n        List valueList = (List) values.get(option);\n\n        // grab the correct default values\n        if ((valueList == null) || valueList.isEmpty()) {\n            valueList = new ArrayList(defaultValues);\n        }\n\n        // augment the list with the default values from the option\n        if ((valueList == null) || valueList.isEmpty()) {\n            List additionalDefaults = (List) this.defaultValues.get(option);\n            if (additionalDefaults != null) {\n                valueList = new ArrayList(additionalDefaults);\n            }\n        }\n\n        // Ensure the list is not null and contains the minimum required size\n        if (valueList == null) {\n            valueList = new ArrayList();\n        }\n\n        // Add additional defaults if necessary\n        if (option instanceof Argument) {\n            Argument argument = (Argument) option;\n            int min = argument.getMinimum();\n            while (valueList.size() < min) {\n                List additionalDefaults = (List) this.defaultValues.get(option);\n                if (additionalDefaults != null && !additionalDefaults.isEmpty()) {\n                    valueList.addAll(additionalDefaults);\n                }\n            }\n            // Trim to required size if necessary\n            int max = argument.getMaximum();\n            if (valueList.size() > max) {\n                valueList = valueList.subList(0, max);\n            }\n        }\n\n        return valueList == null ? Collections.EMPTY_LIST : valueList;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}