{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if the option has a value, return it\n    if (valueList!= null &&!valueList.isEmpty()) {\n        // grab the correct default values if the option has not enough values\n        if (option.getArgument().getMaximum() > valueList.size()) {\n            int defaultValuesNeeded = option.getArgument().getMaximum() - valueList.size();\n            List defaultList = (List) this.defaultValues.get(option);\n            for (int i = 0; i < defaultValuesNeeded; i++) {\n                if (i < defaultList.size()) {\n                    valueList.add(defaultList.get(i));\n                } else if (defaultValues!= null && i - defaultList.size() < defaultValues.size()) {\n                    valueList.add(defaultValues.get(i - defaultList.size()));\n                }\n            }\n        }\n        return valueList;\n    }\n\n    // grab the correct default values\n    if (defaultValues!= null &&!defaultValues.isEmpty()) {\n        valueList = defaultValues;\n    } else {\n        valueList = (List) this.defaultValues.get(option);\n    }\n\n    // if there are still not enough default values, fill them with nulls\n    if (option.getArgument().getMaximum() > valueList.size()) {\n        int defaultValuesNeeded = option.getArgument().getMaximum() - valueList.size();\n        for (int i = 0; i < defaultValuesNeeded; i++) {\n            valueList.add(null);\n        }\n    }\n\n    return valueList == null? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}