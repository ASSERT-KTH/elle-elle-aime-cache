{
    "generation": "/**\n * Returns the list of values associated with the specified Option.\n * If no values are explicitly set for the Option, the default values are returned.\n * If the explicitly set values are fewer than the maximum allowed for the Option,\n * the remaining default values are appended to the list.\n *\n * @param option the Option for which to retrieve values\n * @param defaultValues the default values for the Option (may be null)\n * @return the list of values (never null)\n */\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values if none or empty\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues!= null? defaultValues : (List) this.defaultValues.get(option);\n    }\n\n    // if there are more default values as specified, add them to the list\n    if (valueList!= null &&!valueList.isEmpty() && option.getArgument()!= null) {\n        int max = option.getArgument().getMaximum();\n        if (max > valueList.size() && this.defaultValues.get(option)!= null) {\n            List remainingDefaults = new ArrayList((List) this.defaultValues.get(option));\n            remainingDefaults.removeAll(valueList); // avoid duplicates\n            int toAdd = Math.min(max - valueList.size(), remainingDefaults.size());\n            valueList.addAll(remainingDefaults.subList(0, toAdd));\n        }\n    }\n\n    // return the list, or an empty list if still null\n    return valueList == null? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}