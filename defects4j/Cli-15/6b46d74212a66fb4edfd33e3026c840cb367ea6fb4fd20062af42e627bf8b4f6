{
    "generation": "/**\n * Returns the list of values for the given option, \n * augmented with default values if necessary.\n * \n * @param option the Option to retrieve values for\n * @param defaultValues the default values to use if none are specified\n * @return the list of values for the given option\n */\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if no values are specified, use the provided default values\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = defaultValues;\n    } \n    // if values are specified but not enough to meet the option's requirements, \n    // augment with default values from the option\n    else if (!((List) values.get(option)).size() >= \n               ((Argument) option.getArgument()).getMinimum()) {\n        List optionDefaultValues = (List) this.defaultValues.get(option);\n        if (optionDefaultValues!= null) {\n            // create a new list to avoid modifying the original\n            List augmentedList = new ArrayList(valueList);\n            augmentedList.addAll(optionDefaultValues);\n            // trim the list to the option's maximum allowed size\n            if (augmentedList.size() > ((Argument) option.getArgument()).getMaximum()) {\n                augmentedList = augmentedList.subList(0, ((Argument) option.getArgument()).getMaximum());\n            }\n            valueList = augmentedList;\n        }\n    }\n\n    return valueList == null? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}