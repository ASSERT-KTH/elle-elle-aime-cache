{
    "generation": "/**\n * Retrieves the list of values associated with the specified option.\n * If no values are found, the default values for the option are returned.\n * If the default values are insufficient to meet the option's minimum requirements,\n * additional default values are appended from the global default values.\n *\n * @param option the option to retrieve values for\n * @param defaultValues the default values to use if option values are empty\n * @return the list of values associated with the option, or default values if none\n */\npublic List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values if option values are empty\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues!= null? defaultValues : (List) this.defaultValues.get(option);\n    }\n\n    // augment the list with additional default values if necessary\n    if (valueList!= null && option.getArgument()!= null) {\n        int minRequired = option.getArgument().getMinimum();\n        int currentValueCount = valueList.size();\n        if (currentValueCount < minRequired) {\n            List additionalDefaults = (List) this.defaultValues.get(option);\n            if (additionalDefaults!= null) {\n                int additionalNeeded = minRequired - currentValueCount;\n                int toAdd = Math.min(additionalNeeded, additionalDefaults.size());\n                valueList.addAll(additionalDefaults.subList(0, toAdd));\n            }\n        }\n    }\n\n    return valueList == null? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}