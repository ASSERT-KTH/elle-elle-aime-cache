{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // augment the list with the default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    }\n\n    // if there are more default values as specified, add them to the list\n    if (valueList!= null &&!valueList.isEmpty()) {\n        // copy the list first\n        Listaug = new ArrayList<>(valueList);\n        List defaults = (List) this.defaultValues.get(option);\n        if (defaults!= null) {\n            int max = ((Argument) option.getArgument()).getMaximum();\n            int min = ((Argument) option.getArgument()).getMinimum();\n            int size = valueList.size();\n            int add = Math.max(0, min - size);\n\n            // Ensure we don't add more defaults than the maximum argument count allows\n            int maxAdd = Math.max(0, max - size);\n\n            for (int i = 0; i < Math.min(add, maxAdd); i++) {\n                if (i < defaults.size()) {\n                    aug.add(defaults.get(i));\n                }\n            }\n            valueList = aug;\n        }\n    }\n\n    return valueList == null? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}