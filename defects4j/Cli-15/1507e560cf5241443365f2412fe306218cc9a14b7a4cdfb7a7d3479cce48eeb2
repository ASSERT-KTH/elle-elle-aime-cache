{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if the list is null or empty, grab the correct default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        // first, try to fill with provided default values\n        if (defaultValues!= null &&!defaultValues.isEmpty()) {\n            valueList = defaultValues;\n        } \n        // if still empty, try to fill with registered default values\n        if ((valueList == null) || valueList.isEmpty()) {\n            valueList = (List) this.defaultValues.get(option);\n        }\n    } \n    // if the list is not null and not empty, but has fewer elements than the registered defaults,\n    // augment the list with the remaining default values\n    else if (this.defaultValues.containsKey(option) && \n             valueList.size() < ((List) this.defaultValues.get(option)).size()) {\n        List defaultValueList = (List) this.defaultValues.get(option);\n        List augmentedList = new ArrayList<>(valueList);\n        augmentedList.addAll(defaultValueList.subList(valueList.size(), defaultValueList.size()));\n        valueList = augmentedList;\n    }\n\n    return valueList == null? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}