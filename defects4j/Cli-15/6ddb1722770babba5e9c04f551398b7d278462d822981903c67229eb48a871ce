{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if the valueList is null or empty, use the defaultValues\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // if the valueList is still null or empty, use the option's defaultValues\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    }\n\n    // if the option has a minimum number of arguments and the valueList's size is less than the minimum\n    if (option.getArgument().getMinimum() > valueList.size()) {\n        // find the difference between the minimum and the current size\n        int diff = option.getArgument().getMinimum() - valueList.size();\n\n        // get the option's defaultValues\n        ListedefaultValues = (List) this.defaultValues.get(option);\n\n        // add the defaultValues to the valueList until it reaches the minimum size\n        for (int i = 0; i < diff; i++) {\n            if (edefaultValues!= null && i < edefaultValues.size()) {\n                valueList.add(edefaultValues.get(i));\n            }\n        }\n    }\n\n    // return the valueList\n    return valueList == null? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}