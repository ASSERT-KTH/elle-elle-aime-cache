{
    "generation": "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n        Class<?> mixInCls, AnnotatedMethodMap mixIns)\n{\n    List<Class<?>> parents = new ArrayList<Class<?>>();\n    parents.add(mixInCls);\n    ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n    for (Class<?> mixin : parents) {\n        for (Method m : mixin.getDeclaredMethods()) {\n            if (!_isIncludableMemberMethod(m)) {\n                continue;\n            }\n            AnnotatedMethod am = methods.find(m);\n            /* Do we already have a method to augment (from sub-class\n             * that will mask this mixIn)? If so, add if visible\n             * without masking (no such annotation)\n             */\n            if (am!= null) {\n                _addMixUnders(m, am);\n                /* Otherwise will have precedence, but must wait\n                 * until we find the real method (mixIn methods are\n                 * just placeholder, can't be called)\n                 */\n            } else {\n                // Well, or, as per [Issue#515], multi-level merge within mixins...\n                mixIns.add(_constructMethod(m));\n                // Also add methods from the superclass of the mixin class\n                Class<?> superClass = mixin.getSuperclass();\n                if (superClass!= null && superClass!= Object.class) {\n                    for (Method superMethod : superClass.getDeclaredMethods()) {\n                        if (!_isIncludableMemberMethod(superMethod)) {\n                            continue;\n                        }\n                        AnnotatedMethod superAm = methods.find(superMethod);\n                        if (superAm == null) {\n                            mixIns.add(_constructMethod(superMethod));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}