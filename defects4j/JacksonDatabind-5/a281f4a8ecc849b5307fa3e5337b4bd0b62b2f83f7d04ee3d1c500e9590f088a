{
    "generation": "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n        Class<?> mixInCls, AnnotatedMethodMap mixIns)\n{\n    List<Class<?>> parents = new ArrayList<Class<?>>();\n    parents.add(mixInCls);\n    ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n    for (Class<?> mixin : parents) {\n        for (Method m : mixin.getDeclaredMethods()) {\n            if (!_isIncludableMemberMethod(m)) {\n                continue;\n            }\n            AnnotatedMethod am = methods.find(m);\n            /* Do we already have a method to augment (from sub-class\n             * that will mask this mixIn)? If so, add if visible\n             * without masking (no such annotation)\n             */\n            if (am != null) {\n                _addMixUnders(m, am);\n            } else {\n                // Ensure that the method is added to mixIns if it's not already present\n                AnnotatedMethod mixInMethod = _constructMethod(m);\n                AnnotatedMethod existingMethod = mixIns.find(m);\n                if (existingMethod == null) {\n                    mixIns.add(mixInMethod);\n                } else {\n                    // If a method with the same name and parameters already exists, check for override\n                    if (!existingMethod.equals(mixInMethod)) {\n                        _addMixUnders(m, existingMethod);\n                    }\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}