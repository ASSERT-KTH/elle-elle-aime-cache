{
    "generation": "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n        Class<?> mixInCls, AnnotatedMethodMap mixIns) {\n    List<Class<?>> parents = new ArrayList<>();\n    parents.add(mixInCls);\n    ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n    for (Class<?> mixin : parents) {\n        for (Method m : mixin.getDeclaredMethods()) {\n            if (!_isIncludableMemberMethod(m)) {\n                continue;\n            }\n            AnnotatedMethod am = methods.find(m);\n            // Check if the method is already present in the target methods\n            if (am != null) {\n                _addMixUnders(m, am);\n                // If already present, no need to add to mixIns\n            } else {\n                // Check if the method is already present in mixIns\n                AnnotatedMethod existingMixIn = mixIns.find(m);\n                if (existingMixIn != null) {\n                    // Merge the new mixin method with the existing one\n                    _mergeMixIns(existingMixIn, _constructMethod(m));\n                } else {\n                    // Add the new mixin method to the mixIns map\n                    mixIns.add(_constructMethod(m));\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}