{
    "generation": "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n{\n    List<Class<?>> parents = new ArrayList<Class<?>>();\n    parents.add(mixInCls);\n    ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n    for (Class<?> mixin : parents) {\n        for (Method m : mixin.getDeclaredMethods()) {\n            if (!_isIncludableMemberMethod(m)) {\n                continue;\n            }\n            AnnotatedMethod am = methods.find(m);\n            /* Do we already have a method to augment (from sub-class\n             * that will mask this mixIn)? If so, add if visible\n             * without masking (no such annotation)\n             */\n            if (am!= null) {\n                _addMixUnders(m, am);\n            } else {\n                // Fix for [Issue#515]: also check in 'methods' for super types of mixin methods\n                boolean foundInSupertype = false;\n                for (Class<?> supertype : parents) {\n                    if (supertype!= mixin && hasMethod(supertype, m.getName(), m.getParameterTypes())) {\n                        am = methods.find(supertype.getDeclaredMethod(m.getName(), m.getParameterTypes()));\n                        if (am!= null) {\n                            _addMixUnders(m, am);\n                            foundInSupertype = true;\n                            break;\n                        }\n                    }\n                }\n                if (!foundInSupertype) {\n                    // Well, or, as per [Issue#515], multi-level merge within mixins...\n                    mixIns.add(_constructMethod(m));\n                }\n            }\n        }\n    }\n}\n\n// Helper method to check if a class has a method with the given name and parameter types\nprivate boolean hasMethod(Class<?> clazz, String name, Class<?>[] paramTypes) {\n    try {\n        clazz.getDeclaredMethod(name, paramTypes);\n        return true;\n    } catch (NoSuchMethodException e) {\n        return false;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}