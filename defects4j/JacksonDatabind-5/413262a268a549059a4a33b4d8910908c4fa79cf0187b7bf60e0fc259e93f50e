{
    "generation": "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n                Class<?> mixInCls, AnnotatedMethodMap mixIns)\n{\n    List<Class<?>> parents = new ArrayList<Class<?>>();\n    parents.add(mixInCls);\n    ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n\n    // Traverse the inheritance hierarchy in reverse order to give higher priority to methods in the subclass.\n    for (int i = parents.size() - 1; i >= 0; i--) {\n        Class<?> mixin = parents.get(i);\n        for (Method m : mixin.getDeclaredMethods()) {\n            if (!_isIncludableMemberMethod(m)) {\n                continue;\n            }\n            AnnotatedMethod am = methods.find(m);\n            /* Do we already have a method to augment (from sub-class\n             * that will mask this mixIn)? If so, add if visible\n             * without masking (no such annotation)\n             */\n            if (am != null) {\n                _addMixUnders(m, am);\n            /* Otherwise will have precedence, but must wait\n             * until we find the real method (mixIn methods are\n             * just placeholder, can't be called)\n             */\n            } else {\n                SessionContext currentContext = mixIns.getSessionContext();\n                MethodReference methodRef = currentContext.constructMethodReference(m, new MixInResolver(targetClass, mixin));\n                if (mixIns.get(methodRef) == null) {\n                    mixIns.add(_constructMethod(methodRef));\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}