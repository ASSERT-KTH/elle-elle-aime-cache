{
    "generation": "    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n    {\n        List<Class<?>> parents = new ArrayList<Class<?>>();\n        parents.add(mixInCls);\n        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n\n        // Store methods in map for efficient lookup\n        Map<Signature, AnnotatedMethod> existingMethods = new HashMap<>();\n        for (AnnotatedMethod am : methods.values()) {\n            existingMethods.put(am.getSignature(), am);\n        }\n\n        for (Class<?> mixin : parents) {\n            for (Method m : mixin.getDeclaredMethods()) {\n                if (!_isIncludableMemberMethod(m)) {\n                    continue;\n                }\n                AnnotatedMethod am = existingMethods.get(new Signature(m));\n                // if the method already exists, synthesize mix-under method\n                if (am != null) {\n                    _addMixUnders(m, am);\n                } else {\n                    // if the method doesn't exist, add it to the mixIns\n                    mixIns.add(_constructMethod(m));\n                }\n            }\n        }\n    }\n\n    // A simple helper class to store method signatures for efficient lookup\n    private static class Signature {\n        final String name;\n        final Class<?>[] params;\n\n        Signature(Method m) {\n            name = m.getName();\n            params = m.getParameterTypes();\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Signature that = (Signature) o;\n            return name.equals(that.name) && Arrays.equals(params, that.params);\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(name, Arrays.hashCode(params));\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}