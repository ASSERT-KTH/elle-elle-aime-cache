{
    "generation": "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n        Class<?> mixInCls, AnnotatedMethodMap mixIns)\n{\n    List<Class<?>> parents = new ArrayList<Class<?>>();\n    parents.add(mixInCls);\n    ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n    for (Class<?> mixin : parents) {\n        for (Method m : mixin.getDeclaredMethods()) {\n            if (!_isIncludableMemberMethod(m)) {\n                continue;\n            }\n            AnnotatedMethod am = methods.find(m);\n            if (am != null) {\n                _addMixUnders(m, am);\n            } else {\n                // Check if the method already exists in mixIns\n                AnnotatedMethod existing = mixIns.find(m);\n                if (existing != null) {\n                    // Merge annotations if method already exists\n                    AnnotatedMethod merged = _constructMethod(m);\n                    merged = _mergeAnnotations(merged, existing);\n                    mixIns.add(merged);\n                } else {\n                    // Add the new method to mixIns\n                    mixIns.add(_constructMethod(m));\n                }\n            }\n        }\n    }\n}\n\n// Helper method to merge annotations\nprivate AnnotatedMethod _mergeAnnotations(AnnotatedMethod target, AnnotatedMethod source) {\n    AnnotationMap targetAnnotations = target.getAnnotationMap();\n    AnnotationMap sourceAnnotations = source.getAnnotationMap();\n    for (Map.Entry<Class<? extends Annotation>, Annotation> entry : sourceAnnotations) {\n        if (!targetAnnotations.has(entry.getKey())) {\n            targetAnnotations.add(entry.getKey(), entry.getValue());\n        }\n    }\n    return new AnnotatedMethod(target.getAnnotated(), targetAnnotations);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}