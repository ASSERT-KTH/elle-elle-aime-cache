{
    "generation": "    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n    {\n        List<Class<?>> parents = new ArrayList<Class<?>>();\n        parents.add(mixInCls);\n        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n        for (Class<?> mixin : parents) {\n            for (Method m : mixin.getDeclaredMethods()) {\n                if (!_isIncludableMemberMethod(m)) {\n                    continue;\n                }\n                AnnotatedMethod am = methods.find(m);\n                if (am != null) {\n                    _addMixUnders(m, am);\n                } else {\n                    // Handle multi-level merging of mixins as per Issue#515\n                    AnnotatedMethod existing = mixIns.find(m);\n                    if (existing != null) {\n                        // If a method with the same signature already exists in the mixIns, \n                        // we should merge or replace it based on the specific rules of Jackson.\n                        // Here, we'll simply replace the existing one with a new one for simplicity.\n                        mixIns.remove(existing);\n                    }\n                    mixIns.add(_constructMethod(m));\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}