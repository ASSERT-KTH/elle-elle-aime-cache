{
    "generation": "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n{\n    List<Class<?>> parents = new ArrayList<Class<?>>();\n    parents.add(mixInCls);\n    ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n    for (Class<?> mixin : parents) {\n        for (Method m : mixin.getDeclaredMethods()) {\n            if (!_isIncludableMemberMethod(m)) {\n                continue;\n            }\n            AnnotatedMethod am = methods.find(m);\n            if (am!= null) {\n                _addMixUnders(m, am);\n            } else {\n                // Fix for [Issue#515]: also add mixin methods when not masked by a subclass method\n                AnnotatedMethod existingMixIn = mixIns.find(m);\n                if (existingMixIn == null) {\n                    mixIns.add(_constructMethod(m));\n                }\n            }\n        }\n    }\n    // Additional fix to ensure mixin methods are not lost: iterate over mixIns again and add any remaining\n    for (AnnotatedMethod mixInMethod : mixIns) {\n        if (!methods.hasAnyMixinAnnotations(mixInMethod.getAnnotated())) {\n            methods.add(mixInMethod);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}