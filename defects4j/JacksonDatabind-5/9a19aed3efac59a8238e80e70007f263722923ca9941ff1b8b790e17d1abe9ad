{
    "generation": "protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,\n            Class<?> mixInCls, AnnotatedMethodMap mixIns)\n{\n    List<Class<?>> parents = new ArrayList<Class<?>>();\n    parents.add(mixInCls);\n    ClassUtil.findSuperTypes(mixInCls, targetClass, parents);\n    for (Class<?> mixin : parents) {\n        for (Method m : mixin.getDeclaredMethods()) {\n            if (!_isIncludableMemberMethod(m)) {\n                continue;\n            }\n            AnnotatedMethod am = methods.find(m);\n            /* Do we already have a method to augment (from sub-class\n             * that will mask this mixIn)? If so, add if visible\n             * without masking (no such annotation)\n             */\n            if (am!= null) {\n                _addMixUnders(m, am);\n            } else {\n                // Fix for [Issue#515]: also add mixin methods when not found in target class\n                mixIns.add(_constructMethod(m));\n                // Additionally, check if the mixin method is overridden in the target class or its superclasses\n                try {\n                    targetClass.getDeclaredMethod(m.getName(), m.getParameterTypes());\n                } catch (NoSuchMethodException e) {\n                    // If not found, add the mixin method to the target class's method map\n                    methods.add(_constructMethod(m));\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}