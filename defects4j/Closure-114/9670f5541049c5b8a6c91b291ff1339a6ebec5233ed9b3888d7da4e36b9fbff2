{
    "generation": "/**\n * Records the assignment of a name in the given traversal.\n * \n * @param t          the current traversal\n * @param n          the assignment node\n * @param recordNode the node to record the assignment for\n */\nprivate void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      // For loop init/condition/iteration parts: associate with the RHS (recordNode) \n      // only if the assignment is not the first child (i.e., not the init part).\n      recordDepScope(parent.getFirstChild().getNext()!= n? recordNode : nameNode, ns);\n    } else if (NodeUtil.isAssignmentParentWithCall(n)) {\n      // If the assignment is part of a caller expression, associate with the LHS (nameNode).\n      recordDepScope(nameNode, ns);\n    } else {\n      // General case: associate the RHS (recordNode) as the caller.\n      recordDepScope(recordNode, ns);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}