{
    "generation": "/**\n * Records the assignment of a node to a name, handling dependency scopes.\n * \n * @param t        NodeTraversal instance\n * @param n        Node representing the assignment\n * @param recordNode Node to record the dependency scope for\n */\nprivate void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      // Patch for assignments in FOR loop's init, condition, or iteration part\n      if (parent.getFirstChild().getNext() == n) {\n        // Assignment is the first child (init part), use nameNode for dep scope\n        recordDepScope(nameNode, ns);\n      } else {\n        // Assignment is in condition or iteration part, use recordNode for dep scope\n        recordDepScope(recordNode, ns);\n      }\n    } else if (n.isAssign() && n.getFirstChild().isName() && \n               NodeUtil.isFunctionLiteral(n.getSecondChild())) {\n      // Handle assignment with a function literal on the RHS, \n      // where the assignment is the caller expression (e.g., \"(fun = function(){ x; })()\")\n      recordDepScope(nameNode, ns); // Associate dep scope with LHS (nameNode)\n    } else {\n      // Default case: record dependency scope for the recordNode\n      recordDepScope(recordNode, ns);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}