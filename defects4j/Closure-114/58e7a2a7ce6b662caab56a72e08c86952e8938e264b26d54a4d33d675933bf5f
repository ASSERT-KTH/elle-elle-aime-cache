{
    "generation": "/**\n * Records the assignment of a name to a scope, handling special cases for FOR loops and assignment-as-caller.\n * \n * @param t         NodeTraversal instance\n * @param n         Assignment Node\n * @param recordNode Node to record the assignment for\n */\nprivate void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      // In a FOR loop, only the last child (the iteration part) should claim the loop as dependency scope\n      if (parent.getLastChild() == n) {\n        recordDepScope(recordNode, ns);\n      }\n    } else if (NodeUtil.isAssignmentAsCaller(n)) {\n      // If the assignment is the caller expression, associate the NameInformation with the lhs (nameNode)\n      recordDepScope(nameNode, ns);\n    } else {\n      // General case: associate the NameInformation with the assignment's context (recordNode)\n      recordDepScope(recordNode, ns);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}