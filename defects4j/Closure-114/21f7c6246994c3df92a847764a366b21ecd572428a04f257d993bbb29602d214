{
    "generation": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          if (parent.getFirstChild().getNext() != n) {\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else if (parent.isExprResult() || parent.isIn() || parent.isAssign()) {\n          // Specifically handle cases where the parent is an expression result\n          // or another assignment. This ensures the correct scope is recorded.\n          if (NodeUtil.isCall(parent) || NodeUtil.isNew(parent.getParent())) {\n            // Handle the case where this assignment is part of a call or new expression,\n            // which means it actually acts like the rhs.\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else {\n          recordDepScope(recordNode, ns);\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}