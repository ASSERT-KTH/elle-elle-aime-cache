{
    "generation": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n      // Patch for assignments that appear in the init,\n      // condition or iteration part of a FOR loop.  Without\n      // this change, all 3 of those parts try to claim the for\n      // loop as their dependency scope.  The last assignment in\n      // those three fields wins, which can result in incorrect\n      // reference edges between referenced and assigned variables.\n      //\n      // TODO(user) revisit the dependency scope calculation\n      // logic.\n      if (parent.getFirstChild().getNext() != n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n    } else {\n      // The rhs of the assignment is the caller, so it's used by the\n      // context. Don't associate it w/ the lhs.\n      // We need to check if the assignment is part of a larger expression\n      // or function call, and if so, use the parent node as the record node.\n      Node potentialCaller = n;\n      while (potentialCaller.getParent() != null && \n             !potentialCaller.getParent().isExprResult() && \n             !potentialCaller.getParent().isFunction() && \n             !potentialCaller.getParent().isScript()) {\n        potentialCaller = potentialCaller.getParent();\n      }\n      recordDepScope(potentialCaller, ns);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}