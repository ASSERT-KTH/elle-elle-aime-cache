{
    "generation": "/**\n * Records the assignment of a name to the dependency scope.\n * \n * @param t         NodeTraversal instance\n * @param n         Assignment node\n * @param recordNode Node to record the assignment in the dependency scope\n */\nprivate void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      // Patch for assignments in FOR loop's init, condition, or iteration part\n      recordDepScope(nameNode, ns); // Always record in nameNode for consistency\n    } else if (n.isAssign() && n.getFirstChild().isName() && n.getLastChild().isFunction()) {\n      // Special handling for assignment with a function expression on the RHS\n      // (e.g., var fun = function(){...}; fun();)\n      // Record in the nameNode to avoid incorrect dependency scope when called immediately\n      recordDepScope(nameNode, ns);\n    } else {\n      // Default behavior: record in the recordNode\n      recordDepScope(recordNode, ns);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}