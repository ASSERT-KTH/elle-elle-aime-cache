{
    "generation": "/**\n * Records the assignment between two nodes, handling FOR loops and assignment as caller expressions.\n *\n * @param t         NodeTraversal instance\n * @param n         Assignment Node\n * @param recordNode Node to record dependency scope for\n */\nprivate void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      // In a FOR loop, associate the dependency scope with the name node if the assignment is the init part,\n      // otherwise associate it with the record node.\n      recordDepScope(parent.getFirstChild().getNext() == n? nameNode : recordNode, ns);\n    } else if (NodeUtil.isAssignment(n) && NodeUtil.isCall(n.getLastChild())) {\n      // If the assignment is immediately followed by a call, do not associate the dependency scope with the record node.\n      // Instead, associate it with the name node to avoid incorrect reference edges.\n      recordDepScope(nameNode, ns);\n    } else {\n      recordDepScope(recordNode, ns);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}