{
    "generation": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n      // Added a check to handle the assignment being part of the declaration in a FOR loop\n      if (parent.getFirstChild().getFirstChild() == nameNode) {\n        // Use the FOR node as the record node for all parts of the initialization\n        recordDepScope(parent, ns);\n      } else if (parent.getFirstChild().getNext() != n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n    } else {\n      // If the assignment is a part of a CALL node, use the CALL node as the record node\n      if (recordNode.isCall()) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(recordNode, ns);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}