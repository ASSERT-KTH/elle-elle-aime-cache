{
    "generation": "/**\n * Fixes the decode function to handle larger dictionary sizes by \n * using the full 64-bit dictSize in LZMAInputStream constructor.\n *\n * @param in      the input stream\n * @param coder   the coder\n * @param password the password (not used in this implementation)\n * @return the decoded input stream\n * @throws IOException if an I/O error occurs\n */\n@Override\nInputStream decode(final InputStream in, final Coder coder,\n                    byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1] & 0xFF; // ensure first byte is treated as unsigned\n    for (int i = 1; i < 4; i++) {\n        dictSize |= ((long) coder.properties[i + 1] & 0xFF) << (8 * i);\n    }\n    if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n        throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n    }\n    // Use the full 64-bit dictSize\n    return new LZMAInputStream(in, -1, propsByte, dictSize);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}