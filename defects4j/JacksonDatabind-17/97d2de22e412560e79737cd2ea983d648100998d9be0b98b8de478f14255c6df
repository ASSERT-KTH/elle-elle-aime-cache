{
    "generation": "/**\n * Determines if the default type handler should be used for the given type.\n *\n * Natural types (String, Boolean, Integer, Double) never use typing because\n * they are concrete and final, and serializers/deserializers ignore any attempts\n * to enforce typing.\n *\n * @param t the JavaType to check\n * @return true if default typing should be used, false otherwise\n */\npublic boolean useForType(JavaType t) {\n    switch (_appliesFor) {\n        case NON_CONCRETE_AND_ARRAYS:\n            // Handle arrays by checking their content type\n            while (t.isArrayType()) {\n                t = t.getContentType();\n            }\n            // Fall through to OBJECT_AND_NON_CONCRETE case\n        case OBJECT_AND_NON_CONCRETE:\n            // Apply typing for Object.class or non-concrete types,\n            // excluding TreeNode and natural types\n            Class<?> rawClass = t.getRawClass();\n            if (rawClass == Object.class || !t.isConcrete()) {\n                // Exclude TreeNode and natural types\n                if (!TreeNode.class.isAssignableFrom(rawClass) && !isNaturalType(rawClass)) {\n                    return true;\n                }\n            }\n            return false;\n\n        case NON_FINAL:\n            // Handle non-final types, excluding TreeNode and natural types\n            while (t.isArrayType()) {\n                t = t.getContentType();\n            }\n            Class<?> contentClass = t.getRawClass();\n            if (!t.isFinal() && !TreeNode.class.isAssignableFrom(contentClass) && !isNaturalType(contentClass)) {\n                return true;\n            }\n            return false;\n\n        case JAVA_LANG_OBJECT:\n            // Only apply for Object.class\n            return t.getRawClass() == Object.class;\n\n        default:\n            throw new IllegalArgumentException(\"Unknown appliesFor setting: \" + _appliesFor);\n    }\n}\n\n/**\n * Checks if the given class is a natural type that should never use typing.\n *\n * @param cls the class to check\n * @return true if it's a natural type, false otherwise\n */\nprivate boolean isNaturalType(Class<?> cls) {\n    return cls == String.class ||\n           cls == Boolean.class ||\n           cls == Integer.class ||\n           cls == Double.class ||\n           cls == String[].class ||\n           cls == Boolean[].class ||\n           cls == Integer[].class ||\n           cls == Double[].class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}