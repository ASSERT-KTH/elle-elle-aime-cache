{
    "generation": "/**\n * Method called to check if the default type handler should be\n * used for given type.\n * Note: \"natural types\" (String, Boolean, Integer, Double) will never\n * use typing; that is both due to them being concrete and final,\n * and since actual serializers and deserializers will also ignore any\n * attempts to enforce typing.\n */\npublic boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        JavaType contentType = t;\n        while (contentType.isArrayType()) {\n            contentType = contentType.getContentType();\n        }\n        // fall through\n    case OBJECT_AND_NON_CONCRETE:\n        return (contentType.getRawClass() == Object.class)\n                || (!contentType.isConcrete()\n                        // [databind#88] Should not apply to JSON tree models:\n                &&!TreeNode.class.isAssignableFrom(contentType.getRawClass()));\n\n    case NON_FINAL:\n        contentType = t;\n        while (contentType.isArrayType()) {\n            contentType = contentType.getContentType();\n        }\n        // [Issue#88] Should not apply to JSON tree models:\n        return!contentType.isFinal() &&!TreeNode.class.isAssignableFrom(contentType.getRawClass());\n    default:\n    //case JAVA_LANG_OBJECT:\n//        return t.isJavaLangObject();\n        return (t.getRawClass() == Object.class);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}