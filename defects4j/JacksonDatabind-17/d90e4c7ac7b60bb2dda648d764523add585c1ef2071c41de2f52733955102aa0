{
    "generation": "public boolean useForType(JavaType t) {\n    switch (_appliesFor) {\n        case NON_CONCRETE_AND_ARRAYS:\n            while (t.isArrayType()) {\n                t = t.getContentType();\n            }\n            // fall through\n        case OBJECT_AND_NON_CONCRETE:\n            // Check if the type is one of the simple types\n            if (isSimpleType(t)) {\n                return false;\n            }\n            return (t.getRawClass() == Object.class)\n                    || (!t.isConcrete()\n                    // [databind#88] Should not apply to JSON tree models:\n                    || TreeNode.class.isAssignableFrom(t.getRawClass()));\n\n        case NON_FINAL:\n            while (t.isArrayType()) {\n                t = t.getContentType();\n            }\n            // [Issue#88] Should not apply to JSON tree models:\n            return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());\n        default:\n        //case JAVA_LANG_OBJECT:\n            return (t.getRawClass() == Object.class);\n    }\n}\n\nprivate boolean isSimpleType(JavaType type) {\n    Class<?> rawClass = type.getRawClass();\n    return rawClass.isPrimitive()\n            || rawClass == String.class\n            || rawClass == Boolean.class\n            || rawClass == Integer.class\n            || rawClass == Double.class\n            || rawClass == Long.class\n            || rawClass == Float.class\n            || rawClass == Short.class\n            || rawClass == Character.class\n            || rawClass == Byte.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}