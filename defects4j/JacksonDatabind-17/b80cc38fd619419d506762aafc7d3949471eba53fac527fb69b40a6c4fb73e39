{
    "generation": "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n        // fall through\n    case OBJECT_AND_NON_CONCRETE:\n        if (_isEnabledDefaultTyping && !_typeFactory.hasNonConcreteTypeIdResolver()) {\n            return t.getRawClass() != Object.class && (!t.isConcrete() || TreeNode.class.isAssignableFrom(t.getRawClass()));\n        }\n        return (t.getRawClass() == Object.class || !t.isConcrete() || TreeNode.class.isAssignableFrom(t.getRawClass()));\n    case NON_FINAL:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n        if (_isEnabledDefaultTyping && !_typeFactory.hasNonConcreteTypeIdResolver()) {\n            return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());\n        }\n        return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());\n    default:\n        return t.getRawClass() == Object.class;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}