{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    \n    // Define hexadecimal prefixes\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    String prefix = null;\n    for (String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            prefix = pfx;\n            break;\n        }\n    }\n    \n    if (prefix != null) {\n        int pfxLen = prefix.length();\n        String hexValue = str.substring(pfxLen);\n        \n        // Check for leading zeros after the prefix\n        int hexDigits = hexValue.length();\n        \n        // Convert hexadecimal string to number\n        try {\n            if (hexDigits <= 8) {\n                return Integer.parseUnsignedInt(hexValue, 16);\n            } else if (hexDigits <= 16) {\n                return Long.parseUnsignedLong(hexValue, 16);\n            } else {\n                return new BigInteger(hexValue, 16);\n            }\n        } catch (NumberFormatException e) {\n            throw new NumberFormatException(\"Invalid hexadecimal number: \" + str);\n        }\n    } else {\n        // Handle decimal numbers or numbers with type qualifiers\n        // ... (existing logic for decimal numbers and type qualifiers)\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}