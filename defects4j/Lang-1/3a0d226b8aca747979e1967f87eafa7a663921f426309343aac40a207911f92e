{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    // Check for sign\n    boolean negative = false;\n    if (str.startsWith(\"-\")) {\n        negative = true;\n        str = str.substring(1);\n    }\n\n    // Check for hex prefixes\n    String numStr;\n    int pfxLen = 0;\n    if (str.startsWith(\"0x\") || str.startsWith(\"0X\")) {\n        pfxLen = 2;\n    } else if (str.startsWith(\"#\")) {\n        pfxLen = 1;\n    } else {\n        // Not a hex number, handle differently\n        // ... (existing logic for non-hex numbers)\n    }\n    numStr = str.substring(pfxLen);\n\n    int hexDigits = numStr.length();\n    if (hexDigits > 16) {\n        BigInteger bigInt = new BigInteger(numStr, 16);\n        return negative ? bigInt.negate() : bigInt;\n    } else if (hexDigits > 8) {\n        long longVal = Long.parseLong(numStr, 16);\n        return negative ? -longVal : longVal;\n    } else {\n        int intVal = Integer.parseInt(numStr, 16);\n        return negative ? -intVal : intVal;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}