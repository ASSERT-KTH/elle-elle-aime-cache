{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    for (final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            return parseHexNumber(str, pfx.length());\n        }\n    }\n\n    // other number parsing logic...\n\n    // hex number parsing\n    final int hexDigits = str.length() - pfxLen;\n    if (hexDigits > 16) { // too many for Long\n        return new BigInteger(str.substring(pfxLen), 16);\n    } else if (hexDigits > 8) { // too many for an int\n        return Long.parseLong(str.substring(pfxLen), 16);\n    } else {\n        return Integer.parseInt(str.substring(pfxLen), 16);\n    }\n}\n\nprivate static Number parseHexNumber(String str, int pfxLen) {\n    final int hexDigits = str.length() - pfxLen;\n    if (hexDigits > 16) { // too many for Long\n        return new BigInteger(str.substring(pfxLen), 16);\n    } else if (hexDigits > 8) { // too many for an int\n        return Long.parseLong(str.substring(pfxLen), 16);\n    } else {\n        return Integer.parseInt(str.substring(pfxLen), 16);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}