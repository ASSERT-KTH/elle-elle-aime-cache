{
    "generation": "/**\n * <p>Turns a string value into a java.lang.Number.</p>\n *\n *... (rest of the Javadoc remains the same)\n *\n * @param str  String containing a number, may be null\n * @return Number created from the string (or null if the input is null)\n * @throws NumberFormatException if the value cannot be converted\n */\npublic static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for(final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length(); // Fixed: assign the actual prefix length, not increment\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        final String numeric = str.substring(pfxLen); // Extract the numeric part without prefix\n        if (numeric.startsWith(\"0\") && numeric.length() > 1 &&!numeric.substring(1).startsWith(\"x\") \n            &&!numeric.substring(1).startsWith(\"X\")) { \n            // Handle octal numbers starting with 0\n            return createNumber(numeric, 8);\n        }\n        final int hexDigits = numeric.length();\n        if (hexDigits > 16) { // too many for Long\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) { // too many for an int\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n    //... (rest of the method remains the same)\n}\n\n// Additional method to handle numbers with a specific radix\nprivate static Number createNumber(final String str, int radix) throws NumberFormatException {\n    try {\n        int num = Integer.parseInt(str, radix);\n        if (str.startsWith(\"-\") && (num!= Integer.MIN_VALUE || radix == 10)) {\n            return num;\n        } else if (!str.startsWith(\"-\") && (num!= Integer.MAX_VALUE || radix == 10)) {\n            return num;\n        }\n    } catch (NumberFormatException nfe) { // NOPMD\n        // ignore the bad number\n    }\n    try {\n        return Long.parseLong(str, radix);\n    } catch (NumberFormatException nfe) { // NOPMD\n        // ignore the bad number\n    }\n    return new BigInteger(str, radix);\n}\n\n// Additional method to handle BigInteger creation from a hex string\nprivate static Number createBigInteger(final String str) throws NumberFormatException {\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    for(final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            return new BigInteger(str.substring(pfx.length()), 16);\n        }\n    }\n    return new BigInteger(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}