{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hexPrefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int prefixLength = 0;\n    for (final String prefix : hexPrefixes) {\n        if (str.startsWith(prefix)) {\n            prefixLength += prefix.length();\n            break;\n        }\n    }\n    if (prefixLength > 0) { // we have a hex number\n        String hexNumber = str.substring(prefixLength);\n        if (hexNumber.startsWith(\"-\")) { // Strip off additional negation from the number if applicable\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        if (hexNumber.length() == 0) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        final boolean negative = str.charAt(0) == '-';\n        // Parsing hex number\n        if (hexNumber.length() > 16) { // too many digits for a Long\n            return createBigInteger(str);\n        }\n        if (hexNumber.length() > 8) { // too many digits for an Integer\n            try {\n                return negative ? -Long.parseLong(hexNumber, 16) : Long.parseLong(hexNumber, 16);\n            } catch (NumberFormatException e) {\n                return createBigInteger(str);\n            }\n        }\n        return negative ? -Integer.parseInt(hexNumber, 16) : Integer.parseInt(hexNumber, 16);\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mantissa;\n    String decimal;\n    String exponent;\n    final int decimalPos = str.indexOf('.');\n    final int exponentPos = Math.max(str.indexOf('e'), str.indexOf('E'));\n    int numDecimals = 0;\n\n    if (decimalPos > -1) { // there is a decimal point\n        if (exponentPos > -1) { // there is an exponent\n            if (exponentPos < decimalPos || exponentPos > str.length() - 1) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            decimal = str.substring(decimalPos + 1, exponentPos);\n        } else {\n            decimal = str.substring(decimalPos + 1);\n        }\n        mantissa = str.substring(0, decimalPos);\n        numDecimals = decimal.length();\n    } else {\n        if (exponentPos > -1) {\n            if (exponentPos > str.length() - 1) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mantissa = str.substring(0, exponentPos);\n        } else {\n            mantissa = str;\n        }\n        decimal = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (exponentPos > -1 && exponentPos < str.length() - 1) {\n            exponent = str.substring(exponentPos + 1, str.length() - 1);\n        } else {\n            exponent = null;\n        }\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (decimal == null && exponent == null &&\n                        (numeric.charAt(0) == '-' ? isDigits(numeric.substring(1)) : isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException e) {\n                        return createBigInteger(numeric);\n                    }\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F': {\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (final NumberFormatException e) {\n                    // Ignore and fall through to double\n                }\n            }\n            case 'd':\n            case 'D': {\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException e) {\n                    // Ignore and fall through to BigDecimal\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n            }\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    if (exponentPos > -1 && exponentPos < str.length() - 1) {\n        exponent = str.substring(exponentPos + 1);\n    } else {\n        exponent = null;\n    }\n    if (decimal == null && exponent == null) {\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException e) {\n            try {\n                return createLong(str);\n            } catch (final NumberFormatException e2) {\n                return createBigInteger(str);\n            }\n        }\n    }\n    final boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n    try {\n        if (numDecimals <= 7) {\n            final Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        }\n    } catch (final NumberFormatException e) {\n        // Ignore and continue\n    }\n    try {\n        if (numDecimals <= 16) {\n            final Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        }\n    } catch (final NumberFormatException e) {\n        // Ignore and continue\n    }\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}