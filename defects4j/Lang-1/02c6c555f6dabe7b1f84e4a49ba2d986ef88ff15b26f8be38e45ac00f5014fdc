{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    \n    // Handle hexadecimal numbers\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    for (final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            final int hexDigits = str.length() - pfx.length();\n            final String hexNumber = str.substring(pfx.length());\n            \n            if (hexDigits <= 8 || (pfx.startsWith(\"-\") && hexDigits <= 9)) {\n                return Integer.parseInt(hexNumber, 16);\n            } else if (hexDigits <= 16 || (pfx.startsWith(\"-\") && hexDigits <= 17)) {\n                return Long.parseLong(hexNumber, 16);\n            } else {\n                return new BigInteger(str.substring(pfx.length()), 16);\n            }\n        }\n    }\n\n    // Handle octal numbers\n    if (str.startsWith(\"0\") && str.length() > 1 && str.charAt(1) != '.') {\n        try {\n            return Integer.parseInt(str, 8);\n        } catch (NumberFormatException e) {\n            try {\n                return Long.parseLong(str, 8);\n            } catch (NumberFormatException e1) {\n                return new BigInteger(str, 8);\n            }\n        }\n    }\n\n    // Handle decimal numbers\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec = null;\n    String exp = null;\n    final int decPos = str.indexOf('.');\n    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n\n    int numDecimals = 0;\n    if (decPos > -1) { // there is a decimal point\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length();\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n    }\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    }\n\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    \n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        final String numeric = str.substring(0, str.length() - 1);\n        switch (Character.toLowerCase(lastChar)) {\n            case 'l':\n                try {\n                    return createLong(numeric);\n                } catch (final NumberFormatException nfe) {\n                    return new BigInteger(numeric);\n                }\n            case 'f':\n                final Float f = NumberUtils.createFloat(numeric);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n                // Fall through\n            case 'd':\n                final Double d = NumberUtils.createDouble(numeric);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    // User doesn't have a preference on the return type, so let's start small and go from there\n    if (dec == null && exp == null) {\n        // Must be an Integer, Long, BigInteger\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) {\n            try {\n                return createLong(str);\n            } catch (final NumberFormatException nfe2) {\n                return new BigInteger(str);\n            }\n        }\n    }\n\n    // Must be a Float, Double, BigDecimal\n    try {\n        if (numDecimals <= 7) {\n            final Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n        // ignore the bad number\n    }\n    try {\n        if (numDecimals <= 16) {\n            final Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n        // ignore the bad number\n    }\n\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}