{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Define hex prefixes\n    final String[] hexPrefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    String prefix = \"\";\n    for (String pfx : hexPrefixes) {\n        if (str.startsWith(pfx)) {\n            prefix = pfx;\n            break;\n        }\n    }\n    if (!prefix.isEmpty()) { // we have a hex number\n        int pfxLen = prefix.length();\n        String hexValue = str.substring(pfxLen);\n        int hexDigits = hexValue.length();\n        // Remove leading zeros for accurate digit count\n        while (hexDigits > 1 && hexValue.charAt(0) == '0') {\n            hexValue = hexValue.substring(1);\n            hexDigits--;\n        }\n        if (hexDigits > 16) { // too many for Long\n            return new BigInteger(hexValue, 16);\n        }\n        if (hexDigits > 8) { // too many for an int\n            return Long.decode(str);\n        }\n        return Integer.decode(str);\n    }\n    // Check for octal numbers\n    if (str.startsWith(\"0\") && !str.startsWith(\"0x\") && !str.startsWith(\"0X\")) {\n        // Parse as octal\n        return Integer.parseInt(str.substring(1), 8);\n    }\n    // General number parsing\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));\n    if (decPos > -1) { // there is a decimal point\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > str.length()) { // invalid exponent position\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) { // invalid exponent position\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return Long.parseLong(numeric);\n                    } catch (NumberFormatException e) {\n                        return new BigInteger(numeric);\n                    }\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    final float f = Float.parseFloat(numeric);\n                    if (!(Float.isInfinite(f) || (f == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                //$FALL-THROUGH$\n            case 'd':\n            case 'D':\n                try {\n                    final double d = Double.parseDouble(numeric);\n                    if (!(Double.isInfinite(d) || (d == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                try {\n                    return new BigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    // No type specifier, determine the type based on content\n    if (dec == null && exp == null) { // no decimal point and no exponent\n        try {\n            return Integer.parseInt(str);\n        } catch (NumberFormatException e) {\n            // ignore\n        }\n        try {\n            return Long.parseLong(str);\n        } catch (NumberFormatException e) {\n            // ignore\n        }\n        return new BigInteger(str);\n    } else {\n        // Must be a Float, Double, BigDecimal\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        final int numDecimals = dec != null ? dec.length() : 0;\n        try {\n            if (numDecimals <= 7) {\n                final float f = Float.parseFloat(str);\n                if (!(Float.isInfinite(f) || (f == 0.0F && !allZeros))) {\n                    return f;\n                }\n            }\n        } catch (NumberFormatException e) {\n            // ignore\n        }\n        try {\n            if (numDecimals <= 16) {\n                final double d = Double.parseDouble(str);\n                if (!(Double.isInfinite(d) || (d == 0.0D && !allZeros))) {\n                    return d;\n                }\n            }\n        } catch (NumberFormatException e) {\n            // ignore\n        }\n        return new BigDecimal(str);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}