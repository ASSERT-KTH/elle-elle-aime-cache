{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    String strTrimmed = str.trim();  // Added to handle leading/trailing whitespace\n    int pfxLen = 0;\n    for (final String pfx : hex_prefixes) {\n        if (strTrimmed.startsWith(pfx)) {\n            pfxLen = pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        final String hexStr = strTrimmed.substring(pfxLen);\n        final int hexDigits = hexStr.length();\n        if (hexDigits <= 8) { // fits in Integer\n            try {\n                return Integer.parseInt(hexStr, 16);\n            } catch (final NumberFormatException nfe) {\n                // Too big for an Integer, try Long\n            }\n        }\n        if (hexDigits <= 16) { // fits in Long\n            try {\n                return Long.parseLong(hexStr, 16);\n            } catch (final NumberFormatException nfe) {\n                // Too big for a Long, return BigInteger\n            }\n        }\n        return new BigInteger(strTrimmed, 16);\n    }\n\n    final char lastChar = strTrimmed.charAt(strTrimmed.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = strTrimmed.indexOf('.');\n    final int expPos = strTrimmed.indexOf('e') + strTrimmed.indexOf('E') + 1; // assumes both not present\n\n    int numDecimals = 0;\n    if (decPos > -1) { // there is a decimal point\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > strTrimmed.length()) {\n                throw new NumberFormatException(strTrimmed + \" is not a valid number.\");\n            }\n            dec = strTrimmed.substring(decPos + 1, expPos);\n        } else {\n            dec = strTrimmed.substring(decPos + 1);\n        }\n        mant = strTrimmed.substring(0, decPos);\n        numDecimals = dec.length();\n    } else {\n        if (expPos > -1) {\n            if (expPos > strTrimmed.length()) {\n                throw new NumberFormatException(strTrimmed + \" is not a valid number.\");\n            }\n            mant = strTrimmed.substring(0, expPos);\n        } else {\n            mant = strTrimmed;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < strTrimmed.length() - 1) {\n            exp = strTrimmed.substring(expPos + 1, strTrimmed.length() - 1);\n        } else {\n            exp = null;\n        }\n        final String numeric = strTrimmed.substring(0, strTrimmed.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null\n                    && exp == null\n                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // Too big for a long\n                    }\n                    return createBigInteger(numeric);\n\n                }\n                throw new NumberFormatException(strTrimmed + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    final Float f = Float.valueOf(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                // $FALL-THROUGH$\n            case 'd' :\n            case 'D' :\n                try {\n                    final Double d = Double.valueOf(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    return new BigDecimal(numeric);\n                } catch (final NumberFormatException e) { // NOPMD\n                    // ignore the bad number\n                }\n                // $FALL-THROUGH$\n            default :\n                throw new NumberFormatException(strTrimmed + \" is not a valid number.\");\n\n        }\n    }\n\n    if (expPos > -1 && expPos < strTrimmed.length() - 1) {\n        exp = strTrimmed.substring(expPos + 1, strTrimmed.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) { // no decimal point and no exponent\n        try {\n            return Integer.valueOf(strTrimmed);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            try {\n                return Long.valueOf(strTrimmed);\n            } catch (final NumberFormatException nfe2) { // NOPMD\n                return new BigInteger(strTrimmed);\n            }\n        }\n    }\n\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        final Float f = Float.valueOf(strTrimmed);\n        if (!f.isInfinite() && !(f.floatValue() == 0.0F && !allZeros)) {\n            return f;\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        try {\n            final Double d = Double.valueOf(strTrimmed);\n            if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !allZeros)) {\n                return d;\n            }\n        } catch (final NumberFormatException nfe2) { // NOPMD\n            try {\n                return new BigDecimal(strTrimmed);\n            } catch (final NumberFormatException e) { // NOPMD\n                // ignore the bad number\n            }\n        }\n    }\n    throw new NumberFormatException(strTrimmed + \" is not a valid number.\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}