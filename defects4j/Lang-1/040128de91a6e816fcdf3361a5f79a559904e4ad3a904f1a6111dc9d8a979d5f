{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Deal with all possible hex prefixes\n    final String[] hexPrefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int prefixLength = 0;\n    String numberPart = str;\n    for (final String prefix : hexPrefixes) {\n        if (str.startsWith(prefix)) {\n            prefixLength = prefix.length();\n            numberPart = str.substring(prefixLength);\n            break;\n        }\n    }\n    if (prefixLength > 0) { // Hexadecimal numbers\n        if (numberPart.startsWith(\"+\")) { // Disallow \"+\"\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        String hexDigits = numberPart;\n        if (str.charAt(0) == '-') {\n            hexDigits = numberPart.substring(1); // Exclude '-' for length checks\n        }\n        if (hexDigits.length() > 16) { // Too many digits for Long\n            return new BigInteger(numberPart, 16);\n        }\n        if (hexDigits.length() > 8) { // Too many digits for Integer\n            return Long.decode(str);\n        }\n        return Integer.decode(str);\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mantissa;\n    String decimal;\n    String exponent;\n    final int decimalPosition = str.indexOf('.');\n    final int expPos = Math.max(str.indexOf('e'), str.indexOf('E')); // Get exponent position\n    int numDecimals = 0; \n    if (decimalPosition > -1) { // Has decimal point\n        if (expPos > -1) { // Has exponent\n            if (expPos < decimalPosition || expPos > str.length()) { \n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            decimal = str.substring(decimalPosition + 1, expPos);\n        } else {\n            decimal = str.substring(decimalPosition + 1);\n        }\n        mantissa = str.substring(0, decimalPosition);\n        numDecimals = decimal.length(); \n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mantissa = str.substring(0, expPos);\n        } else {\n            mantissa = str;\n        }\n        decimal = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exponent = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exponent = null;\n        }\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (decimal == null && exponent == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException nfe) {\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (final NumberFormatException nfe) {\n                }\n            case 'd':\n            case 'D':\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) {\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) {\n                }\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exponent = str.substring(expPos + 1, str.length());\n    } else {\n        exponent = null;\n    }\n    if (decimal == null && exponent == null) {\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) {\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) {\n        }\n        return createBigInteger(str);\n    }\n    final boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n    try {\n        if (numDecimals <= 7) {\n            final Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n    }\n    try {\n        if (numDecimals <= 16) {\n            final Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n    }\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}