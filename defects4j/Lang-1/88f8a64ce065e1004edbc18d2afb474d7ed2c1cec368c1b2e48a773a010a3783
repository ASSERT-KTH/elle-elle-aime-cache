{
    "generation": "import java.math.BigInteger;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\n\npublic class FixedNumberUtils {\n\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n    * \n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        \n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        String pfx = null;\n        for(final String prefix : hex_prefixes) {\n            if (str.startsWith(prefix)) {\n                pfx = prefix;\n                break;\n            }\n        }\n        \n        if (pfx != null) {\n            int pfxLen = pfx.length();\n            String numStr = str.substring(pfxLen);\n            int numDigits = numStr.length();\n            \n            boolean isNegative = pfx.startsWith(\"-\");\n            if (isNegative) {\n                pfxLen -= 1; // Adjust length if negative\n            }\n            \n            if (numDigits <= 8) {\n                int intValue = Integer.parseUnsignedInt(numStr, 16);\n                return isNegative ? -intValue : intValue;\n            } else if (numDigits <= 16) {\n                long longValue = Long.parseUnsignedLong(numStr, 16);\n                return isNegative ? -longValue : longValue;\n            } else {\n                BigInteger bigIntValue = new BigInteger(numStr, 16);\n                return isNegative ? bigIntValue.negate() : bigIntValue;\n            }\n        }\n        \n        // Handle other number formats here...\n        \n        throw new NumberFormatException(\"Unsupported number format: \" + str);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}