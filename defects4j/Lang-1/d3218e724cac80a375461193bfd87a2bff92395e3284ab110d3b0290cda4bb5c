{
    "generation": "/**\n * <p>Turns a string value into a java.lang.Number.</p>\n *\n *... (rest of the Javadoc remains the same)\n *\n * @param str  String containing a number, may be null\n * @return Number created from the string (or null if the input is null)\n * @throws NumberFormatException if the value cannot be converted\n */\npublic static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for(final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length(); // Corrected from += to =\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        final String numeric = str.substring(pfxLen); // Extract numeric part\n        final int hexDigits = numeric.length();\n        if (hexDigits > 16) { // too many for Long\n            return new BigInteger(numeric, 16); // Corrected to use radix 16\n        }\n        if (hexDigits > 8) { // too many for an int\n            return Long.parseLong(numeric, 16); // Added radix 16\n        }\n        return Integer.parseInt(numeric, 16); // Added radix 16\n    }\n    //... (rest of the function remains the same, assuming no other issues)\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}