{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    // Check for hex prefixes\n    final String[] hexPrefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    for (final String prefix : hexPrefixes) {\n        if (str.startsWith(prefix)) {\n            String hexStr = str.substring(prefix.length());\n            try {\n                return Integer.decode(hexStr);\n            } catch (NumberFormatException e) {\n                try {\n                    return new BigInteger(hexStr, 16);\n                } catch (NumberFormatException ex) {\n                    // Ignore\n                }\n            }\n        }\n    }\n\n    // Handle decimal and scientific notation\n    final char lastChar = str.charAt(str.length() - 1);\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        // Handle specific type\n        final String numeric = str.substring(0, str.length() - 1);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                return Long.parseLong(numeric);\n            case 'f':\n            case 'F':\n                return Float.parseFloat(numeric);\n            case 'd':\n            case 'D':\n                return Double.parseDouble(numeric);\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        // No specific type\n        try {\n            return Integer.parseInt(str);\n        } catch (NumberFormatException e) {\n            try {\n                return Long.parseLong(str);\n            } catch (NumberFormatException ex) {\n                try {\n                    return Double.parseDouble(str);\n                } catch (NumberFormatException exc) {\n                    try {\n                        return new BigDecimal(str);\n                    } catch (NumberFormatException exce) {\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}