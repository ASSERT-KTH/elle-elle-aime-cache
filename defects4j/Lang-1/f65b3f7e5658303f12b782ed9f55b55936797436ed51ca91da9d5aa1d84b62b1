{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    // Handle hexadecimal numbers\n    String stripped = str.trim().toLowerCase();\n    boolean isHex = false;\n    if (stripped.startsWith(\"0x\") || stripped.startsWith(\"-0x\") || stripped.startsWith(\"#\") || stripped.startsWith(\"-#\")) {\n        isHex = true;\n        if (stripped.startsWith(\"0x\")) {\n            stripped = stripped.substring(2);\n        } else if (stripped.startsWith(\"-0x\")) {\n            stripped = \"-\" + stripped.substring(3);\n        } else if (stripped.startsWith(\"#\")) {\n            stripped = stripped.substring(1);\n        } else if (stripped.startsWith(\"-#\")) {\n            stripped = \"-\" + stripped.substring(2);\n        }\n    }\n\n    if (isHex) {\n        // Remove any type suffix (f, d, l) if present\n        if (stripped.endsWith(\"l\")) {\n            stripped = stripped.substring(0, stripped.length() - 1);\n        }\n\n        try {\n            // Try Integer\n            return Integer.decode(\"0x\" + stripped);\n        } catch (NumberFormatException nfe) {\n            try {\n                // Try Long\n                return Long.decode(\"0x\" + stripped);\n            } catch (NumberFormatException nfe2) {\n                // Must be BigInteger\n                return new BigInteger(stripped, 16);\n            }\n        }\n    }\n\n    // Handle non-hexadecimal numbers\n    char lastChar = str.charAt(str.length() - 1);\n    String mant, dec, exp;\n    int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n\n    int numDecimals = 0;\n    if (decPos > -1) { // there is a decimal point\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length();\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        return createBigInteger(numeric);\n                    }\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                // fall through\n            case 'd' :\n            case 'D' :\n                try {\n                    Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                    // ignore the bad number\n                }\n                // fall through\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    // User doesn't have a preference on the return type, so let's start small and go from there...\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n\n    if (dec == null && exp == null) { // no decimal point and no exponent\n        // Must be an Integer, Long, BigInteger\n        try {\n            return createInteger(str);\n        } catch (NumberFormatException nfe) {\n            try {\n                return createLong(str);\n        } catch (NumberFormatException nfe2) {\n                return createBigInteger(str);\n            }\n        }\n    }\n\n    // Must be a Float, Double, BigDecimal\n    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        if (numDecimals <= 7) {\n            Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        }\n    } catch (NumberFormatException nfe) {\n        // ignore the bad number\n    }\n    try {\n        if (numDecimals <= 16) {\n            Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        }\n    } catch (NumberFormatException nfe) {\n        // ignore the bad number\n    }\n\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}