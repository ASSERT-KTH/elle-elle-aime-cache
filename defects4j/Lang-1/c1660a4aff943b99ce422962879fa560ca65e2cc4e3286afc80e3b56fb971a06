{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hexPrefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int prefixLength = 0;\n    \n    for (final String prefix : hexPrefixes) {\n        if (str.startsWith(prefix)) {\n            prefixLength = prefix.length();\n            break;\n        }\n    }\n\n    if (prefixLength > 0) { // We have a hexadecimal number\n        final String hexNumberPart = str.substring(prefixLength);\n\n        if (hexNumberPart.startsWith(\"+\")) { // Handle optional \"+\" directly after prefix\n            throw new NumberFormatException(\"Invalid format: hexadecimal number cannot have '+' after prefix.\");\n        }\n        \n        // Determine if it is negative\n        boolean negative = str.startsWith(\"-\");\n\n        final int hexDigits = hexNumberPart.length();\n        if (hexDigits > 16) { // More than 16 digits require BigInteger\n            return new BigInteger(str.substring(negative ? prefixLength : prefixLength - 1), 16);\n        }\n        if (hexDigits > 8) { // Between 9 and 16 digits fit into a Long\n            long result = Long.parseLong(hexNumberPart, 16);\n            return negative ? -result : result; // Handle signed long\n        } else { // 8 or fewer digits fit into an Integer\n            int result = Integer.parseInt(hexNumberPart, 16);\n            return negative ? -result : result; // Handle signed integer\n        }\n    }\n\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));\n\n    int numDecimals = 0; // Check required precision\n    if (decPos > -1) { // there is a decimal point\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length(); // number of digits past the decimal\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l': case 'L':\n                if (dec == null && exp == null &&\n                    (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException nfe) {\n                        return createBigInteger(numeric);\n                    }\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f': case 'F':\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (final NumberFormatException nfe) { }\n                //$FALL-THROUGH$\n            case 'd': case 'D':\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) { }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) { }\n                //$FALL-THROUGH$\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1);\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) {\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) { }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) { }\n        return createBigInteger(str);\n    }\n\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        if (numDecimals <= 7) {\n            final Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        }\n    } catch (final NumberFormatException nfe) { }\n    try {\n        if (numDecimals <= 16) {\n            final Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        }\n    } catch (final NumberFormatException nfe) { }\n\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}