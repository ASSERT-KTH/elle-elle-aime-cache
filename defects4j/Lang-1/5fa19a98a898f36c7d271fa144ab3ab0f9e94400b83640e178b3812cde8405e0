{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for (final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) {\n        final String numStr = str.substring(pfxLen);\n        try {\n            if (numStr.length() <= 8) {\n                return Integer.decode(str);\n            } else if (numStr.length() <= 16) {\n                return Long.decode(str);\n            } else {\n                return new BigInteger(numStr, 16);\n            }\n        } catch (NumberFormatException e) {\n            throw new NumberFormatException(\"Invalid hexadecimal number: \" + str);\n        }\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));\n    if (decPos > -1) {\n        if (expPos > -1) {\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        mant = str;\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null && exp == null && isNumeric(numeric)) {\n                    try {\n                        return Long.parseLong(numeric);\n                    } catch (NumberFormatException e) {\n                        return new BigInteger(numeric);\n                    }\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    final Float f = Float.parseFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                // Fall through to 'd' or 'D'\n            case 'd':\n            case 'D':\n                try {\n                    final Double d = Double.parseDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                try {\n                    return new BigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) {\n        try {\n            return Integer.parseInt(str);\n        } catch (NumberFormatException e) {\n            // ignore\n        }\n        try {\n            return Long.parseLong(str);\n        } catch (NumberFormatException e) {\n            // ignore\n        }\n        return new BigInteger(str);\n    }\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    final int numDecimals = dec != null ? dec.length() : 0;\n    try {\n        if (numDecimals <= 7) {\n            final Float f = Float.parseFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        }\n    } catch (NumberFormatException e) {\n        // ignore\n    }\n    try {\n        if (numDecimals <= 16) {\n            final Double d = Double.parseDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        }\n    } catch (NumberFormatException e) {\n        // ignore\n    }\n    return new BigDecimal(str);\n}\n\nprivate static boolean isAllZeros(String str) {\n    if (str == null || str.isEmpty()) {\n        return true;\n    }\n    for (char c : str.toCharArray()) {\n        if (c != '0') {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static boolean isNumeric(String str) {\n    if (str == null || str.isEmpty()) {\n        return false;\n    }\n    for (char c : str.toCharArray()) {\n        if (!Character.isDigit(c) && c != '-' && c != '+') {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}