{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    // Handle hexadecimal numbers\n    String[] hexPrefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    for (String pfx : hexPrefixes) {\n        if (str.startsWith(pfx)) {\n            int hexDigits = str.length() - pfx.length();\n            String hexValue = str.substring(pfx.length());\n            \n            if (hexDigits <= 8) { // Fits in Integer\n                return Integer.decode(str);\n            } else if (hexDigits <= 16) { // Fits in Long\n                return Long.decode(str);\n            } else { // BigInteger for larger numbers\n                return new BigInteger(hexValue, 16);\n            }\n        }\n    }\n\n    // Handle octal numbers (leading zero)\n    if (str.startsWith(\"0\") && str.length() > 1 && !str.startsWith(\"0.\")) {\n        try {\n            return Integer.decode(str);\n        } catch (NumberFormatException e) {\n            try {\n                return Long.decode(str);\n            } catch (NumberFormatException e1) {\n                return new BigInteger(str, 8); // Treat as octal\n            }\n        }\n    }\n\n    // Handle decimal numbers\n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec = null;\n    String exp = null;\n    int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Assumes both not present\n\n    int numDecimals = 0;\n    if (decPos > -1) { // there is a decimal point\n        if (expPos > -1) {\n            if (expPos < decPos || expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length();\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        }\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null && exp == null\n                        && isDigits(numeric)) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        return createBigInteger(numeric);\n                    }\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // Ignore the bad number\n                }\n                // Fall through\n            case 'd':\n            case 'D':\n                try {\n                    Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // Ignore the bad number\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                    // Ignore the bad number\n                }\n                // Fall through\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    // User doesn't have a preference on the return type, so let's start small and go from there...\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    }\n    if (dec == null && exp == null) { // no decimal point and no exponent\n        try {\n            return createInteger(str);\n        } catch (NumberFormatException nfe) {\n            // Ignore the bad number\n        }\n        try {\n            return createLong(str);\n        } catch (NumberFormatException nfe) {\n            // Ignore the bad number\n        }\n        return createBigInteger(str);\n    }\n\n    // Must be a Float, Double, BigDecimal\n    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        if (numDecimals <= 7) {\n            Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        }\n    } catch (NumberFormatException nfe) {\n        // Ignore the bad number\n    }\n    try {\n        if (numDecimals <= 16) {\n            Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        }\n    } catch (NumberFormatException nfe) {\n        // Ignore the bad number\n    }\n\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}