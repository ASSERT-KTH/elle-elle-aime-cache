{
    "generation": "/**\n * @see #findCalledFunctions(Node)\n */\nprivate void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed!= null);\n  // For each referenced function, add a new reference\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    } else if (child.getType() == Token.CALL) {\n      // Check if the call is a method call, e.g. \"initialize.call(this, options)\"\n      Node grandChild = child.getFirstChild();\n      if (grandChild.getType() == Token.NAME) {\n        changed.add(grandChild.getString());\n      }\n    }\n  }\n\n  for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}