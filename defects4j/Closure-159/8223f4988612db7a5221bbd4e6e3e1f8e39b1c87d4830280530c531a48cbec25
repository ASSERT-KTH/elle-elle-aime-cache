{
    "generation": "  /**\n   * @see #findCalledFunctions(Node)\n   */\n  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      } else if (child.getType() == Token.GETPROP) {\n        // Check if the call is through a property (e.g., obj.method.call)\n        Node grandChild = child.getFirstChild();\n        if (grandChild.getType() == Token.NAME) {\n          changed.add(grandChild.getString() + \".\" + child.getLastChild().getString());\n        }\n      } else if (child.getType() == Token.GETELEM) {\n        // Check if the call is through an element access (e.g., obj['method'].call)\n        Node grandChild = child.getFirstChild();\n        if (grandChild.getType() == Token.NAME) {\n          changed.add(grandChild.getString() + \".\" + child.getLastChild().getString());\n        }\n      }\n    } else if (node.getType() == Token.GETPROP && node.getNext() != null && node.getNext().getType() == Token.CALL) {\n      // Check if the call is through a property (e.g., obj.method.call)\n      Node propNode = node.getLastChild();\n      if (propNode.getType() == Token.STRING) {\n        Node objNode = node.getFirstChild();\n        if (objNode.getType() == Token.NAME) {\n          changed.add(objNode.getString() + \".\" + propNode.getString());\n        }\n      }\n    } else if (node.getType() == Token.GETELEM && node.getNext() != null && node.getNext().getType() == Token.CALL) {\n      // Check if the call is through an element access (e.g., obj['method'].call)\n      Node propNode = node.getLastChild();\n      if (propNode.getType() == Token.STRING) {\n        Node objNode = node.getFirstChild();\n        if (objNode.getType() == Token.NAME) {\n          changed.add(objNode.getString() + \".\" + propNode.getString());\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}