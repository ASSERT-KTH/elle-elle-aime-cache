{
    "generation": "/**\n * @see #findCalledFunctions(Node)\n */\nprivate void findCalledFunctions(Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n  \n  // Check if the node is a CALL type\n  if (node.getType() == Token.CALL) {\n    // Get the first child, which should be the expression being called\n    Node callee = node.getFirstChild();\n    // Check if the callee is a NAME (simple function call)\n    if (callee.getType() == Token.NAME) {\n      changed.add(callee.getString());\n    }\n    // Check for property access (e.g., obj.method())\n    else if (callee.getType() == Token.GETPROP) {\n      // Get the name of the property being called\n      Node propertyName = callee.getLastChild();\n      if (propertyName.getType() == Token.STRING || propertyName.getType() == Token.NUMBER) {\n        changed.add(propertyName.getString());\n      }\n    }\n    // Check for computed property access (e.g., obj[method()]())\n    else if (callee.getType() == Token.COMPUTED_PROP) {\n      // Get the expression used for the property name\n      Node keyNode = callee.getLastChild();\n      // If it's a STRING or NUMBER, add its value\n      if (keyNode.getType() == Token.STRING || keyNode.getType() == Token.NUMBER) {\n        changed.add(keyNode.getString());\n      }\n      // Handle other cases if necessary\n    }\n  }\n  \n  // Recursively process child nodes\n  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}