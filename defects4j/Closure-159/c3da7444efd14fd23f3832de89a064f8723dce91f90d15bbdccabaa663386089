{
    "generation": "/**\n * @see #findCalledFunctions(Node)\n */\nprivate void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n  // For each referenced function, add a new reference\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    } else if (child.getType() == Token.GETPROP) {\n      // Handle cases like `initialize.call(this, options)`\n      Node functionNameNode = child.getFirstChild();\n      if (functionNameNode.getType() == Token.NAME) {\n        changed.add(functionNameNode.getString());\n      } else if (functionNameNode.getType() == Token.GETPROP) {\n        // Handle nested property accesses, e.g., `obj.method.call(this, args)`\n        changed.add(getQualifiedName(functionNameNode));\n      }\n    }\n  }\n\n  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}\n\nprivate String getQualifiedName(Node node) {\n  if (node.getType() == Token.NAME) {\n    return node.getString();\n  } else if (node.getType() == Token.GETPROP) {\n    return getQualifiedName(node.getFirstChild()) + \".\" + node.getLastChild().getString();\n  }\n  return \"\";\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}