{
    "generation": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        // Create new arrays with additional space for the new field type and value\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n\n        // Find correct insertion point to keep largest-smallest order\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0 || (compare == 0 && fieldType.getRangeDurationType().getField(iChronology).compareTo(loopType.getRangeDurationType().getField(iChronology)) > 0)) {\n                        break;\n                    }\n                }\n            }\n        }\n        // Moved copying elements to insert the new field and value\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        newTypes[i] = fieldType;\n        System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);\n\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newValues[i] = value;\n        System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);\n\n        // Ensure validation of the new partial\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    } else {\n        int[] newValues = getValues();\n        newValues = getField(index).set(this, index, newValues, value);\n        // Check if the new value is different to avoid unnecessary object creation\n        if (value != getValue(index)) {\n            return new Partial(this, newValues);\n        } else {\n            return this;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}