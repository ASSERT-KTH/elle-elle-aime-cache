{
    "generation": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index != -1) {\n        int currentValue = getValue(index);\n        if (value == currentValue) {\n            return this;\n        }\n        int[] newValues = getValues().clone();\n        newValues[index] = value;\n        return new Partial(this, newValues);\n    } else {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        \n        // find correct insertion point to keep largest-smallest order\n        int i;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (!unitField.isSupported()) {\n            throw new IllegalArgumentException(\"Field type \" + fieldType + \" is not supported by the chronology\");\n        }\n        for (i = 0; i < iTypes.length; i++) {\n            DateTimeFieldType loopType = iTypes[i];\n            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n            if (loopUnitField.isSupported()) {\n                int compare = unitField.compareTo(loopUnitField);\n                if (compare > 0) {\n                    break;\n                } else if (compare == 0) {\n                    DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                    if (rangeField.compareTo(loopRangeField) > 0) {\n                        break;\n                    }\n                }\n            }\n        }\n        \n        // Copy existing types and values up to insertion point\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        \n        // Insert new type and value\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        \n        // Copy remaining existing types and values\n        System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);\n        System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);\n        \n        // Create new Partial instance and validate\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}