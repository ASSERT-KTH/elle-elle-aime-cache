{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // Ensure nextLineTabStop is less than width to avoid infinite loop\n    if (nextLineTabStop >= width)\n    {\n        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" +\n                                        \"- no room for the description\");\n    }\n\n    // all following lines must be padded with nextLineTabStop space characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        // Adjust the text to include the padding and trim any leading whitespace\n        text = padding + text.substring(pos).replaceFirst(\"^\\\\s+\", \"\");\n        pos = findWrapPos(text, width, nextLineTabStop);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n        \n        // If text length is greater than width and pos is at the edge of the nextLineTabStop, set pos to width\n        if ((text.length() > width) && (pos == nextLineTabStop - 1)) \n        {\n            pos = width;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}