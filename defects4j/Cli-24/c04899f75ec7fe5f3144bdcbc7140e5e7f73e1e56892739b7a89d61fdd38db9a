{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    if (nextLineTabStop >= width)\n    {\n        // No room for description; throw exception\n        throw new IllegalStateException(\"Total width is less than the width of the argument and indent - no room for the description\");\n    }\n\n    // Calculate the maximum available width for the description\n    int maxDescWidth = width - nextLineTabStop;\n\n    // Create padding for the next line\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        // Trim the remaining text and prepend padding\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, nextLineTabStop);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n\n            return sb;\n        }\n\n        // Ensure that the wrapping position doesn't exceed the available description width\n        if (pos - nextLineTabStop > maxDescWidth)\n        {\n            pos = nextLineTabStop + maxDescWidth;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}