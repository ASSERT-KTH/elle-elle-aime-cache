{
    "generation": "/**\n * @return Whether the variable is only assigned a value once for its\n *     lifetime, considering the entire call graph.\n */\nboolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Make sure this assignment is not in a loop.\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n      // Check if the function is recursive\n      if (isRecursiveFunction(block.getFunction())) {\n        return false;\n      }\n      break;\n    } else if (block.isLoop) {\n      return false;\n    }\n  }\n\n  // Check for assignments in nested functions\n  if (hasAssignmentInNestedFunction(ref.getVariable())) {\n    return false;\n  }\n\n  return true;\n}\n\n// Helper method to check for recursive functions\nprivate boolean isRecursiveFunction(Function fun) {\n  for (Reference ref : fun.getReferences()) {\n    if (ref.getVariable() == fun) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Helper method to check for assignments in nested functions\nprivate boolean hasAssignmentInNestedFunction(Variable var) {\n  for (Function fun : var.getReferencedFunctions()) {\n    if (fun.isNested() && hasAssignmentInFunction(fun, var)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Helper method to check for assignment in a specific function\nprivate boolean hasAssignmentInFunction(Function fun, Variable var) {\n  for (Reference ref : fun.getReferences()) {\n    if (ref.getVariable() == var && ref.isAssignment()) {\n      return true;\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}