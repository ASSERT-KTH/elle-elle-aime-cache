{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      Set<BasicBlock> visited = new HashSet<>();\n      Queue<BasicBlock> queue = new LinkedList<>();\n      queue.add(ref.getBasicBlock());\n\n      while (!queue.isEmpty()) {\n        BasicBlock block = queue.poll();\n        if (visited.contains(block)) {\n          continue;\n        }\n        visited.add(block);\n\n        if (block.isFunction) {\n          // If we reach a function entry, no need to traverse further.\n          continue;\n        }\n\n        if (block.isLoop) {\n          // If we find a loop, check all assignments within the loop.\n          for (Reference loopRef : block.getAllReferences()) {\n            if (loopRef.getVariable() == ref.getVariable() && loopRef != ref) {\n              return false; // Variable reassigned in loop.\n            }\n          }\n        }\n\n        // Check for other assignments to the same variable.\n        for (Reference otherRef : block.getAllReferences()) {\n          if (otherRef.getVariable() == ref.getVariable() && otherRef != ref) {\n            return false; // Variable reassigned in the same basic block.\n          }\n        }\n\n        // Add successor blocks to the queue.\n        for (BasicBlock successor : block.getSuccessors()) {\n          queue.add(successor);\n        }\n      }\n\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}