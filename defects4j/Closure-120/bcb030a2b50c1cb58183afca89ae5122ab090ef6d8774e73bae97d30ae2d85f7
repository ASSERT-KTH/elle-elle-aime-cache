{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      BasicBlock block = ref.getBasicBlock();\n      while (block != null) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          return false;\n        }\n        block = block.getParent();\n      }\n\n      List<Reference> allRefs = getReferences(getScope());\n      if (allRefs.size() == 1) {\n        return true;\n      }\n\n      for (Reference other : allRefs) {\n        if (other == ref) {\n          continue;\n        }\n\n        BasicBlock otherBlock = other.getBasicBlock();\n        while (otherBlock != null) {\n          if (otherBlock.isFunction) {\n            break;\n          }\n\n          if (otherBlock == block && !other.isDeclaration()) {\n            return false;\n          }\n          otherBlock = otherBlock.getParent();\n        }\n\n      }\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}