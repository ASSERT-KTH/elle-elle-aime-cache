{
    "generation": "/**\n * @return Whether the variable is only assigned a value once for its\n *     lifetime, considering both direct assignments and potential \n *     reassignments through nested function calls.\n */\nboolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Make sure this assignment is not in a loop.\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n      // Check if the function is recursive, which could lead to reassignment.\n      if (isRecursiveFunction(block.getFunction())) {\n        return false;\n      }\n      break;\n    } else if (block.isLoop) {\n      return false;\n    }\n  }\n\n  // Verify no other assignments exist in the variable's scope.\n  return getAssignments().size() == 1;\n}\n\n// Helper method to check if a function is recursive.\nprivate boolean isRecursiveFunction(Function func) {\n  for (Reference ref : func.getReferences()) {\n    if (ref.getReferencedNode() == func) {\n      return true;\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}