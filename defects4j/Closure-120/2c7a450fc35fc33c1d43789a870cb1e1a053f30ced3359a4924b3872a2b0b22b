{
    "generation": "/**\n * @return Whether the variable is only assigned a value once for its\n *     lifetime and the assignment is not in a recursive function call path.\n */\nboolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Make sure this assignment is not in a loop.\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n      // Check if the function is recursive\n      if (isRecursiveFunction(block.getFunction())) {\n        return false;\n      }\n      break;\n    } else if (block.isLoop) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Helper function to check if a function is recursive\nprivate boolean isRecursiveFunction(Function fun) {\n  for (Reference ref : fun.getReferences()) {\n    if (ref.getReferencedNode() == fun) {\n      return true; // Self-reference found, function is recursive\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}