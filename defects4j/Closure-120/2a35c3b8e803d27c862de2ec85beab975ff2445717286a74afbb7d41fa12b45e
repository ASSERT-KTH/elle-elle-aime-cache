{
    "generation": "/**\n * @return Whether the variable is only assigned a value once for its\n *     lifetime, considering the entire program's call graph.\n */\nboolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Make sure this assignment is not in a loop.\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n      // Check if the function is recursive\n      if (isFunctionRecursive(block.getFunction())) {\n        return false;\n      }\n      break;\n    } else if (block.isLoop) {\n      return false;\n    }\n  }\n\n  // Check if any other function assigns to this variable\n  for (Function func : getProgram().getFunctions()) {\n    for (Statement stmt : func.getStatements()) {\n      if (stmt.isAssign() && ((Assign) stmt).getLhs().getVariable() == this) {\n        Reference otherRef = new Reference((Assign) stmt, ((Assign) stmt).getLhs());\n        if (!otherRef.equals(ref)) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\n// Helper function to check if a function is recursive\nprivate boolean isFunctionRecursive(Function func) {\n  for (Statement stmt : func.getStatements()) {\n    if (stmt.isCall() && ((Call) stmt).getFunction().equals(func)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}