{
    "generation": "/**\n * @return Whether the variable is only assigned a value once for its\n *     lifetime.\n */\nboolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Make sure this assignment is not in a loop or within a function that is called multiple times.\n  for (BasicBlock block = ref.getBasicBlock();\n       block != null; block = block.getParent()) {\n    if (block.isFunction) {\n      // If the assignment is within a function, check if the function is called multiple times.\n      if (isFunctionCalledMultipleTimes(block.getFunction())) {\n        return false;\n      }\n      break;\n    } else if (block.isLoop) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Helper method to check if a function is called multiple times\nprivate boolean isFunctionCalledMultipleTimes(Function function) {\n  int callCount = 0;\n  for (BasicBlock block : getAllBasicBlocks()) {\n    for (Instruction instruction : block.getInstructions()) {\n      if (instruction.isFunctionCall() && instruction.getCalledFunction() == function) {\n        callCount++;\n        if (callCount > 1) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}