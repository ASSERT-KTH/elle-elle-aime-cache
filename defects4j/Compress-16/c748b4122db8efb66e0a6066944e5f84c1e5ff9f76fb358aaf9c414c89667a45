{
    "generation": "public ArchiveInputStream createArchiveInputStream(final InputStream in) throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    try {\n        final byte[] signature = new byte[128];\n        int signatureLength = fillBuffer(in, signature);\n        if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n            return new ZipArchiveInputStream(new BufferedInputStream(in));\n        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n            return new JarArchiveInputStream(new BufferedInputStream(in));\n        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n            return new ArArchiveInputStream(new BufferedInputStream(in));\n        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n            return new CpioArchiveInputStream(new BufferedInputStream(in));\n        } else if (DumpArchiveInputStream.matches(signature, signatureLength)) {\n            return new DumpArchiveInputStream(new BufferedInputStream(in));\n        } else if (signatureLength >= 512 && TarArchiveInputStream.matches(signature, signatureLength)) {\n            try {\n                TarArchiveInputStream tis = new TarArchiveInputStream(new BufferedInputStream(in));\n                if (tis.getNextEntry() != null) {\n                    return new TarArchiveInputStream(new BufferedInputStream(in));\n                }\n            } catch (Exception e) {\n                // ignored\n            }\n        }\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}\n\nprivate int fillBuffer(InputStream in, byte[] buffer) throws IOException {\n    int read = 0;\n    int off = 0;\n    int len = buffer.length;\n    in.mark(len);\n    while (off < len) {\n        int bytesRead = in.read(buffer, off, len - off);\n        if (bytesRead < 0) {\n            break;\n        }\n        read += bytesRead;\n        off += bytesRead;\n    }\n    in.reset();\n    return read;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}