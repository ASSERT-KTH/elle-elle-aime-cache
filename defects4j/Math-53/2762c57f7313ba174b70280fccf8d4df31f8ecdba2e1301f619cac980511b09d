{
    "generation": "/**\n * Return the sum of this complex number and the given complex number.\n * <p>\n * Uses the definitional formula\n * <pre>\n * (a + bi) + (c + di) = (a+c) + (b+d)i\n * </pre></p>\n * <p>\n * If either this or <code>rhs</code> has a NaN value in either part,\n * {@link #NaN} is returned if either part of the result would be NaN;\n * otherwise Infinite and NaN values are returned in the parts of the result \n * according to the rules for {@link java.lang.Double} arithmetic.</p>\n *\n * @param rhs the other complex number\n * @return the complex number sum\n * @throws NullArgumentException if <code>rhs</code> is null\n */\npublic Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double realSum = real + rhs.getReal();\n    double imaginarySum = imaginary + rhs.getImaginary();\n    \n    // Check if either sum is NaN, and return NaN if so\n    if (Double.isNaN(realSum) || Double.isNaN(imaginarySum)) {\n        return Complex.NaN;\n    } else {\n        return createComplex(realSum, imaginarySum);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}