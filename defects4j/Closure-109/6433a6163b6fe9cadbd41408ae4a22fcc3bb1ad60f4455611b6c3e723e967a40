{
    "generation": "  /**\n   * ContextTypeExpression := BasicTypeExpression | '?' | '*'\n   * For expressions on the right hand side of a this: or new:\n   */\n  private Node parseContextTypeExpression(JsDocToken token) {\n    if (token.isIdentifier() || token.isKeyword()) {\n      return parseTypeName(token);\n    } else if (token.getType() == JsDocToken.Type.QUESTION) {\n      // Return a node representing an unknown type\n      return new Node(Token.UNKNOWN_TYPE);\n    } else if (token.getType() == JsDocToken.Type.ASTERISK) {\n      // Return a node representing any type\n      return new Node(Token.ANY_TYPE);\n    } else {\n      // Handle unexpected tokens or throw an error\n      throw new ParseException(\"Unexpected token: \" + token.getValue());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}