{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) { // \u4ecemeta\u6807\u7b7e\u4e2d\u786e\u5b9a\u5b57\u7b26\u96c6\u3002\u5b89\u5168\u5730\u4ee5UTF-8\u89e3\u6790\n        // \u67e5\u627e <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> \u6216 HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // \u5982\u679c\u672a\u627e\u5230\uff0c\u5c06\u4fdd\u6301UTF-8\u4f5c\u4e3a\u6700\u4f73\u5c1d\u8bd5\n            String foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // \u9700\u8981\u91cd\u65b0\u89e3\u7801\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // \u7531\u5185\u5bb9\u7c7b\u578b\u5934\u6307\u5b9a\uff08\u6216\u7531\u7528\u6237\u5728\u6587\u4ef6\u52a0\u8f7d\u65f6\u6307\u5b9a\uff09\n        Validate.notEmpty(charsetName, \"\u5fc5\u987b\u5c06charset\u53c2\u6570\u8bbe\u7f6e\u4e3a\u8981\u89e3\u6790\u7684\u6587\u4ef6\u7684\u5b57\u7b26\u96c6\u3002\u8bbe\u7f6e\u4e3anull\u4ee5\u5c1d\u8bd5\u4eceHTML\u4e2d\u68c0\u6d4b\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // \u68c0\u67e5\u662f\u5426\u6709\u5b57\u8282\u987a\u5e8f\u6807\u8bb0\uff08BOM\uff09\uff0c\u5e76\u5c06\u5176\u5265\u79bb\n    if (docData.startsWith(\"\\uFEFF\")) {\n        docData = docData.substring(1);\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}