{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    // Original decoding\n    docData = Charset.forName(charsetName != null ? charsetName : defaultCharset).decode(byteData).toString();\n    if (docData.startsWith(\"\\uFEFF\")) {\n        // If there is a BOM, strip it and re-decode\n        byteData.rewind();\n        docData = docData.substring(1);\n        docData = Charset.forName(charsetName != null ? charsetName : defaultCharset).decode(byteData).toString();\n    }\n    doc = parser.parseInput(docData, baseUri);\n\n    if (charsetName == null) {\n        // Check for meta tag to determine charset\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // If a different charset is found, re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                if (docData.startsWith(\"\\uFEFF\")) {\n                    // If there is a BOM, strip it and re-decode\n                    byteData.rewind();\n                    docData = docData.substring(1);\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                }\n                doc = parser.parseInput(docData, baseUri);\n            }\n        }\n    }\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}