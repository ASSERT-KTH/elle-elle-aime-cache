{
    "generation": "import java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\n\npublic class DataUtil {\n    private static final String defaultCharset = \"UTF-8\";\n\n    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n            docData = decodeWithCharset(byteData, null);\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = decodeWithCharset(byteData, foundCharset);\n                    doc = null;\n                }\n            }\n        } else { // specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = decodeWithCharset(byteData, charsetName);\n        }\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }\n\n    private static String decodeWithCharset(ByteBuffer byteData, String charsetName) {\n        Charset charset;\n        if (charsetName == null) {\n            charset = Charset.defaultCharset();\n        } else {\n            charset = Charset.forName(charsetName);\n        }\n        String docData = charset.decode(byteData).toString();\n        if (charset.equals(StandardCharsets.UTF_8) && docData.startsWith(\"\\uFEFF\")) {\n            docData = docData.substring(1);\n        }\n        return docData;\n    }\n\n    // Assuming these methods and classes are defined elsewhere in the codebase\n    private static String getCharsetFromContentType(String content) {\n        // Implementation here\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}