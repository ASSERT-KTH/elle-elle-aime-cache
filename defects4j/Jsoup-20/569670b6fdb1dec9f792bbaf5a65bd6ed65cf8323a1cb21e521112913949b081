{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // try to determine from meta. Safe parse as UTF-8\n        docData = Charset.forName(\"UTF-8\").decode(byteData).toString();\n        // Discard the byte order mark if it exists\n        if (docData.startsWith(UTF8_BOM)) {\n            docData = docData.substring(1);\n        }\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(\"UTF-8\")) {\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                // Discard the byte order mark if it exists\n                if (docData.startsWith(UTF8_BOM)) {\n                    docData = docData.substring(1);\n                }\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        // Discard the byte order mark if it exists\n        if (docData.startsWith(UTF8_BOM)) {\n            docData = docData.substring(1);\n        }\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\n// UTF-8 Byte Order Mark\nprivate static final String UTF8_BOM = \"\\uFEFF\";\n// Extract charset from content attribute of meta tag\nprivate static String getCharsetFromContentType(String content) {...}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}