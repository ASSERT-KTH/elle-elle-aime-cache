{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c;\n\n    /* Add missing seconds and milliseconds if they are not present */\n    int timeIndex = dateStr.lastIndexOf('T');\n    if (timeIndex > 0) {\n        char timeChar = dateStr.charAt(timeIndex + 1);\n        if (Character.isDigit(timeChar)) {\n            int lastDigitIndex = lastIndexOfDigit(dateStr, len);\n            if (lastDigitIndex - timeIndex > 3) {\n                if (lastDigitIndex - timeIndex <= 8) {\n                    dateStr = dateStr.substring(0, timeIndex + 9) + \".000\" + dateStr.substring(timeIndex + 9);\n                } else if (lastDigitIndex - timeIndex <= 11) {\n                    dateStr = dateStr.substring(0, timeIndex + 9) + dateStr.substring(timeIndex + 9, timeIndex + 12) + \".00\" + dateStr.substring(timeIndex + 12);\n                } else if (lastDigitIndex - timeIndex <= 14) {\n                    dateStr = dateStr.substring(0, timeIndex + 9) + dateStr.substring(timeIndex + 9, timeIndex + 12) + \".\" + dateStr.substring(timeIndex + 12);\n                }\n            } else {\n                dateStr = dateStr.substring(0, timeIndex + 9) + \"00:\" + dateStr.substring(timeIndex + 9);\n                if (lastDigitIndex - timeIndex <= 3) {\n                    dateStr = dateStr.substring(0, timeIndex + 12) + \".000\" + dateStr.substring(timeIndex + 12);\n                } else if (lastDigitIndex - timeIndex <= 5) {\n                    dateStr = dateStr.substring(0, timeIndex + 12) + dateStr.substring(timeIndex + 12, timeIndex + 15) + \".00\" + dateStr.substring(timeIndex + 15);\n                } else if (lastDigitIndex - timeIndex <= 8) {\n                    dateStr = dateStr.substring(0, timeIndex + 12) + dateStr.substring(timeIndex + 12, timeIndex + 15) + \".\" + dateStr.substring(timeIndex + 15);\n                }\n            }\n        }\n    }\n\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(dateStr.charAt(len-1))) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else {\n        c = dateStr.charAt(len-1);\n        if (c == 'Z') {\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n            }\n        } else {\n            // Let's see if we have timezone indicator or not...\n            if (hasTimeZone(dateStr)) {\n                c = dateStr.charAt(len-3);\n                if (c == ':') { // remove optional colon\n                    // remove colon\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.delete(len-3, len-2);\n                    dateStr = sb.toString();\n                } else if (c == '+' || c == '-') { // missing minutes\n                    // let's just append '00'\n                    dateStr += \"00\";\n                }\n                df = _formatISO8601;\n                if (_formatISO8601 == null) {\n                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n                }\n            } else {\n                // If not, plain date. Easiest to just patch 'Z' in the end?\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.append('Z');\n                dateStr = sb.toString();\n                df = _formatISO8601_z;\n                if (df == null) {\n                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                            _timezone, _locale);\n                }\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}\n\nprivate int lastIndexOfDigit(String str, int endIndex) {\n    for (int i = endIndex - 1; i >= 0; i--) {\n        if (Character.isDigit(str.charAt(i))) {\n            return i;\n        }\n    }\n    return -1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}