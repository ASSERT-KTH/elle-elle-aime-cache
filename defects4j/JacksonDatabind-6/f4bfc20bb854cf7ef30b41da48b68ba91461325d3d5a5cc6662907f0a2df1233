{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos) {\n    // 21-May-2009, tatu: DateFormat has very strict handling of\n    // timezone modifiers for ISO-8601. So we need to do some scrubbing.\n\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        int lastDotIndex = dateStr.lastIndexOf('.');\n        if (lastDotIndex == -1 || dateStr.substring(lastDotIndex).length() < 4) {\n            dateStr = padMilliseconds(dateStr);\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len - 3);\n            if (c == ':') { // remove optional colon\n                // remove colon\n                dateStr = dateStr.substring(0, len - 3) + dateStr.substring(len - 2);\n            } else if (c == '+' || c == '-') { // missing minutes\n                // let's just append '00'\n                dateStr += \"00\";\n            }\n            // Milliseconds partial or missing; and even seconds are optional\n            len = dateStr.length();\n            // Adjust for 'T', '+'/'-', and timezone-offset\n            int timezoneStart = dateStr.lastIndexOf '+' == -1 ? dateStr.lastIndexOf('-') : dateStr.lastIndexOf('+');\n            if (timezoneStart != -1) {\n                String baseDate = dateStr.substring(0, timezoneStart);\n                String tzOffset = dateStr.substring(timezoneStart);\n                // Ensure base date has seconds and milliseconds\n                if (baseDate.lastIndexOf(':') == baseDate.length() - 3) {\n                    // Missing seconds, add \"\":00.000\n                    baseDate += \":00.000\";\n                } else {\n                    int dotIndex = baseDate.lastIndexOf('.');\n                    if (dotIndex == -1) {\n                        baseDate += \".000\";\n                    } else if (baseDate.substring(dotIndex).length() < 4) {\n                        baseDate = padMilliseconds(baseDate);\n                    }\n                }\n                dateStr = baseDate + tzOffset;\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}\n\nprivate String padMilliseconds(String dateStr) {\n    int dotIndex = dateStr.lastIndexOf('.');\n    if (dotIndex != -1 && dateStr.substring(dotIndex).length() < 4) {\n        // Pad milliseconds to 3 digits\n        String ms = dateStr.substring(dotIndex + 1);\n        while (ms.length() < 3) {\n            ms += \"0\";\n        }\n        return dateStr.substring(0, dotIndex + 1) + ms;\n    }\n    return dateStr;\n}\n\nprivate boolean hasTimeZone(String dateStr) {\n    return dateStr.contains(\"+\") || dateStr.contains(\"-\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}