{
    "generation": "    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        if (x == 0) {\n            // Return zero if multiplied by zero\n            return this.getZero();\n        } else if (x == 1) {\n            // Return itself if multiplied by one\n            return this;\n        } else if (this.isNaN() || this.isInfinite()) {\n            // Handle special cases for NaN and infinity\n            if (this.isNaN() || x == 0) {\n                this.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                return this.newInstance(this.getZero().divide(this.getZero())); // Return NaN\n            } else if (this.isInfinite()) {\n                return x > 0 ? this : this.negate();\n            }\n        }\n        return multiplyFast(x);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}