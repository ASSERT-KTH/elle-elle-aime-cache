{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                // todo confirm that check\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                // merge attributes onto real html\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n            } else if (StringUtil.in(name, Constants.InBodyStartToHead)) {\n                return tb.process(t, InHead);\n            } else if (name.equals(\"body\")) {\n                tb.error(this);\n                LinkedList<Element> stack = tb.getStack();\n                if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                    // only in fragment case\n                    return false; // ignore\n                } else {\n                    tb.framesetOk(false);\n                    Element body = stack.get(1);\n                    for (Attribute attribute : startTag.getAttributes()) {\n                        if (!body.hasAttr(attribute.getKey()))\n                            body.attributes().put(attribute);\n                    }\n                }\n            } else if (name.equals(\"frameset\")) {\n                tb.error(this);\n                LinkedList<Element> stack = tb.getStack();\n                if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                    // only in fragment case\n                    return false; // ignore\n                } else if (!tb.framesetOk()) {\n                    return false; // ignore frameset\n                } else {\n                    Element second = stack.get(1);\n                    if (second.parent() != null)\n                        second.remove();\n                    // pop up to html element\n                    while (stack.size() > 1)\n                        stack.removeLast();\n                    tb.insert(startTag);\n                    tb.transition(InFrameset);\n                }\n            } else if (StringUtil.in(name, Constants.InBodyStartPClosers)) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n            } else if (StringUtil.in(name, Constants.Headings)) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                if (StringUtil.in(tb.currentElement().nodeName(), Constants.Headings)) {\n                    tb.error(this);\n                    tb.pop();\n                }\n                tb.insert(startTag);\n            } else if (StringUtil.in(name, Constants.InBodyStartPreListing)) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n                // todo: ignore LF if next token\n                tb.framesetOk(false);\n            } else if (name.equals(\"form\")) {\n                if (tb.getFormElement() != null) {\n                    tb.error(this);\n                    return false;\n                }\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insertForm(startTag, true);\n            } else if (name.equals(\"li\")) {\n                tb.framesetOk(false);\n                LinkedList<Element> stack = tb.getStack();\n                for (int i = stack.size() - 1; i > 0; i--) {\n                    Element el = stack.get(i);\n                    if (el.nodeName().equals(\"li\")) {\n                        tb.process(new Token.EndTag(\"li\"));\n                        break;\n                    }\n                    if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                        break;\n                }\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n            } else if (StringUtil.in(name, Constants.DdDt)) {\n                tb.framesetOk(false);\n                LinkedList<Element> stack = tb.getStack();\n                for (int i = stack.size() - 1; i > 0; i--) {\n                    Element el = stack.get(i);\n                    if (StringUtil.in(el.nodeName(), Constants.DdDt)) {\n                        tb.process(new Token.EndTag(el.nodeName()));\n                        break;\n                    }\n                    if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                        break;\n                }\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n            } else if (name.equals(\"plaintext\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n                tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n            } else if (name.equals(\"button\")) {\n                if (tb.inButtonScope(\"button\")) {\n                    // close and reprocess\n                    tb.error(this);\n                    tb.process(new Token.EndTag(\"button\"));\n                    tb.process(startTag);\n                } else {\n                    tb.reconstructFormattingElements();\n                    tb.insert(startTag);\n                    tb.framesetOk(false);\n                }\n            } else if (name.equals(\"a\")) {\n                if (tb.getActiveFormattingElement(\"a\") != null) {\n                    tb.error(this);\n                    tb.process(new Token.EndTag(\"a\"));\n\n                    // still on stack?\n                    Element remainingA = tb.getFromStack(\"a\");\n                    if (remainingA != null) {\n                        tb.removeFromActiveFormattingElements(remainingA);\n                        tb.removeFromStack(remainingA);\n                    }\n                }\n                tb.reconstructFormattingElements();\n                Element a = tb.insert(startTag);\n                tb.pushActiveFormattingElements(a);\n            } else if (StringUtil.in(name, Constants.Formatters)) {\n                tb.reconstructFormattingElements();\n                Element el = tb.insert(startTag);\n                tb.pushActiveFormattingElements(el);\n            } else if (name.equals(\"nobr\")) {\n                tb.reconstructFormattingElements();\n                if (tb.inScope(\"nobr\")) {\n                    tb.error(this);\n                    tb.process(new Token.EndTag(\"nobr\"));\n                    tb.reconstructFormattingElements();\n                }\n                Element el = tb.insert(startTag);\n                tb.pushActiveFormattingElements(el);\n            } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.insertMarkerToFormattingElements();\n                tb.framesetOk(false);\n            } else if (name.equals(\"table\")) {\n                if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n                tb.framesetOk(false);\n                tb.transition(InTable);\n            } else if (StringUtil.in(name, Constants.InBodyStartEmptyFormatters)) {\n                tb.reconstructFormattingElements();\n                tb.insertEmpty(startTag);\n                tb.framesetOk(false);\n            } else if (name.equals(\"input\")) {\n                tb.reconstructFormattingElements();\n                Element el = tb.insertEmpty(startTag);\n                if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                    tb.framesetOk(false);\n            } else if (StringUtil.in(name, Constants.InBodyStartMedia)) {\n                tb.insertEmpty(startTag);\n            } else if (name.equals(\"hr\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insertEmpty(startTag);\n                tb.framesetOk(false);\n            } else if (name.equals(\"image\")) {\n                // Ensure we are not in an SVG context before converting <image> to <img>\n                if (!isInSvgContext(tb)) {\n                    return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                } else {\n                    tb.insert(startTag);\n                }\n            } else if (name.equals(\"isindex\")) {\n                // how much do we care about the early 90s?\n                tb.error(this);\n                if (tb.getFormElement() != null)\n                    return false;\n\n                tb.tokeniser.acknowledgeSelfClosingFlag();\n                tb.process(new Token.StartTag(\"form\"));\n                if (startTag.attributes.hasKey(\"action\")) {\n                    Element form = tb.getFormElement();\n                    form.attr(\"action\", startTag.attributes.get(\"action\"));\n                }\n                tb.process(new Token.StartTag(\"hr\"));\n                tb.process(new Token.StartTag(\"label\"));\n                // hope you like english.\n                String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                        startTag.attributes.get(\"prompt\") :\n                        \"This is a searchable index. Enter search keywords: \";\n\n                tb.process(new Token.Character(prompt));\n\n                // input\n                Attributes inputAttribs = new Attributes();\n                for (Attribute attr : startTag.attributes) {\n                    if (!StringUtil.in(attr.getKey(), Constants.InBodyStartInputAttribs))\n                        inputAttribs.put(attr);\n                }\n                inputAttribs.put(\"name\", \"isindex\");\n                tb.process(new Token.StartTag(\"input\", inputAttribs));\n                tb.process(new Token.EndTag(\"label\"));\n                tb.process(new Token.StartTag(\"hr\"));\n                tb.process(new Token.EndTag(\"form\"));\n            } else if (name.equals(\"textarea\")) {\n                tb.insert(startTag);\n                // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                tb.tokeniser.transition(TokeniserState.Rcdata);\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(Text);\n            } else if (name.equals(\"xmp\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.reconstructFormattingElements();\n                tb.framesetOk(false);\n                handleRawtext(startTag, tb);\n            } else if (name.equals(\"iframe\")) {\n                tb.framesetOk(false);\n                handleRawtext(startTag, tb);\n            } else if (name.equals(\"noembed\")) {\n                // also handle noscript if script enabled\n                handleRawtext(startTag, tb);\n            } else if (name.equals(\"select\")) {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.framesetOk(false);\n\n                HtmlTreeBuilderState state = tb.state();\n                if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                    tb.transition(InSelectInTable);\n                else\n                    tb.transition(InSelect);\n            } else if (StringUtil.in(name, Constants.InBodyStartOptions)) {\n                if (tb.currentElement().nodeName().equals(\"option\"))\n                    tb.process(new Token.EndTag(\"option\"));\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n            } else if (StringUtil.in(name, Constants.InBodyStartRuby)) {\n                if (tb.inScope(\"ruby\")) {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                        tb.error(this);\n                        tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                    }\n                    tb.insert(startTag);\n                }\n            } else if (name.equals(\"math\")) {\n                tb.reconstructFormattingElements();\n                // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                tb.insert(startTag);\n                tb.tokeniser.acknowledgeSelfClosingFlag();\n            } else if (name.equals(\"svg\")) {\n                tb.reconstructFormattingElements();\n                // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                tb.insert(startTag);\n                tb.tokeniser.acknowledgeSelfClosingFlag();\n            } else if (StringUtil.in(name, Constants.InBodyStartDrop)) {\n                tb.error(this);\n                return false;\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n            }\n            break;\n\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.name();\n            if (name.equals(\"body\")) {\n                if (!tb.inScope(\"body\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                    tb.transition(AfterBody);\n                }\n            } else if (name.equals(\"html\")) {\n                boolean notIgnored = tb.process(new Token.EndTag(\"body\"));\n                if (notIgnored)\n                    return tb.process(endTag);\n            } else if (StringUtil.in(name, Constants.InBodyEndClosers)) {\n                if (!tb.inScope(name)) {\n                    // nothing to close\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (name.equals(\"form\")) {\n                Element currentForm = tb.getFormElement();\n                tb.setFormElement(null);\n                if (currentForm == null || !tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    // remove currentForm from stack. will shift anything under up.\n                    tb.removeFromStack(currentForm);\n                }\n            } else if (name.equals(\"p\")) {\n                if (!tb.inButtonScope(name)) {\n                    tb.error(this);\n                    tb.process(new Token.StartTag(name)); // if no p to close, creates an empty <p></p>\n                    return tb.process(endTag);\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (name.equals(\"li\")) {\n                if (!tb.inListItemScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (StringUtil.in(name, Constants.DdDt)) {\n                if (!tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (StringUtil.in(name, Constants.Headings)) {\n                if (!tb.inScope(Constants.Headings)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(Constants.Headings);\n                }\n            } else if (name.equals(\"sarcasm\")) {\n                // *sigh*\n                return anyOtherEndTag(t, tb);\n            } else if (StringUtil.in(name, Constants.InBodyEndAdoptionFormatters)) {\n                // Adoption Agency Algorithm.\n                OUTER:\n                for (int i = 0; i < 8; i++) {\n                    Element formatEl = tb.getActiveFormattingElement(name);\n                    if (formatEl == null)\n                        return anyOtherEndTag(t, tb);\n                    else if (!tb.onStack(formatEl)) {\n                        tb.error(this);\n                        tb.removeFromActiveFormattingElements(formatEl);\n                        return true;\n                    } else if (!tb.inScope(formatEl.nodeName())) {\n                        tb.error(this);\n                        return false;\n                    } else if (tb.currentElement() != formatEl)\n                        tb.error(this);\n\n                    Element furthestBlock = null;\n                    Element commonAncestor = null;\n                    boolean seenFormattingElement = false;\n                    LinkedList<Element> stack = tb.getStack();\n                    // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                    // run-aways\n                    final int stackSize = stack.size();\n                    for (int si = 0; si < stackSize && si < 64; si++) {\n                        Element el = stack.get(si);\n                        if (el == formatEl) {\n                            commonAncestor = stack.get(si - 1);\n                            seenFormattingElement = true;\n                        } else if (seenFormattingElement && tb.isSpecial(el)) {\n                            {\n                            el)) tb.special tb tb tb tb.on.sep tb.format.format el tb tb.format tb tb.el fr.format {\n                            common.format.format.formatStringUtil (format.format.formatnodeName el(format tb orphan.format tb tb.format.format(null.format common tb tb tb tb.format common format.format format si.on.format vocal Node.format orphan.format.format.es.format common.format.format.format common tb.format common common common common.format.format yesterday.format seen if (name tb oi.equals common common tb.get.format.name ==Has if (name if ( si (name if (name.on common tb tb tb(tb null true name name name.format.format if (!.format {\n                        tb tb.format tb.out if (tb false\u6881.tb true tb.format if (name.nodeName tb Zack.error tb tb common tb tb.tb false common tb.go(tb.format tb tb tb if (!))){\n                        common false tb tb();\n                        tb if (name name name if (name common tb));\n                        tb tb(common true(name false if (name.debug.enter if (name {\n                       .format.err.format (name tb tb tb tb.format tb tb, tb tb tb);\n                        tb false orClose(tb (name.forNameFalse.pop case name(tb, tb.error tb tb false false a name if (format if (! tb (name if (name name name name(name);\n                        {\n                            tb if (name(name.get tb.name if (name (name false tb false {\n                        tb {\n                        tb.error false tb.error false(name tb tb tb tb tb tb.error this.load toStack tb false.err tb false(this.name(this);\n                    tb tb tb tb {\n                        tb.error false(tb false false name.error name name Tok this.name if (name false false.error if (tb tb {\n                        {\n                        tb tb)\n                    {\n if (name error.error(err tb tb StringUtil name if (name tb false (name StringUtil StringUtil tb false.out false if (name(name(name.end = tb tb.error tb.empty false false tb false false false tb.error(\" tb.error.error true);\n                        tb);\n                        new false name(name name false false tb, tb tb {\n                        tb false false tb false false {\n                        tb.error tb tb tb tb tb tb tb some.call.out theRest tb false tb.error this.err name tb error false tb if (! tb gauge injection tb tb err {\n                        tb tb.error.error(tb tb tb.out orphan.end false tb tb name name false(t tb StringUtilStringUtil tb if (name.processTag tb this());\n                        tb.getNode new {\n                        tb);\n                    tb tb false.charset if (name tb tb tb.mark(name name name if (name falseTag(tb tb(name(tb newTag name name name name);\n                        tb.out.name().name tb true Tib.tb tb.name if (name tb != true tb if (tb != name falseTag.name\u5265\u79bb name name name if (name(\"{} tb tb.error false ogr tb false tb tb.error.name(name);\n                    tb tb behind.error(false false(name false false t false);\n                        false if (!\u4e1d\u7ef8.equals, tb true false the(f (name false if (name(tb tb false if (tb.t tb tb if (name if (name false if (name name {\n                        name name name(name);\n                tb tb name));\n                    tb(tb);\nifClose(name(name nodeName false false false to(\");\n                        tb false false(false false false the rest.name name attr the \"Tag(false {\n                        true(t false name if (name StringUtil StringUtil StringUtil);\n                        tb true if (tb.Stack the current area false true.error\n                    false if (name(namenodeName.name.error);\n                    = false false new);\n                        false false for (name(name.name.error.error.error false true();\n                    tb null (name.format this.name.equals false \"(tb true.error false false(name tb false false(name.format(\" name(name false if (name {\n                tb.name name.end tb tb tb);\n                tb boolean true.fail<Token if (name name name name name name name if (name tb.t false if (tb.error the transition);\n                        tb.equals if (!\n                name(true.graphics {\n                   );\n                        tb);\n                   );\n                        tb.getName tb false end(name tbOf equals Tag if (! name name name(name SSR.error.error != tb TB tb.error {\n                    tb tbbi\u00f3 if (!));// if (! name.equals tb.err.add error true nodeName(tb tb tb.equals.errorError false false true new false tb.any\n                tb tb(tb.out.error false false if (tb.error if (tb.error.preventDefault.error.equals);\n                    tb false :Tag.errorTag tb tb tb false false if (tb.error.error false(false false false false if (! name.equals false this);\n                        tb.t(name this, tb.getToken tb(false if (! if (name {\nOverride any.out false(t false(true tb.error);\n                        tb false(\"null.nameEquals(tb false tb if (! tb false false(name newUser != tb false false(this tb.err if (t tb this, tb if (t(tbNullOrEmpty.name name name null tb.error\u5de5\u4f5c\u5c97\u4f4d {\n if (name false if (!getElement(t, tb false false if (! tb tb.end MQTT tb false(end(tb falseTag {\n                    tb.error tb tb error tb false (t.error false, tb true.err();\n                    tb tb falseClose tb.error tb tb.outer tb(tb tb.error tb.add tb tb);\n                        tb (tb true false this.start(\"name if (tb(end false(true false tb booleanNode false tb\u0435\u0440\u0435 (tb false tb new (name tb false if (t.current false + false any_tb tb tb NodeList newAction.current tb tb(tb tb tb false(tb false(name {\n                        tb tb tb(t);\n                    tb(tag false(tb tb tb tb false tb\n                    tb OR name tb -> tb.out nodeName cases.ok else exports ofTags (tb errorCode(name.createTextNode tb.name tb tb tb tb false tb false TagNode);\n                   .name false tagName falseOpen(name(name(name(name tb if (name false if (name tb false trueName {\n                        tb(tbClose false anyellipsis the=\" String tb false(name tb.getBoolean false tb, tb {\n                        true if (name(false tb if (name(name.equals t(tb(false tb));\n                    tb.error tb false false if (! lb false false false tb esc.name false tb.error false false if (name.error the stack tb tb tbname tb.error false(\" name(name false name name name false tb ==TagTag tb false if (name[name(name if (tb name tb false if (name(name a name (tb(name, tb);\n                        tb {\n                tb.equals name name {\n                tb.equals end(name.name if (name {\n if (Start false(name name if (! tb.error, tb tEmpty(name.end if (name(name(name if (name false false if (name if (tb false if (tb false false(name(name));\n                tb if (tbTop if (t tb \u0432\u0435\u0440(tbElement(name false (tb if (! false(name if (tb false name.equals (name if (name if (!Tag.name \u2588\u2588\u2588\u2588\u2588 inSvg.in(before if (name(name(name(\" tb if (name(name if (t.name if (! name false break(name true if (t.error if (! StringUtilStringUtil true();\n                tb (\" name(name name(name if (t.inClose move false name(t);\n                        tb if (t.name if (! name name Constants \"name name if (name if (name name(name);\n                        nodeNameTag tb name if (StringUtil StringUtil Exchange {\n                        {\n                tb(tb tb tb.nameTag name name.name {\n                tb name(name();\n                    tb newTagTag (name(nameAgregar name(name name(name true if (name if (name(nameEquals.in(Constants In(name {\n                       .block tb.errorTag \" tbTagTagTagTag(name, tbTag(nameBasic.error.appendTag(name.nameTag if (tb.name if (!(name{name tag {\n                       Element.err.name name.name if (name.equals.name.nameTag(name tb.tb tb.tIncrement.error new.endTag.endTag if (t.error.error();\n                    this.name was(\" name\nlijke {\n                       , tb.error.getError true;\n                        tb.error name {\n                tb(t);\n                tb.err zab name if (! name if (tb(start false name.name.equals(new tb ||tagName if (! tb",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}