{
    "generation": "import org.jsoup.Connection;\nimport org.jsoup.helper.Validate;\nimport org.jsoup.nodes.Element;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * A HTML Form Element provides ready access to the form's data and source.\n * <p>\n * You can add or remove key-vals, and easily fire the form submission.\n */\npublic class FormElement extends Element {\n    private static final String _ENC_TYPE = \"enctype\";\n    private static final String _ACTION = \"action\";\n    private static final String _METHOD = \"method\";\n\n    /**\n     * Create a new, empty form element.\n     * @param tag form tag\n     * @param baseUri the base uri\n     * @see org.jsoup.Jsoup#createFormElement(String, String, String)\n     */\n    public FormElement(Tag tag, String baseUri) {\n        super(tag, baseUri);\n    }\n\n    /**\n     * Get the form's absolute action URL, with the base URI of the page.\n     * @return absolute URL, or empty string if none set.\n     */\n    public String absoluteAction() {\n        return absUrl(_ACTION);\n    }\n\n    /**\n     * Get the form's action attribute. The action attribute specifies where to send the form-data\n     * when a form is submitted.\n     * @return action attribute, or empty string if none set.\n     */\n    public String action() {\n        return attr(_ACTION);\n    }\n\n    /**\n     * Set the form's action attribute.\n     * @param action attribute value\n     */\n    public FormElement action(String action) {\n        attr(_ACTION, action);\n        return this;\n    }\n\n\n    /**\n     * Get the form's method attribute. The method attribute specifies the HTTP method to use when sending form-data; most\n     * commonly POST or GET.\n     * @return method attribute, or empty string if none set.\n     */\n    public String method() {\n        return attr(_METHOD);\n    }\n\n    /**\n     * Set the form's method attribute.\n     * @param method method, typically \"POST\" or \"GET\"\n     */\n    public FormElement method(String method) {\n        attr(_METHOD, method);\n        return this;\n    }\n\n    /**\n     * Get the form's encoding type, the type of content that is used to transmit the form to the server. Possible values\n     * are \"application/x-www-form-urlencoded\" (default), \"multipart/form-data\", and \"text/plain\".\n     * @return the encoding type\n     */\n    public String encType() {\n        return attr(_ENC_TYPE);\n    }\n\n    /**\n     * Set the form's encoding type.\n     * @param encType encoding type\n     */\n    public FormElement encType(String encType) {\n        attr(_ENC_TYPE, encType);\n        return this;\n    }\n\n    /**\n     * Get the list of key-value pairs that are associated with this form.\n     * @return key-value list of form data.\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element element : select(\"input[type!=submit], textarea, select\")) {\n            String name = element.attr(\"name\");\n            if (name == null || name.length() == 0)\n                continue;\n\n            String type = element.attr(\"type\");\n\n            if (\"select\".equals(element.tagName())) {\n                Elements options = element.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) { // not set, use the first\n                    Element option = element.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute explicit set, or if it's a radio and no other radio by the same name is checked\n                if (element.hasAttr(\"checked\")) {\n                    final String val = element.val().length() >  0 ? element.val() : \"on\";\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                } else if (\"radio\".equalsIgnoreCase(type)) {\n                    if(select(\"input[type=radio][name=\"+name.replaceAll(\"\\\\s\", \"\")+\"]:checked\").isEmpty()) {\n                        String val = element.val().length() > 0 ? element.val() : \"on\";\n                        data.add(HttpConnection.KeyVal.create(name, val));\n                    }\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, element.val()));\n            }\n        }\n        return data;\n    }\n\n\n    /**\n     * Add a key-value pair to this form.\n     * @param key key\n     * @param value value\n     * @return this form, so you can chain operations.\n     */\n    public FormElement addData(String key, String value) {\n        Validate.notNull(key, \"Key must not be null\");\n        Validate.notNull(value, \"Value must not be null\");\n\n        Element input = select(\"input[name=\" + key + \"]\").first(); // value replaces current, if there's one with this key\n        if (input == null) { // doesn't have this key, add a hidden input\n            input = new Element(Tag.valueOf(\"input\"), baseUri());\n            input.attr(\"type\", \"hidden\");\n            input.attr(\"name\", key);\n            appendChild(input); // appended at end of form, not very elegant but forms generally do this\n        }\n        input.val(value);\n        return this;\n    }\n\n    @Override\n    public Elements submit() {\n        String action = hasAttr(_ACTION) ? absUrl(_ACTION) : baseUri();\n        Validate.notEmpty(action, \"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\");\n        return submit(action);\n    }\n\n    /**\n     * Submits the form. This creates a GET or POST request based on the form's method setting, and posts the form to the\n     * action URL. All control elements with a name are sent in the request.\n     * <p>\n     * This url must be absolute, only the protocol and host can be omitted. E.g: action=\"/search\", action=\"http://example.com/search\"\n     * are good, action=\"search\" is bad.\n     * @param actionURL URL to submit the form to. If this is a full URL, it will be used as is. If it is a relative URL,\n     *                  it will be resolved against the base URL. In either case, the form's input values will be sent as query parameters.\n     * @return the connection (with associated data). Once data has been sent, the connection can be closed, or the response examined.\n     * @throws IllegalArgumentException if the action URL is not absolute (starts with / or protocol)\n     * @throws UnsupportedOperationException if the form's enctype is not <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>\n     *\n     * @see #submit()\n     */\n    public Elements submit(String actionURL) {\n        Validate.notEmpty(actionURL, \"Action URL must not be empty.\");\n\n        String actionUri =  actionURL;\n        String method = attr(\"method\").toUpperCase();\n        String encType = attr(\"enctype\");\n\n        if (method.equals(\"\"))\n            method = \"GET\";\n        method = method.toUpperCase();\n\n        if (!\"GET\".equals(method) && !\"POST\".equals(method))\n            throw new UnsupportedOperationException(\"Method must be GET or POST (and not \" + method + \")\");\n\n        Connection con = Jsoup.connect(actionUri);\n        con.method(Connection.Method.valueOf(method));\n\n\n        if (\"application/x-www-form-urlencoded\".equals(encType)) {\n            con.data(formData());\n        } else if (\"multipart/form-data\".equals(encType)) {\n            List<Connection.KeyVal> entries = formData();\n            for (Connection.KeyVal entry: entries) {\n                con.data(entry.key(), entry.value());\n            }\n        } else if (!\"\".equals(encType)) {\n            throw new UnsupportedOperationException(\"Only application/x-www-form-urlencoded or multipart/form-data enctypes are currently supported, not \" + encType);\n        }\n        con.header(\"Content-Type\", encType); // set but only relevant for POSTs\n        return con.get(); // fire the request\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}