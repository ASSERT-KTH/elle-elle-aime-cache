{
    "generation": "import org.jsoup.Connection;\nimport org.jsoup.helper.Validate;\nimport org.jsoup.nodes.Element;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.jsoup.Connection.KeyVal.create;\n\n/**\n * A HTML Form Element provides ready access to the form's data and source.\n *\n * @author Jonathan Hedley\n */\npublic class FormElement extends Element {\n    private static final String _ENC_TYPE = \"enctype\";\n    private static final String _ACTION = \"action\";\n    private static final String _METHOD = \"method\";\n\n    /**\n     * Create a new, empty form element.\n     *\n     * @param tag       form tag\n     * @param baseUri the base URI\n     * @param attributes initial attributes\n     */\n    public FormElement(Tag tag, String baseUri, Attributes attributes) {\n        super(tag, baseUri, attributes);\n    }\n\n    /**\n     * Get the form's absolute action URI.\n     *\n     * @return absolute URI\n     */\n    public String action() {\n        return absUrl(_ACTION);\n    }\n\n    /**\n     * Set the form's absolute action URI.\n     *\n     * @param actionURI absolute URI\n     */\n    public void action(String actionURI) {\n        attr(_ACTION, actionURI);\n    }\n\n    /**\n     * Get the form's method.\n     *\n     * @return form method\n     */\n    public String method() {\n        return hasAttr(_METHOD) ? attr(_METHOD).toLowerCase() : \"get\";\n    }\n\n    /**\n     * Set the form's method.\n     *\n     * @param method form method\n     */\n    public void method(String method) {\n        attr(_METHOD, method);\n    }\n\n    /**\n     * Get the form's encoding type.\n     *\n     * @return the form's encoding type\n     */\n    public String enctype() {\n        return attr(_ENC_TYPE);\n    }\n\n    /**\n     * Set the form's encoding type.\n     *\n     * @param enctype the encoding type\n     */\n    public void enctype(String enctype) {\n        attr(_ENC_TYPE, enctype);\n    }\n\n    /**\n     * Get the list of data fields associated with this form. Use {@link #formData()} to get the data as a list of key vals.\n     *\n     * @return a list of input elements that contribute to form data.\n     */\n    public List<Element> elements() {\n        return select(\"input[type!=submit], textarea, select\");\n    }\n\n    /**\n     * Get the data associated with this form as a list of {@link Connection.KeyVal} instances.\n     *\n     * @return a list of key value pairs representing the form's data.\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // named elements first, then unnamed\n        for (Element el : elements()) {\n            if (el.tag().isFormSubmittable()) { // since they may be removed from form.\n                String name = el.attr(\"name\");\n                if (name.length() > 0)\n                    data.addAll(el.formData());\n            }\n        }\n        return data;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"<form action=\\\"%s\\\" method=\\\"%s\\\">%s</form>\", action(), method(), super.toString());\n    }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}