{
    "generation": "/**\n * Retrieves the form data from the input elements within this form.\n * \n * @return a list of key-value pairs representing the form data.\n */\npublic List<Connection.KeyVal> formData() {\n    List<Connection.KeyVal> data = new ArrayList<>();\n    for (Element input : select(\"input, select, textarea\")) { // consider all relevant form elements\n        if (input.tagName().equals(\"input\") && \n            (input.attr(\"type\").equals(\"checkbox\") || input.attr(\"type\").equals(\"radio\")) \n            &&!input.hasAttr(\"checked\")) {\n            continue; // ignore unchecked checkboxes and radio buttons\n        }\n        String name = input.attr(\"name\");\n        if (name.isEmpty()) continue; // ignore elements without a name\n        String value = getValue(input); // use a method to get the value based on the input type\n        data.add(new Connection.KeyVal(name, value));\n    }\n    return data;\n}\n\n// Helper method to get the value based on the input type\nprivate String getValue(Element input) {\n    String type = input.attr(\"type\");\n    if (type.equals(\"checkbox\") || type.equals(\"radio\")) {\n        return input.hasAttr(\"checked\")? input.attr(\"value\") : \"\";\n    } else if (type.equals(\"select-multiple\")) { // for select with multiple attribute\n        StringBuilder sb = new StringBuilder();\n        for (Element option : input.select(\"option[selected]\")) {\n            if (sb.length() > 0) sb.append(\",\");\n            sb.append(option.attr(\"value\"));\n        }\n        return sb.toString();\n    } else {\n        return input.attr(\"value\"); // default for other input types and textarea\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}