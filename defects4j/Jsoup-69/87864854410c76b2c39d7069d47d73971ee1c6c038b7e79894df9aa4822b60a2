{
    "generation": "import org.jsoup.Connection;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.jsoup.internal.StringUtil.isBlank;\n\n/**\n * A HTML Form Element provides ready access to the form fields/controls that are associated with it.\n */\npublic class FormElement extends Element {\n    private static final String _encType = \"enctype\";\n\n    /**\n     * Construct a new, empty form element\n     * @param tag form tag\n     * @param baseUri the base URI\n     * @param attributes initial attributes\n     */\n    public FormElement(Tag tag, String baseUri, Attributes attributes) {\n        super(tag, baseUri, attributes);\n    }\n\n    /**\n     * Get the form element's absolute action URL, with any relative URLs (e.g. an action attribute of \"submit.php\")\n     * resolved against the document's base URI.\n     * <p>\n     * If the form's absolute action URL cannot be determined (e.g. because it is not set, or the document has no base\n     * URI), it is returned as-is.\n     * @return absolute action URL\n     */\n    public String absoluteAction() {\n        return absUrl(\"action\");\n    }\n\n    /**\n     * Set the form element's absolute action URL.\n     * @param url absolute URL\n     * @return this\n     */\n    public FormElement action(String url) {\n        attr(\"action\", url);\n        return this;\n    }\n\n    /**\n     * Get the form element's method. (E.g. post, get)\n     * @return method, if set (for example {@code post} or {@code get}. Default is {@code get}\n     */\n    public String method() {\n        return attr(\"method\").toLowerCase();\n    }\n\n    /**\n     * Set the form element's method\n     * @param method method, e.g. post, get\n     * @return this\n     */\n    public FormElement method(String method) {\n        attr(\"method\", method);\n        return this;\n    }\n\n    /**\n     * Get the form element's character set encoding.\n     * @return character set encoding, blank string if not set. (For example {@code utf-8}, {@code ISO-8859-1})\n     * @deprecated Use {@link #acceptCharset()} instead\n     */\n    @Deprecated\n    public String charset() {\n        return attr(\"charset\");\n    }\n\n    /**\n     * Set the form element's character set encoding.\n     * @param charset character set encoding\n     * @return this\n     * @deprecated Use {@link #acceptCharset(String)} instead\n     */\n    @Deprecated\n    public FormElement charset(String charset) {\n        attr(\"charset\", charset);\n        return this;\n    }\n\n    /**\n     * Get the form element's accept-charset attribute.\n     * @return accept-charset attribute, blank string if not set. (For example {@code utf-8}, {@code ISO-8859-1})\n     */\n    public String acceptCharset() {\n        return attr(\"accept-charset\");\n    }\n\n    /**\n     * Set the form element's accept-charset attribute.\n     * @param acceptCharset accept-charset attribute\n     * @return this\n     */\n    public FormElement acceptCharset(String acceptCharset) {\n        attr(\"accept-charset\", acceptCharset);\n        return this;\n    }\n\n    /**\n     * Get the form element's request enctype.\n     * @return request enctype, default if not set (for example {@code application/x-www-form-urlencoded},\n     * {@code multipart/form-data}).\n     */\n    public String enctype() {\n        return attr(_encType).toLowerCase();\n    }\n\n    /**\n     * Set the form element's request enctype.\n     * @param enctype request enctype\n     * @return this\n     */\n    public FormElement enctype(String enctype) {\n        attr(_encType, enctype);\n        return this;\n    }\n\n    /**\n     * Get this form's submit elements.\n     * @return submit elements\n     */\n    public Elements submit() {\n        return select(\"input[type=submit], input[type=image], button[type=submit]\");\n    }\n\n    /**\n     * Prepare to submit this form. A Connection object is created with the request set up from the form's values. You\n     * can then set up other options (like user-agent, timeout, follow-redirects, etc), then execute it to submit the\n     * form.\n     * @return a prepared connection to execute\n     */\n    public Connection submit() {\n        String action = hasAttr(\"action\") ? absUrl(\"action\") : baseUri();\n        return Jsoup.connect(action)\n            .data(formData())\n            .method(attr(\"method\").toUpperCase().equals(\"POST\") ? Connection.Method.POST : Connection.Method.GET);\n    }\n\n    /**\n     * Get the data that should be submitted from this form. The returned list is serializable to the Request.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // inputs\n        for (Element el : select(\"input[type=text], input[type=password], input[type=hidden], input[type=number], \" +\n                \"input[type=search], input[type=email], input[type=tel], input[type=url], input:not([type]), \" +\n                \"input[type=checkbox]:checked, input[type=radio]:checked, select, textarea\")) {\n            String name = el.attr(\"name\");\n            if (!isBlank(name)) {\n                String value = el.val();\n\n                if (\"select\".equals(el.tagName())) {\n                    Elements options = el.select(\"option:selected\");\n                    boolean set = false;\n                    for (Element option : options) {\n                        if (option.hasAttr(\"value\"))\n                            data.add(KeyVal.create(name, option.val()));\n                        else if (!option.hasAttr(\"disabled\")) {\n                            // only use first if it doesn't have a value, and isn't disabled\n                            if (!set) {\n                                data.add(KeyVal.create(name, option.val()));\n                                set = true;\n                            }\n                        }\n                    }\n                } else {\n                    data.add(KeyVal.create(name, value));\n                }\n            }\n        }\n        return data;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}