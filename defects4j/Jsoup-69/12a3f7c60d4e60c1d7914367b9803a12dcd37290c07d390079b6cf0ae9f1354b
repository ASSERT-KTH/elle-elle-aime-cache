{
    "generation": "package org.jsoup.nodes;\n\nimport org.jsoup.Connection;\nimport org.jsoup.helper.Validate;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * A HTML Form Element provides ready access to the form fields/elements.\n */\npublic class FormElement extends Element {\n    private static final String _ENC_TYPE = \"enctype\";\n    private static final String _ACTION = \"action\";\n    private static final String _METHOD = \"method\";\n\n    /**\n     * Create a new, empty form element.\n     * @param tag form tag\n     * @param baseUri base uri\n     * @see org.jsoup.Jsoup#createFormElement(String, String)\n     */\n    public FormElement(Tag tag, String baseUri, Attributes attributes) {\n        super(tag, baseUri, attributes);\n    }\n\n    /**\n     * Get the form's absolute action URI.\n     * @return absolute URI\n     */\n    public String action() {\n        return absUrl(_ACTION);\n    }\n\n    /**\n     * Set the form's absolute action URI.\n     * @param actionURI absolute URI\n     */\n    public void action(String actionURI) {\n        attr(_ACTION, actionURI);\n    }\n\n    /**\n     * Get the form's method.\n     * @return form method\n     */\n    public String method() {\n        return attr(_METHOD);\n    }\n\n    /**\n     * Set the form's method.\n     * @param method form method\n     */\n    public void method(String method) {\n        attr(_METHOD, method);\n    }\n\n    /**\n     * Get the form's encoding type.\n     * @return the form's encoding type\n     */\n    public String encType() {\n        return attr(_ENC_TYPE);\n    }\n\n    /**\n     * Set the form's encoding type.\n     * @param encType the form's encoding type\n     */\n    public void encType(String encType) {\n        attr(_ENC_TYPE, encType);\n    }\n\n    /**\n     * Get all the form's input elements.\n     * @return all the form's input elements.\n     */\n    public Elements elements() {\n        return select(\"input, textarea, select, button\");\n    }\n\n    /**\n     * Get the data that this form submits. This is effectively a map of key=value pairs.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el : elements()) {\n            if (!el.tag().isFormSubmittable()) continue; // contents of submit inputs don't go into data\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) { // fallback to first if none selected\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    data.add(KeyVal.create(name, el.val()));\n                }\n            } else {\n                data.add(KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n\n\n    @Override\n    public String toString() {\n        return super.toString();\n    }\n\n    private static class KeyVal implements Connection.KeyVal {\n        private String key;\n        private String value;\n\n        public static KeyVal create(String key, String value) {\n            return new KeyVal().key(key).value(value);\n        }\n\n        public KeyVal key(String key) {\n            Validate.notEmpty(key);\n            this.key = key;\n            return this;\n        }\n\n        public String key() {\n            return key;\n        }\n\n        public KeyVal value(String value) {\n            Validate.notNull(value);\n            this.value = value;\n            return this;\n        }\n\n        public String value() {\n            return value;\n        }\n\n        @Override\n        public String toString() {\n            return key + \"=\" + value;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}