{
    "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nimport org.jsoup.Connection;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\n/**\n * A HTML Form Element provides ready access to the form's elements and values.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class FormElement extends Element {\n    private final Element element;\n\n    /**\n     * Create a new FormElement from a form element.\n     * @param element form element\n     */\n    public FormElement(Element element) {\n        super(Tag.valueOf(element.tagName()), element.baseUri(), element.attributes());\n        this.element = element;\n    }\n\n    /**\n     * Get the number of elements found in this form.\n     * @return number of elements inside form\n     */\n    public int elementSize() {\n        return element.select(\"input, textarea, select\").size();\n    }\n\n    /**\n     * Get the form element's absolute URL.\n     * @return absolute URL of form.\n     */\n    public String absoluteAction() {\n        return element.absUrl(\"action\");\n    }\n\n    /**\n     * Get the form element's method.\n     * @return form method\n     */\n    public String method() {\n        return hasAttr(\"method\") ? attr(\"method\").toUpperCase() : \"GET\";\n    }\n\n    /**\n     * Get or set the form element's method.\n     * @param method method to use. If null or empty, sets to \"GET\"\n     * @return current method\n     */\n    public FormElement method(String method) {\n        if (method == null || method.isEmpty())\n            method = \"GET\";\n        attr(\"method\", method.toUpperCase());\n        return this;\n    }\n\n    /**\n     * Get the list of key-value form submission pairs.\n     * @return list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control children\n        for (Element el : element.select(\"input[type!=submit], textarea, select\")) {\n            if (!el.hasAttr(\"name\"))\n                continue; // only add elements with a name\n\n            String name = el.attr(\"name\");\n            String type = el.attr(\"type\");\n\n            if (\"button\".equalsIgnoreCase(type) || \"image\".equalsIgnoreCase(type) || \"reset\".equalsIgnoreCase(type)\n                    || \"submit\".equalsIgnoreCase(type)) {\n                // ignore buttons.\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.hasAttr(\"value\") ? el.attr(\"value\") : \"on\";\n                    data.add(new Connection.KeyVal(name, val));\n                }\n            } else if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option : options) {\n                    data.add(new Connection.KeyVal(name, option.val()));\n                    set = true;\n                }\n                if (!set) { // value not explicitly set from checked ones, so use first, or default option\n                    Element option = el.select(\"option\").first();\n                    if (option == null) {\n                        data.add(new Connection.KeyVal(name, \"\"));\n                    } else {\n                        data.add(new Connection.KeyVal(name, option.hasAttr(\"value\") ? option.attr(\"value\") : option.text()));\n                    }\n                }\n            } else {\n                // input, textarea\n                data.add(new Connection.KeyVal(name, el.val()));\n            }\n        }\n        return data;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}