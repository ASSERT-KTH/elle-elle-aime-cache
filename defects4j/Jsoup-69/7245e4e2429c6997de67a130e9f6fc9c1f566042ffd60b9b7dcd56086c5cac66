{
    "generation": "package org.jsoup.nodes;\n\nimport org.jsoup.Connection;\nimport org.jsoup.helper.Validate;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * A HTML Form Element.\n */\npublic class FormElement extends Element {\n    private static final String _formKey = \"___jsoup-key\"; // only used for forms without names, to support multiple forms\n\n    /**\n     * Create a new, empty form element.\n     * @param tag form tag\n     * @param baseUri the base URI\n     * @param attributes initial attributes\n     */\n    public FormElement(Tag tag, String baseUri, Attributes attributes) {\n        super(tag, baseUri, attributes);\n    }\n\n    /**\n     * Get the form's absolute action URL.\n     * @return absolute action URL\n     */\n    public String absoluteAction() {\n        return absUrl(\"action\");\n    }\n\n    /**\n     * Get the form's method.\n     * @return form method\n     */\n    public String method() {\n        return hasAttr(\"method\") ? attr(\"method\").toLowerCase() : \"get\";\n    }\n\n    /**\n     * Get the form's action URL.\n     * @return action URL\n     */\n    public String action() {\n        return attr(\"action\");\n    }\n\n    /**\n     * Set the form's action URL.\n     * @param action action URL to set\n     * @return this form element, for chaining\n     */\n    public FormElement action(String action) {\n        attr(\"action\", action);\n        return this;\n    }\n\n    /**\n     * Get the form data from this form. The data is encoded as a query string.\n     * @return the encoded form data\n     */\n    public String formData() {\n        StringBuilder sb = new StringBuilder();\n\n        // data only contains form element values if they have a name attr\n        for (Element el : elements()) {\n            if (el.tag().isFormSubmittable() && el.hasAttr(\"name\"))\n                sb.append(el.attr(\"name\")).append(\"=\").append(el.val()).append(\"&\");\n        }\n\n        // if there is no name, or value is blank, no keyval is encoded\n        if (sb.length() > 0)\n            return sb.substring(0, sb.length() - 1); // trim trailing &\n        else\n            return \"\";\n    }\n\n    /**\n     * Get the data from this form. The data is a list of key vals.\n     * @return a list of key value pairs representing the form data\n     */\n    public List<Connection.KeyVal> formDataAsList() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // keyvals only for form elements with a name\n        for (Element el : elements()) {\n            if (el.tag().isFormSubmittable() && el.hasAttr(\"name\")) {\n                String name = el.attr(\"name\");\n                String value = el.val();\n                data.add(HttpConnection.KeyVal.create(name, value));\n            }\n        }\n        return data;\n\n    }\n\n    /**\n     * Add a form key/val pair.\n     * @param key name of the element\n     * @param value value of the element\n     * @return this form element, for chaining\n     */\n    public FormElement addValue(String key, String value) {\n        Elements els = elements();\n\n        Element el = els.selectFirst(\"[name=\" + key + \"]\");\n\n        if (el != null)\n            el.val(value);\n        else {\n            Element input = new Element(Tag.valueOf(\"input\"), baseUri());\n            input.attr(\"type\", \"hidden\").attr(\"name\", key).attr(\"value\", value);\n            appendChild(input);\n        }\n\n        return this;\n    }\n\n    @Override\n    public String toString() {\n        return outerHtml();\n    }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}