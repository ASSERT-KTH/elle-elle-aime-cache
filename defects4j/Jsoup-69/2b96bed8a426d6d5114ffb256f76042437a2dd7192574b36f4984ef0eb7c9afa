{
    "generation": "/**\n * Returns the form's data as a list of key-value pairs.\n * \n * @return the form's data\n */\npublic List<Connection.KeyVal> formData() {\n    List<Connection.KeyVal> data = new ArrayList<>();\n    for (Element input : select(\"input, textarea, select\")) {\n        if (input.tagName().equals(\"input\")) {\n            String type = input.attr(\"type\");\n            if (type.equals(\"reset\") || type.equals(\"button\") || type.equals(\"image\"))\n                continue; // these don't contribute to the form data\n        }\n\n        String name = input.attr(\"name\");\n        if (name.isEmpty()) \n            continue; // inputs without a name don't contribute to the form data\n\n        if (input.tagName().equals(\"input\") && input.attr(\"type\").equals(\"checkbox\") \n                &&!input.hasAttr(\"checked\"))\n            continue; // unchecked checkboxes don't contribute to the form data\n\n        if (input.tagName().equals(\"input\") && input.attr(\"type\").equals(\"radio\") \n                &&!input.hasAttr(\"checked\"))\n            continue; // unchecked radio boxes don't contribute to the form data\n\n        // Fix: Check if the element is still in the document before adding to form data\n        if (input_inDocument(this, input)) { \n            data.add(new Connection.KeyVal(name, input.attr(\"value\")));\n        }\n    }\n    return data;\n}\n\n// Helper method to check if an element is a descendant of another\nprivate boolean input_inDocument(FormElement form, Element input) {\n    Element current = input;\n    while (current!= null) {\n        if (current == form)\n            return true;\n        current = current.parent();\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}