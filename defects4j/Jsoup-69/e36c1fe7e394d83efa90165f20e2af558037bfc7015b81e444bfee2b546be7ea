{
    "generation": "@Override\npublic List<Connection.KeyVal> formData() {\n    List<Connection.KeyVal> data = new ArrayList<>();\n\n    // Iterate through the child elements and collect form data\n    for (Element el : elements.select(\"input, textarea, select\")) {\n        if (!el.hasAttr(\"name\")) continue; // Skip elements without a name\n\n        if (el.tagName().equals(\"input\")) {\n            String type = el.attr(\"type\");\n\n            // Check for supported input types\n            if (!(type.equals(\"button\") || type.equals(\"submit\") || type.equals(\"reset\") || type.equals(\"hidden\") || type.equals(\"text\") || type.equals(\"password\") || type.equals(\"radio\") || type.equals(\"checkbox\"))) {\n                continue;\n            }\n\n            if (type.equalsIgnoreCase(\"checkbox\") || type.equalsIgnoreCase(\"radio\")) {\n                if (!el.hasAttr(\"checked\")) continue; // Include only checked checkboxes/radios\n            }\n\n            data.add(HttpConnection.KeyVal.create(el.attr(\"name\"), el.val()));\n        } else if (el.tagName().equals(\"textarea\")) {\n            data.add(HttpConnection.KeyVal.create(el.attr(\"name\"), el.text()));\n        } else if (el.tagName().equals(\"select\")) {\n            Elements options = el.select(\"option[selected]\");\n            boolean multiple = el.hasAttr(\"multiple\");\n\n            for (Element option : options) {\n                data.add(HttpConnection.KeyVal.create(el.attr(\"name\"), option.val()));\n                if (!multiple) break; // If not multiple, add only first selected option\n            }\n        }\n    }\n\n    return data;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}