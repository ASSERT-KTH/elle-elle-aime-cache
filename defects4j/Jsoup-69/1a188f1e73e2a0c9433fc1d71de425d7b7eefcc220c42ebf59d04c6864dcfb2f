{
    "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nimport org.jsoup.Connection;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\n/**\n * A HTML Form Element provides ready access to the form's elements and values.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class FormElement extends Element {\n    private final Element element;\n\n    /**\n     * Construct a new FormElement from the given form element.\n     * @param element form element\n     */\n    public FormElement(Element element) {\n        super(Tag.valueOf(element.tagName()), element.baseUri(), element.attributes());\n        this.element = element;\n    }\n\n    /**\n     * Get the number of elements found in this form.\n     * @return number of elements inside form\n     */\n    public int elementsSize() {\n        return element.select(\"input, select, textarea, button\").size();\n    }\n\n    /**\n     * Get the list of input elements associated with this form.\n     * @return list of input elements\n     */\n    public List<Element> elements() {\n        return element.select(\"input, select, textarea, button\");\n    }\n\n    /**\n     * Prepare to submit this form. A Connection object is created with the request set up from the form values. You\n     * can then set up other options (like user-agent, timeout, cookies), then execute the connection.\n     * @return a connection prepared from the values of this form.\n     * @see #formData()\n     */\n    public Connection submit() {\n        String action = hasAttr(\"action\") ? absUrl(\"action\") : baseUri();\n        return Jsoup.connect(action).data(formData());\n    }\n\n    /**\n     * Get the data that this form submits. This is effectively a map of key value pairs, as submitted by the browser.\n     * For example, for a general form:\n     * <pre><code>\n     * &lt;form action=&quot;/search&quot;&gt;\n     *     &lt;input type=&quot;text&quot; name=&quot;q&quot; value=&quot;jsoup&quot;/&gt;\n     *     &lt;input type=&quot;submit&quot; value=&quot;Search&quot;/&gt;\n     * &lt;/form&gt;\n     * </code></pre>\n     * <p>The returned list would contain two key val pairs:\n     * {@code {name=q, value=jsoup}, and {name=Submit, value=Search}}</p>\n     *\n     * @return a list of key val pairs\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements to extract their values.\n        for (Element el : element.select(\"input[type!=submit], input[type=submit][name], select, textarea\")) {\n            String name = el.attr(\"name\");\n            if (name.length() == 0)\n                continue;\n\n            String type = el.attr(\"type\").toLowerCase();\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option : options) {\n                    if (option.hasAttr(\"selected\"))\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                        set = true;\n                }\n                if (!set && !el.select(\"option\").isEmpty())\n                    data.add(HttpConnection.KeyVal.create(name, el.select(\"option\").first().val()));\n            } else if (\"checkbox\".equals(type) || \"radio\".equals(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    data.add(HttpConnection.KeyVal.create(name, el.hasAttr(\"value\") ? el.attr(\"value\") : \"on\"));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}