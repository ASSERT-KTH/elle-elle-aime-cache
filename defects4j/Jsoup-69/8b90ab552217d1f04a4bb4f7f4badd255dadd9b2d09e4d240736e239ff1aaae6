{
    "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nimport org.jsoup.Connection;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\n/**\n * A HTML Form Element provides ready access to the form's data elements.\n */\npublic class FormElement extends Element {\n    private static final String _encType = \"enctype\";\n\n    /**\n     * Create a new, empty form element.\n     * @param tag form element tag\n     * @param baseUri the base URI\n     */\n    public FormElement(Tag tag, String baseUri) {\n        super(tag, baseUri);\n    }\n\n    /**\n     * Create a new form element from an existing element.\n     * @param element the existing element to wrap\n     */\n    public FormElement(Element element) {\n        super(element.tag(), element.baseUri(), element.attributes());\n        this.childNodes = element.childNodes;\n        this.parentNode = element.parentNode;\n    }\n\n    /**\n     * Get the form's absolute action URI, after any relative URLs from the base URI have been resolved.\n     * @return absolute action URI\n     */\n    public String absoluteAction() {\n        return absUrl(\"action\");\n    }\n\n    /**\n     * Set the form's action attribute. The attribute value will be normalized (\"/foo\")\n     * @param action the action attribute\n     * @return this form, for chaining\n     */\n    public FormElement action(String action) {\n        attr(\"action\", action);\n        return this;\n    }\n\n    /**\n     * Get the form's method\n     * @return form method\n     */\n    public Method method() {\n        return Method.valueOf(attr(\"method\").toUpperCase());\n    }\n\n    /**\n     * Set the form's method\n     * @param method form method\n     * @return this form, for chaining\n     */\n    public FormElement method(Method method) {\n        attr(\"method\", method.name().toLowerCase());\n        return this;\n    }\n\n    /**\n     * Get the form's encoding type, if specified.\n     * @return the form's encoding type, or null if not set (and therefore HTML default \"application/x-www-form-urlencoded\").\n     * @see #encType()\n     */\n    public String encoding() {\n        return hasAttr(_encType) ? attr(_encType).toLowerCase() : null;\n    }\n\n    /**\n     * Get the form's encoding type, if specified.\n     * @return the form's encoding type, or null if not set (and therefore HTML default \"application/x-www-form-urlencoded\").\n     */\n    public String encType() {\n        return encoding();\n    }\n\n    /**\n     * Set the form's encoding type. The encoding type will be normalized to lower-case.\n     * @param encType the encoding type\n     * @return this form, for chaining\n     */\n    public FormElement encoding(String encType) {\n        attr(_encType, encType);\n        return this;\n    }\n\n    /**\n     * Set the form's encoding type.\n     * @param encType the encoding type\n     * @return this form, for chaining\n     */\n    public FormElement encType(String encType) {\n        return encoding(encType);\n    }\n\n    /**\n     * Get all the form element's input fields\n     * @return collection of input elements\n     */\n    public Elements elements() {\n        return select(\"input[type!=submit], textarea, select\");\n    }\n\n    /**\n     * Create a key-val representation of this form, for input with this {code Connection}.\n     * @param connect connection to use the form with\n     * @return a connection, with key-vals from the form.\n     */\n    public Connection data(Connection connect) {\n        for (KeyVal keyVal : formData()) {\n            connect.data(keyVal.key(), keyVal.value());\n        }\n        return connect;\n    }\n\n    /**\n     * Get the data that this form submits. This is effectively a set of key value pairs.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n\n        // iterate the form control elements to extract their values.\n        for (Element el : elements()) {\n            if (!el.hasAttr(\"name\"))\n                continue; // only submit controls that have a name\n\n            String name = el.attr(\"name\");\n            String type = el.attr(\"type\");\n\n            if (\"button\".equalsIgnoreCase(type) || \"f\".equalsIgnoreCase(type) || \"reset\".equalsIgnoreCase(type)\n                    || \"submit\".equalsIgnoreCase(type)) {\n                // ignore buttons, file, reset and submit inputs\n                continue;\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type))  {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val();\n                    data.add(new Connection.KeyVal(name, val == null ? \"\" : val));\n                }\n            } else if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element opt : options) {\n                    data.add(new Connection.KeyVal(name, opt.val()));\n                    set = true;\n                }\n                if (!set) { // set the first one if none are set.\n                    Element opt = el.select(\"option\").first();\n                    if (opt != null)\n                        data.add(new Connection.KeyVal(name, opt.val()));\n                }\n            } else {\n                // everything else, we add\n                data.add(new Connection.KeyVal(name, el.val()));\n            }\n        }\n        return data;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}