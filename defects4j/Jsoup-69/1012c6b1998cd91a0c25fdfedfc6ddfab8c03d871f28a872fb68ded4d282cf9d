{
    "generation": "import org.jsoup.Connection;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.jsoup.nodes.FormElement.ENCODING_ATTRIBUTES;\n\n/**\n * A HTML Form Element provides ready access to the form's (typically HTML input) elements.\n */\npublic class FormElement extends Element {\n    private static final String _ENC_TYPE = \"enctype\";\n\n    /**\n     * Create a new, empty form element.\n     * @param tag form element tag\n     * @param baseUri the base uri\n     * @param attributes initial attributes\n     */\n    public FormElement(Tag tag, String baseUri, Attributes attributes) {\n        super(tag, baseUri, attributes);\n    }\n\n    /**\n     * Get the form element's action attribute.\n     * @return action attribute\n     */\n    public String action() {\n        return hasAttr(\"action\") ? absUrl(\"action\") : baseUri();\n    }\n\n    /**\n     * Set the form element's action attribute.\n     * @param action attribute value\n     */\n    public void action(String action) {\n        attr(\"action\", action);\n    }\n\n    /**\n     * Get the form element's method attribute.\n     * @return method attribute, specified or implied\n     */\n    public String method() {\n        String method = attr(\"method\").toLowerCase();\n        if (method.isEmpty())\n            return \"get\";\n        return method;\n    }\n\n    /**\n     * Set the form element's method attribute.\n     * @param method method to use.\n     */\n    public void method(String method) {\n        attr(\"method\", method);\n    }\n\n    /**\n     * Get the form element's target attribute.\n     * @return target attribute\n     */\n    public String target() {\n        return attr(\"target\");\n    }\n\n    /**\n     * Set the form element's target attribute.\n     * @param target target\n     */\n    public void target(String target) {\n        attr(\"target\", target);\n    }\n\n    /**\n     * Returns the form's encoding. For a normal, text based form, this will return\n     * {@code application/x-www-form-urlencoded}. For a file upload form, this will return\n     * {@code multipart/form-data}.\n     * @return the form's encoding.\n     */\n    public String enctype() {\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#form-submission-algorithm\n        // https://www.w3.org/TR/html5/forms.html#multipart-form-data\n        for (String attr : ENCODING_ATTRIBUTES) {\n            if (hasAttr(attr))\n                return attr(\"enctype\");\n        }\n        return hasAttr(\"enctype\") ? attr(\"enctype\").toLowerCase() : \"application/x-www-form-urlencoded\";\n    }\n\n    /**\n     * Set the form element's encoding type. I.e. \"application/x-www-form-urlencoded\" or \"multipart/form-data\".\n     * @param enctype encoding type\n     */\n    public void enctype(String enctype) {\n        attr(\"enctype\", enctype);\n    }\n\n    /**\n     * Get all the form element's input elements.\n     * <p>\n     * Note: this is a fairly expensive operation, as it walks the document tree.\n     * </p>\n     * @return all input elements\n     */\n    public Elements elements() {\n        return select(\"> input[type!=submit], > button[type!=submit], > textarea, > select\");\n    }\n\n    /**\n     * Get all the form element's submit input elements.\n     * @return all submit input elements\n     */\n    public Elements submitElements() {\n        return select(\"> input[type=submit], > button[type=submit]\");\n    }\n\n    /**\n     * Get the data that this form would submit. This is a linear map of input element names to values,\n     * i.e. as it would appear in the URL's query string.\n     * <p>\n     * Plain text fields and checkboxes are represented by input elements. Select options are represented by the\n     * element for the select with the value of the option.\n     * </p>\n     *\n     * @return the data that this form would submit\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // inputs\n        for (Element el : elements()) {\n            if (!el.tag().isFormSubmittable()) continue; // content is form listed but not submitted, like a pre-filled credit card no.\n\n            String name = el.attr(\"name\");\n            if (name.length() == 0)\n                continue;\n\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements selectedOptions = ((Select)el).selectedOptions();\n                // optimization for speed: only add if one option is selected\n                if (selectedOptions.size() == 1) {\n                    data.add(HttpConnection.KeyVal.create(name, selectedOptions.get(0).val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have a value defined\n                // otherwise we'd end up with a bunch of key/value pairs with name=name and value=on\n                if (el.hasAttr(\"value\")) {\n                    if (el.hasAttr(\"checked\")) {\n                        final String ignoreValue = \"on\";\n                        String value = el.attr(\"value\");\n                        if (!value.equalsIgnoreCase(ignoreValue))\n                            data.add(HttpConnection.KeyVal.create(name, value));\n                    }\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.attr(\"value\")));\n            }\n        }\n        return data;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"<form %s action=\\\"%s\\\">%s</form>\", attributes.toString(), action(), childNodes.toString());\n    }\n\n    @Override\n    public FormElement clone() {\n        return (FormElement) super.clone();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}