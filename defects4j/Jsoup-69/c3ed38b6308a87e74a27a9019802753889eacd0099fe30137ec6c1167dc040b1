{
    "generation": "/**\n * Recomputes and returns the form's submitted data, as a list of key-value pairs.\n * \n * @return list of submitted form data (key=value) pairs\n */\npublic List<Connection.KeyVal> formData() {\n    List<Connection.KeyVal> data = new ArrayList<>();\n    for (Element input : select(\"input, textarea, select\")) {\n        String name = input.attr(\"name\");\n        if (name.isEmpty()) continue; // ignore inputs without a name\n\n        if (input.tagName().equals(\"input\")) {\n            String type = input.attr(\"type\");\n            if (type.equals(\"radio\") || type.equals(\"checkbox\")) {\n                if (!input.hasAttr(\"checked\")) continue; // only add checked boxes\n            } else if (type.equals(\"submit\")) {\n                if (input.attr(\"name\").equals(getAttr(\"name\"))) continue; // don't add the submit button itself\n            } else if (type.equals(\"file\")) {\n                // todo handle file uploads (if possible in a HTML parser)\n            }\n        }\n\n        String value = input.attr(\"value\").isEmpty()? input.text() : input.attr(\"value\");\n        data.add(new Connection.KeyVal(name, value));\n    }\n    return data.stream() // Filter out removed elements\n              .filter(keyVal ->!doc.selectFirst(\"input[name=\" + keyVal.key() + \"]\").isEmpty() \n                           ||!doc.selectFirst(\"textarea[name=\" + keyVal.key() + \"]\").isEmpty() \n                           ||!doc.selectFirst(\"select[name=\" + keyVal.key() + \"]\").isEmpty())\n              .collect(Collectors.toList());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}