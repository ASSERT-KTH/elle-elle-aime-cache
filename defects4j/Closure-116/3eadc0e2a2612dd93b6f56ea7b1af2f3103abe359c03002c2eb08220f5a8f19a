{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Functions called via 'call' and 'apply' have a this-object as\n  // the first parameter, but this is not part of the called function's\n  // parameter list.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO(johnlenz): Support replace this with a value.\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" call should be filtered before this.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n  Node fnParam = fnParams.getFirstChild();\n\n  while (cArg != null || fnParam != null) {\n    // Check if we have more call arguments than function parameters\n    if (cArg == null && fnParam != null) {\n      return CanInlineResult.NO;\n    }\n\n    // Check if we have more function parameters than call arguments\n    if (fnParam == null && cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n      continue;\n    }\n\n    // For each named parameter check if a mutable argument use more than once.\n    if (fnParam != null && cArg != null) {\n      // Check for arguments that are evaluated more than once.\n      // Note: Unlike block inlining, there it is not possible that a\n      // parameter reference will be in a loop.\n      if (NodeUtil.mayEffectMutableState(cArg, compiler)\n          || NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n      }\n\n      // Move to the next name and argument.\n      fnParam = fnParam.getNext();\n      cArg = cArg.getNext();\n    }\n  }\n\n  // Check for side effects in the function body\n  for (Node child = block.getFirstChild(); child != null; child = child.getNext()) {\n    if (NodeUtil.mayHaveSideEffects(child, compiler)) {\n      return CanInlineResult.NO;\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}