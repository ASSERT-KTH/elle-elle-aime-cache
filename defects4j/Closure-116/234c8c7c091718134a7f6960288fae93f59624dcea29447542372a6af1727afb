{
    "generation": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    Node cArg = callNode.getFirstChild().getNext();\n\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        if (cArg == null ||!cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg!= null || fnParam!= null) {\n      if (fnParam!= null) {\n        if (cArg!= null) {\n          // Check for arguments that are evaluated more than once\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n          // Check if the parameter may have side effects on mutable state\n          if (NodeUtil.mayMutateParameters(fnNode) \n              && (NodeUtil.mayBeAliased(cArg)\n              || NodeUtil.hasUnresolvedReferences(cArg)\n              || NodeUtil.containsModifyingFunctions(block, fnParam.getString())\n              || NodeUtil.dereferencesMutableObject(fnNode, fnParam))) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        fnParam = fnParam.getNext();\n      }\n\n      if (cArg!= null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}