{
    "generation": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getFirstChild();\n  Node resultNode = block.getLastChild().getPrevious();\n\n  // CALL NODE: [ NAME, THIS (optional), ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n  if (cArg != null && cArg.isThis()) {\n    cArg = cArg.getNext();\n  }\n\n  // FUNCTION NODE: [ NAME, ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n  while (cArg != null || fnParam != null) {\n    if (fnParam != null) {\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        // Side effect checks should be made for both the functions that are\n        // called directly and also the functions that are inlined into each other.\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && ((NodeUtil.getNameReferenceCount(resultNode, fnParam.getString()) > 1)\n                || NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 0)) {\n          return CanInlineResult.NO;\n        }\n      }\n      fnParam = fnParam.getNext();\n    } else if (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}