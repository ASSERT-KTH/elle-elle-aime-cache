{
    "generation": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n        if (NodeUtil.isFunctionObjectCall(callNode)) {\n            // TODO(johnlenz): Support replace this with a value.\n            if (cArg != null && cArg.isThis()) {\n                cArg = cArg.getNext();\n            }\n        } else {\n            // \".apply\" call should be filtered before this.\n            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n        }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    // Map to keep track of parameter usage counts\n    Map<String, Integer> paramUsageCount = new HashMap<>();\n\n    // First pass: count references to each parameter in the function body\n    for (Node param = fnParam; param != null; param = param.getNext()) {\n        String paramName = param.getString();\n        int count = NodeUtil.getNameReferenceCount(block, paramName);\n        paramUsageCount.put(paramName, count);\n    }\n\n    // Second pass: check arguments against parameters\n    while (cArg != null || fnParam != null) {\n        if (fnParam != null && cArg != null) {\n            String paramName = fnParam.getString();\n            int usageCount = paramUsageCount.get(paramName);\n\n            // Check if the argument has side effects and the parameter is used multiple times\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler) && usageCount > 1) {\n                return CanInlineResult.NO;\n            }\n        }\n\n        // Move to the next argument and parameter\n        if (fnParam != null) {\n            fnParam = fnParam.getNext();\n        }\n        if (cArg != null) {\n            cArg = cArg.getNext();\n        }\n    }\n\n    // Check for any remaining arguments without corresponding parameters\n    while (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n            return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n    }\n\n    return CanInlineResult.YES;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}