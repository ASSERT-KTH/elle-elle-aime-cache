{
    "generation": "    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     *\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function\n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(double min, double max) throws MaxIterationsExceededException,\n        FunctionEvaluationException {\n\n        clearResult();\n        verifyInterval(min, max);\n\n        double ret = Double.NaN;\n\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n\n        // Verify bracketing\n        double sign = yMin * yMax;\n        if (sign >= 0) {\n            // Either of the endpoint values is close to zero, return the endpoint that is close to zero.\n            if (isCloseToZero(yMin)) {\n                return min;\n            } else if (isCloseToZero(yMax)) {\n                return max;\n            }\n            // Neither value is close to zero and min and max do not bracket root.\n            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else {\n            // Solve using only the first endpoint as initial guess\n            ret = solve(min, yMin, max, yMax, min, yMin);\n        }\n\n        return ret;\n    }\n\n    private boolean isCloseToZero(double value) {\n        return Math.abs(value) < 1e-15; // Define a suitable tolerance for \"close to zero\"\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}