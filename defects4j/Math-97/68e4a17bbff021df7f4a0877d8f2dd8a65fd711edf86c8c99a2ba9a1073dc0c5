{
    "generation": "/**\n * Find a zero in the given interval.\n * <p>\n * Requires that the values of the function at the endpoints have opposite\n * signs or one of the endpoints is a zero. An <code>IllegalArgumentException</code> \n * is thrown if neither condition is met.</p>\n * \n * @param min the lower bound for the interval.\n * @param max the upper bound for the interval.\n * @return the value where the function is zero\n * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n * @throws FunctionEvaluationException if an error occurs evaluating the\n * function \n * @throws IllegalArgumentException if min is not less than max or neither \n * the signs of the values of the function at the endpoints are opposites nor \n * is one of the endpoints a zero\n */\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Verify bracketing or endpoint is a root\n    if ((yMin * yMax >= 0) && \n       !(Math.abs(yMin) < getAbsoluteAccuracy()) && \n       !(Math.abs(yMax) < getAbsoluteAccuracy())) {\n        // neither value is close to zero, and min and max do not bracket root, \n        // and neither endpoint is a root.\n        throw new IllegalArgumentException\n        (\"Function values at endpoints do not have different signs, \" +\n         \"and neither endpoint is a root.\" +\n         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        if (Math.abs(yMin) < getAbsoluteAccuracy()) {\n            ret = min; // min is a root\n        } else if (Math.abs(yMax) < getAbsoluteAccuracy()) {\n            ret = max; // max is a root\n        } else {\n            // solve using the verified bracketing\n            ret = solve(min, yMin, max, yMax, min, yMin);\n        }\n    }\n\n    return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}