{
    "generation": "void add(Node n, Context context) {\n    //...\n\n    case Token.FOR:\n        if (childCount == 4) {\n            add(\"for(\");\n            if (first.isVar()) {\n                add(first, Context.IN_FOR_INIT_CLAUSE);\n            } else {\n                addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n            }\n            add(\";\");\n            add(first.getNext());\n            add(\";\");\n            add(first.getNext().getNext());\n            add(\")\");\n            addNonEmptyStatement(\n                last, getContextForNonEmptyExpression(context), false);\n        } else {\n            Preconditions.checkState(childCount == 3);\n            add(\"for(\");\n            add(first);\n            add(\"in\");\n            add(first.getNext());\n            add(\")\");\n            addNonEmptyStatement(\n                last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n    //...\n\n    case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context,\n            getContextForNoInOperator(context), 0, 0);\n        break;\n\n    //...\n\n    case Token.HOOK:\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        Context rhsContext = Context.OTHER;\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, rhsContext);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, rhsContext);\n        break;\n\n    //...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}