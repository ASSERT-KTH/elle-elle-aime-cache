{
    "generation": "void add(Node n, Context context) {\n  // ...\n  case Token.FOR:\n    if (childCount == 4) {\n      add(\"for(\");\n      if (first.isVar()) {\n        add(first, Context.IN_FOR_INIT_CLAUSE);\n      } else {\n        addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n      }\n      add(\";\");\n      add(first.getNext());\n      add(\";\");\n      add(first.getNext().getNext());\n      add(\")\");\n      addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);\n    } else {\n      Preconditions.checkState(childCount == 3);\n      add(\"for(\");\n      add(first);\n      add(\"in\");\n      if (last.isBlock() && last.hasOneChild() && last.getFirstChild().isExprResult()) {\n        addNonEmptyStatement(last.getFirstChild(), getContextForNonEmptyExpression(context), true);\n      } else {\n        add(\"(\");\n        add(last);\n        add(\")\");\n        addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);\n      }\n    }\n    break;\n  // ...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}