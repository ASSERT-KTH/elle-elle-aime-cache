{
    "generation": "void add(Node n, Context context) {\n    // ... existing code ...\n\n    case Token.FOR:\n        if (childCount == 4) {\n            add(\"for(\");\n            // Handle variable declaration in the init clause\n            if (first.isVar()) {\n                add(first, Context.IN_FOR_INIT_CLAUSE);\n            } else {\n                addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n            }\n            add(\";\");\n            // Handle test clause with 'in' operator\n            Node testNode = first.getNext();\n            if (testNode.isIn()) {\n                cc.startSourceMapping(testNode);\n                addExpr(testNode.getFirstChild(), NodeUtil.precedence(Token.IN), getContextForNoInOperator(context));\n                cc.addOp(\" in \", true);\n                addExpr(testNode.getLastChild(), NodeUtil.precedence(Token.IN), getContextForNoInOperator(context));\n                cc.endSourceMapping(testNode);\n            } else {\n                add(testNode);\n            }\n            add(\";\");\n            add(first.getNext().getNext());\n            add(\")\");\n            addNonEmptyStatement(\n                last, getContextForNonEmptyExpression(context), false);\n        } else {\n            // ... existing code ...\n        }\n        break;\n\n    // ... existing code ...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}