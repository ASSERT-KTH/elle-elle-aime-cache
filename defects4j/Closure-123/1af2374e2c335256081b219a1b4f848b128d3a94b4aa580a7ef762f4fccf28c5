{
    "generation": "void add(Node n, Context context) {\n  // ...\n\n  case Token.FOR:\n    if (childCount == 4) {\n      add(\"for(\");\n      if (first.isVar()) {\n        prepareContextForForInit(first, context);\n        add(first, Context.IN_FOR_INIT_CLAUSE);\n      } else {\n        addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n      }\n      resetContextForForInit(context);\n      add(\";\");\n      add(first.getNext());\n      add(\";\");\n      add(first.getNext().getNext());\n      add(\")\");\n      addNonEmptyStatement(\n          last, getContextForNonEmptyExpression(context), false);\n    } else {\n      // Fix: Introduction of a context reset for IN_FOR_INIT_CLAUSE\n      if (context == Context.IN_FOR_INIT_CLAUSE) {\n        context = Context.OTHER;\n      }\n      // Rest of the code...\n    }\n    // Rest of the cases...\n}\n\nprivate void prepareContextForForInit(Node n, Context context) {\n  if (n.isVar() && n.getType() == Token.VAR) {\n    Node firstChild = n.getFirstChild();\n    while (firstChild != null) {\n      if (firstChild.getType() == Token.NAME) {\n        Node nameFirstChild = firstChild.getFirstChild();\n        if (nameFirstChild != null && nameFirstChild.getType() == Token.HOOK) {\n          context.setInForInitClause(true);\n          break;\n        }\n      }\n      firstChild = firstChild.getNext();\n    }\n  }\n}\n\nprivate void resetContextForForInit(Context context) {\n  context.setInForInitClause(false);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}