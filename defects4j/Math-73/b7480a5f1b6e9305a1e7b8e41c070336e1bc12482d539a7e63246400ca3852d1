{
    "generation": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // Evaluate the function at the initial, min, and max points\n    double yInitial = f.value(initial);\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Check if the initial guess is a root\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // Check if the minimum endpoint is a root\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    // Check if the maximum endpoint is a root\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // Verify that the function values at the endpoints have opposite signs\n    if (yMin * yMax > 0) {\n        throw new IllegalArgumentException(\"The function values at the endpoints do not bracket a root\");\n    }\n\n    // Verify that the function value at the initial point has a different sign from one of the endpoints\n    if (yInitial * yMin > 0 && yInitial * yMax > 0) {\n        throw new IllegalArgumentException(\"The function value at the initial point does not bracket a root with either endpoint\");\n    }\n\n    // If the initial point brackets the root with the minimum endpoint\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial);\n    }\n\n    // If the initial point brackets the root with the maximum endpoint\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax);\n    }\n\n    // Full Brent algorithm starting with provided initial guess\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}