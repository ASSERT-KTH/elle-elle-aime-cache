{
    "generation": "public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException, IllegalArgumentException {\n\n    clearResult();\n    verifyInterval(min, max);\n    verifySequence(min, initial, max);\n\n    // Compute the function values at the interval endpoints and the initial guess\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    double yInitial = f.value(initial);\n\n    // Check if one of the endpoints is a root\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    } else if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // Check if the initial guess is a root or if it is within the interval bounds and brackets the root\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    } else if (!(yInitial*yMin <= 0) && !(yInitial*yMax <= 0)) {\n        throw new IllegalArgumentException(\"The function values at the end points \" +\n                \"and the initial point do not bracket the root.\");\n    }\n\n    // Full Brent algorithm starting with provided initial guess\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n\n}\n\nprivate void verifyInterval(double min, double max) throws IllegalArgumentException {\n    if (min >= max) {\n        throw new IllegalArgumentException(\"Invalid interval: [\" + min + \", \" + max + \"]\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}