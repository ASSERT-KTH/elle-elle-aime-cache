{
    "generation": "/**\n * Find a zero in the given interval with an initial guess.\n * <p>Throws <code>IllegalArgumentException</code> if the values of the\n * function at the three points have the same sign (note that it is\n * allowed to have endpoints with the same sign if the initial point has\n * opposite sign function-wise).</p>\n *\n * @param f function to solve.\n * @param min the lower bound for the interval.\n * @param max the upper bound for the interval.\n * @param initial the start value to use (must be set to min if no\n * initial point is known).\n * @return the value where the function is zero\n * @throws MaxIterationsExceededException the maximum iteration count\n * is exceeded\n * @throws FunctionEvaluationException if an error occurs evaluating\n *  the function\n * @throws IllegalArgumentException if initial is not between min and max,\n * or if the interval does not bracket the root\n */\npublic double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    if (min >= max) {\n        throw new IllegalArgumentException(\"Invalid interval: min >= max\");\n    }\n    if (initial < min || initial > max) {\n        throw new IllegalArgumentException(\"Initial value is not within the interval\");\n    }\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    if (yMin * yMax > 0) {\n        throw new IllegalArgumentException(\"The interval does not bracket the root\");\n    }\n\n    double yInitial = f.value(initial);\n    if (yMin * yInitial <= 0 && yInitial * yMax <= 0) {\n        // initial guess is in a bracketing interval, proceed as before\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0);\n            return result;\n        }\n\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0);\n            return result;\n        }\n\n        if (yInitial * yMin < 0) {\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        } else {\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        }\n    } else {\n        throw new IllegalArgumentException(\"The interval and initial guess do not bracket the root\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}