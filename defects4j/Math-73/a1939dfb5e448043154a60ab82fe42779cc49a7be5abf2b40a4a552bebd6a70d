{
    "generation": "    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // Ensure the interval is valid (min < max)\n        if (min >= max) {\n            throw new IllegalArgumentException(\"Endpoints do not specify a valid interval: [\" + min + \", \" + max + \"]\");\n        }\n\n        // Evaluate function values at the endpoints and initial guess\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        double yInitial = f.value(initial);\n\n        // Check if function values at endpoints bracket the root\n        if (yMin * yMax > 0) {\n            throw new IllegalArgumentException(\"Function values at endpoints do not bracket a root: f(\" + min + \")=\" + yMin + \", f(\" + max + \")=\" + yMax);\n        }\n\n        // return the initial guess if it is good enough\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0);\n            return result;\n        }\n\n        // return the second endpoint if it is good enough\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0);\n            return result;\n        }\n\n        // Determine the correct bracket based on the initial guess\n        if (yInitial * yMin < 0) {\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        } else if (yInitial * yMax < 0) {\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        }\n\n        // If no valid bracketing is found, throw an exception\n        throw new IllegalArgumentException(\"Function values do not satisfy bracketing condition: f(\" + min + \")=\" + yMin + \", f(\" + initial + \")=\" + yInitial + \", f(\" + max + \")=\" + yMax);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}