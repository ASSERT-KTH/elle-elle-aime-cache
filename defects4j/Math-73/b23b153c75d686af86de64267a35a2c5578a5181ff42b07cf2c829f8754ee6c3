{
    "generation": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yInitial = f.value(initial);\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Check if initial guess is accurate enough\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // Check if min is accurate enough\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    // Check if max is accurate enough\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // Check for bracketing conditions\n    if (yInitial * yMin > 0 && yInitial * yMax > 0) {\n        throw new IllegalArgumentException(\"Initial guess, min, and max must bracket a root: \"\n            + \"f(\" + initial + \")=\" + yInitial + \", f(\" + min + \")=\" + yMin\n            + \", f(\" + max + \")=\" + yMax);\n    }\n\n    // If min and initial bracket the root, reduce interval\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n\n    // If initial and max bracket the root, reduce interval\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n\n    // Full Brent algorithm with the initial guess\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}