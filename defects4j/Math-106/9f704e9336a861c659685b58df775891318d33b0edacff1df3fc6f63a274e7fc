{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    \n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    int wholeValue = whole.intValue();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n    \n    // parse numerator\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    \n    int numeratorValue = num.intValue();\n    \n    // check for minus sign in numerator\n    if (numeratorValue < 0) {\n        // minus signs should be only in the whole number part\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(pos.getIndex());\n        return null;\n    }\n\n    // parse '/'\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0 :\n        // no '/'\n        // return numerator as a fraction\n        return new Fraction(numeratorValue, 1);\n    case '/' :\n        // found '/', continue parsing denominator\n        break;\n    default :\n        // invalid '/'\n        // set index back to initial, error index should be the last\n        // character examined.\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    \n    int denominatorValue = den.intValue();\n    \n    // check for minus sign in denominator\n    if (denominatorValue < 0) {\n        // minus signs should be only in the whole number part\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(pos.getIndex());\n        return null;\n    }\n    \n    // Calculate the fraction value\n    int numerator = Math.abs(wholeValue) * denominatorValue + numeratorValue;\n    int sign = MathUtils.sign(wholeValue);\n    return new Fraction(numerator * sign, denominatorValue);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}