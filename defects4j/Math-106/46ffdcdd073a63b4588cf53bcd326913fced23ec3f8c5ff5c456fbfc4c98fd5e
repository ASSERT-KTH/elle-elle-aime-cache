{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(initialIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse numerator\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        // invalid integer number\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(initialIndex);\n        return null;\n    }\n\n    // parse '/'\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n        case 0:\n            // no '/'\n            // return num as a fraction\n            return new Fraction(num.intValue(), 1);\n        case '/':\n            // found '/', continue parsing denominator\n            break;\n        default:\n            // invalid '/'\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        // invalid integer number\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(initialIndex);\n        return null;\n    }\n\n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n\n    // Check for minus signs in numerator or denominator\n    if (n < 0 || d < 0) {\n        // minus signs should be only in the whole number part\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(initialIndex);\n        return null;\n    }\n\n    // Calculate the numerator for the final fraction\n    int numerator = (Math.abs(w) * d) + n;\n    if (w < 0) {\n        numerator = -numerator;\n    }\n\n    return new Fraction(numerator, d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}