{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n\n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse numerator\n    // Check both positive and negative numbers for the numerator\n    int startIndexOfNum = pos.getIndex();\n    if (source.charAt(startIndexOfNum) == '-') {\n        pos.setIndex(startIndexOfNum + 1); // Advance the index to exclude the '-'\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num != null) {\n            // Negate the value if the number was successfully parsed\n            num = -1 * num.intValue();\n        } else {\n            // Invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n    } else {\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // Invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n    }\n\n    // parse '/'\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0:\n        // no '/'\n        // return num as a fraction\n        return new Fraction(num.intValue(), 1);\n    case '/':\n        // found '/', continue parsing denominator\n        break;\n    default:\n        // invalid '/'\n        // set index back to initial, error index should be the last\n        // character examined.\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    // Check both positive and negative numbers for the denominator\n    int startIndexOfDen = pos.getIndex();\n    Number den = null;\n    if (source.charAt(startIndexOfDen) == '-') {\n        pos.setIndex(startIndexOfDen + 1); // Advance the index to exclude the '-'\n        den = getDenominatorFormat().parse(source, pos);\n        if (den != null) {\n            // denominator cannot be negative\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndexOfDen);\n            return null;\n        }\n    } else {\n        den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n    }\n\n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}