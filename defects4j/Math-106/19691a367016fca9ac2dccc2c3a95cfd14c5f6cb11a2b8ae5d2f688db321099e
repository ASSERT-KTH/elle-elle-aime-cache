{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n\n    // Parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // Parse whole number part\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(initialIndex);\n        return null;\n    }\n\n    // Parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // Check for numerator and denominator\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    if (c == '/') {\n        // Found '/', parse numerator and denominator\n        // Reset position to before '/'\n        pos.setIndex(startIndex);\n\n        // Parse numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // Parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // Parse '/'\n        c = parseNextCharacter(source, pos);\n        if (c != '/') {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(pos.getIndex() - 1);\n            return null;\n        }\n\n        // Parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // Parse denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(pos.getIndex());\n            return null;\n        }\n\n        // Check for minus signs in numerator or denominator\n        if (num.intValue() < 0 || den.intValue() < 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(pos.getIndex());\n            return null;\n        }\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n    } else if (Character.isWhitespace(c)) {\n        // If there's whitespace after whole number, parse numerator and denominator\n        // Reset position to before the whitespace\n        pos.setIndex(startIndex);\n\n        // Parse numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // Parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // Parse '/'\n        c = parseNextCharacter(source, pos);\n        if (c != '/') {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(pos.getIndex() - 1);\n            return null;\n        }\n\n        // Parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // Parse denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(pos.getIndex());\n            return null;\n        }\n\n        // Check for minus signs in numerator or denominator\n        if (num.intValue() < 0 || den.intValue() < 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(pos.getIndex());\n            return null;\n        }\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n    } else {\n        // If no '/', treat whole number as fraction\n        return new Fraction(whole.intValue(), 1);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}