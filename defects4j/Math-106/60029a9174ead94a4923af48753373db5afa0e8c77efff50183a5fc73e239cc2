{
    "generation": "    public Fraction parse(String source, ParsePosition pos) {\n        // ...\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // Invalid integer number\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        if (pos.getIndex() < source.length() && source.charAt(pos.getIndex()) == '-') {\n            // Invalid minus sign\n            throw new ParseException(\"invalid minus in improper fraction.\", pos.getIndex());\n        }\n\n        // ...\n        // parse numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // Invalid integer number\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Minus sign should be leading\n        if (source.charAt(pos.getIndex() - num.toString().length() - 1) == '-') {\n            // Invalid minus sign\n            throw new ParseException(\"invalid minus in improper fraction.\", pos.getIndex() - num.toString().length() - 1);\n        }\n\n        // ...\n\n        // parse denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // Invalid integer number\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Minus sign must be leading\n        if (source.charAt(pos.getIndex() - den.toString().length() - 1) == '-') {\n            // Invalid minus sign\n            throw new ParseException(\"invalid minus in improper fraction.\", pos.getIndex() - den.toString().length() - 1);\n        }\n\n        // ...\n        // remainder of the function\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}