{
    "generation": "/**\n * Handles a goog.require call.\n */\nprivate void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null) {\n      // If the module is not provided, we check if it's a global module and update the providedNames before proceeding\n      String moduleName = getModuleNameFromNs(ns);\n      if (isGlobalModule(moduleName)) {\n        provided = new ProvidedName();\n        provided.isGlobal = true;\n        providedNames.put(ns, provided);\n      } else {\n        unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n        return;\n      }\n    }\n\n    if (!provided.isGlobal) {\n      JSModule providedModule = provided.explicitModule;\n\n      // This must be non-null, because there was an explicit provide.\n      Preconditions.checkNotNull(providedModule);\n\n      JSModule module = t.getModule();\n      if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName()));\n      }\n    }\n\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n\n    // Requires should be removed before further processing.\n    parent.detachFromParent();\n    compiler.reportCodeChange();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}