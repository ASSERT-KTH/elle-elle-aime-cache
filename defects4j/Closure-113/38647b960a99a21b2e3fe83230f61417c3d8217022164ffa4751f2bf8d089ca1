{
    "generation": "  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        JSModule providedModule = provided.explicitModule;\n\n        // We need to handle the case where providedModule is null.\n        // This could happen if there was an error during module creation.\n        if (providedModule == null) {\n          compiler.report(\n              t.makeError(n, MISSING_MODULE_ERROR, ns));\n        } else {\n          JSModule module = t.getModule();\n          if (moduleGraph != null &&\n              module != providedModule &&\n              !moduleGraph.dependsOn(module, providedModule)) {\n            compiler.report(\n                t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                    providedModule.getName(),\n                    module.getName()));\n          }\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed even if the providedModule is null.\n      if (provided != null && provided.isExplicitlyProvided()) {\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}