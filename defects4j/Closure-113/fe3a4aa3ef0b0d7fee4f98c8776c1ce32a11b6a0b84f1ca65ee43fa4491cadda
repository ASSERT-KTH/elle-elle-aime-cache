{
    "generation": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n        String ns = arg.getString();\n        ProvidedName provided = providedNames.get(ns);\n        if (provided == null || !provided.isExplicitlyProvided()) {\n            if (compiler.getJSModuleGraph() != null && compiler.getOptions().getProcessCommonJsModules()) {\n                // If closure pass is enabled and we're processing CommonJS modules,\n                // do not add to unrecognizedRequires.\n                // This allows requires to be preserved without being marked as unrecognized.\n            } else {\n                unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n            }\n        } else {\n            JSModule providedModule = provided.explicitModule;\n\n            // This must be non-null, because there was an explicit provide.\n            Preconditions.checkNotNull(providedModule);\n\n            JSModule module = t.getModule();\n            if (moduleGraph != null &&\n                    module != providedModule &&\n                    !moduleGraph.dependsOn(module, providedModule)) {\n                compiler.report(\n                        t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                                providedModule.getName(),\n                                module.getName()));\n            }\n        }\n\n        maybeAddToSymbolTable(left);\n        maybeAddStringNodeToSymbolTable(arg);\n\n        // Requires should be removed before further processing.\n        // Some clients run closure pass multiple times, first with\n        // the checks for broken requires turned off. In these cases, we\n        // allow broken requires to be preserved by the first run to\n        // let them be caught in the subsequent run.\n        if (provided != null) {\n            parent.detachFromParent();\n            compiler.reportCodeChange();\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}