{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Ensure there's at least one digit to parse\n    if (start >= end - 1) {\n        throw new IllegalArgumentException(\"No digits to parse\");\n    }\n\n    // Determine the end position by finding the first non-digit character from the end\n    int parseEnd = end - 1;\n    byte trailer = buffer[parseEnd];\n    while (parseEnd >= start && (trailer == ' ' || trailer == 0)) {\n        parseEnd--;\n        if (parseEnd < start) {\n            break;\n        }\n        trailer = buffer[parseEnd];\n    }\n\n    // Now parse the octal digits from start to parseEnd + 1\n    for (int i = start; i <= parseEnd; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // Check if there's a trailing space or NUL after the digits\n    if (parseEnd + 1 < end) {\n        trailer = buffer[parseEnd + 1];\n        if (trailer != ' ' && trailer != 0) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, parseEnd + 1, trailer));\n        }\n    } else {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}