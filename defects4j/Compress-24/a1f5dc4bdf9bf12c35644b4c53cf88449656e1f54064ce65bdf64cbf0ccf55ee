{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 1) {\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 1\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' ') {\n        end--;\n    } else if (trailer < '0' || trailer > '7') { // Check if the last non-trailing character is valid octal digit\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, trailer));\n    }\n    while (start < end - 1 && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    // The first check should be for the valid octal range after we have trimmed trailing spaces and NULs\n    final byte currentByte = buffer[start];\n    if (currentByte < '0' || currentByte > '7') {\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));\n    }\n    result = currentByte - '0'; // convert from ASCII\n    start++;\n\n    for ( ;start < end; start++) {\n        final byte byteValue = buffer[start];\n        if (byteValue < '0' || byteValue > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, byteValue));\n        }\n        result = (result << 3) + (byteValue - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}