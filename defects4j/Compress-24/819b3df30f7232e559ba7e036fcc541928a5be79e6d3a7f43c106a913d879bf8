{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Find the end of the octal number\n    int octalEnd = start;\n    while (octalEnd < end && buffer[octalEnd] >= '0' && buffer[octalEnd] <= '7') {\n        octalEnd++;\n    }\n\n    // Check for a valid trailing space or NUL\n    if (octalEnd < end && (buffer[octalEnd] == ' ' || buffer[octalEnd] == 0)) {\n        end = octalEnd + 1;\n    } else if (octalEnd == end) {\n        end = octalEnd;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, octalEnd, buffer[octalEnd]));\n    }\n\n    // Parse the octal number\n    for (int i = start; i < end && i < octalEnd; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}