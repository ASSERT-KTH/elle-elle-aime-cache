{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    int lastNonSpace = end - 1;\n    while (lastNonSpace >= start && (buffer[lastNonSpace] == 0 || buffer[lastNonSpace] == ' ')) {\n        lastNonSpace--;\n    }\n\n    // Check if we have a valid octal number\n    int octalEnd = Math.min(start + 11, lastNonSpace + 1); // Maximum of 11 octal digits\n    for (int i = start; i < octalEnd; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // Check for trailing space or NUL\n    if (octalEnd <= lastNonSpace) {\n        for (int i = octalEnd; i <= lastNonSpace; i++) {\n            if (buffer[i] != ' ' && buffer[i] != 0) {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, buffer[i]));\n            }\n        }\n    } else if (octalEnd > lastNonSpace && octalEnd < end) {\n        // If we reached the maximum number of octal digits but there are more non-space/NUL characters\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, octalEnd, buffer[octalEnd]));\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}