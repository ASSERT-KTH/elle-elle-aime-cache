{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long result = 0;\n        int end = offset + length;\n        int start = offset;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end) {\n            if (buffer[start] == ' ') {\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Find the end of the octal number, ignoring trailing non-octal bytes up to the provided length\n        int octalEnd = start;\n        while (octalEnd < end) {\n            byte currentByte = buffer[octalEnd];\n            if (currentByte < '0' || currentByte > '7') {\n                break;\n            }\n            octalEnd++;\n        }\n\n        // Parse the octal number\n        for (int i = start; i < octalEnd; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        // Check if there's a trailing space or NUL\n        if (octalEnd < end) {\n            byte trailer = buffer[octalEnd];\n            if (trailer != 0 && trailer != ' ') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, octalEnd, trailer));\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}