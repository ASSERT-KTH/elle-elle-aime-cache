{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Find the end of the octal digits, stopping at the first invalid character\n    int actualEnd = end;\n    while (actualEnd > start) {\n        byte trailer = buffer[actualEnd - 1];\n        if (trailer == 0 || trailer == ' ') {\n            actualEnd--;\n        } else if (trailer < '0' || trailer > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, actualEnd - 1, trailer));\n        } else {\n            break;\n        }\n    }\n\n    for ( ;start < actualEnd; start++) {\n        final byte currentByte = buffer[start];\n        // CheckStyle:MagicNumber OFF\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        // CheckStyle:MagicNumber ON\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}