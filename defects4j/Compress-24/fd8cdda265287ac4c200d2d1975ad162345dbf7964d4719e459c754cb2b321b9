{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' '){\n        end--;\n    }\n    trailer = buffer[end - 1];\n    while (start < end - 1 && (trailer == 0 || trailer == ' ')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n\n    boolean overflow = false;\n    for ( ;start <= end; start++) {\n        final byte currentByte = buffer[start];\n        // CheckStyle:MagicNumber OFF\n        if (currentByte < '0' || currentByte > '7'){\n            break;\n        }\n        // overflow check\n        long nextValue = (result << 3) + (currentByte - '0');\n        if (nextValue < 0) {\n            overflow = true;\n            break;\n        }\n        result = nextValue;\n        // CheckStyle:MagicNumber ON\n    }\n\n    while (start < end){\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        start++;\n    }\n\n    if(overflow){\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end, (byte)(result & 0xff)));\n    }\n\n    if (end < offset+length-1) { // if we have at least one trailing space or NULL\n        return result; // return value is one digit shorter than length of target buffer\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}