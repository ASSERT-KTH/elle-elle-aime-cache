{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    // Note! Should not skip if `property` null since that'd skip check\n    // for config overrides, in case of root value\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // First: custom pattern will override things\n    if (format.hasPattern()) {\n        final Locale loc = format.hasLocale()\n                ? format.getLocale()\n                : serializers.getLocale();\n        String pattern = format.getPattern().replaceAll(\"\\\\\\\\S\", \"\"); // Remove milliseconds from pattern\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    // Continue with the rest of the method...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}