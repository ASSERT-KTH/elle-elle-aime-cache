{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    if (format.getShape().isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    if (format.hasPattern()) {\n        final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n        final TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();\n        DateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = (format.getShape() == JsonFormat.Shape.STRING);\n\n    if (!hasLocale && !hasTZ && !asString) {\n        return this;\n    }\n\n    DateFormat df0 = serializers.getConfig().getDateFormat();\n\n    // This condition is necessary because we can only modify SimpleDateFormat\n    if (df0 instanceof SimpleDateFormat) {\n        SimpleDateFormat df = (SimpleDateFormat) df0.clone();\n        if (hasLocale) {\n            df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n        }\n        if (hasTZ) {\n            df.setTimeZone(format.getTimeZone());\n        }\n        return withFormat(Boolean.FALSE, df);\n    } else {\n        serializers.reportBadDefinition(handledType(), String.format(\n                \"Unsupported DateFormat type: %s. Only SimpleDateFormat is supported for customizing Locale and TimeZone.\",\n                df0.getClass().getName()));\n        return this; // Let's fallback to default serialization\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}