{
    "generation": "public static Number createNumber(String val) throws NumberFormatException {\n    if (val == null) {\n        return null;\n    }\n    if (val.length() == 0) {\n        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n    }\n    if (val.startsWith(\"--\")) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        return null;\n    }\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    }\n    int lastPos = val.length() - 1;\n    char lastChar = val.charAt(lastPos);\n    if (!Character.isDigit(lastChar)) {\n        String numeric = val.substring(0, lastPos);\n        switch (lastChar) {\n            case 'l': case 'L':\n                if (isDigits(numeric)) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        return createBigInteger(numeric);\n                    }\n                }\n                break;\n            case 'f': case 'F':\n                try {\n                    return createFloat(numeric);\n                } catch (NumberFormatException nfe) {\n                    // Fall through\n                }\n            case 'd': case 'D':\n                try {\n                    return createDouble(numeric);\n                } catch (NumberFormatException nfe) {\n                    // Fall through\n                }\n                break;\n            default:\n                break;\n        }\n    } else {\n        if (val.indexOf('.') >= 0 || val.indexOf('e') >= 0 || val.indexOf('E') >= 0) {\n            try {\n                return createFloat(val);\n            } catch (NumberFormatException nfe) {\n                // Not a valid float, try Double\n            }\n            try {\n                return createDouble(val);\n            } catch (NumberFormatException nfe) {\n                // Not a valid double, try BigDecimal\n            }\n            return createBigDecimal(val);\n        } else {\n            try {\n                return createInteger(val);\n            } catch (NumberFormatException nfe) {\n                // Not a valid integer, try Long\n            }\n            try {\n                return createLong(val);\n            } catch (NumberFormatException nfe) {\n                // Not a valid long, try BigInteger\n            }\n            return createBigInteger(val);\n        }\n    }\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}