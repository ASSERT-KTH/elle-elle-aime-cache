{
    "generation": "public static Number createNumber(String val) throws NumberFormatException {\n    if (val == null || val.length() == 0) {\n        throw new NumberFormatException(\"Invalid number format\");\n    }\n\n    if (val.startsWith(\"--\")) {\n        return null;\n    }\n\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    }\n\n    char lastChar = val.charAt(val.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = val.indexOf('.');\n    int expPos = val.toLowerCase().indexOf('e') + 1;\n\n    if (decPos > -1) {\n        if (expPos > -1 && expPos < decPos) {\n            throw new NumberFormatException(\"Invalid number format\");\n        }\n        dec = expPos > -1 ? val.substring(decPos + 1, expPos) : val.substring(decPos + 1);\n        mant = val.substring(0, decPos);\n    } else {\n        mant = expPos > -1 ? val.substring(0, expPos) : val;\n        dec = null;\n    }\n\n    if (!Character.isDigit(lastChar)) {\n        if (expPos > -1 && expPos < val.length() - 1) {\n            exp = val.substring(expPos + 1, val.length() - 1);\n        } else {\n            exp = null;\n        }\n        String numeric = val.substring(0, val.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null && exp == null && numeric.matches(\"-?\\\\d+\")) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        return createBigInteger(numeric);\n                    }\n                }\n                throw new NumberFormatException(\"Invalid number format\");\n\n            // Other cases...\n        }\n    } else {\n        // Handling for values without a type qualifier\n        if (expPos > -1 && expPos < val.length() - 1) {\n            exp = val.substring(expPos + 1, val.length());\n        } else {\n            exp = null;\n        }\n\n        if (dec == null && exp == null) {\n            try {\n                return createInteger(val);\n            } catch (NumberFormatException nfe1) {\n                try {\n                    return createLong(val);\n                } catch (NumberFormatException nfe2) {\n                    return createBigInteger(val);\n                }\n            }\n        } else {\n            // Code for handling floating-point numbers...\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}