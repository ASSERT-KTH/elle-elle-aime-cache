{
    "generation": "public static Number createNumber(String val) throws NumberFormatException {\n    if (val == null || val.length() == 0) {\n        throw new NumberFormatException(\"The input is not a valid number.\");\n    }\n\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    }\n\n    char lastChar = val.charAt(val.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = val.indexOf('.');\n    int expPos = Math.max(val.indexOf('e'), val.indexOf('E'));\n\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            dec = val.substring(decPos + 1, expPos);\n        } else {\n            dec = val.substring(decPos + 1);\n        }\n        mant = val.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = val.substring(0, expPos);\n        } else {\n            mant = val;\n        }\n        dec = null;\n    }\n\n    if (!Character.isDigit(lastChar)) {\n        if (expPos > -1 && expPos < val.length() - 1) {\n            exp = val.substring(expPos + 1, val.length() - 1);\n        } else {\n            exp = null;\n        }\n\n        String numeric = val.substring(0, val.length() - 1);\n\n        switch (lastChar) {\n            // Case for 'l' and 'L' are not shown for brevity\n            // ...\n\n            default :\n                throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n    } else {\n        // Case for when the last character is a digit\n        // ...\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}