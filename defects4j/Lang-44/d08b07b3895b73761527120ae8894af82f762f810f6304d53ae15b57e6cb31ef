{
    "generation": "public static Number createNumber(String val) throws NumberFormatException {\n    if (val == null) {\n        return null;\n    }\n    if (val.length() == 0) {\n        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n    }\n    if (val.startsWith(\"--\")) {\n        return null;\n    }\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    }\n    char lastChar = val.charAt(val.length() - 1);\n    if (Character.isLetter(lastChar) && val.length() > 1) {\n        val = val.substring(0, val.length() - 1); // Remove the type specifier\n    }\n    String mant;\n    String dec;\n    String exp;\n    int decPos = val.indexOf('.');\n    int expPos = val.indexOf('e') != -1 ? val.indexOf('e') : val.indexOf('E');\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            dec = val.substring(decPos + 1, expPos);\n        } else {\n            dec = val.substring(decPos + 1);\n        }\n        mant = val.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = val.substring(0, expPos);\n        } else {\n            mant = val;\n        }\n        dec = null;\n    }\n    if (expPos > -1 && expPos < val.length() - 1) {\n        exp = val.substring(expPos + 1, val.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) {\n        try {\n            return createInteger(val);\n        } catch (NumberFormatException nfe) {\n            // Ignore\n        }\n        try {\n            return createLong(val);\n        } catch (NumberFormatException nfe) {\n            // Ignore\n        }\n        return createBigInteger(val);\n    } else {\n        try {\n            Float f = createFloat(val);\n            return f;\n        } catch (NumberFormatException nfe) {\n            // Ignore\n        }\n        try {\n            Double d = createDouble(val);\n            return d;\n        } catch (NumberFormatException nfe) {\n            // Ignore\n        }\n        return createBigDecimal(val);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}