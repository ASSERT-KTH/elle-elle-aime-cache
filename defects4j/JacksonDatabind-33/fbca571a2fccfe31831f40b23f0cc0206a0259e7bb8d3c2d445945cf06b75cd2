{
    "generation": "    @Override\n    public PropertyName findNameForSerialization(Annotated a)\n    {\n        String name = null;\n\n        JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n        if (jg != null) {\n            name = jg.value();\n        } else {\n            JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n            if (pann != null) {\n                name = pann.value();\n            } else if (_hasAnnotation(a, JsonSerialize.class)\n                    || _hasAnnotation(a, JsonView.class)\n                    || _hasAnnotation(a, JsonRawValue.class)) {\n                name = \"\";\n            } else {\n                // Check for JsonUnwrapped annotation\n                if (_hasAnnotation(a, JsonUnwrapped.class)) {\n                    JsonUnwrapped unwrapped = _findAnnotation(a, JsonUnwrapped.class);\n                    if (unwrapped != null && !unwrapped.enabled()) {\n                        return null;\n                    }\n                    // If JsonUnwrapped is enabled, we should treat it as if it has a name\n                    name = \"\";\n                } else {\n                    return null;\n                }\n            }\n        }\n        return PropertyName.construct(name);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}