{
    "generation": "/**\n * Computes the square-root of the weight matrix.\n * \n * @param m Symmetric, positive-definite (weight) matrix.\n * @return the square-root of the weight matrix.\n */\nprivate RealMatrix squareRoot(RealMatrix m) {\n    // Check if matrix is identity to avoid unnecessary decomposition\n    if (isIdentity(m)) {\n        return m;\n    }\n    \n    final EigenDecomposition dec = new EigenDecomposition(m);\n    if (dec.hasPositiveSemidefiniteSymmetricMatrix()) {\n        RealVector sqrtEigenValues = dec.getRealEigenvalues().map(e -> Math.sqrt(e));\n        RealMatrix sqrtEigenVectorMatrix = dec.getV();\n        return sqrtEigenVectorMatrix.multiply(DiagonalMatrix.of(sqrtEigenValues)).multiply(sqrtEigenVectorMatrix.transpose());\n    } else {\n        throw new IllegalStateException(\"Input matrix is not positive-definite\");\n    }\n}\n\n// Helper method to check if a matrix is identity\nprivate boolean isIdentity(RealMatrix m) {\n    int rows = m.getRowDimension();\n    int cols = m.getColumnDimension();\n    if (rows!= cols) {\n        return false;\n    }\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if (i == j && m.getEntry(i, j)!= 1) {\n                return false;\n            } else if (i!= j && m.getEntry(i, j)!= 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}