{
    "generation": "@Test\npublic void testLargeSample() {\n    Random randomizer = new Random(0x5551480dca5b369bl);\n    double maxError = 0;\n    for (int degree = 0; degree < 10; ++degree) {\n        PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n\n        PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\n        \n        // Use a subsample of the data for fitting to reduce memory usage\n        int numSamples = 40000;\n        int numSubsamples = 4000; // Adjust this number based on memory constraints\n        for (int i = 0; i < numSubsamples; ++i) {\n            int index = randomizer.nextInt(numSamples);\n            double x = -1.0 + index / 20000.0;\n            double y = p.value(x) + 0.1 * randomizer.nextGaussian();\n            fitter.addObservedPoint(1.0, x, y);\n        }\n\n        final double[] init = new double[degree + 1];\n        PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n\n        for (double x = -1.0; x < 1.0; x += 0.01) {\n            double error = FastMath.abs(p.value(x) - fitted.value(x)) /\n                           (1.0 + FastMath.abs(p.value(x)));\n            maxError = FastMath.max(maxError, error);\n            Assert.assertTrue(FastMath.abs(error) < 0.01);\n        }\n    }\n    Assert.assertTrue(maxError > 0.001);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}