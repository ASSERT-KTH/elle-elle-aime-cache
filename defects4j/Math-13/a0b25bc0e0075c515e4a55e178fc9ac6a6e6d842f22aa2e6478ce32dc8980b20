{
    "generation": "    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n        if (m == null || m.getRowDimension() != m.getColumnDimension()) {\n            throw new IllegalArgumentException(\"Matrix must be square and non-null.\");\n        }\n\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        \n        // Verify positive definiteness\n        for (double eigenvalue : dec.getRealEigenvalues()) {\n            if (eigenvalue <= 0) {\n                throw new IllegalArgumentException(\"Matrix is not positive definite.\");\n            }\n        }\n\n        // Compute the square root matrix\n        RealMatrix sqrtMatrix = dec.getV().multiply(diagSqrt(dec.getRealEigenvalues())).multiply(dec.getVT());\n        return sqrtMatrix;\n    }\n\n    /**\n     * Creates a diagonal matrix with square roots of input eigenvalues.\n     *\n     * @param eigenvalues Eigenvalues of the matrix.\n     * @return Diagonal matrix with square roots of eigenvalues.\n     */\n    private RealMatrix diagSqrt(double[] eigenvalues) {\n        int n = eigenvalues.length;\n        RealMatrix diagMatrix = MatrixUtils.createRealDiagonalMatrix(new double[n]);\n        for (int i = 0; i < n; i++) {\n            diagMatrix.setEntry(i, i, Math.sqrt(eigenvalues[i]));\n        }\n        return diagMatrix;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}