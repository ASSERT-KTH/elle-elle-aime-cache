{
    "generation": "    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     * @throws IllegalArgumentException if the matrix is not symmetric or positive-definite.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n        if (!m.isSquare()) {\n            throw new IllegalArgumentException(\"Matrix is not square.\");\n        }\n\n        // Verify symmetry and positive-definiteness\n        for (int i = 0; i < m.getRowDimension(); i++) {\n            for (int j = i + 1; j < m.getColumnDimension(); j++) {\n                if (m.getEntry(i, j) != m.getEntry(j, i)) {\n                    throw new IllegalArgumentException(\"Matrix is not symmetric.\");\n                }\n            }\n        }\n\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        if (!isPositiveDefinite(dec)) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite.\");\n        }\n\n        return dec.getSquareRoot();\n    }\n\n    /**\n     * Checks if the matrix is positive definite based on its eigenvalues.\n     *\n     * @param dec the EigenDecomposition of the matrix\n     * @return true if the matrix is positive definite, false otherwise.\n     */\n    private boolean isPositiveDefinite(EigenDecomposition dec) {\n        double[] eigenvalues = dec.getRealEigenvalues();\n        for (double eigenvalue : eigenvalues) {\n            if (eigenvalue <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}