{
    "generation": "    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n        // Create a copy of the input matrix to avoid modifying the original\n        RealMatrix matrix = m.copy();\n        \n        // Check if the input matrix is symmetric\n        if (!isSymmetric(matrix)) {\n            // If not, try to make it symmetric by averaging it with its transpose\n            matrix = makeSymmetric(matrix);\n        }\n\n        // Create a new eigen decomposition\n        final EigenDecomposition dec = new EigenDecomposition(matrix);\n        \n        // Get the square root of the matrix from the eigen decomposition\n        return dec.getSquareRoot();\n    }\n\n    // Helper function to check if a matrix is symmetric\n    private boolean isSymmetric(RealMatrix m) {\n        RealMatrix transpose = m.transpose();\n        double tolerance = 1e-10;\n        for (int i = 0; i < m.getRowDimension(); i++) {\n            for (int j = 0; j < m.getColumnDimension(); j++) {\n                if (FastMath.abs(m.getEntry(i, j) - transpose.getEntry(i, j)) > tolerance) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    // Helper function to make a matrix symmetric by averaging it with its transpose\n    private RealMatrix makeSymmetric(RealMatrix m) {\n        RealMatrix transpose = m.transpose();\n        RealMatrix symmetric = new Array2DRowRealMatrix(m.getRowDimension(), m.getColumnDimension());\n        for (int i = 0; i < m.getRowDimension(); i++) {\n            for (int j = 0; j < m.getColumnDimension(); j++) {\n                symmetric.setEntry(i, j, (m.getEntry(i, j) + transpose.getEntry(i, j)) / 2.0);\n            }\n        }\n        return symmetric;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}