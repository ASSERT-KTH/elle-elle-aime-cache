{
    "generation": "/**\n * Computes the square-root of the weight matrix.\n *\n * @param m Symmetric, positive-definite (weight) matrix.\n * @return the square-root of the weight matrix.\n */\nprivate RealMatrix squareRoot(RealMatrix m) {\n    // Compute Schur decomposition\n    SchurTransformer schur = new SchurTransformer(m);\n    \n    // Get the T matrix from Schur decomposition\n    RealMatrix T = schur.getT();\n    \n    // Compute the principal square root of T\n    RealMatrix sqrtT = computePrincipalSqrt(T);\n    \n    // Compute U matrix from Schur decomposition\n    RealMatrix U = schur.getU();\n    \n    // Compute the square root of the original matrix\n    return U.multiply(sqrtT).multiply(U.transpose());\n}\n\n/**\n * Computes the principal square root of a triangular matrix.\n *\n * @param T Upper triangular matrix.\n * @return The principal square root of T.\n */\nprivate RealMatrix computePrincipalSqrt(RealMatrix T) {\n    int n = T.getRowDimension();\n    RealMatrix sqrtT = MatrixUtils.createRealMatrix(n, n);\n    \n    for (int j = n - 1; j >= 0; j--) {\n        sqrtT.setEntry(j, j, FastMath.sqrt(T.getEntry(j, j)));\n        \n        for (int i = j - 1; i >= 0; i--) {\n            double sum = 0.0;\n            for (int k = i + 1; k <= j; k++) {\n                sum += sqrtT.getEntry(i, k) * sqrtT.getEntry(k, j);\n            }\n            sqrtT.setEntry(i, j, (T.getEntry(i, j) - sum) / (sqrtT.getEntry(i, i) + sqrtT.getEntry(j, j)));\n        }\n    }\n    \n    return sqrtT;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}