{
    "generation": "/**\n * Computes the square-root of the weight matrix.\n *\n * @param m Symmetric, positive-definite (weight) matrix.\n * @return the square-root of the weight matrix.\n */\nprivate RealMatrix squareRoot(RealMatrix m) {\n    // Check if the input matrix is symmetric and positive-definite\n    if (!isSymmetric(m) || !isPositiveDefinite(m)) {\n        throw new IllegalArgumentException(\"Matrix must be symmetric and positive-definite.\");\n    }\n    \n    final EigenDecomposition dec = new EigenDecomposition(m);\n    return dec.getSquareRoot();\n}\n\n/**\n * Checks if a matrix is symmetric.\n *\n * @param m Matrix to check.\n * @return true if the matrix is symmetric, false otherwise.\n */\nprivate boolean isSymmetric(RealMatrix m) {\n    int n = m.getRowDimension();\n    if (n != m.getColumnDimension()) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (m.getEntry(i, j) != m.getEntry(j, i)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n/**\n * Checks if a matrix is positive-definite.\n *\n * @param m Matrix to check.\n * @return true if the matrix is positive-definite, false otherwise.\n */\nprivate boolean isPositiveDefinite(RealMatrix m) {\n    try {\n        // Attempt to compute the Cholesky decomposition\n        new CholeskyDecomposition(m);\n        return true;\n    } catch (Exception e) {\n        return false;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}