{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected UnivariatePointValuePair doOptimize() {\n        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;\n        final double lo = getMin();\n        final double mid = getStartValue();\n        final double hi = getMax();\n\n        // Optional additional convergence criteria.\n        final ConvergenceChecker<UnivariatePointValuePair> checker\n            = getConvergenceChecker();\n\n        double a;\n        double b;\n        if (lo < hi) {\n            a = lo;\n            b = hi;\n        } else {\n            a = hi;\n            b = lo;\n        }\n\n        double x = mid;\n        double v = w = x;\n        double fx = computeObjectiveValue(x);\n        double fw = fx;\n\n        if (!isMinim) {\n            fx = -fx;\n            fw = -fw;\n        }\n        double fv = fw;\n\n        UnivariatePointValuePair previous = null;\n        UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n\n        int iter = 0;\n        while (true) {\n            final double m = 0.5 * (a + b);\n            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;\n            final double tol2 = 2 * tol1;\n\n            // Default stopping criterion.\n            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);\n            if (stop) {\n                return current;\n            }\n\n            double p, q, r, u;\n\n            if (FastMath.abs(e) > tol1) { // Fit parabola.\n                r = (x - w) * (fx - fv);\n                q = (x - v) * (fx - fw);\n                p = (x - v) * q - (x - w) * r;\n                q = 2 * (q - r);\n\n                if (q > 0) {\n                    p = -p;\n                } else {\n                    q = -q;\n                }\n\n                r = e;\n                e = d;\n\n                if (FastMath.abs(p) < FastMath.abs(0.5 * q * r) &&\n                    p > q * (a - x) &&\n                    p < q * (b - x)) {\n                    // Parabolic interpolation step.\n                    d = p / q;\n                    u = x + d;\n\n                    // f must not be evaluated too close to a or b.\n                    if ((u - a < tol2) || (b - u < tol2)) {\n                        d = (x >= m) ? tol1 : -tol1;\n                    }\n                } else {\n                    // Golden section step.\n                    if (x < m) {\n                        e = b - x;\n                    } else {\n                        e = a - x;\n                    }\n                    d = GOLDEN_SECTION * e;\n                }\n            } else {\n                // Golden section step.\n                if (x < m) {\n                    e = b - x;\n                } else {\n                    e = a - x;\n                }\n                d = GOLDEN_SECTION * e;\n            }\n\n            // Minimum step size of tol1.\n            if (FastMath.abs(d) < tol1) {\n                d = (d > 0) ? tol1 : -tol1;\n            }\n\n            u = x + d;\n\n            double fu = computeObjectiveValue(u);\n            if (!isMinim) {\n                fu = -fu;\n            }\n\n            // User-defined convergence checker.\n            previous = current;\n            current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\n\n            if (checker != null) {\n                if (checker.converged(iter, previous, current)) {\n                    return current;\n                }\n            }\n\n            // Update a, b, v, w and x.\n            if (fu <= fx) {\n                if (u < x) {\n                    b = x;\n                } else {\n                    a = x;\n                }\n                v = w;\n                w = x;\n                x = u;\n                fv = fw;\n                fw = fx;\n                fx = fu;\n            } else {\n                if (u < x) {\n                    a = u;\n                } else {\n                    b = u;\n                }\n                if ((fu <= fw) || (Precision.equals(w, x))) {\n                    v = w;\n                    w = u;\n                    fv = fw;\n                    fw = fu;\n                } else if ((fu <= fv) || (Precision.equals(v, x)) || (Precision.equals(v, w))) {\n                    v = u;\n                    fv = fu;\n                }\n            }\n\n            ++iter;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}