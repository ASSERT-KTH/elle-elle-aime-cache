{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // Ensure that subclass is actually a subclass of _class\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                +_class.getName());\n    }\n    // Use similar bindings or resolve new ones if necessary\n    TypeBindings newBindings = _bindings;\n    if (newBindings == null || newBindings.isEmpty()) {\n        newBindings = TypeBindings.emptyBindings();\n    }\n\n    // Create a new SimpleType with resolved subclass\n    return new SimpleType(subclass, newBindings, _superClass, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}