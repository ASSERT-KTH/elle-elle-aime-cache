{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n\n        // 26-Mar-2019, tatu: As per [databind#1083], MUST retain existing\n        //    type bindings. Related to fixing that, MUST actually re-resolve\n        //    bindings if subclass is abstract (due to refinement limitations)\n        TypeFactory tf = _typeFactory;\n        if (tf == null) { // shouldn't happen, but just in case\n            tf = TypeFactory.defaultTypeFactory();\n        }\n        JavaType newType = tf.constructSpecializedType(this, subclass);\n        return newType;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}