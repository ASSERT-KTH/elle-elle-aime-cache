{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n    // FIX: Added isAssignableFrom check to ensure sub-class relationship\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not sub-type of \"\n                + _class.getName());\n    }\n    // FIX: Re-resolve bindings and other dependencies to ensure correctness\n    JavaType newType = TypeFactory.defaultInstance().constructSimpleType(subclass, \n            _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n    return newType;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}