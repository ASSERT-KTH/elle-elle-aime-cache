{
    "generation": "    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values, so no.\n        /*\n        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n                _valueHandler, _typeHandler, _asStatic) {\n            @Override\n            public JavaType withTypeHandler(Object h) {\n                return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n                        _valueHandler, h, _asStatic);\n            }\n\n            @Override\n            public JavaType withContentTypeHandler(Object h) {\n                return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n                        _valueHandler, _typeHandler, _asStatic);\n            }\n\n            @Override\n            public JavaType withValueHandler(Object h) {\n                return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n                        h, _typeHandler, _asStatic);\n            }\n\n            @Override\n            public JavaType withContentValueHandler(Object h) {\n                return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n                        _valueHandler, _typeHandler, _asStatic);\n            }\n\n            @Override\n            public JavaType withStaticTyping() {\n                return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n                        _valueHandler, _typeHandler, true);\n            }\n\n            @Override\n            protected String buildCanonicalName() {\n                return subclass.getName();\n            }\n\n            @Override\n            public boolean isContainerType() {\n                return false;\n            }\n\n            @Override\n            public StringBuilder getGenericSignature(StringBuilder sb) {\n                return _classSignature(subclass, sb, false);\n            }\n\n            @Override\n            public StringBuilder getErasedSignature(StringBuilder sb) {\n                return _classSignature(subclass, sb, true);\n            }\n        };\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}