{
    "generation": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // Check for sub-class relationship to prevent incorrect type narrowing\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                +_class.getName());\n    }\n    // Re-resolve type with updated class, maintaining existing type bindings and handlers\n    return TypeFactory.defaultInstance().constructSpecializedType(this, subclass)\n           .withTypeHandler(_typeHandler)\n           .withValueHandler(_valueHandler)\n           .asStatic(_asStatic);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}