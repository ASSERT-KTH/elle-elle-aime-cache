{
    "generation": "if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n    String timezoneOffset = date.substring(offset);\n\n    // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00\n\n    offset += timezoneOffset.length();\n    // 18-Jun-2015, tatu: Minor simplification, skip offset of \"+0000\"/\"+00:00\"\n    if (\"+0000\".equals(timezoneOffset) || \"+00:00\".equals(timezoneOffset)) {\n        timezone = TIMEZONE_UTC;\n    } else {\n        // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...\n        //    not sure why, but that's the way it looks. Further, Javadocs for\n        //    `java.util.TimeZone` specifically instruct use of GMT as base for\n        //    custom timezones... odd.\n        String timezoneId = \"GMT\" + timezoneOffset;\n        // String timezoneId = \"UTC\" + timezoneOffset;\n\n        timezone = TimeZone.getTimeZone(timezoneId);\n\n        String act = timezone.getID();\n        if (!act.equals(timezoneId)) {\n            /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given\n             *    one without. If so, don't sweat.\n             *   Yes, very inefficient. Hopefully not hit often.\n             *   If it becomes a perf problem, add 'loose' comparison instead.\n             */\n            String cleaned = act.replace(\":\", \"\");\n            if (!cleaned.equals(timezoneId)) {\n                throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \"+timezoneId+\" given, resolves to \"\n                        +timezone.getID());\n            }\n        }\n    }\n} else {\n    throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator+\"'\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}