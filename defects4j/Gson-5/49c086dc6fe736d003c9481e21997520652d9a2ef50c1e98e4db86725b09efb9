{
    "generation": "/**\n * Parse a date from ISO-8601 formatted string. It expects a format\n * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]\n *\n * @param date ISO string to parse in the appropriate format.\n * @param pos The position to start parsing from, updated to where parsing stopped.\n * @return the parsed date\n * @throws ParseException if the date is not in the appropriate format\n */\npublic static Date parse(String date, ParsePosition pos) throws ParseException {\n    // ... The rest of the code remains the same as it is already correct.\n\n    // extract timezone\n    if (date.length() <= offset) {\n        throw new IllegalArgumentException(\"No time zone indicator\");\n    }\n\n    TimeZone timezone = null;\n    char timezoneIndicator = date.charAt(offset);\n\n    if (timezoneIndicator == 'Z') {\n        timezone = TIMEZONE_UTC;\n        offset += 1;\n    } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n        int endOfHour = offset + 3;\n        if (date.length() > endOfHour && date.charAt(endOfHour) == ':') {\n            endOfHour += 3;\n        }\n        String timezoneOffset = date.substring(offset, endOfHour);\n\n        offset += timezoneOffset.length();\n        String timezoneId = \"GMT\" + timezoneOffset;\n        timezone = TimeZone.getTimeZone(timezoneId);\n\n        String act = timezone.getID();\n        if (!act.equals(timezoneId)) {\n            String cleaned = act.replace(\":\", \"\");\n            if (!cleaned.equals(timezoneId)) {\n                throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \"+timezoneId+\" given, resolves to \"\n                                    +timezone.getID());\n            }\n        }\n    } else {\n        throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator+\"'\");\n    }\n\n    // ... The rest of the code remains the same as it is already correct.\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}