{
    "generation": "/**\n * Returns the percentage of values that are equal to v\n * (as a proportion between 0 and 1).\n * <p>\n * Returns <code>Double.NaN</code> if no values have been added.</p>\n *\n * @param v the value to lookup\n * @return the proportion of values equal to v\n * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n */\n@Deprecated\npublic double getPct(Object v) {\n    return getCumPct((Comparable<?>) v) - getCumPctLessThan((Comparable<?>) v);\n}\n\n// If getCumPctLessThan method does not exist, it can be implemented like this:\nprivate double getCumPctLessThan(Comparable<?> v) {\n    int index = findIndex((Comparable<?>) v);\n    return (index < 0)? 0.0d : (index / (double) getSumFreq());\n}\n\nprivate int findIndex(Comparable<?> v) {\n    // Implementation depends on your internal data structure\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}