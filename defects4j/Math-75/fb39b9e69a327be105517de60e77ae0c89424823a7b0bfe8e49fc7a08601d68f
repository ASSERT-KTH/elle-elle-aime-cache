{
    "generation": "public double getPct(Object v) {\n    if (v instanceof Comparable) {\n        return getCumPct((Comparable<?>) v) - getCumPct(decrement((Comparable<?>) v));\n    } else {\n        throw new IllegalArgumentException(\"Input object is not Comparable\");\n    }\n}\n\nprivate Comparable<?> decrement(Comparable<?> v) {\n    if (v instanceof Integer) {\n        return ((Integer) v) - 1;\n    } else if (v instanceof Long) {\n        return ((Long) v) - 1;\n    } else if (v instanceof Double) {\n        return ((Double) v) - 1;\n    } else if (v instanceof Float) {\n        return ((Float) v) - 1;\n    } else {\n        throw new IllegalArgumentException(\"Unsupported type for decrement\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}