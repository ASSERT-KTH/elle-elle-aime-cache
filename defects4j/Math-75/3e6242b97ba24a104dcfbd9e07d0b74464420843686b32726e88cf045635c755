{
    "generation": "/**\n * Returns the percentage of values that are equal to v\n * (as a proportion between 0 and 1).\n * <p>\n * Returns <code>Double.NaN</code> if no values have been added.</p>\n *\n * @param v the value to lookup\n * @return the proportion of values equal to v\n * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n */\n@Deprecated\npublic double getPct(Object v) {\n    if (v instanceof Comparable) {\n        return getRawPct((Comparable<?>) v);\n    } else {\n        double totalCount = getCount();\n        if (Double.isNaN(totalCount)) {\n            return Double.NaN;\n        }\n        long matchingCount = getValues().stream()\n               .filter(val -> val.equals(v))\n               .count();\n        return matchingCount / totalCount;\n    }\n}\n\n// Assuming getRawPct and other methods (getCount, getValues) are already defined elsewhere in the class",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}