{
    "generation": "/**\n  * Returns the percentage of values that are equal to v\n * (as a proportion between 0 and 1).\n * <p>\n * Returns <code>Double.NaN</code> if no values have been added.</p>\n *\n * @param v the value to lookup\n * @return the proportion of values equal to v\n * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n */\n@Deprecated\npublic double getPct(Object v) {\n    if (!(v instanceof Comparable)) {\n        return 0d; // or throw a meaningful exception\n    }\n    return getCumPct((Comparable<?>) v) - getCumPct(getPreviousValue(v));\n}\n\n// Helper function to get the previous comparable value\nprivate Comparable getPreviousValue(Object v) {\n    // Assuming existing method getUniqueSet() or getSortedSet() and implementing previous value logic on that\n    SortedSet set = getSortedSet(); // or get existing values in sorted order\n    \n    Comparable prevValue = null;\n    for(Comparable comparable : set ) {\n        if(comparable.compareTo( v ) >=  0 ) {\n            if (prevValue!=  null) {\n                break;\n            }\n        }\n        prevValue = (Comparable)comparable;\n   }\n   return prevValue;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}