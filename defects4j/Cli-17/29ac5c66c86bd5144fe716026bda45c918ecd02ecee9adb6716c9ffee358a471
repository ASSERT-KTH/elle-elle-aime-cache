{
    "generation": "protected void burstToken(String token, boolean stopAtNonOption)\n{\n    StringBuilder tokenBuilder = new StringBuilder(\"-\");\n\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            if (tokenBuilder.length() > 1) // If there is an option waiting to be added\n            {\n                tokens.add(tokenBuilder.toString()); // Add the waiting option\n                tokenBuilder.setLength(0); // Reset the builder\n                tokenBuilder.append(\"-\"); // Add the new option to the builder\n            }\n            tokenBuilder.append(ch);\n\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && (i < token.length() - 1))\n            {\n                tokens.add(tokenBuilder.toString());\n                tokenBuilder.setLength(0);\n\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            if (tokenBuilder.length() > 1) // Add the waiting option\n            {\n                tokens.add(tokenBuilder.toString());\n            }\n\n            process(token.substring(i));\n            break;\n        }\n        else\n        {\n            tokenBuilder.append(ch);\n        }\n    }\n\n    if (tokenBuilder.length() > 1) // Add any remaining options\n    {\n        tokens.add(tokenBuilder.toString());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}