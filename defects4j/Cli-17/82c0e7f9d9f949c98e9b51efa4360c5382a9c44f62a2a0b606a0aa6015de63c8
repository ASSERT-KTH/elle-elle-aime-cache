{
    "generation": "protected void burstToken(String token, boolean stopAtNonOption)\n{\n    boolean hasArgument = false;\n    StringBuilder argument = new StringBuilder();\n\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = String.valueOf(token.charAt(i));\n\n        if (options.hasOption(ch))\n        {\n            if (hasArgument)\n            {\n                tokens.add(\"-\" + ch);\n                currentOption = options.getOption(ch);\n                hasArgument = currentOption.hasArg();\n                if (hasArgument)\n                {\n                    argument.setLength(0);\n                }\n            }\n            else\n            {\n                tokens.add(\"-\" + ch);\n                currentOption = options.getOption(ch);\n                if (currentOption.hasArg())\n                {\n                    hasArgument = true;\n                }\n            }\n        }\n        else\n        {\n            if (hasArgument)\n            {\n                argument.append(ch);\n            }\n            else\n            {\n                if (stopAtNonOption)\n                {\n                    tokens.add(\"--\");\n                    tokens.add(token.substring(i));\n                    break;\n                }\n                else\n                {\n                    tokens.add(\"-\" + ch);\n                }\n            }\n        }\n    }\n\n    if (hasArgument)\n    {\n        tokens.add(argument.toString());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}