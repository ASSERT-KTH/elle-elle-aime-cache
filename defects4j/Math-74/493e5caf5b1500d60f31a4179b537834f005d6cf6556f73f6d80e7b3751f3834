{
    "generation": "/** {@inheritDoc} */\n@Override\npublic double integrate(final FirstOrderDifferentialEquations equations,\n                        final double t0, final double[] y0,\n                        final double t, final double[] y)\n    throws DerivativeException, IntegratorException {\n\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n    final boolean forward = t > t0;\n\n    // create some internal working arrays\n    final int stages = c.length + 1;\n    if (y != y0) {\n        System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final double[][] yDotK = new double[stages][y0.length];\n    final double[] yTmp = new double[y0.length];\n\n    // set up an interpolator sharing the integrator arrays\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {\n        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n        rki.reinitialize(this, yTmp, yDotK, forward);\n        interpolator = rki;\n    } else {\n        interpolator = new DummyStepInterpolator(yTmp, forward);\n    }\n    interpolator.storeTime(t0);\n\n    // set up integration control objects\n    stepStart = t0;\n    double hNew = 0;\n    boolean firstTime = true;\n    for (StepHandler handler : stepHandlers) {\n        handler.reset();\n    }\n    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n    boolean lastStep = false;\n\n    // main integration loop\n    while (!lastStep) {\n        interpolator.shift();\n\n        double error = 0;\n        boolean loop;\n        do {\n            loop = false;\n            if (firstTime || !fsal) {\n                computeDerivatives(stepStart, y, yDotK[0]);\n            }\n\n            if (firstTime) {\n                final double[] scale = (vecAbsoluteTolerance == null) ?\n                    new double[y0.length] : vecAbsoluteTolerance;\n                if (vecAbsoluteTolerance == null) {\n                    java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n                }\n                hNew = initializeStep(equations, forward, getOrder(), scale,\n                                      stepStart, y, yDotK[0], yTmp, yDotK[1]);\n                firstTime = false;\n            }\n\n            stepSize = hNew;\n\n            // Perform the integration steps\n            performIntegrationSteps(stages, y0, y, yTmp, yDotK);\n\n            // estimate the error at the end of the step\n            error = estimateError(yDotK, y, yTmp, stepSize);\n\n            if (error <= 1.0) {\n                interpolator.storeTime(stepStart + stepSize);\n                if (manager.evaluateStep(interpolator)) {\n                    final double dt = manager.getEventTime() - stepStart;\n                    if (Math.abs(dt) <= Math.ulp(stepStart)) {\n                        loop = false;\n                    } else {\n                        hNew = dt;\n                        loop = true;\n                    }\n                }\n            } else {\n                final double factor = Math.min(maxGrowth,\n                                       Math.max(minReduction, safety * Math.pow(error, exp)));\n                hNew = filterStep(stepSize * factor, forward, false);\n                loop = true;\n            }\n        } while (loop);\n\n        // the step has been accepted\n        finalizeStep(y0, y, yTmp, stepStart, stepSize, yDotK, stages, manager, interpolator);\n\n        if (!lastStep) {\n            prepareNextStep(error, forward, stepStart, t, y, yDotK);\n        }\n\n        lastStep = manager.stop();\n        stepStart += stepSize;\n    }\n\n    resetInternalState();\n    return stepStart;\n}\n\nprivate void performIntegrationSteps(int stages, double[] y0, double[] y, double[] yTmp, double[][] yDotK) {\n    for (int k = 1; k < stages; ++k) {\n        for (int j = 0; j < y0.length; ++j) {\n            double sum = a[k-1][0] * yDotK[0][j];\n            for (int l = 1; l < k; ++l) {\n                sum += a[k-1][l] * yDotK[l][j];\n            }\n            yTmp[j] = y[j] + stepSize * sum;\n        }\n        computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n    }\n\n    for (int j = 0; j < y0.length; ++j) {\n        double sum = b[0] * yDotK[0][j];\n        for (int l = 1; l < stages; ++l) {\n            sum += b[l] * yDotK[l][j];\n        }\n        yTmp[j] = y[j] + stepSize * sum;\n    }\n}\n\nprivate void finalizeStep(double[] y0, double[] y, double[] yTmp, double stepStart, double stepSize,\n                          double[][] yDotK, int stages, CombinedEventsManager manager,\n                          AbstractStepInterpolator interpolator) throws DerivativeException, IntegratorException {\n    System.arraycopy(yTmp, 0, y, 0, y0.length);\n    manager.stepAccepted(stepStart + stepSize, y);\n\n    interpolator.storeTime(stepStart + stepSize);\n    for (StepHandler handler : stepHandlers) {\n        handler.handleStep(interpolator, manager.stop());\n    }\n\n    if (fsal) {\n        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n    }\n\n    if (manager.reset(stepStart + stepSize, y) && !manager.stop()) {\n        computeDerivatives(stepStart + stepSize, y, yDotK[0]);\n    }\n}\n\nprivate void prepareNextStep(double error, boolean forward, double stepStart, double t, double[] y, double[][] yDotK) {\n    stepSize = filterStep(stepSize, forward, true);\n\n    final double factor = Math.min(maxGrowth,\n                                   Math.max(minReduction,\n                                            safety * Math.pow(error, exp)));\n    final double scaledH = stepSize * factor;\n    final double nextT = stepStart + scaledH;\n    final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n    stepSize = filterStep(scaledH, forward, nextIsLast);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}