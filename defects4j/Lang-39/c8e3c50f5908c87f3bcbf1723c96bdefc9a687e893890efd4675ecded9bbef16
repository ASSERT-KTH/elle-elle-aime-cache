{
    "generation": "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    // Handle null inputs\n    if (text == null) {\n        return null;\n    }\n    if (searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n        return text;\n    }\n\n    // Check timeToLive to prevent infinite recursion\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n\n    // Ensure array lengths match\n    if (searchLength != replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength + \" vs \" + replacementLength);\n    }\n\n    // Track which search strings have no more matches\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n\n    // Find the earliest occurrence of any search string\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0) {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n\n    // If no search strings found, return the original text\n    if (textIndex == -1) {\n        return text;\n    }\n\n    int start = 0;\n    StringBuilder buf = new StringBuilder(text.length());\n\n    while (textIndex != -1) {\n        // Append the part before the match\n        buf.append(text, start, textIndex);\n        // Append the replacement string (handle null as empty string)\n        String replacement = replacementList[replaceIndex] == null ? \"\" : replacementList[replaceIndex];\n        buf.append(replacement);\n        // Update start to after the matched search string\n        start = textIndex + searchList[replaceIndex].length();\n        // Find the next earliest match\n        textIndex = -1;\n        replaceIndex = -1;\n        tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0) {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i], start);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n    }\n    // Append the remaining part of the text\n    buf.append(text.substring(start));\n\n    String result = buf.toString();\n    if (!repeat) {\n        return result;\n    }\n\n    // Recursively replace if repeat is true\n    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}