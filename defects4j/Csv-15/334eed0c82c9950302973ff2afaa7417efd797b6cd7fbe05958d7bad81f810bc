{
    "generation": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n                           final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case ALL_NON_NULL:\n            quote = object != null;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                // Check if the first character is a special character that requires quoting\n                if (c == quoteChar || c == delimChar || c == LF || c == CR) {\n                    quote = true;\n                } else {\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == quoteChar || c == delimChar || c == LF || c == CR) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        pos = end - 1;\n                        c = value.charAt(pos);\n                        // Check if the last character is a whitespace or other special character\n                        if (c <= ' ') {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n\n    if (quote) {\n        out.append(quoteChar);\n        pos = start;\n        while (pos < end) {\n            char c = value.charAt(pos);\n            if (c == quoteChar) {\n                out.append(quoteChar);\n            }\n            out.append(c);\n            pos++;\n        }\n        out.append(quoteChar);\n    } else {\n        out.append(value, start, end);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}