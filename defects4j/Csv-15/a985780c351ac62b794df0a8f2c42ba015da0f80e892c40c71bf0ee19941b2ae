{
    "generation": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    if (getQuoteMode() == QuoteMode.NONE) {\n        printAndEscape(value, offset, len, out);\n        return;\n    }\n\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n\n    if (getQuoteMode() == QuoteMode.MINIMAL) {\n        if (len <= 0) {\n            // always quote an empty token that is the first on the line\n            quote = newRecord;\n        } else {\n            char c = value.charAt(pos);\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                quote = true;\n            } else if (c <= COMMENT) {\n                quote = true;\n            } else {\n                while (pos < end) {\n                    c = value.charAt(pos);\n                    if (c == LF || c == CR || c == quoteChar || c == delimChar || escapeChar > 0 && c == escapeChar) {\n                        quote = true;\n                        break;\n                    }\n                    pos++;\n                }\n\n                if (!quote) {\n                    pos = end - 1;\n                    c = value.charAt(pos);\n                    if (c <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n        }\n    }\n\n    // Reset pos and start if quote is true for MINIMAL QuoteMode\n    if (quote) {\n        pos = offset;\n        start = offset;\n    }\n\n    // For ALL Quote Mode or if quote is true for MINIMAL QuoteMode\n    if (getQuoteMode() == QuoteMode.ALL || quote) {\n        out.append(quoteChar);\n        while (pos < end) {\n            final char c = value.charAt(pos);\n            if (c == quoteChar) {\n                out.append(value, start, pos + 1);\n                start = pos;\n            }\n            pos++;\n        }\n        out.append(value, start, pos);\n        out.append(quoteChar);\n    } else {\n        out.append(value, start, end);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}