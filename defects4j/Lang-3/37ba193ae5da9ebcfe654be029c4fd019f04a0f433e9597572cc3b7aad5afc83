{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for (final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen += pfx.length();\n            break;\n        }\n    }\n\n    if (pfxLen > 0) { // we have a hex number\n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) { // too many for Long\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) { // too many for an int\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n\n    final char lastChar = str.charAt(str.length() - 1);\n    final int decPos = str.indexOf('.');\n    final int expPos = str.lastIndexOf('e') != -1 ? Math.max(str.lastIndexOf('e'), str.lastIndexOf('E')) + 1 : -1;\n    String mant;\n    String dec;\n    String exp;\n\n    boolean hasDecimal = false;\n    boolean hasExponent = false;\n\n    // Check required precision\n    if (decPos > -1) { // there is a decimal point\n        hasDecimal = true;\n    }\n    if (expPos > -1) { // there is an exponent\n        hasExponent = true;\n    }\n\n    if (hasDecimal && hasExponent) {\n        if (decPos > expPos || expPos > str.length()) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        mant = str.substring(0, decPos);\n        dec = str.substring(decPos + 1, expPos - 1);\n        exp = str.substring(expPos);\n    } else if (hasDecimal) {\n        mant = str.substring(0, decPos);\n        dec = str.substring(decPos + 1);\n    } else if (hasExponent) {\n        mant = str.substring(0, expPos - 1);\n        exp = str.substring(expPos);\n    } else {\n        mant = str;\n    }\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        final String numeric = str.substring(0, str.length() - 1);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // Too big for a long\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    final Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !isAllZeros(numeric)))) {\n                        return f;\n                    }\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n            case 'd':\n            case 'D':\n                try {\n                    final Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !isAllZeros(numeric)))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) { // NOPMD\n                    // ignore the bad number\n                }\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    if (expPos == -1 && decPos == -1) { // no decimal point and no exponent\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        return createBigInteger(str);\n    }\n\n    // Must be a Float, Double, BigDecimal\n    try {\n        final Float f = createFloat(str);\n        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !isAllZeros(str)))) {\n            return f;\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // ignore the bad number\n    }\n    try {\n        final Double d = createDouble(str);\n        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !isAllZeros(str)))) {\n            return d;\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // ignore the bad number\n    }\n\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}