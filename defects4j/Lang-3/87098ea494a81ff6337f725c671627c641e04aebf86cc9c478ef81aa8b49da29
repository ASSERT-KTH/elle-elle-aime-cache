{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for(final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen += pfx.length();\n            break;\n        }\n    }\n\n    if (pfxLen > 0) { // we have a hex number\n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) {\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) {\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n\n    if (StringUtils.containsAny(str, \"Ee.\")) {\n        try {\n            BigDecimal bd = createBigDecimal(str);\n            if (bd.compareTo(new BigDecimal(Long.MAX_VALUE)) <= 0 && bd.compareTo(new BigDecimal(Long.MIN_VALUE)) >= 0) {\n                try {\n                    return bd.longValueExact();\n                } catch (ArithmeticException e) {\n                    // this means the long value is out of range, proceed with BigDecimal\n                }\n            }\n            return bd;\n        } catch (final NumberFormatException nfe) {\n            // Ignore\n        }\n    }\n\n    try {\n        return createLong(str);\n    } catch (final NumberFormatException nfe) {\n        // Ignore\n    }\n\n    return createBigInteger(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}