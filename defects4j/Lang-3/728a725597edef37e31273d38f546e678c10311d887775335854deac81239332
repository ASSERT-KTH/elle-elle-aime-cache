{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    final String[] hexPrefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int prefixLength = 0;\n\n    for (final String prefix : hexPrefixes) {\n        if (str.startsWith(prefix)) {\n            prefixLength += prefix.length();\n            break;\n        }\n    }\n\n    if (prefixLength > 0) { // Hexadecimal number\n        final int hexDigits = str.length() - prefixLength;\n        if (hexDigits > 16) {\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) {\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n\n    final char lastChar = str.charAt(str.length() - 1);\n    String mantissa;\n    String decimal;\n    String exponent;\n    final int decimalPointPosition = str.indexOf('.');\n    final int exponentPosition = Math.max(str.indexOf('e'), str.indexOf('E'));\n\n    int numberOfDecimals = 0;\n\n    if (decimalPointPosition > -1) { // Contains a decimal point\n        if (exponentPosition > -1) { // Contains an exponent\n            if (exponentPosition < decimalPointPosition || exponentPosition > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            decimal = str.substring(decimalPointPosition + 1, exponentPosition);\n        } else {\n            decimal = str.substring(decimalPointPosition + 1);\n        }\n        mantissa = str.substring(0, decimalPointPosition);\n        numberOfDecimals = decimal.length();\n    } else {\n        if (exponentPosition > -1) {\n            if (exponentPosition > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mantissa = str.substring(0, exponentPosition);\n        } else {\n            mantissa = str;\n        }\n        decimal = null;\n    }\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (exponentPosition > -1 && exponentPosition < str.length() - 1) {\n            exponent = str.substring(exponentPosition + 1, str.length() - 1);\n        } else {\n            exponent = null;\n        }\n\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (decimal == null && exponent == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException ignored) {\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n\n            case 'f':\n            case 'F':\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (final NumberFormatException ignored) {\n                }\n            case 'd':\n            case 'D':\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException ignored) {\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException ignored) {\n                }\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    if (exponentPosition > -1 && exponentPosition < str.length() - 1) {\n        exponent = str.substring(exponentPosition + 1);\n    } else {\n        exponent = null;\n    }\n\n    if (decimal == null && exponent == null) { // No decimal point or exponent\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException ignored) {\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException ignored) {\n        }\n        return createBigInteger(str);\n    }\n\n    final boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n    try {\n        if (numberOfDecimals < 7) { // Check precision for Float\n            final Float f = createFloat(str);\n            if (!(f.isInfinite() || (f == 0.0F && !allZeros))) {\n                return f;\n            }\n        }\n    } catch (final NumberFormatException ignored) {\n    }\n    try {\n        if (numberOfDecimals < 16) { // Check precision for Double\n            final Double d = createDouble(str);\n            if (!(d.isInfinite() || (d == 0.0D && !allZeros))) {\n                return d;\n            }\n        }\n    } catch (final NumberFormatException ignored) {\n    }\n\n    return createBigDecimal(str); // Fallback to BigDecimal for high precision\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}