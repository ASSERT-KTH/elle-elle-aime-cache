{
    "generation": "import org.apache.commons.lang3.StringUtils;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.util.Arrays;\n\npublic class NumberUtils {\n\n    /**\n     * Turns a string value into a java.lang.Number.\n     * \n     * @param str the string containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        \n        // Check for hexadecimal prefix\n        String[] hexPrefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        for (String pfx : hexPrefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen = pfx.length();\n                break;\n            }\n        }\n        if (pfxLen > 0) {\n            String numStr = str.substring(pfxLen);\n            int hexDigits = numStr.length();\n            if (hexDigits > 16) {\n                return new BigInteger(numStr, 16);\n            } else if (hexDigits > 8) {\n                return Long.parseLong(numStr, 16);\n            } else {\n                return Integer.parseInt(numStr, 16);\n            }\n        }\n        \n        // Check for type qualifiers\n        char lastChar = str.charAt(str.length() - 1);\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            String numeric = str.substring(0, str.length() - 1);\n            switch (lastChar) {\n                case 'l':\n                case 'L':\n                    try {\n                        return Long.parseLong(numeric);\n                    } catch (NumberFormatException e) {\n                        return new BigInteger(numeric);\n                    }\n                case 'f':\n                case 'F':\n                    try {\n                        Float f = Float.parseFloat(numeric);\n                        if (!f.isInfinite() && !(f == 0.0f && !isAllZeros(numeric))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException e) {}\n                    // Fall through to Double\n                case 'd':\n                case 'D':\n                    try {\n                        Double d = Double.parseDouble(numeric);\n                        if (!d.isInfinite() && !(d == 0.0d && !isAllZeros(numeric))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException e) {}\n                    try {\n                        return new BigDecimal(numeric);\n                    } catch (NumberFormatException e) {}\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                default:\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        }\n        \n        // No type qualifier, determine type based on content\n        if (str.contains(\".\") || str.contains(\"e\") || str.contains(\"E\")) {\n            try {\n                Float f = Float.parseFloat(str);\n                if (!f.isInfinite() && !(f == 0.0f && !isAllZeros(str))) {\n                    return f;\n                }\n            } catch (NumberFormatException e) {}\n            try {\n                Double d = Double.parseDouble(str);\n                if (!d.isInfinite() && !(d == 0.0d && !isAllZeros(str))) {\n                    return d;\n                }\n            } catch (NumberFormatException e) {}\n            return new BigDecimal(str);\n        } else {\n            try {\n                return Integer.parseInt(str);\n            } catch (NumberFormatException e) {}\n            try {\n                return Long.parseLong(str);\n            } catch (NumberFormatException e) {}\n            return new BigInteger(str);\n        }\n    }\n    \n    private static boolean isAllZeros(String str) {\n        for (char c : str.toCharArray()) {\n            if (c != '0' && c != '-') {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}