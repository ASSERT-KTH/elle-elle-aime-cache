{
    "generation": "/**\n * <p>Turns a string value into a java.lang.Number.</p>\n *\n *... (rest of the Javadoc remains the same)\n *\n * @param str  String containing a number, may be null\n * @return Number created from the string (or null if the input is null)\n * @throws NumberFormatException if the value cannot be converted\n */\npublic static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    //... (rest of the method remains the same until the floating point handling)\n\n    //Must be a Float, Double, BigDecimal\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        final Float f = createFloat(str);\n        if (!(f.isInfinite() || (f.floatValue() == 0.0F &&!allZeros)) && numDecimals <= 6) { // added precision check\n            return f;\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // ignore the bad number\n    }\n    try {\n        final Double d = createDouble(str);\n        if (!(d.isInfinite() || (d.doubleValue() == 0.0D &&!allZeros)) && numDecimals <= 15) { // added precision check\n            return d;\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // ignore the bad number\n    }\n\n    return createBigDecimal(str); // fall back to BigDecimal for high precision\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}