{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for (final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen += pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        final int hexDigits = str.length() - pfxLen;\n        if (hexDigits > 16) { // too many for Long\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) { // too many for an int\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = str.indexOf('e') != -1 ? str.indexOf('e') : str.indexOf('E');\n\n    int numDecimals = 0; // Check required precision (LANG-693)\n    if (decPos > -1) { // there is a decimal point\n        dec = str.substring(decPos + 1, expPos > -1 ? expPos : str.length());\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length();\n    } else {\n        dec = null;\n        mant = str;\n    }\n    if (expPos > -1) { // there is an exponent\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        // Specific type request\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                try {\n                    return createLong(numeric);\n                } catch (final NumberFormatException nfe) {\n                    return createBigInteger(numeric);\n                }\n            case 'f':\n            case 'F':\n                final Float f = createFloat(numeric);\n                if (!f.isInfinite() && !(f.floatValue() == 0.0F && !allZeros)) {\n                    return f;\n                }\n            case 'd':\n            case 'D':\n                final Double d = createDouble(numeric);\n                if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !allZeros)) {\n                    return d;\n                }\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    // No specific type requested\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        return createInteger(str);\n    } catch (final NumberFormatException nfe) {\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe2) {\n            try {\n                final Float f = createFloat(str);\n                if (!f.isInfinite() && !(f.floatValue() == 0.0F && !allZeros)) {\n                    return f;\n                }\n                final Double d = createDouble(str);\n                if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !allZeros)) {\n                    return d;\n                }\n            } catch (final NumberFormatException nfe3) {\n                // Ignore the bad number, will fall through to BigDecimal\n            }\n            return createBigDecimal(str);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}