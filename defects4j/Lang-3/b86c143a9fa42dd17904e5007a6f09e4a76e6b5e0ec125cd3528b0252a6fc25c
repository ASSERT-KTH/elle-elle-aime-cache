{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    \n    // Check for hexadecimal prefixes\n    String hexPrefix = null;\n    for (String pfx : new String[]{\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"}) {\n        if (str.startsWith(pfx)) {\n            hexPrefix = pfx;\n            break;\n        }\n    }\n    if (hexPrefix != null) {\n        String numStr = str.substring(hexPrefix.length());\n        try {\n            return Integer.valueOf(Integer.parseInt(numStr, 16));\n        } catch (NumberFormatException e) {\n            try {\n                return Long.valueOf(Long.parseLong(numStr, 16));\n            } catch (NumberFormatException ex) {\n                return new BigInteger(numStr, 16);\n            }\n        }\n    }\n    \n    // Check for type qualifiers\n    char lastChar = str.charAt(str.length() - 1);\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        String numericPart = str.substring(0, str.length() - 1);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                try {\n                    return Long.parseLong(numericPart);\n                } catch (NumberFormatException e) {\n                    return new BigInteger(numericPart);\n                }\n            case 'f':\n            case 'F':\n                try {\n                    float f = Float.parseFloat(numericPart);\n                    if (!Float.isInfinite(f) && f != 0.0f || isAllZeros(numericPart)) {\n                        return f;\n                    }\n                } catch (NumberFormatException e) {}\n                // Fall through to Double or BigDecimal\n            case 'd':\n            case 'D':\n                try {\n                    double d = Double.parseDouble(numericPart);\n                    if (!Double.isInfinite(d) && d != 0.0d || isAllZeros(numericPart)) {\n                        return d;\n                    }\n                } catch (NumberFormatException e) {}\n                try {\n                    return new BigDecimal(numericPart);\n                } catch (NumberFormatException e) {}\n                break;\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    \n    // No type qualifier, determine the type based on content\n    if (str.contains(\".\") || str.contains(\"e\") || str.contains(\"E\")) {\n        try {\n            float f = Float.parseFloat(str);\n            if (!Float.isInfinite(f) && f != 0.0f || isAllZeros(str)) {\n                return f;\n            }\n        } catch (NumberFormatException e) {}\n        try {\n            double d = Double.parseDouble(str);\n            if (!Double.isInfinite(d) && d != 0.0d || isAllZeros(str)) {\n                return d;\n            }\n        } catch (NumberFormatException e) {}\n        try {\n            return new BigDecimal(str);\n        } catch (NumberFormatException e) {}\n    } else {\n        try {\n            return Integer.parseInt(str);\n        } catch (NumberFormatException e) {}\n        try {\n            return Long.parseLong(str);\n        } catch (NumberFormatException e) {}\n        return new BigInteger(str);\n    }\n    \n    throw new NumberFormatException(str + \" is not a valid number.\");\n}\n\nprivate static boolean isAllZeros(String str) {\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) != '0' && str.charAt(i) != '.') {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}