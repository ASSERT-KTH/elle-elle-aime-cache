{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    // skipped code for brevity\n\n    //User doesn't have a preference on the return type, so let's start\n    //small and go from there...\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) { // no decimal point and no exponent\n        //Must be an Integer, Long, Biginteger\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        return createBigInteger(str);\n    }\n\n    // Must be a Float, Double, BigDecimal\n    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    if (numDecimals <= 7 || allZeros) {\n        try {\n            final Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n    }\n    if (numDecimals <= 16 || allZeros) {\n        try {\n            final Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n    }\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}