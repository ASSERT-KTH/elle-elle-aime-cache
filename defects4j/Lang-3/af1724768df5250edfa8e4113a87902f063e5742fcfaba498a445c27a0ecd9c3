{
    "generation": "import org.apache.commons.lang3.StringUtils;\n\nimport java.math.BigInteger;\nimport java.math.BigDecimal;\n\npublic class NumberUtils {\n\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        for (final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen += pfx.length();\n                break;\n            }\n        }\n        if (pfxLen > 0) { // we have a hex number\n            final int hexDigits = str.length() - pfxLen;\n            if (hexDigits > 16) { // too many for Long\n                return createBigInteger(str);\n            }\n            if (hexDigits > 8) { // too many for an int\n                return createLong(str);\n            }\n            return createInteger(str);\n        }\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        final int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));\n        if (decPos > -1) { // there is a decimal point\n            if (expPos > -1) { // there is an exponent\n                if (expPos < decPos || expPos > str.length()) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                if (expPos > str.length()) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            final String numeric = str.substring(0, str.length() - 1);\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null && exp == null && isNumeric(numeric)) {\n                        try {\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) {\n                            return createBigInteger(numeric);\n                        }\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        final Float f = createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (final NumberFormatException nfe) {\n                        // ignore\n                    }\n                    // Fall through to Double\n                case 'd' :\n                case 'D' :\n                    try {\n                        final Double d = createDouble(numeric);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (final NumberFormatException nfe) {\n                        // ignore\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) {\n                        // ignore\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        }\n        // No type qualifier, determine appropriate type\n        if (dec == null && exp == null) {\n            try {\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) {\n                try {\n                    return createLong(str);\n                } catch (final NumberFormatException nfe2) {\n                    return createBigInteger(str);\n                }\n            }\n        }\n        // Handle floating point numbers\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        try {\n            final Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        } catch (final NumberFormatException nfe) {\n            // ignore\n        }\n        try {\n            final Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        } catch (final NumberFormatException nfe) {\n            // ignore\n        }\n        return createBigDecimal(str);\n    }\n\n    private static boolean isAllZeros(String s) {\n        if (s == null) {\n            return true;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) != '0' && s.charAt(i) != '.') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean isNumeric(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n        int decimalPoints = 0;\n        int exponentCount = 0;\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if (c == '-') {\n                if (i != 0) {\n                    return false;\n                }\n            } else if (c == '.') {\n                decimalPoints++;\n                if (decimalPoints > 1) {\n                    return false;\n                }\n            } else if (c == 'e' || c == 'E') {\n                exponentCount++;\n                if (exponentCount > 1) {\n                    return false;\n                }\n                if (i == 0 || i == str.length() - 1) {\n                    return false;\n                }\n            } else if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Dummy methods for creation, assuming they are implemented elsewhere\n    private static Integer createInteger(String str) throws NumberFormatException {\n        return Integer.parseInt(str);\n    }\n\n    private static Long createLong(String str) throws NumberFormatException {\n        return Long.parseLong(str);\n    }\n\n    private static BigInteger createBigInteger(String str) throws NumberFormatException {\n        return new BigInteger(str);\n    }\n\n    private static Float createFloat(String str) throws NumberFormatException {\n        return Float.parseFloat(str);\n    }\n\n    private static Double createDouble(String str) throws NumberFormatException {\n        return Double.parseDouble(str);\n    }\n\n    private static BigDecimal createBigDecimal(String str) throws NumberFormatException {\n        return new BigDecimal(str);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}