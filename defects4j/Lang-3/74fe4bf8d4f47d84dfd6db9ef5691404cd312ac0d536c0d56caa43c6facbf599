{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    // rest of the function...\n\n    final int decPos = str.indexOf('.');\n    int numDecimals = 0; // Check required precision\n    if (decPos > -1) { // there is a decimal point\n        dec = str.substring(decPos + 1);\n        numDecimals = dec.length(); // gets number of digits past the decimal\n    }\n\n    // Check if number requires precision higher than Float and Double\n    if (numDecimals > 7) { // Float has 6 decimal digits of precision, Double has 15\n        return createBigDecimal(str);\n    }\n\n    // rest of the function...\n\n    //Handle floating-point numbers\n    try {\n        final Float f = createFloat(str);\n        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n            return f;\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // continue to next check\n    }\n    try {\n        final Double d = createDouble(str);\n        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n            return d;\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // continue to next check\n    }\n\n    return createBigDecimal(str); // Default to BigDecimal if all other checks fail\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}