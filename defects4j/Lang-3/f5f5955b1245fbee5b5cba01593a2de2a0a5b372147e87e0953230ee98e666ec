{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    //... other code unchanged\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        // ... other code unchanged\n    }\n    //User doesn't have a preference on the return type, so let's start\n    //small and go from there...\n    if (dec == null && exp == null) { // no decimal point and no exponent\n        //... other code unchanged\n    }\n\n    // Must be a Float, Double, BigDecimal\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        final Float f = createFloat(str);\n        if (!f.isInfinite() && !((f.floatValue() == 0.0F && numDecimals > 0) || allZeros)) {\n            return f;\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // ignore the bad number\n    }\n    try {\n        final Double d = createDouble(str);\n        if (!d.isInfinite() && !((d.doubleValue() == 0.0D && numDecimals > 0) || allZeros)) {\n            return d;\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // ignore the bad number\n    }\n\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}