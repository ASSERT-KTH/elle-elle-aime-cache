{
    "generation": "/**\n * Encodes {@code value}.\n *\n * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n *     {@link Double#isInfinite() infinities} unless the writer is lenient.\n * @return this writer.\n */\npublic JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n  if (!isLenient() && (Double.isNaN(value) || Double.isInfinite(value))) {\n    throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n  }\n  beforeValue();\n  out.append(Double.toString(value));\n  return this;\n}\n\nprivate boolean isLenient() {\n  // Assume there is a method or field that determines if the writer is lenient\n  // For example, a field `lenient` or a method `getLenient()`\n  return lenient; // or return getLenient();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}