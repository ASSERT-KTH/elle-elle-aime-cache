{
    "generation": "/**\n * Encodes {@code value}.\n *\n * @param value a value. May be {@link Double#isNaN() NaNs} or\n *     {@link Double#isInfinite() infinities} when {@link #setLenient(boolean)} is true.\n * @return this writer.\n */\npublic JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n  if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n    throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n  }\n  beforeValue();\n  out.append(lenient? \n      (Double.isNaN(value)? \"NaN\" : \n       (Double.isInfinite(value)? (value < 0? \"-Infinity\" : \"Infinity\") : Double.toString(value))) \n      : Double.toString(value));\n  return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}