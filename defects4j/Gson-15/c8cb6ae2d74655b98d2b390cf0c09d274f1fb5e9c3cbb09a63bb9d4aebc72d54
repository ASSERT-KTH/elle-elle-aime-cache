{
    "generation": "  /**\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}. If the writer is lenient, NaNs and infinities\n   *     are encoded as strings.\n   * @return this writer.\n   */\n  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n      if (!isLenient()) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n      }\n      // Encode NaNs and infinities as strings when lenient\n      if (Double.isNaN(value)) {\n        out.append(\"\\\"NaN\\\"\");\n      } else if (Double.isInfinite(value)) {\n        out.append(value > 0 ? \"\\\"Infinity\\\"\" : \"\\\"-Infinity\\\"\");\n      }\n    } else {\n      beforeValue();\n      out.append(Double.toString(value));\n    }\n    return this;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}