{
    "generation": "/**\n * Encodes {@code value}.\n *\n * @param value a finite value or NaN/infinities.\n * @return this writer.\n */\npublic JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n\n    if (Double.isNaN(value)) {\n        out.append(\"NaN\");\n    } else if (Double.isInfinite(value)) {\n        if (Double.doubleToRawLongBits(value) == Long.MIN_VALUE) {\n            out.append(\"-Infinity\");\n        } else {\n            out.append(\"Infinity\");\n        }\n    } else {\n        out.append(Double.toString(value));\n    }\n\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}