{
    "generation": "static boolean functionCallHasSideEffects(\n    Node callNode, @Nullable AbstractCompiler compiler) {\n  if (callNode.getType() != Token.CALL) {\n    throw new IllegalStateException(\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));\n  }\n\n  if (callNode.isNoSideEffectsCall()) {\n    return false;\n  }\n\n  Node nameNode = callNode.getFirstChild();\n\n  // Built-in functions with no side effects.\n  if (nameNode.getType() == Token.NAME) {\n    String name = nameNode.getString();\n    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n      return false;\n    }\n  } else if (nameNode.getType() == Token.GETPROP) {\n    if (callNode.hasOneChild()) {\n      Node firstChild = nameNode.getFirstChild();\n      String property = nameNode.getLastChild().getString();\n      // Functions in the \"Math\" namespace have no side effects.\n      if (firstChild != null && firstChild.getType() == Token.NAME\n          && \"Math\".equals(firstChild.getString())\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(property)) {\n        return false;\n      }\n      if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(property)) {\n        return false;\n      }\n    }\n\n    if (callNode.isOnlyModifiesThisCall()\n        && evaluatesToLocalValue(nameNode.getFirstChild())) {\n      return false;\n    }\n\n    if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n      Node firstChild = nameNode.getFirstChild();\n      Node lastChild = nameNode.getLastChild();\n      if (firstChild != null && lastChild != null\n          && firstChild.getType() == Token.REGEXP\n          && REGEXP_METHODS.contains(lastChild.getString())) {\n        return false;\n      } else if (firstChild != null && lastChild != null\n          && firstChild.getType() == Token.STRING\n          && STRING_REGEXP_METHODS.contains(lastChild.getString())) {\n        Node param = nameNode.getNext();\n        if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP))\n          return false;\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}