{
    "generation": "/**\n * Returns true if calls to this function have side effects.\n *\n * @param callNode The call node to inspected.\n * @param compiler A compiler object to provide program state changing\n *     context information. Can be null.\n */\nstatic boolean functionCallHasSideEffects(\n    Node callNode, @Nullable AbstractCompiler compiler) {\n  if (callNode.getType() != Token.CALL) {\n    throw new IllegalStateException(\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));\n  }\n\n  if (callNode.isNoSideEffectsCall()) {\n    return false;\n  }\n\n  Node nameNode = callNode.getFirstChild();\n\n  // Built-in functions with no side effects.\n  if (nameNode.getType() == Token.NAME) {\n    String name = nameNode.getString();\n    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n      return false;\n    }\n    // Check if the function is in the Math namespace\n    if (name.equals(\"Math\")) {\n      Node mathMethod = nameNode.getNext();\n      if (mathMethod != null && mathMethod.getType() == Token.GETPROP) {\n        String methodName = mathMethod.getLastChild().getString();\n        if (MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(methodName)) {\n          return false;\n        }\n      }\n    }\n  } else if (nameNode.getType() == Token.GETPROP) {\n    if (callNode.hasOneChild()\n        && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n              nameNode.getLastChild().getString())) {\n      return false;\n    }\n\n    if (callNode.isOnlyModifiesThisCall()\n        && evaluatesToLocalValue(nameNode.getFirstChild())) {\n      return false;\n    }\n\n    // Functions in other namespaces with no side effects.\n    Node object = nameNode.getFirstChild();\n    if (object.getType() == Token.NAME && object.getString().equals(\"Math\")) {\n      String methodName = nameNode.getLastChild().getString();\n      if (MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(methodName)) {\n        return false;\n      }\n    }\n\n    if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n      if (object.getType() == Token.REGEXP\n          && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n        return false;\n      } else if (object.getType() == Token.STRING\n          && STRING_REGEXP_METHODS.contains(\n              nameNode.getLastChild().getString())) {\n        Node param = nameNode.getNext();\n        if (param != null &&\n            (param.getType() == Token.STRING\n                || param.getType() == Token.REGEXP)) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}