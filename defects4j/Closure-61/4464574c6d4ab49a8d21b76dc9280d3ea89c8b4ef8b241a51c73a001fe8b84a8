{
    "generation": "static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n        throw new IllegalStateException(\n                \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n        return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.getType() == Token.NAME) {\n        String name = nameNode.getString();\n        if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n            return false;\n        }\n    } else if (nameNode.getType() == Token.GETPROP) {\n        Node propertyNameNode = nameNode.getLastChild();\n        String propertyName = propertyNameNode.getString();\n\n        // Check if the GETPROP is a property of 'Math' and the method is side-effect-free.\n        Node objectNode = nameNode.getFirstChild();\n        if (objectNode.getType() == Token.NAME && \"Math\".equals(objectNode.getString())) {\n            if (MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(propertyName)) {\n                return false;\n            }\n        } else if (objectNode.getType() == Token.THIS) {\n            // Handle 'this' context if necessary.\n        } else if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n            if (objectNode.getType() == Token.REGEXP) {\n                if (REGEXP_METHODS.contains(propertyName)) {\n                    return false;\n                }\n            } else if (objectNode.getType() == Token.STRING) {\n                if (STRING_REGEXP_METHODS.contains(propertyName)) {\n                    Node param = nameNode.getNext();\n                    if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}