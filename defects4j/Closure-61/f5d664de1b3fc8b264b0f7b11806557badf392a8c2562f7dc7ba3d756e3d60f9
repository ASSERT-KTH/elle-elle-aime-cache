{
    "generation": "static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {\n  if (callNode.getType() != Token.CALL) {\n    throw new IllegalStateException(\"Expected CALL node, got \" + Token.name(callNode.getType()));\n  }\n\n  if (callNode.isNoSideEffectsCall()) {\n    return false;\n  }\n\n  Node nameNode = callNode.getFirstChild();\n\n  if (nameNode.getType() == Token.NAME) {\n    String name = nameNode.getString();\n    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n      return false;\n    } else if (name.equals(\"Math\")) {\n      Node methodNode = nameNode.getNext();\n      if (methodNode != null && methodNode.getType() == Token.GETPROP) {\n        String methodName = methodNode.getLastChild().getString();\n        if (MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(methodName)) {\n          return false;\n        }\n      }\n    }\n  } else if (nameNode.getType() == Token.GETPROP) {\n    // ... rest of the function ...\n  }\n\n  return true;\n}\n\nprivate static final Set<String> MATH_METHODS_WITHOUT_SIDEEFFECTS = new HashSet<>(Arrays.asList(\n    \"abs\", \"acos\", \"asin\", \"atan\", \"atan2\", \"ceil\", \"cos\", \"E\", \"exp\", \"floor\", \"LN10\", \"LN2\",\n    \"log\", \"LOG10E\", \"LOG2E\", \"max\", \"min\", \"PI\", \"pow\", \"random\", \"round\", \"sin\", \"sqrt\", \"tan\"));",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}