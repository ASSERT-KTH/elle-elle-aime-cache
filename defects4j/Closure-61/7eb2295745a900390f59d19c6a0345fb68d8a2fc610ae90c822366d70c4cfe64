{
    "generation": "static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP) {\n      if (nameNode.getFirstChild().getType() == Token.NAME) {\n        String objName = nameNode.getFirstChild().getString();\n        Node methodName = nameNode.getLastChild();\n        if (objName.equals(\"Math\")) {\n          if (MATHEMATICAL_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(methodName.getString())) {\n            return false;\n          }\n        } else if (objName.equals(\"Object\") && !callNode.hasOneChild()) {\n          if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(methodName.getString())) {\n            return false;\n          }\n        }\n      }\n\n      if (callNode.isOnlyModifiesThisCall() && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        } else if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          Node param = nameNode.getNext();\n          if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP))\n            return false;\n        }\n      }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}