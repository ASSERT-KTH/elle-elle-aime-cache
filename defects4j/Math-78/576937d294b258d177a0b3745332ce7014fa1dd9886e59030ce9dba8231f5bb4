{
    "generation": "public boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n        for (int i = 0; i < n; ++i) {\n\n            // Evaluate handler value at the end of the substep\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // Check for sign change\n            if (g0Positive ^ (gb >= 0)) {\n                // There is a sign change: an event is expected during this step\n\n                // Further subdivide this sub-interval to check for multiple events\n                final int subn = Math.max(1, (int) Math.ceil(Math.abs(tb - ta) / (2 * maxCheckInterval)));\n                final double subh = (tb - ta) / subn;\n                double subta = ta;\n                double subga = ga;\n                for (int j = 0; j < subn; ++j) {\n                    double subtb = subta + subh;\n                    interpolator.setInterpolatedTime(subtb);\n                    double subgb = handler.g(subtb, interpolator.getInterpolatedState());\n\n                    if (subga * subgb <= 0) {\n                        // Sign change in this sub-subinterval\n                        findAndSetEventTime(interpolator, subta, subtb);\n                    }\n                    subta = subtb;\n                    subga = subgb;\n                }\n            }\n\n            // Update for next iteration\n            ta = tb;\n            ga = gb;\n        }\n\n        // No event during the whole step\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n}\n\nprivate void findAndSetEventTime(final StepInterpolator interpolator, double ta, double tb)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    // Define the function for the solver\n    UnivariateRealFunction f = new UnivariateRealFunction() {\n        public double value(final double t) throws FunctionEvaluationException {\n            try {\n                interpolator.setInterpolatedTime(t);\n                return handler.g(t, interpolator.getInterpolatedState());\n            } catch (DerivativeException e) {\n                throw new FunctionEvaluationException(e, t);\n            } catch (EventException e) {\n                throw new FunctionEvaluationException(e, t);\n            }\n        }\n    };\n\n    // Create a solver instance\n    BrentSolver solver = new BrentSolver();\n    solver.setAbsoluteAccuracy(convergence);\n    solver.setMaximalIterationCount(maxIterationCount);\n\n    // Solve for the root in the interval [ta, tb]\n    double root;\n    try {\n        root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n    } catch (NoBracketingException e) {\n        // If no bracketing, it means no sign change, so skip\n        return;\n    }\n\n    // Check if the root is acceptable\n    if ((Math.abs(root - ta) <= convergence) &&\n        (Math.abs(root - previousEventTime) <= convergence)) {\n        // Event is too close to the previous one or the start, ignore\n        return;\n    } else if (Double.isNaN(previousEventTime) ||\n               (Math.abs(previousEventTime - root) > convergence)) {\n        pendingEventTime = root;\n        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n            // Step should be accepted as it ends exactly at the event\n            pendingEvent = false;\n            return;\n        }\n        // Set pending event flag\n        pendingEvent = true;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}