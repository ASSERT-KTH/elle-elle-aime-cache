{
    "generation": "/** Evaluate the impact of the proposed step on the event handler.\n * @param interpolator step interpolator for the proposed step\n * @return true if the event handler triggers an event before\n * the end of the proposed step (this implies the step should be\n * rejected)\n * @exception DerivativeException if the interpolator fails to\n * compute the switching function somewhere within the step\n * @exception EventException if the switching function\n * cannot be evaluated\n * @exception ConvergenceException if an event cannot be located\n */\npublic boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h  = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        for (int i = 0; i < n; ++i) {\n\n            // evaluate handler value at the end of the substep\n            double tb = ta + h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // check events occurrence\n            if (g0Positive ^ (gb >= 0)) {\n                // there is a sign change: an event is expected during this step\n\n                final double shift = (Double.isNaN(previousEventTime))? 0 : 4 * convergence;\n                increasing = gb >= ga;\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n                final BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                final double startT = (ta < tb - 2 * shift)? ta + shift : Math.max(ta + Math.ulp(ta), t0);\n                final double stopT  = (ta < tb - 2 * shift)? tb - shift : Math.max(Math.nextAfter(tb, Math.signum(t1)), t0);\n                if ((Math.abs(startT - stopT) >= 2 * convergence)) {\n                    final double root = (startT < stopT)? solver.solve(f, startT, stopT) : solver.solve(f, stopT, startT);\n                    if ((Math.abs(root - ta) > 2 * convergence) || (Math.abs(root - previousEventTime) > convergence)) {\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            return false;\n                        }\n                        pendingEvent = true;\n                        return true;\n                    } else {\n                        // check on the other side, shifted\n                        if ((increasing && (startT + 2 * convergence >= stopT)) ||\n                             (!increasing && (startT <= stopT + 2 * convergence))) {\n                            ta += Math.signum(ta);\n                            ga = gb;\n                        } else {\n                            startT = Math.nextDown(startT);\n                            if ((Math.abs(startT - stopT) < Math.abs(startT - previousEventTime))) {\n                                solver.setMaximalIterationCount(solver.getMaximalIterationCount() + 2 * 1000);\n                            } else {\n                                throw new ConvergenceException(800); // 2^(16-1) << Number.MAX_SAFE_INTEGER but well above 10-19\n                            }\n                        }\n                    }\n                } else if ((Math.abs(tb - previousEventTime) >= convergence)) {\n                    return solve(f, tb + h, tb - convergence + Math.ulp(startT), solver, interpolationState);\n                }\n                } else {\n                    ta += h;\n                    ga = gb;\n                }\n\n        }\n\n        // no event during the whole step\n        pendingEvent     = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause!= null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause!= null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}