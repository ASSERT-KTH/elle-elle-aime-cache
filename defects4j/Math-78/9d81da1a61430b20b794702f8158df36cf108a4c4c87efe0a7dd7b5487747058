{
    "generation": "\npublic boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = t0 + (forward ? convergence : -convergence);\n        for (int i = 0; i < n; ++i) {\n\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            if (ga * gb <= 0) {\n                // There is a sign change: an event is expected during this substep\n\n                // Define the function to solve\n                UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n\n                // Configure and use the Brent solver\n                BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                double root = solver.solve(f, ta, tb);\n\n                // Check if the root is valid and not too close to previous events\n                if (Double.isNaN(previousEventTime) ||\n                    Math.abs(previousEventTime - root) > convergence) {\n                    pendingEventTime = root;\n                    if (pendingEvent && Math.abs(t1 - pendingEventTime) <= convergence) {\n                        // The step ends exactly at the event occurrence; accept the step\n                        return false;\n                    }\n                    // Either not waiting for the event or it has moved; reject the step\n                    pendingEvent = true;\n                    return true;\n                }\n            }\n\n            // No sign change in this substep; proceed to the next\n            ta = tb;\n            ga = gb;\n        }\n\n        // No event found in the entire step; reset pending event\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        Throwable cause = e.getCause();\n        if (cause != null && cause instanceof DerivativeException) {\n            throw (DerivativeException) cause;\n        } else if (cause != null && cause instanceof EventException) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}