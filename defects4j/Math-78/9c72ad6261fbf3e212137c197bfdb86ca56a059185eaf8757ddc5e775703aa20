{
    "generation": "public boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        for (int i = 0; i < n; ++i) {\n\n            // evaluate handler value at the end of the substep\n            final double tb = ta + h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // check for events\n            if (g0Positive ^ (gb >= 0)) {\n                // sign change detected, an event exists within this step\n\n                // Ensure bracketing for the root-finding algorithm\n                if (ga == 0.0) {\n                    // Shift ta slightly to ensure bracketing\n                    ta += (forward ? convergence : -convergence);\n                    ga = handler.g(ta, interpolator.getInterpolatedState());\n                }\n                if (gb == 0.0) {\n                    // Shift tb slightly to ensure bracketing\n                    final double adjustedTb = tb + (forward ? convergence : -convergence);\n                    interpolator.setInterpolatedTime(adjustedTb);\n                    gb = handler.g(adjustedTb, interpolator.getInterpolatedState());\n                }\n\n                // Ensure ga and gb have opposite signs\n                if (ga * gb > 0) {\n                    throw new ConvergenceException(\"Switching function did not properly bracket a root.\");\n                }\n\n                // Use root-finding algorithm to locate the event\n                increasing = gb >= ga;\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n                final BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                final double root = solver.solve(f, ta, tb);\n\n                if ((Math.abs(root - ta) <= convergence) &&\n                     (Math.abs(root - previousEventTime) <= convergence)) {\n                    // Ignore spurious or repeated events\n                    ta = tb;\n                    ga = gb;\n                } else if (Double.isNaN(previousEventTime) ||\n                           (Math.abs(previousEventTime - root) > convergence)) {\n                    pendingEventTime = root;\n                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        // This event has already been found and is valid\n                        return false;\n                    }\n                    // A new event has been identified\n                    pendingEvent = true;\n                    return true;\n                }\n\n            } else {\n                // No sign change, move to the next substep\n                ta = tb;\n                ga = gb;\n            }\n\n        }\n\n        // No events detected in the entire step\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}