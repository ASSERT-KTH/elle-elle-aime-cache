{
    "generation": "public boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n  try {\n      forward = interpolator.isForward();\n      final double t1 = interpolator.getCurrentTime();\n      // Increase the number of substeps for better granularity\n      final int n = Math.max(5, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n      final double h = (t1 - t0) / n;\n\n      double ta = t0;\n      double ga = g0;\n      double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n      for (int i = 0; i < n; ++i) {\n\n          // Evaluate handler value at the end of the substep\n          tb += h;\n          interpolator.setInterpolatedTime(tb);\n          final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n          // Check for sign change indicating an event\n          if (g0Positive ^ (gb >= 0)) {\n              // There's a sign change; expect an event in this substep\n\n              // Adjust ta slightly if necessary to ensure bracketing\n              if (ga * gb >= 0) {\n                  // If ga and gb have the same sign, adjust ta to create bracketing\n                  ta += 1e-10 * (tb - ta);\n                  interpolator.setInterpolatedTime(ta);\n                  ga = handler.g(ta, interpolator.getInterpolatedState());\n              }\n\n              // Determine the variation direction\n              increasing = gb >= ga;\n\n              // Define the function for root-finding\n              final UnivariateRealFunction f = new UnivariateRealFunction() {\n                  public double value(final double t) throws FunctionEvaluationException {\n                      try {\n                          interpolator.setInterpolatedTime(t);\n                          return handler.g(t, interpolator.getInterpolatedState());\n                      } catch (DerivativeException e) {\n                          throw new FunctionEvaluationException(e, t);\n                      } catch (EventException e) {\n                          throw new FunctionEvaluationException(e, t);\n                      }\n                  }\n              };\n\n              // Use Brent's method for root-finding with specified accuracy\n              final BrentSolver solver = new BrentSolver();\n              solver.setAbsoluteAccuracy(convergence);\n              solver.setMaximalIterationCount(maxIterationCount);\n\n              // Ensure that the endpoints bracket the root\n              double root;\n              if (ga * gb < 0) {\n                  root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n              } else {\n                  // If still not bracketing, try adjusting tb\n                  tb += 1e-10 * (tb - ta);\n                  interpolator.setInterpolatedTime(tb);\n                  gb = handler.g(tb, interpolator.getInterpolatedState());\n                  if (ga * gb < 0) {\n                      root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n                  } else {\n                      // If unable to bracket, skip this substep\n                      continue;\n                  }\n              }\n\n              // Check if the found root is a new event\n              if ((Math.abs(root - ta) <= convergence) &&\n                  (Math.abs(root - previousEventTime) <= convergence)) {\n                  // Ignore if it's a repeat of a previous event\n                  ta = tb;\n                  ga = gb;\n              } else if (Double.isNaN(previousEventTime) ||\n                         (Math.abs(previousEventTime - root) > convergence)) {\n                  pendingEventTime = root;\n                  if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                      // Step should be accepted as it ends exactly at the event\n                      return false;\n                  }\n                  // Set pending event flag and return true to reject the step\n                  pendingEvent = true;\n                  return true;\n              }\n          } else {\n              // No sign change; no event in this substep\n              ta = tb;\n              ga = gb;\n          }\n      }\n\n      // No events found in the entire step\n      pendingEvent = false;\n      pendingEventTime = Double.NaN;\n      return false;\n\n  } catch (FunctionEvaluationException e) {\n      final Throwable cause = e.getCause();\n      if ((cause != null) && (cause instanceof DerivativeException)) {\n          throw (DerivativeException) cause;\n      } else if ((cause != null) && (cause instanceof EventException)) {\n          throw (EventException) cause;\n      }\n      throw new EventException(e);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}