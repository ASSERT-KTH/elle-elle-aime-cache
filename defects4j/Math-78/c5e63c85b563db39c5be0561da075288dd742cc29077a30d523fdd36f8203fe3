{
    "generation": "public boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = t0 + (forward ? convergence : -convergence);\n        for (int i = 0; i < n; ++i) {\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // Check for sign change\n            if (g0Positive ^ (gb >= 0)) {\n                // There is a sign change: an event is expected during this step\n\n                // Define the function for the solver\n                UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n\n                // Configure and use Brent's solver to find the root\n                BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                double root;\n                if (ta <= tb) {\n                    root = solver.solve(f, ta, tb);\n                } else {\n                    root = solver.solve(f, tb, ta);\n                }\n\n                // Check if the root is within convergence tolerance of ta or previous event\n                if ((Math.abs(root - ta) <= convergence) &&\n                    (Math.abs(root - previousEventTime) <= convergence)) {\n                    // Ignore the event if it's too close to the previous one\n                    ta = tb;\n                    ga = gb;\n                } else if (Double.isNaN(previousEventTime) ||\n                           (Math.abs(previousEventTime - root) > convergence)) {\n                    // Set the pending event time\n                    pendingEventTime = root;\n                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        // Accept the step if it ends exactly at the event time\n                        return false;\n                    }\n                    // Set pending event flag\n                    pendingEvent = true;\n                    return true;\n                }\n            } else {\n                // No sign change: no event in this subinterval\n                ta = tb;\n                ga = gb;\n            }\n        }\n\n        // No event found in the entire step\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        Throwable cause = e.getCause();\n        if (cause != null && cause instanceof DerivativeException) {\n            throw (DerivativeException) cause;\n        } else if (cause != null && cause instanceof EventException) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}