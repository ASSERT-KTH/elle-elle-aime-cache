{
    "generation": "public boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        final double t1 = interpolator.getCurrentTime();\n        final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h  = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = ta + h;\n\n        final UnivariateRealFunction f = new UnivariateRealFunction() {\n            public double value(final double t) throws FunctionEvaluationException {\n                try {\n                    interpolator.setInterpolatedTime(t);\n                    return handler.g(t, interpolator.getInterpolatedState());\n                } catch (DerivativeException e) {\n                    throw new FunctionEvaluationException(e, t);\n                } catch (EventException e) {\n                    throw new FunctionEvaluationException(e, t);\n                }\n            }\n        };\n        final BrentSolver solver = new BrentSolver();\n        solver.setAbsoluteAccuracy(convergence);\n        solver.setMaximalIterationCount(maxIterationCount);\n\n        for (int i = 0; i < n; ++i) {\n\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // check events occurrence\n            if (g0Positive ^ (gb >= 0)) {\n\n                // Error was here, we need to adjust ta\n                if (Math.abs(ga) < Math.abs(gb)) {\n                    ta = tb - h;\n                    ga = gb - handler.g(ta, interpolator.getInterpolatedState());\n                }\n\n                final double root = solver.solve(f, ta, tb);\n\n                if ((Math.abs(root - previousEventTime) > convergence)) {\n                    pendingEventTime = root;\n                    pendingEvent = true;\n                    return true;\n                }\n\n            }\n\n            ta = tb;\n            ga = gb;\n            tb += h;\n\n        }\n\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        // Rest of the method\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}