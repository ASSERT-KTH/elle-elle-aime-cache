{
    "generation": "public boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = t0 + (interpolator.isForward()? convergence : -convergence);\n        for (int i = 0; i < n; ++i) {\n\n            // evaluate handler value at the end of the substep\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // check events occurrence\n            if (g0Positive ^ (gb >= 0)) {\n                if (ga * gb > 0) {\n                    // same sign between the two detected events: the first endpoint is most likely a real event, but the one we've found now shouldn't have the same value\n                    tb += interpolator.isForward()? convergence : -convergence;\n                    interpolator.setInterpolatedTime(tb);\n                    gb = handler.g(tb, interpolator.getInterpolatedState());\n                }\n                // now we are sure that one of these two endpoints give a true sign change...\n\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n\n                //...so either we now find the even or a third point with once again another sign change happens\n                final BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                final double root = (ta <= tb)? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n\n                // and we ignore the value found if they are both within the tolerated interval at the same previous event: that's then not considered an event yet\n                if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root - previousEventTime) <= convergence)) {\n                    ta = tb;\n                    ga = gb;\n                } else if (Double.isNaN(previousEventTime) ||\n                               (Math.abs(previousEventTime - root) > convergence)) {\n                    pendingEventTime = root;\n                    // we had an event marked as \"pending\" with a good estimate on its time found during the last call after a previously proposed step where rejected \n                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        return false;\n                    }\n                    pendingEvent = true;\n                    return true;\n                }\n            }\n\n            ta = tb;\n            ga = gb;\n\n        }\n\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n    }\n\n    catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause!= null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause!= null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        } else {\n            throw new EventException(e);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}