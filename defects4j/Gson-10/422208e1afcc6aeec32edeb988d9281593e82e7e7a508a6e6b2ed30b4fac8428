{
    "generation": "private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n    final Gson context, final Field field, final String name,\n    final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n  final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n  // special casing primitives here saves ~5% on Android...\n  JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n  TypeAdapter<?> mapped = null;\n  if (annotation!= null) {\n    mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);\n  }\n  final boolean jsonAdapterPresent = mapped!= null;\n  if (mapped == null) mapped = context.getAdapter(fieldType);\n\n  final TypeAdapter<?> typeAdapter = mapped;\n  return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"}) // the type adapter and field type always agree\n    @Override void write(JsonWriter writer, Object value)\n        throws IOException, IllegalAccessException {\n      Object fieldValue = field.get(value);\n      TypeAdapter t =\n        new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n      if (jsonAdapterPresent && isPrimitive) {\n        t.write(writer, fieldValue.toString());\n      } else {\n        t.write(writer, fieldValue);\n      }\n    }\n    @Override void read(JsonReader reader, Object value)\n        throws IOException, IllegalAccessException {\n      Object fieldValue = typeAdapter.read(reader);\n      if (fieldValue!= null ||!isPrimitive) {\n        if (jsonAdapterPresent && isPrimitive) {\n          fieldValue = parsePrimitive(fieldValue.toString(), fieldType.getRawType());\n        }\n        field.set(value, fieldValue);\n      }\n    }\n    @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {\n      if (!serialized) return false;\n      Object fieldValue = field.get(value);\n      return fieldValue!= value; // avoid recursion for example for Throwable.cause\n    }\n  };\n}\n\nprivate Object parsePrimitive(String value, Class<?> type) {\n  if (type == int.class) return Integer.parseInt(value);\n  if (type == long.class) return Long.parseLong(value);\n  if (type == double.class) return Double.parseDouble(value);\n  if (type == float.class) return Float.parseFloat(value);\n  if (type == short.class) return Short.parseShort(value);\n  if (type == byte.class) return Byte.parseByte(value);\n  if (type == boolean.class) return Boolean.parseBoolean(value);\n  if (type == char.class) return value.charAt(0);\n  throw new AssertionError();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}