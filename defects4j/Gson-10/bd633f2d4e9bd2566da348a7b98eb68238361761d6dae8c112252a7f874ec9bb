{
    "generation": "private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n    final Gson context, final Field field, final String name,\n    final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n  final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n  // special casing primitives here saves ~5% on Android...\n  JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n  TypeAdapter<?> mapped = null;\n  if (annotation != null) {\n    mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);\n  }\n  final boolean jsonAdapterPresent = mapped != null;\n  if (mapped == null) mapped = context.getAdapter(isPrimitive ? Types.newParameterizedTypeWithOwner(null, fieldType.getRawType(), String.class) : fieldType);\n\n  final TypeAdapter<?> typeAdapter = mapped;\n  return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"}) // the type adapter and field type always agree\n    @Override void write(JsonWriter writer, Object value)\n        throws IOException, IllegalAccessException {\n      Object fieldValue = field.get(value);\n      TypeAdapter t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n      t.write(writer, fieldValue != null ? fieldValue.toString() : null);\n    }\n    @Override void read(JsonReader reader, Object value)\n        throws IOException, IllegalAccessException {\n      Object fieldValue = typeAdapter.read(reader);\n      if (fieldValue != null) {\n        field.set(value, convertValue(fieldType.getRawType(), fieldValue));\n      }\n    }\n    @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {\n      if (!serialize) return false;\n      Object fieldValue = field.get(value);\n      return fieldValue != value; // avoid recursion for example for Throwable.cause\n    }\n\n    private Object convertValue(Class<?> type, Object value) {\n      if (type == int.class) return Integer.valueOf((String) value);\n      if (type == double.class) return Double.valueOf((String) value);\n      if (type == boolean.class) return Boolean.valueOf((String) value);\n      if (type == char.class) return Character.valueOf(((String) value).charAt(0));\n      if (type == float.class) return Float.valueOf((String) value);\n      if (type == long.class) return Long.valueOf((String) value);\n      if (type == short.class) return Short.valueOf((String) value);\n      if (type == byte.class) return Byte.valueOf((String) value);\n      throw new IllegalArgumentException(\"Unsupported type: \" + type);\n    }\n  };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}