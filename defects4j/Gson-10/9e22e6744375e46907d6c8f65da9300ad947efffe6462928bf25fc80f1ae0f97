{
    "generation": "private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n    final Gson context, final Field field, final String name,\n    final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n  final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n  JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n  TypeAdapter<?> mapped = null;\n  if (annotation != null) {\n    mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);\n  }\n  final boolean jsonAdapterPresent = mapped != null;\n  if (mapped == null) mapped = context.getAdapter(fieldType);\n\n  final TypeAdapter<?> typeAdapter = mapped;\n  return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n    @Override void write(JsonWriter writer, Object value)\n        throws IOException, IllegalAccessException {\n      Object fieldValue = field.get(value);\n      TypeAdapter t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n      if (jsonAdapterPresent) {\n        t.write(writer, fieldValue);\n      } else {\n        // If no JsonAdapter is present, ensure primitives are serialized correctly\n        if (fieldValue == null) {\n          writer.nullValue();\n        } else if (isPrimitive) {\n          // Use the appropriate method based on the primitive type\n          if (fieldValue instanceof Number) {\n            writer.value((Number) fieldValue);\n          } else if (fieldValue instanceof Boolean) {\n            writer.value((Boolean) fieldValue);\n          } else if (fieldValue instanceof Character) {\n            writer.value(fieldValue.toString());\n          } else {\n            writer.value(fieldValue.toString());\n          }\n        } else {\n          t.write(writer, fieldValue);\n        }\n      }\n    }\n    @Override void read(JsonReader reader, Object value)\n        throws IOException, IllegalAccessException {\n      Object fieldValue = typeAdapter.read(reader);\n      if (fieldValue != null || !isPrimitive) {\n        field.set(value, fieldValue);\n      }\n    }\n    @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {\n      if (!serialized) return false;\n      Object fieldValue = field.get(value);\n      return fieldValue != value; // avoid recursion for example for Throwable.cause\n    }\n  };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}