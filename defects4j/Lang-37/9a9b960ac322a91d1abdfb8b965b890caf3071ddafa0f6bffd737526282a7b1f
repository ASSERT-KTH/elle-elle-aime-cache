{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    // Determine the most specific common superclass of both arrays\n    Class<?> commonType = array1.getClass().getComponentType();\n    for (T element : array2) {\n        if (element != null) {\n            commonType = findCommonSuperclass(commonType, element.getClass());\n        }\n    }\n\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n\n    return joinedArray;\n}\n\nprivate static Class<?> findCommonSuperclass(Class<?> class1, Class<?> class2) {\n    while (class1 != null) {\n        if (class1.isAssignableFrom(class2)) {\n            return class1;\n        }\n        class1 = class1.getSuperclass();\n    }\n    return Object.class; // Fallback to Object if no common superclass is found\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}