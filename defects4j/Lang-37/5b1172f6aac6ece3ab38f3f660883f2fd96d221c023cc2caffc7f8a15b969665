{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    \n    // Find the common component type of both arrays\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n    Class<?> commonType = type1;\n    \n    // If types are different, find the common supertype\n    if (type1 != type2 && type2 != null) {\n        if (type1.isAssignableFrom(type2)) {\n            commonType = type1;\n        } else if (type2.isAssignableFrom(type1)) {\n            commonType = type2;\n        } else {\n            throw new IllegalArgumentException(\"Cannot store elements of type \" + type2.getName() \n                                            + \" in an array of type \" + type1.getName());\n        }\n    }\n    \n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}