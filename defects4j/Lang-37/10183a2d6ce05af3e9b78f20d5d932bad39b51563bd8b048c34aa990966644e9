{
    "generation": "/**\n * <p>Adds all the elements of the given arrays into a new array.</p>\n * <p>The new array contains all of the element of <code>array1</code> followed\n * by all of the elements <code>array2</code>. When an array is returned, it is always\n * a new array.</p>\n *\n * <pre>\n * ArrayUtils.addAll(null, null)     = null\n * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n * ArrayUtils.addAll([], [])         = []\n * ArrayUtils.addAll([null], [null]) = [null, null]\n * ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n * </pre>\n *\n * @param array1  the first array whose elements are added to the new array, may be <code>null</code>\n * @param array2  the second array whose elements are added to the new array, may be <code>null</code>\n * @return The new array, <code>null</code> if both arrays are <code>null</code>.\n *      The type of the new array is the type of the first array,\n *      unless the first array is null, in which case the type is the same as the second array.\n * @since 2.1\n */\n@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    \n    // Determine the component type of the resulting array\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n    Class<?> resultingType = getCommonSupertype(type1, type2);\n    \n    if (resultingType == null) {\n        throw new IllegalArgumentException(\"Incompatible array types: \" + type1 + \" and \" + type2);\n    }\n    \n    T[] joinedArray = (T[]) Array.newInstance(resultingType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}\n\n// Helper method to find the common supertype of two classes\nprivate static Class<?> getCommonSupertype(Class<?> type1, Class<?> type2) {\n    if (type1.isAssignableFrom(type2)) {\n        return type1;\n    } else if (type2.isAssignableFrom(type1)) {\n        return type2;\n    } else {\n        // Traverse up the inheritance hierarchy to find a common supertype\n        while (type1!= Object.class) {\n            type1 = type1.getSuperclass();\n            if (type1.isAssignableFrom(type2)) {\n                return type1;\n            }\n        }\n        return null; // No common supertype found (should not happen in practice)\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}