{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    \n    Class<?> commonSuperType = findCommonSuperType(array1.getClass().getComponentType(), array2.getClass().getComponentType());\n    if (commonSuperType == null) {\n        throw new IllegalArgumentException(\"Incompatible array types: \" + array1.getClass().getComponentType() + \" and \" + array2.getClass().getComponentType());\n    }\n    \n    T[] joinedArray = (T[]) Array.newInstance(commonSuperType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    \n    return joinedArray;\n}\n\nprivate static Class<?> findCommonSuperType(Class<?> type1, Class<?> type2) {\n    while (type1 != null) {\n        if (type1.isAssignableFrom(type2)) {\n            return type1;\n        }\n        type1 = type1.getSuperclass();\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}