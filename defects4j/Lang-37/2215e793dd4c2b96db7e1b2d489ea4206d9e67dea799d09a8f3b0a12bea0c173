{
    "generation": "import java.lang.reflect.Array;\nimport java.util.Objects;\n\npublic class ArrayUtils {\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T[] addAll(T[] array1, T... array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n\n        Class<?> type1 = array1.getClass().getComponentType();\n        Class<?> type2 = array2.getClass().getComponentType();\n\n        // Determine the common component type\n        Class<?> commonType = getCommonComponentType(type1, type2);\n\n        // Create a new array of the common type\n        T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n\n        // Copy elements from array1\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n\n        // Copy elements from array2\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n\n        return joinedArray;\n    }\n\n    private static Class<?> getCommonComponentType(Class<?> type1, Class<?> type2) {\n        if (type1.isAssignableFrom(type2)) {\n            return type1;\n        } else if (type2.isAssignableFrom(type1)) {\n            return type2;\n        } else {\n            // Find the least common ancestor in the inheritance hierarchy\n            Class<?> ancestor = type1;\n            while (!type2.isAssignableFrom(ancestor)) {\n                ancestor = ancestor.getSuperclass();\n                if (ancestor == null) {\n                    throw new IllegalArgumentException(\"Incompatible array types: \" + type1 + \" and \" + type2);\n                }\n            }\n            return ancestor;\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T[] clone(T[] array) {\n        if (array == null) {\n            return null;\n        }\n        return array.clone();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}