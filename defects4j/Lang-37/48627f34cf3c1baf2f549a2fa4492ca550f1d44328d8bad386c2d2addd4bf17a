{
    "generation": "    @SuppressWarnings(\"unchecked\")\n    public static <T> T[] addAll(T[] array1, T... array2) {\n        // If both arrays are null, return null\n        if (array1 == null && array2 == null) {\n            return null;\n        }\n        // Determine the array type\n        Class<?> type1 = (array1 != null) ? array1.getClass().getComponentType() : array2.getClass().getComponentType();\n        Class<?> type2 = (array2 != null && array2.length > 0) ? array2.getClass().getComponentType() : type1;\n        \n        // If there is a mismatch in type, use the common superclass\n        if (!type1.isAssignableFrom(type2)) {\n            Class<?> superType = findCommonSuperClass(type1, type2);\n            type1 = superType;\n        }\n        \n        if (array1 == null) {\n            T[] result = (T[]) Array.newInstance(type1, array2.length);\n            System.arraycopy(array2, 0, result, 0, array2.length);\n            return result;\n        }\n        \n        if (array2 == null) {\n            T[] result = (T[]) Array.newInstance(type1, array1.length);\n            System.arraycopy(array1, 0, result, 0, array1.length);\n            return result;\n        }\n        \n        // Create a new array with the determined common type\n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        \n        return joinedArray;\n    }\n    \n    private static Class<?> findCommonSuperClass(Class<?> class1, Class<?> class2) {\n        while (!class1.isAssignableFrom(class2)) {\n            class1 = class1.getSuperclass();\n        }\n        return class1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}