{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        return null;\n    } else if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    \n    // Determine the most specific common supertype of array1 and array2\n    final Class<?> commonType = array1.getClass().getComponentType().isAssignableFrom(array2.getClass().getComponentType())\n            ? array2.getClass().getComponentType()\n            : array1.getClass().getComponentType();\n\n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n\n    for (int i = 0; i < array2.length; i++) {\n        if (!commonType.isInstance(array2[i])) {\n            throw new IllegalArgumentException(\"Array contains incompatible types.\");\n        }\n        joinedArray[array1.length + i] = array2[i];\n    }\n\n    return joinedArray;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}