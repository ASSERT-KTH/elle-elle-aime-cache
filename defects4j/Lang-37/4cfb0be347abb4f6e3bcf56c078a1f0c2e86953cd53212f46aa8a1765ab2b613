{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    if (type1.isAssignableFrom(type2)) {\n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    } else {\n        // Use a common supertype if direct assignment is not possible\n        Class<?> commonType = findCommonSuperclass(type1, type2);\n        T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }\n}\n\nprivate static Class<?> findCommonSuperclass(Class<?> c1, Class<?> c2) {\n    if (c1 == c2) return c1;\n    if (c1.isAssignableFrom(c2)) return c1;\n    if (c2.isAssignableFrom(c1)) return c2;\n    if (c1.isPrimitive() || c2.isPrimitive()) return Object.class;\n    \n    Class<?> superClass = c1.getSuperclass();\n    while (superClass != null && !superClass.isAssignableFrom(c2)) {\n        superClass = superClass.getSuperclass();\n    }\n    return superClass != null ? superClass : Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}