{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n    \n    // If the types are different, find the common supertype\n    if (type2 != null && !type1.isAssignableFrom(type2)) {\n        Class<?> commonType = findCommonSuperType(type1, type2);\n        T[] newArray1 = (T[]) copyArrayToNewType(array1, commonType);\n        T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n        System.arraycopy(newArray1, 0, joinedArray, 0, array1.length);\n        try {\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } catch (ArrayStoreException e) {\n            throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \"\n                    + type1.getName(), e);\n        }\n        return joinedArray;\n    }\n    \n    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    try {\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    } catch (ArrayStoreException e) {\n        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \"\n                + type1.getName(), e);\n    }\n    return joinedArray;\n}\n\nprivate static Class<?> findCommonSuperType(Class<?> type1, Class<?> type2) {\n    if (type1.isAssignableFrom(type2)) {\n        return type1;\n    }\n    if (type2.isAssignableFrom(type1)) {\n        return type2;\n    }\n    if (type1.isInterface() || type2.isInterface()) {\n        return Object.class;\n    }\n    Class<?> superClass = type1;\n    while (superClass != Object.class) {\n        if (superClass.isAssignableFrom(type2)) {\n            return superClass;\n        }\n        superClass = superClass.getSuperclass();\n    }\n    return Object.class;\n}\n\nprivate static Object[] copyArrayToNewType(Object[] array, Class<?> newType) {\n    Object[] newArray = (Object[]) Array.newInstance(newType, array.length);\n    System.arraycopy(array, 0, newArray, 0, array.length);\n    return newArray;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}