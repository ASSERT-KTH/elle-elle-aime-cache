{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    \n    // Determine the common super type of both arrays\n    Class<?> type1 = array1.getClass().getComponentType();\n    Class<?> type2 = array2.getClass().getComponentType();\n    Class<?> commonType = findCommonSuperType(type1, type2);\n    \n    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    try {\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    } catch (ArrayStoreException e) {\n        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in array of \" + commonType.getName(), e);\n    }\n    \n    return joinedArray;\n}\n\n// Helper method to find the common super type\nprivate static Class<?> findCommonSuperType(Class<?> type1, Class<?> type2) {\n    if (type1.isAssignableFrom(type2)) {\n        return type1;\n    }\n    if (type2.isAssignableFrom(type1)) {\n        return type2;\n    }\n    // Find the common super type\n    while (!type1.equals(Object.class)) {\n        type2 = type2.getSuperclass();\n        if (type2 == null) {\n            type1 = type1.getSuperclass();\n            type2 = type2 == null ? Object.class : type2;\n        } else if (type1.isAssignableFrom(type2)) {\n            return type2;\n        }\n    }\n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}