{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    final Class<?> resultType = findCommonSuperclass(type1, type2);\n    \n    T[] joinedArray = (T[]) Array.newInstance(resultType, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    try {\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    } catch (ArrayStoreException e) {\n        // If we can't store array2 elements in the result array, throw IllegalArgumentException\n        throw new IllegalArgumentException(\"Incompatible array types\", e);\n    }\n    return joinedArray;\n}\n\nprivate static Class<?> findCommonSuperclass(Class<?> c1, Class<?> c2) {\n    if (c1 == c2) {\n        return c1;\n    }\n    if (c1.isAssignableFrom(c2)) {\n        return c1;\n    }\n    if (c2.isAssignableFrom(c1)) {\n        return c2;\n    }\n    if (c1.isPrimitive() || c2.isPrimitive()) {\n        return Object.class;\n    }\n    Class<?> superClass = c1;\n    while (superClass != Object.class) {\n        if (superClass.isAssignableFrom(c2)) {\n            return superClass;\n        }\n        superClass = superClass.getSuperclass();\n    }\n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}