{
    "generation": "Object returnValueFor(Class<?> type) {\n    if (Primitives.isPrimitiveOrWrapper(type)) {\n        return Primitives.defaultValueForPrimitiveOrWrapper(type);\n        //new instances are used instead of Collections.emptyList(), etc.\n        //to avoid UnsupportedOperationException if code under test modifies returned collection\n    } else if (Iterable.class.isAssignableFrom(type)) { // Fix: added support for Iterable\n        return Collections.emptyList();\n    } else if (Collection.class.isAssignableFrom(type)) {\n        if (Set.class.isAssignableFrom(type)) {\n            if (SortedSet.class.isAssignableFrom(type)) {\n                return new TreeSet<Object>();\n            } else if (LinkedHashSet.class.isAssignableFrom(type)) {\n                return new LinkedHashSet<Object>();\n            } else if (HashSet.class.isAssignableFrom(type)) {\n                return new HashSet<Object>();\n            } else {\n                return new HashSet<Object>();\n            }\n        } else if (List.class.isAssignableFrom(type)) {\n            if (LinkedList.class.isAssignableFrom(type)) {\n                return new LinkedList<Object>();\n            } else if (ArrayList.class.isAssignableFrom(type)) {\n                return new ArrayList<Object>();\n            } else {\n                return new LinkedList<Object>();\n            }\n        } else {\n            return new LinkedList<Object>();\n        }\n    } else if (Map.class.isAssignableFrom(type)) {\n        if (SortedMap.class.isAssignableFrom(type)) {\n            if (TreeMap.class.isAssignableFrom(type)) {\n                return new TreeMap<Object, Object>();\n            } else {\n                return new TreeMap<Object, Object>();\n            }\n        } else if (LinkedHashMap.class.isAssignableFrom(type)) {\n            return new LinkedHashMap<Object, Object>();\n        } else if (HashMap.class.isAssignableFrom(type)) {\n            return new HashMap<Object, Object>();\n        } else {\n            return new HashMap<Object, Object>();\n        }\n    }\n    //Let's not care about the rest of collections.\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}