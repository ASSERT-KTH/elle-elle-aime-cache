{
    "generation": "private static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n        && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n\n    while (i < input.length) {\n        int o = input[i];\n        if ((o & 0x80) == 0) {\n            i++; // ASCII\n            continue;\n        }\n\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            if (i + 1 >= input.length) return false; // Not enough bytes\n            int end = i + 1;\n            i++;\n            o = input[i];\n            if ((o & 0xC0)!= 0x80) return false;\n        } else if ((o & 0xF0) == 0xE0) {\n            if (i + 2 >= input.length) return false; // Not enough bytes\n            int end = i + 2;\n            i++;\n            for (int j = 1; j < 2; j++) {\n                i++;\n                if (i >= input.length) return false; // Not enough bytes\n                o = input[i];\n                if ((o & 0xC0)!= 0x80) return false;\n            }\n        } else if ((o & 0xF8) == 0xF0) {\n            if (i + 3 >= input.length) return false; // Not enough bytes\n            int end = i + 3;\n            i++;\n            for (int j = 1; j < 3; j++) {\n                i++;\n                if (i >= input.length) return false; // Not enough bytes\n                o = input[i];\n                if ((o & 0xC0)!= 0x80) return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}