{
    "generation": "/**\n * Checks if the provided byte array appears to be encoded in UTF-8.\n * \n * @param input the byte array to check\n * @return true if the array looks like UTF-8, false otherwise\n */\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n        && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n\n    for (; i < input.length; ++i) {\n        int o = input[i];\n        if ((o & 0x80) == 0) {\n            continue; // ASCII\n        }\n\n        // UTF-8 leading:\n        int end;\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n\n        // Ensure we don't go out of bounds\n        end = Math.min(end, input.length);\n\n        for (i++; i < end; ++i) {\n            o = input[i];\n            if ((o & 0xC0)!= 0x80) {\n                return false;\n            }\n        }\n        // adjust outer loop counter\n        --i;\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}