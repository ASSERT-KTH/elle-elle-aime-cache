{
    "generation": "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    // Check for ZIP and JAR archives\n    final byte[] signature = new byte[4]; // ZIP and JAR signatures are 4 bytes\n    in.mark(signature.length);\n    int signatureLength = in.read(signature);\n    in.reset();\n    if (signatureLength == signature.length) {\n        if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n            return new ZipArchiveInputStream(in);\n        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n            return new JarArchiveInputStream(in);\n        }\n    }\n\n    // Check for AR archives\n    in.mark(signature.length);\n    signatureLength = in.read(signature);\n    in.reset();\n    if (signatureLength == signature.length && ArArchiveInputStream.matches(signature, signatureLength)) {\n        return new ArArchiveInputStream(in);\n    }\n\n    // Check for CPIO archives\n    in.mark(signature.length);\n    signatureLength = in.read(signature);\n    in.reset();\n    if (signatureLength == signature.length && CpioArchiveInputStream.matches(signature, signatureLength)) {\n        return new CpioArchiveInputStream(in);\n    }\n\n    // Check for DUMP archives\n    final byte[] dumpsig = new byte[32];\n    in.mark(dumpsig.length);\n    signatureLength = in.read(dumpsig);\n    in.reset();\n    if (signatureLength == dumpsig.length && DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n        return new DumpArchiveInputStream(in);\n    }\n\n    // Check for TAR archives\n    final byte[] tarheader = new byte[512];\n    in.mark(tarheader.length);\n    signatureLength = in.read(tarheader);\n    in.reset();\n    if (signatureLength == tarheader.length && TarArchiveInputStream.matches(tarheader, signatureLength)) {\n        return new TarArchiveInputStream(in);\n    }\n\n    // Additional check for TAR archives as per COMPRESS-117\n    try {\n        TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n        tais.getNextEntry();\n        return new TarArchiveInputStream(in);\n    } catch (Exception e) {\n        // Not a TAR archive, ignore\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}