{
    "generation": "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    // BufferedInputStream through a BufferedDataInputStream works better for some InputStreams\n    final BufferedInputStream bufferedInput = new BufferedInputStream(in);\n    final DataInputStream dataInput = new DataInputStream(bufferedInput);\n\n    try {\n        byte[] signature = new byte[12];\n        dataInput.mark(signature.length);\n        int signatureLength = dataInput.read(signature);\n        dataInput.reset();\n        if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n            return new ZipArchiveInputStream(bufferedInput);\n        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n            return new JarArchiveInputStream(bufferedInput);\n        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n            return new ArArchiveInputStream(bufferedInput);\n        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n            return new CpioArchiveInputStream(bufferedInput);\n        }\n\n        // Dump needs a bigger buffer to check the signature;\n        signature = new byte[32];\n        dataInput.mark(signature.length);\n        signatureLength = dataInput.read(signature);\n        dataInput.reset();\n        if (DumpArchiveInputStream.matches(signature, signatureLength)) {\n            return new DumpArchiveInputStream(bufferedInput);\n        }\n\n        // Tar needs an even bigger buffer to check the signature; read the first block\n        final byte[] tarheader = new byte[512];\n        dataInput.mark(tarheader.length);\n        signatureLength = dataInput.read(tarheader);\n        dataInput.reset();\n        if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n            return new TarArchiveInputStream(bufferedInput);\n        }\n        // COMPRESS-117 - improve auto-recognition\n        try {\n            TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n            tais.getNextEntry();\n            return new TarArchiveInputStream(bufferedInput);\n        } catch (Exception e) { // NOPMD\n            // can generate IllegalArgumentException as well as IOException\n            // autodetection, simply not a TAR\n            // ignored\n        }\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}