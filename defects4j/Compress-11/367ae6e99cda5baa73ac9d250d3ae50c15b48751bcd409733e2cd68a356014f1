{
    "generation": "public ArchiveInputStream createArchiveInputStream(final InputStream in) throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    try {\n        final byte[] signature = new byte[12];\n        readSignature(in, signature);\n\n        if (ZipArchiveInputStream.matches(signature, signature.length)) {\n            return new ZipArchiveInputStream(in);\n        } else if (JarArchiveInputStream.matches(signature, signature.length)) {\n            return new JarArchiveInputStream(in);\n        } else if (ArArchiveInputStream.matches(signature, signature.length)) {\n            return new ArArchiveInputStream(in);\n        } else if (CpioArchiveInputStream.matches(signature, signature.length)) {\n            return new CpioArchiveInputStream(in);\n        }\n\n        final byte[] dumpsig = new byte[32];\n        readSignature(in, dumpsig);\n\n        if (DumpArchiveInputStream.matches(dumpsig, dumpsig.length)) {\n            return new DumpArchiveInputStream(in);\n        }\n\n        final byte[] tarheader = new byte[512];\n        readSignature(in, tarheader);\n\n        if (TarArchiveInputStream.matches(tarheader, tarheader.length)) {\n            return new TarArchiveInputStream(in);\n        }\n\n        // COMPRESS-117 - improve auto-recognition\n        try {\n            TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n            tais.getNextEntry();\n            return new TarArchiveInputStream(in);\n        } catch (Exception e) {\n            // Not a TAR, ignored\n        }\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}\n\nprivate void readSignature(InputStream in, byte[] signature) throws IOException {\n    in.mark(signature.length);\n    int signatureLength = in.read(signature);\n    in.reset();\n\n    if (signatureLength < signature.length) {\n        throw new IOException(\"Stream does not contain enough data to determine the archive format.\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}