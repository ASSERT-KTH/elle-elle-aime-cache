{
    "generation": "/**\n * Create an archive input stream from an input stream, autodetecting\n * the archive type from the first few bytes of the stream. The InputStream\n * must support marks, like BufferedInputStream.\n *\n * @param in the input stream\n * @return the archive input stream\n * @throws ArchiveException if the archiver name is not known\n * @throws IllegalArgumentException if the stream is null or does not support mark\n */\npublic ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    final byte[] signature = new byte[512];\n    try {\n        in.mark(signature.length);\n        int signatureLength = in.read(signature);\n        in.reset();\n        if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n            return new ZipArchiveInputStream(new LimitedInputStream(in, ZipArchiveInputStream.getSignature().length));\n        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n            return new JarArchiveInputStream(new LimitedInputStream(in, JarArchiveInputStream.getSignature().length));\n        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n            return new ArArchiveInputStream(new LimitedInputStream(in, ArArchiveInputStream.getSignature().length));\n        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n            return new CpioArchiveInputStream(new LimitedInputStream(in, signatureLength));\n        } else if (DumpArchiveInputStream.matches(signature, signatureLength)) {\n            return new DumpArchiveInputStream(new LimitedInputStream(in, DumpArchiveInputStream.getSignature().length));\n        } else if (TarArchiveInputStream.matches(signature, signatureLength)) {\n            // COMPRESS-117 - improve auto-recognition by checking entries\n            try {\n                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(signature));\n                tais.getNextEntry();\n                // If no further exception is thrown, it is a TAR\n                return new TarArchiveInputStream(new LimitedInputStream(in, signatureLength));\n            } catch (Exception e) {\n                // Not a TAR after all\n                throw new ArchiveException(\"No Archiver found for the stream signature\");\n            }\n        }\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}