{
    "generation": "/**\n * Create an archive input stream from an input stream, autodetecting\n * the archive type from the first few bytes of the stream. The InputStream\n * must support marks, like BufferedInputStream.\n * \n * @param in the input stream\n * @return the archive input stream\n * @throws ArchiveException if the archiver name is not known\n * @throws IllegalArgumentException if the stream is null or does not support mark\n */\npublic ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    final byte[] signature = new byte[12];\n    in.mark(signature.length);\n    try {\n        int signatureLength = in.read(signature);\n        in.reset();\n        if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n            return new ZipArchiveInputStream(in);\n        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n            return new JarArchiveInputStream(in);\n        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n            return new ArArchiveInputStream(in);\n        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n            return new CpioArchiveInputStream(in);\n        }\n\n        // Dump needs a bigger buffer to check the signature;\n        final byte[] dumpsig = new byte[32];\n        in.mark(dumpsig.length);\n        signatureLength = in.read(dumpsig);\n        in.reset();\n        if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n            return new DumpArchiveInputStream(in);\n        }\n\n        // Tar needs an even bigger buffer to check the signature; read the first block\n        final byte[] tarheader = new byte[512];\n        in.mark(tarheader.length);\n        signatureLength = in.read(tarheader);\n        in.reset();\n        if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n            return new TarArchiveInputStream(in);\n        }\n        //COMPRESS-117 - improve auto-recognition\n        try {\n            TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n            if (tais.getNextEntry()!= null) { // Check if getNextEntry returns non-null\n                return new TarArchiveInputStream(in);\n            }\n        } catch (Exception e) { // NOPMD\n            // can generate IllegalArgumentException as well as IOException\n            // autodetection, simply not a TAR\n            // ignored\n        }\n        // If all archiver checks fail and the input stream is too short or doesn't resemble an archive,\n        // don't attempt to create an archive input stream for it\n        if (in.available() < 512 || isObviouslyNotAnArchive(signature, signatureLength)) {\n            throw new ArchiveException(\"No Archiver found for the stream signature\");\n        }\n        // Fall back to attempting to create a TarArchiveInputStream if all else fails\n        return new TarArchiveInputStream(in);\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n}\n\n// Helper method to determine if the input stream obviously doesn't contain an archive\nprivate boolean isObviouslyNotAnArchive(byte[] signature, int signatureLength) {\n    // Simple heuristic: if the signature contains mostly ASCII printable characters,\n    // it's likely not an archive.\n    int asciiCount = 0;\n    for (int i = 0; i < signatureLength; i++) {\n        if (signature[i] >= 32 && signature[i] < 127) { // ASCII printable range\n            asciiCount++;\n        }\n    }\n    return (double) asciiCount / signatureLength > 0.7; // Adjust threshold as needed\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}