{
    "generation": "/**\n * Create an archive input stream from an input stream, autodetecting\n * the archive type from the first few bytes of the stream. The InputStream\n * must support marks, like BufferedInputStream.\n *\n * @param in the input stream\n * @return the archive input stream\n * @throws ArchiveException if the archiver name is not known\n * @throws IllegalArgumentException if the stream is null or does not support mark\n */\npublic ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    final byte[] buffer = new byte[512];\n    in.mark(buffer.length);\n    try {\n        int bytesRead = in.read(buffer);\n        in.reset();\n\n        if (bytesRead == -1) {\n            throw new ArchiveException(\"Empty input stream\");\n        }\n\n        if (ZipArchiveInputStream.matches(buffer, bytesRead)) {\n            return new ZipArchiveInputStream(in);\n        } else if (JarArchiveInputStream.matches(buffer, bytesRead)) {\n            return new JarArchiveInputStream(in);\n        } else if (ArArchiveInputStream.matches(buffer, bytesRead)) {\n            return new ArArchiveInputStream(in);\n        } else if (CpioArchiveInputStream.matches(buffer, bytesRead)) {\n            return new CpioArchiveInputStream(in);\n        } else if (DumpArchiveInputStream.matches(buffer, bytesRead)) {\n            return new DumpArchiveInputStream(in);\n        } else if (TarArchiveInputStream.matches(buffer, bytesRead) || isTarArchive(buffer)) {\n            return new TarArchiveInputStream(in);\n        }\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}\n\nprivate boolean isTarArchive(byte[] buffer) throws IOException {\n    try (TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(buffer))) {\n        return tais.getNextEntry() != null;\n    } catch (Exception e) {\n        return false;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}