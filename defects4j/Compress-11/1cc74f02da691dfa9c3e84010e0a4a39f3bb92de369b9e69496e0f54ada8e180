{
    "generation": "public ArchiveInputStream createArchiveInputStream(final InputStream in) throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    try {\n        final byte[] signature = new byte[512];\n        in.mark(signature.length);\n        int signatureLength = in.read(signature);\n        in.reset();\n\n        if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n            return new ZipArchiveInputStream(in);\n        }\n\n        if (JarArchiveInputStream.matches(signature, signatureLength)) {\n            return new JarArchiveInputStream(in);\n        }\n\n        if (ArArchiveInputStream.matches(signature, signatureLength)) {\n            return new ArArchiveInputStream(in);\n        }\n\n        if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n            return new CpioArchiveInputStream(in);\n        }\n\n        if (DumpArchiveInputStream.matches(signature, signatureLength)) {\n            return new DumpArchiveInputStream(in);\n        }\n\n        if (TarArchiveInputStream.matches(signature, signatureLength)) {\n            return new TarArchiveInputStream(in);\n        }\n\n        // COMPRESS-117 - improve auto-recognition\n        TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(signature, 0, signatureLength));\n        if (tais.getNextEntry() != null) {\n            tais.close(); // ensure internal stream is free\n            return new TarArchiveInputStream(in);\n        }\n        tais.close(); // ensure internal stream is free\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}