{
    "generation": "/**\n * Create an archive input stream from an input stream, autodetecting\n * the archive type from the first few bytes of the stream. The InputStream\n * must support marks, like BufferedInputStream.\n * \n * @param in the input stream\n * @return the archive input stream\n * @throws ArchiveException if the archiver name is not known\n * @throws IllegalArgumentException if the stream is null or does not support mark\n */\npublic ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    // Define the signature lengths for different archive types\n    final int zipSigLen = 4;\n    final int jarSigLen = 4;\n    final int arSigLen = 8;\n    final int cpioSigLen = 2;\n    final int dumpSigLen = 32;\n    final int tarSigLen = 512;\n\n    // Read the maximum signature length needed for any archive type\n    final int maxSigLen = Math.max(Math.max(zipSigLen, jarSigLen), Math.max(arSigLen, Math.max(cpioSigLen, Math.max(dumpSigLen, tarSigLen))));\n\n    // Read the signature bytes\n    final byte[] signature = new byte[maxSigLen];\n    in.mark(maxSigLen);\n    try {\n        int signatureLength = in.read(signature);\n        in.reset();\n\n        // Check for each archive type\n        if (signatureLength >= zipSigLen && ZipArchiveInputStream.matches(signature, signatureLength)) {\n            return new ZipArchiveInputStream(in);\n        } else if (signatureLength >= jarSigLen && JarArchiveInputStream.matches(signature, signatureLength)) {\n            return new JarArchiveInputStream(in);\n        } else if (signatureLength >= arSigLen && ArArchiveInputStream.matches(signature, signatureLength)) {\n            return new ArArchiveInputStream(in);\n        } else if (signatureLength >= cpioSigLen && CpioArchiveInputStream.matches(signature, signatureLength)) {\n            return new CpioArchiveInputStream(in);\n        } else if (signatureLength >= dumpSigLen && DumpArchiveInputStream.matches(signature, signatureLength)) {\n            return new DumpArchiveInputStream(in);\n        } else if (signatureLength >= tarSigLen && TarArchiveInputStream.matches(signature, signatureLength)) {\n            return new TarArchiveInputStream(in);\n        } else {\n            // Try to create a TarArchiveInputStream as a last resort\n            try {\n                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(signature));\n                tais.getNextEntry();\n                return new TarArchiveInputStream(in);\n            } catch (Exception e) {\n                // Ignore and proceed to throw ArchiveException\n            }\n        }\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}