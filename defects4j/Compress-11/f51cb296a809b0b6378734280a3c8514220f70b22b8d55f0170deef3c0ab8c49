{
    "generation": "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    final byte[] signature = new byte[12];\n    final ByteArrayOutputStream out = new ByteArrayOutputStream();\n    try {\n        int bytesRead;\n        while ((bytesRead = in.read(signature, 0, Math.min(signature.length, out.size() - out.size()))) != -1) {\n            out.write(signature, 0, bytesRead);\n            if (out.size() >= signature.length) {\n                break;\n            }\n        }\n        final byte[] data = out.toByteArray();\n        if (ZipArchiveInputStream.matches(data)) {\n            return new ZipArchiveInputStream(new ByteArrayInputStreamWithMark(data));\n        } else if (JarArchiveInputStream.matches(data)) {\n            return new JarArchiveInputStream(new ByteArrayInputStreamWithMark(data));\n        } else if (ArArchiveInputStream.matches(data)) {\n            return new ArArchiveInputStream(new ByteArrayInputStreamWithMark(data));\n        } else if (CpioArchiveInputStream.matches(data)) {\n            return new CpioArchiveInputStream(new ByteArrayInputStreamWithMark(data));\n        } else if (DumpArchiveInputStream.matches(data)) {\n            return new DumpArchiveInputStream(new ByteArrayInputStreamWithMark(data));\n        } else if (TarArchiveInputStream.matches(data)) {\n            return new TarArchiveInputStream(new ByteArrayInputStreamWithMark(data));\n        } else {\n            // COMPRESS-117 - improve auto-recognition\n            try (TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(data))) {\n                if (tais.getNextEntry() != null) {\n                    return new TarArchiveInputStream(new ByteArrayInputStreamWithMark(data));\n                }\n            } catch (Exception e) {\n                // autodetection, simply not a TAR\n                // ignored\n            }\n        }\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not read input stream.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}\n\nprivate static class ByteArrayInputStreamWithMark extends ByteArrayInputStream {\n    ByteArrayInputStreamWithMark(byte[] buf) {\n        super(buf);\n    }\n\n    @Override\n    public boolean markSupported() {\n        return true;\n    }\n\n    @Override\n    public void mark(int readlimit) {\n        // do nothing\n    }\n\n    @Override\n    public void reset() {\n        pos = 0;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}