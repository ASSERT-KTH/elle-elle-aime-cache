{
    "generation": "/**\n * Create an archive input stream from an input stream, autodetecting\n * the archive type from the first few bytes of the stream. The InputStream\n * must support marks, like BufferedInputStream.\n * \n * @param in the input stream\n * @return the archive input stream\n * @throws ArchiveException if the archiver name is not known\n * @throws IllegalArgumentException if the stream is null or does not support mark\n */\npublic ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    final byte[] signature = new byte[512]; // Increased buffer size to reduce false positives\n    in.mark(signature.length);\n    try {\n        int signatureLength = in.read(signature);\n        in.reset();\n        \n        if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n            return new ZipArchiveInputStream(in);\n        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n            return new JarArchiveInputStream(in);\n        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n            return new ArArchiveInputStream(in);\n        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n            return new CpioArchiveInputStream(in);\n        } else if (DumpArchiveInputStream.matches(signature, signatureLength)) {\n            return new DumpArchiveInputStream(in);\n        }\n\n        // Additional check to prevent false TAR positives\n        if (TarArchiveInputStream.matches(signature, signatureLength)) {\n            try {\n                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(signature, 0, signatureLength));\n                tais.getNextEntry();\n                return new TarArchiveInputStream(in);\n            } catch (Exception e) { \n                // Not a valid TAR archive, ignore and continue\n            }\n        }\n\n        // If no archive type is detected and the stream is too short, it's likely not an archive\n        if (signatureLength < 128) { // Arbitrary threshold, may need adjustment\n            throw new ArchiveException(\"No Archiver found for the stream signature\");\n        }\n\n        // Attempt to read more data to improve detection\n        final byte[] additionalData = new byte[1024];\n        in.mark(additionalData.length);\n        int additionalLength = in.read(additionalData);\n        in.reset();\n\n        // Re-check with combined data\n        byte[] combined = new byte[signatureLength + additionalLength];\n        System.arraycopy(signature, 0, combined, 0, signatureLength);\n        System.arraycopy(additionalData, 0, combined, signatureLength, additionalLength);\n\n        if (TarArchiveInputStream.matches(combined, combined.length)) {\n            try {\n                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(combined));\n                tais.getNextEntry();\n                return new TarArchiveInputStream(in);\n            } catch (Exception e) { \n                // Not a valid TAR archive, ignore\n            }\n        }\n\n        throw new ArchiveException(\"No Archiver found for the stream signature\");\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}