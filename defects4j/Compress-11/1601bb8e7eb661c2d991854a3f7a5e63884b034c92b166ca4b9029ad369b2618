{
    "generation": "/**\n* Create an archive input stream from an input stream, autodetecting\n* the archive type from the first few bytes of the stream. The InputStream\n* must support marks, like BufferedInputStream.\n*\n* @param in the input stream\n* @return the archive input stream\n* @throws ArchiveException if the archiver name is not known or if a matching archiver fails to initialize\n* @throws IllegalArgumentException if the stream is null or does not support mark\n*/\npublic ArchiveInputStream createArchiveInputStream(final InputStream in)\n        throws ArchiveException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n\n    try {\n        final int bufferSize = Math.max(ZipArchiveInputStream.MAXIMUM_ZIP_ENTRY_COMMENT_LENGTH, Math.max(DumpArchiveInputStream.MAXIMUM_HEADER_LENGTH, TarArchiveInputStream.ARCHIVE_RECORD_SIZE));\n        final byte[] buffer = new byte[bufferSize];\n        in.mark(bufferSize);\n        int signatureLength = in.read(buffer);\n        in.reset();\n\n        if (ZipArchiveInputStream.matches(buffer, signatureLength)) {\n            return new ZipArchiveInputStream(new BufferedInputStream(in));\n        } else if (JarArchiveInputStream.matches(buffer, signatureLength)) {\n            return new JarArchiveInputStream(new BufferedInputStream(in));\n        } else if (ArArchiveInputStream.matches(buffer, signatureLength)) {\n            return new ArArchiveInputStream(new BufferedInputStream(in));\n        } else if (CpioArchiveInputStream.matches(buffer, signatureLength)) {\n            return new CpioArchiveInputStream(new BufferedInputStream(in));\n        } else if (DumpArchiveInputStream.matches(buffer, signatureLength)) {\n            return new DumpArchiveInputStream(new BufferedInputStream(in));\n        } else if (TarArchiveInputStream.matches(buffer, signatureLength)) {\n            return new TarArchiveInputStream(new BufferedInputStream(in), TarArchiveInputStream.DEFAULT_EOF_BEHAVIOR); // Ensure this behaves the same way as before for this case\n        } else {\n            // COMPRESS-117 - improve auto-recognition\n            try {\n                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(buffer));\n                if (tais.getNextEntry() != null) {\n                    throw new ArchiveException(\"Invalid TAR archive. First entry not supported.\");\n                }\n            } catch (Exception e) {\n                // not a TAR\n                throw new ArchiveException(\"No Archiver found for the stream signature\", e);\n            }\n        }\n    } catch (IOException e) {\n        throw new ArchiveException(\"Could not use reset and mark operations.\", e);\n    }\n\n    throw new ArchiveException(\"No Archiver found for the stream signature\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}