{
    "generation": "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n\n  // DiagnosticGroups override the plain checkTypes option.\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  }\n\n  // If DiagnosticGroups did not override the plain checkTypes option, and checkTypes is enabled,\n  // then turn off the parser type warnings, unless globalThis check is enabled.\n  if (options.checkTypes && !options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF);\n  }\n\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n  }\n\n  if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR);\n  }\n\n  // Initialize the warnings guard.\n  List<WarningsGuard> guards = Lists.newArrayList();\n  guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n  guards.add(options.getWarningsGuard());\n\n  ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n\n  // All passes must run the variable check. This synthesizes variables later so that the compiler doesn't crash.\n  // It also checks the externs file for validity. If you don't want to warn about missing variable declarations,\n  // we shut that specific error off, unless specifically enabled by the user.\n  if (!options.checkSymbols && !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n    composedGuards.addGuard(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n  }\n\n  this.warningsGuard = composedGuards;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}