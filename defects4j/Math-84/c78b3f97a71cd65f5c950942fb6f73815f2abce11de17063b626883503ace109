{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // Save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // Perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // Compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // Accept the reflected simplex\n                simplex = evaluateNewSimplex(original, 1.0, comparator);\n            } else if (comparator.compare(expanded, best) < 0) {\n                // Accept the expanded simplex\n                simplex = evaluateNewSimplex(original, khi, comparator);\n            }\n        } else {\n            // Compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // Accept the contracted simplex\n                simplex = evaluateNewSimplex(original, gamma, comparator);\n            } else {\n                // Perform a shrink step\n                simplex = evaluateNewSimplex(original, 0.5, comparator);\n            }\n        }\n\n        // Check convergence\n        if (isConverged()) {\n            break;\n        }\n\n        // Check if maximum iterations reached\n        if (getIterations() >= getMaxIterations()) {\n            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}