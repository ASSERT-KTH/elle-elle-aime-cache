{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        \n        // Evaluate the current best point\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        \n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = new RealPointValuePair[] { reflected, original[1], original[2] };\n            } else {\n                // accept the expanded simplex\n                simplex = new RealPointValuePair[] { expanded, original[1], original[2] };\n            }\n\n        } else {\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = new RealPointValuePair[] { contracted, original[1], original[2] };\n            } else {\n                // perform a shrink step\n                simplex = shrinkSimplex(original, comparator);\n            }\n        }\n\n        // check convergence\n        if (isConverged(comparator)) {\n            return;\n        }\n\n        // Ensure we do not exceed the maximum number of evaluations\n        if (getEvaluations() >= getMaxEvaluations()) {\n            throw new MaxIterationsExceededException(getMaxIterations());\n        }\n\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}