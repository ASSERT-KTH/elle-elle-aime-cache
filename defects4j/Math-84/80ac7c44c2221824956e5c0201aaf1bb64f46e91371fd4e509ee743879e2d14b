{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n        } else {\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                // do nothing here, as the contracted simplex is already stored in 'simplex'\n            } else {\n                // perform a shrink step\n                RealPointValuePair[] shrunkSimplex = new RealPointValuePair[simplex.length];\n                shrunkSimplex[0] = simplex[0];\n                for (int i = 1; i < simplex.length; ++i) {\n                    final double[] xSmallest = simplex[0].getPointRef();\n                    final double[] xOriginal = original[i].getPointRef();\n                    final double[] xSmallestToOriginal = new double[xSmallest.length];\n                    for (int j = 0; j < xSmallest.length; ++j) {\n                        xSmallestToOriginal[j] = xOriginal[j] - xSmallest[j];\n                    }\n                    final double[] xNew = new double[xSmallest.length];\n                    for (int j = 0; j < xSmallest.length; ++j) {\n                        xNew[j] = xSmallest[j] + sigma * xSmallestToOriginal[j];\n                    }\n                    shrunkSimplex[i] = new RealPointValuePair(xNew, Double.NaN, false);\n                }\n                simplex = shrunkSimplex;\n                evaluateSimplex(comparator);\n            }\n        }\n\n        // Check convergence\n        final int iter = getIterations();\n        if (iter >= getMaxIterations()) {\n            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));\n        }\n        if (getConvergenceChecker().converged(iter, original[0], simplex[0])) {\n            return;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}