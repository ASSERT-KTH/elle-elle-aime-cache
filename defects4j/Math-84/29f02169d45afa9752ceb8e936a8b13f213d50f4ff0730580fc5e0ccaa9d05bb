{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0 && comparator.compare(reflected, original[simplex.length - 1]) < 0) {\n            // accept the reflected point\n            simplex = replaceWorstPoint(reflected, original);\n\n            // attempt an expansion\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded point\n                simplex = replaceWorstPoint(expanded, original);\n            }\n            return;\n        }\n\n        // attempt a contraction\n        if (comparator.compare(reflected, original[simplex.length - 1]) < 0) {\n            // outside contraction\n            final RealPointValuePair outsideContracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(outsideContracted, reflected) <= 0) {\n                // accept the contracted point\n                simplex = replaceWorstPoint(outsideContracted, original);\n                return;\n            }\n        } else {\n            // inside contraction\n            final RealPointValuePair insideContracted = evaluateNewSimplex(original, -gamma, comparator);\n            if (comparator.compare(insideContracted, original[simplex.length - 1]) < 0) {\n                // accept the contracted point\n                simplex = replaceWorstPoint(insideContracted, original);\n                return;\n            }\n        }\n\n        // perform a shrink step\n        boolean shrunk = false;\n        for (int i = 1; i < simplex.length; i++) {\n            simplex[i] = evaluateNewSimplex(original, 0.5, comparator, i);\n            shrunk = true;\n        }\n\n        if (shrunk) {\n            return;\n        }\n\n        // Check convergence\n        if (getConvergenceChecker() != null && getConvergenceChecker().converged(getIterations(), simplex)) {\n            return;\n        }\n\n        if (getIterations() >= getMaxIterations()) {\n            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));\n        }\n    }\n}\n\nprivate RealPointValuePair[] replaceWorstPoint(RealPointValuePair point, RealPointValuePair[] original) {\n    RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n    System.arraycopy(original, 0, newSimplex, 0, simplex.length - 1);\n    newSimplex[simplex.length - 1] = point;\n    return newSimplex;\n}\n\nprivate RealPointValuePair evaluateNewSimplex(RealPointValuePair[] original, double coeff, Comparator<RealPointValuePair> comparator, int... fixedIndices) throws FunctionEvaluationException {\n    // Implementation of evaluateNewSimplex method (not provided in original code)\n    // This method should create and evaluate a new simplex based on the given coefficient and fixed indices\n    // Return the new point to be considered for inclusion in the simplex\n    // ...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}