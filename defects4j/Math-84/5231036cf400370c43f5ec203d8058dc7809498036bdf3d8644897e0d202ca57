{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    \n        boolean converged = false;\n        while (!converged) {\n            incrementIterationsCounter();\n            \n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n            \n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                \n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                }\n                \n                converged = isConverged(original, simplex);\n                continue; // skip the rest and continue with next iteration\n                \n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                converged = isConverged(original, simplex);\n            } else {\n                // if contraction is not better, halve the simplex size\n                shrinkSimplex(original, comparator);\n                converged = isConverged(original, simplex);\n            }\n        }\n    }\n    \n    private void shrinkSimplex(final RealPointValuePair[] original, \n                               Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException {\n        for (int i = 1; i < simplex.length; ++i) {\n            final double[] best = original[0].getPointRef();\n            final double[] current = simplex[i].getPointRef();\n            for (int j = 0; j < current.length; ++j) {\n                current[j] = best[j] + sigma * (current[j] - best[j]);\n            }\n            simplex[i] = new RealPointValuePair(current, Double.NaN, false);\n        }\n        evaluateSimplex(comparator);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}