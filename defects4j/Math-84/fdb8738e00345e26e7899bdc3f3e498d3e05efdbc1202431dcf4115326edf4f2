{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone(); // clone to avoid modifying the original array\n        final RealPointValuePair best = original[0];\n        final RealPointValuePair worst = original[original.length - 1];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone(); // clone to avoid modifying the original array\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the expanded simplex\n                simplex = new RealPointValuePair[original.length];\n                System.arraycopy(reflectedSimplex, 0, simplex, 0, original.length);\n            }\n\n        } else if (comparator.compare(reflected, worst) < 0) {\n            // accept the reflected simplex\n            simplex = new RealPointValuePair[original.length];\n            System.arraycopy(reflectedSimplex, 0, simplex, 0, original.length);\n\n        } else {\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, worst) < 0) {\n                // accept the contracted simplex\n                simplex = new RealPointValuePair[original.length];\n                System.arraycopy(new RealPointValuePair[] { contracted }, 0, simplex, original.length - 1, 1);\n            } else {\n                // perform a shrink step\n                for (int i = 1; i < original.length; i++) {\n                    final double[] x = new double[original[i].getPoint().length];\n                    for (int j = 0; j < x.length; j++) {\n                        x[j] = (original[0].getPoint()[j] + original[i].getPoint()[j]) * 0.5;\n                    }\n                    simplex[i] = new RealPointValuePair(x, Double.NaN, true);\n                }\n                evaluateSimplex(comparator);\n            }\n        }\n\n        // check convergence\n        if (checkConvergence(comparator)) {\n            return;\n        }\n\n        // ensure we do not exceed the maximum number of iterations\n        if (getIterations() >= getMaxIterations()) {\n            throw new MaxIterationsExceededException(getMaxIterations());\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}