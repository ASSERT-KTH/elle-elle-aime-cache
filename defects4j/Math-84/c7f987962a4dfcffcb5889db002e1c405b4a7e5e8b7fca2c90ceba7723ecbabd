{
    "generation": "@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    RealPointValuePair best = simplex[0];\n    double lastBestValue = Double.POSITIVE_INFINITY;\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // found better point, so we add the reflection and continue to the next simplex\n            simplex = Arrays.copyOf(original, original.length);\n            simplex[simplex.length - 1] = reflected;\n            continue;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = Arrays.copyOf(original, original.length);\n            simplex[simplex.length - 1] = contracted;\n            continue;\n        }\n\n        // Check convergence\n        if (Math.abs(best.getValue() - lastBestValue) < convergenceThreshold) {\n            break; // Leave the loop if the simplex has converged\n        }\n\n        lastBestValue = best.getValue();\n\n        // If the simplex hasn't converged, reduce it\n        reduce(original, comparator);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}