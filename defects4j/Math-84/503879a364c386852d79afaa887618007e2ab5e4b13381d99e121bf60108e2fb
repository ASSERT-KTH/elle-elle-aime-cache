{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // Save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // Perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // Compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // Accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n            // Check convergence\n            if (isConverged(comparator)) {\n                return;\n            }\n\n            continue; // Continue the loop if not converged\n        }\n\n        // Compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // Accept the contracted simplex\n\n            // Check convergence\n            if (isConverged(comparator)) {\n                return;\n            }\n\n            continue; // Continue the loop if not converged\n        }\n\n        // Check for maximum iterations\n        if (getIterations() >= getMaxIterations()) {\n            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));\n        }\n    }\n}\n\n// Helper method to check convergence\nprivate boolean isConverged(final Comparator<RealPointValuePair> comparator) {\n    for (int i = 0; i < simplex.length; i++) {\n        if (comparator.compare(simplex[i], simplex[0]) != 0) {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}