{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        final int maxIterations = getMaxIterations();\n        int iterationCount = 0;\n\n        while (iterationCount < maxIterations) {\n\n            incrementIterationsCounter();\n            iterationCount++;\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n            final RealPointValuePair worst = original[original.length - 1];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else if (comparator.compare(reflected, worst) < 0) {\n                // accept the reflected simplex\n                simplex = new RealPointValuePair[simplex.length];\n                System.arraycopy(reflectedSimplex, 0, simplex, 0, simplex.length - 1);\n                simplex[simplex.length - 1] = reflected;\n\n            } else {\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, worst) < 0) {\n                    // accept the contracted simplex\n                    simplex[simplex.length - 1] = contracted;\n                } else {\n                    // perform a shrink step\n                    for (int i = 1; i < simplex.length; i++) {\n                        simplex[i] = new RealPointValuePair(\n                            new ArrayRealVector(simplex[0].getPointRef(), true).mapAddToSelf(\n                                simplex[i].getPointRef()).mapMultiplyToSelf(0.5)\n                        );\n                    }\n                }\n            }\n\n            // check convergence\n            RealPointValuePair[] s = simplex;\n            RealPointValuePair min = s[0];\n            RealPointValuePair max = s[0];\n            for (RealPointValuePair p : s) {\n                if (comparator.compare(p, min) < 0) {\n                    min = p;\n                }\n                if (comparator.compare(p, max) > 0) {\n                    max = p;\n                }\n            }\n            double size = comparator.compare(max, min);\n            if (size < getConvergenceChecker().getRelativeThreshold()) {\n                return;\n            }\n        }\n\n        throw new MaxIterationsExceededException(maxIterations);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}