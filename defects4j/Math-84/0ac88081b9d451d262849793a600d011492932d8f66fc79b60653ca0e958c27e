{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n        final RealPointValuePair worst = original[original.length - 1];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // accept the reflected point\n            simplex = reflected.getPoint();\n            continue;\n\n        } else if (comparator.compare(reflected, worst) <= 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = expanded.getPoint();\n            } else {\n                // accept the reflected simplex\n                simplex = reflected.getPoint();\n            }\n            continue;\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, worst) < 0) {\n                // accept the contracted simplex\n                simplex = contracted.getPoint();\n            } else {\n                // perform a shrink step\n                shrinkSimplex(comparator);\n            }\n            continue;\n\n        }\n\n        // check convergence\n        if (convergenceChecker == null || convergenceChecker.converged(getIterations(), best, simplex[0])) {\n            return;\n        }\n\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}