{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the expanded simplex\n                    simplex = new RealPointValuePair[]{expanded};\n                }\n\n                // check for convergence\n                if (isConverged()) {\n                    return;\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = new RealPointValuePair[]{contracted};\n                } else {\n                    // perform a shrink step\n                    shrinkSimplex();\n                }\n\n                // check for convergence\n                if (isConverged()) {\n                    return;\n                }\n            }\n\n        }\n\n    }\n\n    private boolean isConverged() {\n        // Implement your convergence check here\n        // For example, check if the max iterations or max evaluations are exceeded,\n        // or if the simplex has converged to a sufficiently small size.\n        return (getIterations() >= maxIterations || getEvaluations() >= maxEvaluations || convergenceChecker.converged(simplex));\n    }\n\n    private void shrinkSimplex() {\n        // Implement the shrink step here\n        // For example, shrink the simplex towards the best point.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}