{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = new RealPointValuePair[] { reflected };\n            } else {\n                simplex = new RealPointValuePair[] { expanded };\n            }\n\n            // check convergence\n            if (getConvergenceChecker() != null && getConvergenceChecker().converged(getIterations(), simplex[0], best)) {\n                return;\n            }\n\n            continue;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = new RealPointValuePair[] { contracted };\n\n            // check convergence\n            if (getConvergenceChecker() != null && getConvergenceChecker().converged(getIterations(), simplex[0], best)) {\n                return;\n            }\n\n            continue;\n        }\n\n        // return to original simplex if no improvement\n        simplex = original;\n\n        // check convergence\n        if (getConvergenceChecker() != null && getConvergenceChecker().converged(getIterations(), best, best)) {\n            return;\n        }\n\n        // check for maximum iterations\n        if (getIterations() >= getMaxIterations()) {\n            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}