{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    return;\n                }\n            }\n\n            // check convergence\n            final double[] xSmall = simplex[0].getPoint();\n            final double[] xBig = simplex[0].getPoint();\n            double max = 0;\n            for (int i = 1; i < simplex.length; ++i) {\n                final double[] x = simplex[i].getPoint();\n                for (int j = 0; j < x.length; ++j) {\n                    if (x[j] < xSmall[j]) {\n                        xSmall[j] = x[j];\n                    }\n                    if (x[j] > xBig[j]) {\n                        xBig[j] = x[j];\n                    }\n                    max = Math.max(max, Math.abs(x[j] - simplex[0].getPoint()[j]));\n                }\n            }\n            if (max <= 1.0e-10) {\n                return;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}