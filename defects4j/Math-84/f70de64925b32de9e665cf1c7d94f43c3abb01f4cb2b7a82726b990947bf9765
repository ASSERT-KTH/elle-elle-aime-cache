{
    "generation": "    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (!getConvergenceChecker().converged(getIterations(), simplex)) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = Arrays.copyOf(simplex, simplex.length);\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) >= 0) {\n                    // accept the reflected simplex\n                    simplex = copyBestSimplex(original, reflected);\n                }\n            } else {\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, reflected) <= 0) {\n                    // accept the contracted simplex\n                    simplex = copyBestSimplex(original, contracted);\n                } else {\n                    // shrink the simplex\n                    obtainShrunkSimplex(original[0]);\n                }\n            }\n        }\n\n    }\n\n    private RealPointValuePair[] copyBestSimplex(final RealPointValuePair[] original, final RealPointValuePair best) {\n        final RealPointValuePair[] newSimplex = Arrays.copyOf(original, original.length);\n        newSimplex[newSimplex.length - 1] = best;\n        return newSimplex;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}