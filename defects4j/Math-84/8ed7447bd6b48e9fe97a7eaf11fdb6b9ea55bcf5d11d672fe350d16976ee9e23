{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (!isConverged()) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the expanded simplex\n                    simplex = simplex;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = simplex;\n                return;\n            }\n\n            // perform a shrink step\n            shrinkSimplex(original);\n\n            // check convergence\n            if (isConverged()) {\n                return;\n            }\n\n        }\n\n    }\n\n    private boolean isConverged() {\n        // Check if the simplex has converged based on the convergence checker\n        return getConvergenceChecker().converged(getIterations(), simplex);\n    }\n\n    private void shrinkSimplex(final RealPointValuePair[] original) {\n        // Shrink the simplex towards the best vertex\n        final RealPointValuePair best = original[0];\n        for (int i = 1; i < simplex.length; i++) {\n            final double[] newPoint = new double[simplex[i].getPoint().length];\n            for (int j = 0; j < newPoint.length; j++) {\n                newPoint[j] = best.getPoint()[j] + sigma * (simplex[i].getPoint()[j] - best.getPoint()[j]);\n            }\n            simplex[i] = new RealPointValuePair(newPoint, computeObjectiveValue(newPoint));\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}