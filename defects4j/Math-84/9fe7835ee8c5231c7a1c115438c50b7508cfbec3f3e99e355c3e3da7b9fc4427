{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    boolean convergenceReached = false;\n    while (!convergenceReached && (getIterations() < getMaxIterations())) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = replaceWorstPoint(reflected, comparator);\n            } else {\n                // accept the expanded simplex\n                simplex = replaceWorstPoint(expanded, comparator);\n            }\n\n        } else {\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = replaceWorstPoint(contracted, comparator);\n            } else {\n                // perform a shrink step\n                simplex = shrinkSimplex(original, comparator);\n            }\n        }\n\n        // check convergence\n        convergenceReached = checkConvergence();\n    }\n\n    if (!convergenceReached) {\n        throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));\n    }\n}\n\n// Helper methods (to be added to the class if not already present)\n\nprivate boolean checkConvergence() {\n    // Implement convergence checking logic here\n    // For example:\n    double maxRelativeError = 0;\n    for (int i = 1; i < simplex.length; ++i) {\n        double error = Math.abs(simplex[i].getValue() - simplex[0].getValue()) /\n                       Math.max(Math.abs(simplex[i].getValue()), Math.abs(simplex[0].getValue()));\n        maxRelativeError = Math.max(maxRelativeError, error);\n    }\n    return maxRelativeError <= getRelativeThreshold();\n}\n\nprivate RealPointValuePair[] replaceWorstPoint(RealPointValuePair p, Comparator<RealPointValuePair> comparator) {\n    RealPointValuePair[] newSimplex = simplex.clone();\n    int worstIndex = findWorstPointIndex(comparator);\n    newSimplex[worstIndex] = p;\n    return newSimplex;\n}\n\nprivate RealPointValuePair[] shrinkSimplex(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) \n    throws FunctionEvaluationException {\n    RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n    newSimplex[0] = simplex[0]; // Keep the best point\n    for (int i = 1; i < simplex.length; ++i) {\n        newSimplex[i] = evaluateNewSimplex(original, 0.5, comparator, i);\n    }\n    return newSimplex;\n}\n\nprivate int findWorstPointIndex(Comparator<RealPointValuePair> comparator) {\n    int worstIndex = 1;\n    for (int i = 2; i < simplex.length; ++i) {\n        if (comparator.compare(simplex[i], simplex[worstIndex]) > 0) {\n            worstIndex = i;\n        }\n    }\n    return worstIndex;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}