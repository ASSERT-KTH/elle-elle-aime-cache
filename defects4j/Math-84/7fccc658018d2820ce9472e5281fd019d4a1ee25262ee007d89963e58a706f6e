{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        boolean improvement = false;\n        do {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the expanded simplex\n                    improvement = true;\n                }\n                return;\n\n            } else {\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    improvement = true;\n                }\n            }\n\n            if (!improvement) {\n                // handle case when no improvement is found: shrink\n                for (int i = 1; i < simplex.length; ++i) {\n                    final double[] centroid = original[0].getPoint();\n                    final double[] vi = simplex[i].getPoint();\n                    final double[] shrunk = new double[vi.length];\n                    for (int j = 0; j < vi.length; ++j) {\n                        shrunk[j] = centroid[j] + sigma * (vi[j] - centroid[j]);\n                    }\n                    simplex[i] = new RealPointValuePair(shrunk, Double.NaN, false);\n                }\n                return;\n            }\n\n        } while (true);\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}