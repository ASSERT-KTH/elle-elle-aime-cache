{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        boolean converged = false;\n\n        while (!converged) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n                converged = checkConvergence(comparator, original);\n                continue;\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair[] contractedSimplex = simplex.clone();\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contractedSimplex;\n\n                converged = checkConvergence(comparator, original);\n                continue;\n            }\n\n            // shrink the simplex if no improvement\n            shrinkSimplex(best, comparator);\n\n            converged = checkConvergence(comparator, original);\n        }\n\n    }\n\n    /**\n     * Check if the simplex has converged.\n     * \n     * @param comparator Comparator for simplex points.\n     * @param original   Original simplex.\n     * @return True if the simplex has converged, false otherwise.\n     */\n    private boolean checkConvergence(final Comparator<RealPointValuePair> comparator,\n                                     final RealPointValuePair[] original) {\n        for (int i = 1; i < simplex.length; i++) {\n            if (comparator.compare(simplex[i], original[0]) != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}