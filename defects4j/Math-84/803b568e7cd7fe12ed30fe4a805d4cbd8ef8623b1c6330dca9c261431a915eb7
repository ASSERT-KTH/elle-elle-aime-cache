{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone(); // Clone to avoid modifying the original array\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflected.getPointRef();\n            } else {\n                // accept the expanded simplex\n                simplex = expanded.getPointRef();\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contracted.getPointRef();\n            } else {\n                // perform a shrink step\n                shrinkSimplex(original);\n            }\n        }\n\n        // check convergence\n        if (checkConvergence(comparator)) {\n            return;\n        }\n\n        if (getIterations() >= getMaxIterations()) {\n            throw new MaxIterationsExceededException(getMaxIterations());\n        }\n\n    }\n}\n\nprivate boolean checkConvergence(final Comparator<RealPointValuePair> comparator) {\n    // Implement a convergence check based on the comparator\n    final RealPointValuePair[] current = simplex;\n    final RealPointValuePair best = current[0];\n    double minDifference = Double.MAX_VALUE;\n\n    for (RealPointValuePair point : current) {\n        minDifference = Math.min(minDifference, Math.abs(comparator.compare(best, point)));\n    }\n\n    return minDifference < getRelativeThreshold() && (getEvaluations() >= getMinEvaluations());\n}\n\nprivate void shrinkSimplex(final RealPointValuePair[] original) {\n    // Implement shrinking logic if necessary\n    for (int i = 1; i < original.length; i++) {\n        double[] newPoint = new double[original[i].getPoint().length];\n        for (int j = 0; j < original[i].getPoint().length; j++) {\n            newPoint[j] = (original[0].getPoint()[j] + original[i].getPoint()[j]) * 0.5;\n        }\n        simplex[i] = new RealPointValuePair(newPoint, Double.NaN, false);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}