{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // Save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // Perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // Compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // Accept the expanded simplex\n                simplex = evaluateNewSimplex(original, khi, comparator).getPointRef();\n                return;\n            } else {\n                // Accept the reflected simplex\n                simplex = evaluateNewSimplex(original, 1.0, comparator).getPointRef();\n                return;\n            }\n        }\n\n        // Compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // Accept the contracted simplex\n            simplex = evaluateNewSimplex(original, gamma, comparator).getPointRef();\n            return;\n        }\n\n        // Perform a shrink step\n        final RealPointValuePair[] shrunk = new RealPointValuePair[simplex.length];\n        shrunk[0] = original[0];\n        for (int i = 1; i < simplex.length; ++i) {\n            shrunk[i] = evaluateNewSimplex(new RealPointValuePair[] {original[0], original[i]}, 0.5, comparator);\n        }\n        simplex = shrunk;\n\n        // Check for convergence\n        if (hasConverged()) {\n            return;\n        }\n\n        // Check for maximum iterations\n        if (getIterations() >= getMaxIterations()) {\n            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}