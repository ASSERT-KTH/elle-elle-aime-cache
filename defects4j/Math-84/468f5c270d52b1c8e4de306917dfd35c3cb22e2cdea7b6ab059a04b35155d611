{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone(); // Clone to avoid modifying the current simplex\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflected.simplex.clone();\n            } else {\n                // accept the expanded simplex\n                simplex = expanded.simplex.clone();\n            }\n        } else {\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contracted.simplex.clone();\n            } else {\n                // perform a shrink step\n                for (int i = 1; i < simplex.length; i++) {\n                    simplex[i] = evaluatePoint((simplex[0].getPoint()[0] + simplex[i].getPoint()[0]) / 2, \n                                               (simplex[0].getPoint()[1] + simplex[i].getPoint()[1]) / 2, \n                                               comparator);\n                }\n            }\n        }\n\n        // check convergence\n        final RealPointValuePair currentBest = simplex[0];\n        if (isConverged(original, currentBest)) {\n            return;\n        }\n    }\n}\n\nprivate boolean isConverged(final RealPointValuePair[] original, final RealPointValuePair currentBest) {\n    // Check if the current best has changed significantly from the original\n    for (RealPointValuePair originalPoint : original) {\n        if (comparator.compare(currentBest, originalPoint) != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate RealPointValuePair evaluatePoint(final double x, final double y, final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException {\n    double value = function.value(new double[] { x, y });\n    return new RealPointValuePair(new double[] { x, y }, value);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}