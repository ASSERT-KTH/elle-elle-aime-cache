{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone(); // Use clone to avoid modifying the original simplex\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone(); // Use clone to avoid modifying the original simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n            // Check convergence\n            if (checkConvergence(simplex)) {\n                return;\n            }\n\n            continue;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = new RealPointValuePair[]{contracted};\n\n            // Check convergence\n            if (checkConvergence(simplex)) {\n                return;\n            }\n        } else {\n            // compute the shrunk simplex\n            simplex = shrinkSimplex(original, comparator);\n        }\n\n        // Check convergence\n        if (checkConvergence(simplex)) {\n            return;\n        }\n\n    }\n\n}\n\n/**\n * Check if the optimization has converged.\n * @param simplex the current simplex\n * @return true if the optimization has converged\n */\nprivate boolean checkConvergence(RealPointValuePair[] simplex) {\n    final RealPointValuePair best = simplex[0];\n    double minValue = best.getValue();\n    double maxValue = best.getValue();\n    for (RealPointValuePair point : simplex) {\n        double value = point.getValue();\n        if (value < minValue) {\n            minValue = value;\n        }\n        if (value > maxValue) {\n            maxValue = value;\n        }\n    }\n    return (maxValue - minValue) <= getConvergenceChecker().getRelativeThreshold() * Math.abs(maxValue) +\n           getConvergenceChecker().getAbsoluteThreshold();\n}\n\n/**\n * Shrink the simplex towards the best point.\n * @param original the original simplex\n * @param comparator the comparator to use\n * @return the shrunk simplex\n * @throws FunctionEvaluationException if a function evaluation fails\n * @throws IllegalArgumentException if the simplex cannot be shrunk\n */\nprivate RealPointValuePair[] shrinkSimplex(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, IllegalArgumentException {\n\n    final RealPointValuePair best = original[0];\n    final double[] bestX = best.getPoint();\n    final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n    newSimplex[0] = best;\n\n    for (int i = 1; i < original.length; i++) {\n        final double[] xi = original[i].getPoint();\n        final double[] xshrunk = new double[xi.length];\n        for (int j = 0; j < xi.length; j++) {\n            xshrunk[j] = bestX[j] + sigma * (xi[j] - bestX[j]);\n        }\n        newSimplex[i] = new RealPointValuePair(xshrunk, computeObjectiveValue(xshrunk));\n    }\n\n    Arrays.sort(newSimplex, comparator);\n\n    return newSimplex;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}