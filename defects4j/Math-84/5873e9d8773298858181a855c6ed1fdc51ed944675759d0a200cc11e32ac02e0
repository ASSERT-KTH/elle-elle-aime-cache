{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (getIterationsCounter() < getMaxIterations()) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflected.clone();\n                } else {\n                    // accept the expanded simplex\n                    simplex = expanded.clone();\n                }\n\n                continue;\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contracted.clone();\n            } else {\n                // perform a shrink step\n                for (int i = 1; i < simplex.length; i++) {\n                    simplex[i] = evaluateNewSimplex(new RealPointValuePair[] { best, simplex[i] }, rho, comparator);\n                }\n            }\n\n            // check convergence\n            final RealPointValuePair currentBest = simplex[0];\n            if (getIterationsCounter() > 1) {\n                final RealPointValuePair previousBest = getPreviousBest();\n                if (Math.abs(currentBest.getValue() - previousBest.getValue()) < getConvergenceChecker().getRelativeThreshold() +\n                    Math.abs(currentBest.getValue()) * getConvergenceChecker().getAbsoluteThreshold()) {\n                    return;\n                }\n            }\n            setPreviousBest(currentBest);\n\n        }\n\n        throw new MaxIterationsExceededException(getMaxIterations());\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}