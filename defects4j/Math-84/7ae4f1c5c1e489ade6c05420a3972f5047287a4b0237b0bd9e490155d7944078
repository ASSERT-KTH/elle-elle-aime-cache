{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (getIterations() < getMaxIterations()) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n        final RealPointValuePair worst = original[original.length - 1];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0 && comparator.compare(reflected, worst) >= 0) {\n            // accept the reflected simplex\n            simplex = new RealPointValuePair[original.length];\n            System.arraycopy(original, 0, simplex, 0, original.length - 1);\n            simplex[simplex.length - 1] = reflected;\n            continue;\n        }\n\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = new RealPointValuePair[original.length];\n                System.arraycopy(original, 0, simplex, 0, original.length - 1);\n                simplex[simplex.length - 1] = reflected;\n            } else {\n                // accept the expanded simplex\n                simplex = new RealPointValuePair[original.length];\n                System.arraycopy(original, 0, simplex, 0, original.length - 1);\n                simplex[simplex.length - 1] = expanded;\n            }\n            continue;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, worst) < 0) {\n            // accept the contracted simplex\n            simplex = new RealPointValuePair[original.length];\n            System.arraycopy(original, 0, simplex, 0, original.length - 1);\n            simplex[simplex.length - 1] = contracted;\n            continue;\n        }\n\n        // compute the shrinked simplex\n        for (int i = 1; i < original.length; i++) {\n            simplex[i] = evaluateNewSimplex(new RealPointValuePair[] { best, original[i] }, sigma, comparator);\n        }\n\n    }\n\n    if (getIterations() >= getMaxIterations()) {\n        throw new MaxIterationsExceededException(getMaxIterations());\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}