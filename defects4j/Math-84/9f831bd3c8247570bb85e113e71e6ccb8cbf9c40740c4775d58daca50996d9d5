{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    boolean converged = false; // Add a convergence flag to avoid infinite loops\n    while (!converged) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n        final RealPointValuePair worst = original[original.length - 1];\n\n        // check convergence\n        if (getConvergenceChecker() != null) {\n            boolean allConverged = true;\n            for (int i = 0; i < simplex.length; i++) {\n                allConverged &= getConvergenceChecker().converged(getIterations(), simplex[i], best);\n            }\n            if (allConverged) {\n                converged = true;\n                break;\n            }\n        }\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = simplex.clone();\n                simplex[simplex.length - 1] = reflected;\n            } else {\n                // accept the expanded simplex\n                simplex = simplex.clone();\n                simplex[simplex.length - 1] = expanded;\n            }\n            continue;\n\n        }\n\n        // check if the reflection is an improvement\n        if (comparator.compare(reflected, worst) < 0) {\n            simplex = simplex.clone();\n            simplex[simplex.length - 1] = reflected;\n            continue;\n        }\n\n        // perform a contraction step\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, worst) < 0) {\n            // accept the contracted simplex\n            simplex = simplex.clone();\n            simplex[simplex.length - 1] = contracted;\n            continue;\n        }\n\n        // perform a shrink step\n        shrinkSimplex(original, comparator);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}