{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = buildSimplex(expanded, original);\n                return;\n            } else {\n                // accept the reflected simplex\n                simplex = buildSimplex(reflected, original);\n                return;\n            }\n        }\n\n        // check if reflection is better than the second worst point\n        if (comparator.compare(reflected, original[original.length - 2]) < 0) {\n            // accept the reflected simplex\n            simplex = buildSimplex(reflected, original);\n            return;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = buildSimplex(contracted, original);\n            return;\n        }\n\n        // perform a shrink step\n        simplex = shrinkSimplex(original, comparator);\n\n        // check convergence\n        if (isConverged()) {\n            return;\n        }\n\n        // Check if maximum iterations have been reached\n        if (getIterations() >= getMaxIterations()) {\n            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));\n        }\n    }\n}\n\n// Helper method to build a new simplex\nprivate RealPointValuePair[] buildSimplex(RealPointValuePair newPoint, RealPointValuePair[] original) {\n    RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n    newSimplex[0] = newPoint;\n    System.arraycopy(original, 1, newSimplex, 1, original.length - 1);\n    return newSimplex;\n}\n\n// Helper method to perform simplex shrinking\nprivate RealPointValuePair[] shrinkSimplex(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException {\n    RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n    newSimplex[0] = original[0];\n    for (int i = 1; i < original.length; ++i) {\n        newSimplex[i] = evaluateNewSimplex(original, sigma * (i + 1), comparator);\n    }\n    return newSimplex;\n}\n\n// Method to check convergence\nprivate boolean isConverged() {\n    double maxRelativeError = 0;\n    for (int i = 1; i < simplex.length; ++i) {\n        double error = Math.abs(simplex[0].getValue() - simplex[i].getValue()) / \n                       Math.max(Math.abs(simplex[0].getValue()), Math.abs(simplex[i].getValue()));\n        maxRelativeError = Math.max(maxRelativeError, error);\n    }\n    return maxRelativeError < getRelativeThreshold();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}