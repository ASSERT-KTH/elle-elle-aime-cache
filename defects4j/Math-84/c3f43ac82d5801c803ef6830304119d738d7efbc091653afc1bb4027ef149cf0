{
    "generation": "ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();\nRealPointValuePair previous = null;\nRealPointValuePair current = best;\n\nwhile (iterations < getMaxIterations() && evaluations < getMaxEvaluations()) {\n\n    incrementIterationsCounter();\n\n    // save the original vertex\n    final RealPointValuePair[] original = simplex;\n    final RealPointValuePair best = original[0];\n\n    // perform a reflection step\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n\n        // compute the expanded simplex\n        final RealPointValuePair[] reflectedSimplex = simplex;\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            // accept the reflected simplex\n            simplex = reflectedSimplex;\n        } else {\n            // accept the expanded simplex\n            simplex = evaluateNewSimplex(original, khi, comparator);\n        }\n\n    } else {\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = evaluateNewSimplex(original, gamma, comparator);\n        } else {\n            // perform a shrink step\n            simplex = shrinkSimplex(original, best);\n        }\n\n    }\n\n    // check for convergence\n    if (checker != null) {\n        if (previous != null && checker.converged(getIterations(), previous, current)) {\n            break;\n        }\n        previous = current;\n        current = best;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}