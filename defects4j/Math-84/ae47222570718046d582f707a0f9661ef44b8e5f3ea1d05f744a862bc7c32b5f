{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n   boolean converged = false;\n   while (!converged && getIterations() < maxIterations) {\n\n       incrementIterationsCounter();\n\n       // save the original vertex\n       final RealPointValuePair[] original = simplex;\n       final RealPointValuePair best = original[0];\n\n       // perform a reflection step\n       final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n       if (comparator.compare(reflected, best) < 0) {\n\n           // compute the expanded simplex\n           final RealPointValuePair[] reflectedSimplex = simplex;\n           final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n           if (comparator.compare(reflected, expanded) <= 0) {\n               // accept the reflected simplex\n               simplex = reflectedSimplex;\n               converged = checkConvergence(comparator);\n           }\n\n       } else {\n\n           // compute the contracted simplex\n           final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n           if (comparator.compare(contracted, best) < 0) {\n               // accept the contracted simplex\n               converged = checkConvergence(comparator);\n           }\n\n       }\n\n   }\n\n   if (getIterations() == maxIterations) {\n       throw new MaxIterationsExceededException(maxIterations);\n   }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}