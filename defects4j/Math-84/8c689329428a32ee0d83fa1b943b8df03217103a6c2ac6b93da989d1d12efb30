{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (getIterations() < getMaxIterations()) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the expanded simplex\n                simplex = acceptExpandedSimplex(expanded, original, comparator);\n            }\n\n            // check convergence\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = acceptContractedSimplex(contracted, original, comparator);\n        } else {\n            // perform a shrink step\n            simplex = shrinkSimplex(original, comparator);\n        }\n\n        // check convergence\n        return;\n\n    }\n\n    throw new MaxIterationsExceededException(getMaxIterations());\n\n}\n\nprivate RealPointValuePair[] acceptExpandedSimplex(RealPointValuePair expanded, \n    RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n    // Replace the worst point in the simplex with the expanded point\n    RealPointValuePair[] newSimplex = original.clone();\n    newSimplex[getWorstIndex(original, comparator)] = expanded;\n    return newSimplex;\n}\n\nprivate RealPointValuePair[] acceptContractedSimplex(RealPointValuePair contracted, \n    RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n    // Replace the worst point in the simplex with the contracted point\n    RealPointValuePair[] newSimplex = original.clone();\n    newSimplex[getWorstIndex(original, comparator)] = contracted;\n    return newSimplex;\n}\n\nprivate RealPointValuePair[] shrinkSimplex(RealPointValuePair[] original, \n    Comparator<RealPointValuePair> comparator) {\n    // Replace all points in the simplex except the best one with new points\n    RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n    newSimplex[0] = original[0];\n    for (int i = 1; i < original.length; i++) {\n        newSimplex[i] = evaluateNewSimplex(original, rho, comparator);\n    }\n    return newSimplex;\n}\n\nprivate int getWorstIndex(RealPointValuePair[] simplex, Comparator<RealPointValuePair> comparator) {\n    int worstIndex = 0;\n    for (int i = 1; i < simplex.length; i++) {\n        if (comparator.compare(simplex[i], simplex[worstIndex]) > 0) {\n            worstIndex = i;\n        }\n    }\n    return worstIndex;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}