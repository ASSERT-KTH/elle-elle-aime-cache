{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    incrementIterationsCounter();\n\n    // save the original vertex\n    final RealPointValuePair[] original = simplex;\n    final RealPointValuePair best = original[0];\n\n    // perform a reflection step\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n        // compute the expanded simplex\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            // accept the reflected simplex\n            simplex = evaluateNewFullSimplex(original, 1.0, comparator);\n        } else if (comparator.compare(expanded, best) < 0) {\n            // accept the expanded simplex\n            simplex = evaluateNewFullSimplex(original, khi, comparator);\n        } else {\n            // accept the reflected simplex\n            simplex = evaluateNewFullSimplex(original, 1.0, comparator);\n        }\n    } else {\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = evaluateNewFullSimplex(original, gamma, comparator);\n        } else {\n            // perform a shrink step\n            simplex = evaluateNewFullSimplex(original, 0.5, comparator);\n        }\n    }\n\n    // Check for convergence\n    if (isConverged()) {\n        return;\n    }\n\n    // Check for maximum iterations\n    if (getIterations() >= getMaxIterations()) {\n        throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}