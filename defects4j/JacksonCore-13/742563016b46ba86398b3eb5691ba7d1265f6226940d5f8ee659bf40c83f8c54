{
    "generation": "import com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n\nimport java.io.IOException;\nimport java.io.StringWriter;\n\npublic class TestJsonGeneratorFeatures {\n    private static final JsonFactory JSON_F = new JsonFactory();\n\n    public void testFieldNameQuotingEnabled() throws IOException {\n        // First, test with default factory, with quoting enabled by default\n\n        // First, default, with quotes\n        _testFieldNameQuotingEnabled(JSON_F, true, true, \"{\\\"foo\\\":1}\");\n        _testFieldNameQuotingEnabled(JSON_F, false, true, \"{\\\"foo\\\":1}\");\n\n        // then without quotes\n        _testFieldNameQuotingEnabled(JSON_F, true, false, \"{foo:1}\");\n        _testFieldNameQuotingEnabled(JSON_F, false, false, \"{foo:1}\");\n\n        // Then with alternatively configured factory\n\n        JsonFactory JF2 = new JsonFactory();\n        JF2.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, false);\n\n        _testFieldNameQuotingEnabled(JF2, true, true, \"{\\\"foo\\\":1}\");\n        _testFieldNameQuotingEnabled(JF2, false, true, \"{\\\"foo\\\":1}\");\n\n        // then without quotes\n        _testFieldNameQuotingEnabled(JF2, true, false, \"{foo:1}\");\n        _testFieldNameQuotingEnabled(JF2, false, false, \"{foo:1}\");\n    }\n\n    private void _testFieldNameQuotingEnabled(JsonFactory jf, boolean pretty, boolean enableQuotes, String expResult) throws IOException {\n        StringWriter sw = new StringWriter();\n        JsonGenerator jg = jf.createGenerator(sw);\n\n        if (pretty) {\n            jg.setPrettyPrinter(new DefaultPrettyPrinter());\n        }\n\n        jg.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, enableQuotes);\n        jg.writeStartObject();\n        jg.writeNumberField(\"foo\", 1);\n        jg.writeEndObject();\n        jg.close();\n\n        assertEquals(expResult, sw.toString().trim());\n    }\n\n    public static void assertEquals(String expected, String actual) {\n        if (!expected.equals(actual)) {\n            throw new ComparisonFailure(\"\", expected, actual);\n        }\n    }\n\n    private static class ComparisonFailure extends AssertionError {\n        private static final long serialVersionUID = 1L;\n\n        public ComparisonFailure(String message, String expected, String actual) {\n            super(message + \"\\nexpected:<\" + expected + \"> but was:<\" + actual + \">\");\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}