{
    "generation": "// Supposing we are handling a JSON generator configuration\npublic class JsonFactory {\n    private EnumSet<JsonGenerator.Feature> enabledFeatures = EnumSet.noneOf(JsonGenerator.Feature.class);\n\n    public JsonFactory() {\n        // Enable QUOTE_FIELD_NAMES by default\n        enable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n    }\n\n    public JsonFactory enable(JsonGenerator.Feature feature) {\n        enabledFeatures.add(feature);\n        return this;\n    }\n\n    public JsonFactory disable(JsonGenerator.Feature feature) {\n        enabledFeatures.remove(feature);\n        return this;\n    }\n\n    public boolean isEnabled(JsonGenerator.Feature feature) {\n        return enabledFeatures.contains(feature);\n    }\n}\n\n// Feature enumeration\npublic enum Feature {\n    QUOTE_FIELD_NAMES,\n    // other features...\n}\n\n// Hypothetical JsonGenerator handling\npublic class JsonGenerator {\n    private JsonFactory factory;\n\n    public JsonGenerator(JsonFactory factory) {\n        this.factory = factory;\n    }\n\n    public void writeFieldName(String name) throws IOException {\n        // Check whether to quote field names\n        if (factory.isEnabled(Feature.QUOTE_FIELD_NAMES)) {\n            writeString('\"' + name + '\"');\n        } else {\n            writeString(name);\n        }\n    }\n\n    private void writeString(String value) throws IOException {\n        // Logic to write the given string value into the output (omitted)\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}