{
    "generation": "public void testFieldNameQuotingEnabled() throws IOException {\n    // for [core#246]\n    // First, test with default factory, with quoting enabled by default\n\n    // First, default, with quotes\n    _testFieldNameQuotingEnabled(JSON_F, true, true, \"{\\\"foo\\\":1}\");\n    _testFieldNameQuotingEnabled(JSON_F, false, true, \"{\\\"foo\\\":1}\");\n\n    // then without quotes\n    _testFieldNameQuotingEnabled(JSON_F, true, false, \"{foo:1}\");\n    _testFieldNameQuotingEnabled(JSON_F, false, false, \"{foo:1}\");\n\n    // Then with alternatively configured factory\n\n    JsonFactory JF2 = new JsonFactory();\n    JF2.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n\n    _testFieldNameQuotingEnabled(JF2, true, true, \"{\\\"foo\\\":1}\");\n    _testFieldNameQuotingEnabled(JF2, false, true, \"{\\\"foo\\\":1}\");\n\n    // then without quotes\n    _testFieldNameQuotingEnabled(JF2, true, false, \"{foo:1}\");\n    _testFieldNameQuotingEnabled(JF2, false, false, \"{foo:1}\");\n}\n\nprivate void _testFieldNameQuotingEnabled(JsonFactory jf, boolean useBrowser, boolean quoteNames, String expected) throws IOException {\n    // Add debug statements to print expected and actual strings\n    System.out.println(\"Expected: \" + expected);\n\n    // Assuming gen is the JsonGenerator being used\n    JsonGenerator gen = jf.createGenerator(...);\n    try {\n        if (useBrowser) {\n            // Configure generator for browser encoding if needed\n        }\n        if (quoteNames) {\n            gen.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, true);\n        } else {\n            gen.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, false);\n        }\n        // Generate JSON content\n        gen.writeStartObject();\n        gen.writeNumberField(\"foo\", 1);\n        gen.writeEndObject();\n        // Collect generated JSON string\n        String actual = // method to collect the generated JSON string\n        System.out.println(\"Actual: \" + actual);\n        assertEquals(expected, actual);\n    } finally {\n        gen.close();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}