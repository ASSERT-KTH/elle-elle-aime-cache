{
    "generation": "package com.fasterxml.jackson.core.json;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.*;\n\npublic class TestJsonGeneratorFeatures\n    extends com.fasterxml.jackson.core.BaseTest\n{\n    private final JsonFactory JSON_F = new JsonFactory();\n\n    public void testFieldNameQuotingEnabled() throws IOException\n    {\n        // // First, test with default factory, with quoting enabled by default\n        \n        // First, default, with quotes\n        _testFieldNameQuotingEnabled(JSON_F, true, true, \"{\\\"foo\\\":1}\");\n        _testFieldNameQuotingEnabled(JSON_F, false, true, \"{\\\"foo\\\":1}\");\n\n        // then without quotes\n        _testFieldNameQuotingEnabled(JSON_F, true, false, \"{foo:1}\");\n        _testFieldNameQuotingEnabled(JSON_F, false, false, \"{foo:1}\");\n\n        // // Then with alternatively configured factory\n\n        JsonFactory JF2 = new JsonFactory();\n        JF2.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n\n        _testFieldNameQuotingEnabled(JF2, true, true, \"{foo:1}\");\n        _testFieldNameQuotingEnabled(JF2, false, true, \"{foo:1}\");\n\n        // then without quotes\n        _testFieldNameQuotingEnabled(JF2, true, false, \"{foo:1}\");\n        _testFieldNameQuotingEnabled(JF2, false, false, \"{foo:1}\");\n    }\n\n    private void _testFieldNameQuotingEnabled(JsonFactory f, boolean useBytes,\n            boolean useQuotes, String exp)\n        throws IOException\n    {\n        JsonGenerator gen;\n        ByteArrayBuilder bb = useBytes ? new ByteArrayBuilder(100) : null;\n        StringWriter sw = useBytes ? null : new StringWriter();\n        if (useBytes) {\n            gen = f.createGenerator(bb);\n        } else {\n            gen = f.createGenerator(sw);\n        }\n        gen.writeStartObject();\n        if (useQuotes) {\n            gen.writeFieldName(\"foo\");\n        } else {\n            gen.writeFieldName(new SerializedString(\"foo\"));\n        }\n        gen.writeNumber(1);\n        gen.writeEndObject();\n        gen.close();\n        String json = useBytes ? bb.toString(\"UTF-8\") : sw.toString();\n        assertEquals(exp, json);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}