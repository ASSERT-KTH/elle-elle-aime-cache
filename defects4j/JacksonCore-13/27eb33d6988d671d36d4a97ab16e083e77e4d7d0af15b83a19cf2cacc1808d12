{
    "generation": "private void _testFieldNameQuotingEnabled(JsonFactory jsonFactory, boolean enableFeature, boolean defaultQuoting, String expected) throws IOException {\n    JsonGenerator gen = jsonFactory.createGenerator(System.out, JsonEncoding.UTF8);\n    \n    if (enableFeature) {\n        gen.enable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n    } else {\n        gen.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n    }\n    \n    // If defaultQuoting is false, ensure the feature is disabled regardless of enableFeature\n    if (!defaultQuoting) {\n        gen.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n    }\n\n    // Write a simple JSON object {\"foo\":1}\n    gen.writeStartObject();\n    gen.writeFieldName(\"foo\");\n    gen.writeNumber(1);\n    gen.writeEndObject();\n    gen.flush();\n    \n    // Capture the output and compare it with the expected string\n    StringWriter writer = new StringWriter();\n    gen = jsonFactory.createGenerator(writer, JsonEncoding.UTF8);\n    \n    if (enableFeature) {\n        gen.enable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n    } else {\n        gen.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n    }\n    \n    if (!defaultQuoting) {\n        gen.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n    }\n\n    gen.writeStartObject();\n    gen.writeFieldName(\"foo\");\n    gen.writeNumber(1);\n    gen.writeEndObject();\n    gen.flush();\n\n    String output = writer.toString();\n    assertEquals(expected, output);\n    \n    gen.close();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}