{
    "generation": "import java.io.File;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.jar.JarFile;\nimport java.util.jar.Manifest;\n\npublic class OptionProcessor {\n\n    protected static final String OPTION_NAME = \"option_name\";\n\n    public static void processOptions(String[] args) throws Exception {\n        if (args == null || (args.length < 2)) {\n            System.out.println(\"Usage: java \" + OPTION_NAME + \" -jar path/to/your.jar [option-1] [option-2] ...\");\n            System.exit(1);\n        }\n\n        String[] options = new String[args.length - 1];\n        System.arraycopy(args, 1, options, 0, args.length - 1);\n\n        // Load the JAR file\n        File jarFile = new File(args[0]);\n        if (!jarFile.exists()) {\n            System.out.println(\"JAR file not found: \" + args[0]);\n            System.exit(1);\n        }\n\n        // Get the manifest from the JAR file\n        try (JarFile jar = new JarFile(jarFile)) {\n            Manifest mf = jar.getManifest();\n            String mainClassname = mf.getMainAttributes().getValue(\"Main-Class\");\n\n            if (mainClassname == null) {\n                System.out.println(\"Manifest does not contain Main-Class attribute.\");\n                System.exit(1);\n            }\n\n            // Create a URLClassLoader for the JAR file\n            URL url = jarFile.toURI().toURL();\n            URLClassLoader cl = URLClassLoader.newInstance(new URL[]{url});\n\n            try {\n                // Load the main class\n                Class<?> mainClass = cl.loadClass(mainClassname);\n\n                // Check if the main method exists\n                mainClass.getMethod(\"main\", String[].class);\n\n                // Invoke the main method with options\n                mainClass.getMethod(\"main\", String[].class).invoke(null, (Object) options);\n            } catch (Exception ex) {\n                System.err.println(\"Error invoking main method: \" + ex.getMessage());\n                ex.printStackTrace();\n                System.exit(1);\n            } finally {\n                cl.close();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            processOptions(args);\n        } catch (Exception e) {\n            System.err.println(\"An error occurred: \" + e.getMessage());\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}