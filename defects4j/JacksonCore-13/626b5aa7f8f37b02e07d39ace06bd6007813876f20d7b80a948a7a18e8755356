{
    "generation": "public class JsonGenerator {\n    public static class Feature {\n        public static final Feature QUOTE_FIELD_NAMES = new Feature();\n    }\n\n    private boolean quoteFieldNames = true;\n\n    public JsonGenerator(JsonFactory factory) {\n        // Constructor implementation\n    }\n\n    public void disable(Feature feature) {\n        if (feature == Feature.QUOTE_FIELD_NAMES) {\n            quoteFieldNames = false;\n        }\n    }\n\n    public void writeStartObject() throws IOException {\n        // Implementation to start writing an object\n    }\n\n    public void writeEndObject() throws IOException {\n        // Implementation to end writing an object\n    }\n\n    public void writeFieldName(String name) throws IOException {\n        if (quoteFieldNames) {\n            // Write quoted field name\n        } else {\n            // Write unquoted field name\n        }\n    }\n\n    public void writeNumber(int i) throws IOException {\n        // Implementation to write a number\n    }\n}\n\npublic class JsonFactory {\n    public JsonGenerator createGenerator() {\n        return new JsonGenerator(this);\n    }\n\n    public void disable(JsonGenerator.Feature feature) {\n        // Implementation to disable a feature\n    }\n}\n\npublic class TestJsonGeneratorFeatures {\n    private static final JsonFactory JSON_F = new JsonFactory();\n\n    private void _testFieldNameQuotingEnabled(JsonFactory factory, boolean writeFieldName, boolean expectQuotes, String expected) throws IOException {\n        JsonGenerator g = factory.createGenerator();\n        g.writeStartObject();\n        if (writeFieldName) {\n            g.writeFieldName(\"foo\");\n        }\n        g.writeNumber(1);\n        g.writeEndObject();\n        // Compare the output with expected string\n    }\n\n    public void testFieldNameQuotingEnabled() throws IOException {\n        // First, test with default factory, with quoting enabled by default\n        \n        // First, default, with quotes\n        _testFieldNameQuotingEnabled(JSON_F, true, true, \"{\\\"foo\\\":1}\");\n        _testFieldNameQuotingEnabled(JSON_F, false, true, \"{\\\"foo\\\":1}\");\n\n        // then without quotes\n        _testFieldNameQuotingEnabled(JSON_F, true, false, \"{foo:1}\");\n        _testFieldNameQuotingEnabled(JSON_F, false, false, \"{foo:1}\");\n\n        // Then with alternatively configured factory\n\n        JsonFactory JF2 = new JsonFactory();\n        JF2.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n\n        _testFieldNameQuotingEnabled(JF2, true, true, \"{\\\"foo\\\":1}\");\n        _testFieldNameQuotingEnabled(JF2, false, true, \"{\\\"foo\\\":1}\");\n\n        // then without quotes\n        _testFieldNameQuotingEnabled(JF2, true, false, \"{foo:1}\");\n        _testFieldNameQuotingEnabled(JF2, false, false, \"{foo:1}\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}