{
    "generation": "import com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport java.io.IOException;\nimport java.io.StringWriter;\n\npublic class Fix {\n    private void _testFieldNameQuotingEnabled(JsonFactory f, boolean useBytes,\n            boolean quote, String expected) throws IOException\n    {\n        StringWriter sw = new StringWriter();\n        JsonGenerator gen;\n\n        if (useBytes) {\n            gen = f.createGenerator(sw);\n        } else {\n            gen = f.createGenerator(sw);\n        }\n        gen.writeStartObject();\n        if (quote) { // should be via setting, not forcing...\n            gen.writeFieldName(\"foo\");\n        } else {\n            gen.writeFieldName(\"foo\");\n        }\n        gen.writeNumber(1);\n        gen.writeEndObject();\n        gen.close();\n\n        assertEquals(expected, sw.toString());\n    }\n\n    private void assertEquals(String expected, String actual) {\n        if (!expected.equals(actual)) {\n            throw new AssertionError(\"expected:<\" + expected + \"> but was:<\" + actual + \">\");\n        }\n    }\n\n    private JsonFactory JSON_F = new JsonFactory();\n\n    public void testFieldNameQuotingEnabled() throws IOException\n    {\n        // // First, test with default factory, with quoting enabled by default\n        \n        // First, default, with quotes\n        _testFieldNameQuotingEnabled(JSON_F, true, true, \"{\\\"foo\\\":1}\");\n        _testFieldNameQuotingEnabled(JSON_F, false, true, \"{\\\"foo\\\":1}\");\n\n        // then without quotes\n        _testFieldNameQuotingEnabled(JSON_F, true, false, \"{foo:1}\");\n        _testFieldNameQuotingEnabled(JSON_F, false, false, \"{foo:1}\");\n\n        // // Then with alternatively configured factory\n\n        JsonFactory JF2 = new JsonFactory();\n        JF2.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n\n        _testFieldNameQuotingEnabled(JF2, true, true, \"{\\\"foo\\\":1}\");\n        _testFieldNameQuotingEnabled(JF2, false, true, \"{\\\"foo\\\":1}\");\n\n        // then without quotes\n        _testFieldNameQuotingEnabled(JF2, true, false, \"{foo:1}\");\n        _testFieldNameQuotingEnabled(JF2, false, false, \"{foo:1}\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}