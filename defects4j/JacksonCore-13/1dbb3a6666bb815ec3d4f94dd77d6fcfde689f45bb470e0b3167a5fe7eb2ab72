{
    "generation": "// for [core#246]\npublic void testFieldNameQuotingEnabled() throws IOException {\n    // First, test with default factory, with quoting enabled by default\n    \n    // First, default, with quotes\n    _testFieldNameQuotingEnabled(JSON_F, true, true, \"{\\\"foo\\\":1}\");\n    _testFieldNameQuotingEnabled(JSON_F, false, true, \"{\\\"foo\\\":1}\");\n\n    // then without quotes\n    _testFieldNameQuotingEnabled(JSON_F, true, false, \"{foo:1}\");\n    _testFieldNameQuotingEnabled(JSON_F, false, false, \"{foo:1}\");\n\n    // Then with alternatively configured factory\n\n    JsonFactory JF2 = new JsonFactory();\n    JF2.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);\n\n    _testFieldNameQuotingEnabled(JF2, true, true, \"{\\\"foo\\\":1}\");\n    _testFieldNameQuotingEnabled(JF2, false, true, \"{\\\"foo\\\":1}\");\n\n    // then without quotes\n    _testFieldNameQuotingEnabled(JF2, true, false, \"{foo:1}\");\n    _testFieldNameQuotingEnabled(JF2, false, false, \"{foo:1}\");\n}\n\nprivate void _testFieldNameQuotingEnabled(JsonFactory factory, boolean useFeatures, boolean quoteNames, String expected) throws IOException {\n    JsonGenerator gen = factory.createGenerator(new StringWriter());\n    if (useFeatures) {\n        gen.useDefaultPrettyPrinter();\n        if (quoteNames) {\n            gen.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, true);\n        } else {\n            gen.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, false);\n        }\n    }\n    gen.writeStartObject();\n    gen.writeObjectField(\"foo\", 1);\n    gen.writeEndObject();\n    gen.flush();\n    String actual = gen.getOutputTarget().toString();\n    System.out.println(\"Expected: \" + expected);\n    System.out.println(\"Actual: \" + actual);\n    assertEquals(expected, actual);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}