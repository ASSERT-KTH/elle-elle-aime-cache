{
    "generation": "  /**\n   * Updates the scope according to the result of a type change, like\n   * an assignment or a type cast.\n   */\n  private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n        boolean isVarDeclaration = left.hasChildren();\n\n        boolean isVarTypeBetter = var == null || var.isTypeInferred();\n\n        if (isVarDeclaration && var != null && var.getType() != null) {\n          // Use the resultType only if it's strictly narrower than the declared type.\n          isVarTypeBetter = resultType.isSubtype(var.getType()) && !var.getType().isEquivalentTo(resultType);\n        }\n\n        if (isVarTypeBetter) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n        left.setJSType(isVarDeclaration || leftType == null ? resultType : leftType);\n\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n\n        // Ensure property is defined and account for potential null or undefined types.\n        if (!resultType.isUnknownType() && !resultType.isNullType() && !resultType.isVoidType()) {\n          ensurePropertyDefined(left, resultType);\n        }\n        break;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}