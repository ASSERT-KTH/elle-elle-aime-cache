{
    "generation": "/**\n * Updates the scope according to the result of a type change, like\n * an assignment or a type cast.\n */\nprivate void updateScopeForTypeChange(\n    FlowScope scope, Node left, JSType leftType, JSType resultType) {\n  Preconditions.checkNotNull(resultType);\n  switch (left.getType()) {\n    case Token.NAME:\n      String varName = left.getString();\n      Var var = syntacticScope.getVar(varName);\n      boolean isVarDeclaration = left.hasChildren();\n\n      // Determine if the declared var type is better than the result type\n      boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n\n      // If the declared var type is better, use it; otherwise, use the result type\n      if (isVarTypeBetter && var != null && var.getType() != null) {\n        JSType varType = var.getType();\n        if (varType.isSubtype(resultType) || resultType.isSubtype(varType)) {\n          // If types are compatible, take the least upper bound\n          JSType newType = varType.getLeastSupertype(resultType);\n          redeclareSimpleVar(scope, left, newType);\n          if (var.isTypeInferred()) {\n            var.setType(newType);\n          }\n        } else {\n          // If types are incompatible, prefer the result type\n          redeclareSimpleVar(scope, left, resultType);\n          if (var.isTypeInferred()) {\n            var.setType(resultType);\n          }\n        }\n      } else {\n        redeclareSimpleVar(scope, left, resultType);\n        if (var != null && var.isTypeInferred()) {\n          var.setType(resultType);\n        }\n      }\n\n      left.setJSType(isVarDeclaration || leftType == null ? resultType : null);\n      break;\n    case Token.GETPROP:\n      String qualifiedName = left.getQualifiedName();\n      if (qualifiedName != null) {\n        scope.inferQualifiedSlot(left, qualifiedName,\n            leftType == null ? unknownType : leftType,\n            resultType);\n      }\n      left.setJSType(resultType);\n      ensurePropertyDefined(left, resultType);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}