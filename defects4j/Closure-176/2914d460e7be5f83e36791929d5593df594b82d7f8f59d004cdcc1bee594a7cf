{
    "generation": "  /**\n   * Updates the scope according to the result of a type change, like\n   * an assignment or a type cast.\n   */\n  private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n        boolean isVarDeclaration = left.hasChildren();\n\n        // When looking at VAR initializers for declared VARs, we tend\n        // to use the declared type over the type it's being\n        // initialized to in the global scope.\n        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n\n        if (isVarTypeBetter) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n        left.setJSType(isVarDeclaration ? resultType : leftType);\n\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null\n              ? resultType\n              : oldType.getLeastSupertype(resultType));\n        }\n        break;\n\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n\n        // Only set the resultType if the property access is valid.\n        if (left.isQualifiedName()) {\n          left.setJSType(resultType);\n        } else {\n          left.setJSType(null);\n        }\n\n        ensurePropertyDefined(left, resultType);\n        break;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}