{
    "generation": "/**\n * Updates the scope according to the result of a type change, like\n * an assignment or a type cast.\n */\nprivate void updateScopeForTypeChange(\n    FlowScope scope, Node left, JSType leftType, JSType resultType) {\n  Preconditions.checkNotNull(resultType);\n  switch (left.getType()) {\n    case Token.NAME:\n      String varName = left.getString();\n      Var var = syntacticScope.getVar(varName);\n      boolean isVarDeclaration = left.hasChildren();\n\n      boolean isVarTypeBetter = !isVarDeclaration ||\n          var == null ||\n          var.isTypeInferred() ||\n          (!resultType.isSubtype(var.getType()) &&\n           var.getType() != null) || // new condition to check if resultType is not a subtype of var's type\n          resultType.isUnknownType(); // new condition to ensure resultType is not unknown type\n\n      if (isVarTypeBetter) {\n        redeclareSimpleVar(scope, left, resultType);\n        left.setJSType(resultType); // change from leftType to resultType\n      } else {\n        left.setJSType(null);\n      }\n\n      if (var != null && var.isTypeInferred()) {\n        JSType oldType = var.getType();\n        var.setType(oldType == null ?\n            resultType : oldType.getLeastSupertype(resultType));\n      }\n      break;\n    case Token.GETPROP:\n      String qualifiedName = left.getQualifiedName();\n      if (qualifiedName != null) {\n        scope.inferQualifiedSlot(left, qualifiedName,\n            leftType == null ? UNKNOWN_TYPE : leftType, // use UNKNOWN_TYPE here instead of unknownType\n            resultType);\n      }\n\n      left.setJSType(resultType);\n      ensurePropertyDefined(left, resultType);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}