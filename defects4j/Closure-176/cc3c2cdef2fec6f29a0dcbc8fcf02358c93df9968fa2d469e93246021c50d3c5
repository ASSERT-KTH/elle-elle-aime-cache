{
    "generation": "private void updateScopeForTypeChange(FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n        boolean isVarDeclaration = left.hasChildren();\n\n        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n\n        if (isVarTypeBetter) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n\n        // The fix: for variable declarations, always use the result type initially.\n        // Added a compound assessment to determine if we need to update the left type.\n        left.setJSType(isVarDeclaration || leftType == null || (var != null && !var.isTypeInferred())\n            ? resultType : left.getJSType().getLeastSupertype(resultType));\n\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n       break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}