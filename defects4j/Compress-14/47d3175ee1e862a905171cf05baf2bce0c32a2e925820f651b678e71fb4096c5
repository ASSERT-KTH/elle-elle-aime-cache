{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    boolean allNUL = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0L;\n    }\n\n    // Skip leading spaces and NUL\n    while (start < end) {\n        if (buffer[start] == ' ' || buffer[start] == 0) {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Check for leading NUL\n    if (start < end && buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Find end of number\n    int numberEnd = start;\n    while (numberEnd < end && buffer[numberEnd] >= '0' && buffer[numberEnd] <= '7') {\n        numberEnd++;\n    }\n\n    // Check trailing characters\n    int trailerCount = 0;\n    for (int i = numberEnd; i < end; i++) {\n        if (buffer[i] == ' ' || buffer[i] == 0) {\n            trailerCount++;\n        } else {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, buffer[i]));\n        }\n    }\n\n    if (trailerCount == 0) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n    }\n\n    // Parse the number\n    for (int i = start; i < numberEnd; i++) {\n        final byte currentByte = buffer[i];\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}