{
    "generation": "\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n\n    long result = 0;\n\n    int end = offset + length;\n\n    int start = offset;\n\n    if (length < 2) {\n\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n\n    }\n\n    // Skip leading spaces\n\n    while (start < end) {\n\n        if (buffer[start] == ' ') {\n\n            start++;\n\n        } else {\n\n            break;\n\n        }\n\n    }\n\n    // If the first non-space byte is 0, return 0\n\n    if (start < end && buffer[start] == 0) {\n\n        return 0L;\n\n    }\n\n    // Must have trailing NUL or space\n\n    byte trailer;\n\n    trailer = buffer[end - 1];\n\n    if (trailer == 0 || trailer == ' ') {\n\n        end--;\n\n    } else {\n\n        throw new IllegalArgumentException(\n\n                exceptionMessage(buffer, offset, length, end - 1, trailer));\n\n    }\n\n    // May have additional NUL or space\n\n    trailer = buffer[end - 1];\n\n    if (trailer == 0 || trailer == ' ') {\n\n        end--;\n\n    }\n\n    for (; start < end; start++) {\n\n        final byte currentByte = buffer[start];\n\n        if (currentByte < '0' || currentByte > '7') {\n\n            throw new IllegalArgumentException(\n\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n\n        }\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n\n    }\n\n    return result;\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}