{
    "generation": "import java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.Factory;\nimport org.apache.commons.collections4.MultiValuedMap;\n\n/**\n * A customized implementation of {@link MultiValuedMap} designed to deal with\n * {@link Class} values.\n * <p>\n * This class is not thread-safe.\n * </p>\n *\n * @since 4.1\n * @serial\n */\npublic class MultiValueMap<K, V> extends AbstractMultiValuedMap<K, V> {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = 20150608L;\n\n    /** The factory to use for creating collection views. */\n    private final Factory<? extends Collection<V>> collectionClassFactory;\n\n    /**\n     * Constructor that creates a map with the the specified type.\n     *\n     * @param map  the map to decorate, must not be null\n     * @param collectionClass  the type of the collection to use\n     * @throws NullPointerException if map is null\n     * @throws NullPointerException if the collection class is null\n     */\n    public MultiValueMap(final Map<K, ? extends Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {\n        super(map);\n        if (collectionClass == null) {\n            throw new NullPointerException(\"The collection class must not be null\");\n        }\n        this.collectionClassFactory = CollectionUtils.collectionFactory(collectionClass);\n    }\n\n    /**\n     * Constructor that creates a map with the the specified type.\n     *\n     * @param map  the map to decorate, must not be null\n     * @param collectionFactory  the factory to use to create the collection\n     * @throws NullPointerException if map is null\n     * @throws NullPointerException if the collection factory is null\n     */\n    public MultiValueMap(final Map<K, ? extends Collection<V>> map, final Factory<? extends Collection<V>> collectionFactory) {\n        super(map);\n        if (collectionFactory == null) {\n            throw new NullPointerException(\"The collection factory must not be null\");\n        }\n        this.collectionClassFactory = collectionFactory;\n    }\n\n    /**\n     * A constructor that creates a map that uses {@link ArrayList}s as\n     * the collections.\n     *\n     * @param map  the map to decorate, must not be null\n     * @throws NullPointerException if the map is null\n     */\n    public MultiValueMap(final Map<K, ? extends Collection<V>> map) {\n        this(map, ArrayList.class);\n    }\n\n    /**\n     * Creates a new, empty {@link MultiValueMap} that uses\n     * {@link ArrayList}s as the collections.\n     */\n    public MultiValueMap() {\n        this(new HashMap<>(), ArrayList.class);\n    }\n\n    /**\n     * Write the map out using externalization.  Classes are not written*.\n     *\n     * @param out  the stream to write to\n     * @throws IOException if an error occurs\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using externalization.  Classes are not specified*.\n     *\n     * @param in the stream to read from\n     * @throws IOException if an error occurs\n     * @throws ClassNotFoundException if the class is not found\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        this.map = (Map<K, Collection<V>>) in.readObject();\n        if (collectionClassFactory == null) {\n            this.collectionClassFactory = CollectionUtils.collectionFactory(ArrayList.class);\n        }\n    }\n\n    @Override\n    protected Collection<V> createCollection() {\n        return this.collectionClassFactory.create();\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}