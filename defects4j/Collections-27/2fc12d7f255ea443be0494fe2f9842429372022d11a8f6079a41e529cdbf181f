{
    "generation": "import java.io.*;\nimport java.util.*;\n\npublic class MultiValueMap<K, V> implements Serializable {\n    private Map<K, List<V>> map;\n    private Class<? extends List> listClass;\n\n    private MultiValueMap(Map<K, List<V>> map, Class<? extends List> listClass) {\n        this.map = map;\n        this.listClass = listClass;\n    }\n\n    public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, List<V>> map, Class<? extends List> listClass) {\n        return new MultiValueMap<>(map, listClass);\n    }\n\n    private void writeObject(ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n    }\n\n    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        // Check if the listClass is safe\n        if (!isSafeClass(listClass)) {\n            throw new UnsupportedOperationException(\"unsafe clazz accepted when de-serializing MultiValueMap\");\n        }\n    }\n\n    private boolean isSafeClass(Class<?> clazz) {\n        // Define safe classes here, for example, only ArrayList is allowed\n        return clazz.equals(ArrayList.class);\n    }\n\n    // Other methods for MultiValueMap\n    // ...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}