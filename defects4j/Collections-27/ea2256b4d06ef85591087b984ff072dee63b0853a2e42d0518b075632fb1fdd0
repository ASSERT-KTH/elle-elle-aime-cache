{
    "generation": "import java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiValueMap<K, V> implements Serializable {\n    private Map<K, Object> map;\n    private Class<? extends V> valueClass;\n\n    private MultiValueMap(Map<K, Object> map, Class<? extends V> valueClass) {\n        this.map = map;\n        this.valueClass = valueClass;\n    }\n\n    public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, Object> map, Class<V> valueClass) {\n        return new MultiValueMap<>(map, valueClass);\n    }\n\n    private void writeObject(ObjectOutputStream oos) throws IOException {\n        oos.defaultWriteObject();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {\n        ois.defaultReadObject();\n        // Check if the deserialized valueClass is the same as expected\n        if (!valueClass.equals(((MultiValueMap<K, V>) ois.readObject()).valueClass)) {\n            throw new UnsupportedOperationException(\"unsafe clazz accepted when de-serializing MultiValueMap\");\n        }\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (obj == null || getClass() != obj.getClass()) return false;\n\n        MultiValueMap<?, ?> that = (MultiValueMap<?, ?>) obj;\n\n        if (!map.equals(that.map)) return false;\n        return valueClass.equals(that.valueClass);\n    }\n\n    @Override\n    public int hashCode() {\n        int result = map.hashCode();\n        result = 31 * result + valueClass.hashCode();\n        return result;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}