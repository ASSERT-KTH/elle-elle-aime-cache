{
    "generation": "import java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiValueMap implements Serializable {\n    private Map<Object, ArrayList> map;\n    private Class<?> valueCollectionClass;\n\n    private static final long serialVersionUID = 1L;\n\n    private MultiValueMap(Map<Object, ArrayList> map, Class<?> valueCollectionClass) {\n        this.map = map;\n        this.valueCollectionClass = valueCollectionClass;\n    }\n\n    public static MultiValueMap multiValueMap(Map<Object, ArrayList> map, Class<?> valueCollectionClass) {\n        return new MultiValueMap(map, valueCollectionClass);\n    }\n\n    private void writeObject(ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n    }\n\n    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        if (!valueCollectionClass.equals(ArrayList.class)) {\n            throw new UnsupportedOperationException(\"unsafe clazz accepted when de-serializing MultiValueMap\");\n        }\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        MultiValueMap that = (MultiValueMap) o;\n\n        if (!map.equals(that.map)) return false;\n        return valueCollectionClass.equals(that.valueCollectionClass);\n    }\n\n    @Override\n    public int hashCode() {\n        int result = map.hashCode();\n        result = 31 * result + valueCollectionClass.hashCode();\n        return result;\n    }\n\n    // Additional methods for MultiValueMap would be here\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}