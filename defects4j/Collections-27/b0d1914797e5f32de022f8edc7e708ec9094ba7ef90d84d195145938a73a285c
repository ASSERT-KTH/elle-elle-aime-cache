{
    "generation": "import java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Map;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.Factory;\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.MultiSet;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;\nimport org.apache.commons.collections4.keyvalue.AbstractKeyValueDecorator;\nimport org.apache.commons.collections4.map.AbstractMapDecorator;\nimport org.apache.commons.collections4.multiset.AbstractMultiSetDecorator;\n\npublic class MultiValueMap<K, V> extends AbstractMapDecorator<K, Collection<V>> {\n    // NOTE: This class is not really thread-safe; it should only be used internally\n\n    /** The factory to use to create value collections. */\n    private final Factory<? extends Collection<V>> collectionFactory;\n\n    /**\n     * Create a MultiValueMap backed by the given map.\n     *\n     * @param map  a map to decorate\n     * @param collectionFactory  the factory to use to create value collections, must not be null\n     * @throws NullPointerException if map is null\n     * @throws NullPointerException if collectionFactory is null\n     * @since 4.1\n     */\n    public MultiValueMap(final Map<K, ? super Collection<V>> map, final Factory<? extends Collection<V>> collectionFactory) {\n        super(map);\n        if (collectionFactory == null) {\n            throw new NullPointerException(\"collectionFactory must not be null\");\n        }\n        this.collectionFactory = collectionFactory;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Write the map out using a custom routine.\n     * @param out the output stream\n     * @throws IOException\n     */\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(map);\n    }\n\n    /**\n     * Read the map in using a custom routine.\n     * @param in the input stream\n     * @throws IOException\n     * @throws ClassNotFoundException\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        map = (Map<K, Collection<V>>) in.readObject();\n        if (collectionFactory.getClass() != ArrayList.class) {\n            throw new UnsupportedOperationException(\"Unexpected collection class \" + collectionFactory.getClass());\n        }\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}