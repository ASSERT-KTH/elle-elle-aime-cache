{
    "generation": "/**\n * Deserialize the given byte array into a MultiValueMap instance, \n * ensuring the value type is safe (i.e., not a primitive wrapper or String).\n * \n * @param bytes the byte array to deserialize\n * @return the deserialized MultiValueMap\n * @throws UnsupportedOperationException if the deserialized map's value type is unsafe\n * @throws IOException \n * @throws ClassNotFoundException \n */\npublic static MultiValueMap deserialize(byte[] bytes) throws IOException, ClassNotFoundException {\n    ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes));\n    MultiValueMap deserializedMap = (MultiValueMap) ois.readObject();\n    ois.close();\n    \n    // Check if the deserialized map's value type is safe\n    Class<?> valueType = deserializedMap.getValueType();\n    if (valueType.isPrimitive() || \n        (valueType!= null && \n         (valueType.equals(Boolean.class)   || \n          valueType.equals(Character.class) || \n          valueType.equals(Byte.class)      || \n          valueType.equals(Short.class)     || \n          valueType.equals(Integer.class)   || \n          valueType.equals(Long.class)      || \n          valueType.equals(Float.class)     || \n          valueType.equals(Double.class)    || \n          valueType.equals(String.class)))) {\n        throw new UnsupportedOperationException(\"unsafe clazz (\" + valueType.getName() + \") accepted when de-serializing MultiValueMap\");\n    }\n    \n    return deserializedMap;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}