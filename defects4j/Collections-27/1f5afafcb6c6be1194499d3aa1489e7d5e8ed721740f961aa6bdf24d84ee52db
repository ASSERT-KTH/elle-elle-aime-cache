{
    "generation": "import java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.Factory;\nimport org.apache.commons.collections4.MultiMap;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.collection.AbstractCollectionDecorator;\nimport org.apache.commons.collections4.factory.ConstantFactory;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.iterators.AbstractIteratorDecorator;\nimport org.apache.commons.collections4.iterators.TransformIterator;\nimport org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator;\n\npublic class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object>\n        implements MultiMap<K, V>, Serializable {\n\n    /** Serialisation version */\n    private static final long serialVersionUID = -2210757355570036024L;\n\n    /** The factory to use to create the values collections */\n    private final Factory<? extends Collection<V>> collectionFactory;\n\n    /** The value transformer to use */\n    private final Transformer<? super Collection<V>, ? extends Collection<V>> valueTransformer;\n\n\n    private void writeObject(final ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n    }\n\n\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        if (collectionFactory.getClass() != ArrayListValuedHashMap.class) {\n             throw new UnsupportedOperationException();\n        }\n\n    }\n\n\n    //-----------------------------------------------------------------------\n    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map,\n                                                         final Class<?> collectionClass) {\n\n        return multiValueMap(map, (Factory<Collection<V>>) new TypedFactory<Collection<V>>(collectionClass));\n    }\n\n\n    private static class TypedFactory<C extends Collection<?>> implements Factory<C>, Serializable {\n\n        private static final long serialVersionUID = -7195887835664526730L;\n\n        private final Class<?> collectionClass;\n\n        public TypedFactory(final Class<?> collectionClass) {\n            this.collectionClass = collectionClass;\n        }\n\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        public C create() {\n            try {\n                return (C) collectionClass.newInstance();\n            } catch (final Exception ex) {\n                throw new IllegalArgumentException(\"Failed to instantiate collection class: \" + ex.getMessage(), ex);\n            }\n        }\n\n    }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}