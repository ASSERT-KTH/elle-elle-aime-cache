{
    "generation": "import java.io.*;\nimport java.util.HashMap;\nimport java.util.ArrayList;\nimport java.util.Map;\n\npublic class MultiValueMap<K, V> implements Serializable {\n    private static final long serialVersionUID = 1L;\n    private final Map<K, ArrayList<V>> map;\n    private final Class<V> valueClass;\n\n    private MultiValueMap(Map<K, ArrayList<V>> map, Class<V> valueClass) {\n        this.map = map;\n        this.valueClass = valueClass;\n    }\n\n    public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, ArrayList<V>> map, Class<V> valueClass) {\n        return new MultiValueMap<>(map, valueClass);\n    }\n\n    private void writeObject(ObjectOutputStream oos) throws IOException {\n        oos.defaultWriteObject();\n    }\n\n    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {\n        ois.defaultReadObject();\n        // Check if the valueClass is safe during deserialization\n        if (!isSafeClass(valueClass)) {\n            throw new UnsupportedOperationException(\"unsafe clazz accepted when de-serializing MultiValueMap\");\n        }\n    }\n\n    private boolean isSafeClass(Class<?> clazz) {\n        // Define what classes are considered safe\n        return clazz.equals(ArrayList.class) || clazz.equals(HashMap.class) ||\n               clazz.equals(String.class) || // This is an example, adjust as needed\n               // Add other safe classes here\n               clazz.isPrimitive() || clazz.isArray();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        MultiValueMap<?, ?> that = (MultiValueMap<?, ?>) o;\n        return map.equals(that.map) && valueClass.equals(that.valueClass);\n    }\n\n    @Override\n    public int hashCode() {\n        int result = map.hashCode();\n        result = 31 * result + valueClass.hashCode();\n        return result;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}