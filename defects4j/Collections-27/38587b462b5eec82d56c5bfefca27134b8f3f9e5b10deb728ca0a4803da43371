{
    "generation": "import java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.Factory;\nimport org.apache.commons.collections4.MultiMap;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.collection.AbstractCollectionDecorator;\nimport org.apache.commons.collections4.functors.ConstantFactory;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\nimport org.apache.commons.collections4.map.AbstractMapDecorator;\n\npublic class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object>\n        implements MultiMap<K, V>, Serializable {\n\n    /** Serialization version */\n    private static final long serialVersionUID = -2214190729123697560L;\n\n    /** The factory to use to create new collections */\n    private final Factory<? extends Collection<V>> collectionFactory;\n\n    /** The map to decorate */\n    private transient Map<K, Collection<V>> map;\n\n    /**\n     * Factory method to create a MultiValueMap using the supplied map and a\n     * default collection factory.\n     *\n     * @param <K> the key type\n     * @param <V> the value type\n     * @param map the map to decorate, must not be null\n     * @return a new multi-value map\n     * @throws NullPointerException if map is null\n     * @since 4.1\n     */\n    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map) {\n        return multiValueMap(map, ArrayList.class);\n    }\n\n\n    /**\n     * Factory method to create a MultiValueMap using the supplied map and\n     * collection factory.\n     * <p>\n     *  This factory method checks if the collection factory is a safe implementation\n     *  in order to prevent possible serialization exploits. If the collection\n     *  factory is considered unsafe, then a {@link UnsupportedOperationException} is\n     *  raised.\n     * </p>\n     *\n     * @param <K> the key type\n     * @param <V> the value type\n     * @param map the map to decorate, must not be null\n     * @param collectionFactory the collection factory to use, must not be null, not be unsafe\n     * @return a new multi-value map\n     * @throws NullPointerException if collectionClass is null\n     * @throws UnsupportedOperationException if collectionClass is unsafe\n     * @since 4.1\n     */\n    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map,\n                                                               final Class<?> collectionFactory) {\n        return multiValueMap(map, new ReflectionFactory<>(collectionFactory));\n    }\n\n    /**\n     * Factory method to create a MultiValueMap using the supplied map and\n     * collection factory.\n     *\n     * @param <K> the key type\n     * @param <V> the value type\n     * @param map the map to decorate, must not be null\n     * @param collectionFactory the collection factory to use, must not be null\n     * @return a new multi-value map\n     * @throws NullPointerException if map or collectionFactory is null\n     * @since 4.1\n     */\n    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map,\n                                                               final Factory<? extends Collection<V>> collectionFactory) {\n        if (collectionFactory instanceof ReflectionFactory) {\n            final Class<?> clazz = ((ReflectionFactory<?>) collectionFactory).clazz;\n            if (clazz != null && !Collection.class.isAssignableFrom(clazz)) {\n                throw new UnsupportedOperationException();\n            }\n        }\n\n        return new MultiValueMap<>(map, collectionFactory);\n    }\n\n    // -----------------------------------------------------------------------\n    /**\n     * Constructor.\n     */\n    protected MultiValueMap() {\n        this(new HashMap<>(), new ReflectionFactory<>(ArrayList.class));\n    }\n\n    /**\n     * Constructor that wraps (not copies).\n     *\n     * @param map  the map to decorate, must not be null\n     * @param collectionFactory  the collection factory to use, must not be null\n     * @throws NullPointerException if map or collectionFactory is null\n     * @since 4.1\n     */\n    protected MultiValueMap(final Map<K, ? super Collection<V>> map, final Factory<? extends Collection<V>> collectionFactory) {\n        super(map);\n        if (collectionFactory == null) {\n            throw new NullPointerException(\"CollectionFactory must not be null.\");\n        }\n        this.map = (Map<K, Collection<V>>) map;\n        this.collectionFactory = collectionFactory;\n    }\n\n    // -----------------------------------------------------------------------\n    private void readObject(final ObjectInputStream ois) throws IOException, ClassNotFoundException {\n        ois.defaultReadObject();\n        map = new HashMap<>();\n    }\n\n    // -----------------------------------------------------------------------\n\n    private static class ReflectionFactory<T extends Collection<?>> implements Factory<T>, Serializable {\n\n        /** Serialization version */\n        private static final long serialVersionUID = 2986118688429373750L;\n\n        private final Class<?> clazz;\n\n        public ReflectionFactory(final Class<?> clazz) {\n            this.clazz = clazz;\n        }\n\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        public T create() {\n            try {\n                return (T) clazz.newInstance();\n            } catch (final InstantiationException | IllegalAccessException ex) {\n                throw new UnsupportedOperationException();\n            }\n        }\n\n        private Object readResolve() {\n            if (clazz != null && !Collection.class.isAssignableFrom(clazz)) {\n                return new ConstantFactory<>(new UnsupportedOperationException());\n            }\n            return this;\n        }\n\n    }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}