{
    "generation": "import java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MultiMap;\nimport org.apache.commons.collections4.collection.AbstractCollectionDecorator;\n\npublic class MultiValueMap<K, V> extends AbstractMapDecorator<K, Collection<V>>\n        implements MultiMap<K, V>, Serializable {\n\n    /** Serialization version */\n    private static final long serialVersionUID = -2214190649069900679L;\n\n    /** The collection class to use */\n    private final Class<? extends Collection<V>> collectionClass;\n\n    /**\n     * Constructor.\n     */\n    protected MultiValueMap(Map<K, Collection<V>> map, Class<? extends Collection<V>> collectionClass) {\n        super(map);\n        if (collectionClass == null) {\n            throw new NullPointerException(\"Collection class is missing.\");\n        }\n        this.collectionClass = collectionClass;\n    }\n\n\n    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {\n        ois.defaultReadObject();\n        // the collectionClass needs to be validated here, as the default deserialization\n        // from AbstractMapDecorator is potentially unsafe. Specifically, an attacker\n        // could create a stream that would deserialize a MultiValueMap with String.class as\n        // collectionClass. The implementation of decorateValues() would then essentially\n        // cast the backing HashMap into a Map<K,String>, which would allow the attacker\n        // to bypass the type system. By validating the class here, we ensure no unsafe\n        // classes can be used\n        if (!Collection.class.isAssignableFrom(collectionClass)) {\n            throw new UnsupportedOperationException();\n        }\n       \n        Map<K, Collection<V>> map = new HashMap<>();\n        map = (Map<K, Collection<V>>) ois.readObject();\n        this.decorated = map;\n    }\n\n    private void writeObject(ObjectOutputStream oos) throws IOException {\n        oos.defaultWriteObject();\n        oos.writeObject(this.decorated());\n    }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}