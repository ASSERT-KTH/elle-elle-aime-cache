{
    "generation": "public class MultiValueMap<K, V> extends AbstractMap<K, Collection<V>> implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    private final Map<K, Collection<V>> map;\n    private final Class<? extends Collection> collectionClass;\n\n    public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, Collection<V>> map, Class<? extends Collection> collectionClass) {\n        return new MultiValueMap<>(map, collectionClass);\n    }\n\n    private MultiValueMap(Map<K, Collection<V>> map, Class<? extends Collection> collectionClass) {\n        if (map == null) {\n            throw new IllegalArgumentException(\"Map must not be null\");\n        }\n        if (collectionClass == null) {\n            throw new IllegalArgumentException(\"Collection class must not be null\");\n        }\n        this.map = map;\n        this.collectionClass = collectionClass;\n    }\n\n    @Override\n    public Collection<V> get(Object key) {\n        Collection<V> values = map.get(key);\n        if (values == null) {\n            try {\n                values = collectionClass.getDeclaredConstructor().newInstance();\n            } catch (Exception e) {\n                throw new RuntimeException(\"Unable to instantiate collection class\", e);\n            }\n            map.put((K) key, values);\n        }\n        return values;\n    }\n\n    @Override\n    public Collection<V> put(K key, Collection<V> value) {\n        return map.put(key, value);\n    }\n\n    @Override\n    public Collection<V> remove(Object key) {\n        return map.remove(key);\n    }\n\n    @Override\n    public void clear() {\n        map.clear();\n    }\n\n    @Override\n    public Set<K> keySet() {\n        return map.keySet();\n    }\n\n    @Override\n    public Collection<Collection<V>> values() {\n        return map.values();\n    }\n\n    @Override\n    public Set<Entry<K, Collection<V>>> entrySet() {\n        return map.entrySet();\n    }\n\n    private void writeObject(ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n        out.writeObject(collectionClass);\n    }\n\n    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        Class<?> clazz = (Class<?>) in.readObject();\n        if (!Collection.class.isAssignableFrom(clazz)) {\n            throw new UnsupportedOperationException(\"Unsupported collection class: \" + clazz);\n        }\n        this.collectionClass = (Class<? extends Collection>) clazz;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n        MultiValueMap<?, ?> other = (MultiValueMap<?, ?>) obj;\n        return map.equals(other.map) && collectionClass.equals(other.collectionClass);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(map, collectionClass);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}