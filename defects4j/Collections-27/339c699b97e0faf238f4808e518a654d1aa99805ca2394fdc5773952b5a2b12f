{
    "generation": "import java.io.*;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiValueMap<K, V> implements Serializable {\n    private final Map<K, Collection<V>> map;\n    private final Class<? extends Collection> collectionClass;\n\n    private static final long serialVersionUID = 1L;\n\n    private MultiValueMap(Map<K, Collection<V>> map, Class<? extends Collection> collectionClass) {\n        this.map = map;\n        this.collectionClass = collectionClass;\n    }\n\n    public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, Collection<V>> map, Class<? extends Collection> collectionClass) {\n        return new MultiValueMap<>(map, collectionClass);\n    }\n\n    private void writeObject(ObjectOutputStream out) throws IOException {\n        out.defaultWriteObject();\n    }\n\n    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        // Check for unsafe classes during deserialization\n        if (collectionClass.equals(String.class)) {\n            throw new UnsupportedOperationException(\"Unsafe class accepted during deserialization\");\n        }\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (obj == null || getClass() != obj.getClass()) return false;\n        MultiValueMap<?, ?> that = (MultiValueMap<?, ?>) obj;\n        return map.equals(that.map) && collectionClass.equals(that.collectionClass);\n    }\n\n    @Override\n    public int hashCode() {\n        return map.hashCode() ^ collectionClass.hashCode();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}