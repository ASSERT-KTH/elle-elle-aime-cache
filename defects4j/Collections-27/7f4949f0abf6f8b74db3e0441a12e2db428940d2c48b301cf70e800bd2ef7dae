{
    "generation": "import java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiValueMap<K, V> implements Serializable {\n    private static final long serialVersionUID = 834176534042866011L;\n\n    private final Map<K, Collection<V>> map;\n    private final Class<? extends Collection> collectionClazz;\n\n    private MultiValueMap(Map<K, Collection<V>> map, Class<? extends Collection> collectionClazz) {\n        this.map = map;\n        this.collectionClazz = collectionClazz;\n    }\n\n    public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, Collection<V>> map, Class<? extends Collection> collectionClazz) {\n        return new MultiValueMap<>(map, collectionClazz);\n    }\n\n    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        Class<? extends Collection> deserializedCollectionClazz = (Class<? extends Collection>) stream.readObject();\n\n        // Check if the deserialized class is safe\n        if (!deserializedCollectionClazz.equals(ArrayList.class) && !deserializedCollectionClazz.equals(LinkedList.class)) {\n            throw new UnsupportedOperationException(\"Unsafe deserialization attempted with class: \" + deserializedCollectionClazz.getName());\n        }\n\n        this.collectionClazz = deserializedCollectionClazz;\n        int size = stream.readInt();\n        for (int i = 0; i < size; i++) {\n            K key = (K) stream.readObject();\n            Collection<V> value = (Collection<V>) stream.readObject();\n            this.map.put(key, value);\n        }\n    }\n\n    private void writeObject(java.io.ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        stream.writeObject(collectionClazz);\n        stream.writeInt(map.size());\n        for (Map.Entry<K, Collection<V>> entry : map.entrySet()) {\n            stream.writeObject(entry.getKey());\n            stream.writeObject(entry.getValue());\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}