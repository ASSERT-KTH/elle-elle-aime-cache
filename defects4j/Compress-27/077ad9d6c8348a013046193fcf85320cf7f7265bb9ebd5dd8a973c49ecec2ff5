{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces and NULs\n    while (start < end && (buffer[start] == ' ' || buffer[start] == 0)) {\n        start++;\n    }\n\n    // If all characters are spaces or NULs, return 0\n    if (start == end) {\n        return 0L;\n    }\n\n    // Find the end of the octal number\n    int numberEnd = start;\n    while (numberEnd < end && buffer[numberEnd] >= '0' && buffer[numberEnd] <= '7') {\n        numberEnd++;\n    }\n\n    // Check for valid trailing characters\n    if (numberEnd == end || (numberEnd < end && (buffer[numberEnd] == 0 || buffer[numberEnd] == ' '))) {\n        // Valid trailing characters found\n        for (int i = start; i < numberEnd; i++) {\n            result = (result << 3) + (buffer[i] - '0'); // convert from ASCII\n        }\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, numberEnd, buffer[numberEnd]));\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}