{
    "generation": "/**\n * Parse an octal string from a buffer.\n *\n * <p>Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.</p>\n *\n * <p>The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).</p>\n *\n * <p>To work-around some tar implementations that insert a\n * leading NUL this method returns 0 if it detects a leading NUL\n * since Commons Compress 1.4.</p>\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces\n    while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    // Check if the string is empty after trimming\n    if (start == end || buffer[end - 1] < '0' || buffer[end - 1] > '7') {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, end == start ? (byte) ' ' : buffer[end - 1]));\n    }\n\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}\n\n// Helper method to create exception message\nprivate static String exceptionMessage(final byte[] buffer, final int offset, final int length, final int current, final byte currentByte) {\n    final StringBuilder sb = new StringBuilder();\n    sb.append(\"Invalid byte \").append((int) currentByte).append(\" at offset \").append(current - offset);\n    sb.append(\" in '\");\n\n    final int end = Math.min(offset + length, buffer.length);\n    for (int i = offset; i < end; i++) {\n        if (i == current) {\n            sb.append(\"{\");\n\n        }\n        if (i >= offset + length) {\n            sb.append(\"}\");\n            break;\n        }\n        if (buffer[i] == 0) {\n            sb.append(\"{NUL}\");\n        } else {\n            sb.append((char) buffer[i]);\n        }\n        if (i == current) {\n            sb.append(\"}\");\n        }\n    }\n    sb.append(\"' len=\").append(length);\n    return sb.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}