{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Find end of number by looking for a space or NUL, without modifying 'end'\n    int numberEnd = start;\n    while (numberEnd < end && buffer[numberEnd] >= '0' && buffer[numberEnd] <= '7') {\n        numberEnd++;\n    }\n\n    if (numberEnd == start) {\n        // No valid octal digits found after leading spaces\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, buffer[start]));\n    }\n\n    // Parse the octal number\n    for (int i = start; i < numberEnd; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // Check for trailing space or NUL\n    if (numberEnd < end) {\n        byte trailer = buffer[numberEnd];\n        if (trailer != ' ' && trailer != 0) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, numberEnd, trailer));\n        }\n        // Additional trailing space or NUL is allowed\n        if (numberEnd + 1 < end) {\n            trailer = buffer[numberEnd + 1];\n            if (trailer != ' ' && trailer != 0) {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, numberEnd + 1, trailer));\n            }\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}