{
    "generation": "/**\n * <p>Test if two <code>Object</code>s are equal using their\n * <code>equals</code> method.</p>\n *\n * @param lhs  the left hand object\n * @param rhs  the right hand object\n * @return EqualsBuilder - used to chain calls.\n */\npublic EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return this;\n    }\n    if (lhs.getClass().equals(rhs.getClass())) {\n        // The simple case, not an array, just test the element, \n        // unless it's a BigDecimal where we need to compare the values\n        if (lhs instanceof BigDecimal) {\n            isEquals = lhs.equals(rhs);\n        } else {\n            isEquals = lhs.equals(rhs);\n        }\n    } else if (lhs.getClass().isArray() && rhs.getClass().isArray()) {\n        // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n        this.setEquals(false);\n    } else {\n        // Here when we compare non-arrays\n        this.setEquals(false);\n    }\n    // 'Switch' on type of array, to dispatch to the correct handler\n    // This handles multi dimensional arrays of the same depth\n    if (lhs instanceof long[]) {\n        append((long[]) lhs, (long[]) rhs);\n    } else if (lhs instanceof int[]) {\n        append((int[]) lhs, (int[]) rhs);\n    } else if (lhs instanceof short[]) {\n        append((short[]) lhs, (short[]) rhs);\n    } else if (lhs instanceof char[]) {\n        append((char[]) lhs, (char[]) rhs);\n    } else if (lhs instanceof byte[]) {\n        append((byte[]) lhs, (byte[]) rhs);\n    } else if (lhs instanceof double[]) {\n        append((double[]) lhs, (double[]) rhs);\n    } else if (lhs instanceof float[]) {\n        append((float[]) lhs, (float[]) rhs);\n    } else if (lhs instanceof boolean[]) {\n        append((boolean[]) lhs, (boolean[]) rhs);\n    } else if (lhs instanceof Object[]) {\n        append((Object[]) lhs, (Object[]) rhs);\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}