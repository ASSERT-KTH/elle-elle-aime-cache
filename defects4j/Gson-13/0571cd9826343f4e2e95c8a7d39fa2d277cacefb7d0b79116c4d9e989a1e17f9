{
    "generation": "  private int peekNumber() throws IOException {\n    // Like nextNonWhitespace, this uses locals 'p' and 'l' to save inner-loop field access.\n    char[] buffer = this.buffer;\n    int p = pos;\n    int l = limit;\n\n    long value = 0; // Negative to accommodate Long.MIN_VALUE more easily.\n    boolean negative = false;\n    boolean fitsInLong = true;\n    int last = NUMBER_CHAR_NONE;\n\n    int i = 0;\n\n    charactersOfNumber:\n    for (; true; i++) {\n      if (p + i == l) {\n        if (i == buffer.length) {\n          // Though this looks like a well-formed number, it's too long to continue reading. Give up\n          // and let the application handle this as an unquoted literal.\n          return PEEKED_NONE;\n        }\n        if (!fillBuffer(i + 1)) {\n          break;\n        }\n        p = pos;\n        l = limit;\n      }\n\n      char c = buffer[p + i];\n      switch (c) {\n      case '-':\n        if (last == NUMBER_CHAR_NONE) {\n          negative = true;\n          last = NUMBER_CHAR_SIGN;\n          continue;\n        } else if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '+':\n        if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case 'e':\n      case 'E':\n        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n          last = NUMBER_CHAR_EXP_E;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '.':\n        if (last == NUMBER_CHAR_DIGIT) {\n          last = NUMBER_CHAR_DECIMAL;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      default:\n        if (c < '0' || c > '9') {\n          if (!isLiteral(c)) {\n            break charactersOfNumber;\n          }\n          return PEEKED_NONE;\n        }\n        if (last == NUMBER_CHAR_SIGN) {\n          last = NUMBER_CHAR_DIGIT;\n          // don't append character in value string if minus and 0\n          if (!(value == 0 && buffer[p+i-1]=='-' )){\n            value = value*10L - ((c-'0'));\n        }\n        if (negative){\n            return PEEKED_NONE; // avoid integer minus check\n      } \n      }\n    }}  \n\n      default:\n   default:\n value =  \n (value \n\n  e-02d.2    \n2,21.219        \n.4        \n9i4k.212) .\n\n   ...\n\n}     \n  =   \n i))   PEEK ( \n\n =        \n    ;/0<0k    }        =value< =k \n            break  \n2    \ne =, i   \n...\n        \n}k  \nreturn     \n. = ;   \n \n\n return    *    \n     \nk PEEK\n}e e \n\n...\n} return PeekdnumberLength        \n...  =\n = ( ;i==i>,return  ...\n\n}2 i<     \n  \n,     \n  \n i-    \n value \n\n return, \n k2 \n\n. 8\n \n. +  \n) /<1- -    ",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}