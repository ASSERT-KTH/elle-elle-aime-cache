{
    "generation": "/**\n * Get the ns uri of the specified node.\n * @param node Node to check\n * @return String ns uri\n */\npublic static String getNamespaceURI(Node node) {\n    if (node instanceof Document) {\n        node = ((Document) node).getDocumentElement();\n    }\n\n    if (node.getNodeType()!= Node.ELEMENT_NODE) {\n        // Handle non-element nodes (e.g., text, comment, processing instruction)\n        return node.lookupNamespaceURI(null);\n    }\n\n    Element element = (Element) node;\n\n    String uri = element.getNamespaceURI();\n    if (uri == null) {\n        String prefix = getPrefix(node);\n        String qname = prefix == null? \"xmlns\" : \"xmlns:\" + prefix;\n    \n        Node aNode = node;\n        while (aNode!= null) {\n            if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                Attr attr = ((Element) aNode).getAttributeNodeNS(\"http://www.w3.org/2000/xmlns/\", qname);\n                if (attr!= null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        }\n        // If no xmlns attribute is found and the prefix is not null, \n        // it might be a default namespace, so return the namespace URI of the current element\n        return prefix!= null? element.lookupNamespaceURI(prefix) : null;\n    }\n    return uri;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}