{
    "generation": "/**\n * Skips the given number of bytes by repeatedly invoking skip on\n * the given input stream if necessary.\n *\n * <p>In a case where the stream's skip() method returns 0 before\n * the requested number of bytes has been skipped, this implementation\n * will fall back to using the read() method.</p>\n *\n * <p>This method will only skip less than the requested number of\n * bytes if the end of the input stream has been reached.</p>\n *\n * @param input stream to skip bytes in\n * @param numToSkip the number of bytes to skip\n * @return the number of bytes actually skipped\n * @throws IOException\n */\npublic static long skip(InputStream input, long numToSkip) throws IOException {\n    long totalSkipped = 0;\n    byte[] buffer = new byte[2048];\n    \n    while (totalSkipped < numToSkip) {\n        long remaining = numToSkip - totalSkipped;\n        \n        // Try to skip using the skip() method\n        long skipped = input.skip(remaining);\n        \n        if (skipped == 0) {\n            // If skip() returns 0, fall back to read()\n            int read = input.read(buffer, 0, (int) Math.min(remaining, buffer.length));\n            if (read < 0) {\n                // End of stream reached\n                break;\n            }\n            skipped = read;\n        }\n        \n        totalSkipped += skipped;\n    }\n    \n    return totalSkipped;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}