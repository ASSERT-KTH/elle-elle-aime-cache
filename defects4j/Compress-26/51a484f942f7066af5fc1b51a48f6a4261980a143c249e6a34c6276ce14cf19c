{
    "generation": "/**\n * Skips the given number of bytes by repeatedly invoking skip on\n * the given input stream if necessary.\n *\n * <p>In a case where the stream's skip() method returns 0 before\n * the requested number of bytes has been skipped, this implementation\n * will fall back to using the read() method.</p>\n *\n * <p>This method will only skip less than the requested number of\n * bytes if the end of the input stream has been reached.</p>\n *\n * @param input stream to skip bytes in\n * @param numToSkip the number of bytes to skip\n * @return the number of bytes actually skipped\n * @throws IOException\n */\npublic static long skip(InputStream input, long numToSkip) throws IOException {\n    long remaining = numToSkip;\n    long skipped = 0;\n\n    while (remaining > 0) {\n        long n = input.skip(remaining);\n        if (n == 0) {\n            // Fallback to using read() if skip() returns 0\n            int bytesRead = 0;\n            while (bytesRead < 1 && remaining > 0) {\n                int b = input.read();\n                if (b == -1) {\n                    // End of stream reached\n                    return skipped;\n                }\n                bytesRead++;\n                remaining--;\n            }\n            skipped += bytesRead;\n        } else {\n            remaining -= n;\n            skipped += n;\n        }\n    }\n\n    return skipped;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}