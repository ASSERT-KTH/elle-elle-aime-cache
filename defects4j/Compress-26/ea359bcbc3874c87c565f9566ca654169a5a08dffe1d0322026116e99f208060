{
    "generation": "/**\n * Skips the given number of bytes by repeatedly invoking skip on\n * the given input stream if necessary.\n *\n * <p>In a case where the stream's skip() method returns 0 before\n * the requested number of bytes has been skip this implementation\n * will fall back to using the read() method.</p>\n *\n * <p>This method will only skip less than the requested number of\n * bytes if the end of the input stream has been reached.</p>\n *\n * @param input stream to skip bytes in\n * @param numToSkip the number of bytes to skip\n * @return the number of bytes actually skipped\n * @throws IOException\n */\npublic static long skip(InputStream input, long numToSkip) throws IOException {\n    long skipped = 0;\n    while (numToSkip > 0) {\n        long chunk = input.skip(numToSkip);\n        if (chunk > 0) {\n            skipped += chunk;\n            numToSkip -= chunk;\n        } else {\n            // fallback to read() if skip() returns 0\n            int b;\n            while (numToSkip > 0 && (b = input.read())!= -1) {\n                skipped++;\n                numToSkip--;\n            }\n            break;\n        }\n    }\n    return skipped;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}