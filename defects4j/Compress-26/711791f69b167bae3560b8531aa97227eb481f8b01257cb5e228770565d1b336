{
    "generation": "/**\n * Skips the given number of bytes by repeatedly invoking skip on\n * the given input stream if necessary.\n *\n * <p>In a case where the stream's skip() method returns 0 before\n * the requested number of bytes has been skip this implementation\n * will fall back to using the read() method.</p>\n *\n * <p>This method will only skip less than the requested number of\n * bytes if the end of the input stream has been reached.</p>\n *\n * @param input stream to skip bytes in\n * @param numToSkip the number of bytes to skip\n * @return the number of bytes actually skipped\n * @throws IOException\n */\npublic static long skip(InputStream input, long numToSkip) throws IOException {\n    long skipped = 0;\n    while (numToSkip > 0) {\n        long toSkip = input.skip(numToSkip);\n        if (toSkip == 0) {\n            // Skip didn't work, fall back to using read\n            toSkip = 0;\n            while (toSkip < 8192 && numToSkip > 0) {\n                int chunk = (int) Math.min(8192, numToSkip);\n                byte[] buffer = new byte[chunk];\n                int read = input.read(buffer, 0, chunk);\n                if (read == -1) {\n                    break;\n                }\n                toSkip += read;\n                numToSkip -= read;\n            }\n        } else {\n            numToSkip -= toSkip;\n        }\n        skipped += toSkip;\n    }\n    return skipped;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}