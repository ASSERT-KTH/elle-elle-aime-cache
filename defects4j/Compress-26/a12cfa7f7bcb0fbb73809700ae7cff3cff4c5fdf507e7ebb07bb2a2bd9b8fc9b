{
    "generation": "/**\n * Skips the given number of bytes by repeatedly invoking skip on\n * the given input stream if necessary.\n *\n * <p>In a case where the stream's skip() method returns 0 before\n * the requested number of bytes has been skip this implementation\n * will fall back to using the read() method.</p>\n *\n * <p>This method will only skip less than the requested number of\n * bytes if the end of the input stream has been reached.</p>\n *\n * @param input stream to skip bytes in\n * @param numToSkip the number of bytes to skip\n * @return the number of bytes actually skipped\n * @throws IOException\n */\npublic static long skip(InputStream input, long numToSkip) throws IOException {\n    long skipped = 0;\n    while (numToSkip > 0) {\n        long skippedThisTime = input.skip(numToSkip);\n        if (skippedThisTime > 0) {\n            numToSkip -= skippedThisTime;\n            skipped += skippedThisTime;\n        } else {\n            // skip() returned 0, now try to read() to skip the rest\n            int bytesRead = input.read();\n            if (bytesRead < 0) {\n                // end of input stream reached\n                break;\n            } else {\n                numToSkip--;\n                skipped++;\n            }\n        }\n    }\n    return skipped;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}