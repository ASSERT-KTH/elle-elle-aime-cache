{
    "generation": "    /**\n     * Skips the given number of bytes by repeatedly invoking skip on\n     * the given input stream if necessary.\n     *\n     * <p>In a case where the stream's skip() method returns 0 before\n     * the requested number of bytes has been skip this implementation\n     * will fall back to using the read() method.</p>\n     *\n     * <p>This method will only skip less than the requested number of\n     * bytes if the end of the input stream has been reached.</p>\n     *\n     * @param input stream to skip bytes in\n     * @param numToSkip the number of bytes to skip\n     * @return the number of bytes actually skipped\n     * @throws IOException\n     */\n    public static long skip(InputStream input, long numToSkip) throws IOException {\n        long remaining = numToSkip;\n        while (remaining > 0) {\n            long skipped = input.skip(remaining);\n            if (skipped == 0) {\n                // Fall back to using read() if skip() returns 0\n                if (input.read() == -1) {\n                    // End of stream reached\n                    break;\n                } else {\n                    skipped = 1; // We read one byte\n                }\n            }\n            remaining -= skipped;\n        }\n        \n        return numToSkip - remaining;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}