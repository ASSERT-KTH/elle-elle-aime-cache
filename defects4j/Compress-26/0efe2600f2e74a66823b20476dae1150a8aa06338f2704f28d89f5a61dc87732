{
    "generation": "/**\n * Skips the given number of bytes by repeatedly invoking skip on\n * the given input stream if necessary.\n *\n * <p>In a case where the stream's skip() method returns 0 before\n * the requested number of bytes has been skip this implementation\n * will fall back to using the read() method.</p>\n *\n * <p>This method will only skip less than the requested number of\n * bytes if the end of the input stream has been reached.</p>\n *\n * @param input stream to skip bytes in\n * @param numToSkip the number of bytes to skip\n * @return the number of bytes actually skipped\n * @throws IOException\n */\npublic static long skip(InputStream input, long numToSkip) throws IOException {\n    long remaining = numToSkip;\n    long skipped = 0;\n    while (remaining > 0) {\n        long delta = input.skip(remaining);\n        if (delta > 0) {\n            skipped += delta;\n            remaining -= delta;\n            continue;\n        }\n        int ch;\n        while (remaining > 0 && (ch = input.read())!= -1) {\n            skipped++;\n            remaining--;\n        }\n        break;\n    }\n    return skipped;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}