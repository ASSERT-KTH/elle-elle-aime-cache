{
    "generation": "    private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        /*\n         * The following headers are defined for Pax.\n         * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields\n         * mtime\n         * comment\n         * gid, gname\n         * linkpath\n         * size\n         * uid,uname\n         * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those\n         */\n        for (Entry<String, String> ent : headers.entrySet()) {\n            String key = ent.getKey();\n            String val = ent.getValue();\n            try {\n                if (\"path\".equals(key)) {\n                    currEntry.setName(val);\n                } else if (\"linkpath\".equals(key)) {\n                    currEntry.setLinkName(val);\n                } else if (\"gid\".equals(key)) {\n                    currEntry.setGroupId(parseLongOrDefault(val, 0)); // Use parseLongOrDefault for large values\n                } else if (\"gname\".equals(key)) {\n                    currEntry.setGroupName(val);\n                } else if (\"uid\".equals(key)) {\n                    currEntry.setUserId(parseLongOrDefault(val, 0)); // Use parseLongOrDefault for large values\n                } else if (\"uname\".equals(key)) {\n                    currEntry.setUserName(val);\n                } else if (\"size\".equals(key)) {\n                    currEntry.setSize(Long.parseLong(val));\n                } else if (\"mtime\".equals(key)) {\n                    currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n                } else if (\"SCHILY.devminor\".equals(key)) {\n                    currEntry.setDevMinor(Integer.parseInt(val));\n                } else if (\"SCHILY.devmajor\".equals(key)) {\n                    currEntry.setDevMajor(Integer.parseInt(val));\n                }\n            } catch (NumberFormatException e) {\n                // Log or handle parsing error, if needed\n            }\n        }\n    }\n\n    private long parseLongOrDefault(String val, long defaultValue) {\n        try {\n            // Handles large numbers that might exceed Integer limits\n            return Long.parseLong(val);\n        } catch (NumberFormatException e) {\n            return defaultValue;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}