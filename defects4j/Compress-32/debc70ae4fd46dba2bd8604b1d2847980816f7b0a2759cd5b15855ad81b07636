{
    "generation": "    private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()){\n            String key = ent.getKey();\n            String val = ent.getValue();\n            try {\n                if (\"path\".equals(key)){\n                    currEntry.setName(val);\n                } else if (\"linkpath\".equals(key)){\n                    currEntry.setLinkName(val);\n                } else if (\"gid\".equals(key)){\n                    currEntry.setGroupId(Long.parseLong(val));  // Change to Long.parseLong to support larger values\n                } else if (\"gname\".equals(key)){\n                    currEntry.setGroupName(val);\n                } else if (\"uid\".equals(key)){\n                    currEntry.setUserId(Long.parseLong(val));  // Change to Long.parseLong to support larger values\n                } else if (\"uname\".equals(key)){\n                    currEntry.setUserName(val);\n                } else if (\"size\".equals(key)){\n                    currEntry.setSize(Long.parseLong(val));\n                } else if (\"mtime\".equals(key)){\n                    currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n                } else if (\"SCHILY.devminor\".equals(key)){\n                    currEntry.setDevMinor(Integer.parseInt(val));\n                } else if (\"SCHILY.devmajor\".equals(key)){\n                    currEntry.setDevMajor(Integer.parseInt(val));\n                }\n            } catch (NumberFormatException e) {\n                // Handle the case where the string cannot be parsed into a number\n                throw new IllegalArgumentException(\"Invalid numeric value for \" + key + \": \" + val, e);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}