{
    "generation": "private JSType getDeclaredType(String sourceName, JSDocInfo info, Node lValue, @Nullable Node rValue) {\n  if (info != null && info.hasType()) {\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n  } else if (rValue != null && rValue.isFunction() &&\n      shouldUseFunctionLiteralType(JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n    return rValue.getJSType();\n  } else if (info != null) {\n    if (info.isConstant()) {\n      if (rValue != null) {\n        if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n          return rValue.getJSType();\n        } else if (rValue.isOr()) {\n          Node firstClause = rValue.getFirstChild();\n          Node secondClause = firstClause.getNext();\n          boolean namesMatch = firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString());\n          if (namesMatch && secondClause.getJSType() != null && !secondClause.getJSType().isUnknownType()) {\n            return secondClause.getJSType();\n          }\n        }\n      }\n    }\n    if (info.hasEnumParameterType()) {\n      if (rValue != null && rValue.isObjectLit()) {\n        return rValue.getJSType();\n      } else {\n        return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n      }\n    } else if (info.isConstructor() || info.isInterface()) {\n      return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    }\n  }\n\n  return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}