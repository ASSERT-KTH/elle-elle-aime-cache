{
    "generation": "/**\n * Translate an input onto a Writer. This is intentionally final as its algorithm is \n * tightly coupled with the abstract method of this class. \n *\n * @param input CharSequence that is being translated\n * @param out Writer to translate the text to\n * @throws IOException if and only if the Writer produces an IOException\n */\npublic final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            int codePoint = Character.codePointAt(input, pos);\n            if (Character.isHighSurrogate(codePoint)) {\n                if (pos + 1 < len) {\n                    int next = pos + 1;\n                    int nextCode = Character.codePointAt(input, next);\n                    if (Character.isLowSurrogate(nextCode)) {\n                        consumed = 2;\n                    } else {\n                        // Invalid surrogate pair: treat as single char\n                        consumed = 1;\n                    }\n                } else {\n                    // High surrogate at the end: treat as single char\n                    consumed = 1;\n                }\n            } else {\n                consumed = 1;\n            }\n            out.write(Character.toChars(codePoint));\n            pos += consumed;\n            continue;\n        }\n        // contract with translators is that they have to understand codepoints \n        // and they just took care of a surrogate pair\n        for (int pt = 0; pt < consumed; pt++) {\n            pos += Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}