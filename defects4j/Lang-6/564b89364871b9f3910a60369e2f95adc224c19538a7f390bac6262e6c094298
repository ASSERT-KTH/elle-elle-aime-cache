{
    "generation": "/**\n * Translate an input onto a Writer. This is intentionally final as its algorithm is \n * tightly coupled with the abstract method of this class. \n *\n * @param input CharSequence that is being translated\n * @param out Writer to translate the text to\n * @throws IOException if and only if the Writer produces an IOException\n */\npublic final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            int codePoint = Character.codePointAt(input, pos);\n            char[] c = Character.toChars(codePoint);\n            out.write(c);\n            pos += c.length; // Correctly increment pos by the length of the surrogate pair (1 or 2)\n            continue;\n        }\n        // contract with translators is that they have to understand codepoints \n        // and they just took care of a surrogate pair\n        pos += consumed; // Directly increment pos by the consumed amount, as per the contract\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}