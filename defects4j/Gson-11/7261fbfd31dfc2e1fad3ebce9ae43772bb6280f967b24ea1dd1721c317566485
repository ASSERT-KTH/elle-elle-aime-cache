{
    "generation": "@Override\npublic Number read(JsonReader in) throws IOException {\n  JsonToken jsonToken = in.peek();\n  switch (jsonToken) {\n  case NULL:\n    in.nextNull();\n    return null;\n  case NUMBER:\n    return new LazilyParsedNumber(in.nextString());\n  case STRING:\n    try {\n      String value = in.nextString();\n      // Try to parse as an integer first\n      return Integer.parseInt(value);\n    } catch (NumberFormatException e1) {\n      try {\n        // If it's not an integer, try to parse as a double\n        return Double.parseDouble(value);\n      } catch (NumberFormatException e2) {\n        // If it's not a valid number, rethrow the exception\n        throw new JsonSyntaxException(\"Failed to parse number from string: \" + value, e2);\n      }\n    }\n  default:\n    throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}