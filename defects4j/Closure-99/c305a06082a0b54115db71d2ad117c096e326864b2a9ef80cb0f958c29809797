{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Fix for method assignment to the prototype property\n        if (isPrototypeAssignment(lhs)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n}\n\nprivate boolean isPrototypeAssignment(Node lhs) {\n    Node grandParent = lhs.getParent().getParent();\n    if (lhs.getType() != Token.GETELEM && lhs.getType() != Token.GETPROP && grandParent == null) {\n      return false;\n    }\n\n    Node baseName = lhs.getType() == Token.GETELEM ? lhs.getFirstChild().getNext() : lhs;\n    while (baseName.getType() == Token.GETPROP) {\n      if (baseName.getLastChild().getString().equals(\"prototype\")) {\n        return true;\n      }\n      baseName = baseName.getFirstChild();\n    }\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}