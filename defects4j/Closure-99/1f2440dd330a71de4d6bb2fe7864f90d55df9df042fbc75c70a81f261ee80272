{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc!= null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN ||\n          pType == Token.GETPROP ||\n          (pType == Token.STRING && parent.getParent().getType() == Token.GETPROP))) {\n      return false;\n    }\n  }\n\n  if (parent!= null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty, unless it is in a block.\n      Node assignGrandParent = parent.getParent();\n      if ((lhs.getType() == Token.GETPROP ||\n           (lhs.getType() == Token.STRING && assignGrandParent.getType() == Token.GETPROP)) &&\n          assignGrandParent.getParent() instanceof Block) {\n        if (lhs.getType() == Token.GETPROP) {\n          Node propNameNode = lhs.getLastChild();\n          if (\"prototype\".equals(propNameNode.getString()) ||\n              (assignGrandParent.getParent().getParent().getParent() instanceof ClassMembers && \"prototype\".equals(((ClassMembers)assignGrandParent.getParent().getParent().getParent()).getNode().getString()))) {\n            return false;\n          }\n        } else if (assignGrandParent.getParent().getType() == Token.OBJECTLIT) {\n          return false;\n        } else {\n          if ((\"prototype.\".equals(lhs.getParent().getQualifiedName().substring(assignGrandParent.getQualifiedName().length()))) ||\n              lhs.getParent().getQualifiedName().substring(assignGrandParent.getQualifiedName().length()).startsWith(\".prototype.\")) {\n            return false;\n          }\n        }\n      } else if (lhs.getType() == Token.GETPROP && (lhs.getLastChild().getType() == Token.THIS) &&!rhs.getParent().getParent().isAssignFrom()) {\n        return true;\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}