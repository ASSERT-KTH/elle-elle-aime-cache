{
    "generation": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non-global contexts.\n */\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.VAR ||\n          pType == Token.FUNCTION ||\n          pType == Token.GETPROP ||\n          pType == Token.STRING_KEY ||\n          pType == Token.OBJECT_KEY ||\n          pType == Token.PROP)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment.\n      // To handle nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      if (isPrototypeAssignment(lhs)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nprivate boolean isPrototypeAssignment(Node node) {\n  if (node.getType() == Token.GETPROP) {\n    Node propertyName = node.getLastChild();\n    if (\"prototype\".equals(propertyName.getString())) {\n      return true;\n    }\n  } else if (node.getQualifiedName() != null &&\n             node.getQualifiedName().contains(\".prototype.\")) {\n    return true;\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}