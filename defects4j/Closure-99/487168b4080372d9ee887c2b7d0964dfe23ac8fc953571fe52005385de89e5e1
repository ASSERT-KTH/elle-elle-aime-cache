{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n             jsDoc.hasThisType() ||\n             jsDoc.isOverride())) {\n            return false;\n        }\n\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME ||\n              pType == Token.ASSIGN ||\n              pType == Token.GETPROP ||\n              pType == Token.GETELEM ||\n              pType == Token.BIND)) {\n            return false;\n        }\n\n        // If the function is not a method (i.e., it's a property of an object),\n        // it shouldn't be traversed.\n        if (parent.getType() == Token.GETPROP &&\n            !\"\\nconstructor\".equals(parent.getLastChild().getString()) &&\n            parent == n.getParent()) {\n            return false;\n        }\n\n        // If the function is assigned as a property of a 'prototype' object,\n        // it shouldn't be traversed.\n        Node grandparent = parent.getParent();\n        if (grandparent != null && grandparent.getType() == Token.GETPROP &&\n            grandparent.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Don't traverse the right side if it's assigned to a property of a 'prototype' object\n            if (lhs.getType() == Token.GETPROP &&\n                lhs.getParent().getType() == Token.GETPROP &&\n                lhs.getParent().getLastChild().getString().equals(\"prototype\")) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}