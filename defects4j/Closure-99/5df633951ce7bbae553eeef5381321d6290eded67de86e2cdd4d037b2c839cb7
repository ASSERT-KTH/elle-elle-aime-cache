{
    "generation": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Same code as before\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Same code as before\n      } else {\n        // Check for properties of prototypes or subproperties\n        if (lhs.getType() == Token.GETPROP) {\n          Node prop = lhs.getLastChild();\n          if (prop.getString().equals(\"prototype\") ||\n              (prop.isString() && prop.getString().contains(\"prototype\"))) {\n            return false;\n          }\n        }\n        // Check for array indexing\n        if (lhs.getType() == Token.GETELEM) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}