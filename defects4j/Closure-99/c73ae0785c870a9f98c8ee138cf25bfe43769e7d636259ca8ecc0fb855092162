{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n      return false;\n    }\n\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN)) {\n      return false;\n    }\n\n    // Check if the function is being assigned to a prototype property\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      if (isPrototypeAssignment(lhs)) {\n        return false;\n      }\n    }\n\n    // Check if the function is part of an interface definition\n    if (jsDoc != null && jsDoc.isInterface()) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      if (isPrototypeAssignment(lhs)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nprivate boolean isPrototypeAssignment(Node node) {\n  if (node.getType() == Token.GETPROP) {\n    NodepropertyName = node.getLastChild();\n    if (\"prototype\".equals(propertyName.getString())) {\n      return true;\n    }\n  } else if (node.getType() == Token.COMPUTED_PROP_NAME) {\n    // Check if the computed property name is \"prototype\"\n    Node keyNode = node.getSecondChild(); // The key node in computed property\n    if (keyNode.isString() && \"prototype\".equals(keyNode.getString())) {\n      return true;\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}