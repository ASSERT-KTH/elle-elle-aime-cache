{
    "generation": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n             jsDoc.hasThisType() ||\n             jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them. e.g.,\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {};\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME ||\n              pType == Token.ASSIGN)) {\n            return false;\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        \n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle\n            // nested assignments properly (e.g., (a = this).property = c;),\n            // assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Traverse the right side unless it's an assignment to a prototype\n            // property or subproperty, including dynamic property names.\n            if (isPrototypeAssignment(lhs)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n// Helper method to check if a node represents a prototype assignment\nprivate boolean isPrototypeAssignment(Node lhs) {\n    if (lhs.getType() == Token.GETPROP) {\n        Node lastChild = lhs.getLastChild();\n        if (lastChild.getString().equals(\"prototype\")) {\n            return true;\n        }\n    }\n    String qualifiedName = lhs.getQualifiedName();\n    if (qualifiedName != null) {\n        return qualifiedName.contains(\".prototype.\") || qualifiedName.endsWith(\".prototype\");\n    }\n    if (lhs.getType() == Token.GETELEM) {\n        Node obj = lhs.getFirstChild();\n        Node index = obj.getNext();\n        if (obj.getType() == Token.GETPROP && obj.getLastChild().getString().equals(\"prototype\")) {\n            return true;\n        }\n        if (obj.getQualifiedName() != null && \n            (obj.getQualifiedName().contains(\".prototype.\") || obj.getQualifiedName().endsWith(\".prototype\"))) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}