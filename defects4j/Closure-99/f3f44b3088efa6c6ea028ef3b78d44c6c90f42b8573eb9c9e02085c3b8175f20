{
    "generation": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n             jsDoc.hasThisType() ||\n             jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them. e.g.,\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {};\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME ||\n              pType == Token.ASSIGN ||\n              pType == Token.GETPROP ||\n              pType == Token.GETELEM)) {\n            return false;\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        \n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle\n            // nested assignments properly (e.g., (a = this).property = c;),\n            // assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype\n            // property or subproperty, or if it's part of an interface definition.\n            if (isAssignmentToPrototypeProperty(lhs)) {\n                return false;\n            }\n            if (isInterfaceDefinition(parent)) {\n                return true;\n            }\n        }\n    }\n\n    return true;\n}\n\n// Helper method to check if a node is an assignment to a prototype property\nprivate boolean isAssignmentToPrototypeProperty(Node lhs) {\n    if (lhs.getType() == Token.GETPROP) {\n        Node lastChild = lhs.getLastChild();\n        if (lastChild.getString().equals(\"prototype\")) {\n            return true;\n        }\n    }\n    String qualifiedName = lhs.getQualifiedName();\n    return qualifiedName != null && qualifiedName.contains(\".prototype.\");\n}\n\n// Helper method to check if a node is part of an interface definition\nprivate boolean isInterfaceDefinition(Node n) {\n    while (n != null) {\n        if (n.getType() == Token.FUNCTION) {\n            JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n            if (jsDoc != null && jsDoc.isInterface()) {\n                return true;\n            }\n        }\n        n = n.getParent();\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}