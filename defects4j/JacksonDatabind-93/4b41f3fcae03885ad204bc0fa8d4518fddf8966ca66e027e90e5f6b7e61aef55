{
    "generation": "/**\n * Fixed version of the validateSubType function to prevent NullPointerException\n * \n * @param ctxt  DeserializationContext\n * @param type  JavaType to be validated\n * @throws JsonMappingException if the type is illegal for security reasons\n */\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type!= null? type.getRawClass() : null;\n    String full = raw!= null? raw.getName() : null;\n\n    main_check:\n    do {\n        if (_cfgIllegalClassNames!= null && _cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu:... also, only applies to classes, not interfaces\n        if (full!= null && full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls!= null && cls!= Object.class; cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        return;\n    } while (false);\n\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}