{
    "generation": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    if(raw.isInterface()) {\n        return; // If raw is an interface, we don't need to check anything else.\n    }\n\n    String full = raw.getName();\n\n    if(_cfgIllegalClassNames.contains(full)) {\n        throw JsonMappingException.from(ctxt,\n                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n    }\n\n    // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n    //    for some Spring framework types\n    if(full.startsWith(PREFIX_STRING)) {\n        for(Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n            String name = cls.getSimpleName();\n            // Check all the superclasses\n            if(\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) {\n                throw JsonMappingException.from(ctxt,\n                    String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}