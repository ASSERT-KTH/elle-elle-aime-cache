{
    "generation": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    if (ctxt == null) {\n        throw new IllegalArgumentException(\"DeserializationContext must not be null\");\n    }\n    if (type == null) {\n        throw new IllegalArgumentException(\"JavaType must not be null\");\n    }\n\n    Class<?> raw = type.getRawClass();\n    if (raw == null) {\n        throw new IllegalArgumentException(\"Raw class of JavaType must not be null\");\n    }\n\n    String full = raw.getName();\n\n    if (_cfgIllegalClassNames == null) {\n        _cfgIllegalClassNames = Collections.emptySet();\n    }\n\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        if (full.startsWith(PREFIX_STRING)) {\n            for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        return;\n    } while (false);\n\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}