{
    "generation": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    if (raw != Object.class && raw.getInterfaces() != null) { // Check if class is not Object and interfaces are not null\n        for (Class<?> intf : raw.getInterfaces()) { // Iterate over the interfaces of the class\n            if (intf.getName().startsWith(PREFIX_STRING)) { // If the interface starts with the defined prefix\n                String name = intf.getSimpleName();\n                // As per [databind#1855], check for these specific Spring framework interfaces\n                if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) {\n                    break; // Break the check if the interface matches\n                }\n            }\n        }\n    }\n\n    if (!_cfgIllegalClassNames.contains(full) && full.startsWith(PREFIX_STRING)) {\n        for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n            String name = cls.getSimpleName();\n            if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) {\n                throw JsonMappingException.from(ctxt,\n                        String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n            }\n        }\n    } else {\n        throw JsonMappingException.from(ctxt,\n                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}