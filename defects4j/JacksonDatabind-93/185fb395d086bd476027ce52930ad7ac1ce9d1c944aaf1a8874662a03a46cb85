{
    "generation": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        // 18-Dec-2017: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types.\n        // Also, it only applies to classes, not interfaces.\n        if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) {\n            Class<?> cls = raw;\n            while (cls != Object.class) {\n                String name = cls.getSimpleName();\n                // If we find one of these problematic types, break the loop.\n                if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) {\n                    break;\n                }\n                cls = cls.getSuperclass(); // Move to the superclass for the next iteration.\n            }\n            if (cls != Object.class) {\n                break;\n            }\n        }\n\n        // If we have not broken the loop by now, the type is valid, return.\n        return;\n    } while (false);\n\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}