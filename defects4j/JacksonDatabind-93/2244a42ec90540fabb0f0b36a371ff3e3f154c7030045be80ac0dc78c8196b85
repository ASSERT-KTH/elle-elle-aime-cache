{
    "generation": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    // Define the prefix string for Spring framework types\n    final String PREFIX_STRING = \"org.springframework\";\n\n    // Check if the class name is in the list of illegal class names\n    if (_cfgIllegalClassNames.contains(full)) {\n        throw JsonMappingException.from(ctxt,\n                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n    }\n\n    // As per [databind#1855], need bit more sophisticated handling for some Spring framework types\n    if (full.startsWith(PREFIX_STRING)) {\n        for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n            String name = cls.getSimpleName();\n            // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n            if (\"AbstractPointcutAdvisor\".equals(name)\n                    // ditto for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                    || \"AbstractApplicationContext\".equals(name)) {\n                throw JsonMappingException.from(ctxt,\n                        String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}