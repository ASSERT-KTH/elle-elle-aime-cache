{
    "generation": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n\n    // Add null checks on raw and raw.getClassEnclosingClass() which throw errors\n    if(raw!=null) {\n         JavaType checkRaw;\n\n     /*\n      * Special workaround #1:\n      */ /*\n     20 Sep '2014: #944: Added checks added mostly to fix security exploit involving\n    // gao 2019/xx [databind]: as security fix.\n     }\n* */\nif(((! ctxt.isEnabled(DeserilaizationFeatures.ACCEPT_UNSIGNED_BYTE_arrays)))||( ((checkRaw!= -)) &&!(isUnsigned(byte[].type)()(\n    -1.class)_value == (t)\n    ClassLoader)}(){\n    ((\n}\n\n,    (\" 2015\")},/ 9) raw raw.getName())\n String= JavaType checkRaw -> / JavaType type   `(\n    type=Desrtilize -> de if : raw( raw instanceofJavaType){\n rawClassDeser Class }'classe ` (final =\n    }\n raw` isser,`ty 'type= `:isTypeisinstancecheck= null, :class\n\n do {\n // check: \n    } // null fix",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}