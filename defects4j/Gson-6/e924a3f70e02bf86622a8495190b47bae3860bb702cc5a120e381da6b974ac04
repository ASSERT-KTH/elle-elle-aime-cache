{
    "generation": "@SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\nstatic TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n    TypeToken<?> fieldType, JsonAdapter annotation) {\n  Class<?> value = annotation.value();\n  TypeAdapter<?> typeAdapter;\n  if (TypeAdapter.class.isAssignableFrom(value)) {\n    Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n    typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n  } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n    Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n    typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n       .construct()\n       .create(gson, fieldType);\n  } else {\n    throw new IllegalArgumentException(\n        \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n  }\n  // Check for null before calling nullSafe()\n  return typeAdapter!= null? typeAdapter.nullSafe() : nullSafeTypeAdapter(gson, fieldType);\n}\n\n// Additional method to create a null-safe type adapter\nprivate static TypeAdapter<?> nullSafeTypeAdapter(Gson gson, TypeToken<?> fieldType) {\n  return new TypeAdapter<Object>() {\n    @Override\n    public void write(JsonWriter out, Object value) throws IOException {\n      out.nullValue();\n    }\n\n    @Override\n    public Object read(JsonReader in) throws IOException {\n      return null;\n    }\n  };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}