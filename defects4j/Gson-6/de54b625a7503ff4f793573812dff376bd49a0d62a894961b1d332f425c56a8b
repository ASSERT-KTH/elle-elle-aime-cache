{
    "generation": "@SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\nstatic TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n    TypeToken<?> fieldType, JsonAdapter annotation) {\n    Class<?> value = annotation.value();\n    TypeAdapter<?> typeAdapter;\n    if (TypeAdapter.class.isAssignableFrom(value)) {\n      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n      TypeAdapter<?> createdTypeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n          .construct()\n          .create(gson, fieldType);\n\n      if (createdTypeAdapter != null) { // if createdTypeAdapter is null, typeAdapter will not be NullSafe\n        typeAdapter = createdTypeAdapter.nullSafe();\n      } else {\n        typeAdapter = new NullSafeTypeAdapterFactoryDecorator(constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct());\n      }\n    } else {\n      throw new IllegalArgumentException(\n          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n    }\n    return typeAdapter;\n}\n\n// NullSafeTypeAdapterFactoryWrapper to mimic nullSafe() behavior when TypeAdapter is null\nstatic class NullSafeTypeAdapterFactoryDecorator implements TypeAdapter<Object> {\n    private final TypeAdapterFactory delegate;\n\n    NullSafeTypeAdapterFactoryDecorator(TypeAdapterFactory delegate) {\n        this.delegate = delegate;\n    }\n\n    @Override\n    public Object read(JsonReader in) throws IOException {\n        throw new UnsupportedOperationException(\"Deserialization not supported\");\n    }\n\n    @Override\n    public void write(JsonWriter out, Object value) throws IOException {\n        TypeAdapter<Object> ad = delegate.create(new Gson(), TypeToken.get(Object.class));\n        if (ad != null) {\n            ad.write(out, value);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}