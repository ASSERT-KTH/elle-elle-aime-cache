{
    "generation": "/**\n * Fixed version of the buggy function.\n * \n * The issue was that the nullSafe() call was outside the if-else block, \n * causing it to be applied regardless of whether the typeAdapter was successfully created.\n * If the typeAdapter creation failed (e.g., due to NPE in construct() or create()), \n * calling nullSafe() on the null typeAdapter would result in a NullPointerException.\n * \n * Here, we only apply nullSafe() when the typeAdapter is not null.\n */\n@SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\nstatic TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n    TypeToken<?> fieldType, JsonAdapter annotation) {\n  Class<?> value = annotation.value();\n  TypeAdapter<?> typeAdapter;\n  if (TypeAdapter.class.isAssignableFrom(value)) {\n    Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n    typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n  } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n    Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n    typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n       .construct()\n       .create(gson, fieldType);\n  } else {\n    throw new IllegalArgumentException(\n        \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n  }\n  // Only apply nullSafe() if typeAdapter is not null\n  return (typeAdapter!= null)? typeAdapter.nullSafe() : null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}