{
    "generation": "/**\n * Returns a TypeAdapter for the given @JsonAdapter annotation value.\n * \n * @param constructorConstructor for creating TypeAdapter instances\n * @param gson the Gson instance to which the TypeAdapter will be added\n * @param fieldType the field type for which the TypeAdapter is created\n * @param annotation the @JsonAdapter annotation instance\n * @return a TypeAdapter instance for the specified annotation value\n */\n@SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\nstatic TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n      TypeToken<?> fieldType, JsonAdapter annotation) {\n    Class<?> value = annotation.value();\n    TypeAdapter<?> typeAdapter;\n    if (TypeAdapter.class.isAssignableFrom(value)) {\n      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n         .construct()\n         .create(gson, fieldType);\n    } else {\n      throw new IllegalArgumentException(\n          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n    }\n    // FIX: only apply nullSafe() if the original TypeAdapter is not null\n    return (typeAdapter!= null)? typeAdapter.nullSafe() : null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}