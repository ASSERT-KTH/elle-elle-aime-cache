{
    "generation": "/**\n * Fixed function to retrieve a TypeAdapter instance while ensuring null safety.\n *\n * @param constructorConstructor ConstructorConstructor instance for object creation\n * @param gson                  Gson instance for serialization/deserialization\n * @param fieldType             TypeToken representing the field type\n * @param annotation            JsonAdapter annotation with the adapter reference\n * @return A null-safe TypeAdapter instance\n */\n@SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\nstatic TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n      TypeToken<?> fieldType, JsonAdapter annotation) {\n    Class<?> value = annotation.value();\n    TypeAdapter<?> typeAdapter;\n    if (TypeAdapter.class.isAssignableFrom(value)) {\n      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n         .construct()\n         .create(gson, fieldType);\n    } else {\n      throw new IllegalArgumentException(\n          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n    }\n    // Ensure null safety only if the type adapter is not null\n    return typeAdapter!= null? typeAdapter.nullSafe() : null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}