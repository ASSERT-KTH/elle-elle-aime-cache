{
    "generation": "  @SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\n  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n      TypeToken<?> fieldType, JsonAdapter annotation) {\n    Class<?> value = annotation.value();\n    Object instance;\n    \n    try {\n      instance = constructorConstructor.get(TypeToken.get(value)).construct();\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\n          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\", e);\n    }\n    \n    TypeAdapter<?> typeAdapter;\n    if (instance instanceof TypeAdapter) {\n      typeAdapter = (TypeAdapter<?>) instance;\n    } else if (instance instanceof TypeAdapterFactory) {\n      typeAdapter = ((TypeAdapterFactory) instance).create(gson, fieldType);\n    } else {\n      throw new IllegalArgumentException(\n          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n    }\n\n    return typeAdapter != null ? typeAdapter.nullSafe() : null;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}