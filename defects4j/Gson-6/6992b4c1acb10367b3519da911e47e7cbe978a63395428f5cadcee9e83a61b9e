{
    "generation": "/**\n * Fixes the buggy function by ensuring null safety is only applied when the type adapter is not null.\n *\n * @param constructorConstructor used to construct the type adapter\n * @param gson the Gson instance\n * @param fieldType the type of the field\n * @param annotation the JsonAdapter annotation\n * @return the constructed and potentially null-safe type adapter\n */\n@SuppressWarnings(\"unchecked\") // Casts guarded by conditionals.\nstatic TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n    TypeToken<?> fieldType, JsonAdapter annotation) {\n  Class<?> value = annotation.value();\n  TypeAdapter<?> typeAdapter;\n  if (TypeAdapter.class.isAssignableFrom(value)) {\n    Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n    typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n  } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n    Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n    typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n       .construct()\n       .create(gson, fieldType);\n  } else {\n    throw new IllegalArgumentException(\n        \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n  }\n  // Fix: Only apply null safety if the type adapter is not null\n  return (typeAdapter!= null)? typeAdapter.nullSafe() : null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}