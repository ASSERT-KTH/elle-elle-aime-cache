{
    "generation": "public static boolean areEqual(Object o1, Object o2) {\n    if (o1 == null || o2 == null) {\n        return o1 == null && o2 == null;\n    }\n    \n    if (o1.getClass().isArray() && o2.getClass().isArray()) {\n        return areArraysEqual(o1, o2);\n    }\n    \n    return o1.equals(o2);\n}\n\nprivate static boolean areArraysEqual(Object o1, Object o2) {\n    if (o1 instanceof Object[] && o2 instanceof Object[]) {\n        return Arrays.deepEquals((Object[]) o1, (Object[]) o2);\n    }\n    \n    if (o1 instanceof boolean[] && o2 instanceof boolean[]) {\n        return Arrays.equals((boolean[]) o1, (boolean[]) o2);\n    }\n    \n    if (o1 instanceof byte[] && o2 instanceof byte[]) {\n        return Arrays.equals((byte[]) o1, (byte[]) o2);\n    }\n    \n    if (o1 instanceof char[] && o2 instanceof char[]) {\n        return Arrays.equals((char[]) o1, (char[]) o2);\n    }\n    \n    if (o1 instanceof double[] && o2 instanceof double[]) {\n        return Arrays.equals((double[]) o1, (double[]) o2);\n    }\n    \n    if (o1 instanceof float[] && o2 instanceof float[]) {\n        return Arrays.equals((float[]) o1, (float[]) o2);\n    }\n    \n    if (o1 instanceof int[] && o2 instanceof int[]) {\n        return Arrays.equals((int[]) o1, (int[]) o2);\n    }\n    \n    if (o1 instanceof long[] && o2 instanceof long[]) {\n        return Arrays.equals((long[]) o1, (long[]) o2);\n    }\n    \n    if (o1 instanceof short[] && o2 instanceof short[]) {\n        return Arrays.equals((short[]) o1, (short[]) o2);\n    }\n    \n    // Handle cases where one array is of primitive type and the other is of corresponding wrapper type\n    if (o1 instanceof Object[] && o2.getClass().isArray() && !o2.getClass().getComponentType().isPrimitive()) {\n        return Arrays.deepEquals((Object[]) o1, toObjectArray(o2));\n    }\n    \n    if (o2 instanceof Object[] && o1.getClass().isArray() && !o1.getClass().getComponentType().isPrimitive()) {\n        return Arrays.deepEquals((Object[]) o2, toObjectArray(o1));\n    }\n    \n    return false;\n}\n\nprivate static Object[] toObjectArray(Object array) {\n    Class<?> componentType = array.getClass().getComponentType();\n    int length = Array.getLength(array);\n    Object[] result = (Object[]) Array.newInstance(componentType, length);\n    \n    for (int i = 0; i < length; i++) {\n        result[i] = Array.get(array, i);\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}