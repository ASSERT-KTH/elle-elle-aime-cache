{
    "generation": "public static boolean areEqual(Object o1, Object o2) {\n    if (o1 == null || o2 == null) {\n        return o1 == null && o2 == null;\n    } else if (o1 instanceof Object[] && o2 instanceof Object[]) {\n        return areArraysEqual((Object[]) o1, (Object[]) o2);\n    } else if (o1.getClass().isArray() && o2.getClass().isArray()) {\n        return arePrimitiveArraysEqual(o1, o2);\n    } else {\n        return o1.equals(o2);\n    }\n}\n\nprivate static boolean areArraysEqual(Object[] o1, Object[] o2) {\n    if (o1.length!= o2.length) {\n        return false;\n    }\n    for (int i = 0; i < o1.length; i++) {\n        if (!areEqual(o1[i], o2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static boolean arePrimitiveArraysEqual(Object o1, Object o2) {\n    if (o1.getClass()!= o2.getClass()) {\n        return o1.equals(o2);\n    }\n    if (o1 instanceof byte[]) {\n        return Arrays.equals((byte[]) o1, (byte[]) o2);\n    } else if (o1 instanceof short[]) {\n        return Arrays.equals((short[]) o1, (short[]) o2);\n    } else if (o1 instanceof int[]) {\n        return Arrays.equals((int[]) o1, (int[]) o2);\n    } else if (o1 instanceof long[]) {\n        return Arrays.equals((long[]) o1, (long[]) o2);\n    } else if (o1 instanceof char[]) {\n        return Arrays.equals((char[]) o1, (char[]) o2);\n    } else if (o1 instanceof float[]) {\n        return Arrays.equals((float[]) o1, (float[]) o2);\n    } else if (o1 instanceof double[]) {\n        return Arrays.equals((double[]) o1, (double[]) o2);\n    } else if (o1 instanceof boolean[]) {\n        return Arrays.equals((boolean[]) o1, (boolean[]) o2);\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}