{
    "generation": "public static boolean areEqual(Object o1, Object o2) {\n    if (o1 == null || o2 == null) {\n        return o1 == null && o2 == null;\n    }\n\n    if (o1 instanceof Object[] && o2 instanceof Object[]) {\n        return Arrays.deepEquals((Object[]) o1, (Object[]) o2);\n    }\n\n    if (o1.getClass().isArray() && o2.getClass().isArray()) {\n        if (o1 instanceof int[] && o2 instanceof int[]) {\n            return Arrays.equals((int[]) o1, (int[]) o2);\n        } else if (o1 instanceof long[] && o2 instanceof long[]) {\n            return Arrays.equals((long[]) o1, (long[]) o2);\n        } else if (o1 instanceof short[] && o2 instanceof short[]) {\n            return Arrays.equals((short[]) o1, (short[]) o2);\n        } else if (o1 instanceof byte[] && o2 instanceof byte[]) {\n            return Arrays.equals((byte[]) o1, (byte[]) o2);\n        } else if (o1 instanceof char[] && o2 instanceof char[]) {\n            return Arrays.equals((char[]) o1, (char[]) o2);\n        } else if (o1 instanceof float[] && o2 instanceof float[]) {\n            return Arrays.equals((float[]) o1, (float[]) o2);\n        } else if (o1 instanceof double[] && o2 instanceof double[]) {\n            return Arrays.equals((double[]) o1, (double[]) o2);\n        } else if (o1 instanceof boolean[] && o2 instanceof boolean[]) {\n            return Arrays.equals((boolean[]) o1, (boolean[]) o2);\n        } else {\n            // Handle cases where one array is of a primitive type and the other is the corresponding wrapper type\n            return Arrays.deepEquals(toObjectArray(o1), toObjectArray(o2));\n        }\n    }\n\n    return o1.equals(o2);\n}\n\n// Helper method to convert primitive arrays to object arrays\nprivate static Object[] toObjectArray(Object array) {\n    if (array instanceof int[]) {\n        int[] intArray = (int[]) array;\n        Integer[] result = new Integer[intArray.length];\n        for (int i = 0; i < intArray.length; i++) {\n            result[i] = intArray[i];\n        }\n        return result;\n    } else if (array instanceof long[]) {\n        long[] longArray = (long[]) array;\n        Long[] result = new Long[longArray.length];\n        for (int i = 0; i < longArray.length; i++) {\n            result[i] = longArray[i];\n        }\n        return result;\n    } else if (array instanceof short[]) {\n        short[] shortArray = (short[]) array;\n        Short[] result = new Short[shortArray.length];\n        for (int i = 0; i < shortArray.length; i++) {\n            result[i] = shortArray[i];\n        }\n        return result;\n    } else if (array instanceof byte[]) {\n        byte[] byteArray = (byte[]) array;\n        Byte[] result = new Byte[byteArray.length];\n        for (int i = 0; i < byteArray.length; i++) {\n            result[i] = byteArray[i];\n        }\n        return result;\n    } else if (array instanceof char[]) {\n        char[] charArray = (char[]) array;\n        Character[] result = new Character[charArray.length];\n        for (int i = 0; i < charArray.length; i++) {\n            result[i] = charArray[i];\n        }\n        return result;\n    } else if (array instanceof float[]) {\n        float[] floatArray = (float[]) array;\n        Float[] result = new Float[floatArray.length];\n        for (int i = 0; i < floatArray.length; i++) {\n            result[i] = floatArray[i];\n        }\n        return result;\n    } else if (array instanceof double[]) {\n        double[] doubleArray = (double[]) array;\n        Double[] result = new Double[doubleArray.length];\n        for (int i = 0; i < doubleArray.length; i++) {\n            result[i] = doubleArray[i];\n        }\n        return result;\n    } else if (array instanceof boolean[]) {\n        boolean[] booleanArray = (boolean[]) array;\n        Boolean[] result = new Boolean[booleanArray.length];\n        for (int i = 0; i < booleanArray.length; i++) {\n            result[i] = booleanArray[i];\n        }\n        return result;\n    }\n    return (Object[]) array;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}