{
    "generation": "public static boolean areEqual(Object o1, Object o2) {\n    if (o1 == null || o2 == null) {\n        return o1 == null && o2 == null;\n    } else if (isArray(o1)) {\n        return isArray(o2) && areArraysEqual(o1, o2);\n    } else {\n        return o1.equals(o2);\n    }\n}\n\nprivate static boolean isArray(Object obj) {\n    return obj.getClass().isArray();\n}\n\nprivate static boolean areArraysEqual(Object o1, Object o2) {\n    if (!o1.getClass().isArray() || !o2.getClass().isArray()) {\n        return false;\n    }\n\n    Class<?> componentType1 = o1.getClass().getComponentType();\n    Class<?> componentType2 = o2.getClass().getComponentType();\n\n    if (componentType1 != componentType2) {\n        return false;\n    }\n\n    if (componentType1.isPrimitive()) {\n        return arePrimitiveArraysEqual(o1, o2);\n    } else {\n        return areObjectArraysEqual(o1, o2);\n    }\n}\n\nprivate static boolean arePrimitiveArraysEqual(Object o1, Object o2) {\n    Class<?> componentType = o1.getClass().getComponentType();\n    if (componentType == int.class) {\n        return Arrays.equals((int[]) o1, (int[]) o2);\n    } else if (componentType == long.class) {\n        return Arrays.equals((long[]) o1, (long[]) o2);\n    } else if (componentType == double.class) {\n        return Arrays.equals((double[]) o1, (double[]) o2);\n    } else if (componentType == float.class) {\n        return Arrays.equals((float[]) o1, (float[]) o2);\n    } else if (componentType == boolean.class) {\n        return Arrays.equals((boolean[]) o1, (boolean[]) o2);\n    } else if (componentType == byte.class) {\n        return Arrays.equals((byte[]) o1, (byte[]) o2);\n    } else if (componentType == short.class) {\n        return Arrays.equals((short[]) o1, (short[]) o2);\n    } else if (componentType == char.class) {\n        return Arrays.equals((char[]) o1, (char[]) o2);\n    } else {\n        throw new UnsupportedOperationException(\"Unsupported primitive type: \" + componentType);\n    }\n}\n\nprivate static boolean areObjectArraysEqual(Object o1, Object o2) {\n    Object[] arr1 = (Object[]) o1;\n    Object[] arr2 = (Object[]) o2;\n\n    if (arr1.length != arr2.length) {\n        return false;\n    }\n\n    for (int i = 0; i < arr1.length; i++) {\n        if (!areEqual(arr1[i], arr2[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}