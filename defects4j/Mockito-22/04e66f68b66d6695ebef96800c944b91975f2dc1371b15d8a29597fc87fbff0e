{
    "generation": "import java.util.Arrays;\n\npublic static boolean areEqual(Object o1, Object o2) {\n    if (o1 == null || o2 == null) {\n        return o1 == null && o2 == null;\n    }\n    \n    if (o1.getClass().isArray() && o2.getClass().isArray()) {\n        Class<?> c1 = o1.getClass().getComponentType();\n        Class<?> c2 = o2.getClass().getComponentType();\n        \n        if (c1.isPrimitive() && c2.isPrimitive()) {\n            if (c1 == boolean.class) return Arrays.equals((boolean[]) o1, (boolean[]) o2);\n            if (c1 == byte.class) return Arrays.equals((byte[]) o1, (byte[]) o2);\n            if (c1 == char.class) return Arrays.equals((char[]) o1, (char[]) o2);\n            if (c1 == double.class) return Arrays.equals((double[]) o1, (double[]) o2);\n            if (c1 == float.class) return Arrays.equals((float[]) o1, (float[]) o2);\n            if (c1 == int.class) return Arrays.equals((int[]) o1, (int[]) o2);\n            if (c1 == long.class) return Arrays.equals((long[]) o1, (long[]) o2);\n            if (c1 == short.class) return Arrays.equals((short[]) o1, (short[]) o2);\n        } else if (!c1.isPrimitive() && !c2.isPrimitive()) {\n            return Arrays.deepEquals((Object[]) o1, (Object[]) o2);\n        }\n        \n        return false; // One is primitive, the other is not\n    }\n    \n    return o1.equals(o2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}