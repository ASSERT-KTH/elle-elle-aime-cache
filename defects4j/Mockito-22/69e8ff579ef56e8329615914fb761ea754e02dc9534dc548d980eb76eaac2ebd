{
    "generation": "public static boolean areEqual(Object o1, Object o2) {\n    // Both null or same object reference\n    if (o1 == o2) {\n        return true;\n    }\n    // One is null and the other is not\n    if (o1 == null || o2 == null) {\n        return false;\n    }\n    // Handle arrays\n    if (o1.getClass().isArray() && o2.getClass().isArray()) {\n        if (o1.getClass() != o2.getClass()) {\n            return false; // Arrays of different types\n        }\n        return areArraysEqual(o1, o2);\n    }\n    // General object equality\n    return o1.equals(o2);\n}\n\nprivate static boolean areArraysEqual(Object arr1, Object arr2) {\n    if (arr1 instanceof Object[] && arr2 instanceof Object[]) {\n        return Arrays.deepEquals((Object[]) arr1, (Object[]) arr2);\n    } else if (arr1 instanceof int[] && arr2 instanceof int[]) {\n        return Arrays.equals((int[]) arr1, (int[]) arr2);\n    } else if (arr1 instanceof long[] && arr2 instanceof long[]) {\n        return Arrays.equals((long[]) arr1, (long[]) arr2);\n    } else if (arr1 instanceof boolean[] && arr2 instanceof boolean[]) {\n        return Arrays.equals((boolean[]) arr1, (boolean[]) arr2);\n    } else if (arr1 instanceof float[] && arr2 instanceof float[]) {\n        return Arrays.equals((float[]) arr1, (float[]) arr2);\n    } else if (arr1 instanceof double[] && arr2 instanceof double[]) {\n        return Arrays.equals((double[]) arr1, (double[]) arr2);\n    } else if (arr1 instanceof byte[] && arr2 instanceof byte[]) {\n        return Arrays.equals((byte[]) arr1, (byte[]) arr2);\n    } else if (arr1 instanceof char[] && arr2 instanceof char[]) {\n        return Arrays.equals((char[]) arr1, (char[]) arr2);\n    } else if (arr1 instanceof short[] && arr2 instanceof short[]) {\n        return Arrays.equals((short[]) arr1, (short[]) arr2);\n    } else {\n        return false;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}