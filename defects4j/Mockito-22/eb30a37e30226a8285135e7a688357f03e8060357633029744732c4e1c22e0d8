{
    "generation": "import java.util.Arrays;\nimport java.lang.reflect.Array;\n\npublic static boolean areEqual(Object o1, Object o2) {\n    if (o1 == o2) {\n        return true;\n    }\n    if (o1 == null || o2 == null) {\n        return false;\n    }\n    if (o1.getClass().isArray() && o2.getClass().isArray()) {\n        Class<?> componentType1 = o1.getClass().getComponentType();\n        Class<?> componentType2 = o2.getClass().getComponentType();\n        if (componentType1.isPrimitive() && componentType2.isPrimitive()) {\n            return primitiveArraysEqual(o1, o2);\n        } else {\n            return Arrays.deepEquals((Object[]) o1, (Object[]) o2);\n        }\n    }\n    if (o1 instanceof Number && o2 instanceof Number) {\n        return ((Number) o1).doubleValue() == ((Number) o2).doubleValue();\n    }\n    return o1.equals(o2);\n}\n\nprivate static boolean primitiveArraysEqual(Object o1, Object o2) {\n    Class<?> type = o1.getClass().getComponentType();\n    if (boolean.class.equals(type)) {\n        return Arrays.equals((boolean[]) o1, (boolean[]) o2);\n    } else if (byte.class.equals(type)) {\n        return Arrays.equals((byte[]) o1, (byte[]) o2);\n    } else if (char.class.equals(type)) {\n        return Arrays.equals((char[]) o1, (char[]) o2);\n    } else if (double.class.equals(type)) {\n        return Arrays.equals((double[]) o1, (double[]) o2);\n    } else if (float.class.equals(type)) {\n        return Arrays.equals((float[]) o1, (float[]) o2);\n    } else if (int.class.equals(type)) {\n        return Arrays.equals((int[]) o1, (int[]) o2);\n    } else if (long.class.equals(type)) {\n        return Arrays.equals((long[]) o1, (long[]) o2);\n    } else if (short.class.equals(type)) {\n        return Arrays.equals((short[]) o1, (short[]) o2);\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}