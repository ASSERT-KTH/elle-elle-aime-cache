{
    "generation": "public static boolean areEqual(Object o1, Object o2) {\n    if (o1 == null || o2 == null) {\n        return o1 == null && o2 == null;\n    } else if (isArray(o1)) {\n        return isArray(o2) && areArraysEqual(o1, o2);\n    } else {\n        return o1.equals(o2);\n    }\n}\n\n// Assuming areArraysEqual method is defined somewhere else, \n// but we can include it here for completeness\n\npublic static boolean areArraysEqual(Object o1, Object o2) {\n    if (o1.getClass().getComponentType().isPrimitive() && \n       !o2.getClass().getComponentType().isPrimitive()) {\n        return arePrimitiveToWrapperArraysEqual(o1, o2);\n    } else if (!o1.getClass().getComponentType().isPrimitive() && \n               o2.getClass().getComponentType().isPrimitive()) {\n        return arePrimitiveToWrapperArraysEqual(o2, o1);\n    }\n\n    int length1 = Array.getLength(o1);\n    int length2 = Array.getLength(o2);\n    if (length1!= length2) {\n        return false;\n    }\n    for (int i = 0; i < length1; i++) {\n        if (!areEqual(Array.get(o1, i), Array.get(o2, i))) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean arePrimitiveToWrapperArraysEqual(Object primitiveArray, Object wrapperArray) {\n    if (Array.getLength(primitiveArray)!= Array.getLength(wrapperArray)) {\n        return false;\n    }\n    for (int i = 0; i < Array.getLength(primitiveArray); i++) {\n        if (!areEqual(Array.get(primitiveArray, i), Array.get(wrapperArray, i))) {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}