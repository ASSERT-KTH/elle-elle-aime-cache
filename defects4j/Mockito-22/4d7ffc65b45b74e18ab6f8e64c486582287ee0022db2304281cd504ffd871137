{
    "generation": "public static boolean areEqual(Object o1, Object o2) {\n    if (o1 == null || o2 == null) {\n        return o1 == null && o2 == null;\n    } else if (o1.getClass().isArray() && o2.getClass().isArray()) {\n        if (o1.getClass().getComponentType().isPrimitive() &&!o2.getClass().getComponentType().isPrimitive()) {\n            return areArraysEqual(primitiveToWrapperArray(o1), o2);\n        } else if (!o1.getClass().getComponentType().isPrimitive() && o2.getClass().getComponentType().isPrimitive()) {\n            return areArraysEqual(o1, primitiveToWrapperArray(o2));\n        }\n        return areArraysEqual(o1, o2);\n    } else {\n        return o1.equals(o2);\n    }\n}\n\nprivate static Object primitiveToWrapperArray(Object primitiveArray) {\n    int length = Array.getLength(primitiveArray);\n    Object[] wrapperArray = new Object[length];\n    for (int i = 0; i < length; i++) {\n        wrapperArray[i] = Array.get(primitiveArray, i);\n    }\n    return wrapperArray;\n}\n\nprivate static boolean areArraysEqual(Object o1, Object o2) {\n    if (Array.getLength(o1)!= Array.getLength(o2)) {\n        return false;\n    }\n    for (int i = 0; i < Array.getLength(o1); i++) {\n        if (!areEqual(Array.get(o1, i), Array.get(o2, i))) {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}