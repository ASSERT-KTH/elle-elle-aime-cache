{
    "generation": "public static boolean areEqual(Object o1, Object o2) {\n    if (o1 == null || o2 == null) {\n        return o1 == null && o2 == null;\n    } else if (o1.getClass().isArray() &&!o1.getClass().getComponentType().isPrimitive()) {\n        return o2.getClass().isArray() && o1.getClass().getComponentType().equals(o2.getClass().getComponentType()) && areArraysEqual(o1, o2);\n    } else if (o1.getClass().isArray() && o1.getClass().getComponentType().isPrimitive()) {\n        return o2.getClass().isArray() && o1.getClass().equals(o2.getClass()) && arePrimitiveArraysEqual(o1, o2);\n    } else {\n        try {\n            return o1.equals(o2);\n        } catch (RuntimeException e) {\n            return false;\n        }\n    }\n}\n\nprivate static boolean areArraysEqual(Object o1, Object o2) {\n    Object[] arr1 = (Object[]) o1;\n    Object[] arr2 = (Object[]) o2;\n    if (arr1.length!= arr2.length) {\n        return false;\n    }\n    for (int i = 0; i < arr1.length; i++) {\n        if (!areEqual(arr1[i], arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static boolean arePrimitiveArraysEqual(Object o1, Object o2) {\n    int length1 = Array.getLength(o1);\n    int length2 = Array.getLength(o2);\n    if (length1!= length2) {\n        return false;\n    }\n    for (int i = 0; i < length1; i++) {\n        Object element1 = Array.get(o1, i);\n        Object element2 = Array.get(o2, i);\n        if (!areEqual(element1, element2)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}