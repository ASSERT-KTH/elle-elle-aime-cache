{
    "generation": "/**\n * @return true if the provided reference and declaration can be safely\n *         inlined according to our criteria\n */\nprivate boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      || !isValidInitialization(initialization)\n      || !isValidReference(reference)) {\n    return false;\n  }\n\n  // If the value is read more than once, skip it.\n  // VAR declarations and EXPR_RESULT don't need the value, but other\n  // ASSIGN expressions parents do.\n  if (declaration != initialization &&\n      !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n\n  // Be very conservative and do no cross control structures or\n  // scope boundaries\n  if (declaration.getBasicBlock() != initialization.getBasicBlock()\n      || declaration.getBasicBlock() != reference.getBasicBlock()) {\n    return false;\n  }\n\n  // Do not inline into a call node. This would change\n  // the context in which it was being called. For example,\n  //   var a = b.c;\n  //   a();\n  // should not be inlined, because it calls a in the context of b\n  // rather than the context of the window.\n  //   var a = b.c;\n  //   f(a)\n  // is ok.\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value != null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      // Bug 2388531: Don't inline subclass definitions into class defining\n      // calls as this confused class removing logic.\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship != null) {\n        return false;\n      }\n\n      // Issue 668: Don't inline singleton getter methods\n      // into calls as this confused class removing logic.\n      if (isSingletonGetterMethod(value)) {\n        return false;\n      }\n    }\n  }\n\n  return canMoveAggressively(value) ||\n      canMoveModerately(initialization, reference);\n}\n\nprivate boolean isSingletonGetterMethod(Node functionNode) {\n  if (!functionNode.isFunction()) {\n    return false;\n  }\n  \n  Node body = functionNode.getLastChild();\n  if (body == null || !body.isBlock()) {\n    return false;\n  }\n  \n  Node firstStatement = body.getFirstChild();\n  if (firstStatement == null || !firstStatement.isReturn()) {\n    return false;\n  }\n  \n  Node returnExpr = firstStatement.getFirstChild();\n  if (returnExpr == null || !returnExpr.isOr()) {\n    return false;\n  }\n  \n  Node left = returnExpr.getFirstChild();\n  Node right = returnExpr.getLastChild();\n  \n  if (left == null || right == null) {\n    return false;\n  }\n  \n  if (!left.isGetProp()) {\n    return false;\n  }\n  \n  Node leftObject = left.getFirstChild();\n  Node leftProperty = left.getLastChild();\n  \n  if (leftObject == null || leftProperty == null || \n      !leftProperty.isString() || !leftProperty.getString().equals(\"instance_\")) {\n    return false;\n  }\n  \n  if (!right.isAssign()) {\n    return false;\n  }\n  \n  Node assignLeft = right.getFirstChild();\n  Node assignRight = right.getLastChild();\n  \n  if (assignLeft == null || assignRight == null || !assignLeft.isGetProp()) {\n    return false;\n  }\n  \n  Node assignLeftObject = assignLeft.getFirstChild();\n  Node assignLeftProperty = assignLeft.getLastChild();\n  \n  if (assignLeftObject == null || assignLeftProperty == null || \n      !assignLeftProperty.isString() || !assignLeftProperty.getString().equals(\"instance_\")) {\n    return false;\n  }\n  \n  if (!assignRight.isNew()) {\n    return false;\n  }\n  \n  Node newCall = assignRight.getFirstChild();\n  if (newCall == null || !newCall.isName()) {\n    return false;\n  }\n  \n  return newCall.getString().equals(functionNode.getFirstChild().getString());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}