{
    "generation": "/**\n * @return true if the provided reference and declaration can be safely\n *         inlined according to our criteria\n */\nprivate boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      ||!isValidInitialization(initialization)\n      ||!isValidReference(reference)) {\n    return false;\n  }\n\n  // If the value is read more than once, skip it.\n  // VAR declarations and EXPR_RESULT don't need the value, but other\n  // ASSIGN expressions parents do.\n  if (declaration!= initialization &&\n     !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n\n  // Be very conservative and do no cross control structures or\n  // scope boundaries\n  if (declaration.getBasicBlock()!= initialization.getBasicBlock()\n      || declaration.getBasicBlock()!= reference.getBasicBlock()) {\n    return false;\n  }\n\n  // Do not inline into a call node. This would change\n  // the context in which it was being called. For example,\n  //   var a = b.c;\n  //   a();\n  // should not be inlined, because it calls a in the context of b\n  // rather than the context of the window.\n  //   var a = b.c;\n  //   f(a)\n  // is ok.\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value!= null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      // Bug 2388531: Don't inline subclass definitions into class defining\n      // calls as this confused class removing logic.\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship!= null) {\n        return false;\n      }\n\n      // FIX: Don't inline singleton getter methods calls\n      // (fix for issue 668 and testSingletonGetter1)\n      if (isSingletonGetterMethod(callNode, initialization, reference)) {\n        return false;\n      }\n    }\n  }\n\n  return canMoveAggressively(value) ||\n      canMoveModerately(initialization, reference);\n}\n\n// Helper method to identify singleton getter methods\nprivate boolean isSingletonGetterMethod(\n    Node callNode, Reference initialization, Reference reference) {\n  if (callNode.getChildCount() < 2) {\n    return false;\n  }\n  Node methodName = callNode.getChildAtIndex(1);\n  if (!methodName.isString() ||!methodName.getString().equals(\"getInstance\")) {\n    return false;\n  }\n  // Check if the method is part of a singleton getter pattern\n  // (e.g., `goog.addSingletonGetter` in the test case)\n  Node grandParent = initialization.getGrandparent();\n  return grandParent!= null\n      && grandParent.isCall()\n      && grandParent.getChildAtIndex(1).isString()\n      && grandParent.getChildAtIndex(1).getString().equals(\"addSingletonGetter\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}