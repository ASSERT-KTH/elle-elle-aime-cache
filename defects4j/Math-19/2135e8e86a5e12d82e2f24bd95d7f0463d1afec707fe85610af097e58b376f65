{
    "generation": "private void checkParameters() {\n    final double[] init = getStartPoint();\n    final double[] lB = getLowerBound();\n    final double[] uB = getUpperBound();\n\n    // Checks whether there is at least one finite bound value.\n    boolean hasFiniteBounds = ArrayUtils.containsAnyFinite(lB, uB);\n    // Checks whether there is at least one infinite bound value.\n    boolean hasInfiniteBounds = ArrayUtils.containsAnyInfinite(lB, uB);\n\n    if (hasFiniteBounds && hasInfiniteBounds) {\n        // If there is at least one finite and one infinite bound, throw an exception.\n        throw new MathUnsupportedOperationException();\n    } else if (hasFiniteBounds) {\n        // Convert API to internal handling of boundaries.\n        boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n\n        // Check the range of boundaries to avoid overflow.\n        for (int i = 0; i < lB.length; i++) {\n            if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n                continue;  // Skip infinite bounds\n            }\n            if (Double.isInfinite(lB[i] - uB[i]) || Double.isInfinite(uB[i] - lB[i])) {\n                throw new NumberIsTooLargeException(uB[i] - lB[i], Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false);\n            }\n        }\n    } else {\n        // Convert API to internal handling of boundaries.\n        boundaries = null;\n    }\n\n    if (inputSigma != null) {\n        if (inputSigma.length != init.length) {\n            throw new DimensionMismatchException(inputSigma.length, init.length);\n        }\n        for (int i = 0; i < init.length; i++) {\n            if (inputSigma[i] < 0) {\n                throw new NotPositiveException(inputSigma[i]);\n            }\n            if (boundaries != null && inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {\n                throw new NumberIsTooLargeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i], false);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}