{
    "generation": "private void checkParameters() {\n    final double[] init = getStartPoint();\n    final double[] lB = getLowerBound();\n    final double[] uB = getUpperBound();\n\n    boolean hasFiniteBounds = false;\n    boolean hasInfiniteBounds = false;\n    for (int i = 0; i < lB.length; i++) {\n        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n            hasInfiniteBounds = true;\n        } else {\n            hasFiniteBounds = true;\n        }\n\n        if (hasFiniteBounds && hasInfiniteBounds) {\n            throw new MathUnsupportedOperationException(\"Mixed finite and infinite bounds are not supported.\");\n        }\n    }\n\n    if (hasFiniteBounds) {\n        boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n    } else {\n        boundaries = null;\n    }\n\n    if (inputSigma != null) {\n        if (inputSigma.length != init.length) {\n            throw new DimensionMismatchException(inputSigma.length, init.length);\n        }\n\n        for (int i = 0; i < init.length; i++) {\n            if (inputSigma[i] < 0) {\n                throw new NotPositiveException(inputSigma[i]);\n            }\n            if (boundaries != null) {\n                double range = boundaries[1][i] - boundaries[0][i];\n                if (!Double.isInfinite(range) && inputSigma[i] > range) {\n                    throw new NumberIsTooLargeException(inputSigma[i], Double.NaN, range, false);\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}