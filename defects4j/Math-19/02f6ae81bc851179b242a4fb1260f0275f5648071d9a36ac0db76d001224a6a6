{
    "generation": "private void checkParameters() {\n    final double[] init = getStartPoint();\n    final double[] lB = getLowerBound();\n    final double[] uB = getUpperBound();\n\n    // Check if all lower and upper bounds are finite\n    boolean allFinite = true;\n    for (int i = 0; i < lB.length; i++) {\n        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n            allFinite = false;\n            break;\n        }\n    }\n\n    if (allFinite) {\n        // All bounds are finite, proceed to set boundaries\n        boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n\n        // Check for potential overflow in normalization\n        for (int i = 0; i < lB.length; i++) {\n            double range = uB[i] - lB[i];\n            if (range <= 0) {\n                throw new NumberIsTooLargeException(lB[i], uB[i], false);\n            }\n            if (range > Double.MAX_VALUE / 2) {\n                // Potential overflow in normalization\n                throw new NumberIsTooLargeException(range, Double.MAX_VALUE / 2, false);\n            }\n        }\n    } else {\n        // If any bound is infinite, set boundaries to null\n        boundaries = null;\n    }\n\n    if (inputSigma != null) {\n        if (inputSigma.length != init.length) {\n            throw new DimensionMismatchException(inputSigma.length, init.length);\n        }\n        for (int i = 0; i < init.length; i++) {\n            if (inputSigma[i] < 0) {\n                throw new NotPositiveException(inputSigma[i]);\n            }\n            if (boundaries != null) {\n                double range = boundaries[1][i] - boundaries[0][i];\n                if (inputSigma[i] > range) {\n                    throw new OutOfRangeException(inputSigma[i], 0, range);\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}