{
    "generation": "private void checkParameters() {\n    final double[] init = getStartPoint();\n    final double[] lB = getLowerBound();\n    final double[] uB = getUpperBound();\n\n    // Check if all lower bounds are finite\n    for (int i = 0; i < lB.length; i++) {\n        if (Double.isInfinite(lB[i])) {\n            throw new MathIllegalArgumentException(LocalizedCoreFormats.INFINITE_BOUND);\n        }\n    }\n\n    // Check if all upper bounds are finite\n    for (int i = 0; i < uB.length; i++) {\n        if (Double.isInfinite(uB[i])) {\n            throw new MathIllegalArgumentException(LocalizedCoreFormats.INFINITE_BOUND);\n        }\n    }\n\n    // Convert API to internal handling of boundaries.\n    boundaries = new double[2][];\n    boundaries[0] = lB;\n    boundaries[1] = uB;\n\n    if (inputSigma != null) {\n        if (inputSigma.length != init.length) {\n            throw new DimensionMismatchException(inputSigma.length, init.length);\n        }\n        for (int i = 0; i < init.length; i++) {\n            if (inputSigma[i] < 0) {\n                throw new NotPositiveException(inputSigma[i]);\n            }\n            if (boundaries != null) {\n                if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {\n                    throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}