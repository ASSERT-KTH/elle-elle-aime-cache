{
    "generation": "    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n\n        boolean hasFiniteBounds = false;\n        for (int i = 0; i < lB.length; i++) {\n            if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {\n                hasFiniteBounds = true;\n                break;\n            }\n        }\n\n        boolean hasInfiniteBounds = false;\n        if (hasFiniteBounds) {\n            for (int i = 0; i < lB.length; i++) {\n                if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n                    hasInfiniteBounds = true;\n                    break;\n                }\n            }\n\n            if (hasInfiniteBounds) {\n                throw new MathUnsupportedOperationException();\n            } else {\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n            }\n        } else {\n            boundaries = null;\n        }\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] <= 0) {\n                    throw new NotPositiveException(inputSigma[i]);\n                }\n\n                if (boundaries != null) {\n                    // The issue was that the range difference could be larger than Double.MAX_VALUE causing NaN\n                    // Updated to use range fractions.\n                    double range = boundaries[1][i] - boundaries[0][i];\n                    if (inputSigma[i] > range / 2) {\n                        throw new NumberIsTooLargeException(inputSigma[i], range / 2, true);\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}