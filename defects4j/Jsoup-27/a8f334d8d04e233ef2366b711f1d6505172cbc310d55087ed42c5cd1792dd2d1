{
    "generation": "/**\n * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n * will kick in.)\n * @param contentType e.g. \"text/html; charset=EUC-JP\" or \"text/html; charset=\\\"EUC-JP\\\"\"\n * @return \"euc-jp\", or null if not found. Charset is trimmed and lowercased.\n */\nstatic String getCharsetFromContentType(String contentType) {\n    if (contentType == null) return null;\n    \n    // Use a regex pattern that matches both unquoted and quoted charset values\n    Matcher m = Pattern.compile(\"(?i)\\\\bcharset\\\\s*=\\\\s*([^\\\\s;]+|\\\"[^\\\"]+\\\")\", Pattern.CASE_INSENSITIVE).matcher(contentType);\n    \n    if (m.find()) {\n        String charset = m.group(1).trim();\n        \n        // Remove quotes if present\n        if (charset.startsWith(\"\\\"\") && charset.endsWith(\"\\\"\")) {\n            charset = charset.substring(1, charset.length() - 1);\n        }\n        \n        charset = charset.toLowerCase(Locale.ENGLISH);\n        \n        // Check if the charset is supported\n        try {\n            Charset.forName(charset);\n            return charset;\n        } catch (UnsupportedCharsetException e) {\n            return null;\n        }\n    }\n    \n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}