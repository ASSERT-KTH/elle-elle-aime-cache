{
    "generation": "/**\n * <p>Converts a String to a boolean (optimised for performance).</p>\n * \n * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>\n * (case insensitive) will return <code>true</code>. Otherwise,\n * <code>false</code> is returned.</p>\n * \n * <p>This method performs 4 times faster (JDK1.4) than\n * <code>Boolean.valueOf(String)</code>. However, this method accepts\n * 'on' and 'yes' as true values.\n *\n * <pre>\n *   BooleanUtils.toBoolean(null)    = false\n *   BooleanUtils.toBoolean(\"true\")  = true\n *   BooleanUtils.toBoolean(\"TRUE\")  = true\n *   BooleanUtils.toBoolean(\"tRUe\")  = true\n *   BooleanUtils.toBoolean(\"on\")    = true\n *   BooleanUtils.toBoolean(\"yes\")   = true\n *   BooleanUtils.toBoolean(\"false\") = false\n *   BooleanUtils.toBoolean(\"x gti\") = false\n * </pre>\n *\n * @param str  the String to check\n * @return the boolean value of the string, <code>false</code> if no match\n */\npublic static boolean toBoolean(String str) {\n    // Previously used equalsIgnoreCase, which was fast for interned 'true'.\n    // Non interned 'true' matched 15 times slower.\n    // \n    // Optimisation provides same performance as before for interned 'true'.\n    // Similar performance for null, 'false', and other strings not length 2/3/4.\n    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.\n    if (str == null) {\n        return false;\n    }\n    if (str.equalsIgnoreCase(\"true\")) {\n        return true;\n    }\n    if (str.length() == 2 && str.equalsIgnoreCase(\"on\")) {\n        return true;\n    }\n    if (str.length() == 3 && str.equalsIgnoreCase(\"yes\")) {\n        return true;\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}