{
    "generation": "/**\n * Method that handles type information wrapper, locates actual\n * subtype deserializer to use, and calls it to do actual\n * deserialization.\n */\n@SuppressWarnings(\"resource\")\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId!= null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // first, sanity checks\n    if (p.getCurrentToken()!= JsonToken.START_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    \n    // Advance to the first field (should be the type id)\n    p.nextToken();\n    \n    // Check if the first field is the type id field\n    if (!p.hasToken(JsonToken.FIELD_NAME) ||!_typePropertyName.equals(p.getCurrentName())) {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\") with property name '\"+_typePropertyName+\"'\");\n    }\n    \n    p.nextToken(); // Move to the type id value\n    final String typeId = p.getText();\n    \n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    \n    // Move to the next token, should be the START_OBJECT for the actual value\n    p.nextToken();\n    \n    // Check if we have the expected START_OBJECT\n    if (p.getCurrentToken()!= JsonToken.START_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object for the value of subtype \"+typeId+\" of \"+baseTypeName());\n    }\n\n    // Minor complication: we may need to merge type id in?\n    if (_typeIdVisible) {\n        // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject(); // recreate START_OBJECT\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n    \n    Object value = deser.deserialize(p, ctxt);\n    // And then need the closing END_OBJECT\n    if (p.nextToken()!= JsonToken.END_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                \"expected closing END_OBJECT after type information and deserialized value\");\n    }\n    return value;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}