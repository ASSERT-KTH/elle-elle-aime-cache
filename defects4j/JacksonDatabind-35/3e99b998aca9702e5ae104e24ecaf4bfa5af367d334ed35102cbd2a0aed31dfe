{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        if (p.getCurrentToken() != JsonToken.START_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \" + baseTypeName());\n        }\n\n        // Fix: Check if there is a field name before reading the typeId\n        if (p.nextToken() != JsonToken.FIELD_NAME || !p.getCurrentName().equals(_typePropertyName)) {\n            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                    \"Expected a JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n        }\n\n        final String typeId = p.nextTextValue();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n\n        p.nextToken();\n\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject();\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n\n        Object value = deser.deserialize(p, ctxt);\n\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"Expected closing END_OBJECT after type information and deserialized value\");\n        }\n\n        return value;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}