{
    "generation": "@SuppressWarnings(\"resource\")\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    JsonToken token = p.getCurrentToken();\n    if (token == JsonToken.START_OBJECT && p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n\n    // first, sanity checks\n    if (token != JsonToken.START_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n\n    // Consume the START_OBJECT if it hasn't been consumed yet\n    if (token != JsonToken.FIELD_NAME) {\n        token = p.nextToken();\n    }\n\n    // If the token is a FIELD_NAME, it is likely to be a type ID\n    if (token == JsonToken.FIELD_NAME) {\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        token = p.nextToken();\n\n        // Check for TYPE_ID wrap, if needed\n        if (_typeIdVisible && token == JsonToken.START_OBJECT) {\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            token = p.nextToken();\n        }\n\n        Object value = deser.deserialize(p, ctxt);\n\n        // Consume the END_OBJECT after deserializing the value\n        token = p.nextToken();\n        if (token != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n\n        return value;\n    }\n\n    throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n            \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}