{
    "generation": "@SuppressWarnings(\"resource\")\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // Check if token is START_OBJECT or START_ARRAY\n    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.START_ARRAY) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object or Array to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    \n    // should always get field name, but just in case...\n    if (p.nextToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n    }\n    final String typeId = p.getText();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    p.nextToken();\n\n    // Minor complication: we may need to merge type id in?\n    if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject(); // recreate START_OBJECT\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n    \n    Object value = deser.deserialize(p, ctxt);\n    // Need the matching END_OBJECT or END_ARRAY based on the starting token\n    if ((value instanceof List && p.nextToken() != JsonToken.END_ARRAY) ||\n        (!(value instanceof List) && p.nextToken() != JsonToken.END_OBJECT)) {\n        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                \"expected closing END_OBJECT or END_ARRAY after type information and deserialized value\");\n    }\n    return value;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}