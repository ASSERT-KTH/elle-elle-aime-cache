{
    "generation": "/**\n * Creates a new time series by copying a subset of the data in this time\n * series.\n *\n * @param start the index of the first time period to copy.\n * @param end the index of the last time period to copy.\n * @return A series containing a copy of this time series from start until end.\n * @throws CloneNotSupportedException if there is a cloning problem.\n */\npublic TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.data = new java.util.ArrayList();\n    \n    double minY = Double.MAX_VALUE;\n    double maxY = Double.MIN_VALUE;\n    \n    if (this.data.size() > 0) {\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n                // Update min and max Y values\n                double y = clone.getValue().doubleValue();\n                if (y < minY) {\n                    minY = y;\n                }\n                if (y > maxY) {\n                    maxY = y;\n                }\n            } catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n        // Set the min and max Y values in the copied series\n        copy.setMinY(minY);\n        copy.setMaxY(maxY);\n    }\n    return copy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}