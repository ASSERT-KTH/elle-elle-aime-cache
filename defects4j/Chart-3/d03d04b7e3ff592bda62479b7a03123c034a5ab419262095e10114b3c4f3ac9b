{
    "generation": "/**\n * Creates a new timeseries by copying a subset of the data in this time\n * series.\n *\n * @param start  the index of the first time period to copy.\n * @param end  the index of the last time period to copy.\n *\n * @return A series containing a copy of this time series from start until\n *         end.\n *\n * @throws CloneNotSupportedException if there is a cloning problem.\n */\npublic TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.data = new ArrayList<>();\n    if (this.data.size() > 0) {\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            } catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    // Update min and max y-values based on the copied subset\n    copy.updateExtremes();\n    return copy;\n}\n\n/**\n * Updates the min and max y-values based on the current data in the series.\n */\nprivate void updateExtremes() {\n    double minY = Double.POSITIVE_INFINITY;\n    double maxY = Double.NEGATIVE_INFINITY;\n    for (TimeSeriesDataItem item : data) {\n        double y = item.getValue().doubleValue();\n        if (y < minY) {\n            minY = y;\n        }\n        if (y > maxY) {\n            maxY = y;\n        }\n    }\n    this.minY = minY;\n    this.maxY = maxY;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}