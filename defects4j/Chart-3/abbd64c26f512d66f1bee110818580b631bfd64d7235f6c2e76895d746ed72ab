{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n                TimeSeriesDataItem item\n                        = (TimeSeriesDataItem) this.data.get(index);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                }\n                catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        \n        // Recalculate the min and max Y values for the new subset\n        copy.recalculateMinMaxY();\n        \n        return copy;\n    }\n\n    /**\n     * Recalculates the min and max Y values for the series.\n     */\n    private void recalculateMinMaxY() {\n        double minY = Double.NaN;\n        double maxY = Double.NaN;\n        for (int i = 0; i < this.data.size(); i++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);\n            Number y = item.getValue();\n            if (y != null) {\n                double yy = y.doubleValue();\n                if (Double.isNaN(minY) || yy < minY) {\n                    minY = yy;\n                }\n                if (Double.isNaN(maxY) || yy > maxY) {\n                    maxY = yy;\n                }\n            }\n        }\n        // Update the min and max Y values\n        this.minY = minY;\n        this.maxY = maxY;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}