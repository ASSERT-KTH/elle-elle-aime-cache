{
    "generation": "/**\n * Creates a new timeseries by copying a subset of the data in this time\n * series.\n *\n * @param start  the index of the first time period to copy.\n * @param end  the index of the last time period to copy.\n *\n * @return A series containing a copy of this times series from start until\n *         end.\n *\n * @throws CloneNotSupportedException if there is a cloning problem.\n */\npublic TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    if (end >= this.data.size()) {\n        throw new IllegalArgumentException(\"Requires end < size().\");\n    }\n\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.data = new java.util.ArrayList();\n\n    if (this.data.size() > 0) {\n        double minY = Double.NaN;\n        double maxY = Double.NaN;\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            } catch (SeriesException e) {\n                e.printStackTrace();\n            }\n            minY = Math.min(minY, item.getValue().doubleValue());\n            maxY = Math.max(maxY, item.getValue().doubleValue());\n        }\n        copy.setMinimumItem(new TimeSeriesDataItem(this.data.get(start).getPeriod(), minY));\n        copy.setMaximumItem(new TimeSeriesDataItem(this.data.get(end).getPeriod(), maxY));\n    }\n\n    return copy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}