{
    "generation": "/**\n * Creates a new timeseries by copying a subset of the data in this time\n * series.\n *\n * @param start  the index of the first time period to copy.\n * @param end  the index of the last time period to copy.\n *\n * @return A series containing a copy of this times series from start until\n *         end.\n *\n * @throws CloneNotSupportedException if there is a cloning problem.\n */\npublic TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    // Ensure the 'end' index does not exceed the size of the data list\n    end = Math.min(end, this.data.size() - 1);\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    // Turning off the recalculation since it is handled after initialization\n    copy.setMaximumItemCount(Integer.MAX_VALUE);\n    copy.setMaximumItemAge(Long.MAX_VALUE);\n\n    // Reset min and max values based on the copied data\n    if (!copy.data.isEmpty()) {\n        for (int i = 0; i < copy.data.size(); i++) {\n            TimeSeriesDataItem item = copy.data.get(i);\n            copy.updateBoundsForAddedValue(item.getValue().doubleValue());\n        }\n    }\n\n    return copy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}