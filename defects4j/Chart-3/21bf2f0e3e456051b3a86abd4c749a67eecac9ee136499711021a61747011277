{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        TimeSeries copy = new TimeSeries(this.getName(), this.getTimePeriodClass());\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n                try {\n                    copy.add(item.getPeriod(), item.getValue());\n                } catch (SeriesException e) {\n                    throw new RuntimeException(\"Unable to add data item to series.\", e);\n                }\n            }\n        }\n        return copy;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}