{
    "generation": "    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        if (end >= this.data.size()) {\n            throw new IllegalArgumentException(\"Requires end < size of data.\");\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n                TimeSeriesDataItem item\n                        = (TimeSeriesDataItem) this.data.get(index);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                }\n                catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        copy.updateBounds();\n        return copy;\n    }\n\n    private void updateBounds() {\n        if (this.data.size() > 0) {\n            this.minY = Double.MAX_VALUE;\n            this.maxY = Double.MIN_VALUE;\n            for (Object obj : this.data) {\n                TimeSeriesDataItem item = (TimeSeriesDataItem) obj;\n                Number y = item.getValue();\n                if (y != null) {\n                    double yy = y.doubleValue();\n                    if (yy < minY) {\n                        minY = yy;\n                    }\n                    if (yy > maxY) {\n                        maxY = yy;\n                    }\n                }\n            }\n        } else {\n            this.minY = Double.NaN;\n            this.maxY = Double.NaN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}