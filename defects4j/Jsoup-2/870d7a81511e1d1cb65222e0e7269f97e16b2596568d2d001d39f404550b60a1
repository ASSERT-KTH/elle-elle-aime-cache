{
    "generation": "private void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n\n    if (tagName.length() == 0) {\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName);\n        if (!tag.equals(scriptTag)) {\n            // if it's not a script tag, chomp to the end of the closing tag\n            tq.chompTo(\">\");\n        }\n\n        Node dataNode;\n        if (tag.equals(titleTag) || tag.equals(textareaTag))\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        else\n            dataNode = new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n\n    // add additional text node after data tag for handling text after data (e.g. </script> aft)\n    if (tag.isData() && !tq.isEmpty() && !tq.matchesAny(\"<\", \"</\")) {\n        String text = tq.consumeToAny(\"<\", \"</\");\n        TextNode textNode = new TextNode(text, baseUri);\n        child.parentNode().appendChild(textNode);\n    }\n\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            baseUri = href;\n            doc.setBaseUri(href);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}