{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Handle special cases first\n    double y0 = y[yOffset];\n    double x0 = x[xOffset];\n\n    if (x0 == 0.0) {\n        if (y0 > 0.0) {\n            result[resultOffset] = FastMath.PI / 2.0;\n        } else if (y0 < 0.0) {\n            result[resultOffset] = -FastMath.PI / 2.0;\n        } else {\n            // y is zero, determine the sign based on the sign of y\n            double sign = FastMath.copySign(1.0, y0);\n            result[resultOffset] = sign * 0.0;\n        }\n        // Higher order derivatives are zero in these cases\n        for (int i = 1; i < getSize(); i++) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    if (y0 == 0.0) {\n        if (x0 > 0.0) {\n            result[resultOffset] = 0.0;\n        } else {\n            result[resultOffset] = FastMath.PI;\n            if (x0 == Double.NEGATIVE_INFINITY) {\n                result[resultOffset] = FastMath.PI;\n            } else {\n                result[resultOffset] = -FastMath.PI;\n            }\n        }\n        // Higher order derivatives are zero in these cases\n        for (int i = 1; i < getSize(); i++) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    // General case\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x0 >= 0) {\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n    } else {\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        double sign = (y0 >= 0) ? 1.0 : -1.0;\n        result[resultOffset] = sign * FastMath.PI - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n        }\n    }\n\n    // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n    if (Double.isInfinite(y0) || Double.isInfinite(x0)) {\n        double angle = FastMath.atan2(y0, x0);\n        result[resultOffset] = angle;\n        for (int i = 1; i < getSize(); i++) {\n            result[resultOffset + i] = 0.0;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}