{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Handle special cases first\n    if (x[xOffset] == 0 && y[yOffset] == 0) {\n        // Case: atan2(0, 0) returns 0 with the sign determined by the quadrant\n        result[resultOffset] = 0.0;\n        if (Double.doubleToRawLongBits(y[yOffset]) < 0) {\n            result[resultOffset] = -0.0;\n        }\n        if (Double.doubleToRawLongBits(x[xOffset]) < 0) {\n            result[resultOffset] = (Double.doubleToRawLongBits(y[yOffset]) < 0) ? -Math.PI : Math.PI;\n        }\n        // Set derivatives to zero\n        for (int i = resultOffset + 1; i < resultOffset + getSize(); i++) {\n            result[i] = 0.0;\n        }\n        return;\n    }\n\n    // Compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] >= 0) {\n\n        // Compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n\n    } else {\n\n        // Compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        result[resultOffset] =\n                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n        }\n\n    }\n\n    // Handle special cases for infinity\n    if (Double.isInfinite(y[yOffset]) && Double.isInfinite(x[xOffset])) {\n        if (y[yOffset] > 0) {\n            result[resultOffset] = (x[xOffset] > 0) ? Math.PI / 4 : 3 * Math.PI / 4;\n        } else {\n            result[resultOffset] = (x[xOffset] > 0) ? -Math.PI / 4 : -3 * Math.PI / 4;\n        }\n        // Set derivatives to zero\n        for (int i = resultOffset + 1; i < resultOffset + getSize(); i++) {\n            result[i] = 0.0;\n        }\n    } else if (Double.isInfinite(y[yOffset])) {\n        result[resultOffset] = (y[yOffset] > 0) ? Math.PI / 2 : -Math.PI / 2;\n        // Set derivatives to zero\n        for (int i = resultOffset + 1; i < resultOffset + getSize(); i++) {\n            result[i] = 0.0;\n        }\n    } else if (Double.isInfinite(x[xOffset])) {\n        result[resultOffset] = (x[xOffset] > 0) ? 0 : Math.PI;\n        // Set derivatives to zero\n        for (int i = resultOffset + 1; i < resultOffset + getSize(); i++) {\n            result[i] = 0.0;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}