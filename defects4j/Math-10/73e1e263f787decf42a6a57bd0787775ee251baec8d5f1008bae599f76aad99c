{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    double xValue = x[xOffset];\n    double yValue = y[yOffset];\n\n    // Handle special cases\n    if (xValue == 0.0 && yValue == 0.0) {\n        // atan2(0, 0) is undefined, but according to test, it should be 0 with correct sign\n        result[resultOffset] = 0.0;\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    if (xValue >= 0) {\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n    } else {\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        double sign = (yValue >= 0) ? 1 : -1;\n        result[resultOffset] = sign * Math.PI - 2 * tmp2[0]; // +/- pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; // -2 * derivative parts\n        }\n    }\n\n    // Adjust sign based on y's sign\n    double sign = Math.copySign(1.0, yValue);\n    for (int i = 0; i < result.length; ++i) {\n        result[resultOffset + i] *= sign;\n    }\n\n    // Additional handling for negative zero\n    if (xValue < 0 && yValue == 0.0) {\n        result[resultOffset] = Math.copySign(Math.PI, yValue);\n    } else if (xValue > 0 && yValue == 0.0) {\n        result[resultOffset] = 0.0;\n    } else if (xValue == 0.0 && yValue > 0) {\n        result[resultOffset] = Math.PI / 2;\n    } else if (xValue == 0.0 && yValue < 0) {\n        result[resultOffset] = -Math.PI / 2;\n    }\n\n    // Ensure correct sign for zero values\n    if (yValue == 0.0 && xValue > 0) {\n        result[resultOffset] = 0.0;\n    } else if (yValue == 0.0 && xValue < 0) {\n        result[resultOffset] = Math.copySign(Math.PI, yValue);\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}