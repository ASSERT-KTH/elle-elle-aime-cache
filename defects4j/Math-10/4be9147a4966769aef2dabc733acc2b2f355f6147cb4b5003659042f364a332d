{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    // Determine the quadrant based on the signs of x and y\n    double xValue = x[xOffset];\n    double yValue = y[yOffset];\n\n    if (xValue > 0) {\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n    } else if (xValue < 0 && yValue >= 0) {\n        // compute atan2(y, x) = pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = FastMath.PI - 2 * tmp2[i];\n        }\n    } else if (xValue < 0 && yValue < 0) {\n        // compute atan2(y, x) = -pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -FastMath.PI - 2 * tmp2[i];\n        }\n    } else if (xValue == 0 && yValue > 0) {\n        // y positive, x zero\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = FastMath.PI / 2;\n        }\n    } else if (xValue == 0 && yValue < 0) {\n        // y negative, x zero\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -FastMath.PI / 2;\n        }\n    } else if (xValue == 0 && yValue == 0) {\n        // x and y zero, set to zero\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 0;\n        }\n    }\n\n    // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n    // additional logic may be needed here based on specific requirements\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}