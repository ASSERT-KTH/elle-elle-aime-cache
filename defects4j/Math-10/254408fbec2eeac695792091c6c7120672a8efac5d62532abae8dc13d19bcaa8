{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    double yValue = y[yOffset];\n    double xValue = x[xOffset];\n\n    // Handle special cases first\n    if (Double.isInfinite(yValue) || Double.isInfinite(xValue)) {\n        if (Double.isInfinite(yValue)) {\n            if (Double.isInfinite(xValue)) {\n                result[resultOffset] = (yValue > 0) ? (xValue > 0 ? FastMath.PI / 4 : 3 * FastMath.PI / 4) :\n                                                      (xValue > 0 ? -FastMath.PI / 4 : -3 * FastMath.PI / 4);\n            } else {\n                result[resultOffset] = (yValue > 0) ? FastMath.PI / 2 : -FastMath.PI / 2;\n            }\n        } else {\n            result[resultOffset] = (xValue > 0) ? 0 : FastMath.PI;\n        }\n        for (int i = 1; i < result.length; ++i) {\n            result[resultOffset + i] = 0;\n        }\n        return;\n    }\n\n    if (yValue == 0 && xValue == 0) {\n        result[resultOffset] = (Double.doubleToRawLongBits(yValue) & Double.doubleToRawLongBits(xValue) & 1L) == 0 ? 0 : FastMath.PI;\n        result[resultOffset] = (Double.doubleToRawLongBits(yValue) & 1L) != 0 ? -result[resultOffset] : result[resultOffset];\n        for (int i = 1; i < result.length; ++i) {\n            result[resultOffset + i] = 0;\n        }\n        return;\n    }\n\n    // Compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);  // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);  // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);             // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                 // r = sqrt(x^2 + y^2)\n\n    if (xValue >= 0) {\n        // Compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);      // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);   // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                 // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n    } else {\n        // Compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0); // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);   // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                 // atan(y / (r - x))\n        result[resultOffset] = ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; // -2 * atan(y / (r - x))\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}