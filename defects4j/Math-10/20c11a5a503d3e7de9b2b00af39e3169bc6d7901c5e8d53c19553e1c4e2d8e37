{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Special case handling for y == 0\n    if (y[yOffset] == 0) {\n        if (x[xOffset] > 0) {\n            // atan2(0, positive x) = 0 with sign of y\n            result[resultOffset] = y[yOffset];\n            for (int i = 1; i < result.length; i++) {\n                result[resultOffset + i] = 0;\n            }\n        } else if (x[xOffset] < 0) {\n            // atan2(0, negative x) = \u03c0\n            result[resultOffset] = FastMath.PI;\n            for (int i = 1; i < result.length; i++) {\n                result[resultOffset + i] = 0;\n            }\n        } else {\n            // atan2(0, 0) = 0 with sign based on y\n            result[resultOffset] = y[yOffset];\n            for (int i = 1; i < result.length; i++) {\n                result[resultOffset + i] = 0;\n            }\n        }\n        return;\n    }\n\n    // Special case handling for x == 0\n    if (x[xOffset] == 0) {\n        if (y[yOffset] > 0) {\n            // atan2 positive y, 0) = \u03c0/2\n            result[resultOffset] = FastMath.PI / 2;\n            for (int i = 1; i < result.length; i++) {\n                result[resultOffset + i] = 0;\n            }\n        } else if (y[yOffset] < 0) {\n            // atan2 negative y, 0) = -\u03c0/2\n            result[resultOffset] = -FastMath.PI / 2;\n            for (int i = 1; i < result.length; i++) {\n                result[resultOffset + i] = 0;\n            }\n        } else {\n            // atan2(0, 0) should already be handled above\n            return;\n        }\n        return;\n    }\n\n    // compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] >= 0) {\n        // compute atan2(y, x) = 2 * atan(y / (r + x))\n        double[] sum = new double[getSize()];\n        add(tmp1, 0, x, xOffset, sum, 0);           // r + x\n        double[] division = new double[getSize()];\n        divide(y, yOffset, sum, 0, division, 0);    // y / (r + x)\n        double[] atanResult = new double[getSize()];\n        atan(division, 0, atanResult, 0);           // atan(y / (r + x))\n        for (int i = 0; i < atanResult.length; i++) {\n            result[resultOffset + i] = 2 * atanResult[i]; // 2 * atan(y / (r + x))\n        }\n    } else {\n        // compute atan2(y, x) = +/-\u03c0 - 2 * atan(y / (r - x))\n        double[] diff = new double[getSize()];\n        subtract(tmp1, 0, x, xOffset, diff, 0);     // r - x\n        double[] division = new double[getSize()];\n        divide(y, yOffset, diff, 0, division, 0);   // y / (r - x)\n        double[] atanResult = new double[getSize()];\n        atan(division, 0, atanResult, 0);           // atan(y / (r - x))\n        result[resultOffset] =\n                ((y[yOffset] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * atanResult[0];\n        for (int i = 1; i < atanResult.length; i++) {\n            result[resultOffset + i] = -2 * atanResult[i];\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}