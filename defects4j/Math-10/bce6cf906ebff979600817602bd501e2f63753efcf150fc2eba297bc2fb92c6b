{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    // Handle special cases\n    if (Double.isNaN(tmp1[0])) {\n        // If r is NaN, it means x and y are both zero\n        for (int i = 0; i < tmp1.length; ++i) {\n            result[resultOffset + i] = Double.NaN;\n        }\n        return;\n    }\n\n    if (Double.isInfinite(tmp1[0])) {\n        // If r is infinite, it means either x or y is infinite\n        if (Double.isInfinite(y[yOffset])) {\n            if (Double.isInfinite(x[xOffset])) {\n                // both x and y are infinite\n                result[resultOffset] = (x[xOffset] > 0) ? Math.PI / 4 : 3 * Math.PI / 4;\n            } else {\n                // y is infinite, x is finite\n                result[resultOffset] = (y[yOffset] > 0) ? Math.PI / 2 : -Math.PI / 2;\n            }\n        } else {\n            // x is infinite, y is finite\n            result[resultOffset] = (x[xOffset] > 0) ? 0 : Math.PI;\n        }\n        for (int i = 1; i < tmp1.length; ++i) {\n            result[resultOffset + i] = 0;\n        }\n        return;\n    }\n\n    if (x[xOffset] >= 0) {\n\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n\n    } else {\n\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        result[resultOffset] =\n                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n        }\n\n    }\n\n    // Handle special cases for atan2(0, 0)\n    if (x[xOffset] == 0 && y[yOffset] == 0) {\n        result[resultOffset] = 0; // Conventionally, atan2(0, 0) is 0\n        for (int i = 1; i < tmp1.length; ++i) {\n            result[resultOffset + i] = Double.NaN; // Derivatives are undefined\n        }\n    }\n\n    // Handle special cases for atan2(0, +0) and atan2(0, -0)\n    if (y[yOffset] == 0 && x[xOffset] == +0.0) {\n        result[resultOffset] = 0;\n    }\n    if (y[yOffset] == 0 && x[xOffset] == -0.0) {\n        result[resultOffset] = FastMath.PI;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}