{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Handle special cases\n    if (Double.isInfinite(y[yOffset]) || Double.isInfinite(x[xOffset])) {\n        if (Double.isInfinite(y[yOffset]) && Double.isInfinite(x[xOffset])) {\n            // Both y and x are infinite\n            if (y[yOffset] > 0) {\n                result[resultOffset] = (x[xOffset] > 0) ? FastMath.PI / 4 : 3 * FastMath.PI / 4;\n            } else {\n                result[resultOffset] = (x[xOffset] > 0) ? -FastMath.PI / 4 : -3 * FastMath.PI / 4;\n            }\n        } else if (Double.isInfinite(y[yOffset])) {\n            // Only y is infinite\n            result[resultOffset] = (y[yOffset] > 0) ? FastMath.PI / 2 : -FastMath.PI / 2;\n        } else {\n            // Only x is infinite\n            result[resultOffset] = (x[xOffset] > 0) ? 0 : FastMath.PI;\n        }\n    } else if (y[yOffset] == 0.0 && x[xOffset] == 0.0) {\n        // Both y and x are zero\n        result[resultOffset] = (y[yOffset] == 0.0 && x[xOffset] == 0.0) ? 0.0 :\n                               (y[yOffset] == 0.0 && x[xOffset] == -0.0) ? FastMath.PI :\n                               (y[yOffset] == -0.0 && x[xOffset] == 0.0) ? -0.0 :\n                               (y[yOffset] == -0.0 && x[xOffset] == -0.0) ? -FastMath.PI : 0.0;\n    } else {\n        // compute r = sqrt(x^2 + y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n        } else {\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            result[resultOffset] =\n                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n        }\n    }\n\n    // Handle special cases for derivatives\n    if (Double.isNaN(result[resultOffset])) {\n        result[resultOffset] = 0.0;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}