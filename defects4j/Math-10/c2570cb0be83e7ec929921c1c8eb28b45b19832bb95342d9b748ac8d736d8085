{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    double yVal = y[yOffset];\n    double xVal = x[xOffset];\n\n    // Handle special cases directly\n    if (xVal == 0.0) {\n        if (yVal == 0.0) {\n            // atan2(+-0, +0) should return +-0\n            // atan2(+-0, -0) should return +-pi\n            result[resultOffset] = y[yOffset + 1] >= 0 ? (x[xOffset + 1] < 0 ? Math.PI : 0.0) : (x[xOffset + 1] < 0 ? -Math.PI : 0.0);\n        } else if (yVal > 0) {\n            result[resultOffset] = Math.PI / 2;\n        } else {\n            result[resultOffset] = -Math.PI / 2;\n        }\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    // compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (xVal >= 0) {\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n    } else {\n        // compute atan2(y, x) = sign(y) * pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        double signY = yVal >= 0 ? 1.0 : -1.0;\n        result[resultOffset] = signY * Math.PI - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n\n    // Additional handling for quadrants\n    if (xVal < 0 && yVal >= 0) {\n        result[resultOffset] = Math.PI - 2 * tmp2[0];\n    } else if (xVal < 0 && yVal < 0) {\n        result[resultOffset] = -Math.PI - 2 * tmp2[0];\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}