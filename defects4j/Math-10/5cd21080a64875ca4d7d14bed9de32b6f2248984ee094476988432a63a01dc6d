{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Handle special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity)\n    if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset]) ||\n        (y[yOffset] == 0.0 && x[xOffset] == 0.0)) {\n\n        if (y[yOffset] > 0) {\n            if (x[xOffset] > 0) {\n                result[resultOffset] = FastMath.PI / 2;\n            } else if (x[xOffset] < 0) {\n                result[resultOffset] = 3 * FastMath.PI / 2;\n            } else {\n                result[resultOffset] = FastMath.PI / 2; // y > 0, x is 0 (or +0)\n            }\n        } else if (y[yOffset] < 0) {\n            if (x[xOffset] > 0) {\n                result[resultOffset] = -FastMath.PI / 2;\n            } else if (x[xOffset] < 0) {\n                result[resultOffset] = -3 * FastMath.PI / 2;\n            } else {\n                result[resultOffset] = -FastMath.PI / 2; // y < 0, x is 0 (or +0)\n            }\n        } else { // y is 0\n            if (x[xOffset] > 0) {\n                result[resultOffset] = 0;\n            } else if (x[xOffset] < 0) {\n                result[resultOffset] = FastMath.PI;\n            } else { // both y and x are 0 (or +0)\n                result[resultOffset] = 0; // atan2(+0, +0) is 0\n            }\n        }\n\n        // Handle special case for -0.0\n        if (y[yOffset] == 0.0 && Double.doubleToLongBits(y[yOffset]) < 0) {\n            if (x[xOffset] == 0.0 && Double.doubleToLongBits(x[xOffset]) > 0) {\n                result[resultOffset] = -0.0; // atan2(-0, +0) is -0\n            } else if (x[xOffset] == 0.0 && Double.doubleToLongBits(x[xOffset]) < 0) {\n                result[resultOffset] = -FastMath.PI; // atan2(-0, -0) is -pi\n            }\n        }\n\n        // Handle special case for +0.0\n        if (y[yOffset] == 0.0 && Double.doubleToLongBits(y[yOffset]) > 0) {\n            if (x[xOffset] == 0.0 && Double.doubleToLongBits(x[xOffset]) < 0) {\n                result[resultOffset] = FastMath.PI; // atan2(+0, -0) is pi\n            }\n        }\n\n        // Handle special case for +/- infinity\n        if (Double.isInfinite(y[yOffset]) && Double.isInfinite(x[xOffset])) {\n            if (y[yOffset] > 0) {\n                if (x[xOffset] > 0) {\n                    result[resultOffset] = FastMath.PI / 4; // atan2(+inf, +inf) is pi/4\n                } else {\n                    result[resultOffset] = 3 * FastMath.PI / 4; // atan2(+inf, -inf) is 3pi/4\n                }\n            } else {\n                if (x[xOffset] > 0) {\n                    result[resultOffset] = -FastMath.PI / 4; // atan2(-inf, +inf) is -pi/4\n                } else {\n                    result[resultOffset] = -3 * FastMath.PI / 4; // atan2(-inf, -inf) is -3pi/4\n                }\n            }\n        }\n\n        // Set the rest of the result array to zero\n        for (int i = 1; i < result.length; ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n\n        return;\n    }\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] >= 0) {\n\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n\n    } else {\n\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        result[resultOffset] =\n                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n        }\n\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}