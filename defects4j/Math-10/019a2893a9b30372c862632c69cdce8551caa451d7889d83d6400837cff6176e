{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    if (!Double.isFinite(y[yOffset]) || !Double.isFinite(x[xOffset])) {\n        if (Double.isNaN(y[yOffset]) || Double.isNaN(x[xOffset])) {\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), Double.NaN);\n        } else if (y[yOffset] == 0 && x[xOffset] > 0) {\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), y[yOffset]);\n        } else if (y[yOffset] > 0 && Double.isInfinite(x[xOffset])) {\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), FastMath.PI / 2.0);\n        } else if (y[yOffset] < 0 && Double.isInfinite(x[xOffset])) {\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), -FastMath.PI / 2.0);\n        } else if (y[yOffset] == 0 && x[xOffset] < 0) {\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), -y[yOffset]);\n        } else if (y[yOffset] == 0 && Double.isInfinite(x[xOffset])) {\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), (x[xOffset] > 0) ? FastMath.PI : -FastMath.PI);\n        } else if (Double.isInfinite(y[yOffset]) && Double.isInfinite(x[xOffset])) {\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), (y[yOffset] == x[xOffset]) ? FastMath.PI / 4.0 : 3.0 * FastMath.PI / 4.0);\n        } else {\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), y[yOffset]);\n        }\n    } else {\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0); // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0); // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0); // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0); // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0); // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0); // y /(r + x)\n            atan(tmp1, 0, tmp2, 0); // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n        } else {\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0); // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0); // y /(r - x)\n            atan(tmp1, 0, tmp2, 0); // atan(y / (r - x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = ((tmp2[i] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}