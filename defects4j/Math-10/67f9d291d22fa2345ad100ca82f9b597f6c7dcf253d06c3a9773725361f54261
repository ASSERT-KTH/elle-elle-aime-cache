{
    "generation": "/** Compute two arguments arc tangent of a derivative structure.\n * @param y array holding the first operand\n * @param yOffset offset of the first operand in its array\n * @param x array holding the second operand\n * @param xOffset offset of the second operand in its array\n * @param result array where result must be stored (for\n * two arguments arc tangent the result array <em>cannot</em>\n * be the input array)\n * @param resultOffset offset of the result in its array\n */\npublic void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    // Handle special cases for x and y\n    if (x[xOffset] == 0.0) {\n        if (y[yOffset] > 0.0) {\n            // atan2(+y, +0) = +pi/2\n            for (int i = 0; i < result.length; ++i) {\n                result[resultOffset + i] = FastMath.PI / 2;\n            }\n        } else if (y[yOffset] < 0.0) {\n            // atan2(-y, +0) = -pi/2\n            for (int i = 0; i < result.length; ++i) {\n                result[resultOffset + i] = -FastMath.PI / 2;\n            }\n        } else if (y[yOffset] == 0.0) {\n            // atan2(+0, +0) = +0, atan2(-0, +0) = -0\n            for (int i = 0; i < result.length; ++i) {\n                result[resultOffset + i] = FastMath.copySign(0.0, x[xOffset]);\n            }\n        }\n    } else if (x[xOffset] < 0.0) {\n        if (y[yOffset] == 0.0) {\n            // atan2(+0, -x) = +pi, atan2(-0, -x) = -pi\n            for (int i = 0; i < result.length; ++i) {\n                result[resultOffset + i] = FastMath.copySign(FastMath.PI, y[yOffset]);\n            }\n        } else {\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = \n                        ((y[yOffset] >= 0)? FastMath.PI : -FastMath.PI) - 2 * tmp2[i];\n            }\n        }\n    } else { // x[xOffset] > 0.0\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n    }\n\n    // Handle infinite cases\n    if (Double.isInfinite(y[yOffset]) &&!Double.isInfinite(x[xOffset])) {\n        for (int i = 0; i < result.length; ++i) {\n            result[resultOffset + i] = \n                    ((y[yOffset] > 0)? FastMath.PI / 2 : -FastMath.PI / 2);\n        }\n    } else if (Double.isInfinite(x[xOffset]) &&!Double.isInfinite(y[yOffset])) {\n        for (int i = 0; i < result.length; ++i) {\n            result[resultOffset + i] = \n                    ((x[xOffset] > 0)? 0.0 : ((y[yOffset] >= 0)? FastMath.PI : -FastMath.PI));\n        }\n    } else if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {\n        for (int i = 0; i < result.length; ++i) {\n            result[resultOffset + i] = \n                    ((x[xOffset] > 0)? \n                     ((y[yOffset] > 0)? FastMath.PI / 4 : -FastMath.PI / 4) : \n                     ((y[yOffset] > 0)? FastMath.PI * 3 / 4 : -FastMath.PI * 3 / 4));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}