{
    "generation": "    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        // Handle special cases for zeroes and infinities\n        if (y[yOffset] == 0.0) {\n            if (x[xOffset] == 0.0) {\n                result[resultOffset] = y[yOffset]; // atan2(+0.0, +0.0) or atan2(-0.0, -0.0) should return the sign of y\n                for (int i = 1; i < getSize(); i++) {\n                    result[resultOffset + i] = 0.0;\n                }\n                return;\n            } else if (x[xOffset] > 0.0) {\n                result[resultOffset] = 0.0; // atan2(\u00b10, +X) -> 0.0\n                for (int i = 1; i < getSize(); i++) {\n                    result[resultOffset + i] = 0.0;\n                }\n                return;\n            } else { // x[xOffset] < 0.0\n                result[resultOffset] = (y[yOffset] >= 0.0) ? FastMath.PI : -FastMath.PI; // atan2(\u00b10, -X) -> \u00b1\u03c0\n                for (int i = 1; i < getSize(); i++) {\n                    result[resultOffset + i] = 0.0;\n                }\n                return;\n            }\n        } else if (Double.isInfinite(y[yOffset]) || Double.isInfinite(x[xOffset])) {\n            if (Double.isInfinite(y[yOffset])) {\n                result[resultOffset] = (y[yOffset] > 0) ? FastMath.PI / 2 : -FastMath.PI / 2; // atan2(\u00b1\u221e, finites or \u00b1\u221e) -> \u00b1\u03c0/2\n                for (int i = 1; i < getSize(); i++) {\n                    result[resultOffset + i] = 0.0;\n                }\n                return;\n            } else if (x[xOffset] == Double.POSITIVE_INFINITY) {\n                result[resultOffset] = 0.0; // atan2(finite, +\u221e) -> 0.0\n                for (int i = 1; i < getSize(); i++) {\n                    result[resultOffset + i] = 0.0;\n                }\n                return;\n            } else if (x[xOffset] == Double.NEGATIVE_INFINITY) {\n                result[resultOffset] = (y[yOffset] > 0.0) ? FastMath.PI : -FastMath.PI; // atan2(finite, -\u221e) -> \u00b1\u03c0\n                for (int i = 1; i < getSize(); i++) {\n                    result[resultOffset + i] = 0.0;\n                }\n                return;\n            }\n        }\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            result[resultOffset] =\n                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}