{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Check for special cases where x and y are zero\n    if (x[xOffset] == 0 && y[yOffset] == 0) {\n        // Handle (0, 0) cases based on the signs of y and x\n        if (Double.compare(y[yOffset], 0) >= 0 && Double.compare(x[xOffset], 0) > 0) {\n            result[resultOffset] = 0.0;\n        } else if (Double.compare(y[yOffset], 0) >= 0 && Double.compare(x[xOffset], 0) < 0) {\n            result[resultOffset] = Math.PI;\n        } else if (Double.compare(y[yOffset], 0) < 0 && Double.compare(x[xOffset], 0) > 0) {\n            result[resultOffset] = -0.0;\n        } else if (Double.compare(y[yOffset], 0) < 0 && Double.compare(x[xOffset], 0) < 0) {\n            result[resultOffset] = -Math.PI;\n        }\n        // Set higher order derivatives to zero\n        for (int i = 1; i < result.length; ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    // compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] >= 0) {\n\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        double[] tmpSum = new double[getSize()];\n        add(tmp1, 0, x, xOffset, tmpSum, 0);        // r + x\n        double[] tmpDiv = new double[getSize()];\n        divide(y, yOffset, tmpSum, 0, tmpDiv, 0);   // y /(r + x)\n        double[] tmpAtan = new double[getSize()];\n        atan(tmpDiv, 0, tmpAtan, 0);                // atan(y / (r + x))\n        for (int i = 0; i < tmpAtan.length; ++i) {\n            result[resultOffset + i] = 2 * tmpAtan[i]; // 2 * atan(y / (r + x))\n        }\n\n    } else {\n\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        double[] tmpDiff = new double[getSize()];\n        subtract(tmp1, 0, x, xOffset, tmpDiff, 0);  // r - x\n        double[] tmpDiv = new double[getSize()];\n        divide(y, yOffset, tmpDiff, 0, tmpDiv, 0);  // y /(r - x)\n        double[] tmpAtan = new double[getSize()];\n        atan(tmpDiv, 0, tmpAtan, 0);                // atan(y / (r - x))\n        result[resultOffset] =\n                ((tmpAtan[0] <= 0) ? -Math.PI : Math.PI) - 2 * tmpAtan[0]; // +/-pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmpAtan.length; ++i) {\n            result[resultOffset + i] = -2 * tmpAtan[i]; // +/-pi - 2 * atan(y / (r - x))\n        }\n\n    }\n\n    // Ensure the sign of zero is preserved\n    if (y[yOffset] == 0 && x[xOffset] > 0) {\n        result[resultOffset] = Math.copySign(0.0, y[yOffset]);\n    } else if (x[xOffset] == 0 && y[yOffset] > 0) {\n        result[resultOffset] = Math.PI / 2;\n    } else if (x[xOffset] == 0 && y[yOffset] < 0) {\n        result[resultOffset] = -Math.PI / 2;\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}