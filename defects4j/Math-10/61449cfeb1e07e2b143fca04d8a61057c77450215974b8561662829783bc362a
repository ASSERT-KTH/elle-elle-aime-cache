{
    "generation": "/** Compute two arguments arc tangent of a derivative structure.\n * @param y array holding the first operand\n * @param yOffset offset of the first operand in its array\n * @param x array holding the second operand\n * @param xOffset offset of the second operand in its array\n * @param result array where result must be stored (for\n * two arguments arc tangent the result array <em>cannot</em>\n * be the input array)\n * @param resultOffset offset of the result in its array\n */\npublic void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Check for special cases\n    for (int i = 0; i < getSize(); i++) {\n        if (x[xOffset + i] == 0 && y[yOffset + i] == 0) {\n            // handle (+0/+0, +0/-0, -0/+0, -0/-0)\n            if (Double.signum(x[xOffset + i]) == 0 && Double.signum(y[yOffset + i]) == 1) {\n                result[resultOffset + i] = 0;\n            } else if (Double.signum(x[xOffset + i]) == 0 && Double.signum(y[yOffset + i]) == -1) {\n                result[resultOffset + i] = -FastMath.PI;\n            } else if (Double.signum(x[xOffset + i]) == -1 && Double.signum(y[yOffset + i]) == 0) {\n                result[resultOffset + i] = FastMath.PI;\n            } else {\n                result[resultOffset + i] = -FastMath.PI;\n            }\n        } else if (x[xOffset + i] == 0 && y[yOffset + i] > 0) {\n            // handle (y/0)\n            result[resultOffset + i] = FastMath.PI / 2;\n        } else if (x[xOffset + i] == 0 && y[yOffset + i] < 0) {\n            // handle (y/0)\n            result[resultOffset + i] = -FastMath.PI / 2;\n        } else if (x[xOffset + i] > 0 && Double.isInfinite(y[yOffset + i])) {\n            // handle (inf/x)\n            result[resultOffset + i] = FastMath.PI / 2;\n        } else if (x[xOffset + i] > 0 && Double.isInfinite(-y[yOffset + i])) {\n            // handle (-inf/x)\n            result[resultOffset + i] = -FastMath.PI / 2;\n        } else if (x[xOffset + i] < 0 && Double.isInfinite(y[yOffset + i])) {\n            // handle (inf/x)\n            result[resultOffset + i] = -FastMath.PI / 2;\n        } else if (x[xOffset + i] < 0 && Double.isInfinite(-y[yOffset + i])) {\n            // handle (-inf/x)\n            result[resultOffset + i] = FastMath.PI / 2;\n        } else {\n            // compute r = sqrt(x^2+y^2)\n            double[] tmp1 = new double[getSize()];\n            multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n            double[] tmp2 = new double[getSize()];\n            multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n            add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n            rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n            if (x[xOffset] >= 0) {\n\n                // compute atan2(y, x) = 2 atan(y / (r + x))\n                add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n                divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n                atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n                for (int j = 0; j < tmp2.length; ++j) {\n                    result[resultOffset + j] = 2 * tmp2[j]; // 2 * atan(y / (r + x))\n                }\n\n            } else {\n\n                // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n                subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n                divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n                atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n                for (int j = 0; j < tmp2.length; ++j) {\n                    result[resultOffset + j] =\n                            ((tmp2[j] <= 0)? -FastMath.PI : FastMath.PI) - 2 * tmp2[j]; // +/-pi - 2 * atan(y / (r - x))\n                }\n            }\n        }\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}