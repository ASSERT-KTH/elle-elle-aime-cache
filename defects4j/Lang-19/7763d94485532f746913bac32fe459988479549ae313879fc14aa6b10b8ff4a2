{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if ((firstChar == 'x' || firstChar == 'X') && start < seqEnd - 1) {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while (end < seqEnd && input.charAt(end) != ';' && Character.isLetterOrDigit(input.charAt(end))) {\n            end++;\n        }\n\n        if (end > start) {\n            int entityValue;\n            try {\n                String number = input.subSequence(start, end).toString();\n                if (isHex) {\n                    entityValue = Integer.parseInt(number, 16);\n                } else {\n                    entityValue = Integer.parseInt(number);\n                }\n            } catch (NumberFormatException nfe) {\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n                return 0;\n            }\n\n            if (entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs);\n            } else {\n                out.write(entityValue);\n            }\n\n            return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd && input.charAt(end) == ';' ? 1 : 0);\n        }\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}