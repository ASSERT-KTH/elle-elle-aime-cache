{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n\n    if(index >= seqEnd - 2 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n\n    int start = index + 2;\n    boolean isHex = false;\n\n    char firstChar = input.charAt(start);\n    if(firstChar == 'x' || firstChar == 'X') {\n        start++;\n        isHex = true;\n    }\n\n    int end = start;\n    for ( ; end < seqEnd; end++) {\n        if (input.charAt(end) == ';') {\n            break;\n        }\n    }\n\n    if (end == seqEnd) {\n        // This is an unfinished entity. Write the '&' and return.\n        out.write('&');\n        return 1;\n    }\n\n    int entityValue;\n    try {\n        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n    } catch(NumberFormatException nfe) {\n        System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n        return 0;\n    }\n\n    if(entityValue > 0xFFFF) {\n        char[] chrs = Character.toChars(entityValue);\n        out.write(chrs[0]);\n        out.write(chrs[1]);\n    } else {\n        out.write(entityValue);\n    }\n\n    return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}