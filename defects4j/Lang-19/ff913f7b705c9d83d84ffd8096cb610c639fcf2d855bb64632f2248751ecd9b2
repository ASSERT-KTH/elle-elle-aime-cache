{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start < seqEnd) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n                // Check there's more than just an x after the &#\n                if (start == seqEnd) {\n                    return 0;\n                }\n            }\n\n            int end = start;\n            // Note that this supports character codes without a ; on the end\n            while (end < seqEnd && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // Handle case where we've reached the end of the string without finding a semicolon\n            if (end == seqEnd) {\n                end--;\n            }\n\n            String entityValue = input.subSequence(start, end).toString();\n            if (entityValue.isEmpty()) {\n                return 0;\n            }\n\n            try {\n                int codePoint = Integer.parseInt(entityValue, isHex ? 16 : 10);\n                if (codePoint > 0xFFFF) {\n                    char[] chrs = Character.toChars(codePoint);\n                    out.write(chrs[0]);\n                    out.write(chrs[1]);\n                } else {\n                    out.write((char) codePoint);\n                }\n            } catch (NumberFormatException nfe) {\n                return 0;\n            }\n\n            return end - index + 1;\n        }\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}