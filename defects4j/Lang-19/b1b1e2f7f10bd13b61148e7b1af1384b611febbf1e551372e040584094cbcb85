{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if (index + 1 < seqEnd && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start < seqEnd) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n        } else {\n            // Not enough characters after &#\n            return 0;\n        }\n\n        int end = start;\n        // Find the end of the entity or the end of the input\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // Check if we have reached the end without finding a ';'\n        if (end == seqEnd) {\n            // Unfinished entity, handle accordingly\n            return 0;\n        }\n\n        String entityStr = input.subSequence(start, end).toString();\n        int entityValue;\n        try {\n            if (isHex) {\n                entityValue = Integer.parseInt(entityStr, 16);\n            } else {\n                entityValue = Integer.parseInt(entityStr, 10);\n            }\n        } catch (NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + entityStr + \"[\" + start + \"][\" + end + \"]\");\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        // Calculate the number of characters consumed\n        int consumed = end - index + 1;\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}