{
    "generation": "/**\n* {@inheritDoc}\n*/\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if(index >= seqEnd - 2) {\n        return 0;\n    }\n\n    if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n\n            if(start >= seqEnd) {\n                return 0;\n            }\n        }\n\n        int end = start;\n        while(end < seqEnd && input.charAt(end) > 47 && input.charAt(end) < 58)\n        {\n            if(isHex && (input.charAt(end) < 48 || input.charAt(end) > 57) &&\n               (input.charAt(end) < 65 || input.charAt(end) > 70) &&\n               (input.charAt(end) < 97 || input.charAt(end) > 102)) {\n                break;\n            }\n            end++;\n        }\n\n        if(end == start) {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            if(isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch(NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n            return 0;\n        }\n\n        if(entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        return end - index + (isHex ? 1 : 0);\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}