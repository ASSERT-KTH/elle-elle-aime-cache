{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if (index + 1 >= seqEnd || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    int start = index + 2;\n    boolean isHex = false;\n\n    if (start < seqEnd) {\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n    } else {\n        // Incomplete entity, return 0\n        return 0;\n    }\n\n    int end = start;\n    // Find the end of the entity or the end of the string\n    while (end < seqEnd && input.charAt(end) != ';') {\n        end++;\n    }\n\n    // If no ';' found, use the end of the string\n    if (end == seqEnd && input.charAt(seqEnd - 1) != ';') {\n        // Incomplete entity, return 0\n        return 0;\n    }\n\n    int entityValue;\n    try {\n        String entityStr = input.subSequence(start, end).toString();\n        if (isHex) {\n            entityValue = Integer.parseInt(entityStr, 16);\n        } else {\n            entityValue = Integer.parseInt(entityStr, 10);\n        }\n    } catch (NumberFormatException nfe) {\n        System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n        return 0;\n    }\n\n    if (entityValue > 0xFFFF) {\n        char[] chrs = Character.toChars(entityValue);\n        out.write(chrs[0]);\n        out.write(chrs[1]);\n    } else {\n        out.write(entityValue);\n    }\n\n    // Calculate the number of characters consumed\n    // &# + [x|X]? + digits + [';' (optional)]\n    int consumed = 2 + (isHex ? 1 : 0) + (end - start);\n    if (end < seqEnd && input.charAt(end) == ';') {\n        consumed++; // include the ';'\n    }\n    return consumed;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}