{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if(start < seqEnd) { // Ensure there's at least one character after &#\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n        }\n\n        int end = start;\n\n        // Find end of numeric entity\n        while(end < seqEnd && input.charAt(end) != ';' && Character.isDigit(input.charAt(end)) || (isHex && ((input.charAt(end) >= 'a' && input.charAt(end) <= 'f') || (input.charAt(end) >= 'A' && input.charAt(end) <= 'F')))) {\n            end++;\n        }\n\n        // Check if end is valid\n        if (end == start) { // No valid number found\n            return 0;\n        }\n\n        // Handle numbers without a trailing ;\n        if(end < seqEnd && input.charAt(end) == ';') {\n            end++;\n        }\n\n        int entityValue;\n        try {\n            if(isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString().replace(\";\", \"\"), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString().replace(\";\", \"\"), 10);\n            }\n        } catch(NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n            return 0;\n        }\n\n        if(entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        return (end - index); // Return the full number of characters processed\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}