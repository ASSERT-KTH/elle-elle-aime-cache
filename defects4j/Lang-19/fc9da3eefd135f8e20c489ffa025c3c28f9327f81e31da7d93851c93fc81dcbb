{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n\n            // Check there's more than just an x after the &#\n            if (start >= seqEnd) {\n                return 0; // Not enough characters for a valid entity\n            }\n        }\n\n        int end = start;\n        // Note that this supports character codes without a ; on the end\n        while (end < seqEnd && input.charAt(end) != ';') {\n            if (!Character.isDigit(input.charAt(end)) && (isHex ? !isHexDigit(input.charAt(end)) : true)) {\n                return 0; // Invalid character in numeric entity\n            }\n            end++;\n        }\n\n        if (end == seqEnd) {\n            return 0; // No semicolon found, and at end of string\n        }\n\n        String entitySubstring = input.subSequence(start, end).toString();\n        int entityValue;\n        try {\n            entityValue = isHex ? Integer.parseInt(entitySubstring, 16) : Integer.parseInt(entitySubstring, 10);\n        } catch (NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + entitySubstring + \"[\" + start + \"][\" + end + \"]\");\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }\n    return 0;\n}\n\nprivate boolean isHexDigit(char c) {\n    return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}