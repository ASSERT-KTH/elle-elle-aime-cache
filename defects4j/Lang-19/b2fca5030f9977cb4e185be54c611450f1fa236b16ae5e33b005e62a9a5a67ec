{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -3 to ensure there is something after the &#x or &#\n    if (input.charAt(index) == '&' && index < seqEnd - 2) {\n        if (input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            if (start < seqEnd) {\n                char firstChar = input.charAt(start);\n                if (firstChar == 'x' || firstChar == 'X') {\n                    start++;\n                    isHex = true;\n                }\n            } else {\n                // Insufficient characters after &#\n                return 0;\n            }\n\n            int end = start;\n            // Find the end of the entity; if no ';', set end to seqEnd\n            while (end < seqEnd && input.charAt(end) != ';') {\n                end++;\n            }\n\n            String entityStr = input.subSequence(start, end).toString();\n            int entityValue;\n            try {\n                if (isHex) {\n                    entityValue = Integer.parseInt(entityStr, 16);\n                } else {\n                    entityValue = Integer.parseInt(entityStr, 10);\n                }\n            } catch (NumberFormatException nfe) {\n                System.err.println(\"FAIL: \" + entityStr + \"[\" + start + \"][\" + end + \"]\");\n                return 0;\n            }\n\n            if (entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            // Calculate the number of characters consumed\n            // 1 for '&', 1 for '#', 1 for 'x' (if hex), length of number, and ';' (if present)\n            int charsConsumed = 2 + (isHex ? 1 : 0) + (end - start) + (end < seqEnd && input.charAt(end) == ';' ? 1 : 0);\n            return charsConsumed;\n        }\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}