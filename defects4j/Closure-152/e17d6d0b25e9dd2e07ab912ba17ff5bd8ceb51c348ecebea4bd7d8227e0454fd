{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Resolving typeOfThis and checking if it resolves to an ObjectType\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis instanceof ObjectType) {\n        typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else if (resolvedTypeOfThis instanceof UnionType) {\n        // Check if the UnionType contains only ObjectTypes or if it's null\n        UnionType unionType = (UnionType) resolvedTypeOfThis;\n        ObjectType resolvedObjectType = null;\n        for (JSType alternate : unionType.getAlternates()) {\n            if (alternate instanceof ObjectType) {\n                if (resolvedObjectType == null) {\n                    resolvedObjectType = (ObjectType) alternate;\n                } else {\n                    // More than one ObjectType, so it's ambiguous and cannot resolve to a single ObjectType\n                    resolvedObjectType = null;\n                    break;\n                }\n            }\n        }\n        // If we found a single ObjectType, then set it\n        if (resolvedObjectType != null) {\n            typeOfThis = resolvedObjectType;\n        } else {\n            // Otherwise, resolve as null or handle error appropriately\n            typeOfThis = null;\n        }\n    } else {\n        typeOfThis = null;\n    }\n    \n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}