{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis instanceof ObjectType) {\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else if (resolvedTypeOfThis instanceof UnionType) {\n      UnionType unionType = (UnionType) resolvedTypeOfThis;\n      ObjectType objectType = null;\n      for (JSType alt : unionType.getAlternates()) {\n        if (alt instanceof ObjectType) {\n          if (objectType != null) {\n            // If there are multiple ObjectTypes in the union, we need to decide which one to use or handle this case differently.\n            // For now, we'll pick the first one encountered.\n            break;\n          }\n          objectType = (ObjectType) alt;\n        }\n      }\n      if (objectType != null) {\n        typeOfThis = objectType;\n      } else {\n        // No ObjectType found in the union, handle this case appropriately (e.g., report an error, set to null, or use a default type)\n        typeOfThis = null; // Or handle this as per your error handling strategy\n      }\n    } else {\n      // Handle other types (e.g., null, void, etc.) as needed\n      typeOfThis = null; // Or handle this as per your error handling strategy\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}