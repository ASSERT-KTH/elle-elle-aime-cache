{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Resolve typeOfThis\n  JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n  \n  // Check if the typeOfThis is a union type\n  if (resolvedTypeOfThis instanceof UnionType) {\n    // If it is, check if all alternatives of the union are object types\n    UnionType unionType = (UnionType) resolvedTypeOfThis;\n    for (JSType alt : unionType.getAlternates()) {\n      if (!(alt instanceof ObjectType)) {\n        // If not, report an error\n        t.report(t.makeError(typeOfThis.getSourceName(), typeOfThis.getSourceOffset(),\n            \"Bad type annotation. @this type of a function must be an object\\n\" +\n            \"Actual type: \" + unionType.toString()));\n        // And use the unknown type\n        typeOfThis = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        break;\n      }\n    }\n    if (!(typeOfThis instanceof ObjectType)) {\n      // If the loop didn't break, we can use the resolved type\n      typeOfThis = resolvedTypeOfThis;\n    }\n  } else if (!(resolvedTypeOfThis instanceof ObjectType)) {\n    // If typeOfThis is not a union type and not an object type, report an error\n    t.report(t.makeError(typeOfThis.getSourceName(), typeOfThis.getSourceOffset(),\n        \"Bad type annotation. @this type of a function must be an object\\n\" +\n        \"Actual type: \" + resolvedTypeOfThis.toString()));\n    // And use the unknown type\n    typeOfThis = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  } else {\n    // If everything is fine, use the resolved type\n    typeOfThis = resolvedTypeOfThis;\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface!= iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes!= null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}