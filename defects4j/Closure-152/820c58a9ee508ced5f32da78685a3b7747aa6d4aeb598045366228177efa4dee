{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Resolve typeOfThis and handle UnionType appropriately\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis.isUnionType()) {\n        UnionType unionType = (UnionType) resolvedTypeOfThis;\n        List<JSType> objectTypes = new ArrayList<>();\n        for (JSType component : unionType) {\n            if (component.isObjectType()) {\n                objectTypes.add(component);\n            } else {\n                t.report(typeOfThis.getSourceName(), typeOfThis.getLineNumber(),\n                        \"Expected object type, but found: \" + component.toString());\n            }\n        }\n        if (!objectTypes.isEmpty()) {\n            typeOfThis = unionType.createAnonymoussubtype(objectTypes);\n        } else {\n            // Handle the case where there are no object types in the union\n            typeOfThis = theLanguageRegistry.getNativeTypeRegistry().getUnknownType();\n            t.report(typeOfThis.getSourceName(), typeOfThis.getLineNumber(),\n                    \"No object types found in union for @this type\");\n        }\n    } else {\n        typeOfThis = (ObjectType) resolvedTypeOfThis;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n            ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n        resolvedInterfaces.add(resolvedIface);\n        changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n        implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n        for (int i = 0; i < subTypes.size(); i++) {\n            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n        }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}