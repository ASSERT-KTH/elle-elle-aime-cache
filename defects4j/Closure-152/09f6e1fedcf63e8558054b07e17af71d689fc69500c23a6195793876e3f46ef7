{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Resolve typeOfThis and check if it is an ObjectType or a UnionType containing an ObjectType\n    typeOfThis = safeResolve(typeOfThis, t, scope);\n    if (typeOfThis instanceof UnionType) {\n        UnionType unionType = (UnionType) typeOfThis;\n        if (!unionType.isSubtype(getNativeType(NATIVE_TYPE_OBJECT))) {\n            t.warning(JSError.make(NoTypeCheckingCode.LINE_NO_INFO, t.select(\"@this type of a function must be an object\"), unionType));\n        }\n    } else if (!(typeOfThis instanceof ObjectType)) {\n        t.warning(JSError.make(NoTypeCheckingCode.LINE_NO_INFO, t.select(\"@this type of a function must be an object\"), typeOfThis));\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n        resolvedInterfaces.add(resolvedIface);\n        changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n        implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n        for (int i = 0; i < subTypes.size(); i++) {\n            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n        }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}