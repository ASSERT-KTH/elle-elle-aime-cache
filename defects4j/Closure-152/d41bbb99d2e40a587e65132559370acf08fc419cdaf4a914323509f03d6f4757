{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Handle typeOfThis resolution, including UnionType cases\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis.isUnionType()) {\n      UnionType unionType = (UnionType) resolvedTypeOfThis;\n      ObjectType objectType = null;\n      for (JSType alternate : unionType.getAlternates()) {\n        if (alternate.isObjectType()) {\n          if (objectType != null) {\n            // If multiple ObjectTypes are found, we'll use the first one\n            // and report a warning about ambiguous @this type\n            t.warning(\"Ambiguous @this type in union: multiple ObjectTypes found\");\n            break;\n          }\n          objectType = (ObjectType) alternate;\n        }\n      }\n      if (objectType != null) {\n        typeOfThis = objectType;\n      } else {\n        // No ObjectType found in the union, report an error\n        t.error(\"No valid ObjectType found in @this union type\");\n        typeOfThis = null; // Set to null or use a default ObjectType\n      }\n    } else if (resolvedTypeOfThis.isObjectType()) {\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else {\n      // Not a UnionType or ObjectType, report an error\n      t.error(\"Invalid @this type: expected ObjectType or UnionType containing ObjectType\");\n      typeOfThis = null; // Set to null or use a default ObjectType\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}