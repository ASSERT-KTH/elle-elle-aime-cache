{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  if (typeOfThis.isSubtypeOf(JSType.getInstance(ObjectType.OBJECT_TYPE))) {\n    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  } else {\n    t.warning(\"@this type of a function must be an object, Actual type: \" + typeOfThis);\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    if (resolvedIface.isSubtypeOf(JSType.getInstance(ObjectType.OBJECT_TYPE))) {\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    } else {\n      t.warning(\"Implemented interface must be an object, Actual type: \" + resolvedIface);\n    }\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}