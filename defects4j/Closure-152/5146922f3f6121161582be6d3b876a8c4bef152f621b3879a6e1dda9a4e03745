{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Handle typeOfThis resolution correctly, including UnionType cases\n    JSType resolvedThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedThis instanceof UnionType) {\n      UnionType unionType = (UnionType) resolvedThis;\n      boolean hasObjectType = false;\n      JSType objectType = null;\n      for (JSType alt : unionType.getAlternates()) {\n        if (alt instanceof ObjectType) {\n          hasObjectType = true;\n          objectType = alt;\n          break;\n        }\n      }\n      if (hasObjectType) {\n        typeOfThis = (ObjectType) objectType;\n      } else {\n        // If no ObjectType is found in the union, we need to handle this case\n        // We can either leave typeOfThis as is or set it to null, depending on\n        // the desired behavior\n        typeOfThis = null;\n      }\n    } else if (resolvedThis instanceof ObjectType) {\n      typeOfThis = (ObjectType) resolvedThis;\n    } else {\n      // Handle non-ObjectType cases (e.g., primitive types)\n      typeOfThis = null;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}