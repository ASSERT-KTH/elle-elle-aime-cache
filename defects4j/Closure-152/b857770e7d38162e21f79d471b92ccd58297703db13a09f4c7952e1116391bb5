{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Handle typeOfThis resolving to a UnionType or other types\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis instanceof UnionType) {\n        UnionType unionType = (UnionType) resolvedTypeOfThis;\n        JSType objectType = null;\n        for (JSType alt : unionType.getAlternates()) {\n            if (alt.isObject()) {\n                if (objectType == null) {\n                    objectType = alt;\n                } else {\n                    // If there are multiple object types in the union, we can't resolve to a single ObjectType\n                    objectType = null;\n                    break;\n                }\n            }\n        }\n        if (objectType != null && objectType.isObject()) {\n            typeOfThis = (ObjectType) objectType;\n        } else {\n            // If we can't find a single ObjectType, we need to handle this case appropriately\n            // For now, we'll set typeOfThis to null and let the upstream warning handle it\n            typeOfThis = null;\n        }\n    } else if (resolvedTypeOfThis instanceof ObjectType) {\n        typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else {\n        // If it's not a UnionType or ObjectType, set to null and let the upstream warning handle it\n        typeOfThis = null;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}