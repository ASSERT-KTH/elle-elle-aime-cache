{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Resolve typeOfThis and check if it's an ObjectType\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (!(resolvedTypeOfThis instanceof ObjectType)) {\n        if (resolvedTypeOfThis instanceof UnionType) {\n            // If it's a UnionType, check if all constituents are ObjectTypes\n            boolean allObjectTypes = true;\n            for (JSType constituent : ((UnionType) resolvedTypeOfThis).get Constituents()) {\n                if (!(constituent instanceof ObjectType)) {\n                    allObjectTypes = false;\n                    break;\n                }\n            }\n            if (!allObjectTypes) {\n                t.report.Error(this.getSource(), \"@this type of a function must be an object. Actual type: \" + resolvedTypeOfThis);\n            }\n            // For now, just use the resolved type as is (won't be cast to ObjectType)\n            typeOfThis = resolvedTypeOfThis;\n        } else {\n            t.report.Error(this.getSource(), \"@this type of a function must be an object. Actual type: \" + resolvedTypeOfThis);\n            // Fallback toObjectType for compatibility, but this may lead to further errors\n            typeOfThis = ObjectType.cast(resolvedTypeOfThis);\n        }\n    } else {\n        typeOfThis = resolvedTypeOfThis;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface!= iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes!= null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}