{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Resolve typeOfThis, handling potential UnionType\n    JSType resolvedThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedThis instanceof UnionType) {\n        UnionType unionType = (UnionType) resolvedThis;\n        boolean foundValidThisType = false;\n        for (JSType alt : unionType.getAlternates()) {\n            if (alt.isObject() || alt.isUnknownType() || alt.isNullType()) {\n                foundValidThisType = true;\n                break;\n            }\n        }\n        if (!foundValidThisType) {\n            typeOfThis = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        } else {\n            typeOfThis = unionType;\n        }\n    } else if (resolvedThis.isObject() || resolvedThis.isUnknownType() || resolvedThis.isNullType()) {\n        typeOfThis = resolvedThis;\n    } else {\n        typeOfThis = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}