{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // Consider typeOfThis as an ObjectType if it's a UnionType that contains ObjectType.\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis.isUnionType()) {\n        UnionType unionType = (UnionType) resolvedTypeOfThis;\n        for (JSType type : unionType.getComponents()) {\n            if (type.isObjectType()) {\n                typeOfThis = (ObjectType) type;\n                break;\n            }\n        }\n        if (typeOfThis == null) {\n            // Report an error if none of the types in the union are ObjectType.\n            t.report(JSError.make(typeOfThisscp.location, \"this type must be an object, but found: \" + resolvedTypeOfThis));\n        }\n    } else if (resolvedTypeOfThis.isObjectType()) {\n        typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else {\n        // Report an error if the type is not an ObjectType or a UnionType that contains ObjectType.\n        t.report(JSError.make(typeOfThisscp.location, \"this type must be an object, but found: \" + resolvedTypeOfThis));\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface!= iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes!= null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}