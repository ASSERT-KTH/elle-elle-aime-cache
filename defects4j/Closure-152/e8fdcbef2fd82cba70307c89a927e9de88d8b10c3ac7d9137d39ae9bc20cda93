{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Warning about typeOfThis if it doesn't resolve to an ObjectType\n  // is handled further upstream.\n  // TODO(nicksantos): Handle this correctly if we have a UnionType.\n  JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n  if (resolvedTypeOfThis instanceof ObjectType) {\n    typeOfThis = (ObjectType) resolvedTypeOfThis;\n  } else {\n    // If it's not an ObjectType, we keep the original typeOfThis\n    // This allows for UnionTypes and other non-ObjectTypes\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    JSType resolvedIface = iface.resolve(t, scope);\n    if (resolvedIface instanceof ObjectType) {\n      resolvedInterfaces.add((ObjectType) resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}