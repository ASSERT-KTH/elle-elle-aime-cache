{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Resolved typeOfThis might not be an ObjectType (e.g., UnionType), \n    // so we need to handle this case correctly to avoid ClassCastException.\n    typeOfThis = safeResolve(typeOfThis, t, scope);\n    if (!(typeOfThis instanceof ObjectType)) {\n        t.report(typeOfThis.getSource(), \n                 \"Invalid @this type. @this type of a function must be an object. Actual type: \" + typeOfThis);\n        // Optionally, you might want to set a default ObjectType or handle this further upstream.\n        // For simplicity, it's left as is for now.\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface!= iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes!= null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}