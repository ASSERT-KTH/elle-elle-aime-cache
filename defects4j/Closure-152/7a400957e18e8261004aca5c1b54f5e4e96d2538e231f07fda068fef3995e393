{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Check if the resolved typeOfThis is an instance of ObjectType\n  if (typeOfThis.isInstanceType()) {\n    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  } else {\n    if (typeOfThis.isUnionType() && typeOfThis.toMaybeUnionType().isObjectUnion()) {\n      typeOfThis = typeOfThis.toMaybeUnionType().getObjectMembers().get(0);\n    } else {\n      // This treated like a warning instead of an error.\n      t.warning(JSError.TYPE_OF_THIS_NOT_OBJECT,\n                node.getSourceFileName(), node.getLineno(),\n                \"This type expected to be an object, found: \" + typeOfThis);\n    }\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}