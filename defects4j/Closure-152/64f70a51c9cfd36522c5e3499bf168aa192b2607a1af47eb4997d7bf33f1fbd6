{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Handle typeOfThis to accommodate UnionType and ObjectType\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis.isUnionType()) {\n        UnionType unionType = (UnionType) resolvedTypeOfThis;\n        boolean hasObjectType = false;\n        for (JSType alt : unionType.getAlternates()) {\n            if (alt.isObjectType()) {\n                hasObjectType = true;\n                break;\n            }\n        }\n        if (hasObjectType) {\n            // If union contains an ObjectType, we'll keep the resolved type as is\n            typeOfThis = unionType;\n        } else {\n            // If no ObjectType in union, report a warning\n            t.warning(\"No ObjectType found in the union for @this type: \" + unionType);\n            // Keep the original type if no ObjectType is found\n            typeOfThis = (ObjectType) this.typeOfThis;\n        }\n    } else if (resolvedTypeOfThis.isObjectType()) {\n        typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else {\n        // If resolved type is neither UnionType nor ObjectType, report a warning\n        t.warning(\"@this type must be an object or a union containing an object type. Found: \" + resolvedTypeOfThis);\n        // Keep the original type if it's not an ObjectType\n        typeOfThis = (ObjectType) this.typeOfThis;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}