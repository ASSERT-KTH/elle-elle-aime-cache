{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Handle the resolution of typeOfThis correctly if it is a UnionType.\n  JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n  if (resolvedTypeOfThis instanceof ObjectType) {\n    typeOfThis = (ObjectType) resolvedTypeOfThis;\n  } else if (resolvedTypeOfThis instanceof UnionType) {\n    // Check if the UnionType can resolve to an ObjectType\n    UnionType unionType = (UnionType) resolvedTypeOfThis;\n    ObjectType objectType = null;\n    for (JSType alternative : unionType.getAlternates()) {\n      if (alternative instanceof ObjectType) {\n        objectType = (ObjectType) alternative;\n        break;\n      }\n    }\n    if (objectType != null) {\n      typeOfThis = objectType;\n    } else {\n      // Handle the case where no ObjectType exists in the UnionType\n      typeOfThis = null; // or handle it as suitable for your case\n    }\n  } else {\n    typeOfThis = null; // or handle it as suitable for your case\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}