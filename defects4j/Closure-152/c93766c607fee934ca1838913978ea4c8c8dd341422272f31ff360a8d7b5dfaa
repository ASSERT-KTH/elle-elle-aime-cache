{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Handle the case where typeOfThis is a UnionType\n  JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n  if (resolvedTypeOfThis instanceof UnionType) {\n    UnionType unionType = (UnionType) resolvedTypeOfThis;\n    ImmutableList<JSType> unionTypes = unionType.getAlternates();\n    ImmutableList.Builder<ObjectType> objectTypes = ImmutableList.builder();\n    for (JSType type : unionTypes) {\n      if (type instanceof ObjectType) {\n        objectTypes.add((ObjectType) type);\n      }\n    }\n    if (objectTypes.build().isEmpty()) {\n      t.warning(\"typeOfThis must resolve to an ObjectType\");\n    } else {\n      typeOfThis = unionType.toMaybeObjectType();\n    }\n  } else {\n    typeOfThis = (ObjectType) resolvedTypeOfThis;\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}