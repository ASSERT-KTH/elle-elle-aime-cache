{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Handle typeOfThis resolution correctly for UnionType and non-ObjectType\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (!(resolvedTypeOfThis instanceof ObjectType)) {\n        if (resolvedTypeOfThis instanceof UnionType) {\n            UnionType unionType = (UnionType) resolvedTypeOfThis;\n            if (!unionType.containsOnlyObjectTypes()) {\n                t.report(ErrorReporter.CheckLevel.ERROR, \n                         \"Invalid @this type. Expected an object type, but found: \" + resolvedTypeOfThis);\n            }\n        } else {\n            t.report(ErrorReporter.CheckLevel.ERROR, \n                     \"Invalid @this type. Expected an object type, but found: \" + resolvedTypeOfThis);\n        }\n        // Either way, we cannot assign it to typeOfThis as ObjectType, so return an error type\n        return ErrorType.getInstance();\n    }\n    typeOfThis = (ObjectType) resolvedTypeOfThis;\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface!= iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes!= null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}