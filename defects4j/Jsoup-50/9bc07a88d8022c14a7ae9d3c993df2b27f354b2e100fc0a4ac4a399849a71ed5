{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM\n    Charset charset = detectCharsetFromBOM(byteData);\n    if (charset != null) {\n        charsetName = charset.name();\n        byteData.position(charset.equals(StandardCharsets.UTF_8) ? 3 : 2);\n    }\n\n    if (charsetName == null) {\n        // Determine from meta. Safe parse as UTF-8\n        docData = StandardCharsets.UTF_8.decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equalsIgnoreCase(\"UTF-8\")) {\n                charsetName = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                byteData.rewind();\n                docData = Charset.forName(charsetName).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static Charset detectCharsetFromBOM(ByteBuffer byteData) {\n    if (byteData.remaining() < 2) {\n        return null;\n    }\n    \n    int firstByte = byteData.get(0) & 0xFF;\n    int secondByte = byteData.get(1) & 0xFF;\n    \n    if (firstByte == 0xFE && secondByte == 0xFF) {\n        return StandardCharsets.UTF_16BE;\n    } else if (firstByte == 0xFF && secondByte == 0xFE) {\n        if (byteData.remaining() >= 4 && byteData.get(2) == 0 && byteData.get(3) == 0) {\n            return Charset.forName(\"UTF-32LE\");\n        }\n        return StandardCharsets.UTF_16LE;\n    } else if (byteData.remaining() >= 3 && firstByte == 0xEF && secondByte == 0xBB && (byteData.get(2) & 0xFF) == 0xBF) {\n        return StandardCharsets.UTF_8;\n    } else if (byteData.remaining() >= 4 && firstByte == 0 && secondByte == 0 && (byteData.get(2) & 0xFF) == 0xFE && (byteData.get(3) & 0xFF) == 0xFF) {\n        return Charset.forName(\"UTF-32BE\");\n    }\n    \n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}