{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM and determine charset\n    if (byteData.remaining() >= 3 && byteData.get(0) == (byte) 0xEF && byteData.get(1) == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) {\n        // UTF-8 BOM\n        charsetName = \"UTF-8\";\n        byteData.position(3); // Skip BOM\n    } else if (byteData.remaining() >= 2 && byteData.get(0) == (byte) 0xFE && byteData.get(1) == (byte) 0xFF) {\n        // UTF-16BE BOM\n        charsetName = \"UTF-16BE\";\n        byteData.position(2); // Skip BOM\n    } else if (byteData.remaining() >= 2 && byteData.get(0) == (byte) 0xFF && byteData.get(1) == (byte) 0xFE) {\n        // UTF-16LE BOM\n        charsetName = \"UTF-16LE\";\n        byteData.position(2); // Skip BOM\n    } else if (byteData.remaining() >= 4 && byteData.get(0) == 0 && byteData.get(1) == 0 && byteData.get(2) == (byte) 0xFE && byteData.get(3) == (byte) 0xFF) {\n        // UTF-32BE BOM\n        charsetName = \"UTF-32BE\";\n        byteData.position(4); // Skip BOM\n    } else if (byteData.remaining() >= 4 && byteData.get(0) == (byte) 0xFF && byteData.get(1) == (byte) 0xFE && byteData.get(2) == 0 && byteData.get(3) == 0) {\n        // UTF-32LE BOM\n        charsetName = \"UTF-32LE\";\n        byteData.position(4); // Skip BOM\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        charsetName = \"UTF-8\";\n    }\n\n    docData = Charset.forName(charsetName).decode(byteData).toString();\n    doc = parser.parseInput(docData, baseUri);\n    Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n    if (meta != null) { // if not found, will keep utf-8 as best attempt\n        String foundCharset = null;\n        if (meta.hasAttr(\"http-equiv\")) {\n            foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n        }\n        if (foundCharset == null && meta.hasAttr(\"charset\")) {\n            try {\n                if (Charset.isSupported(meta.attr(\"charset\"))) {\n                    foundCharset = meta.attr(\"charset\");\n                }\n            } catch (IllegalCharsetNameException e) {\n                foundCharset = null;\n            }\n        }\n\n        if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(charsetName)) { // need to re-decode\n            foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n            charsetName = foundCharset;\n            byteData.rewind();\n            docData = Charset.forName(foundCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n        }\n    }\n\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1);\n        charsetName = \"UTF-8\";\n        doc = parser.parseInput(docData, baseUri);\n    }\n    \n    doc.outputSettings().charset(charsetName);\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}