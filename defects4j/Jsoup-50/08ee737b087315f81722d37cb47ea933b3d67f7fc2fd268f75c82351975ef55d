{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    Charset detectedCharset = null;\n\n    // look for BOM - overrides any other header or input\n    if (byteData.remaining() >= 3) {\n        int bom = byteData.getInt();\n        byteData.rewind();\n        switch (bom) {\n            case 0xFeFF0000:\n                detectedCharset = Charset.forName(\"UTF-32BE\");\n                byteData.order(ByteOrder.BIG_ENDIAN);\n                byteData.position(4);\n                break;\n            case 0x0000FEFF:\n                detectedCharset = Charset.forName(\"UTF-32LE\");\n                byteData.order(ByteOrder.LITTLE_ENDIAN);\n                byteData.position(4);\n                break;\n            case 0xF7644C16:\n                detectedCharset = Charset.forName(\"UTF-7\");\n                break;\n            default:\n                byteData.rewind();\n                if (byteData.remaining() >= 2) {\n                    bom = byteData.getShort() & 0xFFFF;\n                    byteData.rewind();\n                    switch (bom) {\n                        case 0xFEFF:\n                            detectedCharset = Charset.forName(\"UTF-16BE\");\n                            byteData.order(ByteOrder.BIG_ENDIAN);\n                            byteData.position(2);\n                            break;\n                        case 0xFFFE:\n                            detectedCharset = Charset.forName(\"UTF-16LE\");\n                            byteData.order(ByteOrder.LITTLE_ENDIAN);\n                            byteData.position(2);\n                            break;\n                        default:\n                            byteData.rewind();\n                            if (byteData.remaining() >= 1) {\n                                bom = byteData.get() & 0xFF;\n                                byteData.rewind();\n                                if (bom == 0xEF) {\n                                    detectedCharset = Charset.forName(\"UTF-8\");\n                                    byteData.position(3);\n                                }\n                            }\n                            break;\n                    }\n                }\n                break;\n        }\n    }\n\n    if (detectedCharset != null) {\n        charsetName = detectedCharset.name();\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(\"UTF-8\").decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(\"UTF-8\")) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}