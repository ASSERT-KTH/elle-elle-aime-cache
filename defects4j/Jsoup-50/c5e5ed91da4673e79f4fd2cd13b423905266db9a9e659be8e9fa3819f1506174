{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    Charset detectedCharset = null;\n\n    // handle BOM if present\n    if (byteData.get(0) == (byte) 0xEF && byteData.get(1) == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) {\n        // UTF-8 BOM\n        charsetName = \"UTF-8\";\n        detectedCharset = Charset.forName(charsetName);\n        ByteBuffer newBuffer = ByteBuffer.allocate(byteData.remaining() - 3);\n        byteData.position(3);\n        newBuffer.put(byteData);\n        byteData = newBuffer.rewind();\n    } else if (byteData.get(0) == (byte) 0xFE && byteData.get(1) == (byte) 0xFF) {\n        // UTF-16BE BOM\n        charsetName = \"UTF-16BE\";\n        detectedCharset = Charset.forName(charsetName);\n        ByteBuffer newBuffer = ByteBuffer.allocate(byteData.remaining() - 2);\n        byteData.position(2);\n        newBuffer.put(byteData);\n        byteData = newBuffer.rewind();\n    } else if (byteData.get(0) == (byte) 0xFF && byteData.get(1) == (byte) 0xFE) {\n        // UTF-16LE BOM\n        charsetName = \"UTF-16LE\";\n        detectedCharset = Charset.forName(charsetName);\n        ByteBuffer newBuffer = ByteBuffer.allocate(byteData.remaining() - 2);\n        byteData.position(2);\n        newBuffer.put(byteData);\n        byteData = newBuffer.rewind();\n    } else if (byteData.get(0) == (byte) 0x00 && byteData.get(1) == (byte) 0x00 && byteData.get(2) == (byte) 0xFE && byteData.get(3) == (byte) 0xFF) {\n        // UTF-32BE BOM\n        charsetName = \"UTF-32BE\";\n        detectedCharset = Charset.forName(charsetName);\n        ByteBuffer newBuffer = ByteBuffer.allocate(byteData.remaining() - 4);\n        byteData.position(4);\n        newBuffer.put(byteData);\n        byteData = newBuffer.rewind();\n    } else if (byteData.get(0) == (byte) 0xFF && byteData.get(1) == (byte) 0xFE && byteData.get(2) == (byte) 0x00 && byteData.get(3) == (byte) 0x00) {\n        // UTF-32LE BOM\n        charsetName = \"UTF-32LE\";\n        detectedCharset = Charset.forName(charsetName);\n        ByteBuffer newBuffer = ByteBuffer.allocate(byteData.remaining() - 4);\n        byteData.position(4);\n        newBuffer.put(byteData);\n        byteData = newBuffer.rewind();\n    }\n\n    // if charset is null, try to detect from meta\n    if (charsetName == null) {\n        if (detectedCharset == null) { // safe parse as UTF-8 if BOM not detected\n            detectedCharset = Charset.forName(\"UTF-8\");\n        }\n        docData = detectedCharset.decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // ... code to handle charset found in meta tag ...\n        }\n    } else { // specified charset\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        detectedCharset = Charset.forName(charsetName);\n        docData = detectedCharset.decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}