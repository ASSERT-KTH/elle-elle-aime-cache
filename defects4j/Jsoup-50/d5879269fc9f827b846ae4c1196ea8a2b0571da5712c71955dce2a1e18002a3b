{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // look for BOM - overrides any other header or input\n    byte[] arr = new byte[4];\n    byteData.mark();\n    byteData.get(arr, 0, Math.min(byteData.remaining(), 4));\n    String encoding = detectEncodingFromBom(arr);\n\n    if (charsetName == null || encoding != null) {\n        if (encoding != null) {\n            charsetName = encoding;\n        } else {\n            // determine from meta. safe parse as UTF-8\n            charsetName = defaultCharset;\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        byteData.rewind();\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        if (encoding != null) {\n            int bomLength = encodingBomLength(encoding);\n            docData = docData.substring(bomLength);\n        }\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static String detectEncodingFromBom(byte[] bom) {\n    if (bom.length >= 4) {\n        if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) return \"UTF-32BE\";\n        if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) return \"UTF-32LE\";\n    }\n    if (bom.length >= 2) {\n        if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) return \"UTF-16BE\";\n        if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) return \"UTF-16LE\";\n    }\n    if (bom.length >= 1) {\n        if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) return \"UTF-8\";\n    }\n    return null;\n}\n\nprivate static int encodingBomLength(String encoding) {\n    switch (encoding) {\n        case \"UTF-32BE\":\n        case \"UTF-32LE\":\n            return 4;\n        case \"UTF-16BE\":\n        case \"UTF-16LE\":\n            return 2;\n        case \"UTF-8\":\n            return 3;\n        default:\n            return 0;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}