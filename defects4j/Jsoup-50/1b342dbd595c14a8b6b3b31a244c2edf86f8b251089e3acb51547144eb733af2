{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM and determine charset\n    Charset detectedCharset = detectCharsetFromBOM(byteData);\n    if (detectedCharset != null) {\n        charsetName = detectedCharset.name();\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static Charset detectCharsetFromBOM(ByteBuffer byteData) {\n    byteData.mark();\n    Charset charset = null;\n    if (byteData.remaining() >= 3) {\n        if (byteData.get() == (byte) 0xEF && byteData.get() == (byte) 0xBB && byteData.get() == (byte) 0xBF) {\n            charset = Charset.forName(\"UTF-8\");\n        } else {\n            byteData.reset();\n        }\n    }\n    if (charset == null && byteData.remaining() >= 4) {\n        if (byteData.get() == (byte) 0x00 && byteData.get() == (byte) 0x00 && byteData.get() == (byte) 0xFE && byteData.get() == (byte) 0xFF) {\n            charset = Charset.forName(\"UTF-32BE\");\n        } else if (byteData.get() == (byte) 0xFF && byteData.get() == (byte) 0xFE && byteData.get() == (byte) 0x00 && byteData.get() == (byte) 0x00) {\n            charset = Charset.forName(\"UTF-32LE\");\n        } else {\n            byteData.reset();\n        }\n    }\n    if (charset == null && byteData.remaining() >= 2) {\n        if (byteData.get() == (byte) 0xFE && byteData.get() == (byte) 0xFF) {\n            charset = Charset.forName(\"UTF-16BE\");\n        } else if (byteData.get() == (byte) 0xFF && byteData.get() == (byte) 0xFE) {\n            charset = Charset.forName(\"UTF-16LE\");\n        } else {\n            byteData.reset();\n        }\n    }\n    byteData.reset();\n    return charset;\n}\n\nprivate static String getCharsetFromContentType(String contentType) {\n    Pattern charsetPattern = Pattern.compile(\"charset=([\\\"']?)(?<charset>[^\\\"';]+)\\\\1\", Pattern.CASE_INSENSITIVE);\n    Matcher matcher = charsetPattern.matcher(contentType);\n    if (matcher.find()) {\n        return matcher.group(\"charset\").trim();\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}