{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    byte[] bom = new byte[4];\n    byteData.get(bom, 0, Math.min(4, byteData.remaining()));\n    byteData.rewind();\n\n    if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE || bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n        charsetName = bom[0] == (byte) 0xFF ? \"UTF-16BE\" : \"UTF-16LE\";\n    } else if (bom[0] == 0 && bom[1] == 0 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0 && bom[3] == 0) {\n        charsetName = bom[3] == 0 ? \"UTF-32BE\" : \"UTF-32LE\";\n    } else if (charsetName == null) {\n        charsetName = defaultCharset;\n    }\n\n    docData = Charset.forName(charsetName).decode(byteData).toString();\n    doc = parser.parseInput(docData, baseUri);\n    doc.outputSettings().charset(charsetName);\n\n    // Adjusting for BOM length, if needed\n    if ((charsetName.equals(\"UTF-16BE\") || charsetName.equals(\"UTF-16LE\")) && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1);\n    } else if ((charsetName.equals(\"UTF-32BE\") || charsetName.equals(\"UTF-32LE\")) && docData.length() > 0 && docData.substring(0, 1).equals(String.valueOf(UNICODE_BOM))) {\n        docData = docData.substring(2);\n    }\n\n    doc = parser.parseInput(docData, baseUri);\n    doc.outputSettings().charset(charsetName);\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}