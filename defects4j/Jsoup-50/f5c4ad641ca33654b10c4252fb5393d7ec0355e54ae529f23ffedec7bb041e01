{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData = null;\n    Document doc = null;\n\n    // Determine charset from BOM if available\n    Charset bomCharset = getCharsetFromBOM(byteData);\n    if (bomCharset != null) {\n        charsetName = bomCharset.name();\n        byteData.rewind();\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (charsetName == null) {\n        // Determine charset from meta tags\n        docData = Charset.forName(\"UTF-8\").decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.equals(\"UTF-8\")) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // Charset specified by content type header or user\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (docData != null && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        byteData.rewind();\n        docData = Charset.forName(\"UTF-8\").decode(byteData).toString();\n        docData = docData.substring(1);\n        charsetName = \"UTF-8\";\n        doc = null;\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}\n\nprivate static Charset getCharsetFromBOM(ByteBuffer byteData) {\n    byteData.mark();\n    if (byteData.remaining() >= 4) {\n        int bom = byteData.getInt(0);\n        switch (bom) {\n            case 0x0000FEFF:\n                return Charset.forName(\"UTF-32BE\");\n            case 0xFFFE0000:\n                return Charset.forName(\"UTF-32LE\");\n            case 0x0000FFFE:\n                return Charset.forName(\"UTF-16BE\");\n            case 0xFEFF0000:\n                return Charset.forName(\"UTF-16LE\");\n            case 0xEFBBBF:\n                return Charset.forName(\"UTF-8\");\n            default:\n                byteData.reset();\n                return null;\n        }\n    }\n    byteData.reset();\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}