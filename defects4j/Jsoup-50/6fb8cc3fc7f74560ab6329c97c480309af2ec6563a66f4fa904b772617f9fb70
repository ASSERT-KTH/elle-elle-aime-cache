{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    byteData.mark(); // Mark the buffer so we can revert back to this position\n\n    // Check for BOM and adjust charsetName accordingly\n    if (byteData.remaining() >= 2) {\n        byte[] bom = new byte[Math.min(4, byteData.remaining())];\n        byteData.get(bom);\n        byteData.reset(); // Reset back to the original position\n\n        if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n            charsetName = \"UTF-16BE\";\n            byteData.position(2); // Skip BOM\n        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n            if (bom.length > 2 && bom[2] == 0 && bom[3] == 0) {\n                charsetName = \"UTF-32LE\";\n                byteData.position(4); // Skip BOM\n            } else {\n                charsetName = \"UTF-16LE\";\n                byteData.position(2); // Skip BOM\n            }\n        } else if (bom[0] == 0 && bom[1] == 0 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n            charsetName = \"UTF-32BE\";\n            byteData.position(4); // Skip BOM\n        } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n            charsetName = \"UTF-8\";\n            byteData.position(3); // Skip BOM\n        }\n    }\n\n    // Determine charset and decode document data\n    if (charsetName == null) { // If no charset was determined from BOM\n        // Decode as UTF-8 (default charset for HTML5, safe guess)\n        charsetName = \"UTF-8\";\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n\n        // Check HTML meta tags for charset information\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.equals(charsetName)) {\n                charsetName = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                byteData.rewind();\n                docData = Charset.forName(charsetName).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}