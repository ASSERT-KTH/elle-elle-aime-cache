{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) throws UnsupportedEncodingException {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM to determine the character encoding\n    byteData.mark();\n    byte[] bom = new byte[4];\n    byteData.get(bom);\n    byteData.reset();\n\n    String encoding = detectEncodingFromBOM(bom);\n    if (encoding != null) {\n        charsetName = encoding;\n    } else if (charsetName == null) {\n        // Try to detect charset from meta tags\n        docData = new String(byteData.array(), \"UTF-8\");\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = new String(byteData.array(), charsetName);\n                doc = null;\n            }\n        }\n    }\n\n    if (charsetName == null) {\n        charsetName = defaultCharset;\n    }\n\n    docData = new String(byteData.array(), charsetName);\n    doc = parser.parseInput(docData, baseUri);\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}\n\nprivate static String detectEncodingFromBOM(byte[] bom) {\n    if (bom.length >= 4 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) {\n        return \"UTF-32BE\";\n    } else if (bom.length >= 4 && bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n        return \"UTF-32LE\";\n    } else if (bom.length >= 2 && bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n        return \"UTF-16BE\";\n    } else if (bom.length >= 2 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n        return \"UTF-16LE\";\n    } else {\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}