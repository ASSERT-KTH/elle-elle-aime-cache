{
    "generation": "/**\n * Parses the given byte data into a Document, using the provided charset and base URI.\n * If charset is null, attempts to detect it from the HTML meta tags or BOM.\n * \n * @param byteData   the byte data to parse\n * @param charsetName the charset to use, or null to auto-detect\n * @param baseUri    the base URI for the document\n * @param parser     the parser to use for parsing\n * @return the parsed Document\n */\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM to determine charset, overriding any other header or input\n    Charset bomCharset = getCharsetFromBOM(byteData);\n    if (bomCharset!= null) {\n        charsetName = bomCharset.name();\n    } else if (charsetName == null) { // determine from meta, safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta!= null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n    }\n\n    if (doc == null) {\n        if (bomCharset!= null) {\n            docData = bomCharset.decode(byteData).toString();\n        } else {\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\n// Helper method to detect charset from BOM\nprivate static Charset getCharsetFromBOM(ByteBuffer byteData) {\n    byte[] bom = new byte[4];\n    byteData.get(bom);\n    byteData.rewind();\n\n    if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) { // UTF-16BE\n        return Charset.forName(\"UTF-16BE\");\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) { // UTF-16LE\n        return Charset.forName(\"UTF-16LE\");\n    } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) { // UTF-32BE\n        return Charset.forName(\"UTF-32BE\");\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) { // UTF-32LE\n        return Charset.forName(\"UTF-32LE\");\n    } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) { // UTF-8\n        return Charset.forName(\"UTF-8\");\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}