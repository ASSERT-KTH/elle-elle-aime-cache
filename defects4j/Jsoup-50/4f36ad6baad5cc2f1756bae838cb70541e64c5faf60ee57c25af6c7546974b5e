{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // look for BOM - overrides any other header or input\n    byteData.mark(); // Mark the position so we can reset later if needed\n\n    try {\n        byteData.rewind();\n        char[] bomContent = StandardCharsets.UTF_8.decode(byteData).toString().toCharArray();\n\n        if (bomContent.length == 0 || bomContent[0] != UNICODE_BOM) {\n            byteData.reset(); // Reset position if no BOM found\n        } else {\n            charsetName = defaultCharset;\n            docData = String.valueOf(bomContent).substring(1);\n            docData = Charset.forName(charsetName).decode(ByteBuffer.wrap(docData.getBytes())).toString();\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n            return doc;\n        }\n    } catch (CharacterCodingException e) {\n        byteData.reset(); // Reset position if charset decoding exception occurs\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\") && Charset.isSupported(meta.attr(\"charset\"))) {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}