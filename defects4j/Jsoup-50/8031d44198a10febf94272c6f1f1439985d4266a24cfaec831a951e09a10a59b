{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Byte Order Mark (BOM) detection\n    String detectedCharset = Charset.forName(defaultCharset).name();\n    byteData.mark();\n\n    if (byteData.remaining() >= 2) {\n        byte b1 = byteData.get(0);\n        byte b2 = byteData.get(1);\n\n        if ((b1 == (byte) 0xFE && b2 == (byte) 0xFF) || (b1 == (byte) 0xFF && b2 == (byte) 0xFE)) {\n            detectedCharset = (b1 == (byte) 0xFE) ? \"UTF-16BE\" : \"UTF-16LE\";\n        } else if (byteData.remaining() >= 4) {\n            byte b3 = byteData.get(2);\n            byte b4 = byteData.get(3);\n            if (b1 == 0x00 && b2 == 0x00 && b3 == (byte) 0xFE && b4 == (byte) 0xFF) {\n                detectedCharset = \"UTF-32BE\";\n            } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE && b3 == 0x00 && b4 == 0x00) {\n                detectedCharset = \"UTF-32LE\";\n            }\n        }\n    }\n\n    if (charsetName == null) {\n        charsetName = detectedCharset;\n    }\n\n    byteData.rewind(); // reset position to read actual content\n    docData = Charset.forName(charsetName).decode(byteData).toString();\n\n    // Handling BOM for UTF-8\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1); // remove BOM\n    }\n\n    doc = parser.parseInput(docData, baseUri);\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}