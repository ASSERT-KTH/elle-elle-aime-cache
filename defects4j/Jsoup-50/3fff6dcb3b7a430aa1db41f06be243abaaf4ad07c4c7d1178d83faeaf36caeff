{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Look for BOM\n    Charset charset = detectCharset(byteData);\n    if (charset != null) {\n        charsetName = charset.name();\n        docData = charset.decode(byteData).toString();\n    } else if (charsetName == null) {\n        // Determine from meta. Safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // Specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static Charset detectCharset(ByteBuffer byteData) {\n    int firstFourBytes = byteData.getInt(0);\n    byteData.rewind();\n    switch (firstFourBytes) {\n        case 0x0000FEFF:\n            return StandardCharsets.UTF_32BE;\n        case 0xFFFE0000:\n            return StandardCharsets.UTF_32LE;\n        case 0xFEFF:\n            return StandardCharsets.UTF_16BE;\n        case 0xFFFE:\n            return StandardCharsets.UTF_16LE;\n        case 0xEFBBBF:\n            return StandardCharsets.UTF_8;\n        default:\n            return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}