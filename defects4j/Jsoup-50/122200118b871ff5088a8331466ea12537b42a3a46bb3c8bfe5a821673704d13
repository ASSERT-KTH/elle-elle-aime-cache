{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    byteData.rewind(); // Ensure we start from the beginning of the buffer\n\n    // Check for BOM and determine the charset\n    String detectedCharset = detectCharsetFromBOM(byteData);\n    if (detectedCharset != null) {\n        charsetName = detectedCharset;\n    } else if (charsetName == null) {\n        // If no BOM and no charset provided, use a default charset\n        charsetName = \"UTF-8\"; // or any other default you prefer\n    }\n\n    // Decode the byte data using the determined charset\n    docData = Charset.forName(charsetName).decode(byteData).toString();\n\n    // Now parse the document\n    doc = parser.parseInput(docData, baseUri);\n    doc.outputSettings().charset(charsetName);\n\n    return doc;\n}\n\nprivate static String detectCharsetFromBOM(ByteBuffer byteData) {\n    byte[] buffer = new byte[4];\n    byteData.get(buffer, 0, Math.min(byteData.remaining(), buffer.length));\n\n    // Reset the position back to the start\n    byteData.rewind();\n\n    // Check for UTF-8 BOM\n    if (buffer[0] == (byte)0xEF && buffer[1] == (byte)0xBB && buffer[2] == (byte)0xBF) {\n        return \"UTF-8\";\n    }\n    // Check for UTF-16 BE BOM\n    else if (buffer[0] == (byte)0xFE && buffer[1] == (byte)0xFF) {\n        return \"UTF-16BE\";\n    }\n    // Check for UTF-16 LE BOM\n    else if (buffer[0] == (byte)0xFF && buffer[1] == (byte)0xFE) {\n        return \"UTF-16LE\";\n    }\n    // Check for UTF-32 BE BOM\n    else if (buffer[0] == (byte)0x00 && buffer[1] == (byte)0x00 && buffer[2] == (byte)0xFE && buffer[3] == (byte)0xFF) {\n        return \"UTF-32BE\";\n    }\n    // Check for UTF-32 LE BOM\n    else if (buffer[0] == (byte)0xFF && buffer[1] == (byte)0xFE && buffer[2] == (byte)0x00 && buffer[3] == (byte)0x00) {\n        return \"UTF-32LE\";\n    }\n    // No BOM found\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}