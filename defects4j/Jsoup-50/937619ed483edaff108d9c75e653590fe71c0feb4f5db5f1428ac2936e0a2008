{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // Check for BOM first\n    Charset charset = detectCharsetFromBOM(byteData);\n    if (charset == null) {\n        if (charsetName == null) {\n            charset = Charset.forName(defaultCharset);\n        } else {\n            charset = Charset.forName(charsetName);\n        }\n    }\n\n    byteData.rewind();\n    String docData = charset.decode(byteData).toString();\n\n    // Remove BOM if present\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1);\n    }\n\n    Document doc = parser.parseInput(docData, baseUri);\n\n    // Check for <meta> charset\n    Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n    if (meta != null) {\n        String foundCharset = null;\n        if (meta.hasAttr(\"http-equiv\")) {\n            foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n        }\n        if (foundCharset == null && meta.hasAttr(\"charset\")) {\n            try {\n                if (Charset.isSupported(meta.attr(\"charset\"))) {\n                    foundCharset = meta.attr(\"charset\");\n                }\n            } catch (IllegalCharsetNameException e) {\n                foundCharset = null;\n            }\n        }\n\n        if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equalsIgnoreCase(charset.name())) {\n            // Re-decode with the new charset\n            charset = Charset.forName(foundCharset);\n            byteData.rewind();\n            docData = charset.decode(byteData).toString();\n            if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n                docData = docData.substring(1);\n            }\n            doc = parser.parseInput(docData, baseUri);\n        }\n    }\n\n    doc.outputSettings().charset(charset);\n    return doc;\n}\n\nprivate static Charset detectCharsetFromBOM(ByteBuffer byteData) {\n    if (byteData.remaining() < 4) {\n        return null;\n    }\n    int firstFourBytes = byteData.getInt(0);\n    byteData.rewind();\n    switch (firstFourBytes) {\n        case 0x0000FEFF:\n            return StandardCharsets.UTF_32BE;\n        case 0xFFFE0000:\n            return StandardCharsets.UTF_32LE;\n        case 0xFEFF:\n            return StandardCharsets.UTF_16BE;\n        case 0xFFFE:\n            return StandardCharsets.UTF_16LE;\n        case 0xEFBBBF:\n            return StandardCharsets.UTF_8;\n        default:\n            return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}