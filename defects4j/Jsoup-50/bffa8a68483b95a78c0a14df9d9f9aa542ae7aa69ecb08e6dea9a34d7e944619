{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM and set charset accordingly\n    Charset charset = detectCharsetFromBOM(byteData);\n    if (charset != null) {\n        charsetName = charset.name();\n        byteData = removeBOM(byteData);\n    } else if (charsetName == null) {\n        // If no BOM, try to detect charset from meta tags\n        charsetName = defaultCharset;\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.equals(charsetName)) {\n                charsetName = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                byteData.rewind();\n                charset = Charset.forName(charsetName);\n                docData = charset.decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // Use provided charset\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        charset = Charset.forName(charsetName);\n        docData = charset.decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}\n\n// Helper method to detect charset from BOM\nprivate static Charset detectCharsetFromBOM(ByteBuffer buffer) {\n    if (buffer.remaining() < 2) return null;\n\n    int firstByte = buffer.get(0) & 0xFF;\n    int secondByte = buffer.get(1) & 0xFF;\n\n    if (firstByte == 0xFE && secondByte == 0xFF) {\n        return Charset.forName(\"UTF-16BE\");\n    } else if (firstByte == 0xFF && secondByte == 0xFE) {\n        if (buffer.remaining() < 4) return null;\n        int thirdByte = buffer.get(2) & 0xFF;\n        int fourthByte = buffer.get(3) & 0xFF;\n        if (thirdByte == 0 && fourthByte == 0) {\n            return Charset.forName(\"UTF-32LE\");\n        } else {\n            return Charset.forName(\"UTF-16LE\");\n        }\n    } else if (firstByte == 0xEF && secondByte == 0xBB) {\n        if (buffer.remaining() < 3) return null;\n        int thirdByte = buffer.get(2) & 0xFF;\n        if (thirdByte == 0xBF) {\n            return Charset.forName(\"UTF-8\");\n        }\n    } else if (firstByte == 0 && secondByte == 0) {\n        if (buffer.remaining() < 4) return null;\n        int thirdByte = buffer.get(2) & 0xFF;\n        int fourthByte = buffer.get(3) & 0xFF;\n        if (thirdByte == 0xFE && fourthByte == 0xFF) {\n            return Charset.forName(\"UTF-32BE\");\n        }\n    }\n\n    return null;\n}\n\n// Helper method to remove BOM from ByteBuffer\nprivate static ByteBuffer removeBOM(ByteBuffer buffer) {\n    if (buffer.remaining() < 2) return buffer;\n\n    int firstByte = buffer.get(0) & 0xFF;\n    int secondByte = buffer.get(1) & 0xFF;\n\n    if (firstByte == 0xFE && secondByte == 0xFF) {\n        return buffer.slice(2, buffer.remaining() - 2);\n    } else if (firstByte == 0xFF && secondByte == 0xFE) {\n        if (buffer.remaining() < 4) return buffer.slice(2, buffer.remaining() - 2);\n        int thirdByte = buffer.get(2) & 0xFF;\n        int fourthByte = buffer.get(3) & 0xFF;\n        if (thirdByte == 0 && fourthByte == 0) {\n            return buffer.slice(4, buffer.remaining() - 4);\n        } else {\n            return buffer.slice(2, buffer.remaining() - 2);\n        }\n    } else if (firstByte == 0xEF && secondByte == 0xBB) {\n        if (buffer.remaining() < 3) return buffer;\n        int thirdByte = buffer.get(2) & 0xFF;\n        if (thirdByte == 0xBF) {\n            return buffer.slice(3, buffer.remaining() - 3);\n        }\n    } else if (firstByte == 0 && secondByte == 0) {\n        if (buffer.remaining() < 4) return buffer;\n        int thirdByte = buffer.get(2) & 0xFF;\n        int fourthByte = buffer.get(3) & 0xFF;\n        if (thirdByte == 0xFE && fourthByte == 0xFF) {\n            return buffer.slice(4, buffer.remaining() - 4);\n        }\n    }\n\n    return buffer;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}