{
    "generation": "/**\n * Parses the provided byte data into a Document, using the specified charset and base URI.\n * If charset is null, attempts to detect from HTML meta tags or BOM.\n * \n * @param byteData    the byte data to parse\n * @param charsetName the charset to use for parsing (or null to auto-detect)\n * @param baseUri     the base URI for the document\n * @param parser      the parser to use for HTML parsing\n * @return the parsed Document\n */\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Look for BOM - overrides any other header or input\n    byte[] bom = new byte[4];\n    byteData.get(bom, 0, Math.min(bom.length, byteData.remaining()));\n\n    String detectedCharset = getCharsetFromBOM(bom);\n    if (detectedCharset!= null) {\n        byteData.rewind(); // rewind to beginning for correct parsing\n        charsetName = detectedCharset;\n    } else if (charsetName == null) { // determine from meta, safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta!= null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n    }\n\n    if (doc == null) {\n        if (detectedCharset!= null) {\n            docData = Charset.forName(detectedCharset).decode(byteData).toString();\n        } else {\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n        // Remove BOM if present\n        if (docData.length() > 0 && docData.codePointAt(0) == UNICODE_BOM) {\n            docData = docData.substring(1);\n        }\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\n// Helper method to detect charset from BOM\nprivate static String getCharsetFromBOM(byte[] bom) {\n    if (bom.length < 3) return null;\n    if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) return \"UTF-8\";\n    if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) return \"UTF-16BE\";\n    if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) return \"UTF-16LE\";\n    if (bom.length > 3 && bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) return \"UTF-32BE\";\n    if (bom.length > 3 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) return \"UTF-32LE\";\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}