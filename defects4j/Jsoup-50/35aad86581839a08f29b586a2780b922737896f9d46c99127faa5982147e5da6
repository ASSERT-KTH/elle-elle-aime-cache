{
    "generation": "    // todo - this is getting gnarly. needs a rewrite.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // look for BOM - overrides any other header or input\n\n        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else { // specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        if (docData.length() > 0 && startsWithBOM(docData)) {\n            byteData.rewind();\n            String bomCharset = detectBOM(byteData);\n            if (bomCharset != null) {\n                charsetName = bomCharset;\n                docData = Charset.forName(bomCharset).decode(byteData).toString();\n            } else {\n                docData = Charset.forName(defaultCharset).decode(byteData).toString();\n                docData = docData.substring(1);\n                charsetName = defaultCharset;\n            }\n            doc = null;\n        }\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }\n\n    private static boolean startsWithBOM(String text) {\n        for (String bom : BOMs) {\n            if (text.startsWith(bom)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static String detectBOM(ByteBuffer byteData) {\n        byte[] bytes = new byte[byteData.remaining()];\n        byteData.get(bytes);\n\n        if (startsWith(bytes, UTF_16BE_BOM)) {\n            return \"UTF-16BE\";\n        } else if (startsWith(bytes, UTF_16LE_BOM)) {\n            return \"UTF-16LE\";\n        } else if (startsWith(bytes, UTF_32BE_BOM)) {\n            return \"UTF-32BE\";\n        } else if (startsWith(bytes, UTF_32LE_BOM)) {\n            return \"UTF-32LE\";\n        }\n\n        return null;\n    }\n\n    private static boolean startsWith(byte[] data, byte[] prefix) {\n        if (data.length < prefix.length) {\n            return false;\n        }\n        for (int i = 0; i < prefix.length; i++) {\n            if (data[i] != prefix[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static final String[] BOMs = {\n        \"\\uFEFF\",  // UTF-16BE BOM\n        \"\\uFFFE\",  // UTF-16LE BOM\n        \"\\u0000\\u0000\\uFEFF\",  // UTF-32BE BOM\n        \"\\uFFFE\\u0000\\u0000\"  // UTF-32LE BOM\n    };\n\n    private static final byte[] UTF_16BE_BOM = {(byte) 0xFE, (byte) 0xFF};\n    private static final byte[] UTF_16LE_BOM = {(byte) 0xFF, (byte) 0xFE};\n    private static final byte[] UTF_32BE_BOM = {(byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0xFF};\n    private static final byte[] UTF_32LE_BOM = {(byte) 0xFF, (byte) 0xFE, (byte) 0x00, (byte) 0x00};",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}