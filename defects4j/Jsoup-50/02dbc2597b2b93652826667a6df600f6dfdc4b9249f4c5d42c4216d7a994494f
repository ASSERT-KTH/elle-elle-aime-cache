{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Detect BOM (Byte Order Mark)\n    byteData.mark();\n    byte[] bom = new byte[4];\n    if (byteData.remaining() >= 4) {\n        byteData.get(bom, 0, 4);\n        byteData.rewind();\n    } else if (byteData.remaining() >= 2) {\n        byteData.get(bom, 0, 2);\n        byteData.rewind();\n    }\n\n    String detectedCharset = null;\n    if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n        detectedCharset = \"UTF-8\";\n        byteData.position(3); // Skip BOM\n    } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n        detectedCharset = \"UTF-16BE\";\n        byteData.position(2); // Skip BOM\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n        detectedCharset = \"UTF-16LE\";\n        byteData.position(2); // Skip BOM\n    } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n        detectedCharset = \"UTF-32BE\";\n        byteData.position(4); // Skip BOM\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n        detectedCharset = \"UTF-32LE\";\n        byteData.position(4); // Skip BOM\n    } else {\n        byteData.rewind(); // No BOM detected, rewind to start\n    }\n\n    if (charsetName == null) {\n        if (detectedCharset != null) {\n            charsetName = detectedCharset; // Use BOM-detected charset if available\n        } else {\n            // Fallback to detecting via meta tags after decoding with default charset\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            byteData.rewind();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    foundCharset = meta.attr(\"charset\");\n                }\n\n                if (foundCharset != null && Charset.isSupported(foundCharset)) {\n                    charsetName = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                }\n            }\n        }\n    }\n\n    if (charsetName == null) {\n        charsetName = defaultCharset; // Fallback to default charset\n    }\n\n    docData = Charset.forName(charsetName).decode(byteData).toString();\n    byteData.rewind();\n\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1); // Remove BOM\n    }\n\n    doc = parser.parseInput(docData, baseUri);\n    doc.outputSettings().charset(charsetName);\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}