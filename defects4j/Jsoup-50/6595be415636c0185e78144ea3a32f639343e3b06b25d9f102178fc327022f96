{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData = null;\n    Document doc = null;\n\n    byte[] bom = checkBom(byteData, charsetName);\n\n    if (bom != null) {\n        byteData.position(bom.length);\n        docData = new String(bom, getCharsetForBom(bom));\n    } else if (charsetName == null) {\n        // If charsetName is null, determine charset from meta\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else if (meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\").trim().replaceAll(\"[\\\"']\", \"\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && !foundCharset.equals(defaultCharset)) {\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        if (charsetName == null) {\n            charsetName = defaultCharset;\n        }\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static byte[] checkBom(ByteBuffer byteData, String charsetName) {\n    if (byteData.remaining() >= 4) {\n        byte[] bom = new byte[4];\n        byteData.mark();\n        byteData.get(bom);\n        byteData.reset();\n\n        if (Arrays.equals(bom, UTF_32LE_BOM)) { // UTF-32LE BOM\n            return Arrays.copyOfRange(bom, 0, 4);\n        } else if (Arrays.equals(Arrays.copyOfRange(bom, 0, 2), UTF_16LE_BOM)) { // UTF-16LE BOM\n            return Arrays.copyOfRange(bom, 0, 2);\n        } else if (Arrays.equals(Arrays.copyOfRange(bom, 0, 3), UTF_8_BOM)) { // UTF-8 BOM\n            return Arrays.copyOfRange(bom, 0, 3);\n        } else if (Arrays.equals(new byte[] { bom[3], bom[2], bom[1], bom[0] }, UTF_32BE_BOM)) { // UTF-32BE BOM\n            return new byte[] { bom[3], bom[2], bom[1], bom[0] };\n        } else if (Arrays.equals(new byte[] { bom[1], bom[0] }, UTF_16BE_BOM)) { // UTF-16BE BOM\n            return new byte[] { bom[1], bom[0] };\n        }\n    }\n    return null;\n}\n\nprivate static Charset getCharsetForBom(byte[] bom) {\n    if (bom.length == 4 && Arrays.equals(bom, UTF_32LE_BOM)) {\n        return Charset.forName(\"UTF-32LE\");\n    } else if (bom.length == 2 && Arrays.equals(bom, UTF_16LE_BOM)) {\n        return Charset.forName(\"UTF-16LE\");\n    } else if (bom.length == 3 && Arrays.equals(bom, UTF_8_BOM)) {\n        return Charset.forName(\"UTF-8\");\n    } else if (bom.length == 4 && Arrays.equals(bom, UTF_32BE_BOM)) {\n        return Charset.forName(\"UTF-32BE\");\n    } else if (bom.length == 2 && Arrays.equals(bom, UTF_16BE_BOM)) {\n        return Charset.forName(\"UTF-16BE\");\n    }\n    return Charset.forName(\"UTF-8\");\n}\n\nprivate static final char UNICODE_BOM = '\\uFEFF';\nprivate static final byte[] UTF_32LE_BOM = new byte[] { (byte) 0xFF, (byte) 0xFE, 0x00, 0x00 };\nprivate static final byte[] UTF_16LE_BOM = new byte[] { (byte) 0xFF, (byte) 0xFE, 0x00 };\nprivate static final byte[] UTF_8_BOM = new byte[] { (byte) 0xEF, (byte) 0xBB, (byte) 0xBF };\nprivate static final byte[] UTF_32BE_BOM = new byte[] { 0x00, 0x00, (byte) 0xFE, (byte) 0xFF };\nprivate static final byte[] UTF_16BE_BOM = new byte[] { (byte) 0xFE, (byte) 0xFF, 0x00 };\nprivate static final String defaultCharset = \"UTF-8\";",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}