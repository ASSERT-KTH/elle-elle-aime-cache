{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Look for BOM - overrides any other header or input\n    if (byteData.limit() >= 3) {\n        byte[] bom = new byte[3];\n        byteData.get(bom);\n        byteData.rewind();\n\n        if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n            // UTF-8 BOM\n            charsetName = \"UTF-8\";\n            byteData.position(3); // Skip BOM\n        } else if (byteData.limit() >= 4) {\n            bom = new byte[4];\n            byteData.get(bom);\n            byteData.rewind();\n\n            if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n                // UTF-32BE BOM\n                charsetName = \"UTF-32BE\";\n                byteData.position(4); // Skip BOM\n            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n                // UTF-32LE BOM\n                charsetName = \"UTF-32LE\";\n                byteData.position(4); // Skip BOM\n            }\n        }\n\n        if (byteData.limit() >= 2) {\n            bom = new byte[2];\n            byteData.get(bom);\n            byteData.rewind();\n\n            if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n                // UTF-16BE BOM\n                charsetName = \"UTF-16BE\";\n                byteData.position(2); // Skip BOM\n            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n                // UTF-16LE BOM\n                charsetName = \"UTF-16LE\";\n                byteData.position(2); // Skip BOM\n            }\n        }\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(\"UTF-8\").decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(\"UTF-8\")) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}