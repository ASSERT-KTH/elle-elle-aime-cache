{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM\n    Charset charset = detectCharsetFromBOM(byteData);\n    if (charset != null) {\n        charsetName = charset.name();\n        byteData.position(charset == StandardCharsets.UTF_8 ? 3 : 2);\n    }\n\n    if (charsetName == null) {\n        // Determine from meta. Safe parse as UTF-8\n        docData = StandardCharsets.UTF_8.decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(StandardCharsets.UTF_8.name())) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static Charset detectCharsetFromBOM(ByteBuffer byteData) {\n    if (byteData.remaining() >= 4) {\n        int b1 = byteData.get(0) & 0xFF;\n        int b2 = byteData.get(1) & 0xFF;\n        int b3 = byteData.get(2) & 0xFF;\n        int b4 = byteData.get(3) & 0xFF;\n\n        if (b1 == 0xFE && b2 == 0xFF) return StandardCharsets.UTF_16BE;\n        if (b1 == 0xFF && b2 == 0xFE) {\n            if (b3 == 0x00 && b4 == 0x00) return Charset.forName(\"UTF-32LE\");\n            return StandardCharsets.UTF_16LE;\n        }\n        if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) return StandardCharsets.UTF_8;\n        if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) return Charset.forName(\"UTF-32BE\");\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}