{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM - overrides any other header or input\n    byteData.rewind();\n    if (byteData.remaining() >= 4) {\n        int first3Bytes = byteData.get() & 0xFF |\n                           (byteData.get() & 0xFF) << 8 |\n                           (byteData.get() & 0xFF) << 16;\n        byteData.rewind();\n\n        if (first3Bytes == 0xEFBBBF) { // UTF-8 BOM\n            charsetName = \"UTF-8\";\n            byteData.position(3);\n        } else if (first3Bytes == 0xFFFEFEFF) { // UTF-32 BE\n            charsetName = \"UTF-32BE\";\n            byteData.position(4);\n        } else if (first3Bytes == 0xFFFEFEFF) { // UTF-32 LE\n            charsetName = \"UTF-32LE\";\n            byteData.position(4);\n        } else {\n            byteData.rewind();\n            if (charsetName == null) {\n                docData = Charset.forName(defaultCharset).decode(byteData).toString();\n                doc = parser.parseInput(docData, baseUri);\n                Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n                if (meta != null) {\n                    String foundCharset = null;\n                    if (meta.hasAttr(\"http-equiv\")) {\n                        foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                    }\n                    if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                        try {\n                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n                                foundCharset = meta.attr(\"charset\");\n                            }\n                        } catch (IllegalCharsetNameException e) {\n                            foundCharset = null;\n                        }\n                    }\n                    if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {\n                        foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                        charsetName = foundCharset;\n                        byteData.rewind();\n                        docData = Charset.forName(foundCharset).decode(byteData).toString();\n                        doc = null;\n                    }\n                }\n            } else {\n                Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n                docData = Charset.forName(charsetName).decode(byteData).toString();\n            }\n        }\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}