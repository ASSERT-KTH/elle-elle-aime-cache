{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM and determine charset\n    Charset charset = detectCharset(byteData, charsetName);\n\n    // Decode the data using the detected or specified charset\n    byteData.rewind();\n    docData = charset.decode(byteData).toString();\n\n    // Remove BOM if present\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1);\n    }\n\n    // Parse the document\n    doc = parser.parseInput(docData, baseUri);\n    doc.outputSettings().charset(charset.name());\n\n    return doc;\n}\n\nprivate static Charset detectCharset(ByteBuffer byteData, String charsetName) {\n    if (charsetName != null) {\n        return Charset.forName(charsetName);\n    }\n\n    // Check for BOM\n    byteData.mark();\n    byte[] bom = new byte[4];\n    if (byteData.remaining() >= 4) {\n        byteData.get(bom);\n    }\n    byteData.reset();\n\n    if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n        return StandardCharsets.UTF_8;\n    } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n        return StandardCharsets.UTF_16BE;\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n        return StandardCharsets.UTF_16LE;\n    } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n        return Charset.forName(\"UTF-32BE\");\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n        return Charset.forName(\"UTF-32LE\");\n    }\n\n    // If no BOM is detected, use the default charset (UTF-8)\n    return StandardCharsets.UTF_8;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}