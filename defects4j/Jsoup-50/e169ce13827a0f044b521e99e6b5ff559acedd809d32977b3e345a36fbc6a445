{
    "generation": "/**\n * Parses Byte Data into a Document, detecting or using the provided charset.\n * \n * @param byteData   The byte data to parse.\n * @param charsetName The character set to use. If null, attempts to detect from HTML.\n * @param baseUri    The base URI for the document.\n * @param parser     The parser to use.\n * @return The parsed Document.\n */\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM and determine charset accordingly\n    if (byteData.remaining() >= 4) { // minimum BOM length (UTF-32)\n        byte[] bomBytes = new byte[4];\n        byteData.mark(); // mark current position to rewind later\n        byteData.get(bomBytes, 0, Math.min(4, byteData.remaining()));\n\n        // Known BOMs (in order of length to avoid false positives)\n        byte[][] knownBoms = {\n            { (byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0xFF }, // UTF-32BE\n            { (byte) 0xFF, (byte) 0xFE, (byte) 0x00, (byte) 0x00 }, // UTF-32LE\n            { (byte) 0xFE, (byte) 0xFF }, // UTF-16BE\n            { (byte) 0xFF, (byte) 0xFE }, // UTF-16LE\n            { (byte) 0xEF, (byte) 0xBB, (byte) 0xBF } // UTF-8\n        };\n        String[] bomCharsets = { \"UTF-32BE\", \"UTF-32LE\", \"UTF-16BE\", \"UTF-16LE\", \"UTF-8\" };\n\n        for (int i = 0; i < knownBoms.length; i++) {\n            if (startsWith(bomBytes, knownBoms[i])) {\n                charsetName = bomCharsets[i];\n                byteData.position(byteData.position() + knownBoms[i].length); // skip BOM\n                break;\n            }\n        }\n        byteData.reset(); // rewind to original position\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta!= null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\n// Helper method to check if byte array starts with another\nprivate static boolean startsWith(byte[] bytes, byte[] prefix) {\n    if (bytes.length < prefix.length) return false;\n    for (int i = 0; i < prefix.length; i++) {\n        if (bytes[i]!= prefix[i]) return false;\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}