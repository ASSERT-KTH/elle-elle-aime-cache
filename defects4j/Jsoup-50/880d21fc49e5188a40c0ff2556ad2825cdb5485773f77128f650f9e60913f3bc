{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // Check for BOM first\n    String bomCharset = detectCharsetFromBOM(byteData);\n    if (bomCharset != null) {\n        charsetName = bomCharset;\n    }\n\n    if (charsetName == null) {\n        // If charset is not specified, try to detect from meta tags\n        String docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        Document doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                charsetName = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n            } else {\n                charsetName = defaultCharset;\n            }\n        } else {\n            charsetName = defaultCharset;\n        }\n    }\n\n    // Decode the data with the determined charset\n    byteData.rewind();\n    String docData = Charset.forName(charsetName).decode(byteData).toString();\n    Document doc = parser.parseInput(docData, baseUri);\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}\n\nprivate static String detectCharsetFromBOM(ByteBuffer byteData) {\n    if (byteData.remaining() >= 4) {\n        int b1 = byteData.get(0) & 0xFF;\n        int b2 = byteData.get(1) & 0xFF;\n        int b3 = byteData.get(2) & 0xFF;\n        int b4 = byteData.get(3) & 0xFF;\n\n        if (b1 == 0xFE && b2 == 0xFF) return \"UTF-16BE\";\n        if (b1 == 0xFF && b2 == 0xFE) {\n            if (b3 == 0x00 && b4 == 0x00) return \"UTF-32LE\";\n            return \"UTF-16LE\";\n        }\n        if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) return \"UTF-32BE\";\n        if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) return \"UTF-8\";\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}