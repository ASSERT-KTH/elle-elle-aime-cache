{
    "generation": "import java.nio.ByteOrder;\n\n// Revised parseByteData function\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    byte[] bom = new byte[4];\n    int bomLength = 0;\n\n    // Check Byte Order Mark (BOM)\n    if (byteData.remaining() >= 4) {\n        byteData.mark();\n        for (int i = 0; i < 4; i++) {\n            bom[i] = byteData.get();\n        }\n        byteData.reset();\n    }\n\n    if ((bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) || // UTF-16BE\n        (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) || // UTF-16LE\n        (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) || // UTF-32BE\n        (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00)) { // UTF-32LE\n        byteData.order(ByteOrder.BIG_ENDIAN); // or LITTLE_ENDIAN based on BOM\n        if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n            charsetName = \"UTF-16BE\";\n            bomLength = 2;\n        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n            charsetName = \"UTF-16LE\";\n            bomLength = 2;\n        } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n            charsetName = \"UTF-32BE\";\n            bomLength = 4;\n        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n            charsetName = \"UTF-32LE\";\n            bomLength = 4;\n        }\n    } else if (charsetName == null) { \n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { \n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { \n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        byteData.position(bomLength);\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        docData = docData.substring(1);\n        charsetName = defaultCharset;\n        doc = null;\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}