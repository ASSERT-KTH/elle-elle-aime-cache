{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Detect and handle BOM\n    Charset detectedCharset = detectBOM(byteData);\n    if (detectedCharset != null) {\n        charsetName = detectedCharset.name();\n    } else if (charsetName == null) {\n        // If no BOM and charsetName is null, try to determine from meta\n        charsetName = defaultCharset;\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.trim().isEmpty() && !foundCharset.equalsIgnoreCase(charsetName)) {\n                charsetName = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                byteData.rewind();\n                docData = Charset.forName(charsetName).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // Charset specified by content type header or by user\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n    }\n\n    // Decode using the determined charset\n    byteData.rewind();\n    docData = Charset.forName(charsetName).decode(byteData).toString();\n\n    // Handle BOM character if present\n    if (!docData.isEmpty() && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1);\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}\n\n// Helper method to detect BOM\nprivate static Charset detectBOM(ByteBuffer byteData) {\n    byteData.mark();\n    try {\n        if (byteData.remaining() >= 2) {\n            int firstByte = byteData.get() & 0xFF;\n            int secondByte = byteData.get() & 0xFF;\n            byteData.rewind();\n\n            if (firstByte == 0xFE && secondByte == 0xFF) {\n                return Charset.forName(\"UTF-16BE\");\n            } else if (firstByte == 0xFF && secondByte == 0xFE) {\n                if (byteData.remaining() >= 4 && byteData.get(2) == 0 && byteData.get(3) == 0) {\n                    return Charset.forName(\"UTF-32LE\");\n                }\n                return Charset.forName(\"UTF-16LE\");\n            } else if (firstByte == 0xEF && secondByte == 0xBB) {\n                if (byteData.remaining() >= 3 && byteData.get(2) == 0xBF) {\n                    return Charset.forName(\"UTF-8\");\n                }\n            }\n        }\n\n        if (byteData.remaining() >= 4) {\n            int firstByte = byteData.get() & 0xFF;\n            int secondByte = byteData.get() & 0xFF;\n            int thirdByte = byteData.get() & 0xFF;\n            int fourthByte = byteData.get() & 0xFF;\n            byteData.rewind();\n\n            if (firstByte == 0 && secondByte == 0 && thirdByte == 0xFE && fourthByte == 0xFF) {\n                return Charset.forName(\"UTF-32BE\");\n            }\n        }\n    } finally {\n        byteData.reset();\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}