{
    "generation": "// determine the charset of a Buffer of HTML, based on its BOM (which overrides any other value).\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    if (!byteData.hasArray())\n        byteData = byteData.get(byteData.remaining());\n    byte[] byteDataArray = byteData.array();\n\n    // look for a BOM\n    charsetName = detectBOMCharset(byteDataArray);\n\n    // if no BOM\n    if (charsetName == null) {\n        if (byteData.hasRemaining()) {\n            return parseByteData(byteData, defaultCharset, baseUri, parser);\n        }\n    }\n\n    // get / verify the charset (should only be null here because no BOM present (no override)\n    else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n\n    }\n    String docData = Charset.forName(charsetName).decode(byteData).toString();\n\n    Document doc = null;\n    if (!dataContainsBOM && parser instanceof XmlParser && XmlParser.hasDeclaration(docData)) {\n        int skipTo = docData.indexOf('>') + 1;\n        String data = skipTo < docData.length()? docData.substring(skipTo) : \"\";\n\n        if (data.charAt(skipTo) == '?')\n            skipTo += findCharAfter(docData.indexOf(\"?>\"), '<'); // <?xml 3 chars\n\n        else data = docData;\n\n    } else {\n        Document d = parser.parseInput(docData, baseUri);\n        Element metaEl = d.selectFirst(\"[http-equiv=Content-Type]\");\n        if (metaEl!= null) charsetName = getCharsetFromAttr(metaEl.attr(\"http-equiv\"));\n        else charsetName = getCharsetFromTag(parser.parseInput(dataToString(byteDataArray, standardCharsetName), \"\").tagName());\n\n    }\n    document.charset(charsetName);\n\n    if (doc!= null)\n        return document.html();\n    else if ((document = parser.parse(new String(byteDataArray), StandardCharsets.UTF_16.charset())))\n        return (d.html());\n    if (((Document) (parseBytesArray(byteData, true))!= null))\n        this.outputSettings().setConvertEntities(true);\n    }\n\n    return document.parseDoc(data, baseUri)\n}\n\nprivate static int  findCharAfter(Iterator i, char skipper){\n    int locater;\n    while(iterator1.hasNext()){\n        ch checker=i.next();\n        try {\n            if (!(int checker==skipper)){\n            };\n            return locater=int checker;\n        };\n     }catch (Exception e){}\n           }\n\nprivate static char name(int locater)\n}\n\nstatic String getStandardCname(String name)\n\nfinal char[] chararray()\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}