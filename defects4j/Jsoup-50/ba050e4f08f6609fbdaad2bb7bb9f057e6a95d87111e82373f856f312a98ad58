{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    String detectedCharset = charsetName;\n\n    // Check for BOM and set detectedCharset accordingly\n    if (byteData.remaining() >= 2) {\n        byteData.mark();\n        int first = byteData.get() & 0xFF;\n        int second = byteData.get() & 0xFF;\n        // Reset the position to read all data including BOM\n        byteData.reset();\n\n        if (first == 0xEF && second == 0xBB && byteData.remaining() >= 3 && (byteData.get(byteData.position() + 2) & 0xFF) == 0xBF) {\n            detectedCharset = \"UTF-8\"; // UTF-8 BOM\n        } else if (first == 0xFE && second == 0xFF) {\n            detectedCharset = \"UTF-16BE\"; // UTF-16 Big Endian BOM\n        } else if (first == 0xFF && second == 0xFE) {\n            detectedCharset = \"UTF-16LE\"; // UTF-16 Little Endian BOM\n        } else if (byteData.remaining() >= 4) {\n            int third = byteData.get() & 0xFF;\n            int fourth = byteData.get() & 0xFF;\n            byteData.reset();\n            if (first == 0x00 && second == 0x00 && third == 0xFE && fourth == 0xFF) {\n                detectedCharset = \"UTF-32BE\"; // UTF-32 Big Endian BOM\n            } else if (first == 0xFF && second == 0xFE && third == 0x00 && fourth == 0x00) {\n                detectedCharset = \"UTF-32LE\"; // UTF-32 Little Endian BOM\n            }\n        }\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        detectedCharset = detectedCharset != null ? detectedCharset : defaultCharset;\n        docData = Charset.forName(detectedCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && !foundCharset.equalsIgnoreCase(detectedCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                detectedCharset = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        detectedCharset = charsetName;\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n            docData = docData.substring(1);\n        }\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(detectedCharset);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}