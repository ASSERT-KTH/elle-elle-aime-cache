{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // Check for BOM and determine charset\n        if (byteData.remaining() >= 3) {\n            byte[] bom = new byte[4]; // BOM might be up to 4 bytes\n            byteData.mark();\n            byteData.get(bom, 0, Math.min(byteData.remaining(), bom.length));\n            byteData.rewind();\n            \n            // BOM detection\n            if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n                charsetName = \"UTF-8\"; // UTF-8 BOM\n                byteData.position(3); // Skip BOM\n            } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n                charsetName = \"UTF-16BE\"; // UTF-16BE BOM\n                byteData.position(2); // Skip BOM\n            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n                if (bom[2] == 0x00 && bom[3] == 0x00) {\n                    charsetName = \"UTF-32LE\"; // UTF-32LE BOM\n                    byteData.position(4); // Skip BOM\n                } else {\n                    charsetName = \"UTF-16LE\"; // UTF-16LE BOM\n                    byteData.position(2); // Skip BOM\n                }\n            } else if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n                charsetName = \"UTF-32BE\"; // UTF-32BE BOM\n                byteData.position(4); // Skip BOM\n            }\n        }\n\n        // Determine charset from meta if not provided already\n        if (charsetName == null) {\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else {\n            Validate.notEmpty(charsetName,\n                    \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        // Final check for BOM and re-decode\n        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n            byteData.rewind();\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            docData = docData.substring(1);\n            charsetName = defaultCharset;\n            doc = null;\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName); // Update document charset setting\n        }\n\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}