{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM (Byte Order Mark) to determine character encoding\n    byteData.mark();\n    if (byteData.remaining() >= 3) {\n        byte[] bom = new byte[3];\n        byteData.get(bom);\n        byteData.reset();\n\n        if ((bom[0] & 0xFF) == 0xEF && (bom[1] & 0xFF) == 0xBB && (bom[2] & 0xFF) == 0xBF) {\n            charsetName = \"UTF-8\";\n            byteData.position(3); // Skip BOM\n        } else if (byteData.remaining() >= 4) {\n            byte[] bom4 = new byte[4];\n            byteData.get(bom4);\n            byteData.reset();\n\n            if ((bom4[0] & 0xFF) == 0x00 && (bom4[1] & 0xFF) == 0x00 && (bom4[2] & 0xFF) == 0xFE && (bom4[3] & 0xFF) == 0xFF) {\n                charsetName = \"UTF-32BE\";\n                byteData.position(4); // Skip BOM\n            } else if ((bom4[0] & 0xFF) == 0xFF && (bom4[1] & 0xFF) == 0xFE && (bom4[2] & 0xFF) == 0x00 && (bom4[3] & 0xFF) == 0x00) {\n                charsetName = \"UTF-32LE\";\n                byteData.position(4); // Skip BOM\n            } else if ((bom4[0] & 0xFF) == 0xFE && (bom4[1] & 0xFF) == 0xFF) {\n                charsetName = \"UTF-16BE\";\n                byteData.position(2); // Skip BOM\n            } else if ((bom4[0] & 0xFF) == 0xFF && (bom4[1] & 0xFF) == 0xFE) {\n                charsetName = \"UTF-16LE\";\n                byteData.position(2); // Skip BOM\n            }\n        }\n    }\n\n    if (charsetName == null) { // Determine from meta tag; default to UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // If not found, will keep UTF-8 as the default\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // Re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // Use specified charsetName\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        byteData.rewind();\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}