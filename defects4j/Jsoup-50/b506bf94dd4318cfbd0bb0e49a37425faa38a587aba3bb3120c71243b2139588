{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM and handle different encodings\n    byte[] bom = new byte[4];\n    byteData.mark();\n    byteData.get(bom, 0, Math.min(byteData.remaining(), bom.length));\n    byteData.rewind();\n\n    if (isUTF32BE(bom)) {\n        charsetName = \"UTF-32BE\";\n    } else if (isUTF32LE(bom)) {\n        charsetName = \"UTF-32LE\";\n    } else if (isUTF16BE(bom)) {\n        charsetName = \"UTF-16BE\";\n    } else if (isUTF16LE(bom)) {\n        charsetName = \"UTF-16LE\";\n    } else if (isUTF8(bom)) {\n        charsetName = \"UTF-8\";\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        charsetName = \"UTF-8\";\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(charsetName)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        byteData.rewind();\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}\n\n// Helper methods to detect BOMs\nprivate static boolean isUTF8(byte[] bom) {\n    return bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF;\n}\n\nprivate static boolean isUTF16BE(byte[] bom) {\n    return bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF;\n}\n\nprivate static boolean isUTF16LE(byte[] bom) {\n    return bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE;\n}\n\nprivate static boolean isUTF32BE(byte[] bom) {\n    return bom[0] == 0 && bom[1] == 0 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF;\n}\n\nprivate static boolean isUTF32LE(byte[] bom) {\n    return bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0 && bom[3] == 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}