{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // Check for BOM (Byte Order Mark) and determine charset if necessary\n        if (byteData.remaining() >= 2) {\n            byte[] bom = new byte[4];\n            for (int i = 0; i < Math.min(byteData.remaining(), 4); i++) {\n                bom[i] = byteData.get(i);\n            }\n\n            if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n                charsetName = \"UTF-16BE\";\n                byteData.position(2); // Skip BOM\n            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n                charsetName = \"UTF-16LE\";\n                byteData.position(2); // Skip BOM\n            } else if (byteData.remaining() >= 4 && bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n                charsetName = \"UTF-32BE\";\n                byteData.position(4); // Skip BOM\n            } else if (byteData.remaining() >= 4 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n                charsetName = \"UTF-32LE\";\n                byteData.position(4); // Skip BOM\n            }\n        }\n\n        if (charsetName == null) { // determine charset from meta; assume UTF-8 initially\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // re-decode based on new charset\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else { // charset specified explicitly\n            Validate.notEmpty(charsetName, \"Must set charset argument to a valid character set. Set to null to detect from HTML.\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        // Handle BOM removal (if present) for UTF-8 or other charsets\n        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n            docData = docData.substring(1);\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}