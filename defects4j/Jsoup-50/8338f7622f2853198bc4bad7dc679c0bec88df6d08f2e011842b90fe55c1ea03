{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Detect and handle BOM (Byte Order Mark) encoding\n    Charset detectedCharset = detectCharsetFromBom(byteData);\n\n    if (detectedCharset != null) {\n        charsetName = detectedCharset.name();\n    }\n\n    if (charsetName == null) { // Determine charset from meta tag\n        // Decode with default charset and parse document\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        \n        if (meta != null) {\n            String foundCharset = null;\n\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // Charset is specified explicitly\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // Handle BOM to remove it during processing\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1);\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static Charset detectCharsetFromBom(ByteBuffer byteData) {\n    if (byteData.remaining() >= 4) {\n        byte[] bom = new byte[4];\n        byteData.mark();\n        byteData.get(bom);\n        byteData.rewind();\n\n        if ((bom[0] & 0xFF) == 0xFE && (bom[1] & 0xFF) == 0xFF) {\n            return Charset.forName(\"UTF-16BE\");\n        } else if ((bom[0] & 0xFF) == 0xFF && (bom[1] & 0xFF) == 0xFE) {\n            return Charset.forName(\"UTF-16LE\");\n        } else if ((bom[0] & 0xFF) == 0x00 && (bom[1] & 0xFF) == 0x00 &&\n                   (bom[2] & 0xFF) == 0xFE && (bom[3] & 0xFF) == 0xFF) {\n            return Charset.forName(\"UTF-32BE\");\n        } else if ((bom[0] & 0xFF) == 0xFF && (bom[1] & 0xFF) == 0xFE &&\n                   (bom[2] & 0xFF) == 0x00 && (bom[3] & 0xFF) == 0x00) {\n            return Charset.forName(\"UTF-32LE\");\n        }\n    }\n    if (byteData.remaining() >= 3) {\n        byte[] bom = new byte[3];\n        byteData.mark();\n        byteData.get(bom);\n        byteData.rewind();\n\n        if ((bom[0] & 0xFF) == 0xEF && (bom[1] & 0xFF) == 0xBB && (bom[2] & 0xFF) == 0xBF) {\n            return Charset.forName(\"UTF-8\");\n        }\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}