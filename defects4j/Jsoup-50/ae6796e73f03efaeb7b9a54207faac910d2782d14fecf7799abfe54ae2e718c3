{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    final String defaultCharset = \"UTF-8\"; // \u786e\u4fdd\u9ed8\u8ba4\u5b57\u7b26\u96c6\u5df2\u5b9a\u4e49\n\n    // \u68c0\u6d4bBOM\u5e76\u8bbe\u7f6e\u76f8\u5e94\u7684\u5b57\u7b26\u96c6\n    String detectedCharset = detectCharsetByBOM(byteData);\n    int bomLength = getBOMLength(detectedCharset);\n\n    // \u8c03\u6574ByteBuffer\u7684\u4f4d\u7f6e\u4ee5\u8df3\u8fc7BOM\n    byteData.position(bomLength);\n\n    if (charsetName == null) {\n        // \u4f7f\u7528\u68c0\u6d4b\u5230\u7684\u5b57\u7b26\u96c6\u89e3\u7801\u6570\u636e\n        docData = Charset.forName(detectedCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n\n        // \u4ece<meta>\u6807\u7b7e\u4e2d\u68c0\u6d4b\u5b57\u7b26\u96c6\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.equals(detectedCharset)) {\n                // \u91cd\u65b0\u89e3\u7801\u6570\u636e\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // \u4f7f\u7528\u6307\u5b9a\u7684\u5b57\u7b26\u96c6\u89e3\u7801\u6570\u636e\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : detectedCharset);\n    }\n    return doc;\n}\n\nprivate static String detectCharsetByBOM(ByteBuffer byteData) {\n    byteData.mark();\n    byte[] bom = new byte[4];\n    byteData.get(bom); // \u8bfb\u53d6\u6700\u591a4\u4e2a\u5b57\u8282\u7528\u4e8eBOM\u68c0\u6d4b\n    byteData.reset();\n\n    if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n        return \"UTF-32BE\";\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n        return \"UTF-32LE\";\n    } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n        return \"UTF-16BE\";\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n        return \"UTF-16LE\";\n    } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n        return \"UTF-8\";\n    } else {\n        return \"UTF-8\"; // \u9ed8\u8ba4\u5b57\u7b26\u96c6\n    }\n}\n\nprivate static int getBOMLength(String charset) {\n    if (\"UTF-32BE\".equals(charset) || \"UTF-32LE\".equals(charset)) {\n        return 4;\n    } else if (\"UTF-16BE\".equals(charset) || \"UTF-16LE\".equals(charset)) {\n        return 2;\n    } else if (\"UTF-8\".equals(charset)) {\n        return 3;\n    } else {\n        return 0;\n    }\n}\n\nprivate static String getCharsetFromContentType(String contentType) {\n    // \u5b9e\u73b0\u4eceContent-Type\u4e2d\u63d0\u53d6\u5b57\u7b26\u96c6\u7684\u903b\u8f91\n    // \u8fd9\u91cc\u53ea\u662f\u4e00\u4e2a\u5360\u4f4d\u7b26\uff0c\u5b9e\u9645\u5b9e\u73b0\u53ef\u80fd\u9700\u8981\u66f4\u590d\u6742\u7684\u903b\u8f91\n    String[] parts = contentType.split(\";\");\n    for (String part : parts) {\n        part = part.trim();\n        if (part.toLowerCase().startsWith(\"charset\")) {\n            return part.split(\"=\")[1].trim().replaceAll(\"\\\"\", \"\");\n        }\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}