{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // look for BOM - overrides any other header or input\n    byte[] bom = new byte[4];\n    byteData.get(bom);\n    byteData.rewind();\n\n    if (isUtf8Bom(bom)) {\n        byteData.position(3);\n        docData = Charset.forName(\"UTF-8\").decode(byteData).toString();\n        charsetName = \"UTF-8\";\n    } else if (isUtf16LeBom(bom)) {\n        byteData.position(2);\n        docData = Charset.forName(\"UTF-16LE\").decode(byteData).toString();\n        charsetName = \"UTF-16LE\";\n    } else if (isUtf16BeBom(bom)) {\n        byteData.position(2);\n        docData = Charset.forName(\"UTF-16BE\").decode(byteData).toString();\n        charsetName = \"UTF-16BE\";\n    } else if (isUtf32LeBom(bom)) {\n        byteData.position(4);\n        docData = Charset.forName(\"UTF-32LE\").decode(byteData).toString();\n        charsetName = \"UTF-32LE\";\n    } else if (isUtf32BeBom(bom)) {\n        byteData.position(4);\n        docData = Charset.forName(\"UTF-32BE\").decode(byteData).toString();\n        charsetName = \"UTF-32BE\";\n    } else if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta!= null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static boolean isUtf8Bom(byte[] bom) {\n    return bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF;\n}\n\nprivate static boolean isUtf16LeBom(byte[] bom) {\n    return bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE;\n}\n\nprivate static boolean isUtf16BeBom(byte[] bom) {\n    return bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF;\n}\n\nprivate static boolean isUtf32LeBom(byte[] bom) {\n    return bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00;\n}\n\nprivate static boolean isUtf32BeBom(byte[] bom) {\n    return bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}