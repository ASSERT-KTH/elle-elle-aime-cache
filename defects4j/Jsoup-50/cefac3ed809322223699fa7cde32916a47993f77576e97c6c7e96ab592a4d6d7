{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // look for BOM - overrides any other header or input\n        byteData.mark();\n        byteData.position(0);\n        byte[] bom = new byte[4];\n        byteData.get(bom);\n        byteData.reset();\n        String detectedCharset = detectBOMcharset(bom);\n\n        if (detectedCharset != null) {\n            charsetName = detectedCharset;\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        } else if (charsetName == null) {\n            // determine from meta. safe parse as UTF-8\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && !foundCharset.trim().isEmpty() && !foundCharset.equals(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else {\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n\n        return doc;\n    }\n\n    private static String detectBOMcharset(byte[] bom) {\n        if (bom.length >= 2 && bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) return \"UTF-16BE\";\n        if (bom.length >= 2 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) return \"UTF-16LE\";\n        if (bom.length >= 3 && bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) return \"UTF-8\";\n        if (bom.length >= 4 && bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) return \"UTF-32BE\";\n        if (bom.length >= 4 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) return \"UTF-32LE\";\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}