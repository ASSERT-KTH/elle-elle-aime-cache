{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Look for BOM - overrides any other header or input\n    byteData.rewind();\n    byte[] bom = new byte[4];\n    int numRead = byteData.get(bom, 0, Math.min(bom.length, byteData.remaining()));\n\n    // Check for UTF-32BE BOM: 0x00 0x00 0xFE 0xFF\n    if (numRead >= 4 && bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n        charsetName = \"UTF-32BE\";\n        byteData.position(4); // Skip BOM\n    }\n    // Check for UTF-32LE BOM: 0xFF 0xFE 0x00 0x00\n    else if (numRead >= 4 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n        charsetName = \"UTF-32LE\";\n        byteData.position(4); // Skip BOM\n    }\n    // Check for UTF-16BE BOM: 0xFE 0xFF\n    else if (numRead >= 2 && bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n        charsetName = \"UTF-16BE\";\n        byteData.position(2); // Skip BOM\n    }\n    // Check for UTF-16LE BOM: 0xFF 0xFE\n    else if (numRead >= 2 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n        charsetName = \"UTF-16LE\";\n        byteData.position(2); // Skip BOM\n    }\n    // Check for UTF-8 BOM: 0xEF 0xBB 0xBF\n    else if (numRead >= 3 && bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n        charsetName = \"UTF-8\";\n        byteData.position(3); // Skip BOM\n    }\n    // No BOM found, use provided charsetName or default\n    else {\n        byteData.rewind();\n        if (charsetName == null) {\n            // Determine from meta. Safe parse as UTF-8\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(charsetName).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else {\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n    }\n\n    if (doc == null) {\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}