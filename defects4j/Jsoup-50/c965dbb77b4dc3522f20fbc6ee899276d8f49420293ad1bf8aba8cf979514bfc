{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    String detectedCharset = null;\n\n    // Detect BOM and determine charset\n    byte[] bom = new byte[4];\n    byteData.mark();\n    byteData.get(bom, 0, 4);\n    byteData.reset();\n\n    if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n        detectedCharset = \"UTF-8\";\n        byteData.position(3); // Skip BOM\n    } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n        detectedCharset = \"UTF-16BE\";\n        byteData.position(2); // Skip BOM\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n        detectedCharset = \"UTF-16LE\";\n        byteData.position(2); // Skip BOM\n    } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n        detectedCharset = \"UTF-32BE\";\n        byteData.position(4); // Skip BOM\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n        detectedCharset = \"UTF-32LE\";\n        byteData.position(4); // Skip BOM\n    }\n\n    if (charsetName == null || detectedCharset != null) { // determine from meta. safe parse as UTF-8\n        String defaultCharset = \"UTF-8\";\n        if (detectedCharset == null) {\n            detectedCharset = defaultCharset;\n        }\n        docData = Charset.forName(detectedCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep the detected charset as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(detectedCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                byteData.position(detectedCharset.equals(defaultCharset) ? 0 : 3); // Skip BOM if defaultCharset is UTF-8\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : detectedCharset);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}