{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM first, overrides any other header or input\n    byteData.mark();\n    byte[] bom = new byte[4];\n    byteData.get(bom, 0, Math.min(bom.length, byteData.remaining()));\n    byteData.reset();\n\n    String detectedCharset = null;\n    switch (bom[0]) {\n        case (byte) 0xFE:\n            if (bom[1] == (byte) 0xFF) { // UTF-16BE\n                detectedCharset = \"UTF-16BE\";\n            }\n            break;\n        case (byte) 0xFF:\n            if (bom[1] == (byte) 0xFE) { // UTF-16LE\n                detectedCharset = \"UTF-16LE\";\n            }\n            break;\n        case (byte) 0x00:\n            if (bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) { // UTF-32BE\n                detectedCharset = \"UTF-32BE\";\n            }\n            break;\n        case (byte) 0xFF:\n            if (bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) { // UTF-32LE\n                detectedCharset = \"UTF-32LE\";\n            }\n            break;\n        case (byte) 0xEF:\n            if (bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) { // UTF-8\n                detectedCharset = \"UTF-8\";\n            }\n            break;\n    }\n\n    if (detectedCharset!= null) {\n        charsetName = detectedCharset;\n        byteData.position(detectedCharset.equals(\"UTF-32BE\") || detectedCharset.equals(\"UTF-32LE\")? 4 : 2); // skip BOM\n    } else if (charsetName == null) { \n        // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta!= null) { \n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { \n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { \n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n    }\n\n    if (doc == null) {\n        if (detectedCharset == null) {\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        } else {\n            docData = Charset.forName(detectedCharset).decode(byteData).toString();\n        }\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName!= null? charsetName : detectedCharset);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}