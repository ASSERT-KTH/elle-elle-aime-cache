{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    String detectedCharset = null;\n\n    // Check for BOM and handle charset detection\n    if (byteData.remaining() >= 2) {\n        byte[] bom = new byte[4];\n        byteData.mark();\n        byteData.get(bom, 0, Math.min(4, byteData.remaining()));\n        byteData.reset();\n\n        if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) { // UTF-16BE\n            detectedCharset = \"UTF-16BE\";\n            byteData.position(2);\n        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) { // UTF-16LE\n            detectedCharset = \"UTF-16LE\";\n            byteData.position(2);\n            if (byteData.remaining() >= 2 && bom[2] == 0 && bom[3] == 0) { // UTF-32LE\n                detectedCharset = \"UTF-32LE\";\n                byteData.position(4);\n            }\n        } else if (bom[0] == 0 && bom[1] == 0 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) { // UTF-32BE\n            detectedCharset = \"UTF-32BE\";\n            byteData.position(4);\n        } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) { // UTF-8\n            detectedCharset = \"UTF-8\";\n            byteData.position(3);\n        }\n    }\n\n    // Use detected charset if available, otherwise use provided charset or default\n    String charsetToUse = detectedCharset != null ? detectedCharset : \n                          (charsetName != null ? charsetName : defaultCharset);\n\n    // Decode the byte data\n    docData = Charset.forName(charsetToUse).decode(byteData).toString();\n\n    // Parse the document\n    doc = parser.parseInput(docData, baseUri);\n\n    // Check for charset in meta tags\n    Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n    if (meta != null) {\n        String foundCharset = null;\n        if (meta.hasAttr(\"http-equiv\")) {\n            foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n        }\n        if (foundCharset == null && meta.hasAttr(\"charset\")) {\n            try {\n                if (Charset.isSupported(meta.attr(\"charset\"))) {\n                    foundCharset = meta.attr(\"charset\");\n                }\n            } catch (IllegalCharsetNameException e) {\n                foundCharset = null;\n            }\n        }\n\n        if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(charsetToUse)) {\n            // Need to re-parse with the new charset\n            foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n            byteData.rewind();\n            docData = Charset.forName(foundCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            charsetToUse = foundCharset;\n        }\n    }\n\n    // Set the output charset\n    doc.outputSettings().charset(charsetToUse);\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}