{
    "generation": "/**\n * Parses byte data into a Document, detecting or using the provided charset.\n * \n * @param byteData   The byte data to parse.\n * @param charsetName The character set to use. If null, will attempt to detect from HTML.\n * @param baseUri    The base URI for the document.\n * @param parser     The parser to use for parsing the document.\n * @return The parsed Document.\n */\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Look for BOM - overrides any other header or input\n    if (byteData.remaining() >= 4) { // minimum BOM length (UTF-32)\n        byte[] bom = new byte[4];\n        byteData.mark();\n        byteData.get(bom, 0, Math.min(4, byteData.remaining()));\n        byteData.reset();\n\n        // Check for UTF-32 BOMs\n        if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n            charsetName = \"UTF-32BE\";\n            byteData.position(4); // skip BOM\n        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n            charsetName = \"UTF-32LE\";\n            byteData.position(4); // skip BOM\n        }\n        // Check for UTF-16 BOMs\n        else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n            charsetName = \"UTF-16BE\";\n            byteData.position(2); // skip BOM\n        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n            charsetName = \"UTF-16LE\";\n            byteData.position(2); // skip BOM\n        }\n        // Check for UTF-8 BOM\n        else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n            charsetName = \"UTF-8\";\n            byteData.position(3); // skip BOM\n        }\n    }\n\n    if (charsetName == null) { // determine from meta, safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta!= null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}