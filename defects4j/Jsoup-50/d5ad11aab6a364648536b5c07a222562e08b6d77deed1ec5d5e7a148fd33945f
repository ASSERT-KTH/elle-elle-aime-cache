{
    "generation": "import java.nio.ByteBuffer;\nimport java.nio.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Parser;\n\npublic class HtmlParser {\n\n    private static final String defaultCharset = \"UTF-8\"; // assuming default charset is UTF-8\n\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String detectedCharset = detectCharsetFromBom(byteData);\n        if (detectedCharset != null) {\n            charsetName = detectedCharset;\n        } else if (charsetName == null) {\n            // No BOM and no charsetName provided; use default charset to decode and parse meta tags\n            String initialDocData = Charset.forName(defaultCharset).decode(byteData).toString();\n            Document initialDoc = parser.parseInput(initialDocData, baseUri);\n            Element meta = initialDoc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharSetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n                if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                }\n            }\n        }\n        // At this point, charsetName should be set either from BOM, meta tag, or default\n        String docData = Charset.forName(charsetName).decode(byteData).toString();\n        Document doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n        return doc;\n    }\n\n    private static String detectCharsetFromBom(ByteBuffer byteBuffer) {\n        byteBuffer.mark();\n        byte[] bom = new byte[4];\n        int numRead = byteBuffer.get(bom);\n        String charsetName = null;\n        if (numRead >= 4) {\n            if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n                charsetName = \"UTF-32BE\";\n            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n                charsetName = \"UTF-32LE\";\n            }\n        }\n        if (numRead >= 2) {\n            if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n                charsetName = \"UTF-16BE\";\n            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n                charsetName = \"UTF-16LE\";\n            }\n        }\n        if (numRead >= 3) {\n            if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n                charsetName = \"UTF-8\";\n            }\n        }\n        byteBuffer.reset();\n        return charsetName;\n    }\n\n    private static String getCharsetFromContentType(String contentType) {\n        // Implement logic to extract charset from content-type string\n        // For example: content-type: text/html; charset=ISO-8859-1\n        int charsetStart = contentType.toLowerCase().indexOf(\"charset=\");\n        if (charsetStart != -1) {\n            String charset = contentType.substring(charsetStart + 8).trim();\n            charset = charset.replaceAll(\"[\\\"']\", \"\");\n            return charset;\n        }\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}