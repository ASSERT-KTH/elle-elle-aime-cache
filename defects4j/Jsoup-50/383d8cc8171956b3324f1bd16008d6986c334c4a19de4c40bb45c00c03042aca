{
    "generation": "/**\n * Parses the given byte data into a Document, using the specified charset and base URI.\n * If charset is null, attempts to detect the charset from the HTML meta tags.\n * Supports detection and parsing of files with a Byte Order Mark (BOM).\n *\n * @param byteData   the byte data to parse\n * @param charsetName the character set to use for parsing (or null to auto-detect)\n * @param baseUri    the base URI for the document\n * @param parser     the parser to use for parsing the HTML\n * @return the parsed Document\n */\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM and determine the charset from it if present\n    Charset bomCharset = getCharsetFromBOM(byteData);\n    if (bomCharset!= null) {\n        charsetName = bomCharset.name();\n        byteData.rewind(); // rewind to parse from the beginning\n        docData = bomCharset.decode(byteData).toString();\n    } else if (charsetName == null) { // determine from meta, safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta!= null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\n// Helper method to detect charset from BOM\nprivate static Charset getCharsetFromBOM(ByteBuffer byteData) {\n    byte[] bom = new byte[Math.min(4, byteData.remaining())];\n    byteData.get(bom);\n    byteData.rewind(); // rewind to original position\n\n    if (bom.length >= 3 && bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n        return Charset.forName(\"UTF-8\");\n    } else if (bom.length >= 4 && bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n        return Charset.forName(\"UTF-32BE\");\n    } else if (bom.length >= 4 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n        return Charset.forName(\"UTF-32LE\");\n    } else if (bom.length >= 2 && bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n        return Charset.forName(\"UTF-16BE\");\n    } else if (bom.length >= 2 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n        return Charset.forName(\"UTF-16LE\");\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}