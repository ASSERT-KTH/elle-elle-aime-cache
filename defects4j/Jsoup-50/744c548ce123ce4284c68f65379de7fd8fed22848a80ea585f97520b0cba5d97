{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // look for BOM - overrides any other header or input\n    byte[] bom = detectBOM(byteData);\n    String bomCharset = getBomCharset(bom);\n\n    if (bomCharset != null) {\n        charsetName = bomCharset;\n        byteData.position(bom.length); // Skip BOM\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                if (bomCharset != null) {\n                    byteData.position(bom.length); // Skip BOM\n                }\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        byteData.rewind();\n        if (bomCharset != null) {\n            byteData.position(bom.length); // Skip BOM\n        }\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        docData = docData.substring(1);\n        charsetName = defaultCharset;\n        doc = null;\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static byte[] detectBOM(ByteBuffer byteData) {\n    byte[] bom = new byte[4];\n    byteData.get(bom, 0, bom.length);\n    byteData.position(0); // Rewind to the start\n\n    if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n        return Arrays.copyOfRange(bom, 0, 3); // UTF-8 BOM\n    } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n        return Arrays.copyOfRange(bom, 0, 2); // UTF-16BE BOM\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n        return Arrays.copyOfRange(bom, 0, 2); // UTF-16LE BOM\n    } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n        return Arrays.copyOfRange(bom, 0, 4); // UTF-32BE BOM\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n        return Arrays.copyOfRange(bom, 0, 4); // UTF-32LE BOM\n    }\n    return new byte[0]; // No BOM\n}\n\nprivate static String getBomCharset(byte[] bom) {\n    if (bom.length == 3) {\n        return \"UTF-8\";\n    } else if (bom.length == 2) {\n        if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n            return \"UTF-16BE\";\n        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n            return \"UTF-16LE\";\n        }\n    } else if (bom.length == 4) {\n        if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n            return \"UTF-32BE\";\n        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n            return \"UTF-32LE\";\n        }\n    }\n    return null; // No BOM or unsupported BOM\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}