{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    Document doc = null;\n    String docData;\n\n    // Detect BOM and adjust charset and ByteBuffer position\n    if (byteData.hasArray()) {\n        byte[] array = byteData.array();\n        int pos = byteData.arrayOffset() + byteData.position();\n        int limit = byteData.arrayOffset() + byteData.limit();\n\n        // Check for UTF-8 BOM (EF BB BF)\n        if (pos + 3 <= limit && array[pos] == (byte)0xEF && array[pos + 1] == (byte)0xBB && array[pos + 2] == (byte)0xBF) {\n            byteData.position(pos + 3);\n            charsetName = \"UTF-8\";\n        }\n        // Check for UTF-16BE BOM (FE FF)\n        else if (pos + 2 <= limit && array[pos] == (byte)0xFE && array[pos + 1] == (byte)0xFF) {\n            byteData.position(pos + 2);\n            charsetName = \"UTF-16BE\";\n        }\n        // Check for UTF-16LE BOM (FF FE)\n        else if (pos + 2 <= limit && array[pos] == (byte)0xFF && array[pos + 1] == (byte)0xFE) {\n            byteData.position(pos + 2);\n            charsetName = \"UTF-16LE\";\n        }\n        // Check for UTF-32BE BOM (00 00 FE FF)\n        else if (pos + 4 <= limit && array[pos] == 0x00 && array[pos + 1] == 0x00 && array[pos + 2] == (byte)0xFE && array[pos + 3] == (byte)0xFF) {\n            byteData.position(pos + 4);\n            charsetName = \"UTF-32BE\";\n        }\n        // Check for UTF-32LE BOM (FF FE 00 00)\n        else if (pos + 4 <= limit && array[pos] == (byte)0xFF && array[pos + 1] == (byte)0xFE && array[pos + 2] == 0x00 && array[pos + 3] == 0x00) {\n            byteData.position(pos + 4);\n            charsetName = \"UTF-32LE\";\n        }\n    }\n\n    // If charset is still not determined, try to detect from meta tags\n    if (charsetName == null) {\n        // Initial decode with default charset\n        docData = Charset.forName(defaultCharset).decode(byteData.duplicate()).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                foundCharset = meta.attr(\"charset\");\n                try {\n                    if (!Charset.isSupported(foundCharset)) {\n                        foundCharset = null;\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {\n                charsetName = foundCharset;\n            }\n        }\n    }\n\n    // Decode byte data with determined charset\n    if (charsetName != null) {\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    } else {\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n    }\n\n    // Parse the document\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    }\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}