{
    "generation": "/**\n * Parse the given byte data into a Document, using the specified charset and base URI.\n * If charset is null, attempt to detect it from the HTML meta tags or byte order mark (BOM).\n *\n * @param byteData   the byte data to parse\n * @param charsetName the character set to use for parsing. If null, will attempt to detect.\n * @param baseUri     the base URI for the document\n * @param parser      the parser to use for HTML parsing\n * @return the parsed Document\n */\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for Byte Order Mark (BOM) first, overrides any other header or input\n    String bomCharset = getCharsetFromBOM(byteData);\n    if (bomCharset!= null) {\n        charsetName = bomCharset; // use charset from BOM\n        byteData.rewind(); // reset byte buffer to start\n    }\n\n    if (charsetName == null) { // determine from meta, safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta!= null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\n// New helper method to detect charset from Byte Order Mark (BOM)\nprivate static String getCharsetFromBOM(ByteBuffer byteData) {\n    byte[] bom = new byte[4];\n    byteData.get(bom, 0, Math.min(4, byteData.remaining()));\n    if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n        return \"UTF-8\";\n    } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n        return \"UTF-16BE\";\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n        return \"UTF-16LE\";\n    } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n        return \"UTF-32BE\";\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n        return \"UTF-32LE\";\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}