{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        if (charsetName == null) {\n            ByteOrderMark bom = detectBOM(byteData);\n            if (bom != null) {\n                charsetName = bom.getCharsetName();\n                byteData.position(bom.length());\n            } else {\n                docData = Charset.forName(defaultCharset).decode(byteData).toString();\n                doc = parser.parseInput(docData, baseUri);\n                Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n                if (meta != null) {\n                    String foundCharset = null;\n                    if (meta.hasAttr(\"http-equiv\")) {\n                        foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                    }\n                    if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                        try {\n                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n                                foundCharset = meta.attr(\"charset\");\n                            }\n                        } catch (IllegalCharsetNameException e) {\n                            foundCharset = null;\n                        }\n                    }\n                    if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                        foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                        charsetName = foundCharset;\n                        byteData.rewind();\n                        docData = Charset.forName(foundCharset).decode(byteData).toString();\n                        doc = null;\n                    }\n                }\n            }\n        } else {\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        if (docData == null) {\n            byteData.rewind();\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }\n\n    private static ByteOrderMark detectBOM(ByteBuffer byteData) {\n        if (byteData.remaining() >= 4) {\n            byte first = byteData.get();\n            byte second = byteData.get();\n            byte third = byteData.get();\n            byte fourth = byteData.get();\n            byteData.rewind();\n\n            if (first == (byte)0xFF && second == (byte)0xFE && third == (byte)0x00 && fourth == (byte)0x00) {\n                return ByteOrderMark.UTF_32LE;\n            } else if (first == (byte)0x00 && second == (byte)0x00 && third == (byte)0xFE && fourth == (byte)0xFF) {\n                return ByteOrderMark.UTF_32BE;\n            } else if (first == (byte)0xFF && second == (byte)0xFE) {\n                return ByteOrderMark.UTF_16LE;\n            } else if (first == (byte)0xFE && second == (byte)0xFF) {\n                return ByteOrderMark.UTF_16BE;\n            } else if (first == (byte)0xEF && second == (byte)0xBB && third == (byte)0xBF) {\n                return ByteOrderMark.UTF_8;\n            }\n        }\n        return null;\n    }\n\n    private static enum ByteOrderMark {\n        UTF_8(\"UTF-8\", 3),\n        UTF_16LE(\"UTF-16LE\", 2),\n        UTF_16BE(\"UTF-16BE\", 2),\n        UTF_32LE(\"UTF-32LE\", 4),\n        UTF_32BE(\"UTF-32BE\", 4);\n\n        private final String charsetName;\n        private final int length;\n\n        ByteOrderMark(String charsetName, int length) {\n            this.charsetName = charsetName;\n            this.length = length;\n        }\n\n        public String getCharsetName() {\n            return charsetName;\n        }\n\n        public int length() {\n            return length;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}