{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM and determine charset\n    if (byteData.remaining() >= 2) {\n        byte byte1 = byteData.get();\n        byte byte2 = byteData.get();\n        byteData.rewind(); // reset position for later use\n\n        if ((byte1 == (byte) 0xFE && byte2 == (byte) 0xFF) || (byte1 == (byte) 0xFF && byte2 == (byte) 0xFE)) {\n            // UTF-16 BOM detected\n            if (byteData.remaining() >= 4) {\n                byte byte3 = byteData.get(2);\n                byte byte4 = byteData.get(3);\n                if ((byte1 == (byte) 0x00 || byte2 == (byte) 0x00) && \n                    (byte3 == (byte) 0xFE || byte4 == (byte) 0xFE) && \n                    (byte3 == (byte) 0xFF || byte4 == (byte) 0xFF)) {\n                    // UTF-32 BOM detected\n                    charsetName = (byte1 == (byte) 0x00) ? \"UTF-32BE\" : \"UTF-32LE\";\n                } else {\n                    charsetName = (byte1 == (byte) 0xFE) ? \"UTF-16BE\" : \"UTF-16LE\";\n                }\n            } else {\n                charsetName = (byte1 == (byte) 0xFE) ? \"UTF-16BE\" : \"UTF-16LE\";\n            }\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n            return parser.parseInput(docData, baseUri);\n        }\n    }\n\n    if (charsetName == null) {\n        // Determine from meta if charsetName is not specified\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // Use specified charsetName\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        docData = docData.substring(1);\n        charsetName = defaultCharset;\n        doc = null;\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}