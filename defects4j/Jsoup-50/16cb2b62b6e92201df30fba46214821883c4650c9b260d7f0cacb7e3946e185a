{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    if (byteData.remaining() >= 3) { // Check for BOM markers\n        byteData.mark();\n        byte b1 = byteData.get();\n        byte b2 = byteData.get();\n        byte b3 = byteData.remaining() > 0 ? byteData.get() : 0;\n\n        if (b1 == (byte) 0xEF && b2 == (byte) 0xBB && b3 == (byte) 0xBF) {\n            charsetName = \"UTF-8\";\n        } else if (b1 == (byte) 0xFE && b2 == (byte) 0xFF) {\n            charsetName = \"UTF-16BE\";\n            byteData.reset();\n        } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE) {\n            charsetName = \"UTF-16LE\";\n            byteData.reset();\n        } else if (b1 == (byte) 0x00 && b2 == (byte) 0x00 && b3 == (byte) 0xFE && byteData.get() == (byte) 0xFF) {\n            charsetName = \"UTF-32BE\";\n            byteData.reset();\n        } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE && byteData.get() == (byte) 0x00 && byteData.get() == (byte) 0x00) {\n            charsetName = \"UTF-32LE\";\n            byteData.reset();\n        } else {\n            byteData.reset();\n        }\n    }\n\n    if (charsetName == null) {\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1);\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}