{
    "generation": "\n// Read the first 4 bytes for BOM detection\n\nbyte[] bomHeader = new byte[4];\n\nbyteData.rewind();\n\nbyteData.get(bomHeader);\n\n// Determine charset based on BOM\n\nString detectedCharset = null;\n\nif (starts_with(bomHeader, new byte[]{ (byte)0xFE, (byte)0xFF, 0, 0 })) {\n\n    detectedCharset = \"UTF-32BE\";\n\n    // Skip 4 bytes for BOM\n\n    byteData.position(4);\n\n} else if (starts_with(bomHeader, new byte[]{ (byte)0xFF, (byte)0xFE, 0, 0 })) {\n\n    detectedCharset = \"UTF-32LE\";\n\n    // Skip 4 bytes for BOM\n\n    byteData.position(4);\n\n} else if (starts_with(bomHeader, new byte[]{ (byte)0xFE, (byte)0xFF })) {\n\n    detectedCharset = \"UTF-16BE\";\n\n    // Skip 2 bytes for BOM\n\n    byteData.position(2);\n\n} else if (starts_with(bomHeader, new byte[]{ (byte)0xFF, (byte)0xFE })) {\n\n    detectedCharset = \"UTF-16LE\";\n\n    // Skip 2 bytes for BOM\n\n    byteData.position(2);\n\n} else {\n\n    // No BOM found, proceed with default behavior\n\n    byteData.rewind();\n\n}\n\n// If charset is detected from BOM, use it\n\nif (detectedCharset != null) {\n\n    charsetName = detectedCharset;\n\n}\n\n// If charsetName is still null, use default behavior\n\nif (charsetName == null) {\n\n    // Try to detect charset from meta tags\n\n    // ...\n\n}\n\n// Decode the byte data using charsetName\n\ndocData = Charset.forName(charsetName).decode(byteData).toString();\n\n// Parse the document\n\ndoc = parser.parseInput(docData, baseUri);\n\ndoc.outputSettings().charset(charsetName);\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}