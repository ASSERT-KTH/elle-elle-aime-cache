{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM (Byte Order Mark) and determine the correct charset\n    byte[] bom = new byte[4];\n    byteData.rewind();\n    int bytesRead = byteData.get(bom);\n    byteData.rewind();\n\n    String foundCharset = null;\n\n    if (bytesRead >= 3) {\n        if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n            foundCharset = \"UTF-8\";\n            byteData.position(3); // skip BOM\n        } else if (bytesRead >= 4) {\n            if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n                foundCharset = \"UTF-32LE\";\n                byteData.position(4); // skip BOM\n            } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n                foundCharset = \"UTF-32BE\";\n                byteData.position(4); // skip BOM\n            } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n                foundCharset = \"UTF-16BE\";\n                byteData.position(2); // skip BOM\n            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n                foundCharset = \"UTF-16LE\";\n                byteData.position(2); // skip BOM\n            }\n        }\n    }\n\n    if (charsetName == null && foundCharset == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        if (foundCharset != null) {\n            charsetName = foundCharset;\n        } else if (charsetName == null) {\n            charsetName = defaultCharset;\n        }\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}