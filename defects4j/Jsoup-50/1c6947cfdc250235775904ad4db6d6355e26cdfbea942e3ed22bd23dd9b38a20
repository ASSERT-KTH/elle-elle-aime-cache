{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM\n    BOM bom = detectBOM(byteData);\n    if (bom != null) {\n        charsetName = bom.getCharset();\n        byteData = skipBOM(byteData, bom);\n    }\n\n    if (charsetName == null) {\n        // Try to detect charset from meta tags\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.trim().isEmpty() && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                charsetName = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                byteData.rewind();\n                docData = Charset.forName(charsetName).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // Use specified charset\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}\n\nprivate static BOM detectBOM(ByteBuffer byteData) {\n    byteData.mark();\n    if (byteData.remaining() >= 2) {\n        int firstByte = byteData.get() & 0xFF;\n        int secondByte = byteData.get() & 0xFF;\n        byteData.reset();\n\n        if (firstByte == 0xFE && secondByte == 0xFF) {\n            return BOM.UTF_16BE;\n        } else if (firstByte == 0xFF && secondByte == 0xFE) {\n            if (byteData.remaining() >= 4 && byteData.get(2) == 0 && byteData.get(3) == 0) {\n                return BOM.UTF_32LE;\n            }\n            return BOM.UTF_16LE;\n        } else if (byteData.remaining() >= 4) {\n            int thirdByte = byteData.get(2) & 0xFF;\n            int fourthByte = byteData.get(3) & 0xFF;\n            if (firstByte == 0 && secondByte == 0 && thirdByte == 0xFE && fourthByte == 0xFF) {\n                return BOM.UTF_32BE;\n            }\n        }\n    }\n    return null;\n}\n\nprivate static ByteBuffer skipBOM(ByteBuffer byteData, BOM bom) {\n    int bomLength = bom.getLength();\n    byte[] bomBytes = new byte[bomLength];\n    byteData.get(bomBytes);\n    return byteData.slice();\n}\n\nprivate enum BOM {\n    UTF_16BE(\"UTF-16BE\", 2),\n    UTF_16LE(\"UTF-16LE\", 2),\n    UTF_32BE(\"UTF-32BE\", 4),\n    UTF_32LE(\"UTF-32LE\", 4);\n\n    private final String charset;\n    private final int length;\n\n    BOM(String charset, int length) {\n        this.charset = charset;\n        this.length = length;\n    }\n\n    public String getCharset() {\n        return charset;\n    }\n\n    public int getLength() {\n        return length;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}