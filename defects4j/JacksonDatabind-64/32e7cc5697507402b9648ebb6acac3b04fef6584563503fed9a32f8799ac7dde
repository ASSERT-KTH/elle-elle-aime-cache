{
    "generation": "@SuppressWarnings(\"deprecation\")\nprotected BeanPropertyWriter buildWriter(SerializerProvider prov,\n                                         BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n                                         TypeSerializer typeSer, TypeSerializer contentTypeSer,\n                                         AnnotatedMember am, boolean defaultUseStaticTyping)\n    throws JsonMappingException\n{\n    // ... existing code ...\n\n    JavaType actualType = (serializationType == null) ? declaredType : serializationType;\n    JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(),\n            _defaultInclusion);\n    inclV = inclV.withOverrides(propDef.findInclusion());\n    JsonInclude.Include inclusion = inclV.getValueInclusion();\n\n    if (inclusion == JsonInclude.Include.USE_DEFAULTS) {\n        inclusion = JsonInclude.Include.ALWAYS;\n    }\n\n    switch (inclusion) {\n    case NON_DEFAULT:\n        if (_useRealPropertyDefaults) {\n            Object defaultValue = getPropertyDefaultValue(propDef.getName(), am, actualType);\n            if (defaultValue != null && defaultValue.equals(DEFAULT_VALUES.get(actualType))) {\n                return null; // If the value is the default value, return null to exclude the property\n            }\n            valueToSuppress = defaultValue;\n        } else {\n            valueToSuppress = getDefaultValue(actualType);\n            suppressNulls = true;\n        }\n        if (valueToSuppress == null) {\n            suppressNulls = true;\n        } else {\n            if (valueToSuppress.getClass().isArray()) {\n                valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n            }\n        }\n        break;\n    // ... remaining code ...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}