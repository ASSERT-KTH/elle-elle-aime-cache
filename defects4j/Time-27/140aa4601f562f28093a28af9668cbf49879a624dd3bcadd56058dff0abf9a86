{
    "generation": "//-----------------------------------------------------------------------\nprivate static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        if (sep.finishesParser() || sep.finishesPrinter()) {\n            return new PeriodFormatter(sep, sep);\n        } else {\n            // If the separator does not finish the parser or printer, we need to handle it differently\n            // Here we assume that the separator should be part of the parser and printer if it's not finished\n            Object[] comp = createComposite(elementPairs.subList(2, size));\n            PeriodPrinter printer = notPrinter ? null : new CompositePeriodPrinter(new Object[]{sep, comp[0]});\n            PeriodParser parser = notParser ? null : new CompositePeriodParser(new Object[]{sep, comp[1]});\n            return new PeriodFormatter(printer, parser);\n        }\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}