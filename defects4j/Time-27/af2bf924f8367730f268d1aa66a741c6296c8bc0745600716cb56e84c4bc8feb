{
    "generation": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    } else if (size >= 1 && elementPairs.get(0) instanceof Pair) {\n        Pair pair = (Pair) elementPairs.get(0);\n        PeriodPrinter printer = pair.printer;\n        PeriodParser parser = pair.parser;\n        if (size == 1) {\n            return new PeriodFormatter(printer, parser);\n        } else {\n            PeriodFormatter remainder = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n            return new PeriodFormatter(new ChainedPrinter(printer, remainder.getPrinter()), new ChainedParser(parser, remainder.getParser()));\n        }\n    } else {\n        throw new IllegalArgumentException(\"Invalid element pairs in formatter builder\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}