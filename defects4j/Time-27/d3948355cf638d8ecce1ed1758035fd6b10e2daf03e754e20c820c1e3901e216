{
    "generation": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep.wrapPrinter(f.getPrinter()), sep.wrapParser(f.getParser()));\n    } else if (size >= 2) {\n        Object printerObj = elementPairs.get(0);\n        Object parserObj = elementPairs.get(1);\n        PeriodPrinter printer = (printerObj instanceof PeriodPrinter) ? (PeriodPrinter) printerObj : null;\n        PeriodParser parser = (parserObj instanceof PeriodParser) ? (PeriodParser) parserObj : null;\n        if (size > 2) {\n            PeriodFormatter tailFormatter = toFormatter(elementPairs.subList(2, size), \n                                                         printer == null ? notPrinter : false, \n                                                         parser == null ? notParser : false);\n            if (printer != null) {\n                printer = new ChainedPeriodPrinter(printer, tailFormatter.getPrinter());\n            }\n            if (parser != null) {\n                parser = new ChainedPeriodParser(parser, tailFormatter.getParser());\n            }\n        }\n        if (notPrinter) {\n            return new PeriodFormatter(null, parser);\n        } else if (notParser) {\n            return new PeriodFormatter(printer, null);\n        } else {\n            return new PeriodFormatter(printer, parser);\n        }\n    } else {\n        throw new IllegalArgumentException(\"Invalid element pairs\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}