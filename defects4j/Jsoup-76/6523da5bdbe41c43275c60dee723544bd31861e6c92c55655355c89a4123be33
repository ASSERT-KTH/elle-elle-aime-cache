{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                // todo confirm that check\n                tb.error(this);\n                return false;\n            } else if (tb.framesetOk() && isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"pre\") || name.equals(\"textarea\") || name.equals(\"listing\")) {\n                tb.insert(startTag);\n                if (name.equals(\"pre\")) {\n                    // Check for and ignore the first newline after <pre>, as per spec.\n                    if (tb.currentElement().nodeName().equals(\"pre\")) {\n                        Token next = tb.readNext();\n                        if (next.isCharacter() && next.asCharacter().getData().equals(\"\\n\")) {\n                            return true; // Skip the newline.\n                        } else {\n                            tb.unread(next); // Push it back if it's not a newline.\n                        }\n                    }\n                }\n                tb.tokeniser.transition(TokeniserState.Rcdata);\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(Text);\n            } else if (name.equals(\"plaintext\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insert(startTag);\n                tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n            } else {\n                // Handle other tags with existing logic\n                return existingStartTagHandlingLogic(t, tb);\n            }\n            break;\n\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (name.equals(\"pre\")) {\n                if (!tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else {\n                // Handle other end tags with existing logic\n                return existingEndTagHandlingLogic(t, tb);\n            }\n            break;\n\n        case EOF:\n            // Handle other cases\n            return existingEOFHandlingLogic(tb);\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}