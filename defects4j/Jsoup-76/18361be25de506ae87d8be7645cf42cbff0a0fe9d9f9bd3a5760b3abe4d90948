{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) { // handle potential null\n                tb.error(this);\n                return false;\n            } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"pre\") || StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                Element preElement = tb.insert(startTag);\n                tb.framesetOk(false);\n\n                // Consume a newline character, if present, directly after opening <pre> or related elements\n                if (name.equals(\"pre\") && tb.tokeniser.consumeNextTokenIf('\\n')) {\n                    // Skip the newline (no specific action is needed here since it's a tokeniser behavior)\n                }\n            } else if (name.equals(\"textarea\")) {\n                tb.insert(startTag);\n                // Consume a leading newline for <textarea>\n                if (tb.tokeniser.consumeNextTokenIf('\\n')) {\n                    // Skip the newline\n                }\n                tb.tokeniser.transition(TokeniserState.Rcdata);\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(Text);\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                tb.reconstructFormattingElements();\n                tb.insertEmpty(startTag);\n                tb.framesetOk(false);\n            } else {\n                // ... Other StartTag processing remains unchanged\n            }\n            break;\n\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                // ... EndTag processing remains unchanged\n            } else if (name.equals(\"pre\") || name.equals(\"textarea\")) {\n                if (!tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.generateImpliedEndTags();\n                if (!tb.currentElement().nodeName().equals(name))\n                    tb.error(this);\n                tb.popStackToClose(name);\n            } else if (name.equals(\"li\")) {\n                if (!tb.inListItemScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else {\n                // ... Other EndTag processing remains unchanged\n            }\n            break;\n\n        case EOF:\n            // ... EOF processing remains unchanged\n            break;\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}