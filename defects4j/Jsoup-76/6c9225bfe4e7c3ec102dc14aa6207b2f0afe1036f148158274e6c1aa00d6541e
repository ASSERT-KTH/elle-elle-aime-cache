{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            String data = c.getData();\n            if (data.equals(nullString)) {\n                // todo confirm that check\n                tb.error(this);\n                return false;\n            } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"pre\")) {\n                if (tb.inButtonScope(\"pre\")) {\n                    tb.error(this);\n                    tb.processEndTag(\"pre\");\n                }\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.tokeniser.transition(TokeniserState.Rcdata);\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(Markup.InPre);\n                // Skip the first newline character inside <pre>\n                tb.tokeniser.skipNewLine = true;\n            } else if (name.equals(\"textarea\")) {\n                tb.insert(startTag);\n                // Skip the first newline character inside <textarea>\n                tb.tokeniser.skipNewLine = true;\n                tb.tokeniser.transition(TokeniserState.Rcdata);\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(Markup.Text);\n            } else {\n                // Existing logic for other start tags\n                // ...\n            }\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            String tagName = endTag.normalName();\n            if (tagName.equals(\"pre\")) {\n                if (!tb.inScope(\"pre\")) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.generateImpliedEndTags();\n                if (!tb.currentElement().nodeName().equals(\"pre\")) {\n                    tb.error(this);\n                }\n                tb.popStackToClose(\"pre\");\n                tb.clearFormattingElementsToLastMarker();\n                tb.tokeniser.transition(TokeniserState.DATA);\n                tb.tokeniser.skipNewLine = false;\n            } else {\n                // Existing logic for other end tags\n                // ...\n            }\n            break;\n        case EOF:\n            // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n            // stop parsing\n            break;\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}