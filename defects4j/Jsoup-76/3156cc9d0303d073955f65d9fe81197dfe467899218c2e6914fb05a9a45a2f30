{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                // todo confirm that check\n                tb.error(this);\n                return false;\n            } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            // todo - refactor to a switch statement\n            String name = startTag.normalName();\n            if (name.equals(\"pre\") || name.equals(\"listing\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insert(startTag);\n                tb.framesetOk(false);\n                // Special handling for the newline immediately after <pre>, <listing>\n                if (tb.currentToken() == startTag && tb.tokeniser.current().equals('\\n')) {\n                    tb.tokeniser.read(); // Consume the newline\n                }\n            } else {\n                // Original code continues here for other cases...\n                // Implementation for \"a\", \"li\", \"html\", etc. remains unchanged.\n            }\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (name.equals(\"pre\") || name.equals(\"listing\")) {\n                if (!tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name)) {\n                        tb.error(this);\n                    }\n                    tb.popStackToClose(name);\n                }\n            } else {\n                // Original code continues here for EndTag cases...\n                // Implementation for \"p\", \"body\", \"html\", etc. remains unchanged.\n            }\n            break;\n        case EOF:\n            // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n            // stop parsing\n            break;\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}