{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (tb.framesetOk() && isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag: {\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"pre\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insert(startTag);\n                tb.framesetOk(false);\n                \n                // If the next token is a LINE FEED (LF), skip it.\n                tb.skipNextNewline();\n            } else if (name.equals(\"textarea\")) {\n                tb.insert(startTag);\n\n                // Skip the first newline if present.\n                tb.tokeniser.transition(TokeniserState.Rcdata);\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(Text);\n                tb.skipNextNewline(); // Added to handle this case\n            } else {\n                // All other cases remain unchanged\n                handleStartTag(startTag, tb);\n            }\n            break;\n        }\n        case EndTag: {\n            Token.EndTag endTag = t.asEndTag();\n            String name = endTag.normalName();\n            // All logic for EndTag handling is unchanged\n            handleEndTag(endTag, tb);\n            break;\n        }\n        case EOF: {\n            // All logic for EOF handling is unchanged\n            handleEof(tb);\n            break;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}