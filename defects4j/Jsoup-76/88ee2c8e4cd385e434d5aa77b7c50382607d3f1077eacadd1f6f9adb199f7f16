{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        //... (other cases remain the same)\n\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            //... (other conditions remain the same)\n\n            else if (name.equals(\"textarea\")) {\n                tb.insert(startTag);\n                if (tb.isNextInputCharacter(TokeniserState.Rcdata, '\\n')) { // Check for next newline character\n                    tb.advanceTokenizer(); // Skip the newline character\n                }\n                tb.tokeniser.transition(TokeniserState.Rcdata);\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(Text);\n            }\n\n            //... (other cases remain the same)\n\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            //... (other conditions remain the same)\n\n            else if (name.equals(\"pre\") || name.equals(\"listing\") || name.equals(\"xmp\")) {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.framesetOk(false);\n                if (tb.isNextInputCharacter(TokeniserState.Rcdata, '\\n')) { // Check for next newline character\n                    tb.advanceTokenizer(); // Skip the newline character\n                }\n                handleRawtext(startTag, tb);\n            }\n\n            //... (other cases remain the same)\n\n        //... (other cases remain the same)\n    }\n    return true;\n}\n\n// Add the following helper method if it's not already available\nprivate boolean isNextInputCharacter(TokeniserState state, char c) {\n    tb.tokeniser.transition(state);\n    int codePoint = tb.tokeniser.consume();\n    tb.tokeniser.unconsume(codePoint);\n    return codePoint == c;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}