{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (tb.framesetOk() && isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"pre\")) {\n                tb.reconstructFormattingElements();\n                Element element = tb.insert(startTag);\n                tb.framesetOk(false);\n                tb.transition(HtmlTreeBuilderState.Text);\n                // If the next token is a U+000A LINE FEED (LF) character token, then ignore that token\n                if (tb.tokeniser.currentToken().type == TokenType.Character\n                        && tb.tokeniser.currentToken().asCharacter().getData().equals(\"\\n\")) {\n                    tb.tokeniser.transition(Content);\n                }\n            } else if (name.equals(\"textarea\")) {\n                tb.insert(startTag);\n                tb.tokeniser.transition(TokeniserState.Rcdata);\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(HtmlTreeBuilderState.Text);\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insert(startTag);\n                tb.framesetOk(false);\n                // Add a check for `plaintext` and `xmp` elements\n                if (name.equals(\"plaintext\") || name.equals(\"xmp\")) {\n                    tb.tokeniser.transition(TokeniserState.PLAINTEXT);\n                }\n            } else {\n                // rest of the code ...\n\n            }\n            break;\n        }\n        // rest of the code ...\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}