{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (tb.framesetOk() && isWhitespace(c)) { \n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        //... (rest of the function remains the same)\n\n        case StartTag:\n            //... (rest of the function remains the same)\n            else if (name.equals(\"textarea\")) {\n                tb.insert(startTag);\n                if (tb.tokeniser.isNewline()) { // ignore newline\n                    tb.tokeniser.consume();\n                }\n                tb.tokeniser.transition(TokeniserState.Rcdata);\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(Text);\n            } else if (name.equals(\"xmp\")) {\n                tb.reconstructFormattingElements();\n                if (tb.tokeniser.isNewline()) { // ignore newline\n                    tb.tokeniser.consume();\n                }\n                tb.framesetOk(false);\n                handleRawtext(startTag, tb);\n            } else if (name.equals(\"pre\")) {\n                tb.reconstructFormattingElements();\n                if (tb.tokeniser.isNewline()) { // ignore newline\n                    tb.tokeniser.consume();\n                }\n                tb.framesetOk(false);\n                handleRawtext(startTag, tb);\n            }\n            //... (rest of the function remains the same)\n        //... (rest of the function remains the same)\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}