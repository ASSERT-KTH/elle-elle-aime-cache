{
    "generation": "public void testSuperClassWithReferencedJavaType() {\n    TypeFactory tf = objectMapper().getTypeFactory();\n    // Construct super class first to set the cache correctly\n    JavaType baseType = tf.constructType(Base.class);\n    // Now construct subclass\n    JavaType subType = tf.constructType(Sub.class);\n\n    JavaType baseTypeFromSub = subType.getSuperClass();\n    assertNotNull(baseTypeFromSub.getSuperClass());\n    // Additional assertions can be added to check if baseTypeFromSub is an instance of ResolvedRecursiveType\n}\n\npublic void testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType() throws IOException {\n    TypeFactory tf = TypeFactory.defaultInstance();\n    // Construct super class first\n    tf.constructType(Base.class);\n    // Now construct subclass\n    tf.constructType(Sub.class);\n\n    Sub sub = new Sub();\n    String serialized = objectMapper().writeValueAsString(sub);\n    assertEquals(\"{\\\"base\\\":1,\\\"sub\\\":2}\", serialized);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}