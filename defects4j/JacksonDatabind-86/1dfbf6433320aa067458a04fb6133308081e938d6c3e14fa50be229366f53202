{
    "generation": "package com.fasterxml.jackson.databind.type;\n\nimport java.lang.reflect.TypeVariable;\nimport java.util.*;\n\nimport com.fasterxml.jackson.databind.JavaType;\n\n/**\n * We need a custom variant of {@link TypeBindings} which is aware\n * of recursive types.\n */\npublic class RecursiveTypeBinding extends TypeBindings\n{\n    private static final long serialVersionUID = 1L;\n\n    private final JavaType _targetType;\n\n    public RecursiveTypeBinding(JavaType targetType) {\n        super(NO_TYPES, null);\n        _targetType = targetType;\n    }\n\n    @Override\n    public JavaType findBoundType(String name) {\n        if (_targetType.getRawClass().getName().contains(name)) {\n            // First: small optimization, let's avoid recursion for very common case\n            return _targetType;\n        }\n        return _findBoundType(name);\n    }\n\n    protected JavaType _findBoundType(String name)\n    {\n        // [databind#1647]: Need to go up the hierarchy...\n        JavaType t = _targetType;\n        while (t != null) {\n            for (JavaType param : t.getBoundTypeParameters()) {\n                if (param.getRawClass().getName().equals(name)) {\n                    return param;\n                }\n            }\n            t = t.getSuperClass();\n        }\n        return null;\n    }\n\n    @Override\n    public List<JavaType> getTypeParameters() {\n        return Collections.emptyList();\n    }\n\n    @Override\n    public int size() { return 0; }\n\n    @Override\n    public JavaType getBoundType(int index) {\n        return null;\n    }\n\n    @Override\n    public boolean isEmpty() { return true; }\n\n    @Override\n    public String toString() {\n        return \"[recursive]\";\n    }\n\n    @Override\n    public int hashCode() {\n        return _targetType.hashCode();\n    }\n\n    @Override\n    public boolean equals(Object o)\n    {\n        if (o == this) return true;\n        if (o == null || o.getClass() != getClass()) return false;\n        RecursiveTypeBinding other = (RecursiveTypeBinding) o;\n        return _targetType.equals(other._targetType);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}