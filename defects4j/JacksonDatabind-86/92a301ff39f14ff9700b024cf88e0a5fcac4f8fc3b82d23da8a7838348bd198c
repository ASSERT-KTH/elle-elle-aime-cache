{
    "generation": "class Sub extends Base {\n    public int sub = 2;\n}\nclass Base {\n    public int base = 1;\n}\n\n@Test\npublic void testSuperClassWithReferencedJavaType() {\n    TypeFactory tf = objectMapper().getTypeFactory();\n    tf.constructType(Base.class); // must be constructed before sub to set the cache correctly\n    JavaType subType = tf.constructType(Sub.class);\n    // baseTypeFromSub should be a ResolvedRecursiveType in this test\n    JavaType baseTypeFromSub = subType.getSuperClass();\n    assertNotNull(baseTypeFromSub.getSuperClass());\n}\n\npublic void testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType() throws IOException {\n    TypeFactory tf = TypeFactory.defaultInstance();\n    tf.constructType(Base.class);\n    tf.constructType(Sub.class);\n    Sub sub = new Sub();\n    String serialized = objectMapper().writeValueAsString(sub);\n    assertEquals(\"{\\\"base\\\":1,\\\"sub\\\":2}\", serialized);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}