{
    "generation": "public class TypeFactory {\n\n    private final Map<Key, JavaType> _typeCache = new ConcurrentHashMap<>();\n\n    public JavaType constructType(Class<?> raw) {\n        Key key = new Key(raw);\n        JavaType type = _typeCache.get(key);\n        if (type == null) {\n            type = buildType(raw);\n            _typeCache.put(key, type);\n        }\n        return type;\n    }\n\n    private JavaType buildType(Class<?> raw) {\n        if (raw.isInterface() || raw.isEnum() || raw.isAnnotation()) {\n            return new SimpleType(raw);\n        } else if (raw.isArray()) {\n            return new ArrayType(raw);\n        } else if (raw.isLocalClass() || raw.isAnonymousClass()) {\n            return new LocalizedType(raw);\n        } else {\n            return new ClassType(raw);\n        }\n    }\n\n    // Ensure that the superclass type is fully resolved before constructing the subclass type\n    public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {\n        JavaType superType = baseType.getSuperClass();\n        if (superType != null) {\n            constructType(superType.getRawClass());\n        }\n        return new SpecializedType(baseType, subclass);\n    }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}