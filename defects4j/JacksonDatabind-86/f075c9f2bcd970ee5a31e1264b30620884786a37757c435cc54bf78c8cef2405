{
    "generation": "protected synchronized JavaType _resolveSuperClassCachingIssue(JavaType type, Class<?> rawSuperClass) {\n    // If the superclass is already resolved and matches, return it directly\n    if (type.getSuperClass() != null && type.getSuperClass().getRawClass() == rawSuperClass) {\n        return type.getSuperClass();\n    }\n    // Use the raw superclass to construct the type and cache it correctly\n    JavaType resolvedSuperClass = constructType(rawSuperClass);\n    ((ResolvedRecursiveType) type).setSuperClass(resolvedSuperClass);\n    return resolvedSuperClass;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}