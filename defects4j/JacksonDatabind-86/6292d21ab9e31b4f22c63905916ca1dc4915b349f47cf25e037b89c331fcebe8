{
    "generation": "public JavaType constructType(Type type, TypeBindings bindings) {\n    JavaType result = _fromClass(null, type, bindings);\n    if (result != null) {\n        // Check if it's a subtype and if the super type needs to be resolved recursively\n        if (result.getRawClass().getSuperclass() != null) {\n            JavaType superType = constructType(result.getRawClass().getSuperclass(), bindings);\n            if (superType instanceof ResolvedRecursiveType) {\n                ((ResolvedRecursiveType) superType).resolveSelfReference(result);\n            }\n            result = result.withSuperClass(superType);\n        }\n        // Ensure the type is properly cached\n        JavaType old = _typeCache.putIfAbsent(type, result);\n        if (old != null) {\n            result = old;\n        }\n    }\n    return result;\n}\n\nprivate JavaType _fromClass(ClassStack context, Type type, TypeBindings bindings) {\n    if (type instanceof Class<?>) {\n        Class<?> cls = (Class<?>) type;\n        if (cls == Object.class) {\n            return _constructType(cls, bindings);\n        }\n        if (context == null) {\n            context = new ClassStack(cls);\n        } else {\n            context = context.child(cls);\n        }\n        if (context.hasSeen(cls)) {\n            return new ResolvedRecursiveType(cls, bindings);\n        }\n        JavaType result = _constructType(cls, bindings);\n        context.resolveSelfReference(result);\n        return result;\n    }\n    return _constructType(type, bindings);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}