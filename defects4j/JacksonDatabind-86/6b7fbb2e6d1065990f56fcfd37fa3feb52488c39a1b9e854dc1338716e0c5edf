{
    "generation": "import com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.type.TypeBindings;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\nimport com.fasterxml.jackson.databind.type.SimpleType;\n\npublic class RecursiveType extends SimpleType {\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * Placeholder used until real Super-type is known\n     */\n    protected JavaType _superClass;\n\n    public RecursiveType(Class<?> cls, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts)\n    {\n        super(cls, bindings, superClass, superInts,\n               Object.class == cls, Object.class == cls);\n        _superClass = superClass;\n    }\n\n    @Override\n    protected JavaType _narrow(Class<?> subclass) {\n        return new RecursiveType(subclass, _bindings, _superClass, _superInterfaces);\n    }\n\n    @Override\n    public JavaType getSuperClass() {\n        return _superClass;\n    }\n\n    public void setSuperClass(JavaType superClass) {\n        _superClass = superClass;\n        // Workaround for infinite recursion with TypeFactory.constructType(Class)\n        if (_superClass instanceof RecursiveType) {\n            ((RecursiveType) _superClass).setSuperClass(this);\n        }\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder(40);\n        sb.append(\"[recursive type; \");\n        sb.append(getRawClass().getName());\n        sb.append(']');\n        return sb.toString();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}