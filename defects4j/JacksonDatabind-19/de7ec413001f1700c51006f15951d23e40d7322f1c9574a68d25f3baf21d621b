{
    "generation": "private JavaType _mapType(Class<?> rawClass) {\n    // If the rawClass is Properties, hard code it to have String keys and String values\n    if (Properties.class.isAssignableFrom(rawClass)) {\n        return MapType.construct(rawClass, _typeFactory.constructType(String.class), _typeFactory.constructType(String.class));\n    }\n\n    // For all other classes, keep the existing logic\n    JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n\n    // ok to have no types (\"raw\")\n    if (typeParams == null) {\n        return MapType.construct(rawClass, _unknownType(), _unknownType());\n    }\n\n    // but exactly 2 types if any found\n    if (typeParams.length != 2) {\n        throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n    }\n\n    return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}