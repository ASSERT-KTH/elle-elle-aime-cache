{
    "generation": "/**\n * Checks if a given node represents a reducable function expression.\n * A function expression is considered reducable if it's not a constructor\n * or an immediately invoked function expression (IIFE).\n *\n * @param n the node to check\n * @return true if the node is a reducable function expression, false otherwise\n */\nprivate static boolean isReduceableFunctionExpression(Node n) {\n    return NodeUtil.isFunctionExpression(n) \n           &&!n.isConstructor() \n           &&!isImmediatelyInvokedFunctionExpression(n);\n}\n\n// Assuming the following helper method is already available or needs to be added\nprivate static boolean isImmediatelyInvokedFunctionExpression(Node n) {\n    // Simple implementation, might need adjustments based on the actual AST structure\n    return n.getParent()!= null \n           && n.getParent().isCall() \n           && n.getParent().getFirstChild() == n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}