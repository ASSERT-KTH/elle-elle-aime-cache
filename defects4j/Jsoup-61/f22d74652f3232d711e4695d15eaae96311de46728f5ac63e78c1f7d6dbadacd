{
    "generation": "    // performance sensitive\n    public boolean hasClass(String className) {\n        final String classAttr = attributes.get(\"class\");\n        if (classAttr == null || classAttr.isEmpty()) {\n            return false;\n        }\n\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n        final char attrCharEnd = len > 0 ? classAttr.charAt(0) : '\\0'; // this line was added to fix the bug\n        if (!Character.isWhitespace(attrCharEnd) && wantLen <= len) {\n            // if both lengths are equal, only need compare the className with the attribute\n            if (len == wantLen && classAttr.equalsIgnoreCase(className)) {\n                return true;\n            }\n            // if className might be at start of attr, check it\n            if (classAttr.regionMatches(true, 0, className, 0, wantLen)) {\n                final char afterClassChar = len > wantLen ? classAttr.charAt(wantLen) : '\\0';\n                if (afterClassChar == '\\0' || Character.isWhitespace(afterClassChar)) {\n                    return true;\n                }\n            }\n        }\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    if ((i - start == wantLen) && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass = false;\n                }\n            } else {\n                if (!inClass) {\n                    // we're in a class name : keep the start of the substring\n                    inClass = true;\n                    start = i;\n                }\n            }\n        }\n        // check the last entry\n        if (inClass && len - start == wantLen) {\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}