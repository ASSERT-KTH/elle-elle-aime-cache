{
    "generation": "/**\n * Checks if this element has the specified class.\n * \n * @param className the class name to check for (case insensitive)\n * @return true if this element has the class, false otherwise\n */\n// performance sensitive\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    if (classAttr == null) {\n        return false;\n    }\n    \n    final String classNameLower = className.toLowerCase();\n    final String classAttrLower = classAttr.toLowerCase();\n    final int wantLen = classNameLower.length();\n\n    // scan for whitespace and compare regions (with no string or arraylist allocations)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < classAttrLower.length(); i++) {\n        if (Character.isWhitespace(classAttrLower.charAt(i))) {\n            if (inClass) {\n                // white space ends a class name, compare it with the requested one\n                if (i - start == wantLen && classAttrLower.regionMatches(start, classNameLower, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // we're in a class name : keep the start of the substring\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n\n    // check the last entry\n    if (inClass && classAttrLower.length() - start == wantLen) {\n        return classAttrLower.regionMatches(start, classNameLower, 0, wantLen);\n    }\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}