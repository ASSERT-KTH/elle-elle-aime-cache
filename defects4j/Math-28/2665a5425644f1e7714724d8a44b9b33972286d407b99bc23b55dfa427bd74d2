{
    "generation": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            if (Double.compare(ratio, minRatio) == 0) {\n                minRatioPositions.add(i);\n            } else if (Double.compare(ratio, minRatio) < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        for (Integer row : minRatioPositions) {\n            for (int j = tableau.getNumObjectiveFunctions(); j < tableau.getWidth() - 1; j++) {\n                if (row == tableau.getBasicRow(j)) {\n                    return row; // Select as pivot row, this will break the degeneracy\n                }\n            }\n        }\n    }\n    return minRatioPositions.get(0); // Fallback case to prevent unexpected behavior\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}