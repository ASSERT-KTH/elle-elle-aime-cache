{
    "generation": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n\n        // apply Bland's rule to prevent cycling:\n        // take the row for which the corresponding basic variable has the smallest index\n        int minIndex = tableau.getWidth();\n        Integer minRow = null;\n        for (Integer row : minRatioPositions) {\n            int index = tableau.getBasicRow(row);\n            if (index < minIndex) {\n                minIndex = index;\n                minRow = row;\n            }\n        }\n        if (minRow == null) {\n            // if none of the basic rows matches (e.g. slack/surplus variables after removing basic rows)\n            // use the first column from minRatioPositions and perform pivot operations on tableau to reduce number of free variables\n            minRow = minRatioPositions.get(0);\n        }\n\n        return minRow;\n    }\n\n    return minRatioPositions.get(0);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}