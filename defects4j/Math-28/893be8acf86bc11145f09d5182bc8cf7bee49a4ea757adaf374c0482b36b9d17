{
    "generation": "/**\n * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n * @param tableau simple tableau for the problem\n * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n * @return row with the minimum ratio\n */\nprivate Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // Create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // Check if the entry is strictly equal to the current min ratio\n            // Do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() == 1) {\n        return minRatioPositions.get(0);\n    }\n\n    // Handle degeneracy and cycling\n    // 1. Check if there's an artificial variable that can be forced out of the basis\n    for (Integer row : minRatioPositions) {\n        for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n            int column = i + tableau.getArtificialVariableOffset();\n            final double entry = tableau.getEntry(row, column);\n            if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                return row;\n            }\n        }\n    }\n\n    // 2. Apply Bland's rule to prevent cycling\n    // Take the row for which the corresponding basic variable has the smallest index\n    Integer minRow = null;\n    int minIndex = tableau.getWidth();\n    for (Integer row : minRatioPositions) {\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n            if (row.equals(tableau.getBasicRow(i))) {\n                if (i < minIndex) {\n                    minIndex = i;\n                    minRow = row;\n                }\n                break; // Move to the next row once we find the basic variable\n            }\n        }\n    }\n\n    // Additional heuristic: if we're close to maxIterations, prefer the top-most row\n    if (this.iterationCount > this.maxIterations / 2 && minRow != minRatioPositions.get(0)) {\n        return minRatioPositions.get(0);\n    }\n\n    return minRow;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}