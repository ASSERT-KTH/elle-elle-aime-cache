{
    "generation": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            int cmp = Double.compare(ratio, minRatio);\n            if (cmp <= 0) { // use less than or equal to instead of strict equality\n                if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions.clear();\n                }\n                minRatioPositions.add(i);\n            }\n        }\n    }\n\n    if (minRatioPositions.isEmpty()) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // the code below already handles degeneracies properly\n        // so just return the row with the smallest index\n        return Collections.min(minRatioPositions);\n    }\n    return minRatioPositions.get(0);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}