{
    "generation": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            if (Precision.equals(ratio, minRatio, maxUlps)) {\n                minRatioPositions.add(i);\n            } else if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        int minArtificials = Integer.MAX_VALUE;\n        Integer selectedRow = null;\n        for (Integer row : minRatioPositions) {\n            int artificialsInBasis = 0;\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    artificialsInBasis++;\n                }\n            }\n            if (artificialsInBasis < minArtificials) {\n                minArtificials = artificialsInBasis;\n                selectedRow = row;\n            }\n        }\n        return selectedRow;\n    }\n    return minRatioPositions.get(0);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}