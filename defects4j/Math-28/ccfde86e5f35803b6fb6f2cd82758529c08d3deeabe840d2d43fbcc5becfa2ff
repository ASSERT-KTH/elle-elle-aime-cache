{
    "generation": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double entry = tableau.getEntry(i, col);\n        if (entry > 0) {\n            final double ratio = tableau.getRhs(i) / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPositions.clear();\n                minRatioPositions.add(i);\n            } else if (Double.compare(ratio, minRatio) == 0) {\n                minRatioPositions.add(i);\n            }\n        }\n    }\n\n    if (minRatioPositions.isEmpty()) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // apply Bland's rule to prevent cycling:\n        // take the row for which the corresponding basic variable has the smallest index\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            for (int j = 0; j < tableau.getWidth() - 1; j++) {\n                if (row == tableau.getBasicRow(j)) {\n                    if (j < minIndex) {\n                        minIndex = j;\n                        minRow = row;\n                    }\n                    break;\n                }\n            }\n        }\n        return minRow;\n    } else {\n        return minRatioPositions.get(0);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}