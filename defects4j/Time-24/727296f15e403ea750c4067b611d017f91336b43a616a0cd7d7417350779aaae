{
    "generation": "/**\n * Computes the parsed datetime by setting the saved fields.\n * This method is idempotent, but it is not thread-safe.\n *\n * @param resetFields false by default, but when true, unsaved field values are cleared\n * @param text optional text being parsed, to be included in any error message\n * @return milliseconds since 1970-01-01T00:00:00Z\n * @throws IllegalArgumentException if any field is out of range\n * @since 1.3\n */\npublic long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    \n    // adjust for relative week year or year field\n    DurationField isoWeekyear = DurationFieldType.weekyears().getField(ISOChronology.getInstance());\n    DurationField isoYear = DurationFieldType.years().getField(ISOChronology.getInstance());\n    boolean adjustWeekyear = count > 0 && isoWeekyear.equals(savedFields[0].iField.getDurationField());\n    for (int i = count - 1; i >= 0; i--) {\n        DurationField field = savedFields[i].iField.getDurationField();\n        if ((adjustWeekyear &&!isoWeekyear.equals(field)) || (isoWeekyear.equals(field) || (isoYear.equals(field)))) {\n            if (compareReverse(field, DurationFieldType.months().getField(iChrono)) >= 0 && compareReverse(field, DurationFieldType.days().getField(iChrono)) <= 0) {\n                if (isoWeekyear.equals(field) || ((isoYear.equals(field) &&!adjustWeekyear))) {\n                    saveField(DateTimeFieldType.year(), savedFields[i].getValueAsLong());\n                } else {\n                    saveField(DateTimeFieldType.weekyear(), savedFields[i].getValueAsLong());\n                }\n            }\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text!= null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset!= iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text!= null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}