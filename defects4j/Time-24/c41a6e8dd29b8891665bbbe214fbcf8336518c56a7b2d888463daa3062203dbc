{
    "generation": "/**\n * Computes the parsed datetime by setting the saved fields.\n * This method is idempotent, but it is not thread-safe.\n *\n * @param resetFields false by default, but when true, unsaved field values are cleared\n * @param text optional text being parsed, to be included in any error message\n * @return milliseconds since 1970-01-01T00:00:00Z\n * @throws IllegalArgumentException if any field is out of range\n * @since 1.3\n */\npublic long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            SavedField field = savedFields[i];\n            if (field.iField.getType() == DateTimeFieldType.weekyear()) {\n                // Handle week-based year separately\n                int weekyear = field.iValue;\n                int weekOfWeekyear = -1;\n                int dayOfWeek = -1;\n                \n                // Find week of weekyear and day of week\n                for (int j = i + 1; j < count; j++) {\n                    if (savedFields[j].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                        weekOfWeekyear = savedFields[j].iValue;\n                    } else if (savedFields[j].iField.getType() == DateTimeFieldType.dayOfWeek()) {\n                        dayOfWeek = savedFields[j].iValue;\n                    }\n                }\n                \n                if (weekOfWeekyear > 0 && dayOfWeek > 0) {\n                    Chronology chrono = iChrono.withUTC();\n                    millis = chrono.weekyear().set(millis, weekyear);\n                    millis = chrono.weekOfWeekyear().set(millis, weekOfWeekyear);\n                    millis = chrono.dayOfWeek().set(millis, dayOfWeek);\n                    i = count; // Skip remaining fields as weekyear, week, and day are set\n                    break;\n                }\n            }\n            millis = field.set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}