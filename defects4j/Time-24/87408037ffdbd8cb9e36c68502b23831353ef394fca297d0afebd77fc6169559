{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    long millis = iMillis;\n    try {\n        boolean weekyearSet = false;\n        int weekyear = 0;\n        int monthOfYear = 0;\n        int weekOfWeekyear = 0;\n\n        // First pass: collect weekyear, month, and week information\n        for (int i = 0; i < count; i++) {\n            DateTimeField field = savedFields[i].iField;\n            if (field.getType() == DateTimeFieldType.weekyear()) {\n                weekyearSet = true;\n                weekyear = savedFields[i].iValue;\n            } else if (field.getType() == DateTimeFieldType.monthOfYear()) {\n                monthOfYear = savedFields[i].iValue;\n            } else if (field.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                weekOfWeekyear = savedFields[i].iValue;\n            }\n        }\n\n        // If weekyear, month, and week are set, adjust the millis\n        if (weekyearSet && monthOfYear > 0 && weekOfWeekyear > 0) {\n            Chronology chrono = GJChronology.getInstanceUTC();\n            LocalDate date = new LocalDate(weekyear, monthOfYear, 1, chrono);\n            date = date.withWeekOfWeekyear(weekOfWeekyear);\n            millis = date.toDateTimeAtStartOfDay().getMillis();\n        } else {\n            // Standard processing for other fields\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}