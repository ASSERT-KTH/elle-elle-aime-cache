{
    "generation": "/**\n * Computes the parsed datetime by setting the saved fields.\n * This method is idempotent, but it is not thread-safe.\n *\n * @param resetFields false by default, but when true, unsaved field values are cleared\n * @param text optional text being parsed, to be included in any error message\n * @return milliseconds since 1970-01-01T00:00:00Z\n * @throws IllegalArgumentException if any field is out of range\n * @since 1.3\n */\npublic long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    // Handle week-based years\n    int weekyearIndex = -1;\n    int weekOfWeekyearIndex = -1;\n    int dayOfWeekIndex = -1;\n\n    for (int i = 0; i < count; i++) {\n        DateTimeFieldType type = savedFields[i].iField.getType();\n        if (type == DateTimeFieldType.weekyear()) {\n            weekyearIndex = i;\n        } else if (type == DateTimeFieldType.weekOfWeekyear()) {\n            weekOfWeekyearIndex = i;\n        } else if (type == DateTimeFieldType.dayOfWeek()) {\n            dayOfWeekIndex = i;\n        }\n    }\n\n    if (weekyearIndex >= 0 && weekOfWeekyearIndex >= 0) {\n        int weekyear = savedFields[weekyearIndex].iValue;\n        int weekOfWeekyear = savedFields[weekOfWeekyearIndex].iValue;\n        int dayOfWeek = (dayOfWeekIndex >= 0) ? savedFields[dayOfWeekIndex].iValue : 1;\n\n        // Find the first day of the weekyear\n        LocalDate firstDayOfYear = new LocalDate(weekyear, 1, 4, iChrono);\n        int firstDayOfWeek = firstDayOfYear.getDayOfWeek();\n        int offset = (firstDayOfWeek <= 4) ? 1 - firstDayOfWeek : 8 - firstDayOfWeek;\n\n        LocalDate firstDayOfWeekyear = firstDayOfYear.plusDays(offset);\n\n        // Calculate the target date\n        LocalDate targetDate = firstDayOfWeekyear.plusWeeks(weekOfWeekyear - 1).plusDays(dayOfWeek - 1);\n\n        // If the target date is in the previous year, adjust the weekyear\n        if (targetDate.getYear() < weekyear) {\n            weekyear--;\n            firstDayOfYear = new LocalDate(weekyear, 1, 4, iChrono);\n            firstDayOfWeek = firstDayOfYear.getDayOfWeek();\n            offset = (firstDayOfWeek <= 4) ? 1 - firstDayOfWeek : 8 - firstDayOfWeek;\n            firstDayOfWeekyear = firstDayOfYear.plusDays(offset);\n            targetDate = firstDayOfWeekyear.plusWeeks(weekOfWeekyear - 1).plusDays(dayOfWeek - 1);\n        } else if (targetDate.getYear() > weekyear) {\n            weekyear++;\n            firstDayOfYear = new LocalDate(weekyear, 1, 4, iChrono);\n            firstDayOfWeek = firstDayOfYear.getDayOfWeek();\n            offset = (firstDayOfWeek <= 4) ? 1 - firstDayOfWeek : 8 - firstDayOfWeek;\n            firstDayOfWeekyear = firstDayOfYear.plusDays(offset);\n            targetDate = firstDayOfWeekyear.plusWeeks(weekOfWeekyear - 1).plusDays(dayOfWeek - 1);\n        }\n\n        // Set the year, month, and day of month fields\n        saveField(DateTimeFieldType.year(), targetDate.getYear());\n        saveField(DateTimeFieldType.monthOfYear(), targetDate.getMonthOfYear());\n        saveField(DateTimeFieldType.dayOfMonth(), targetDate.getDayOfMonth());\n\n        // Remove week-based fields\n        if (weekyearIndex >= 0) {\n            savedFields[weekyearIndex] = null;\n        }\n        if (weekOfWeekyearIndex >= 0) {\n            savedFields[weekOfWeekyearIndex] = null;\n        }\n        if (dayOfWeekIndex >= 0) {\n            savedFields[dayOfWeekIndex] = null;\n        }\n\n        // Compact the array\n        int newCount = 0;\n        for (int i = 0; i < count; i++) {\n            if (savedFields[i] != null) {\n                savedFields[newCount++] = savedFields[i];\n            }\n        }\n        count = newCount;\n    }\n\n    // If week-based fields were present, recompute\n    if (weekyearIndex >= 0 && weekOfWeekyearIndex >= 0) {\n        return computeMillis(resetFields, text);\n    }\n\n    // Proceed with the original logic\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}