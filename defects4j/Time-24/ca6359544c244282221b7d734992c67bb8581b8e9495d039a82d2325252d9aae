{
    "generation": "/**\n * Computes the parsed datetime by setting the saved fields.\n * This method is idempotent, but it is not thread-safe.\n *\n * @param resetFields false by default, but when true, unsaved field values are cleared\n * @param text optional text being parsed, to be included in any error message\n * @return milliseconds since 1970-01-01T00:00:00Z\n * @throws IllegalArgumentException if any field is out of range\n * @since 1.3\n */\npublic long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // Check if the first field is a week year or week field\n        DurationField firstField = savedFields[0].iField.getDurationField();\n        DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n        DateTimeFieldType firstFieldType = savedFields[0].iField.getType();\n        if (firstField == weeks || firstFieldType == DateTimeFieldType.weekyear()) {\n            // Adjust base year for week year if necessary\n            int defaultYear = iDefaultYear;\n            if (firstFieldType == DateTimeFieldType.weekyear()) {\n                defaultYear = getWeekYear(defaultYear, iChrono);\n            }\n            saveField(DateTimeFieldType.year(), defaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}\n\nprivate int getWeekYear(int year, Chronology chrono) {\n    // Implement logic to get the week year based on the chronology\n    // This is a placeholder and should be replaced with actual implementation\n    return year;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}