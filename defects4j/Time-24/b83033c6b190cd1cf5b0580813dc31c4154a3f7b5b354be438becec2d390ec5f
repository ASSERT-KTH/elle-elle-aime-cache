{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, weeks) == 0) {\n            int firstWeekOfYear = iChrono.weekOfWeekyear().get(iDefaultYear, 1, 4);\n            if (firstWeekOfYear == 53) {\n                saveField(DateTimeFieldType.year(), iDefaultYear - 1);\n            } else if (firstWeekOfYear == 1) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n            } else {\n                // If the first week fell between 2 and 4, the week is from the previous year\n                saveField(DateTimeFieldType.year(), iDefaultYear - 1);\n                return computeMillis(resetFields, text);\n            }\n        } else if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    ...\n    // Rest of the function remains the same\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}