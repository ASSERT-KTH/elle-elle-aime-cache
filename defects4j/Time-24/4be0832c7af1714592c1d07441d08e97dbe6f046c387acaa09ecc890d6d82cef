{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    \n    // Sort fields in the order they should be applied\n    sort(savedFields, count);\n    \n    // Check if the first field is a week-year field\n    boolean isWeekYearFirst = (count > 0 && savedFields[0].iField.getType() == DateTimeFieldType.weekyear());\n    \n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    // If the first field was a week-year, adjust the base year\n    if (isWeekYearFirst) {\n        // Assuming iDefaultYear is the base year to adjust\n        int weekYear = getWeekyear(millis);\n        int defaultYear = iDefaultYear;\n        int yearDifference = weekYear - defaultYear;\n        millis += yearDifference * DateTimeConstants.MILLIS_PER_YEAR;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}