{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n\n        // Handle weekyear parsing\n        boolean hasWeekyear = false;\n        int weekyearIndex = -1;\n        int weekOfWeekyearIndex = -1;\n        for (int i = 0; i < count; i++) {\n            if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n                hasWeekyear = true;\n                weekyearIndex = i;\n            } else if (savedFields[i].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                weekOfWeekyearIndex = i;\n            }\n        }\n\n        if (hasWeekyear && weekOfWeekyearIndex != -1) {\n            int weekyear = savedFields[weekyearIndex].iValue;\n            int weekOfWeekyear = savedFields[weekOfWeekyearIndex].iValue;\n            \n            YearWeek week = YearWeek.of(weekyear, weekOfWeekyear, iChrono);\n            \n            // Set the year and week of weekyear\n            saveField(DateTimeFieldType.year(), week.getYear());\n            saveField(DateTimeFieldType.weekOfWeekyear(), week.getWeekOfWeekyear());\n            \n            // Remove the original weekyear and week of weekyear fields\n            removeField(weekyearIndex);\n            removeField(weekOfWeekyearIndex);\n            \n            // Update the count and savedFields array\n            count -= 2;\n            SavedField[] newSavedFields = new SavedField[count];\n            System.arraycopy(savedFields, 0, newSavedFields, 0, weekyearIndex);\n            System.arraycopy(savedFields, weekyearIndex + 1, newSavedFields, weekyearIndex, count - weekyearIndex);\n            savedFields = newSavedFields;\n            \n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}\n\n// Additional helper methods\n\nprivate void removeField(int index) {\n    iSavedFields[index] = null;\n    for (int i = index; i < iSavedFieldsCount - 1; i++) {\n        iSavedFields[i] = iSavedFields[i + 1];\n    }\n    iSavedFieldsCount--;\n}\n\nprivate static class YearWeek {\n    private final int year;\n    private final int weekOfWeekyear;\n\n    public static YearWeek of(int weekyear, int weekOfWeekyear, Chronology chrono) {\n        // Adjust the weekyear if the first week of the given weekyear starts in the previous year\n        LocalDate date = new LocalDate(weekyear, 1, 4, chrono);\n        int firstWeek = date.getWeekOfWeekyear();\n        if (weekOfWeekyear < firstWeek) {\n            weekyear--;\n            weekOfWeekyear += date.weekOfWeekyear().getMaximumValue();\n        } else if (weekOfWeekyear > date.weekOfWeekyear().getMaximumValue()) {\n            weekyear++;\n            weekOfWeekyear -= date.weekOfWeekyear().getMaximumValue();\n        }\n        return new YearWeek(weekyear, weekOfWeekyear);\n    }\n\n    private YearWeek(int year, int weekOfWeekyear) {\n        this.year = year;\n        this.weekOfWeekyear = weekOfWeekyear;\n    }\n\n    public int getYear() {\n        return year;\n    }\n\n    public int getWeekOfWeekyear() {\n        return weekOfWeekyear;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}