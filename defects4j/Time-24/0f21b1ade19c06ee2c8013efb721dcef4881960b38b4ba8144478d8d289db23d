{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            if (savedFields[i].iFieldType == DateTimeFieldType.weekyear() && savedFields[i].iField != null) {\n                // Adjust for week-based year\n                Weekyear weekyear = savedFields[i].iWeekyear;\n                if (weekyear != null) {\n                    int year = weekyear.getYear();\n                    DurationField millisField = iChrono.millis();\n                    Chronic chrony = iChrono.withUTC();\n                    millis = chrony.year().set(0, year);\n                    millis = chrony.weekOfWeekyear().set(millis, weekyear.getWeekOfWeekyear());\n                    millis = chrony.dayOfWeek().set(millis, weekyear.getDayOfWeek());\n                    millis = millisField.add(millis, 1); // adjust for possible DST\n                }\n            } else {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}