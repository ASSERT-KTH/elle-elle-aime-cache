{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    \n    // Handle weekyear and week fields\n    boolean hasWeekyear = false;\n    boolean hasWeek = false;\n    for (int i = 0; i < count; i++) {\n        if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n            hasWeekyear = true;\n        }\n        if (savedFields[i].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n            hasWeek = true;\n        }\n    }\n    \n    if (hasWeekyear && hasWeek) {\n        // When both weekyear and week are present, we need to handle them specially\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear() ||\n                    savedFields[i].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            }\n            for (int i = 0; i < count; i++) {\n                if (savedFields[i].iField.getType() != DateTimeFieldType.weekyear() &&\n                    savedFields[i].iField.getType() != DateTimeFieldType.weekOfWeekyear()) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }\n\n    // Original logic for non-weekyear cases\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}