{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    \n    // Check if we have both week-of-year and year (or week-year) fields\n    boolean hasWeek = false;\n    boolean hasYear = false;\n    for (int i = 0; i < count; i++) {\n        DateTimeFieldType type = savedFields[i].iField.getType();\n        if (type == DateTimeFieldType.weekOfWeekyear()) {\n            hasWeek = true;\n        } else if (type == DateTimeFieldType.year() || type == DateTimeFieldType.weekyear()) {\n            hasYear = true;\n        }\n    }\n\n    // If we have both week and year, we need to handle the special case\n    if (hasWeek && hasYear) {\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n\n        // Adjust the year if necessary\n        int weekYear = iChrono.weekyear().get(millis);\n        for (int i = 0; i < count; i++) {\n            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n                int year = savedFields[i].iValue;\n                if (year != weekYear) {\n                    millis = iChrono.weekyear().set(millis, year);\n                }\n                break;\n            }\n        }\n\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n\n        return millis;\n    }\n\n    // Original logic for other cases\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}