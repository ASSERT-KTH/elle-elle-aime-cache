{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    if (count > 0) {\n        // Check if we have a weekyear field\n        boolean hasWeekYear = false;\n        boolean hasWeekOfWeekyear = false;\n        boolean hasMonthOfYear = false;\n        \n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType fieldType = savedFields[i].iField.getType();\n            if (fieldType == DateTimeFieldType.weekyear()) {\n                hasWeekYear = true;\n            } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {\n                hasWeekOfWeekyear = true;\n            } else if (fieldType == DateTimeFieldType.monthOfYear()) {\n                hasMonthOfYear = true;\n            }\n        }\n\n        if (hasWeekYear && hasWeekOfWeekyear && hasMonthOfYear) {\n            // If we have weekyear, week of weekyear, and month of year, we need to adjust the year\n            for (int i = 0; i < count; i++) {\n                if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n                    int weekYear = savedFields[i].iValue;\n                    int weekOfWeekyear = 1;  // Default to week 1 if not specified\n                    int monthOfYear = 1;     // Default to January if not specified\n\n                    // Find the actual week of weekyear and month of year if specified\n                    for (int j = 0; j < count; j++) {\n                        if (savedFields[j].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                            weekOfWeekyear = savedFields[j].iValue;\n                        } else if (savedFields[j].iField.getType() == DateTimeFieldType.monthOfYear()) {\n                            monthOfYear = savedFields[j].iValue;\n                        }\n                    }\n\n                    // Calculate the correct year based on weekyear, week of weekyear, and month of year\n                    LocalDate baseDate = new LocalDate(weekYear, 1, 4, iChrono);  // First week of weekyear\n                    int year = baseDate.year().get();\n                    int weeksInYear = iChrono.weekOfWeekyear().getMaximumValue(new LocalDate(year, 12, 31, iChrono));\n\n                    if (weekOfWeekyear > weeksInYear) {\n                        year++;\n                        weekOfWeekyear = 1;\n                    } else if (weekOfWeekyear == 1 && monthOfYear > 1) {\n                        year--;\n                    }\n\n                    // Replace the weekyear field with the calculated year\n                    savedFields[i] = new SavedField(DateTimeFieldType.year(), year, savedFields[i].iText, savedFields[i].iField);\n                    break;\n                }\n            }\n        } else {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}