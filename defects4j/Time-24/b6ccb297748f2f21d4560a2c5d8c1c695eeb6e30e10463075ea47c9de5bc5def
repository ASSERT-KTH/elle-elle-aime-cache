{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    boolean weekYearSet = false;\n    int weekYear = 0;\n    int weekOfWeekyear = 0;\n    int dayOfWeek = 1; // Default to Monday\n\n    try {\n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType fieldType = savedFields[i].iField.getType();\n            if (fieldType == DateTimeFieldType.weekyear()) {\n                weekYear = savedFields[i].iValue;\n                weekYearSet = true;\n            } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {\n                weekOfWeekyear = savedFields[i].iValue;\n            } else if (fieldType == DateTimeFieldType.dayOfWeek()) {\n                dayOfWeek = savedFields[i].iValue;\n            } else {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        }\n\n        if (weekYearSet) {\n            // Set the millis to the start of the weekyear\n            millis = iChrono.weekyear().set(millis, weekYear);\n            // Set the millis to the start of the weekOfWeekyear\n            millis = iChrono.weekOfWeekyear().set(millis, weekOfWeekyear);\n            // Set the millis to the start of the dayOfWeek\n            millis = iChrono.dayOfWeek().set(millis, dayOfWeek);\n            // Adjust to the correct day of the week\n            DateTimeField weekOfWeekyearField = iChrono.weekOfWeekyear();\n            int startOfWeek = weekOfWeekyearField.get(millis);\n            if (startOfWeek != weekOfWeekyear) {\n                int daysToAdd = (weekOfWeekyear - startOfWeek) * 7 + (dayOfWeek - iChrono.dayOfWeek().get(millis));\n                millis += iChrono.days().getField(iChrono).getDurationField().getMillis(daysToAdd);\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}