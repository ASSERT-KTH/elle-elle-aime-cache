{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    long millis = iMillis;\n    boolean yearParsed = false;\n    boolean weekyearParsed = false;\n    boolean monthParsed = false;\n    boolean weekParsed = false;\n    int year = iDefaultYear;\n    int weekyear = iDefaultYear;\n    int month = 1;\n    int week = 1;\n\n    try {\n        for (int i = 0; i < count; i++) {\n            SavedField field = savedFields[i];\n            DateTimeFieldType fieldType = field.iField.getType();\n            if (fieldType == DateTimeFieldType.year()) {\n                year = field.getSetValue();\n                yearParsed = true;\n            } else if (fieldType == DateTimeFieldType.weekyear()) {\n                weekyear = field.getSetValue();\n                weekyearParsed = true;\n            } else if (fieldType == DateTimeFieldType.monthOfYear()) {\n                month = field.getSetValue();\n                monthParsed = true;\n            } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {\n                week = field.getSetValue();\n                weekParsed = true;\n            } else {\n                millis = field.set(millis, resetFields);\n            }\n        }\n\n        if (weekyearParsed) {\n            // If weekyear is parsed, use it as the base year\n            year = weekyear;\n        }\n\n        if (yearParsed || weekyearParsed) {\n            // Set the year\n            millis = iChrono.year().set(millis, year, DateTimeUtils.getChronology(millis, iChrono));\n        }\n\n        if (monthParsed) {\n            // Set the month\n            millis = iChrono.monthOfYear().set(millis, month, DateTimeUtils.getChronology(millis, iChrono));\n        }\n\n        if (weekParsed) {\n            // Set the week\n            if (!monthParsed) {\n                // If month is not parsed, set to the first month of the year\n                millis = iChrono.monthOfYear().set(millis, 1, DateTimeUtils.getChronology(millis, iChrono));\n            }\n            // Calculate the correct day of the year based on week of year\n            LocalDate date = new LocalDate(millis, iChrono);\n            date = date.withWeekOfWeekyear(week).withDayOfWeek(1); // Set to the first day of the week\n            millis = date.toDateTimeAtStartOfDay().getMillis();\n        }\n\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}