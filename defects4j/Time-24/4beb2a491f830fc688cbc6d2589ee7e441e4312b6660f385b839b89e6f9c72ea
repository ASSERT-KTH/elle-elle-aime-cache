{
    "generation": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    // Ensure the week-based year is correctly adjusted\n    if (iChrono instanceof GJChronology) {\n        GJChronology gjChrono = (GJChronology) iChrono;\n        LocalDate localDate = new LocalDate(millis, gjChrono);\n        int year = localDate.getYear();\n        int weekOfWeekyear = localDate.getWeekOfWeekyear();\n        int monthOfYear = localDate.getMonthOfYear();\n        int dayOfMonth = localDate.getDayOfMonth();\n        int dayOfWeek = localDate.getDayOfWeek();\n        \n        // Adjust the year if the week-based year is different\n        if (weekOfWeekyear == 1 && monthOfYear > 12) {\n            year += 1;\n        } else if (weekOfWeekyear == 53 && monthOfYear == 1) {\n            year -= 1;\n        }\n        \n        millis = gjChrono.year().set(millis, year);\n        millis = gjChrono.monthOfYear().set(millis, monthOfYear);\n        millis = gjChrono.dayOfMonth().set(millis, dayOfMonth);\n        millis = gjChrono.dayOfWeek().set(millis, dayOfWeek);\n    }\n    \n    return millis;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}