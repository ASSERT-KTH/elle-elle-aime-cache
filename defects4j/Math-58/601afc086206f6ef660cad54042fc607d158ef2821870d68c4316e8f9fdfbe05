{
    "generation": "    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        double[] parameters = fit(new Gaussian.Parametric(), guess);\n        if (Double.isNaN(parameters[0]) || Double.isNaN(parameters[1]) || Double.isNaN(parameters[2])) {\n            // try to fit a gaussian with reversed x values\n            int len = getObservations().length;\n            WeightedObservedPoint[] reversed = new WeightedObservedPoint[len];\n            for (int i = 0; i < len; i++) {\n                reversed[i] = new WeightedObservedPoint(\n                        getObservations()[i].getWeight(),\n                        -getObservations()[i].getX(),\n                        getObservations()[i].getY()\n                );\n            }\n\n            ParameterGuesser guesser = new ParameterGuesser(reversed);\n            double[] reversedGuess = guesser.guess();\n\n            // reverse back the parameters\n            double[] reversedParameters = fit(new Gaussian.Parametric(), reversedGuess);\n            if (!Double.isNaN(reversedParameters[0]) &&\n                !Double.isNaN(reversedParameters[1]) &&\n                !Double.isNaN(reversedParameters[2])) {\n                parameters[0] = reversedParameters[0];\n                parameters[1] = -reversedParameters[1];\n                parameters[2] = reversedParameters[2];\n            }\n        }\n        return parameters;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}