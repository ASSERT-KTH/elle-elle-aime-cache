{
    "generation": "    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        \n        // Define bounds for the parameters: amplitude, mean, sigma\n        // Sigma must be strictly positive\n        double[] lowerBounds = { Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0 };\n        double[] upperBounds = { Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY };\n        \n        // Create a bounded optimizer\n        BoundMaximizer<ParametricUnivariateFunction> boundedOptimizer = \n            new BoundMaximizer<>(getOptimizer(), lowerBounds, upperBounds);\n        \n        return boundedOptimizer.optimize(new MaxEval(Integer.MAX_VALUE), \n                                       new LeastSquaresProblem.Builder()\n                                           .start(guess)\n                                           .model(new Gaussian.Parametric())\n                                           .target(getYObservables())\n                                           .weight(new DiagonalMatrix(toArray(getWeightObservables())))\n                                           .build())\n                             .getPoint()\n                             .toArray();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}