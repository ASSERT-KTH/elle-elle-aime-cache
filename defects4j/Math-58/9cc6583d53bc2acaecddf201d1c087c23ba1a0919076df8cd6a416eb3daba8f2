{
    "generation": "/**\n * Fits a Gaussian function to the observed points.\n *\n * @return the parameters of the Gaussian function that best fits the\n * observed points (in the same order as above).\n */\npublic double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n    // Transform the initial guess for sigma to its logarithm\n    double[] transformedGuess = new double[] { guess[0], guess[1], Math.log(guess[2]) };\n    final double[] transformedResult = fit(new Gaussian.Parametric() {\n        @Override\n        public double value(double x, double... p) {\n            // Exploit the transformation for sigma\n            return Gaussian.value(x, p[0], p[1], Math.exp(p[2]));\n        }\n\n        @Override\n        public double[] gradient(double x, double... p) {\n            // Exploit the transformation for sigma\n            double[] gradient = Gaussian.gradient(x, p[0], p[1], Math.exp(p[2]));\n            // Adjust the gradient for the transformation\n            gradient[2] *= Math.exp(p[2]);\n            return gradient;\n        }\n    }, transformedGuess);\n\n    // Transform the result back to the original parameter space\n    return new double[] { transformedResult[0], transformedResult[1], Math.exp(transformedResult[2]) };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}