{
    "generation": "    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        double[] parameters = fit(new Gaussian.Parametric(), guess);\n        if (Double.isNaN(parameters[0]) || Double.isNaN(parameters[1]) || Double.isNaN(parameters[2])) {\n            // try again using a different starting point\n            double[] newGuess = new double[3];\n            if (guess[0] == 0) {\n                newGuess[0] = 1e-10;\n            } else {\n                newGuess[0] = guess[0];\n            }\n\n            if (guess[1] == 0) {\n                newGuess[1] = 1e-10;\n            } else {\n                newGuess[1] = guess[1];\n            }\n\n            if (guess[2] <= 0) {\n                newGuess[2] = 1e-10;\n            } else {\n                newGuess[2] = guess[2];\n            }\n\n            parameters = fit(new Gaussian.Parametric(), newGuess);\n\n        }\n        return parameters;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}