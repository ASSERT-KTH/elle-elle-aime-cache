{
    "generation": "/**\n * Fits a Gaussian function to the observed points.\n *\n * @return the parameters of the Gaussian function that best fits the\n * observed points (in the same order as above).\n */\npublic double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n    // Transform the guess to ensure sigma is positive\n    final double[] transformedGuess = new double[]{guess[0], Math.log(guess[1]), guess[2]};\n\n    Optimum optimum = optimizer.optimize(\n        new MaxIter(1000),\n        new ObjectiveFunction(new GaussianTransformer()),\n        new LeastSquaresProblem.Constraints(),\n        new InitialGuess(transformedGuess)\n    );\n\n    double[] result = optimum.getPoint().toArray();\n    // Transform back the result to the original parameter space\n    return new double[]{result[0], Math.exp(result[1]), result[2]};\n}\n\nprivate class GaussianTransformer implements MultivariateVectorFunction {\n    @Override\n    public double[] value(double[] point) {\n        double[] params = new double[]{point[0], Math.exp(point[1]), point[2]};\n        return new Gaussian.Parametric().value(point[0], params);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}