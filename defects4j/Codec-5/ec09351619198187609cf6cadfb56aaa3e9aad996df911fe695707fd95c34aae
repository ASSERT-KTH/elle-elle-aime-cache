{
    "generation": "    void decode(byte[] in, int inPos, int inAvail) {\n        if (eof) {\n            return;\n        }\n        if (inAvail < 0) {\n            eof = true;\n            if (modulus != 0) {\n                x = x << 6;\n                switch (modulus) {\n                    case 2:\n                        x = x << 6;\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        break;\n                    case 3:\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        break;\n                }\n            }\n            return;\n        }\n        for (int i = inPos; i < inPos + inAvail; i++) {\n            if (buffer == null || buffer.length - pos < decodeSize) {\n                resizeBuffer();\n            }\n            byte b = in[i];\n            if (b == PAD) {\n                // We're done.\n                eof = true;\n                if (modulus != 0) {\n                    x = x << 6;\n                    switch (modulus) {\n                        case 2:\n                            x = x << 6;\n                            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                            break;\n                        case 3:\n                            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                            buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                            break;\n                    }\n                }\n                break;\n            } else {\n                if (b >= 0 && b < DECODE_TABLE.length) {\n                    int result = DECODE_TABLE[b];\n                    if (result >= 0) {\n                        modulus = (modulus + 1) % 4;\n                        x = (x << 6) + result;\n                        if (modulus == 0) {\n                            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                            buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                            buffer[pos++] = (byte) (x & MASK_8BITS);\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}