{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            // Check for a supplementary character\n            if (i + 1 < csLength) {\n                char nextChar = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(nextChar)) {\n                    // Form the supplementary character\n                    int codePoint = Character.toCodePoint(ch, nextChar);\n                    for (int j = 0; j < searchLength; j++) {\n                        if (Character.toCodePoint(searchChars[j], searchChars[j + 1]) == codePoint) {\n                            return true;\n                        }\n                        if (j + 1 < searchLength && Character.isSurrogatePair(searchChars[j], searchChars[j + 1])) {\n                            j++; // Skip the next character in searchChars as it is part of a surrogate pair\n                        }\n                    }\n                }\n            }\n        } else {\n            // Check for a Basic Multilingual Plane character\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}