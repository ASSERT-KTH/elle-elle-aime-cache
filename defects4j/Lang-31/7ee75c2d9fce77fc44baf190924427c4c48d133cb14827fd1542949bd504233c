{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    \n    // Convert searchChars to a set of strings for efficient search, handling surrogate pairs\n    Set<String> searchSet = new HashSet<>();\n    for (int j = 0; j < searchLength; j++) {\n        if (Character.isHighSurrogate(searchChars[j]) && j + 1 < searchLength && Character.isLowSurrogate(searchChars[j + 1])) {\n            searchSet.add(new String(new char[]{searchChars[j], searchChars[j + 1]}));\n            j++; // Skip the low surrogate in the next iteration\n        } else {\n            searchSet.add(String.valueOf(searchChars[j]));\n        }\n    }\n    \n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch) && i + 1 < csLength && Character.isLowSurrogate(cs.charAt(i + 1))) {\n            String potentialMatch = new String(new char[]{ch, cs.charAt(i + 1)});\n            if (searchSet.contains(potentialMatch)) {\n                return true;\n            }\n            i++; // Skip the low surrogate in the next iteration\n        } else {\n            if (searchSet.contains(String.valueOf(ch))) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}