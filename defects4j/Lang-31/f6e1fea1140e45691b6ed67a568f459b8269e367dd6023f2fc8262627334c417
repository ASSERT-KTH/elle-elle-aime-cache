{
    "generation": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                   = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (cs == null || searchChars == null || cs.length() == 0 || searchChars.length == 0) {\n\t\t\treturn false;\n        }\n        for (int i = 0; i < cs.length(); i++) {\n            char ch = cs.charAt(i);\n            if (charIndexInArray(ch, searchChars, 0, searchChars.length) >= 0) {\n                return true;  // high and low should mirror each other\n            }\n            if (i + 1 < cs.length()) {\n                char high = cs.charAt(i);\n                char low = cs.charAt(i + 1);\n                if (Character.isSurrogatePair(high, low) && charIndexInArray(Character.toCodePoint(high, low), searchChars, 0, searchChars.length) >= 0) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n\t}\n\n    private static int charIndexInArray(int ch, char[] chArr, int startPos, int endPos) {\n        if (isSupplementary(ch)) {\n            int codePoint = ch;\n            for (int i = startPos; i < endPos - 1; i++) {\n                char high = chArr[i];\n                char low = chArr[i + 1];\n                if (Character.isSurrogatePair(high, low) && Character.toCodePoint(high, low) == codePoint) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i = startPos; i < endPos; i++) {\n                if (chArr[i] == ch) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    private static boolean isSupplementary(int ch) {\n        return ch >= Character.MIN_SUPPLEMENTARY_CODE_POINT\n            && ch < Character.MAX_CODE_POINT;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}