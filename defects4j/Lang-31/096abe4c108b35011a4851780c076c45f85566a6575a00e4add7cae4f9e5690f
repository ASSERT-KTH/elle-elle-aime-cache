{
    "generation": "\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n        int i = 0, j = 0;\n\t\twhile (i < csLength) {\n\t\t\tif (Character.isHighSurrogate(cs.charAt(i)) && i + 1 < csLength && Character.isLowSurrogate(cs.charAt(i + 1))) {\n\t\t\t\tchar[] testChars = Character.toChars(Character.toCodePoint(cs.charAt(i), cs.charAt(i + 1)));\n\t\t\t\tfor (j = 0; j < searchLength; j++) {\n\t\t\t\t\tchar[] pair = Character.toChars(Character.toCodePoint(searchChars[j], searchChars[j]));\n\t\t\t\t\tif (testChars[0] == pair[0] && testChars[1] == pair[1]) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti += 2;\n\t\t\t} else {\n\t\t\t\tfor (j = 0; j < searchLength; j++) {\n\t\t\t\t\tif (searchChars[j] == cs.charAt(i)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}