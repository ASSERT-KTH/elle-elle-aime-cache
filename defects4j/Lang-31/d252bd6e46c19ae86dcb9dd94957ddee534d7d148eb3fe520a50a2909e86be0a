{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        // Check if this is a high surrogate and there's a next character\n        if (Character.isHighSurrogate(ch) && i + 1 < csLength) {\n            char low = cs.charAt(i + 1);\n            if (Character.isLowSurrogate(low)) {\n                // This is a supplementary character\n                int codePoint = Character.toCodePoint(ch, low);\n                for (int j = 0; j < searchLength; j++) {\n                    if (j + 1 < searchLength && \n                        Character.isHighSurrogate(searchChars[j]) && \n                        Character.isLowSurrogate(searchChars[j + 1])) {\n                        int searchCodePoint = Character.toCodePoint(searchChars[j], searchChars[j + 1]);\n                        if (codePoint == searchCodePoint) {\n                            return true;\n                        }\n                    }\n                }\n                i++; // Skip the low surrogate\n                continue;\n            }\n        }\n        // Regular character check\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}