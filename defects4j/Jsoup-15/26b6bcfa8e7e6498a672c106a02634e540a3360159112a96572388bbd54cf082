{
    "generation": "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                // todo confirm that check\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                // merge attributes onto real html\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\", \"script\")) {\n                return tb.process(t, InHead);\n            } else if (name.equals(\"body\")) {\n                tb.error(this);\n                LinkedList<Element> stack = tb.getStack();\n                if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                    // only in fragment case\n                    return false; // ignore\n                } else {\n                    tb.framesetOk(false);\n                    Element body = stack.get(1);\n                    for (Attribute attribute : startTag.getAttributes()) {\n                        if (!body.hasAttr(attribute.getKey()))\n                            body.attributes().put(attribute);\n                    }\n                }\n            } else if (name.equals(\"frameset\")) {\n                tb.error(this);\n                LinkedList<Element> stack = tb.getStack();\n                if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                    // only in fragment case\n                    return false; // ignore\n                } else if (!tb.framesetOk()) {\n                    return false; // ignore frameset\n                } else {\n                    Element second = stack.get(1);\n                    if (second.parent() != null)\n                        second.remove();\n                    // pop up to html element\n                    while (stack.size() > 1)\n                        stack.removeLast();\n                    tb.insert(startTag);\n                    tb.transition(InFrameset);\n                }\n            } else if (StringUtil.in(name,...                  node.appendChild(lastNode);\n\n                            lastNode = node;\n                        }\n\n                        if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                            if (lastNode.parent() != null)\n                                lastNode.remove();\n                            tb.insertInFosterParent(lastNode);\n                        } else {\n                            if (lastNode.parent() != null)\n                                lastNode.remove();\n                            commonAncestor.appendChild(lastNode);\n                        }\n\n                        Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri());\n                        Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]);\n                        for (Node childNode : childNodes) {\n                            adopter.appendChild(childNode); // append will reparent. thus the clone to avvoid concurrent mod.\n                        }\n                        furthestBlock.appendChild(adopter);\n                        tb.removeFromActiveFormattingElements(formatEl);\n                        // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                        tb.removeFromStack(formatEl);\n                        tb.insertOnStackAfter(furthestBlock, adopter);\n                    }\n                } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                    if (!tb.inScope(\"name\")) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        }\n                        tb.generateImpliedEndTags();\n                        if (!tb.currentElement().nodeName().equals(name))\n                            tb.error(this);\n                        tb.popStackToClose(name);\n                        tb.clearFormattingElementsToLastMarker();\n                    }\n                } else if (name.equals(\"br\")) {\n                    tb.error(this);\n                    tb.process(new Token.StartTag(\"br\"));\n                    return false;\n                } else {\n                    return anyOtherEndTag(t, tb);\n                }\n\n                break;\n            case EOF:\n                // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                // stop parsing\n                break;\n        }\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}