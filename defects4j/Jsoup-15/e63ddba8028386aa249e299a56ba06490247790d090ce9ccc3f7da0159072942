{
    "generation": "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        // ... (other cases remain unchanged)\n\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            // ... (other start tag cases remain unchanged)\n\n            else if (name.equals(\"script\")) {\n                tb.insert(startTag);\n                tb.tokeniser.transition(TokeniserState.ScriptData);\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(Text);\n            }\n            \n            // ... (rest of the start tag cases remain unchanged)\n            break;\n\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.name();\n            // ... (other end tag cases remain unchanged)\n\n            else if (name.equals(\"script\")) {\n                if (!tb.inScope(\"script\")) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.generateImpliedEndTags();\n                if (!tb.currentElement().nodeName().equals(\"script\"))\n                    tb.error(this);\n                tb.popStackToClose(\"script\");\n                tb.tokeniser.transition(TokeniserState.Data);\n            }\n            \n            // ... (rest of the end tag cases remain unchanged)\n            break;\n\n        // ... (other cases remain unchanged)\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}