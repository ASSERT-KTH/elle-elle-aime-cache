{
    "generation": "boolean process(Token t, TreeBuilder tb) {\n    //... (rest of the function remains the same until the `case StartTag` block)\n\n    case StartTag:\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.name();\n        //... (rest of the `case StartTag` block remains the same until the `else if (name.equals(\"textarea\"))` block)\n\n    else if (name.equals(\"textarea\")) {\n        tb.insert(startTag);\n        // NEW LINE: ignore LF if next token\n        if (tb.tokeniser.nextToken()!= null && tb.tokeniser.nextToken().type == Token.TokenType.Character && tb.tokeniser.nextToken().asCharacter().getData().equals(\"\\n\")) {\n            tb.tokeniser.consumeNextToken(); // ignore LF\n        }\n        tb.tokeniser.transition(TokeniserState.Rcdata);\n        tb.markInsertionMode();\n        tb.framesetOk(false);\n        tb.transition(Text);\n    }\n\n    //... (rest of the function remains the same until the `else if (name.equals(\"script\"))` block, which is NEW)\n\n    else if (name.equals(\"script\")) {\n        if (tb.inButtonScope(\"p\")) {\n            tb.process(new Token.EndTag(\"p\"));\n        }\n        tb.reconstructFormattingElements();\n        tb.insert(startTag);\n        tb.tokeniser.transition(TokeniserState.ScriptData);\n        tb.markInsertionMode();\n        tb.framesetOk(false);\n    }\n\n    //... (rest of the function remains the same until the `case EndTag` block)\n\n    case EndTag:\n        Token.EndTag endTag = t.asEndTag();\n        name = endTag.name();\n        //... (rest of the `case EndTag` block remains the same until the `else if (name.equals(\"script\"))` block, which is NEW)\n\n    else if (name.equals(\"script\")) {\n        if (!tb.inScope(name)) {\n            tb.error(this);\n            return false;\n        } else {\n            tb.tokeniser.transition(TokeniserState.Data);\n            tb.clearInsertionMode();\n            tb.generateImpliedEndTags();\n            if (!tb.currentElement().nodeName().equals(name))\n                tb.error(this);\n            tb.popStackToClose(name);\n        }\n    }\n\n    //... (rest of the function remains the same)\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}