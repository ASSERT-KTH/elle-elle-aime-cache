{
    "generation": "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character:\n            // Handle character token\n            // ... (Keep the actual implementation of this case)\n            break;\n        case Comment:\n            // Handle comment token\n            // ... (Implementation unchanged)\n            break;\n        case Doctype:\n            // Handle doctype token\n            // ... (Implementation unchanged)\n            break;\n        case StartTag:\n            // Handle start tag token\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"script\") || name.equals(\"style\")) {\n                // Don't modify content as HTML for script and style tags\n                tb.tokeniser.transition(TokeniserState.RAWTEXT);\n                tb.markInsertionMode();\n                tb.insert(startTag);\n                return true;\n            }\n            // ... (Keep the actual implementation of this case)\n            break;\n        case EndTag:\n            // Handle end tag token\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.name();\n            if (name.equals(\"script\") || name.equals(\"style\")) {\n                // Return from RAWTEXT after script or style tag\n                if (tb.tokeniser.state() == TokeniserState.RAWTEXT) {\n                    tb.tokeniser.transition(tb.originalState());\n                    tb.pop();\n                }\n            }\n            // ... (Keep the actual implementation of this case)\n            break;\n        case EOF:\n            // Handle EOF token\n            // ... (Implementation unchanged)\n            break;\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}