{
    "generation": "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        //... (rest of the function remains the same)\n\n        case StartTag:\n            //... (rest of the StartTag block remains the same)\n\n            else if (StringUtil.in(name, \"style\", \"script\", \"xmp\", \"iframe\", \"noembed\", \"noframes\")) {\n                tb.reconstructFormattingElements();\n                tb.framesetOk(false);\n                handleRawtext(startTag, tb);\n                // FIX: do not transition to different state, handle data within current tag\n                // tb.transition(Text);\n            }\n\n            //... (rest of the function remains the same)\n\n        case EndTag:\n            //... (rest of the EndTag block remains the same)\n\n            else if (StringUtil.in(name, \"style\", \"script\", \"xmp\", \"iframe\", \"noembed\", \"noframes\")) {\n                if (!tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            }\n\n            //... (rest of the function remains the same)\n    }\n    return true;\n}\n\n// Helper function to handle raw text within certain tags\nvoid handleRawtext(Token.StartTag startTag, TreeBuilder tb) {\n    TokeniserState originalState = tb.tokeniser.state();\n    tb.tokeniser.transition(TokeniserState.Rcdata);\n    tb.markInsertionMode();\n    while (true) {\n        Token token = tb.tokeniser.consume();\n        if (token.type == Token.TokenType.EOF || (token.type == Token.TokenType.EndTag && ((Token.EndTag) token).name().equals(startTag.name()))) {\n            tb.tokeniser.transition(originalState);\n            tb.clearInsertionMode();\n            break;\n        }\n        tb.process(token);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}