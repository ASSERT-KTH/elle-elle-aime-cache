{
    "generation": "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        //... (rest of the switch statement remains the same)\n\n        case StartTag:\n            //... (rest of the StartTag case remains the same)\n\n            else if (StringUtil.in(name, \"script\", \"style\")) { // Added new condition for 'script' and 'style'\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.tokeniser.transition(TokeniserState.Rawtext); // Changed to Rawtext to preserve data\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(InHead); // or a new state specifically for script/style if needed\n            }\n\n            //... (rest of the StartTag case remains the same)\n\n        case EndTag:\n            //... (rest of the EndTag case remains the same)\n\n            else if (StringUtil.in(name, \"script\", \"style\")) { // Added new condition for 'script' and 'style'\n                if (!tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                    tb.tokeniser.transition(TokeniserState.Data); // Reset back to Data state\n                }\n            }\n\n            //... (rest of the EndTag case remains the same)\n\n        //... (rest of the switch statement remains the same)\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}