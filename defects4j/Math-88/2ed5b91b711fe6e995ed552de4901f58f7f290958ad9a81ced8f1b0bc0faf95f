{
    "generation": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer basicRow;\n    double mostNegative = Double.NEGATIVE_INFINITY;\n    \n    // Find the most negative basic variable\n    for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow != null) {\n            double entry = getEntry(basicRow, getRhsOffset());\n            if (entry < mostNegative) {\n                mostNegative = entry;\n            }\n        }\n    }\n\n    // Compute the coefficients for the solution\n    for (int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        coefficients[i] = \n            (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n            (restrictToNonNegative ? 0 : mostNegative);\n\n        if (basicRow != null) {\n            boolean isBasic = false;\n            for (int j = 0; j < getOriginalNumDecisionVariables(); j++) {\n                if (getBasicRow(getNumObjectiveFunctions() + j) == basicRow) {\n                    if (j != i) {\n                        coefficients[i] = 0;\n                    } else {\n                        isBasic = true;\n                    }\n                }\n            }\n            if (!isBasic) { \n                coefficients[i] = 0;\n            }\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}