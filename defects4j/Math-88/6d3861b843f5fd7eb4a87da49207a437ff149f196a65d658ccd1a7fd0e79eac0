{
    "generation": "    /**\n     * Get the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p>\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        double mostNegative = Double.POSITIVE_INFINITY;\n\n        // Iterate through all decision variables to find the most negative value in the RHS column\n        for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            if (basicRow != null) {\n                mostNegative = Math.min(mostNegative, getEntry(basicRow, getRhsOffset()));\n            }\n        }\n\n        mostNegative = mostNegative == Double.POSITIVE_INFINITY ? 0 : mostNegative;\n\n        for (int i = 0; i < coefficients.length; i++) {\n            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n\n            // If a decision variable is not in the basis, its value is 0\n            if (basicRow == null) {\n                coefficients[i] = 0;\n            } else {\n                coefficients[i] =\n                    getEntry(basicRow, getRhsOffset()) -\n                    (restrictToNonNegative ? 0 : mostNegative);\n            }\n        }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}