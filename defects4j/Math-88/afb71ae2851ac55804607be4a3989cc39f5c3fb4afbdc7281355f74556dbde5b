{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    double mostNegative = getMostNegativeRhs();\n\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow != null) {\n            coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n            // Check if this variable is the only one that can take this value\n            boolean isUnique = true;\n            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); j++) {\n                if (j != getNumObjectiveFunctions() + i && tableau.getEntry(basicRow, j) == 1) {\n                    isUnique = false;\n                    break;\n                }\n            }\n            if (!isUnique) {\n                coefficients[i] = 0; // If not unique, set to 0\n            }\n        } else {\n            coefficients[i] = restrictToNonNegative ? 0 : -mostNegative;\n        }\n    }\n\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}\n\nprivate double getMostNegativeRhs() {\n    double mostNegative = 0;\n    for (int i = 0; i < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); i++) {\n        Integer basicRow = getBasicRow(i);\n        if (basicRow != null) {\n            double value = getEntry(basicRow, getRhsOffset());\n            if (value < mostNegative) {\n                mostNegative = value;\n            }\n        }\n    }\n    return mostNegative;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}