{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        coefficients[i] = (basicRow == null? 0 : getEntry(basicRow, getRhsOffset()));\n        \n        // Check if this variable is a basic variable in any other constraint\n        if (basicRow!= null) {\n            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + coefficients.length; j++) {\n                if (i!= j && tableau.getEntry(basicRow, j) == 1) {\n                     coefficients[i] = 0;\n                     break; // No need to continue checking once we've set it to 0\n                }\n            }\n        }\n        \n        // Adjust for unrestricted variables (if applicable)\n        if (!restrictToNonNegative) {\n            double mostNegative = getMostNegativeEntryInRHS();\n            coefficients[i] -= mostNegative;\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}\n\n// Helper method to find the most negative entry in the RHS (for unrestricted variables adjustment)\nprivate double getMostNegativeEntryInRHS() {\n    double mostNegative = 0;\n    for (int i = 0; i < tableau.getRowDimension(); i++) {\n        double entry = tableau.getEntry(i, getRhsOffset());\n        if (entry < mostNegative) {\n            mostNegative = entry;\n        }\n    }\n    return mostNegative;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}