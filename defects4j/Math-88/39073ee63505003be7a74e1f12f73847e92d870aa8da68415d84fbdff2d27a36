{
    "generation": "    /**\n     * Get the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p>\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow;\n        double mostNegative = Double.POSITIVE_INFINITY;\n\n        // First pass: determine the most negative RHS value among decision variables\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            if (basicRow != null) {\n                double entry = getEntry(basicRow, getRhsOffset());\n                if (entry < mostNegative) {\n                    mostNegative = entry;\n                }\n            }\n        }\n\n        // Second pass: compute the value for each decision variable\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            if (basicRow == null) {\n                coefficients[i] = 0;\n            } else {\n                coefficients[i] = getEntry(basicRow, getRhsOffset());\n                // Adjust if non-negative restriction is not applied\n                if (!restrictToNonNegative) {\n                    coefficients[i] -= mostNegative;\n                }\n            }\n        }\n\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}