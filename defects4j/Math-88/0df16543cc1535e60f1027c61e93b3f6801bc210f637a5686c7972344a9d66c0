{
    "generation": "    /**\n     * Get the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p>\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow;\n        double mostNegative = Double.POSITIVE_INFINITY;\n\n        // Calculate the most negative value among the RHS entries for non-basic variables\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            if (basicRow != null) {\n                mostNegative = Math.min(mostNegative, getEntry(basicRow, getRhsOffset()));\n            }\n        }\n        mostNegative = mostNegative == Double.POSITIVE_INFINITY ? 0 : mostNegative;\n\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            coefficients[i] =\n                (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                (restrictToNonNegative ? 0 : mostNegative);\n\n            // Ensure coefficients are set properly when variables are associated with basic rows\n            if (basicRow != null) {\n                for (int j = 0; j < getOriginalNumDecisionVariables(); j++) {\n                    if (j != i && tableau.getEntry(basicRow, getNumObjectiveFunctions() + j) != 0) {\n                        coefficients[i] = 0;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}