{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer basicRow;\n    for (int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        // if multiple variables can take a given value \n        // then we choose the first and set the rest equal to 0\n        coefficients[i] =\n            basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n    }\n\n    double[] tableauCoefficients = new double[getOriginalNumDecisionVariables()];\n    \n    for(int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow != null) {\n            for (int j = 0; j < coefficients.length; j++) {\n                // get the contribution of each variable to the objective function\n                tableauCoefficients[j] += coefficients[i] * tableau.getEntry(basicRow, j);\n            }\n        }\n    }\n    \n    double mostNegative = Double.MAX_VALUE;\n    for (int i = 0; i < tableauCoefficients.length; i++) {\n        mostNegative = Math.min(mostNegative, tableauCoefficients[i]);\n    }\n\n    if(restrictToNonNegative) {\n        mostNegative = 0;\n    }\n\n    for (int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        coefficients[i] -= mostNegative * (basicRow == null ? 1 : tableau.getEntry(basicRow, i));\n    }\n\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}