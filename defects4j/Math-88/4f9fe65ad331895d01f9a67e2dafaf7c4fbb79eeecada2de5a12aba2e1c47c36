{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    double mostNegative = Double.MAX_VALUE;\n\n    // Find the most negative value in the RHS vector\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow != null) {\n            double basicRowValue = getEntry(basicRow, getRhsOffset());\n            if (basicRowValue < mostNegative) {\n                mostNegative = basicRowValue;\n            }\n        }\n    }\n    mostNegative = mostNegative == Double.MAX_VALUE ? 0 : mostNegative;\n\n    // Compute the coefficients for each variable\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        coefficients[i] = (basicRow == null) ? 0 : getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n\n        // If multiple variables can take a given value, set them all to zero\n        if (basicRow != null) {\n            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                if (Math.abs(tableau.getEntry(basicRow, j)) > 1e-6) {\n                    coefficients[i] = 0;\n                    break;\n                }\n            }\n        }\n    }\n\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}