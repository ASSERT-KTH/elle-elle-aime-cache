{
    "generation": "/**\n * Get the current solution.\n * <p>\n * {@link #solve} should be called first for this to be the optimal solution.\n * </p>\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer mostNegativeRow = null;\n    double mostNegative = Double.POSITIVE_INFINITY;\n    \n    // Find the most negative value in the RHS of the tableau\n    for (int i = getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); \n         i < tableau.rows(); i++) {\n        double entry = getEntry(i, getRhsOffset());\n        if (entry < mostNegative) {\n            mostNegative = entry;\n            mostNegativeRow = i;\n        }\n    }\n    \n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow!= null) {\n            coefficients[i] = getEntry(basicRow, getRhsOffset());\n            // Adjust for negative values if restrictToNonNegative is false\n            if (!restrictToNonNegative && mostNegativeRow!= null) {\n                coefficients[i] -= mostNegative;\n            }\n            \n            // Check for other variables with the same value and set them to 0\n            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                if (tableau.getEntry(basicRow, j) == 1) {\n                    coefficients[j - getNumObjectiveFunctions()] = 0;\n                }\n            }\n        } else {\n            coefficients[i] = 0;\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}