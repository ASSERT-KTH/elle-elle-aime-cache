{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' '){\n                break;\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1){ // EOF\n            break;\n        }\n        if (len == 0) { // Skip blank lines\n            continue;\n        }\n        // Get keyword\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == '='){ // end of keyword\n                final String keyword = coll.toString(CharsetNames.UTF_8);\n                // Get rest of entry\n                final int restLen = len - read;\n                if (restLen > 0 && restLen < len) { // there is data to read after '='\n                    final byte[] rest = new byte[restLen];\n                    final int got = IOUtils.readFully(i, rest);\n                    if (got != restLen) {\n                        throw new IOException(\"Failed to read Paxheader. Expected \"\n                                              + restLen\n                                              + \" bytes, read \"\n                                              + got);\n                    }\n                    // Drop trailing NL\n                    int valueLen = restLen;\n                    if (rest[restLen - 1] == '\\n') { // check if last character is NL\n                        valueLen--;\n                    }\n                    final String value = new String(rest, 0, valueLen, CharsetNames.UTF_8);\n                    headers.put(keyword, value);\n                } else { // only NL\n                    headers.remove(keyword);\n                }\n                break;\n            }\n            coll.write((byte) ch);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}