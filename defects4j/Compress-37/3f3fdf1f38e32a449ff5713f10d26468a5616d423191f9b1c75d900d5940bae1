{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' '){\n                // Get keyword\n                final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                while((ch = i.read()) != -1) {\n                    read++;\n                    if (ch == '='){ // end of keyword\n                        final String keyword = coll.toString(CharsetNames.UTF_8);\n                        // Get rest of entry\n                        final int restLen = len - read;\n                        if (restLen <= 1) { // only NL or EOF\n                            headers.remove(keyword);\n                            break;\n                        } else {\n                            final byte[] rest = new byte[restLen - 1]; // exclude NL\n                            final int got = IOUtils.readFully(i, rest);\n                            if (got != restLen - 1) {\n                                throw new IOException(\"Failed to read Paxheader. Expected \"\n                                                      + (restLen - 1)\n                                                      + \" bytes, read \"\n                                                      + got);\n                            }\n                            // No need to drop trailing NL as it's already excluded\n                            final String value = new String(rest, CharsetNames.UTF_8);\n                            headers.put(keyword, value);\n                            break;\n                        }\n                    }\n                    coll.write((byte) ch);\n                }\n                break; // Processed single header\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1 || len == 0){ // EOF or blank line\n            break;\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}