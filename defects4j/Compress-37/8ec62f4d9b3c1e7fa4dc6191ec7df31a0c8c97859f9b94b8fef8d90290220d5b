{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        while((ch = i.read())!= -1 && ch!= ' ') {\n            if (ch < '0' || ch > '9') {\n                // Handle invalid length format\n                return headers;\n            }\n            len *= 10;\n            len += ch - '0';\n            read++;\n        }\n        if (ch == -1){ // EOF\n            break;\n        }\n        if (len == 0) { // Skip blank lines\n            i.skip(1); // Skip newline\n            continue;\n        }\n        // Get keyword\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        while((ch = i.read())!= -1) {\n            read++;\n            if (ch == '='){ // end of keyword\n                final String keyword = coll.toString(CharsetNames.UTF_8);\n                // Get rest of entry\n                final int restLen = len - read;\n                if (restLen == 1) { // only NL\n                    headers.remove(keyword);\n                } else {\n                    final byte[] rest = new byte[restLen - 1]; // Exclude newline\n                    final int got = IOUtils.readFully(i, rest);\n                    if (got!= restLen - 1) {\n                        throw new IOException(\"Failed to read \"\n                                              + \"Paxheader. Expected \"\n                                              + restLen - 1\n                                              + \" bytes, read \"\n                                              + got);\n                    }\n                    // From bytes to string\n                    final String value = new String(rest, CharsetNames.UTF_8);\n                    headers.put(keyword, value);\n                }\n                i.skip(1); // Skip newline\n                break; // Processed single header\n            }\n            coll.write((byte) ch);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}