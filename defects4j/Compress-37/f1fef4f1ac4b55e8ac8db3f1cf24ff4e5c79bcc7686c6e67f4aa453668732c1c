{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while (true) { // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean lengthParsed = false;\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                lengthParsed = true;\n                break;\n            } else if (ch >= '0' && ch <= '9') {\n                len = len * 10 + (ch - '0');\n            } else {\n                throw new IOException(\"Invalid character in Pax header length\");\n            }\n        }\n        if (!lengthParsed) {\n            if (ch == -1) { // EOF\n                break;\n            } else {\n                throw new IOException(\"Unexpected end of Pax header length\");\n            }\n        }\n\n        // Get keyword\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == '=') { // end of keyword\n                final String keyword = coll.toString(CharsetNames.UTF_8);\n                // Get rest of entry\n                final int restLen = len - read;\n                if (restLen < 0) {\n                    throw new IOException(\"Invalid Pax header: specified length is less than actual length\");\n                } else if (restLen == 1) { // only NL\n                    headers.remove(keyword);\n                } else {\n                    final byte[] rest = new byte[restLen - 1]; // subtract 1 for NL\n                    final int got = IOUtils.readFully(i, rest);\n                    if (got != restLen - 1) {\n                        throw new IOException(\"Failed to read Pax header. Expected \" +\n                                (restLen - 1) + \" bytes, read \" + got);\n                    }\n                    // Drop trailing NL\n                    final String value = new String(rest, CharsetNames.UTF_8);\n                    headers.put(keyword, value);\n                }\n                break;\n            }\n            coll.write((byte) ch);\n        }\n        if (ch == -1) { // EOF\n            break;\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}