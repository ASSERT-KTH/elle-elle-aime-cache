{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' '){\n                // Get keyword\n                final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                while((ch = i.read()) != -1) {\n                    read++;\n                    if (ch == '='){ // end of keyword\n                        final String keyword = coll.toString(CharsetNames.UTF_8);\n                        // Get rest of entry\n                        final int restLen = len - read;\n                        if (restLen <= 1) { // only NL or blank line\n                            if (restLen == 1) {\n                                headers.remove(keyword);\n                            }\n                            break; // Skip blank lines\n                        }\n                        final byte[] rest = new byte[restLen - 1]; // Adjust for trailing NL\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != restLen - 1) { // Adjust for trailing NL\n                            throw new IOException(\"Failed to read Paxheader. Expected \" + (restLen - 1) + \" bytes, read \" + got);\n                        }\n                        // Drop trailing NL\n                        final String value = new String(rest, 0, restLen - 2, CharsetNames.UTF_8);\n                        headers.put(keyword, value);\n                        break;\n                    }\n                    coll.write((byte) ch);\n                }\n                break; // Processed single header\n            }\n            if (ch == '\\n') { // Handle blank lines\n                continue;\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1){ // EOF\n            break;\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}