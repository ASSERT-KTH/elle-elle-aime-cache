{
    "generation": "    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while (true) { // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n            while ((ch = i.read()) != -1) {\n                if (ch == ' ') {\n                    break; // End of length field\n                }\n                if (ch < '0' || ch > '9') {\n                    throw new IOException(\"Invalid character in Pax header length\");\n                }\n                len = len * 10 + (ch - '0');\n                read++;\n            }\n            if (ch == -1) { // EOF\n                break;\n            }\n            if (len <= 0) {\n                throw new IOException(\"Invalid Pax header length: \" + len);\n            }\n            // Get keyword\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            while ((ch = i.read()) != -1) {\n                read++;\n                if (ch == '=') { // end of keyword\n                    final String keyword = coll.toString(CharsetNames.UTF_8);\n                    // Get rest of entry\n                    final int restLen = len - read;\n                    if (restLen < 0) {\n                        throw new IOException(\"Pax header length mismatch: \" + len + \" vs \" + read);\n                    }\n                    if (restLen == 1) { // only NL\n                        headers.remove(keyword);\n                    } else {\n                        final byte[] rest = new byte[restLen - 1]; // subtract NL\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != restLen - 1) {\n                            throw new IOException(\"Failed to read Paxheader. Expected \" + (restLen - 1) + \" bytes, read \" + got);\n                        }\n                        final String value = new String(rest, CharsetNames.UTF_8);\n                        headers.put(keyword, value);\n                    }\n                    break;\n                }\n                coll.write((byte) ch);\n            }\n            if (ch == -1) { // EOF\n                break;\n            }\n            // Consume the newline character\n            ch = i.read();\n            if (ch != '\\n') {\n                throw new IOException(\"Expected newline after Pax header\");\n            }\n            read++;\n            if (read != len) {\n                throw new IOException(\"Pax header length mismatch: \" + len + \" vs \" + read);\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}