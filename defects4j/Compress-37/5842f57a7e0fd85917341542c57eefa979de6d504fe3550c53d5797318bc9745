{
    "generation": "    Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        while (true) {\n            int ch;\n            int len = 0;\n            int read = 0;\n            boolean isBlankLine = true;\n\n            // Attempt to read the length of the header\n            while ((ch = i.read()) != -1) {\n                read++;\n                if (ch == ' ') {\n                    isBlankLine = false;\n                    break;\n                }\n                // Handle blank lines or lines with non-digit characters\n                if (ch == '\\n' || (ch < '0' || ch > '9')) {\n                    continue;\n                }\n                len *= 10;\n                len += ch - '0';\n            }\n\n            if (isBlankLine || ch == -1) {\n                // Skip blank lines and end of input\n                if (ch == '\\n' || ch == -1) {\n                    continue;\n                }\n                // Any other case, skip until the new line\n                while ((ch = i.read()) != -1 && ch != '\\n');\n                if (ch == -1) {\n                    break;\n                }\n                continue;\n            }\n\n            // Read keyword\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            while ((ch = i.read()) != -1) {\n                read++;\n                if (ch == '=') {\n                    final String keyword = coll.toString(CharsetNames.UTF_8);\n                    // Calculate rest of the entry length\n                    final int restLen = len - read;\n                    if (restLen == 1) { // Only newline case\n                        headers.remove(keyword);\n                    } else if (restLen > 1) { // Ensure positive restLen\n                        final byte[] rest = new byte[restLen];\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != restLen) {\n                            throw new IOException(\"Failed to read \" + \"Paxheader. Expected \" + restLen + \" bytes, read \" + got);\n                        }\n                        // Drop trailing newline\n                        final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n                        headers.put(keyword, value);\n                    }\n                    break;\n                }\n                coll.write((byte) ch);\n            }\n            if (ch == -1) { // EOF\n                break;\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}