{
    "generation": "    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while (true) { // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n            while ((ch = i.read()) != -1 && ch != ' ') {\n                read++;\n                len = len * 10 + (ch - '0');\n            }\n            if (ch == -1) { // EOF\n                break;\n            }\n            if (ch != ' ') {\n                throw new IOException(\"Expected space after length\");\n            }\n            read++;\n            // Get keyword\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            while ((ch = i.read()) != -1 && ch != '=') {\n                read++;\n                coll.write((byte) ch);\n            }\n            if (ch == -1) {\n                throw new IOException(\"Unexpected EOF while reading keyword\");\n            }\n            read++;\n            final String keyword = coll.toString(CharsetNames.UTF_8);\n            // Get rest of entry\n            final int restLen = len - read;\n            if (restLen == 1) { // only NL\n                headers.remove(keyword);\n            } else if (restLen > 0) {\n                final byte[] rest = new byte[restLen];\n                final int got = IOUtils.readFully(i, rest);\n                if (got != restLen) {\n                    throw new IOException(\"Failed to read Paxheader. Expected \"\n                                          + restLen + \" bytes, read \" + got);\n                }\n                // Drop trailing NL\n                final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n                headers.put(keyword, value);\n            } else {\n                throw new IOException(\"Invalid length for Pax header entry\");\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}