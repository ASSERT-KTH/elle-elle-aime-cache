{
    "generation": "import java.io.*;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class PaxHeaderParser {\n\n    private static final String CharsetNames_UTF_8 = \"UTF-8\";\n    private Map<String, String> globalPaxHeaders;\n\n    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while (true) { // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n            while ((ch = i.read()) != -1) {\n                read++;\n                if (ch == ' ') {\n                    // Get keyword\n                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                    while ((ch = i.read()) != -1) {\n                        read++;\n                        if (ch == '=') { // end of keyword\n                            final String keyword = coll.toString(CharsetNames_UTF_8);\n                            // Get rest of entry\n                            final int restLen = len - read;\n                            if (restLen <= 1) { // only NL or blank line\n                                // Skip over blank lines\n                                if (restLen == 0) {\n                                    headers.remove(keyword);\n                                    continue;\n                                }\n                            } else {\n                                final byte[] rest = new byte[restLen];\n                                final int got = readFully(i, rest);\n                                if (got != restLen) {\n                                    throw new IOException(\"Failed to read \" +\n                                                          \"Paxheader. Expected \" +\n                                                          restLen +\n                                                          \" bytes, read \" +\n                                                          got);\n                                }\n                                // Drop trailing NL\n                                final String value = new String(rest, 0,\n                                                                restLen - 1, CharsetNames_UTF_8);\n                                headers.put(keyword, value);\n                            }\n                            break;\n                        }\n                        coll.write((byte) ch);\n                    }\n                    break; // Processed single header\n                }\n                len *= 10;\n                len += ch - '0';\n            }\n            if (ch == -1) { // EOF\n                break;\n            }\n        }\n        return headers;\n    }\n\n    private int readFully(InputStream i, byte[] buffer) throws IOException {\n        int totalRead = 0;\n        while (totalRead < buffer.length) {\n            int read = i.read(buffer, totalRead, buffer.length - totalRead);\n            if (read == -1) {\n                throw new IOException(\"Unexpected end of stream\");\n            }\n            totalRead += read;\n        }\n        return totalRead;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}