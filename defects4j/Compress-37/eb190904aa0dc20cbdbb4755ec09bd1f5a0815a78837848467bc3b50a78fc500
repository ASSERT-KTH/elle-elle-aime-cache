{
    "generation": "import java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.apache.commons.io.IOUtils;\n\npublic class PaxHeaderParser {\n\n    private static final String CharsetNames = \"UTF-8\";\n    private Map<String, String> globalPaxHeaders = new HashMap<>();\n\n    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    public Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while (true) { // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n            while ((ch = i.read()) != -1) {\n                read++;\n                if (ch == ' ') {\n                    // Get keyword\n                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                    while ((ch = i.read()) != -1) {\n                        read++;\n                        if (ch == '=') { // end of keyword\n                            final String keyword = coll.toString(CharsetNames);\n                            // Get rest of entry\n                            final int restLen = len - read;\n                            if (restLen <= 0) { // only NL or invalid length\n                                headers.remove(keyword);\n                            } else {\n                                final byte[] rest = new byte[restLen];\n                                final int got = IOUtils.readFully(i, rest);\n                                if (got != restLen) {\n                                    throw new IOException(\"Failed to read \"\n                                        + \"Paxheader. Expected \" + restLen\n                                        + \" bytes, read \" + got);\n                                }\n                                // Drop trailing NL\n                                final String value = new String(rest, 0, restLen - 1, CharsetNames);\n                                headers.put(keyword, value);\n                            }\n                            break;\n                        }\n                        coll.write((byte) ch);\n                    }\n                    break; // Processed single header\n                }\n                len *= 10;\n                len += ch - '0';\n            }\n            if (ch == -1) { // EOF\n                break;\n            }\n            // Skip the newline character\n            if (len > 0) {\n                i.read();\n            }\n        }\n        return headers;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}