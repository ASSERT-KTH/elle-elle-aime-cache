{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        while((ch = i.read()) != -1) {\n            if (ch == '\\n') { // ignore empty lines\n                continue;\n            }\n            read++;\n            if (ch == ' '){\n                // Get keyword\n                final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                while((ch = i.read()) != -1) {\n                    read++;\n                    if (ch == '='){ // end of keyword\n                        final String keyword = coll.toString(CharsetNames.UTF_8);\n                        // Get rest of entry\n                        final int restLen = len - read;\n                        if (restLen < 1) { // wrong headers format\n                            break;\n                        }\n                        final byte[] rest = new byte[restLen];\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != restLen) {\n                            throw new IOException(\"Failed to read \"\n                                                  + \"Paxheader. Expected \"\n                                                  + restLen\n                                                  + \" bytes, read \"\n                                                  + got);\n                        }\n                        if(rest[got - 1] == '\\n') { // Drop trailing NL\n                            headers.put(keyword, new String(rest, 0, restLen - 1, CharsetNames.UTF_8));\n                        } else {\n                            headers.put(keyword, new String(rest, 0, restLen, CharsetNames.UTF_8));\n                        }\n                        break;\n                    }\n                    coll.write((byte) ch);\n                }\n                break; // Processed single header\n            }\n            if(ch < '0' || ch > '9') { // ignore non-digital characters\n                break;\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1){ // EOF\n            break;\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}