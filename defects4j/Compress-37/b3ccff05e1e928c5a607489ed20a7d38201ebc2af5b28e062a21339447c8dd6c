{
    "generation": "    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while (true) { // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n            boolean foundLength = false;\n            while ((ch = i.read()) != -1) {\n                read++;\n                if (ch == ' ') {\n                    foundLength = true;\n                    break;\n                }\n                if (Character.isDigit(ch)) {\n                    len *= 10;\n                    len += ch - '0';\n                } else { \n                    // If a non-digit character is found unexpectedly, skip invalid line.\n                    while (ch != -1 && ch != '\\n') {\n                        ch = i.read();\n                    }\n                    // Reset for the next potential entry.\n                    read = 0;\n                    len = 0;\n                    continue;\n                }\n            }\n            if (ch == -1 && !foundLength) { // EOF\n                break;\n            }\n            \n            // If len is 0 or invalid, skip processing\n            if (len <= 0) {\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                continue;\n            }\n\n            // Get keyword\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            while ((ch = i.read()) != -1) {\n                read++;\n                if (ch == '=') { // end of keyword\n                    final String keyword = coll.toString(CharsetNames.UTF_8);\n                    // Get rest of entry\n                    final int restLen = len - read;\n                    if (restLen < 0) { // Validate length\n                        throw new IOException(\"Invalid length in Paxheader: \" + len);\n                    } else if (restLen == 1) { // only NL\n                        headers.remove(keyword);\n                        i.read(); // Consume the trailing NL\n                    } else {\n                        final byte[] rest = new byte[restLen];\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != restLen) {\n                            throw new IOException(\"Failed to read \"\n                                                  + \"Paxheader. Expected \"\n                                                  + restLen\n                                                  + \" bytes, read \"\n                                                  + got);\n                        }\n                        // Drop trailing NL\n                        final String value = new String(rest, 0,\n                                                   restLen - 1, CharsetNames.UTF_8);\n                        headers.put(keyword, value);\n                    }\n                    break;\n                }\n                coll.write((byte) ch);\n            }\n            // Skip to the next line if incomplete or invalid.\n            while (ch != -1 && ch != '\\n') {\n                ch = i.read();\n            }\n            if (ch == -1) { // EOF\n                break;\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}