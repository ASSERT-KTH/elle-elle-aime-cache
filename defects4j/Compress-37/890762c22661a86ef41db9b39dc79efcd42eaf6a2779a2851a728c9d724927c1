{
    "generation": "    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while (true) { // get length\n            int ch;\n            int len = 0;\n            boolean foundSpace = false;\n\n            // Read length (a number followed by a space)\n            while ((ch = i.read()) != -1) {\n                if (ch == ' ') {\n                    foundSpace = true;\n                    break;\n                }\n                if (ch < '0' || ch > '9') {\n                    // Skip invalid entries or malformed lines\n                    while ((ch = i.read()) != -1 && ch != '\\n');\n                    continue;\n                }\n                len *= 10;\n                len += ch - '0';\n            }\n\n            if (ch == -1) { // EOF\n                break;\n            }\n\n            if (!foundSpace) {\n                // If no space was found where expected, assume invalid line\n                throw new IOException(\"Invalid Paxheader format: Missing keyword-space separator.\");\n            }\n\n            // Read the keyword\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            while ((ch = i.read()) != -1) {\n                if (ch == '=') { // end of keyword\n                    break;\n                }\n                coll.write((byte) ch);\n            }\n\n            if (ch == -1) { // EOF before '='\n                throw new IOException(\"Invalid Paxheader format: Unexpected end of stream while reading keyword.\");\n            }\n\n            final String keyword = coll.toString(CharsetNames.UTF_8);\n\n            // Get rest of the entry\n            final int restLen = len - (coll.size() + 1 + String.valueOf(len).length() + 1); // length excludes itself and spaces\n            if (restLen < 1) { // only NL or invalid length, skip entry\n                while ((ch = i.read()) != -1 && ch != '\\n');\n                continue;\n            }\n\n            final byte[] rest = new byte[restLen];\n            final int got = IOUtils.readFully(i, rest);\n            if (got != restLen) {\n                throw new IOException(\"Failed to read \"\n                        + \"Paxheader. Expected \"\n                        + restLen\n                        + \" bytes, read \"\n                        + got);\n            }\n\n            // Drop trailing NL\n            if (rest[restLen - 1] != '\\n') {\n                throw new IOException(\"Invalid Paxheader format: Missing newline at the end of entry.\");\n            }\n\n            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n\n            if (value.isEmpty()) {\n                headers.remove(keyword); // Blank value means remove the key\n            } else {\n                headers.put(keyword, value);\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}