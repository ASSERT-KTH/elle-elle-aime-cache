{
    "generation": "import java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class TarArchiveInputStream {\n\n    private static final String CharsetNames.UTF_8 = \"UTF-8\";\n    private Map<String, String> globalPaxHeaders = new HashMap<>();\n\n    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while (true) { // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n            while ((ch = i.read()) != -1) {\n                read++;\n                if (ch == ' ') {\n                    // Skip blank lines\n                    if (len == 0) {\n                        continue;\n                    }\n                    // Get keyword\n                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                    while ((ch = i.read()) != -1) {\n                        read++;\n                        if (ch == '=') { // end of keyword\n                            final String keyword = coll.toString(CharsetNames.UTF_8);\n                            // Get rest of entry\n                            final int restLen = len - read;\n                            if (restLen == 1) { // only NL\n                                headers.remove(keyword);\n                            } else {\n                                final byte[] rest = new byte[restLen];\n                                final int got = IOUtils.readFully(i, rest);\n                                if (got != restLen) {\n                                    throw new IOException(\"Failed to read \" +\n                                                          \"Paxheader. Expected \" +\n                                                          restLen +\n                                                          \" bytes, read \" +\n                                                          got);\n                                }\n                                // Drop trailing NL\n                                final String value = new String(rest, 0,\n                                                                restLen - 1, CharsetNames.UTF_8);\n                                headers.put(keyword, value);\n                            }\n                            break;\n                        }\n                        coll.write((byte) ch);\n                    }\n                    break; // Processed single header\n                }\n                len *= 10;\n                len += ch - '0';\n            }\n            if (ch == -1) { // EOF\n                break;\n            }\n        }\n        return headers;\n    }\n\n    // Dummy method to simulate getting a test stream\n    private TarArchiveInputStream getTestStream(String path) throws IOException {\n        // Implementation not shown\n        return null;\n    }\n\n    // Dummy method to simulate getting the next tar entry\n    private TarArchiveEntry getNextTarEntry() throws IOException {\n        // Implementation not shown\n        return null;\n    }\n\n    // Dummy method to simulate closing the input stream\n    private void close() throws IOException {\n        // Implementation not shown\n    }\n\n    // Dummy class to simulate TarArchiveEntry\n    static class TarArchiveEntry {\n        private String name;\n\n        public TarArchiveEntry(String name) {\n            this.name = name;\n        }\n\n        public String getName() {\n            return name;\n        }\n    }\n\n    // Dummy class to simulate IOUtils\n    static class IOUtils {\n        public static int readFully(InputStream is, byte[] buffer) throws IOException {\n            // Implementation not shown\n            return 0;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}