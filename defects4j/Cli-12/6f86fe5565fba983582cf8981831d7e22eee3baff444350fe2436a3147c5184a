{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens = new ArrayList();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n                \n                // check for equal sign in the argument\n                int equalIndex = opt.indexOf('=');\n                if (equalIndex > 0) { // if equal sign exists and not at start\n                    String optName = opt.substring(0, equalIndex);\n                    String optValue = opt.substring(equalIndex + 1);\n                    \n                    if (options.hasOption(optName)) {\n                        tokens.add(\"--\" + optName);\n                        tokens.add(optValue);\n                    } else if (arg.startsWith(\"--\")) {\n                        tokens.add(arg);\n                    } else if (options.hasOption(optName.substring(0, 1))) {\n                        tokens.add(\"-\" + optName.substring(0, 1));\n                        tokens.add(optValue);\n                    } else {\n                        tokens.add(arg);\n                    }\n                }\n                else if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else if (options.hasOption(arg.substring(0, 2)))\n                {\n                    // the format is a special properties option (-Dproperty=value)\n                    tokens.add(arg.substring(0, 2)); // -D\n                    tokens.add(arg.substring(2)); // property=value\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}