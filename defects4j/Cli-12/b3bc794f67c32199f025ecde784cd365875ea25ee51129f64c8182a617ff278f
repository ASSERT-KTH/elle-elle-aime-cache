{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List<String> tokens = new ArrayList<>();\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            tokens.add(arg);\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n            break;\n        }\n\n        if (arg.startsWith(\"-\") && !\"-\".equals(arg))  // Skip the standalone \"-\" argument\n        {\n            String opt;\n            String value;\n\n            if (arg.indexOf('=') != -1)\n            {\n                opt = arg.substring(0, arg.indexOf('='));\n                value = arg.substring(arg.indexOf('=') + 1);\n            }\n            else if (arg.length() > 2 && arg.startsWith(\"--\"))\n            {\n                opt = arg.substring(0, arg.indexOf('=', 2));\n                value = arg.substring(arg.indexOf('=') + 1);\n            }\n            else\n            {\n                opt = Util.stripLeadingHyphens(arg);\n                tokens.add(arg);\n                continue;\n            }\n\n            Option option = options.getOption(opt);\n            if (option != null && option.hasArg())\n            {\n                tokens.add(opt);\n                tokens.add(value);\n            }\n            else\n            {\n                tokens.add(arg);\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n    }\n\n    return tokens.toArray(new String[0]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}