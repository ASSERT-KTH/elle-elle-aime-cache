{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else if (arg.indexOf('=') != -1)\n            {\n                // Handle options with equals sign\n                String[] splitArg = arg.split(\"=\", 2);\n                String potentialOpt = Util.stripLeadingHyphens(splitArg[0]);\n\n                if (options.hasOption(potentialOpt))\n                {\n                    tokens.add(splitArg[0]);\n                    if (splitArg.length > 1)\n                    {\n                        tokens.add(splitArg[1]);\n                    }\n                }\n                else\n                {\n                    if (splitArg[0].length() >= 2 && options.hasOption(splitArg[0].substring(0, 2)))\n                    {\n                        tokens.add(splitArg[0].substring(0, 2));\n                        tokens.add(splitArg[0].substring(2) + (splitArg.length > 1 ? \"=\" + splitArg[1] : \"\"));\n                    }\n                    else\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n            else\n            {\n                if (arg.length() >= 2 && options.hasOption(arg.substring(0, 2)))\n                {\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}