{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List<String> tokens = new ArrayList<>();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        } else if (arg.startsWith(\"-\")) {\n            if (arg.equals(\"-\")) {\n                tokens.add(\"-\");\n                continue;\n            }\n\n            int equalsIndex = arg.indexOf('=');\n            if (equalsIndex != -1) {\n                String opt = arg.substring(0, equalsIndex);\n                String value = arg.substring(equalsIndex + 1);\n\n                if (options.hasOption(opt.substring(1))) {\n                    tokens.add(opt);\n                    tokens.add(value);\n                } else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            } else {\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt)) {\n                    tokens.add(arg);\n                } else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (i++; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n            break; // Exit the loop after adding the remaining arguments\n        }\n    }\n\n    return tokens.toArray(new String[0]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}