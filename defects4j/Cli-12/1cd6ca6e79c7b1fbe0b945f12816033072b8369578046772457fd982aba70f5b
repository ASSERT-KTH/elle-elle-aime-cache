{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List<String> tokens = new ArrayList<>();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            if (arg.contains(\"=\"))\n            {\n                // Split the argument into the option and its value\n                String[] split = arg.split(\"=\", 2);\n                String option = split[0];\n                String value = split[1];\n\n                // Check if the option exists\n                if (options.hasOption(option))\n                {\n                    tokens.add(option);\n                    tokens.add(value);\n                }\n                else if (options.hasOption(option.substring(0, 2)))\n                {\n                    // Handle -Dproperty=value style\n                    tokens.add(option.substring(0, 2));\n                    tokens.add(option.substring(2) + \"=\" + value);\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                    if (options.getOption(opt).hasArg())\n                    {\n                        i++;\n                        if (i < arguments.length)\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            eatTheRest = stopAtNonOption;\n                        }\n                    }\n                }\n                else if (options.hasOption(arg.substring(0, 2)))\n                {\n                    // the format is --foo=value or -foo=value\n                    // the format is a special properties option (-Dproperty=value)\n                    tokens.add(arg.substring(0, 2)); // -D\n                    tokens.add(arg.substring(2)); // property=value\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return tokens.toArray(new String[0]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}