{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List<String> tokens = new ArrayList<>();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            if (options.hasOption(opt))\n            {\n                int pos = arg.indexOf('=');\n                if (pos == -1)\n                {\n                    tokens.add(arg);\n                }\n                else\n                {\n                    tokens.add(arg.substring(0, pos));\n                    tokens.add(arg.substring(pos + 1));\n                }\n            }\n            else if (opt.length() > 1 && arg.startsWith(\"--\"))\n            {\n                // Long option with equals sign\n                int pos = arg.indexOf('=');\n                if (pos != -1 && options.hasOption(opt.substring(0, pos)))\n                {\n                    tokens.add(arg.substring(0, pos));\n                    tokens.add(arg.substring(pos + 1));\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else if (opt.length() >= 2 && arg.startsWith(\"-\"))\n            {\n                // Short option with equals sign or multi-character short option\n                if (arg.length() >= 3 && arg.charAt(2) == '=' && options.hasOption(arg.substring(0, 2)))\n                {\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(3));\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else\n            {\n                eatTheRest = stopAtNonOption;\n                tokens.add(arg);\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return tokens.toArray(new String[0]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}