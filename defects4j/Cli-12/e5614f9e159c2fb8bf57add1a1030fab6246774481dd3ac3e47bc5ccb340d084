{
    "generation": "/**\n * <p>This flatten method does so using the following rules:\n * <ol>\n *  <li>If an {@link Option} exists for the first character of \n *  the <code>arguments</code> entry <b>OR</b> an {@link Option} \n *  does not exist for the whole <code>argument</code> then\n *  add the first character as an option to the processed tokens\n *  list e.g. \"-D\" and add the rest of the entry to the also.</li>\n *  <li>Otherwise just add the token to the processed tokens list.\n *  </li>\n * </ol>\n * </p>\n *\n * @param options The Options to parse the arguments by.\n * @param arguments The arguments that have to be flattened.\n * @param stopAtNonOption specifies whether to stop \n * flattening when a non option has been encountered\n * @return a String array of the flattened arguments\n */\nprotected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else\n            {\n                if (arg.contains(\"=\") && arg.indexOf(\"=\") > 1)\n                {\n                    String optionStr = arg.substring(0, arg.indexOf(\"=\"));\n                    String optionWithoutLeadingHyphens = Util.stripLeadingHyphens(optionStr);\n                    if (options.hasOption(optionWithoutLeadingHyphens))\n                    {\n                        tokens.add(optionStr);\n                        tokens.add(arg.substring(arg.indexOf(\"=\") + 1));\n                    }\n                    else\n                    {\n                        // Check for single character options with arguments in the form -Dproperty=value\n                        if (arg.length() > 2 && arg.charAt(1)!= '-')\n                        {\n                            String optionChar = arg.substring(1, 2);\n                            if (options.hasOption(optionChar))\n                            {\n                                tokens.add(\"-\" + optionChar);\n                                tokens.add(arg.substring(2));\n                            }\n                            else\n                            {\n                                eatTheRest = stopAtNonOption;\n                                tokens.add(arg);\n                            }\n                        }\n                        else\n                        {\n                            eatTheRest = stopAtNonOption;\n                            tokens.add(arg);\n                        }\n                    }\n                }\n                else\n                {\n                    // Check for single character options with arguments in the form -Dproperty\n                    if (arg.length() > 2 && arg.charAt(1)!= '-')\n                    {\n                        String optionChar = arg.substring(1, 2);\n                        if (options.hasOption(optionChar))\n                        {\n                            tokens.add(\"-\" + optionChar);\n                            tokens.add(arg.substring(2));\n                        }\n                        else\n                        {\n                            eatTheRest = stopAtNonOption;\n                            tokens.add(arg);\n                        }\n                    }\n                    else\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}