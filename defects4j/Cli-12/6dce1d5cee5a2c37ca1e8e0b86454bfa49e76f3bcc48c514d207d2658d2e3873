{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else if (arg.startsWith(\"--\") && arg.length() > 2 && options.hasOption(arg.substring(2, 3)))\n            {\n                // the format is --foo=bar\n                tokens.add(arg.substring(0, 3)); // --f\n                tokens.add(arg.substring(3)); // o=bar\n            }\n            else if (arg.startsWith(\"-\") && arg.length() > 2 && options.hasOption(arg.substring(1, 2)))\n            {\n                // the format is -f=bar\n                tokens.add(arg.substring(0, 2)); // -f\n                tokens.add(arg.substring(2)); // =bar\n            }\n            else\n            {\n                eatTheRest = stopAtNonOption;\n                tokens.add(arg);\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (int j = i + 1; j < arguments.length; j++)\n            {\n                tokens.add(arguments[j]);\n            }\n            break;\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}