{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens = new ArrayList();\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt;\n                String value = null;\n                int equalIndex = arg.indexOf(\"=\");\n\n                if (equalIndex != -1)\n                {\n                    opt = arg.substring(0, equalIndex);\n                    value = arg.substring(equalIndex + 1);\n                }\n                else\n                {\n                    opt = arg;\n                }\n\n                String strippedOpt = Util.stripLeadingHyphens(opt);\n\n                if (options.hasOption(strippedOpt))\n                {\n                    tokens.add(opt);\n                    if (value != null)\n                    {\n                        tokens.add(value);\n                    }\n                }\n                else\n                {\n                    if (stripLeadingHyphens(opt).length() > 1 && options.hasOption(stripLeadingHyphens(opt).substring(0, 1)))\n                    {\n                        // handles case like -Dkey=value\n                        tokens.add(opt.substring(0, 2)); // '-D'\n                        tokens.add(opt.substring(2)); // 'key=value'\n                    }\n                    else\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}