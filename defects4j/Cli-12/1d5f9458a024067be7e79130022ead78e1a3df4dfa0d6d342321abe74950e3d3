{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens = new ArrayList();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt;\n                String value = null;\n                int equalIndex = arg.indexOf('=');\n                \n                if (equalIndex != -1)\n                {\n                    opt = arg.substring(1, equalIndex); // handle both short and long options\n                    value = arg.substring(equalIndex + 1);\n                }\n                else\n                {\n                    opt = Util.stripLeadingHyphens(arg);\n                }\n\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else if (equalIndex != -1 && options.hasOption(opt))\n                {\n                    tokens.add(arg.substring(0, equalIndex)); // add option part\n                    tokens.add(arg.substring(equalIndex + 1)); // add value part\n                }\n                else if (arg.length() >= 2 && options.hasOption(arg.substring(0, 2)))\n                {\n                    // special case for options like -Dproperty=value\n                    tokens.add(arg.substring(0, 2)); // -D\n                    tokens.add(arg.substring(2)); // property=value\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}