{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (arg.startsWith(\"-\")) {\n            String opt;\n            String value = null;\n            int equalsIndex;\n\n            // Split if format is --option=value or -option=value\n            equalsIndex = arg.indexOf(\"=\");\n            if (equalsIndex != -1) {\n                opt = arg.substring(0, equalsIndex);\n                value = arg.substring(equalsIndex + 1);\n            } else {\n                opt = arg;\n            }\n\n            opt = Util.stripLeadingHyphens(opt);\n\n            if (options.hasOption(opt)) {\n                tokens.add(arg);\n            } else if (opt.length() == 1 && options.hasOption(opt)) {\n                // The option is a single character\n                tokens.add(arg.substring(0, 2)); // -D\n                if (value != null) {\n                    tokens.add(value); // Add property=value argument if present\n                } else {\n                    tokens.add(arg.substring(2)); \n                }\n            } else {\n                eatTheRest = stopAtNonOption;\n                tokens.add(arg);\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (i++; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}