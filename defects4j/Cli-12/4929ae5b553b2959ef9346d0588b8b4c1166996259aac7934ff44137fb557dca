{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List<String> tokens = new ArrayList<>();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (arg.startsWith(\"-\")) {\n            // Strip leading hyphens\n            String opt = Util.stripLeadingHyphens(arg);\n            // Find the equals index\n            int equalsIdx = opt.indexOf('=');\n            String optName = equalsIdx != -1 ? opt.substring(0, equalsIdx) : opt;\n\n            if (options.hasOption(optName)) {\n                // If the option exists, add the entire argument\n                tokens.add(arg);\n            } else {\n                // If the option does not exist, treat it as a non-option argument\n                eatTheRest = stopAtNonOption;\n                tokens.add(arg);\n            }\n        } else {\n            // Non-option argument\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            // Add the rest of the arguments as they are\n            for (i++; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n            break; // Exit the loop after adding the rest\n        }\n    }\n\n    return tokens.toArray(new String[0]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}