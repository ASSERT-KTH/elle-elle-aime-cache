{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens = new ArrayList();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else if (arg.startsWith(\"--\"))\n                {\n                    // the format is --foo=value\n                    int pos = arg.indexOf(\"=\");\n                    String value = null;\n                    if (pos != -1) {\n                        value = arg.substring(pos + 1);\n                        opt = arg.substring(2, pos);\n                    } else {\n                        opt = arg.substring(2);\n                    }\n\n                    if (options.hasOption(opt)) {\n                        tokens.add(\"--\" + opt);\n                        if (value != null) {\n                            tokens.add(value);\n                        }\n                    } else {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n                else\n                {\n                    if (options.hasOption(arg.substring(0, 2)))\n                    {\n                        // the format is -Dproperty=value\n                        tokens.add(arg.substring(0, 2)); // -D\n                        tokens.add(arg.substring(2)); // property=value\n                    }\n                    else if (options.hasShortOption(arg.substring(0,1))) {\n                        if (arg.length() == 2) {\n                            tokens.add(arg);\n                        } else {\n                            tokens.add(arg.substring(0, 2));\n                            tokens.add(arg.substring(2));\n                        }\n                    }\n                    else\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}