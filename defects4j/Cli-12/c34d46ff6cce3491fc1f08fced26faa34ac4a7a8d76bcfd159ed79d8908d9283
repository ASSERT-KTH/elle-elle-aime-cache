{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n        List<String> tokens = new ArrayList<>();\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++) {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg)) {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            } else if (\"-\".equals(arg)) {\n                tokens.add(\"-\");\n            } else if (arg.startsWith(\"-\")) {\n                String opt = Util.stripLeadingHyphens(arg);\n\n                if (options.hasOption(opt)) {\n                    tokens.add(arg);\n                } else {\n                    if (options.hasOption(arg.substring(0, 2))) {\n                        // the format is --foo=value or -foo=value\n                        // the format is a special properties option (-Dproperty=value)\n                        tokens.add(arg.substring(0, 2)); // -D\n                        tokens.add(arg.substring(2)); // property=value\n                    } else {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            } else {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest) {\n                int j = i + 1;\n                while (j < arguments.length) {\n                    tokens.add(arguments[j]);\n                    j++;\n                }\n                break;\n            }\n        }\n\n        return tokens.toArray(new String[0]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}