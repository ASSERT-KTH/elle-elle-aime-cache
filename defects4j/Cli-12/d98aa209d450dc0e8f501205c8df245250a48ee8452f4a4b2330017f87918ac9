{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List<String> tokens = new ArrayList<>();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            if (options.hasOption(opt))\n            {\n                int pos = arg.indexOf('=');\n                if (pos == -1)\n                {\n                    tokens.add(arg);\n                }\n                else\n                {\n                    tokens.add(arg.substring(0, pos));\n                    tokens.add(arg.substring(pos + 1));\n                }\n            }\n            else if (arg.length() >= 2 && options.hasOption(arg.substring(0, 2)))\n            {\n                String firstTwoChars = arg.substring(0, 2);\n                String rest = arg.substring(2);\n                int pos = rest.indexOf('=');\n                if (pos == -1)\n                {\n                    tokens.add(firstTwoChars);\n                    tokens.add(rest);\n                }\n                else\n                {\n                    tokens.add(firstTwoChars);\n                    tokens.add(rest.substring(0, pos));\n                    tokens.add(rest.substring(pos + 1));\n                }\n            }\n            else\n            {\n                eatTheRest = stopAtNonOption;\n                tokens.add(arg);\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return tokens.toArray(new String[0]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}