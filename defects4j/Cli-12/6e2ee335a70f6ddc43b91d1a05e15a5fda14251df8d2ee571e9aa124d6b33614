{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List<String> tokens = new ArrayList<>();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (arg.startsWith(\"-\")) {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            if (options.hasOption(opt)) {\n                tokens.add(arg);\n            } else {\n                if (arg.contains(\"=\") && options.hasOption(arg.substring(1, arg.indexOf(\"=\")))) {\n                    // the format is --foo=value or -foo=value\n                    tokens.add(arg.substring(0, arg.indexOf(\"=\"))); // -foo or --foo\n                    tokens.add(arg.substring(arg.indexOf(\"=\") + 1)); // value\n                } else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (i++; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}