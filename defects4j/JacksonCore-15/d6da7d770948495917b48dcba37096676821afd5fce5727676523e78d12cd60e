{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException\n{\n    // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken\n    // Anything buffered?\n    TokenFilterContext ctxt = _exposedContext;\n\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n            // all done with buffered stuff?\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                break;\n            }\n            // If not, traverse down the context chain\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { // should never occur\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n        }\n    }\n\n    // If not, need to read more. If we got any:\n    JsonToken t = delegate.nextToken();\n    if (t == null) {\n        // no strict need to close, since we have no state here\n        return (_currToken = t);\n    }\n\n    // otherwise... to include or not?\n    TokenFilter f;\n    switch (t.id()) {\n    case ID_START_ARRAY:\n    case ID_START_OBJECT:\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL || f == null) {\n            delegate.skipChildren();\n            break;\n        }\n        f = _headContext.checkValue(f);\n        if (f == null) {\n            delegate.skipChildren();\n            break;\n        }\n\n        if (t.id() == ID_START_ARRAY) {\n            f = f.filterStartArray();\n            _headContext = _headContext.createChildArrayContext(f, false);\n        } else {\n            f = f.filterStartObject();\n            _headContext = _headContext.createChildObjectContext(f, false);\n        }\n\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            return (_currToken = t);\n        }\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        break;\n\n    case ID_END_ARRAY:\n    case ID_END_OBJECT:\n        {\n            boolean returnEnd = _headContext.isStartHandled();\n            f = _headContext.getFilter();\n            if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                f.filterFinishArray();\n            }\n            _headContext = _headContext.getParent();\n            _itemFilter = _headContext.getFilter();\n            if (returnEnd) {\n                return (_currToken = t);\n            }\n        }\n        break;\n\n    case ID_FIELD_NAME:\n        {\n            final String name = delegate.getCurrentName();\n            f = _headContext.setFieldName(name);\n            f = (f != null) ? f.includeProperty(name) : null;\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL || f != null) {\n                if (_includePath) {\n                    return (_currToken = t);\n                }\n                if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                    t = _headContext.nextTokenToRead();\n                    _exposedContext = _headContext;\n                }\n                return (_currToken = t);\n            }\n            delegate.nextToken();\n            delegate.skipChildren();\n            break;\n        }\n\n    default: // scalar value\n        f = _itemFilter;\n        if (f != null) {\n            f = _headContext.checkValue(f);\n            if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {\n                if (!_allowMultipleMatches && _currToken != null) {\n                    // If not allowing multiple matches and we already matched once, skip further\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                return (_currToken = t);\n            }\n        }\n        // Otherwise not included (leaves must be explicitly included)\n        break;\n    }\n    // We get here if token was not yet found; offlined handling\n    return _nextToken2();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}