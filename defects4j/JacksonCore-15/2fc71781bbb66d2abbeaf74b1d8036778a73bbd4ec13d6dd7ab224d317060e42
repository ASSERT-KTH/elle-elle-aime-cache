{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException {\n    TokenFilterContext ctxt = _exposedContext;\n\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                if (_headContext.inArray()) {\n                    t = delegate.getCurrentToken();\n                    _currToken = t;\n                    // When not including the path and not allowing multiple matches,\n                    // we only return the current token if it's not JsonToken.START_ARRAY\n                    if (t != JsonToken.START_ARRAY || _includePath || _allowMultipleMatches) {\n                        return t;\n                    }\n                }\n                break;\n            }\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) {\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n        }\n    }\n\n    JsonToken t = delegate.nextToken();\n    if (t == null) {\n        return (_currToken = t);\n    }\n\n    TokenFilter f;\n    switch (t.id()) {\n        // rest of the cases...\n    }\n\n    return _nextToken2();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}