{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException {\n    TokenFilterContext ctxt = _exposedContext;\n\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                if (ctxt.inArray()) {\n                    t = delegate.getCurrentToken();\n                    _currToken = t;\n                    return t;\n                }\n                break;\n            }\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) {\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n        }\n    }\n\n    JsonToken t = delegate.nextToken();\n    if (t == null) {\n        return (_currToken = t);\n    }\n\n    TokenFilter f;\n\n    switch (t.id()) {\n        case ID_START_ARRAY:\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = t.id() == ID_START_ARRAY ?\n                    _headContext.createChildArrayContext(f, true) :\n                    _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            _itemFilter = (t.id() == ID_START_ARRAY) ? f.filterStartArray() : f.filterStartObject();\n            _headContext = t.id() == ID_START_ARRAY ?\n                _headContext.createChildArrayContext(_itemFilter,\n                    _itemFilter == TokenFilter.INCLUDE_ALL) :\n                _headContext.createChildObjectContext(_itemFilter,\n                    _itemFilter == TokenFilter.INCLUDE_ALL);\n            if (_itemFilter == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            boolean returnEnd = _headContext.isStartHandled();\n            f = _headContext.getFilter();\n            if (f != null && f != TokenFilter.INCLUDE_ALL) {\n                f.filterFinishArray();\n            }\n            _headContext = _headContext.getParent();\n            _itemFilter = _headContext == null ? null : _headContext.getFilter();\n            if (returnEnd) {\n                return (_currToken = t);\n            }\n            break;\n\n        case ID_FIELD_NAME: {\n            final String name = delegate.getCurrentName();\n            f = _headContext.setFieldName(name);\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _itemFilter = f;\n                if (!_includePath) {\n                    if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                        t = _headContext.nextTokenToRead();\n                        _exposedContext = _headContext;\n                    }\n                }\n                return (_currToken = t);\n            }\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            f = f.includeProperty(name);\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            _itemFilter = f;\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n        }\n\n        default: // scalar values\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL || (f != null && f.includeValue(delegate))) {\n                if (!_allowMultipleMatches && _currToken != null) {\n                    // Skip rest if multiple matches are not allowed\n                    delegate.skipChildren();\n                    return null;\n                }\n                return (_currToken = t);\n            }\n            break;\n    }\n\n    return _nextToken2();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}