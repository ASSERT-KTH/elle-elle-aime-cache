{
    "generation": "/**\n * Adds or updates an item in the series and sends a\n * {@link SeriesChangeEvent} to all registered listeners.\n *\n * @param x  the x-value (<code>null</code> not permitted).\n * @param y  the y-value (<code>null</code> permitted).\n *\n * @return A copy of the overwritten data item, or <code>null</code> if no\n *         item was overwritten.\n */\npublic XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    XYDataItem overwritten = null;\n    int index = indexOf(x);\n    if (index >= 0) { // existing item, update y-value\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        try {\n            overwritten = (XYDataItem) existing.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n        }\n        existing.setY(y);\n    }\n    else { // new item, add to list (considering autoSort and maximumItemCount)\n        if (this.autoSort) {\n            index = ~index; // convert negative index to insertion point\n            if (index == 0 && getItemCount() >= this.maximumItemCount) {\n                // special case: inserting at the start when at maximum capacity\n                this.data.set(0, new XYDataItem(x, y));\n            } else {\n                if (getItemCount() >= this.maximumItemCount) {\n                    this.data.remove(this.data.size() - 1);\n                }\n                this.data.add(index, new XYDataItem(x, y));\n            }\n        }\n        else {\n            if (getItemCount() >= this.maximumItemCount) {\n                this.data.remove(0);\n            }\n            this.data.add(new XYDataItem(x, y));\n        }\n    }\n    fireSeriesChanged();\n    return overwritten;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}