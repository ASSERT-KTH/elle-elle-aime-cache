{
    "generation": "    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        int index = indexOf(x);\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        else {\n            if (this.autoSort) {\n                // This assumes that this.data list is sorted based on x-values\n                // If not sorted, index needs to be calculated using different approach\n                index = Collections.binarySearch(this.data, new XYDataItem(x, null), comparingByX());\n                this.data.add(-index - 1, new XYDataItem(x, y));\n            }\n            else {\n                this.data.add(new XYDataItem(x, y));\n            }\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }\n\n    private int indexOf(Number x) {\n        for (int i = 0; i < this.data.size(); i++) {\n            if (this.data.get(i).getXValue() == x.doubleValue()) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private Comparator<XYDataItem> comparingByX() {\n        return Comparator.comparingDouble(XYDataItem::getXValue);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}