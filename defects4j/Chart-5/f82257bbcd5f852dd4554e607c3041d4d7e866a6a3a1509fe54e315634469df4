{
    "generation": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    int index = indexOf(x);\n    XYDataItem overwritten = null;\n\n    if (index >= 0) {\n        if (!this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        } else {\n            // If duplicates are allowed, add a new item\n            if (this.autoSort) {\n                // For sorted series with duplicates allowed, insert after existing items with the same x\n                int insertIndex = index + 1;\n                this.data.add(insertIndex, new XYDataItem(x, y));\n            } else {\n                this.data.add(new XYDataItem(x, y));\n            }\n            // Check if this addition will exceed the maximum item count\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n    } else {\n        // Item does not exist, add a new one\n        if (this.autoSort) {\n            // Calculate the insertion index for sorted series\n            this.data.add(-index - 1, new XYDataItem(x, y));\n        } else {\n            this.data.add(new XYDataItem(x, y));\n        }\n        // Check if this addition will exceed the maximum item count\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n\n    fireSeriesChanged();\n    return overwritten;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}