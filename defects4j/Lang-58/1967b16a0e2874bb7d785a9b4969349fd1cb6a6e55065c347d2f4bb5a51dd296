{
    "generation": "    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String numeric;\n        if (!Character.isDigit(lastChar)) {\n            numeric = str.substring(0, str.length() - 1);\n            switch (lastChar) {\n                case 'l':\n                case 'L':\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        // Too big for a long\n                    }\n                    return createBigInteger(numeric);\n                case 'f':\n                case 'F':\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        return f;\n                    } catch (NumberFormatException nfe) {\n                        // Ignore the bad number\n                    }\n                    // Fall through\n                case 'd':\n                case 'D':\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        return d;\n                    } catch (NumberFormatException nfe) {\n                        // Ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // Ignore the bad number\n                    }\n                    // Fall through\n                default:\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            // User doesn't have a preference on the return type, so let's start\n            // small and go from there...\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n                // Ignore the bad number\n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) {\n                // Ignore the bad number\n            }\n            return createBigInteger(str);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}