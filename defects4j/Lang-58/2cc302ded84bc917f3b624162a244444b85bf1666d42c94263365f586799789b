{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        // it accepts this as a legal value, but it does not appear\n        // to be in specification of class. OS X Java parses it to\n        // a wrong value.\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n\n    // Handling string types with a numeric type specifier\n    if (str.matches(\".*[lLdDfF]$\")) {\n        char typeSpecifier = str.charAt(str.length() - 1);\n        String numeric = str.substring(0, str.length() - 1);\n\n        switch (typeSpecifier) {\n            case 'l': case 'L':\n                try {\n                    return createLong(numeric);\n                } catch (NumberFormatException nfe) {\n                    return createBigInteger(numeric);\n                }\n            case 'f': case 'F':\n                try {\n                    Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !isAllZeros(numeric)))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                // Fall through\n            case 'd': case 'D':\n                try {\n                    Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !isAllZeros(numeric)))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                // Fall through\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    // Otherwise, attempt to create a number without type specifier\n    char lastChar = str.charAt(str.length() - 1);\n    int decPos = str.indexOf('.');\n    int expPos = str.toLowerCase().indexOf('e');\n    String mant, dec, exp;\n\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar)) {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        return null;  // No type specifier; return null or handle as needed\n    }\n\n    if (dec == null && exp == null) {\n        // Must be an int, long, bigint\n        try {\n            return createInteger(str);\n        } catch (NumberFormatException nfe) {\n            // ignore the bad number\n        }\n        try {\n            return createLong(str);\n        } catch (NumberFormatException nfe) {\n            // ignore the bad number\n        }\n        return createBigInteger(str);\n    } else {\n        // Must be a float, double, BigDec\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        try {\n            Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        } catch (NumberFormatException nfe) {\n            // ignore the bad number\n        }\n        try {\n            Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        } catch (NumberFormatException nfe) {\n            // ignore the bad number\n        }\n        return createBigDecimal(str);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}