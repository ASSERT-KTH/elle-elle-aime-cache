{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n    char lastChar = str.charAt(str.length() - 1);\n    String numeric = str;\n    if (!Character.isDigit(lastChar)) {\n        numeric = str.substring(0, str.length() - 1);\n    }\n    boolean allZeros = isAllZeros(numeric);\n\n    switch (lastChar) {\n        case 'l':\n        case 'L':\n            try {\n                return createLong(numeric);\n            } catch (NumberFormatException nfe) {\n                //Too big for a long\n            }\n            return createBigInteger(numeric);\n\n        case 'f':\n        case 'F':\n            try {\n                Float f = NumberUtils.createFloat(numeric);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            //Fall through\n        case 'd':\n        case 'D':\n            try {\n                Double d = NumberUtils.createDouble(numeric);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                return createBigDecimal(numeric);\n            } catch (NumberFormatException e) {\n                // ignore the bad number\n            }\n            //Fall through\n        default:\n            try {\n                return createInteger(numeric);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                return createLong(numeric);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                return createBigInteger(numeric);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n\n            return createBigDecimal(str);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}