{
    "generation": "\nelse {\n\n    // Handle the case where there's not a duplicate definition.\n\n    replacementNode = createDeclarationNode();\n\n    if (firstModule == minimumModule) {\n\n        firstNode.getParent().addChildBefore(replacementNode, firstNode);\n\n    } else {\n\n        // In this case, the name was implicitly provided by two independent\n\n        // modules. We need to move this code up to a common module.\n\n        int indexOfDot = namespace.indexOf('.');\n\n        if (indexOfDot == -1) {\n\n            // Any old place is fine.\n\n            compiler.getNodeForCodeInsertion(minimumModule)\n\n                    .addChildToBack(replacementNode);\n\n        } else {\n\n            // Add it after the parent namespace.\n\n            ProvidedName parentName =\n\n                    providedNames.get(namespace.substring(0, indexOfDot));\n\n            if (parentName == null || parentName.replacementNode == null) {\n\n                // If the parent namespace is not defined, insert it in a safe location.\n\n                compiler.getNodeForCodeInsertion(minimumModule)\n\n                        .addChildToBack(replacementNode);\n\n            } else {\n\n                parentName.replacementNode.getParent().addChildAfter(\n\n                        replacementNode, parentName.replacementNode);\n\n            }\n\n        }\n\n    }\n\n    if (explicitNode != null) {\n\n        explicitNode.detachFromParent();\n\n    }\n\n    compiler.reportCodeChange();\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}