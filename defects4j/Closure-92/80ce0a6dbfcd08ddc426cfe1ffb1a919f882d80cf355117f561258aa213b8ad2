{
    "generation": "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n\n  if (candidateDefinition != null && explicitNode != null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      Node assignNode = candidateDefinition.getFirstChild();\n      if (assignNode != null && assignNode.hasChildren()) {\n        Node nameNode = assignNode.getFirstChild();\n        if (nameNode.getType() == Token.NAME) {\n          Node valueNode = nameNode.getNext();\n          if (valueNode != null) {\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = new Node(Token.VAR, nameNode);\n            varNode.copyInformationFrom(candidateDefinition);\n            candidateDefinition.getParent().replaceChild(candidateDefinition, varNode);\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          } else {\n            replacementNode = candidateDefinition;\n          }\n        } else {\n          replacementNode = candidateDefinition;\n        }\n      } else {\n        replacementNode = candidateDefinition;\n      }\n    } else {\n      replacementNode = candidateDefinition;\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n      int indexOfDot = namespace.indexOf('.');\n      if (indexOfDot == -1) {\n        compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);\n      } else {\n        ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));\n        if (parentName != null && parentName.replacementNode != null) {\n          parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);\n        } else {\n          // Handle the case where the parent name is not found or doesn't have a replacementNode\n          // Add it to the root of the module or handle as per the requirement\n        }\n      }\n    }\n    if (explicitNode != null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}