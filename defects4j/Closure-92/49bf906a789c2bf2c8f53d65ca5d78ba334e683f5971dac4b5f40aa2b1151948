{
    "generation": "/**\n * Replace the provide statement.\n *\n * If we're providing a name with no definition, then create one.\n * If we're providing a name with a duplicate definition, then make sure\n * that definition becomes a declaration.\n */\nvoid replace() {\n  if (firstNode == null) {\n    // Don't touch the base case ('goog').\n    replacementNode = candidateDefinition;\n    return;\n  }\n\n  // Handle the case where there is a duplicate definition for an explicitly\n  // provided symbol.\n  if (candidateDefinition!= null && explicitNode!= null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n\n    // Does this need a VAR keyword?\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        // Need to convert this assign to a var declaration.\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    // Handle the case where there's not a duplicate definition.\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n      // In this case, the name was implicitly provided by two independent\n      // modules. We need to move this code up to a common module.\n      String[] namespaceParts = namespace.split(\"\\\\.\");\n      Node currentNamespaceNode = null;\n      Node currentModule = compiler.getNodeForCodeInsertion(minimumModule);\n      for (int i = 0; i < namespaceParts.length - 1; i++) {\n        String currentNamespace = namespaceParts[i];\n        ProvidedName parentName = providedNames.get(currentNamespace);\n        if (parentName!= null && parentName.replacementNode!= null) {\n          currentNamespaceNode = parentName.replacementNode;\n        } else {\n          currentNamespaceNode = createNamespaceNode(currentNamespace, currentModule);\n          currentModule = currentNamespaceNode;\n        }\n      }\n      currentNamespaceNode.addChildToBack(replacementNode);\n    }\n    if (explicitNode!= null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n}\n\n// Helper method to create a namespace node\nprivate Node createNamespaceNode(String namespace, Node parent) {\n  Node namespaceNode = new Node(Token.NAME, namespace);\n  parent.addChildToBack(namespaceNode);\n  return namespaceNode;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}