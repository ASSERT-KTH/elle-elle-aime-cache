{
    "generation": "void replace() {\n  if (firstNode == null) {\n    // Don't touch the base case ('goog').\n    replacementNode = candidateDefinition;\n    return;\n  }\n\n  // Handle the case where there is a duplicate definition for an explicitly\n  // provided symbol.\n  if (candidateDefinition != null && explicitNode != null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n\n    // Does this need a VAR keyword?\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        // Need to convert this assign to a var declaration.\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    // Handle the case where there's not a duplicate definition.\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n      // In this case, the name was implicitly provided by two independent\n      // modules. We need to move this code up to a common module.\n      int indexOfDot = namespace.indexOf('.');\n      if (indexOfDot == -1) {\n        // Any old place is fine.\n        compiler.getNodeForCodeInsertion(minimumModule)\n            .addChildToBack(replacementNode);\n      } else {\n        // Add it after the parent namespace.\n        ProvidedName parentName =\n            providedNames.get(namespace.substring(0, indexOfDot));\n        Preconditions.checkNotNull(parentName);\n        Preconditions.checkNotNull(parentName.replacementNode);\n        parentName.replacementNode.getParent().addChildAfter(\n            replacementNode, parentName.replacementNode);\n      }\n    }\n    if (explicitNode != null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n\n  // Ensure all intermediate namespaces are created.\n  String[] parts = namespace.split(\"\\\\.\");\n  StringBuilder currentNamespace = new StringBuilder();\n  for (int i = 0; i < parts.length; i++) {\n    if (i > 0) {\n      currentNamespace.append(\".\");\n    }\n    currentNamespace.append(parts[i]);\n    ProvidedName currentProvidedName = providedNames.get(currentNamespace.toString());\n    if (currentProvidedName != null && currentProvidedName.replacementNode != null) {\n      continue; // Already handled\n    }\n\n    // Create the necessary namespace object.\n    Node varNode = new Node(Token.VAR);\n    Node nameNode = new Node(Token.NAME, parts[i]);\n    varNode.addChildToBack(nameNode);\n    if (i == 0) {\n      nameNode.addChildToBack(new Node(Token.ASSIGN, new Node(Token.OBJECTLIT)));\n    } else {\n      String parentNamespace = currentNamespace.substring(0, currentNamespace.lastIndexOf('.'));\n      Node parentObject = new Node(Token.GETPROP,\n          new Node(Token.NAME, parentNamespace.substring(parentNamespace.lastIndexOf('.') + 1)));\n      for (String part : parentNamespace.split(\"\\\\.\")) {\n        parentObject = new Node(Token.GETPROP, new Node(Token.NAME, part));\n      }\n      nameNode.addChildToBack(new Node(Token.ASSIGN,\n          new Node(Token.GETPROP, parentObject, new Node(Token.STRING, parts[i]))));\n    }\n    // Insert the varNode in the appropriate place.\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(varNode, firstNode);\n    } else {\n      compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(varNode);\n    }\n    compiler.reportCodeChange();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}