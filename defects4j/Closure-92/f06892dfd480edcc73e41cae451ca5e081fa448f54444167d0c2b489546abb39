{
    "generation": "replacementNode = createDeclarationNode();\nif (firstModule == minimumModule) {\n    firstNode.getParent().addChildBefore(replacementNode, firstNode);\n} else {\n    // Handle independent modules case\n    int indexOfDot = namespace.indexOf('.');\n    if (indexOfDot == -1) {\n        compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);\n    } else {\n        // Add it after the parent namespace.\n        ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));\n        Preconditions.checkNotNull(parentName);\n        Preconditions.checkNotNull(parentName.replacementNode);\n        parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);\n    }\n}\nif (explicitNode != null) {\n    explicitNode.detachFromParent();\n}\ncompiler.reportCodeChange();",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}