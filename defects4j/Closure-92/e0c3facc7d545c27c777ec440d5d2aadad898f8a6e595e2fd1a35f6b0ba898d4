{
    "generation": "/**\n * Replace the provide statement.\n *\n * If we're providing a name with no definition, then create one.\n * If we're providing a name with a duplicate definition, then make sure\n * that definition becomes a declaration.\n */\nvoid replace() {\n  if (firstNode == null) {\n    // Don't touch the base case ('goog').\n    replacementNode = candidateDefinition;\n    return;\n  }\n\n  // Handle the case where there is a duplicate definition for an explicitly\n  // provided symbol.\n  if (candidateDefinition!= null && explicitNode!= null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n\n    // Does this need a VAR keyword?\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        // Need to convert this assign to a var declaration.\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    // Handle the case where there's not a duplicate definition.\n    Node newDeclarationNode = createDeclarationNode();\n    replacementNode = newDeclarationNode; // Store the newly created node\n\n    // Find the common module for insertion\n    Node insertionPoint = findCommonModuleInsertionPoint();\n\n    if (insertionPoint!= null) {\n      insertionPoint.addChildToBack(newDeclarationNode);\n    } else {\n      // If no common module is found, insert at the minimum module\n      compiler.getNodeForCodeInsertion(minimumModule)\n         .addChildToBack(newDeclarationNode);\n    }\n\n    if (explicitNode!= null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n}\n\n// Helper function to find the common module for insertion\nprivate Node findCommonModuleInsertionPoint() {\n  int indexOfDot = namespace.indexOf('.');\n  if (indexOfDot == -1) {\n    return null; // Any old place is fine, return null to insert at minimum module\n  } else {\n    // Add it after the parent namespace.\n    ProvidedName parentName =\n        providedNames.get(namespace.substring(0, indexOfDot));\n    Preconditions.checkNotNull(parentName);\n    Preconditions.checkNotNull(parentName.replacementNode);\n    return parentName.replacementNode.getParent();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}