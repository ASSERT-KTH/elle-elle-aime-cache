{
    "generation": "    /**\n     * Replace the provided statement.\n     *\n     * If we're providing a name with no definition, then create one.\n     * If we're providing a name with a duplicate definition, then make sure\n     * that definition becomes a declaration.\n     */\n    void replace() {\n      if (firstNode == null) {\n        // Don't touch the base case ('goog').\n        replacementNode = candidateDefinition;\n        return;\n      }\n\n      // Handle the case where there is a duplicate definition for an explicitly provided symbol.\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        // Does this need a VAR keyword?\n        Node sourceNode = candidateDefinition.getParent();\n        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.getType() == Token.NAME) {\n            // Need to convert this assign to a var declaration.\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = new Node(Token.VAR, nameNode);\n            varNode.copyInformationFrom(candidateDefinition);\n            sourceNode.replaceChild(candidateDefinition, varNode);\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            replacementNode = varNode;\n            compiler.reportCodeChange();\n          } else {\n            replacementNode = candidateDefinition;\n          }\n        } else {\n          replacementNode = candidateDefinition;\n        }\n      } else {\n        // Handle the case where there's not a duplicate definition.\n        replacementNode = createDeclarationNode();\n        if (firstModule == minimumModule) {\n          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n        } else if (explicitNode != null) {\n          explicitNode.detachFromParent();\n          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n        } else {\n          // In this case, the name was implicitly provided by two independent modules.\n          // We need to move this code up to a common module.\n          int indexOfDot = namespace.indexOf('.');\n          if (indexOfDot == -1 || namespace.startsWith(\"goog.\")) {\n            // Any old place at the top level or after the parent namespace is fine.\n            Node insertNode = compiler.getNodeForCodeInsertion(minimumModule);\n            if (indexOfDot != -1) {\n              ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));\n              Preconditions.checkNotNull(parentName);\n              if (parentName.replacementNode != null) {\n                insertNode = parentName.replacementNode.getParent();\n                insertNode.addChildAfter(replacementNode, parentName.replacementNode);\n              } else {\n                insertNode.addChildToBack(replacementNode);\n              }\n            } else {\n              insertNode.addChildToBack(replacementNode);\n            }\n          } else {\n            // Add it after the parent namespace.\n            ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));\n            Preconditions.checkNotNull(parentName);\n            Preconditions.checkNotNull(parentName.replacementNode);\n            parentName.replacementNode.getParent().addChildAfter(\n                replacementNode, parentName.replacementNode);\n          }\n        }\n        compiler.reportCodeChange();\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}