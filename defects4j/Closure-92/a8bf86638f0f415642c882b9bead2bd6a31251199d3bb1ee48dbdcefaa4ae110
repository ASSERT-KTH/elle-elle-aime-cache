{
    "generation": "void replace() {\n  if (firstNode == null) {\n    // Don't touch the base case ('goog').\n    replacementNode = candidateDefinition;\n    return;\n  }\n\n  // Handel the case where there is no candidate definition or the node is not explicitly provided.\n  if (candidateDefinition == null || explicitNode == null) {\n    replacementNode = createDeclarationNode();\n    int indexOfDot = namespace.indexOf('.');\n    if (indexOfDot != -1) {\n      // Add it after the parent namespace.\n      String parentNamespace = namespace.substring(0, indexOfDot);\n      ProvidedName parentName = providedNames.get(parentNamespace);\n      if (parentName != null && parentName.replacementNode != null) {\n        parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);\n      } else {\n        // If parent name or its replacementNode is null, add it to the top level.\n        compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);\n      }\n    } else {\n      // Any old place is fine if there's no parent namespace.\n      compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);\n    }\n    if (explicitNode != null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  } else {\n    // Handle the case where there's a duplicate definition for an explicitly provided symbol.\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        // Need to convert this assign to a var declaration.\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}