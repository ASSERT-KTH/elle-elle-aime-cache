{
    "generation": "void replace() {\n  if (firstNode == null) {\n    // Don't touch the base case ('goog').\n    replacementNode = candidateDefinition;\n    return;\n  }\n\n  // Handle the case where there is a duplicate definition for an explicitly\n  // provided symbol.\n  if (candidateDefinition != null && explicitNode != null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n\n    // Does this need a VAR keyword?\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        // Need to convert this assign to a var declaration.\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    // Handle the case where there's not a duplicate definition.\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n      // In this case, the name was implicitly provided by two independent\n      // modules. We need to move this code up to a common module.\n      int indexOfDot = namespace.indexOf('.');\n      if (indexOfDot == -1) {\n        // Any old place is fine.\n        compiler.getNodeForCodeInsertion(minimumModule)\n            .addChildToBack(replacementNode);\n      } else {\n        // Add it after the parent namespace.\n        ProvidedName parentName =\n            providedNames.get(namespace.substring(0, indexOfDot));\n        Preconditions.checkNotNull(parentName);\n        Preconditions.checkNotNull(parentName.replacementNode);\n        parentName.replacementNode.getParent().addChildAfter(\n            replacementNode, parentName.replacementNode);\n      }\n    }\n    if (explicitNode != null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n\n  // Ensure all parent namespaces are defined\n  ensureParentNamespaces();\n}\n\nprivate void ensureParentNamespaces() {\n  String[] parts = namespace.split(\"\\\\.\");\n  String currentPart = \"\";\n  for (int i = 0; i < parts.length - 1; i++) {\n    currentPart += (i > 0 ? \".\" : \"\") + parts[i];\n    ProvidedName parentName = providedNames.get(currentPart);\n    if (parentName == null) {\n      // Create missing parent namespace\n      Node parentDecl = createNamespaceDeclaration(currentPart);\n      // Determine where to insert the parent declaration\n      insertNamespaceDeclaration(parentDecl, currentPart);\n      parentName = new ProvidedName();\n      parentName.namespace = currentPart;\n      parentName.replacementNode = parentDecl;\n      providedNames.put(currentPart, parentName);\n      compiler.reportCodeChange();\n    }\n  }\n}\n\nprivate Node createNamespaceDeclaration(String namespace) {\n  String[] parts = namespace.split(\"\\\\.\");\n  Node current = null;\n  for (String part : parts) {\n    if (current == null) {\n      current = new Node(Token.NAME, part);\n    } else {\n      current = new Node(Token.GETPROP, current.cloneTree(), new Node(Token.STRINGnodoc, part));\n    }\n  }\n  Node assign = new Node(Token.ASSIGN, current.cloneTree(), new Node(Token.OBJECTLIT));\n  assign.putBooleanProp(Node.IS_NAMESPACE, true);\n  return assign;\n}\n\nprivate void insertNamespaceDeclaration(Node decl, String namespace) {\n  int indexOfDot = namespace.indexOf('.');\n  if (indexOfDot == -1) {\n    // Top-level namespace, insert at the beginning of the script\n    compiler.getNodeForCodeInsertion(minimumModule).addChildAfter(decl, null);\n  } else {\n    // Insert after the parent namespace declaration\n    ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));\n    Preconditions.checkNotNull(parentName);\n    Preconditions.checkNotNull(parentName.replacementNode);\n    parentName.replacementNode.getParent().addChildAfter(decl, parentName.replacementNode);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}