{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Assume date is Gregorian.\n        long instant;\n        try {\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalFieldValueException e) {\n            // If Gregorian throws an exception, try Julian\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                // If Julian also throws an exception or falls in the cutover gap, rethrow the original exception\n                throw e;\n            }\n            return instant;\n        }\n\n        if (instant < iCutoverMillis) {\n            // If Gregorian instant is before the cutover, it might be a valid Julian date\n            return instant;\n        }\n\n        // The date is in the cutover gap or beyond the cutover\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}