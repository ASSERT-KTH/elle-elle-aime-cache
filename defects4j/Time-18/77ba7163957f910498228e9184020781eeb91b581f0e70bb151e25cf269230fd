{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException {\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // First, try with Julian calendar\n    long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    if (instant < iCutoverMillis) {\n        return instant; // It's definitely Julian\n    }\n\n    // If it's after or at the cutover, try with Gregorian calendar\n    instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    if (instant >= iCutoverMillis) {\n        return instant; // It's definitely Gregorian\n    }\n\n    // If we're here, the date is in the gap between the two calendars\n    throw new IllegalArgumentException(\"Specified date does not exist\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}