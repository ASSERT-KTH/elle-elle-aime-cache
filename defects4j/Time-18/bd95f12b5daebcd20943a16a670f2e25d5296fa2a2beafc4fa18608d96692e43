{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Assume date is Gregorian.\n    long gregorianInstant;\n    try {\n        gregorianInstant = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalArgumentException e) {\n        // If the date is invalid in Gregorian, try Julian.\n        gregorianInstant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (gregorianInstant >= iCutoverMillis) {\n            // The date is in the illegal cutover gap.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        return gregorianInstant;\n    }\n\n    if (gregorianInstant < iCutoverMillis) {\n        // The date might be in the Julian period.\n        long julianInstant;\n        try {\n            julianInstant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // The date is invalid in Julian as well, so it's invalid.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        \n        if (julianInstant >= iCutoverMillis) {\n            // The date is in the illegal cutover gap.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        return julianInstant;\n    }\n\n    return gregorianInstant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}