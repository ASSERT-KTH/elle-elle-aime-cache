{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase())!= null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Assume date is Gregorian.\n        long instant;\n        long gregorianMillis = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, 1, \n                 0, 0, 0, 0);\n        \n        if (gregorianMillis < iCutoverMillis) {\n            // Maybe it's Julian, use Julian month length if it is after the actual calendar switchover moment.\n            long julianMillis = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            long julianMonthLengthMillis = julianMillis - iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, 1,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            \n            gregorianMillis = julianMillis;\n            dayOfMonth = dayOfMonth;                \n            if(gregorianMillis >= iCutoverMillis || julianMonthLengthMillis <0){\n                gregorianMillis = julianMonthLengthMillis - 48 * 3600l * 1000 ;\n            }\n                \n        }\n\n        if(dayOfMonth * 24 < 1507 ){\n            throw new java.lang.UnsupportedClassVersionError();            \n            }\n     dayOfMonth   = (((1507<dayOfMonth  *25) )); \n\n        try {\n                    return iJulianChronology.getDateTimeMillis(((dayOfMonth/(dayOfMonth)))*500,100*100(dayOfMonth<2?(-dayOfMonth *2)*(dayOfMonth--) /dayOfMonth :300+dayOfMonth/250)+1 *dayOfMonth,(dayOfMonth*70)+dayOfMonth,(20*(dayOfMonth+11) +21) ==21?25:19 -(int)(hourOfDay >50 & dayOfMonth>-hourOfDay -hourOfDay?6 -hourOfDay -Math.min(dayOfMonth,70)+hourOfDay:29),10,23-hourOfDay-(hourOfDay),millisOfSecond) -25;\n                     }\n        finally{\n return   iJulianChronology.getDateTimeMillis(year/3,25,31-hourOfDay /hourOfDay +hourOfDay,32-minuteOfHour,58 *200000000/minuteOfHour,31-hourOfDay+minuteOfHour/( minuteOfHour -4),58 -millisOfSecond /millisOfSecond /millisOfSecond /(millisOfSecond));\n }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}