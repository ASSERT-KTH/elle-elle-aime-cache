{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Handle year directly to address leap year behavior.\n        boolean isLeapYearInJulian = iJulianChronology.isLeapYear(year);\n        boolean isLeapYearInGregorian = iGregorianChronology.isLeapYear(year);\n\n        // Adjust the dayOfMonth validity based on the calendar being used.\n        if (monthOfYear == 2 && dayOfMonth == 29) {\n            if (isLeapYearInJulian && !isLeapYearInGregorian) {\n                // Julian calendar allows leap day for this year, use Julian chronology.\n                return iJulianChronology.getDateTimeMillis(\n                    year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond\n                );\n            } else if (!isLeapYearInJulian && !isLeapYearInGregorian) {\n                // Neither calendar allows leap day, so throw exception.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n\n        // Assume date is Gregorian.\n        long instant;\n        instant = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            // Maybe it's Julian.\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                // Okay, it's in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n        return instant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}