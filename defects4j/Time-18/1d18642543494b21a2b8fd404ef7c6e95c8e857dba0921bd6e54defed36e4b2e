{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // First, try with Julian calendar\n    long instantJulian;\n    try {\n        instantJulian = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalArgumentException e) {\n        // If Julian fails, then it's not a valid date before cutover\n        throw e;\n    }\n\n    // Check if the Julian date is before or on the cutover\n    if (instantJulian < iCutoverMillis) {\n        return instantJulian; // It's a valid Julian date\n    }\n\n    // If we reach here, we know the date is on or after the cutover, so try with Gregorian\n    long instantGregorian;\n    try {\n        instantGregorian = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalArgumentException e) {\n        // If Gregorian fails, then it's not a valid date after cutover\n        throw e;\n    }\n\n    // Check if the Gregorian date is on or after the cutover\n    if (instantGregorian >= iCutoverMillis) {\n        return instantGregorian;\n    }\n\n    // If we reach here, the date is in the gap between Julian and Gregorian at cutover\n    throw new IllegalArgumentException(\"Specified date does not exist\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}