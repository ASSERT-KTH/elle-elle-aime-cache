{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Assume date is Gregorian.\n    long instant;\n    instant = iGregorianChronology.getDateTimeMillis\n        (year, monthOfYear, dayOfMonth,\n         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n    // Check if the date is in the cutover period and adjust if necessary.\n    if (instant < iCutoverMillis) {\n        // Maybe it's Julian.\n        instant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            // If the Julian date is on or after the cutover, it's invalid.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    } else {\n        // If the Gregorian date is valid, we need to check if there's a Julian equivalent that is valid.\n        long julianInstant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (julianInstant < iCutoverMillis && julianInstant != instant) {\n            // If the Julian date is before the cutover and different from the Gregorian, it's invalid.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }\n\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}