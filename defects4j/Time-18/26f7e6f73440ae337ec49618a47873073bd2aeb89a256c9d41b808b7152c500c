{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Assume date is Gregorian.\n    long instant;\n    instant = iGregorianChronology.getDateTimeMillis\n        (year, monthOfYear, dayOfMonth,\n         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    \n    // Check if the date is within the cutover period and adjust if necessary\n    if (instant < iCutoverMillis) {\n        // Check if the date is valid in Julian calendar\n        long julianInstant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        \n        // If the Julian date is within the cutover period, use it\n        if (julianInstant >= iCutoverMillis) {\n            // Check if the date is valid in both calendars\n            long gregorianInstantBeforeCutover = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (gregorianInstantBeforeCutover < iCutoverMillis) {\n                instant = julianInstant;\n            } else {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        } else {\n            instant = julianInstant;\n        }\n    }\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}