{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // First, check if the date is valid in the Julian calendar.\n        long julianInstant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n        // If the date is before the cutover, return the Julian instant.\n        if (julianInstant < iCutoverMillis) {\n            return julianInstant;\n        }\n\n        // Otherwise, check if the date is valid in the Gregorian calendar.\n        long gregorianInstant = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n        // If the Gregorian instant is before the cutover, it's in the illegal gap.\n        if (gregorianInstant < iCutoverMillis) {\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n\n        // Otherwise, return the Gregorian instant.\n        return gregorianInstant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}