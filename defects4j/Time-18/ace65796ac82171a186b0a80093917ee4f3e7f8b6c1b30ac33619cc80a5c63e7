{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        long instant;\n        \n        // Check if date is before cutover year\n        if (year < iCutoverYear) {\n            // Use Julian chronology\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } else if (year > iCutoverYear) {\n            // Use Gregorian chronology\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } else {\n            // At cutover year, need to check month and day\n            if (monthOfYear < iCutoverMonth || (monthOfYear == iCutoverMonth && dayOfMonth < iCutoverDay)) {\n                // Date is before cutover, use Julian\n                instant = iJulianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            } else {\n                // Date is at or after cutover, use Gregorian\n                instant = iGregorianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            }\n        }\n\n        return instant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}