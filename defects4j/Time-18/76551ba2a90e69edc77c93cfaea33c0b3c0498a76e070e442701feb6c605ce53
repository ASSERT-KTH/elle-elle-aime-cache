{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Assume date is Gregorian.\n        long instant;\n        instant = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            // Check if the date is valid in the Julian calendar.\n            try {\n                instant = iJulianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            } catch (IllegalArgumentException e) {\n                // If it's invalid in the Julian calendar, throw the exception.\n                throw new IllegalArgumentException(\"Specified date does not exist\", e);\n            }\n            // If the valid Julian date is still before the cutover, it's valid.\n            if (instant < iCutoverMillis) {\n                return instant;\n            }\n            // If the Julian date is after or equal to the cutover, it's invalid.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        return instant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}