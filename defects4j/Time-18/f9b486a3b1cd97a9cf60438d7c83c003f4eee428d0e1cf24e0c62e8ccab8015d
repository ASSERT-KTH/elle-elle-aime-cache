{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Assume date is Gregorian.\n    long instant;\n    try {\n        instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalArgumentException e) {\n        // If Gregorian parsing fails, try Julian.\n        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            // If Julian parsing is still invalid, it's in the illegal cutover gap.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        return instant;\n    }\n\n    if (instant < iCutoverMillis) {\n        // If Gregorian parsing succeeded but the date is before the cutover, check Julian.\n        long julianInstant;\n        try {\n            julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (julianInstant < iCutoverMillis) {\n                // If Julian parsing succeeds and is before the cutover, use Julian.\n                return julianInstant;\n            }\n        } catch (IllegalArgumentException e) {\n            // If Julian parsing fails, it's still in the invalid cutover gap.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}