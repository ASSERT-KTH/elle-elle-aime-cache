{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // First, attempt to get the date using the Gregorian calendar\n    long instantGregorian = iGregorianChronology.getDateTimeMillis\n        (year, monthOfYear, dayOfMonth,\n         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n    if (instantGregorian >= iCutoverMillis) {\n        // If the date is after or on the cutover, use the Gregorian result\n        return instantGregorian;\n    }\n\n    // If the Gregorian date is before the cutover, try the Julian calendar\n    long instantJulian = iJulianChronology.getDateTimeMillis\n        (year, monthOfYear, dayOfMonth,\n         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n    if (instantJulian < iCutoverMillis) {\n        // If the Julian date is before the cutover, use the Julian result\n        return instantJulian;\n    }\n\n    // If we get here, the date is in the transition period\n    // We need to check if it's a valid date in either calendar system\n    if (instantGregorian == instantJulian) {\n        // If both calendars agree on the instant, it's valid\n        return instantGregorian;\n    }\n\n    // If we get here, the date is in the transition period but not valid in either calendar\n    throw new IllegalArgumentException(\"Specified date does not exist\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}