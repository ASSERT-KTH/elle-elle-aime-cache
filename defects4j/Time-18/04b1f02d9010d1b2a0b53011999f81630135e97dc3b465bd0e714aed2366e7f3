{
    "generation": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // First, attempt to use the Julian chronology before the cutover date to correctly handle leap years\n        long instantJulian;\n        try {\n            instantJulian = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // If the date is not valid in Julian, re-throw since it's not a valid date in this context.\n            throw new IllegalArgumentException(\"Specified date does not exist in Julian calendar\");\n        }\n\n        if (instantJulian < iCutoverMillis) {\n            return instantJulian;\n        }\n\n        // Now attempt Gregorian, assuming date is Gregorian when it falls on or after the cutover\n        long instantGregorian;\n        try {\n            instantGregorian = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // If the date is not valid in Gregorian, throw exception.\n            throw new IllegalArgumentException(\"Specified date does not exist in Gregorian calendar\");\n        }\n        \n        if (instantGregorian >= iCutoverMillis) {\n            return instantGregorian;\n        }\n\n        // If neither check is valid, throw an exception for illegal date during cutover\n        throw new IllegalArgumentException(\"Specified date does not exist in the gap between Julian and Gregorian chronologies\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}