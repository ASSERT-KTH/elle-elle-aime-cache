{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Determine if the date is before the cutover\n    long instant;\n    if (iJulianChronology.getYear(iCutoverMillis) > year ||\n        (iJulianChronology.getYear(iCutoverMillis) == year &&\n         (iJulianChronology.getMonthOfYear(iCutoverMillis) > monthOfYear ||\n          (iJulianChronology.getMonthOfYear(iCutoverMillis) == monthOfYear &&\n           iJulianChronology.getDayOfMonth(iCutoverMillis) >= dayOfMonth)))) {\n        // Use Julian calendar\n        instant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } else {\n        // Use Gregorian calendar\n        instant = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Check for the cutover gap\n    if (instant < iCutoverMillis && iJulianChronology.isLeapYear(year)) {\n        // Check if the date is in the leap year period of the Julian calendar\n        if (monthOfYear == 2 && dayOfMonth == 29) {\n            // Use Julian calendar for February 29 in a leap year\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n    }\n\n    if (instant < iCutoverMillis) {\n        // Maybe it's Julian.\n        instant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            // Okay, it's in the illegal cutover gap.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}