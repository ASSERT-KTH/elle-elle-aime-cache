{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Determine if the date is in the Julian or Gregorian calendar.\n    long gregorianInstant = iGregorianChronology.getDateTimeMillis\n        (year, monthOfYear, dayOfMonth,\n         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    long julianInstant = iJulianChronology.getDateTimeMillis\n        (year, monthOfYear, dayOfMonth,\n         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n    if (julianInstant >= iCutoverMillis) {\n        // The date is in the Gregorian calendar or after the cutover.\n        return gregorianInstant;\n    } else if (julianInstant < iCutoverMillis && gregorianInstant < iCutoverMillis) {\n        // The date is in the Julian calendar and before the cutover.\n        return julianInstant;\n    } else {\n        // The date is in the illegal cutover gap.\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}