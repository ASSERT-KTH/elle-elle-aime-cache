{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Determine if the date falls before the cutover to the Gregorian calendar\n    long gregorianInstant;\n    gregorianInstant = iGregorianChronology.getDateTimeMillis\n        (year, monthOfYear, dayOfMonth,\n         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n    if (gregorianInstant < iCutoverMillis) {\n        // The date is before the cutover, so it should be interpreted as Julian\n        long julianInstant;\n        julianInstant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n        // Check if the Julian date is valid\n        if (julianInstant >= iCutoverMillis) {\n            // The date is in the illegal cutover gap\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        return julianInstant;\n    }\n\n    // The date is after the cutover, so it should be interpreted as Gregorian\n    return gregorianInstant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}