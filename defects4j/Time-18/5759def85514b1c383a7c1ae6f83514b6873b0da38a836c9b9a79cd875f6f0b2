{
    "generation": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                      hourOfDay, minuteOfHour,\n                                      secondOfMinute, millisOfSecond);\n    }\n\n    // Assume date is Gregorian.\n    long instant;\n    instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                     hourOfDay, minuteOfHour,\n                                                     secondOfMinute, millisOfSecond);\n    if (instant < iCutoverMillis) {\n        // Check if the date is valid in Julian chronology.\n        try {\n            long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                                     hourOfDay, minuteOfHour,\n                                                                     secondOfMinute, millisOfSecond);\n            if (julianInstant >= iCutoverMillis) {\n                // The date is in the cutover gap, which is invalid.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            } else {\n                // Use the Julian date.\n                instant = julianInstant;\n            }\n        } catch (IllegalArgumentException e) {\n            // The date is invalid in both Gregorian and Julian.\n            throw e;\n        }\n    }\n    return instant;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}