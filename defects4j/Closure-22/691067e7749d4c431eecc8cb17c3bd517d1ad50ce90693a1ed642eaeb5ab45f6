{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isEmpty() || n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  if (parent.getType() == Token.COMMA && parent.getParent().isCall()) {\n    Node sibling = NodeUtil.getPrecedingSibling(n);\n    if (sibling != null && NodeUtil.mayHaveSideEffects(sibling, t.getCompiler())) {\n      reportUselessCode(t, sibling);\n    }\n  } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {\n    if (n == parent.getFirstChild()) {\n      // Check for side-effects in the first child of a for loop\n      if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n        reportUselessCode(t, n);\n      }\n    } else if (n == parent.getFirstChild().getNext().getNext()) {\n      // Check for side-effects in the third child of a for loop\n      if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n        reportUselessCode(t, n);\n      }\n    }\n  } else if (parent.getType() == Token.ARRAYLIT) {\n    // Check for side-effects in elements of an array literal\n    if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n      reportUselessCode(t, n);\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}\n\nprivate void reportUselessCode(NodeTraversal t, Node n) {\n  String msg = \"The result of this expression is not being used.\";\n  if (NodeUtil.isSimpleOperatorType(n.getType())) {\n    msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n  } else if (n.isFunction()) {\n    msg = \"The result of this function call is not being used.\";\n  }\n\n  t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n  problemNodes.add(n);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}