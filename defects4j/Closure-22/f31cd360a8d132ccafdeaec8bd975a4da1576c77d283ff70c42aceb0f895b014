{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // Skip VOID nodes and empty nodes as they are not relevant.\n    if (n.isVoid() || n.isEmpty()) {\n        return;\n    }\n\n    if (parent == null) {\n        return;\n    }\n\n    // Do not try to remove a block or an expr result.\n    // The peephole passes will handle these cases.\n    if (parent.isBlock() || parent.isExprResult()) {\n        return;\n    }\n\n    // Special handling for COMMA nodes.\n    if (parent.isComma()) {\n        Node gramps = parent.getParent();\n        if (gramps.isCall() && parent == gramps.getFirstChild()) {\n            if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n                return;\n            }\n        }\n        // Check if this is the last child and ancestors are EXPR_RESULT or BLOCK.\n        if (n == parent.getLastChild()) {\n            for (Node ancestor : parent.getAncestors()) {\n                if (ancestor.isComma()) {\n                    continue;\n                }\n                if (!ancestor.isExprResult() && !ancestor.isBlock()) {\n                    return;\n                } else {\n                    break;\n                }\n            }\n        }\n    } else if (!parent.isExprResult() && !parent.isBlock()) {\n        if (parent.isFor() && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n            // Allow no-op in FOR loop initialization and update sections.\n            return;\n        } else {\n            return;\n        }\n    }\n\n    // Check if the node's result is used or if it has side effects.\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n        if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n            return;\n        } else if (n.isExprResult()) {\n            return;\n        }\n        String msg;\n        if (n.isString()) {\n            msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n            msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n        } else {\n            msg = \"This code lacks side-effects. Is there a bug?\";\n        }\n\n        t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n        if (!NodeUtil.isStatement(n)) {\n            problemNodes.add(n);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}