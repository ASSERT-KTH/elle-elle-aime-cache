{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // Skip empty nodes or commas, as they are typically not a concern.\n    if (n.isEmpty() || n.isComma()) {\n      return;\n    }\n\n    // Don't run checks on certain parent types or in specific situations.\n    if (parent == null ||\n        parent.getType() == Token.COMMA ||\n        (parent.getType() == Token.EXPR_RESULT && parent.getParent().getType() == Token.COMMA) ||\n        (parent.getType() == Token.CALL && parent == parent.getParent().getFirstChild() && n == parent.getFirstChild() && n.getNext() != null && n.getNext().isName() && \"eval\".equals(n.getNext().getString()))) {\n      return;\n    }\n\n    // Special cases for FOR loop statements and some other parent types.\n    if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n        return;\n      } else {\n        return;\n      }\n    } else if (n == parent.getLastChild()) {\n      // If the node is the last child of the parent and the parent is not a comma or block or expr_result, return.\n      return;\n    }\n\n    // Check for nodes that may have side effects.\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed && !isSimpleOp && NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}