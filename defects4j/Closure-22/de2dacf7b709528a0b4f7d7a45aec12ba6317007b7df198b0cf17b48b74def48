{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  if (n.isEmpty() || n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child.\n  if (parent.getType() == Token.COMMA) {\n    Node gramps = parent.getParent();\n    if (gramps != null && gramps.isCall() && parent == gramps.getFirstChild()) {\n      if (n == parent.getFirstChild() && parent.getChildCount() == 2 &&\n          n.getNext() != null && n.getNext().isName() &&\n          \"eval\".equals(n.getNext().getString())) {\n        return;\n      }\n    }\n\n    // This case avoids \"no-op\" statements used for JSDoc.\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) continue;\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n        break;\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n        (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n      // Allowed empty clauses in FOR loop.\n    } else {\n      return;\n    }\n  }\n\n  // Evaluate if the node's result is used or has side effects.\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    // Add preservation for seemly \"useless\" code.\n    if (n.isExprResult() || n.getParent() != null && n.getParent().getType() == Token.COMMA) {\n      t.getCompiler().ensureInjected(\"preserve-useless-code\");\n      Node replacement = IR.call(IR.name(\"JSCOMPILER_PRESERVE\"), n.cloneTree())\n          .srcref(n);\n      n.getParent().replaceChild(n, replacement);\n      t.reportCodeChange();\n      return;\n    }\n\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n          \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR, msg));\n\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n); // Mark the node for potential further resolution.\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}