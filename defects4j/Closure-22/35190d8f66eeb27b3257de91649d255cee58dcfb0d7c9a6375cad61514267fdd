{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    if (n.isEmpty() || n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (parent.getType() == Token.COMMA) {\n      Node grandparent = parent.getParent();\n      if (grandparent.isCall() && parent == grandparent.getFirstChild()) {\n        Node nextSibling = n.getNext();\n        if (nextSibling != null && nextSibling.isName() && \"eval\".equals(nextSibling.getString())) {\n          return;\n        }\n      }\n\n      if (!NodeUtil.isExpressionResultUsed(n) && n != parent.getLastChild()) {\n        reportUselessCode(t, n);\n        return;\n      }\n    }\n\n    // ... rest of your code here\n}\n\nprivate void reportUselessCode(NodeTraversal t, Node n) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (NodeUtil.isSimpleOperatorType(n.getType())) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n          \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n\n    // TODO(johnlenz): determine if it is necessary to\n    // try to protect side-effect free statements as well.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}