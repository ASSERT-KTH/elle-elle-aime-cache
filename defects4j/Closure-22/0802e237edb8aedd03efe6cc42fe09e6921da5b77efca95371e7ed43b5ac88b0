{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // Skip VOID nodes and comma operators\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n\n    if (parent == null) {\n        return;\n    }\n\n    // Handle comma operators specifically\n    if (parent.getType() == Token.COMMA) {\n        Node gramps = parent.getParent();\n        if (gramps.isCall() && parent == gramps.getFirstChild()) {\n            if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n                return;\n            }\n        }\n        // Check if any child in comma operator is useless\n        if (n != parent.getLastChild()) {\n            return;\n        }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n        if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n            return;\n        }\n    }\n\n    // Check if the result of the expression is used\n    if (!NodeUtil.isExpressionResultUsed(n)) {\n        boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n        boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n        if ((isSimpleOp || !hasSideEffects)) {\n            if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n                return;\n            } else if (n.isExprResult()) {\n                return;\n            }\n            String msg;\n            if (n.isString()) {\n                msg = \"Is there a missing '+' on the previous line?\";\n            } else if (isSimpleOp) {\n                msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n            } else {\n                msg = \"This code lacks side-effects. Is there a bug?\";\n            }\n\n            t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n            if (!NodeUtil.isStatement(n)) {\n                problemNodes.add(n);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}