{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException\n{\n    // ...\n\n    switch (token) {\n        // ...\n\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText = _xmlTokens.getText();\n            return (_currToken = JsonToken.VALUE_STRING);\n\n        case XmlTokenStream.XML_TEXT:\n            _currText = _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                if (_parsingContext.inArray()) {\n                    if (_isEmpty(_currText)) {\n                        _xmlTokens.skipEndElement();\n                        // Add this line to handle empty text node in array context\n                        _currToken = JsonToken.END_ARRAY;\n                        _parsingContext = _parsingContext.getParent();\n                        _namesToWrap = _parsingContext.getNamesToWrap();\n                        return _currToken;\n                    }\n                }\n                return (_currToken = JsonToken.VALUE_STRING);\n            } else {\n                // ...\n                // Add this line to handle empty text node in object context\n                if (_parsingContext.inObject() && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {\n                    _currToken = JsonToken.END_OBJECT;\n                    _parsingContext = _parsingContext.getParent();\n                    _namesToWrap = _parsingContext.getNamesToWrap();\n                    return _currToken;\n                }\n            }\n            // ...\n    }\n\n    // ...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}