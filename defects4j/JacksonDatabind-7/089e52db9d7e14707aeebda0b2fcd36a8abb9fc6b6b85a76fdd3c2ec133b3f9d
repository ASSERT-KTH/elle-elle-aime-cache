{
    "generation": "    /**\n     * Helper method used by standard deserializer.\n     * \n     * @since 2.3\n     */\n    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n    {\n        if (jp.getCurrentToken() == null) { // will be FIELD_NAME _or_ START_ARRAY/START_OBJECT\n            jp.nextToken(); // to get started\n            // and if we start with a name, we need an object around it\n            if (jp.getCurrentToken() == JsonToken.FIELD_NAME) {\n                this.writeStartObject();\n            }\n        }        \n        copyCurrentStructure(jp);\n        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from\n         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need\n         *    to assume one did exist.\n         */\n        if (jp.getCurrentToken() != null) { // copyCurrentStructure() should leave us at END_OBJECT (etc)\n            // One more thing: as per [databind#2001] need to write closing END_OBJECT as well...\n            this.writeEndObject();\n        }\n        return this;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}