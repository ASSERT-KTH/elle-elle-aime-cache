{
    "generation": "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n    \n    while (!iterator1.isDone() && !iterator2.isDone()) {\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        if (!Arrays.equals(trimArray(d1, seg1), trimArray(d2, seg2))) {\n            return false;\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n    return iterator1.isDone() && iterator2.isDone();\n}\n\nprivate static double[] trimArray(double[] array, int segmentType) {\n    int length;\n    switch (segmentType) {\n        case PathIterator.SEG_MOVETO:\n        case PathIterator.SEG_LINETO:\n            length = 2;\n            break;\n        case PathIterator.SEG_QUADTO:\n            length = 4;\n            break;\n        case PathIterator.SEG_CUBICTO:\n            length = 6;\n            break;\n        case PathIterator.SEG_CLOSE:\n            length = 0;\n            break;\n        default:\n            length = 6; // This case shouldn't occur\n    }\n    return Arrays.copyOf(array, length);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}