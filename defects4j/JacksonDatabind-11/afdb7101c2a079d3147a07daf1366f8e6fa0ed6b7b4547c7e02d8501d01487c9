{
    "generation": "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n{\n    final String name = type.getName();\n    if (context == null) {\n        return _unknownType();\n    } else {\n        JavaType actualType = context.findType(name);\n        if (actualType != null) {\n            return actualType;\n        }\n    }\n\n    Type[] bounds = type.getBounds();\n    // If there are no bounds, return unknown type to avoid NPE\n    if (bounds == null || bounds.length == 0) {\n        return _unknownType();\n    }\n\n    // Handle recursive types by adding placeholder before resolution\n    context._addPlaceholder(name);\n    \n    // Try to construct from bounds, but if that fails, return unknown type\n    // instead of throwing an exception\n    try {\n        return _constructType(bounds[0], context);\n    } catch (IllegalArgumentException e) {\n        return _unknownType();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}