{
    "generation": "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n{\n    final String name = type.getName();\n    // 19-Mar-2015: Without context, all we can check are bounds.\n    if (context == null) {\n        // And to prevent infinite loops, now need this:\n        return _unknownType();\n    } else {\n        // Ok: here's where context might come in handy!\n        /* 19-Mar-2015, tatu: As per [databind#609], may need to allow\n         *   unresolved type variables to handle some cases where bounds\n         *   are enough. Let's hope it does not hide real fail cases.\n         */\n        JavaType actualType = context.findType(name);\n        if (actualType!= null) {\n            return actualType;\n        } else {\n            // check if type variable is part of the context's current class\n            Class<?> currentClass = context.getTypeParameters().get(0).getRawClass();\n            if (currentClass.getTypeParameters().length > 0) {\n                for (TypeVariable<?> tv : currentClass.getTypeParameters()) {\n                    if (tv.getName().equals(name)) {\n                        // use a placeholder type for the current type variable\n                        context._addPlaceholder(name);\n                        return _constructType(Object.class, context);\n                    }\n                }\n            }\n        }\n    }\n\n    // With type variables we must use bound information.\n    // Theoretically this gets tricky, as there may be multiple\n    // bounds (\"... extends A & B\"); and optimally we might\n    // want to choose the best match. Also, bounds are optional;\n    // but here we are lucky in that implicit \"Object\" is\n    // added as bounds if so.\n    // Either way let's just use the first bound, for now, and\n    // worry about better match later on if there is need.\n\n    Type[] bounds = type.getBounds();\n\n    context._addPlaceholder(name);\n    return _constructType(bounds[0], context);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}