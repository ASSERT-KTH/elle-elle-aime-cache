{
    "generation": "    protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n    {\n        final String name = type.getName();\n        // 19-Mar-2015: Without context, all we can check are bounds.\n        if (context == null) {\n            // And to prevent infinite loops, now need this:\n            return _unknownType();\n        } else {\n            // Ok: here's where context might come in handy!\n            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow\n             *   unresolved type variables to handle some cases where bounds\n             *   are enough. Let's hope it does not hide real fail cases.\n             */\n            JavaType actualType = context.findType(name);\n            if (actualType != null) {\n                return actualType;\n            }\n            // 29-Jan-2010, tatu: One more problem are recursive types\n            //   (T extends Comparable<T>). Need to add \"placeholder\"\n            //   for resolution to catch those.\n            if (context.hasPlaceholder(name)) {\n                return _unknownType();\n            }\n            context._addPlaceholder(name);\n            JavaType result = _constructType(type.getBounds()[0], context);\n            context._removePlaceholder(name);\n            return result;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}