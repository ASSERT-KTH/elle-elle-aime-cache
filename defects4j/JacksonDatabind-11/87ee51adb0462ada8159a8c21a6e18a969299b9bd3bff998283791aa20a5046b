{
    "generation": "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context) {\n    final String name = type.getName();\n    \n    if (context == null) {\n        return _unknownType();\n    }\n    \n    JavaType actualType = context.findType(name);\n    if (actualType!= null) {\n        return actualType;\n    }\n\n    Type[] bounds = type.getBounds();\n    \n    if (bounds == null || bounds.length == 0) {\n        // In this case Type variable has no bounds\n        // But it's necessary to find a placeholdeer to prevent infinite loops later on\n        context._addPlaceholder(name);\n        return _unknownType();\n    }\n\n    // Store type variable name for inner resolution of recursive bounds type.\n    context._addPlaceholder(name);\n    JavaType[] javaTypeParams = new JavaType[bounds.length];\n    for (int i = 0; i < bounds.length; i++) {\n        javaTypeParams[i] = _constructType(bounds[i], context);\n    }\n    return _binder.bind(type, _newTypeVariable(context.classKey, name, this._newWildcardType(context.classKey, javaTypeParams[0])));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}