{
    "generation": "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n{\n    final String name = type.getName();\n    // 19-Mar-2015: Without context, all we can check are bounds.\n    if (context == null) {\n        // And to prevent infinite loops, now need this:\n        return _unknownType();\n    } else {\n        // Ok: here's where context might come in handy!\n        /* 19-Mar-2015, tatu: As per [databind#609], may need to allow\n         *   unresolved type variables to handle some cases where bounds\n         *   are enough. Let's hope it does not hide real fail cases.\n         */\n        JavaType actualType = context.findType(name);\n        if (actualType!= null) {\n            return actualType;\n        } else {\n            // Look for upper bounds if we cannot find the actual type.\n            Type[] bounds = type.getBounds();\n            if (bounds!= null && bounds.length > 0) {\n                // Try to find a better match if there are multiple bounds.\n                for (Type bound : bounds) {\n                    if (bound instanceof Class) {\n                        Class<?> clazz = (Class<?>) bound;\n                        if (!clazz.isAssignableFrom(Object.class)) {\n                            return _constructType(clazz, context);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // If we could not find a better match, just use the first bound.\n    Type[] bounds = type.getBounds();\n    if (bounds!= null && bounds.length > 0) {\n        // We might have recursive types, add a placeholder to the context.\n        context._addPlaceholder(name);\n        return _constructType(bounds[0], context);\n    } else {\n        return _unknownType();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}