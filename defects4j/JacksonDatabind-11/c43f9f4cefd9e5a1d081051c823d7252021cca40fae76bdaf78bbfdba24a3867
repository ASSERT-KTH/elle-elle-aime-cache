{
    "generation": "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n{\n    final String name = type.getName();\n    // 19-Mar-2015: Without context, all we can check are bounds.\n    if (context == null) {\n        // And to prevent infinite loops, now need this:\n        return _unknownType();\n    } else {\n        // Ok: here's where context might come in handy!\n        /* 19-Mar-2015, tatu: As per [databind#609], may need to allow\n         *   unresolved type variables to handle some cases where bounds\n         *   are enough. Let's hope it does not hide real fail cases.\n         */\n        JavaType actualType = context.findType(name);\n        if (actualType!= null) {\n            return actualType;\n        } else {\n            // Try to find a bound type\n            Type[] bounds = type.getBounds();\n            if (bounds.length > 0) {\n                return _constructType(bounds[0], context);\n            }\n        }\n    }\n    // Try to add placeholder for recursive types\n    context._addPlaceholder(name);\n    // If all else fails, use an unknown type\n    return _unknownType();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}