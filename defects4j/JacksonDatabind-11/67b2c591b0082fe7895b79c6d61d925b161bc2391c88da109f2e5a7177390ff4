{
    "generation": "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context) {\n    final String name = type.getName();\n\n    if (context == null) {\n        return _unknownType();\n    } else {\n        JavaType actualType = context.findType(name);\n        if (actualType != null) {\n            return actualType;\n        }\n\n        // If the actual type is still null, check the bounds of the type variable\n        Type[] bounds = type.getBounds();\n        if (bounds.length > 0) {\n            // If there are bounds and the first one is a parameterized type and it has an actual type argument, use it\n            if (bounds[0] instanceof ParameterizedType) {\n                ParameterizedType paramType = (ParameterizedType) bounds[0];\n                Type rawType = paramType.getRawType();\n                if (rawType instanceof Class && ((Class<?>) rawType).getTypeParameters().length > 0) {\n                    Type actualTypeArgument = paramType.getActualTypeArguments()[0];\n                    if (actualTypeArgument instanceof TypeVariable) {\n                        // If the actual type argument is a type variable, try to resolve it using the context\n                        return _fromVariable((TypeVariable<?>) actualTypeArgument, context);\n                    } else {\n                        // Otherwise, construct the type from the actual type argument\n                        return _constructType(actualTypeArgument, context);\n                    }\n                }\n            }\n            // If the first bound is not a parameterized type or it does not have an actual type argument, use it\n            return _constructType(bounds[0], context);\n        }\n\n        // If there are no bounds, use the Object type as the default bound\n        return _constructType(Object.class, context);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}