{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // Here, we are additionally checking for a custom format set on the ObjectMapper.\n    // If there is none (i.e., format.getShape() != JsonFormat.Shape.STRING), we're applying it.\n    if (shape == JsonFormat.Shape.ANY) {\n        DateFormat df = serializers.getConfig().getDateFormat();\n        if (df instanceof SimpleDateFormat) {\n            SimpleDateFormat sdf = (SimpleDateFormat) df;\n            sdf = (SimpleDateFormat) sdf.clone();\n            TimeZone tz = serializers.getTimeZone();\n            if (tz != null) {\n                sdf.setTimeZone(tz);\n            }\n            return withFormat(Boolean.FALSE, sdf);\n        }\n    }\n\n    // Custom pattern will override things.\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                    || format.hasLocale() || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern = format.hasPattern()\n                        ? format.getPattern()\n                        : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        final Locale loc = format.hasLocale()\n                        ? format.getLocale()\n                        : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}