{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // First: custom pattern will override things\n        if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                                || format.hasLocale() || format.hasTimeZone()) {\n            TimeZone tz = format.getTimeZone();\n            final String pattern = format.hasPattern()\n                           ? format.getPattern()\n                            : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale()\n                           ? format.getLocale()\n                            : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, use contextual SimpleDateFormat\n        SimpleDateFormat contextualSdf = (SimpleDateFormat)serializers.getDateFormat();\n        if (contextualSdf!= null) {\n            SimpleDateFormat instance = (SimpleDateFormat)contextualSdf.clone();\n            instance.setTimeZone(serializers.getTimeZone());\n            instance.setLenient(true); // if needed, might be worth adding config ability\n            return withFormat(Boolean.FALSE, instance);\n        }\n        // We should always get the formatter from provider.\n        if (contextualSdf == null) {\n            throw new JsonMappingException(\"SimpleDateFormat instance expected as providers date format.\");\n        }\n\n        // We don't expect it to go in here if it didn't go above\n        serializers.reportBadDefinition(handledType(), String.format(\"Could not resolve the SimpleDateFormater used while creating new Date formatter\")); \n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}