{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // Custom pattern overrides or if shape set to STRING\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n            || format.hasLocale() || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern = format.hasPattern()\n                ? format.getPattern()\n                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        final Locale loc = format.hasLocale()\n                ? format.getLocale()\n                : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    // Otherwise, use the default date format logic\n    // Attempt to reconfigure StdDateFormat if possible for locale or time zone\n    DateFormat defaultDf = serializers.getConfig().getDateFormat();\n    if (defaultDf instanceof StdDateFormat) {\n        StdDateFormat stdDf = (StdDateFormat) defaultDf;\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();\n        Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n        stdDf = stdDf.withTimeZone(tz).withLocale(loc);\n        return withFormat(Boolean.FALSE, stdDf);\n    } else if (defaultDf instanceof SimpleDateFormat) {\n        // Fallback for SimpleDateFormat\n        SimpleDateFormat df = (SimpleDateFormat) defaultDf;\n        SimpleDateFormat newDf = new SimpleDateFormat(df.toPattern(), df.getDateFormatSymbols());\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();\n        Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n        newDf.setTimeZone(tz);\n        // Re-create for locale\n        newDf.applyLocalizedPattern(df.toLocalizedPattern());\n        return withFormat(Boolean.FALSE, newDf);\n    }\n\n    // Default return (no contextual changes applied)\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}