{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // First: custom pattern will override things\n                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                                || format.hasLocale() || format.hasTimeZone()) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, need one of these changes:\n\n        DateFormat df = serializers.getConfig().getDateFormat();\n        // Jackson's own `StdDateFormat` is quite easy to deal with...\n        if (df instanceof StdDateFormat) {\n            StdDateFormat std = (StdDateFormat) df;\n            // 20-Apr-2016, tatu: With 2.8, must prevent use of default ISO8601 format\n            //    as it can be modified (and is often, via `DateFormat.getDateInstance()`)\n            //    but cannot be reliably cloned. Instead, create vanilla instance if it\n            //    looks like default one: better for date/time values also.\n            if (std.isDefault()) {\n                return withFormat(Boolean.FALSE, (DateFormat) std.clone());\n            }\n            return withFormat(Boolean.FALSE, (DateFormat) std.clone());\n        }\n        // 08-Jun-2017, tatu: Unfortunately there's no generally usable\n        //    mechanism for changing `DateFormat` instances (or even clone()ing)\n        //    So: require it be `SimpleDateFormat`; can't config other types\n        if (!(df instanceof SimpleDateFormat)) {\n            serializers.reportBadDefinition(handledType(), String.format(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\n                    df.getClass().getName()));\n        }\n        SimpleDateFormat sdf = (SimpleDateFormat) df;\n        // Ugh. No way to change `Locale`, create copy; must re-crete completely:\n        sdf = new SimpleDateFormat(sdf.toPattern(), format.hasLocale() ? format.getLocale() : sdf.getLocale());\n        TimeZone newTz = format.getTimeZone();\n        if (newTz == null) {\n            newTz = serializers.getTimeZone();\n        }\n        sdf.setTimeZone(newTz);\n        return withFormat(Boolean.FALSE, sdf);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}