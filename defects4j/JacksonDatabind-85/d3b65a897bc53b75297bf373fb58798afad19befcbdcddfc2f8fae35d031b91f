{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return withFormat(Boolean.TRUE, serializers.getDateFormat());\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n    // First: custom pattern will override things\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern = format.hasPattern()? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    // Otherwise, use serializer's default date format\n    SimpleDateFormat df = (SimpleDateFormat) serializers.getDateFormat().clone();\n    if (format.getTimeZone()!= null) {\n        df.setTimeZone(format.getTimeZone());\n    }\n    if (format.getLocale()!= null) {\n        df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n    }\n    return withFormat(Boolean.FALSE, df);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}