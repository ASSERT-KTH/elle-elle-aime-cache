{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // Handle formats where pattern, locale, or timezone is specified\n        if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                || format.hasLocale() || format.hasTimeZone()) {\n            TimeZone tz = format.getTimeZone();\n            final String pattern = format.hasPattern()\n                    ? format.getPattern()\n                    : StdDateFormat.DATE_FORMAT_STR_ISO8601; // Default pattern\n            final Locale loc = format.hasLocale()\n                    ? format.getLocale()\n                    : serializers.getLocale(); // Fallback to serializer's locale\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, attempt to use serializer context's default DateFormat\n        DateFormat defaultFormat = serializers.getConfig().getDateFormat();\n        if (defaultFormat != null) {\n            if (defaultFormat instanceof StdDateFormat) {\n                StdDateFormat std = (StdDateFormat) defaultFormat;\n                // Ensure timezone is respected\n                std = std.withTimeZone(serializers.getTimeZone())\n                         .withLocale(serializers.getLocale());\n                return withFormat(Boolean.FALSE, std);\n            } else if (defaultFormat instanceof SimpleDateFormat) {\n                SimpleDateFormat sdf = (SimpleDateFormat) defaultFormat;\n                SimpleDateFormat cloned = (SimpleDateFormat) sdf.clone();\n                cloned.setTimeZone(serializers.getTimeZone());\n                return withFormat(Boolean.FALSE, cloned);\n            }\n        }\n\n        return this; // Fallback to default serializer if no customization is applicable\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}