{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n                                          BeanProperty property) throws JsonMappingException {\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // Handle custom pattern, locale, or time zone specified in JsonFormat\n    if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {\n        // Use the specified pattern, locale, and time zone\n        String pattern = format.hasPattern() ? format.getPattern() : null;\n        Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();\n        if (pattern != null) {\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        } else {\n            // If no pattern is specified, use the default ISO8601 format\n            return withFormat(Boolean.FALSE, new StdDateFormat());\n        }\n    } else {\n        // No custom settings, use the default format from the ObjectMapper\n        DateFormat df = serializers.getDateFormat();\n        if (df instanceof SimpleDateFormat) {\n            return withFormat(Boolean.FALSE, df);\n        } else {\n            // Fallback to standard date format\n            return withFormat(Boolean.FALSE, new StdDateFormat());\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}