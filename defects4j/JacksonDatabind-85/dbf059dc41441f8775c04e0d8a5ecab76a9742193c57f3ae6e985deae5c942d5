{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException {\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // Handle custom pattern, locale, or timezone\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n            || format.hasLocale() || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern = format.hasPattern()\n                ? format.getPattern()\n                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n        final Locale loc = format.hasLocale()\n                ? format.getLocale()\n                : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    // Use the default format set in the SerializerProvider if none is explicitly defined\n    DateFormat defaultDateFormat = serializers.getConfig().getDateFormat();\n    if (defaultDateFormat instanceof StdDateFormat) {\n        // If the default is StdDateFormat, clone it to properly handle timezone\n        TimeZone tz = format.getTimeZone();\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        StdDateFormat std = (StdDateFormat) defaultDateFormat;\n        std = (StdDateFormat) std.withLocale(format.hasLocale() ? format.getLocale() : serializers.getLocale());\n        std = (StdDateFormat) std.withTimeZone(tz);\n        return withFormat(Boolean.FALSE, std);\n    } else if (defaultDateFormat instanceof SimpleDateFormat) {\n        // If it's a SimpleDateFormat, recreate a new instance with proper settings\n        SimpleDateFormat sdf = (SimpleDateFormat) defaultDateFormat;\n        TimeZone tz = format.getTimeZone();\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        SimpleDateFormat newSdf = new SimpleDateFormat(sdf.toPattern(), sdf.getLocale());\n        newSdf.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, newSdf);\n    }\n\n    // Fallback to default behavior if none of the above applies\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}