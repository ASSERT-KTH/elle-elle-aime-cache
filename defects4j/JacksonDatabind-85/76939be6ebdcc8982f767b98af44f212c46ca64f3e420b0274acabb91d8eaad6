{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException {\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // New: respect existing DateFormat configuration if no specific pattern is provided\n    TimeZone tz = format.getTimeZone();\n    final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n    if (tz == null) {\n        tz = serializers.getTimeZone();\n    }\n\n    // First: handle custom pattern\n    if (format.hasPattern()) {\n        String pattern = format.getPattern();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    // Otherwise handle default case for `SimpleDateFormat`\n    if ((shape == JsonFormat.Shape.STRING) || format.hasLocale() || format.hasTimeZone()) {\n        DateFormat base = serializers.getConfig().getDateFormat();\n        if (base instanceof StdDateFormat) {\n            // `StdDateFormat` is immutable, can be reconfigured\n            StdDateFormat std = (StdDateFormat) base;\n            std = std.withTimeZone(tz).withLocale(loc);\n            return withFormat(Boolean.FALSE, std);\n        }\n        // Otherwise assume it must be `SimpleDateFormat`\n        if (base instanceof SimpleDateFormat) {\n            // Need to recreate since `SimpleDateFormat` is mutable\n            SimpleDateFormat sdf = (SimpleDateFormat) base;\n            SimpleDateFormat df = new SimpleDateFormat(sdf.toPattern(), loc);\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n    }\n\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}