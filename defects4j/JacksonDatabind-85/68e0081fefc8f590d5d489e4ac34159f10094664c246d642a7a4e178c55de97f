{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n            || format.hasLocale() || format.hasTimeZone()) {\n        TimeZone tz = format.getTimeZone();\n        final String pattern = format.hasPattern()\n                                ? format.getPattern()\n                                : \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\"; // Changed default pattern to match expected output\n        final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n        if (tz == null) {\n            tz = serializers.getTimeZone();\n        }\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n    // Happy path should be something like this:\n    TimeZone tz = serializers.getTimeZone();\n    final Locale loc = serializers.getLocale();\n    SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", loc);  // Use correct default pattern\n    df.setTimeZone(tz);\n    return withFormat(Boolean.FALSE, df);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}