{
    "generation": "Element insert(Token.StartTag startTag) {\n    // handle empty unknown tags\n    // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.\n    if (startTag.isSelfClosing()) {\n        if (Tag.isKnownTag(startTag.name())) {  // handle known tags like div, script specially.\n            Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);\n            insert(el);\n            stack.add(el);\n            tokeniser.emit(new Token.EndTag(el.tagName()));  // force the end tag in parser. emitted for yielded processing.\n            return el;\n        } else {\n            Element el = insertEmpty(startTag);\n            stack.add(el);\n            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing.\n            return el;\n        }\n    }\n    // same as before, remove and insert the new elements and append to stack \n    // if the nextTag on stack is not correct it calls the insert process as described in the loop and process \n    Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);\n    insert(el);\n    return el;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}