{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = true;\n  Set<String> validProperties = Sets.newHashSet();\n\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore most indirect references\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // A call target may be using the object as a 'this' value.\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        ret = false;\n      }\n\n      // We care about a deletion if it happens to a property we've seen before\n      String propName = parent.getLastChild().getString();\n      if (gramps.isDelProp()) {\n        if (validProperties.contains(propName)) {\n          ret = false;\n        }\n        continue;\n      }\n\n      if (!validProperties.contains(propName)) {\n        if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n          validProperties.add(propName);\n        } else {\n          ret = false;\n        }\n      }\n      continue;\n    }\n\n    // Only accept VAR declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(name)) {\n      ret = false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      continue;\n    }\n\n    // Only consider object literal assignments\n    if (!val.isObjectLit()) {\n      ret = false;\n    }\n\n    // Check for self-referential assignments\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        // ES5 get/set not supported\n        ret = false;\n      }\n\n      validProperties.add(child.getString());\n\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            // found a self-referential assignment\n            ret = false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n  }\n\n  return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}