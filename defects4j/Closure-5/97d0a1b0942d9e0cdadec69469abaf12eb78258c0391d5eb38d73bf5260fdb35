{
    "generation": "// Deleting a property has different semantics from deleting\n// a variable, so deleted properties should not be inlined.\n\n// NOTE(nicksantos): This pass's object-splitting algorithm has\n// a blind spot. It assumes that if a property isn't defined on an\n// object, then the value is undefined. This is not true, because\n// Object.prototype can have arbitrary properties on it.\n//\n// We short-circuit this problem by bailing out if we see a reference\n// to a property that isn't defined on the object literal. This\n// isn't a perfect algorithm, but it should catch most cases.\nString propName = parent.getLastChild().getString();\nif (!validProperties.contains(propName)) {\n  if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n    validProperties.add(propName);\n  } else {\n    return false;\n  }\n}\ncontinue;",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}