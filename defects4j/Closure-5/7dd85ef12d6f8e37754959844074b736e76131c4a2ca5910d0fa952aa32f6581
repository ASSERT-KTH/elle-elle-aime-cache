{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore most indirect references, like x.y (but not x.y(),\n    // since the function referenced by y might reference 'this').\n    //\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // A call target may be using the object as a 'this' value.\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      }\n\n      // Deleting a property has different semantics from deleting\n      // a variable, so deleted properties should not be inlined.\n      String propName = parent.getLastChild().getString();\n      if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n        validProperties.add(propName);\n      } else if (!validProperties.contains(propName)) {\n        return false;\n      }\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements.\n    if (!NodeUtil.isVarOrSimpleAssignLhs(name)) {\n       return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null || !val.isObjectLit()) {\n      return false;\n    }\n\n    // Make sure that the value is not self-referential.\n    // Also, ES5 getters/setters are not handled by this pass.\n    for (Node child = val.getFirstChild(); child != null;\n         child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        // ES5 get/set not supported.\n        return false;\n      }\n\n      validProperties.add(child.getString());\n\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (refNode != null && !NodeUtil.isBlock(refNode)) {\n          if (refNode == childVal) {\n            return false; // There's a self-referential assignment.\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n\n    ret = true; // We have found an acceptable object literal assignment.\n  }\n  return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}