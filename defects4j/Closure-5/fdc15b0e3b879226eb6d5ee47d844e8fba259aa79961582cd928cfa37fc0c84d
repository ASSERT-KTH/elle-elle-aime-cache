{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = true;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        ret = false;\n        continue;\n      }\n\n      String propName = parent.getLastChild().getString();\n      if (!validProperties.contains(propName)) {\n        if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n          validProperties.add(propName);\n        } else {\n          ret = false;\n          continue;\n        }\n      }\n    } else {\n      if (!isVarOrAssignExprLhs(name)) {\n        ret = false;\n        continue;\n      }\n\n      Node val = ref.getAssignedValue();\n      if (val != null && val.isObjectLit()) {\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n          if (child.isGetterDef() || child.isSetterDef()) {\n            ret = false;\n            break;\n          }\n          String property = child.getString();\n          if (!isValidProperty(refs, child.getFirstChild(), property)) {\n            ret = false;\n            continue;\n          }\n          validProperties.add(property);\n        }\n      } else {\n        ret = false;\n        continue;\n      }\n    }\n  }\n  return ret;\n}\n\nprivate boolean isValidProperty(List<Reference> refs, Node val, String property) {\n  for (Reference ref : refs) {\n    Node refName = ref.getNode();\n    Node refParent = ref.getParent();\n    if (refParent.isGetProp() && refParent.getLastChild().getString().equals(property) && refParent.getFirstChild() == refName) {\n      if (ref.getParent().getParent().isVar() || ref.getParent().getParent().isAssign()) {\n        if (ref.getAssignedValue() != val) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}