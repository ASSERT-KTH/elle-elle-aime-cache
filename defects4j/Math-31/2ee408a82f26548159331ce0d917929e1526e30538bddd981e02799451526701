{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = hPrev;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double delta;\n        if (Precision.equals(cPrev, 0.0, small)) {\n            delta = b / a;\n        } else {\n            delta = b + a / cPrev;\n        }\n\n        if (Precision.equals(delta, 0.0, small)) {\n            delta = small;\n        }\n\n        cPrev = delta / (1.0 + delta);\n        hN = hPrev * cPrev;\n\n        if (Precision.equals(hN, 0.0, small)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n        }\n\n        if (FastMath.abs(hN - hPrev) < epsilon * FastMath.abs(hN)) {\n            break;\n        }\n\n        dPrev = hPrev + a * dPrev;\n        if (Precision.equals(dPrev, 0.0, small)) {\n            dPrev = small;\n        }\n\n        dPrev = b / dPrev;\n        hPrev = hN;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}