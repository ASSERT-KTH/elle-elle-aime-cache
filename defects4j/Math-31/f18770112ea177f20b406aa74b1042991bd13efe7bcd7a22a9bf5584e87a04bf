{
    "generation": "    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50;\n        double hPrev = getA(0, x);\n\n        // Use the value of small as epsilon criteria for zero checks\n        if (Precision.equals(hPrev, 0.0, small)) {\n            hPrev = small;\n        }\n\n        int n = 1;\n        double dPrev = 1.0;  // Initialize dPrev to 1.0 instead of 0.0 to avoid division by zero\n        double cPrev = 1.0;  // Initialize cPrev to 1.0 instead of hPrev to start with a safe scaling\n        double hN = hPrev;\n\n        while (n < maxIterations) {\n            final double a = getA(n, x);\n            final double b = getB(n, x);\n\n            dPrev = b + a * dPrev;\n            if (Precision.equals(dPrev, 0.0, small)) {\n                dPrev = small;\n            }\n\n            cPrev = b + a / cPrev;\n            if (Precision.equals(cPrev, 0.0, small)) {\n                cPrev = small;\n            }\n\n            dPrev = 1.0 / dPrev;\n            final double deltaN = cPrev * dPrev;\n            hN *= deltaN;\n\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n            }\n\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break;\n            }\n\n            n++;\n        }\n\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        return hN;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}