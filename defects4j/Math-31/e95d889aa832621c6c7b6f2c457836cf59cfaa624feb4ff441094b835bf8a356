{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            double scale = FastMath.max(FastMath.abs(hPrev), FastMath.max(FastMath.abs(p0), FastMath.max(FastMath.abs(q1), FastMath.abs(dPrev))));\n            if (scale <= 0) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            hPrev /= scale;\n            p0 /= scale;\n            q1 /= scale;\n            dPrev /= scale;\n            cN = a * hPrev + b * p0;\n            q2 = a * q1 + b * dPrev;\n            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n        }\n\n        final double deltaN = cN / q2 / cPrev;\n        hN = cPrev * deltaN;\n\n        if (Double.isInfinite(hN) || Double.isNaN(hN)) {\n            throw new ConvergenceException(\n                hN != hN ? LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE : LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                x);\n        }\n\n        double absEpsilon = epsilon * FastMath.abs(x);\n        if (FastMath.abs(deltaN - 1.0) < epsilon && FastMath.abs(hN - hPrev) < absEpsilon) {\n            break;\n        }\n\n        dPrev = q1;\n        cPrev = cN / q2;\n        p0 = hPrev;\n        hPrev = cN;\n        q1 = q2;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}