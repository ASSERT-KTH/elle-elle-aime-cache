{
    "generation": "    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50;\n        double hPrev = getA(0, x);\n\n        if (Precision.equals(hPrev, 0.0, small)) {\n            hPrev = small;\n        }\n\n        double c0 = hPrev;\n        double d0 = 0.0;\n        double delta0 = 1.0;\n\n        double c1 = getA(1, x) * hPrev;\n        double d1 = getB(1, x);\n        double delta1 = c1 / d1;\n\n        double hN = hPrev + delta1;\n        double cN = c1;\n        double dN = d1;\n        double deltaN = delta1;\n\n        for(int i = 2; i < maxIterations; i++) {\n            double aN = getA(i, x);\n            double bN = getB(i, x);\n\n            double cN_tmp = aN * cN + bN * cN_tmp;\n            double dN_tmp = aN * dN + bN * d0;\n\n            if (Double.isInfinite(cN_tmp) || Double.isInfinite(dN_tmp)) {\n                double scaleFactor = 1d;\n                double lastScaleFactor = 1d;\n                final int maxPower = 5;\n                final double scale = FastMath.max(aN, bN);\n                if (scale <= 0) {\n                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                }\n                for (int j = 0; j < maxPower; j++) {\n                    lastScaleFactor = scaleFactor;\n                    scaleFactor *= scale;\n                    cN_tmp = aN / scaleFactor * cN + c0 / lastScaleFactor;\n                    dN_tmp = aN / scaleFactor * dN + d0 / lastScaleFactor;\n                    if (!(Double.isInfinite(cN_tmp) || Double.isInfinite(dN_tmp))) {\n                        break;\n                    }\n                }\n            }\n\n            deltaN = cN_tmp / dN_tmp;\n            hN += deltaN;\n            c0 = cN;\n            cN = cN_tmp;\n            d0 = dN;\n            dN = dN_tmp;\n            delta0 = deltaN;\n\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                               x);\n            }\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                               x);\n            }\n\n            if (FastMath.abs(deltaN - delta0) < epsilon) {\n                break;\n            }\n        }\n\n        if (i == maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        return hN;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}