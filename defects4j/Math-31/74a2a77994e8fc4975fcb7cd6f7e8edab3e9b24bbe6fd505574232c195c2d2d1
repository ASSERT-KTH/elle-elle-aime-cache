{
    "generation": "/**\n * <p>\n * Evaluates the continued fraction at the value x.\n * </p>\n *\n * <p>\n * The implementation of this method is based on the modified Lentz algorithm as described\n * on page 18 ff. in:\n * <ul>\n * <li>\n *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n * </li>\n * </ul>\n * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n * </p>\n *\n * @param x the evaluation point.\n * @param epsilon maximum error allowed.\n * @param maxIterations maximum number of convergents\n * @return the value of the continued fraction evaluated at x.\n * @throws ConvergenceException if the algorithm fails to converge.\n */\npublic double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a + b / cPrev;\n        double dN = 1.0 / (b + a * dPrev);\n\n        if (Double.isInfinite(cN) || Double.isInfinite(dN)) {\n            // If cN or dN is infinite, reset to a smaller value to prevent overflow\n            cN = FastMath.signum(cN) * Double.MAX_VALUE / 2;\n            dN = FastMath.signum(dN) * Double.MAX_VALUE / 2;\n        }\n\n        double deltaN = cN * dN;\n        hN = hPrev * deltaN;\n\n        if (Double.isInfinite(hN)) {\n            // If hN is infinite, scale down to prevent overflow\n            hN = FastMath.signum(hN) * Double.MAX_VALUE / 2;\n        }\n\n        if (Double.isNaN(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n        }\n\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        dPrev = dN;\n        cPrev = cN;\n        hPrev = hN;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}