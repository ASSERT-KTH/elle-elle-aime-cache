{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double D = a + b / dPrev;\n        if (Double.isInfinite(D)) {\n            D = small;\n        }\n        double dN = 1 / D;\n        double cN = a + b * cPrev * dN;\n\n        if (Double.isInfinite(cN)) {\n            return hN; // Early return to avoid infinite values\n        }\n\n        final double deltaN = cN / cPrev;\n        hN = hPrev * deltaN;\n\n        if (Double.isInfinite(hN) || Double.isNaN(hN)) {\n            return hN; // Early return to avoid infinite or NaN values\n        }\n\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        dPrev = dN;\n        cPrev = cN;\n        hPrev = hN;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                            maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}