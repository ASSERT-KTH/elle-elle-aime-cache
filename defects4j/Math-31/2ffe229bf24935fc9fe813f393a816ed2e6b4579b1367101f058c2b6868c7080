{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a + b / hPrev;\n        double dN = 1.0 / (b + a * dPrev);\n\n        if (Double.isInfinite(cN) || Double.isInfinite(dN)) {\n            // Handle potential overflow\n            double scaleFactor = FastMath.max(a, b);\n            if (scaleFactor > 0) {\n                cN = a / scaleFactor + b / (hPrev * scaleFactor);\n                dN = 1.0 / (b / scaleFactor + a * dPrev / scaleFactor);\n            } else {\n                // If scaleFactor is 0, we can't scale, so we'll use a different approach\n                cN = a + b / hPrev;\n                dN = 1.0 / (b + a * dPrev);\n            }\n        }\n\n        double deltaN = cN * dN;\n        hN = hPrev * deltaN;\n\n        if (Double.isInfinite(hN)) {\n            // Handle overflow by rescaling\n            double scale = FastMath.max(1.0, FastMath.abs(hN));\n            hN /= scale;\n            hPrev /= scale;\n            p0 /= scale;\n            cPrev /= scale;\n        }\n\n        if (Double.isNaN(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n        }\n\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        dPrev = dN;\n        cPrev = cN;\n        p0 = hPrev;\n        hPrev = hN;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}