{
    "generation": "/**\n * Evaluates the continued fraction at the value x.\n * \n * @param x the evaluation point.\n * @param epsilon maximum error allowed.\n * @param maxIterations maximum number of convergents\n * @return the value of the continued fraction evaluated at x.\n * @throws ConvergenceException if the algorithm fails to converge.\n */\npublic double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n        \n        // **BUG FIX**: Introduce a more robust scaling approach to handle large values\n        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            double scaleFactor = Math.max(Math.abs(a), Math.abs(b));\n            if (scaleFactor <= 0) {  // Can't scale\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            int scalePower = 0;\n            while (Double.isInfinite(cN / Math.pow(scaleFactor, scalePower)) || \n                   Double.isInfinite(q2 / Math.pow(scaleFactor, scalePower))) {\n                scalePower++;\n            }\n            cN /= Math.pow(scaleFactor, scalePower);\n            q2 /= Math.pow(scaleFactor, scalePower);\n        }\n\n        final double deltaN = cN / q2 / cPrev;\n        hN = cPrev * deltaN;\n\n        if (Double.isInfinite(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                           x);\n        }\n        if (Double.isNaN(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                           x);\n        }\n\n        // **BUG FIX**: Use a more precise convergence criterion\n        if (Math.abs(deltaN - 1.0) < epsilon && Math.abs(hN - cPrev) < epsilon) {\n            break;\n        }\n\n        dPrev = q1;\n        cPrev = cN / q2;\n        p0 = hPrev;\n        hPrev = cN;\n        q1 = q2;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                            maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}