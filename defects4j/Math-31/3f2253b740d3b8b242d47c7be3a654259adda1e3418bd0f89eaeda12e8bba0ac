{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = getB(0, x);\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a + (b / hPrev);\n        double dN = b + (a / dPrev);\n\n        if (Double.isInfinite(cN) || Double.isInfinite(dN)) {\n            double scaleFactor = 1d;\n            final double scale = Math.max(Math.abs(a), Math.abs(b));\n            if (scale <= 0) {  // Can't scale\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            for (int i = 0; i < 5; i++) {\n                scaleFactor *= scale;\n                cN = a / scaleFactor + (b / (hPrev * scaleFactor));\n                dN = b / scaleFactor + (a / (dPrev * scaleFactor));\n                if (!(Double.isInfinite(cN) || Double.isInfinite(dN))) {\n                    break;\n                }\n            }\n        }\n\n        if (Double.isInfinite(cN) || Double.isInfinite(dN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        }\n\n        if (cN == 0.0) {\n            cN = small;\n        }\n\n        final double deltaN = cN / dN;\n        hN = hPrev * deltaN;\n\n        if (Double.isNaN(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n        }\n\n        if (Math.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        dPrev = dN;\n        p0 = cN;\n        hPrev = cN;\n        q1 = b;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}