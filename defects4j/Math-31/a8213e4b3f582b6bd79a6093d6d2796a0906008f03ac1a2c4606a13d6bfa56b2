{
    "generation": "    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50;\n        double a = getA(0, x);\n        double hPrev = Double.isNaN(a) ? small : a;\n\n        int n = 1;\n        double dPrev = 0.0;\n        double p0 = 1.0;\n        double q1 = 1.0;\n        double cPrev = hPrev;\n        double hN = hPrev;\n\n        while (n < maxIterations) {\n            final double aN = getA(n, x);\n            final double bN = getB(n, x);\n\n            double cN = aN * hPrev + bN * p0;\n            double q2 = aN * q1 + bN * dPrev;\n            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                double scaleFactor = 1d;\n                final double scale = FastMath.max(FastMath.abs(aN), FastMath.abs(bN));\n                if (scale <= 0) {  // Can't scale\n                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                }\n                int maxPower = 5;\n                for (int i = 0; i < maxPower; i++) {\n                    scaleFactor *= scale;\n                    if (scaleFactor >= Double.MAX_VALUE) {\n                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                    }\n                    if (aN != 0.0 && aN > bN) {\n                        cN = hPrev / scaleFactor + (bN / scale * p0);\n                        q2 = q1 / scaleFactor + (bN / scale * dPrev);\n                    } else if (bN != 0) {\n                        cN = (aN / scale * hPrev) + p0 / scaleFactor;\n                        q2 = (aN / scale * q1) + dPrev / scaleFactor;\n                    }\n                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n                        break;\n                    }\n                }\n            }\n\n            final double deltaN = cN / q2 / cPrev;\n            hN = cPrev * deltaN;\n\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n            }\n\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break;\n            }\n\n            dPrev = q1;\n            cPrev = cN / q2;\n            p0 = hPrev;\n            hPrev = cN;\n            q1 = q2;\n            n++;\n        }\n\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n        }\n\n        return hN;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}