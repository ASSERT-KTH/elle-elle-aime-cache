{
    "generation": "/**\n * Access the initial domain value, based on <code>p</code>, used to\n * bracket a CDF root. This method is used by\n * {@link #inverseCumulativeProbability(double)} to find critical values.\n *\n * @param p the desired probability for the critical value\n * @return initial domain value\n */\nprotected double getInitialDomain(double p) {\n    double ret;\n    double n = getNumeratorDegreesOfFreedom();\n    double d = getDenominatorDegreesOfFreedom();\n    \n    if (p < 0.5) {\n        // For p < 0.5, use a smaller initial value\n        ret = p * d / (n + d);\n    } else {\n        // For p >= 0.5, use a larger initial value\n        ret = (1 - p) * (n + d) / d;\n    }\n    \n    return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}