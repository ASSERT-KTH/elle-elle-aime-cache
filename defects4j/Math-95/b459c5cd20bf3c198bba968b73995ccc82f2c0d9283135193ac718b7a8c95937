{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        \n        // Handle the case when degrees of freedom are too small\n        if (d <= 2.0) {\n            // Fallback to a reasonable value to avoid invalid endpoint parameters\n            ret = 1.0;\n        } else {\n            // Use mean for degrees of freedom greater than 2\n            ret = d / (d - 2.0);\n        }\n        \n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}