{
    "generation": "/**\n * Access the initial domain value, based on <code>p</code>, used to\n * bracket a CDF root.  This method is used by\n * {@link #inverseCumulativeProbability(double)} to find critical values.\n * \n * @param p the desired probability for the critical value\n * @return initial domain value\n */\nprotected double getInitialDomain(double p) {\n    double ret;\n    double d = getDenominatorDegreesOfFreedom();\n    // Fix: handle the case where d is close to 2.0 to avoid division by zero\n    // and use a more suitable initial guess for the root bracketing\n    if (Math.abs(d - 2.0) < 1e-6) { // arbitrary small threshold, adjust if needed\n        ret = 1.0; // or any other reasonable initial guess for d \u2248 2.0\n    } else if (d < 2.0) {\n        throw new IllegalStateException(\"Denominator degrees of freedom must be \u2265 2.0\");\n    } else {\n        // use mean as initial guess for d > 2.0\n        ret = d / (d - 2.0);\n    }\n    return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}