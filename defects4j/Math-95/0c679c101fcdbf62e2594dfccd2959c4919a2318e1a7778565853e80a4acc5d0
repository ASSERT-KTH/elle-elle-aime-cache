{
    "generation": "/**\n * Access the initial domain value, based on <code>p</code>, used to\n * bracket a CDF root.  This method is used by\n * {@link #inverseCumulativeProbability(double)} to find critical values.\n * \n * @param p the desired probability for the critical value\n * @return initial domain value\n */\nprotected double getInitialDomain(double p) {\n    double ret;\n    double d = getDenominatorDegreesOfFreedom();\n    if (d > 2.0) {\n        // use mean for d > 2\n        ret = d / (d - 2.0);\n    } else if (d == 2.0) {\n        // special handling for d = 2 to avoid negative value\n        ret = 1.0; // or another suitable initial value for this edge case\n    } else {\n        // handle invalid denominator degrees of freedom\n        throw new IllegalArgumentException(\"Denominator degrees of freedom must be >= 2\");\n    }\n    return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}