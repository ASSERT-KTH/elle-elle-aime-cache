{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        double n = getNumeratorDegreesOfFreedom();\n\n        // Use a more appropriate initial guess for the F-distribution\n        if (p < 0.5) {\n            ret = d / (d - 2.0 * p * d);\n        } else {\n            ret = 1.0 / (d / (d - 2.0 * (1 - p) * d));\n        }\n\n        // Ensure the initial guess is within the valid range\n        ret = Math.max(ret, 0.0);\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}