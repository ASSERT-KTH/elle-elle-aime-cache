{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root. This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double n = getNumeratorDegreesOfFreedom();\n        double d = getDenominatorDegreesOfFreedom();\n        double ret;\n\n        if (d <= 2) {\n            // For small denominator degrees of freedom, adjust the calculation\n            // to ensure a positive and reasonable starting value\n            ret = 1.0 + (2.0 / (d * (d + 2)));\n        } else {\n            // Use the mean for larger denominator degrees of freedom\n            ret = d / (d - 2.0);\n        }\n\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}