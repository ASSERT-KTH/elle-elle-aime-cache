{
    "generation": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    String key = tq.consumeAttributeKey();\n    String value = \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"=\")) {\n        tq.consumeWhitespace();\n\n        if (tq.matchChomp(SQ)) {\n            if (tq.indexOf(SQ) != -1) {\n                value = tq.chompTo(SQ);\n            } else {\n                // No closing single quote, handle error or read till end\n                value = tq.chompAll();\n            }\n        } else if (tq.matchChomp(DQ)) {\n            if (tq.indexOf(DQ) != -1) {\n                value = tq.chompTo(DQ);\n            } else {\n                // No closing double quote, handle error or read till end\n                value = tq.chompAll();\n            }\n        } else {\n            StringBuilder valueAccum = new StringBuilder();\n            // no ' or \" to look for, so scan to end tag or space (or end of stream)\n            while (!tq.isEmpty() && !tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace()) {\n                valueAccum.append(tq.consume());\n            }\n            value = valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n    if (key.length() != 0)\n        return Attribute.createFromEncoded(key, value);\n    else {\n        if (!tq.isEmpty()) {\n            tq.consume();\n        }\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}