{
    "generation": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    String key = tq.consumeAttributeKey();\n    String value = \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"=\")) {\n        tq.consumeWhitespace();\n\n        if (tq.matchChomp(SQ)) {\n            value = tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            value = tq.chompTo(DQ);\n        } else {\n            StringBuilder valueAccum = new StringBuilder();\n            // no ' or \" to look for, so scan to end tag or space (or end of stream)\n            while (!tq.matchesAny(\"<\", \"/>\", \">\") &&!tq.matchesWhitespace() &&!tq.isEmpty()) {\n                char c = tq.consume();\n                // Check for attribute value separator (space, tab, newline, etc.)\n                if (Character.isWhitespace(c)) {\n                    break; // stop accumulating value on whitespace\n                }\n                valueAccum.append(c);\n            }\n            value = valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n    if (key.length()!= 0) {\n        return Attribute.createFromEncoded(key, value);\n    } else {\n        // Consume the invalid attribute key (which is probably just a '=' or whitespace)\n        while (!tq.isEmpty() && (tq.matchesWhitespace() || tq.consume() == '=')) {\n            // empty loop body, just consume\n        }\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}