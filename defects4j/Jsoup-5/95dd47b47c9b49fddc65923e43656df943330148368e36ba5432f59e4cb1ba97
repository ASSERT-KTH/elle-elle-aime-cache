{
    "generation": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    String key = tq.consumeAttributeKey();\n    String value = \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"=\")) {\n        tq.consumeWhitespace();\n\n        if (tq.matchChomp(SQ)) {\n            value = tq.chompTo(SQ).orElse(\"\");\n        } else if (tq.matchChomp(DQ)) {\n            value = tq.chompTo(DQ).orElse(\"\");\n        } else {\n            StringBuilder valueAccum = new StringBuilder();\n            while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                valueAccum.append(tq.consume());\n            }\n            value = valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n    if (!key.isEmpty()) {\n        return Attribute.createFromEncoded(key, value);\n    } else {\n        // If the key is empty, consume the next character to avoid an infinite loop.\n        if (!tq.isEmpty()) {\n            tq.consume();\n        }\n\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}