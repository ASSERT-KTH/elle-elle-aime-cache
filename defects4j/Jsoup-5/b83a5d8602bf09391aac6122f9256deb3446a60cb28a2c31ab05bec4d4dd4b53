{
    "generation": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    String key = tq.consumeAttributeKey();\n    String value = \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"=\")) {\n        tq.consumeWhitespace();\n\n        if (tq.matchChomp(SQ) || tq.matchChomp(DQ)) {\n            char quote = tq.consume();\n            value = tq.chompTo(quote);\n            tq.consume(); // consume the closing quote\n        } else {\n            // Unquoted value: scan to end tag, space, or end of stream\n            StringBuilder valueAccum = new StringBuilder();\n            while (!tq.matchesAny(\"<\", \"/>\", \">\", \" \") &&!tq.isEmpty()) {\n                valueAccum.append(tq.consume());\n            }\n            value = valueAccum.toString().trim(); // trim trailing whitespace\n        }\n        tq.consumeWhitespace();\n    }\n    return key.length()!= 0? Attribute.createFromEncoded(key, value) : null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}