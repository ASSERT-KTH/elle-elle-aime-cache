{
    "generation": "/**\n * Parse an attribute key-value pair.\n * \n * @return the parsed attribute, or null if the key was empty\n */\nprivate Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    String key = tq.consumeAttributeKey();\n    String value = \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"=\")) {\n        tq.consumeWhitespace();\n\n        if (tq.matchChomp(SQ)) {\n            value = tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            value = tq.chompTo(DQ);\n        } else {\n            StringBuilder valueAccum = new StringBuilder();\n            // no ' or \" to look for, so scan to end tag or space (or end of stream)\n            while (!tq.matchesAny(\"<\", \"/>\", \">\") &&!tq.matchesWhitespace() &&!tq.isEmpty()) {\n                char c = tq.consume();\n                if (c == '>' || c == '<') { // Stop at tag boundaries to prevent IndexOutOfBoundsException\n                    tq.unconsume(); // Put the character back for further processing\n                    break;\n                }\n                valueAccum.append(c);\n            }\n            value = valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n    if (key.length()!= 0)\n        return Attribute.createFromEncoded(key, value);\n    else {\n        // Consume the equals sign to prevent infinite loop\n        if (tq.matches(\"=\")) {\n            tq.consume();\n        }\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}