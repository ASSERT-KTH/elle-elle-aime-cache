{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        //... existing code...\n\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            String name = endTag.name();\n            //... existing code...\n\n            else if (StringUtil.in(name, \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                // Adoption Agency Algorithm.\n                OUTER:\n                for (int i = 0; i < 8; i++) {\n                    Element formatEl = tb.getActiveFormattingElement(name);\n                    if (formatEl == null)\n                        return anyOtherEndTag(t, tb);\n                    else if (!tb.onStack(formatEl)) {\n                        tb.error(this);\n                        tb.removeFromActiveFormattingElements(formatEl);\n                        return true;\n                    } else if (!tb.inScope(formatEl.nodeName())) {\n                        tb.error(this);\n                        return false;\n                    } else if (tb.currentElement()!= formatEl)\n                        tb.error(this);\n\n                    Element furthestBlock = null;\n                    Element commonAncestor = null;\n                    boolean seenFormattingElement = false;\n                    LinkedList<Element> stack = tb.getStack();\n                    // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                    // run-aways\n                    for (int si = 0; si < stack.size() && si < 64; si++) {\n                        Element el = stack.get(si);\n                        if (el == formatEl) {\n                            commonAncestor = stack.get(si - 1);\n                            seenFormattingElement = true;\n                        } else if (seenFormattingElement && tb.isSpecial(el)) {\n                            furthestBlock = el;\n                            break;\n                        }\n                    }\n                    if (furthestBlock == null) {\n                        if (name.equals(\"a\")) { // add a check for 'a' tag\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"a\")); // if no 'a' tag to close, creates an empty </a>\n                            return tb.process(endTag);\n                        } else {\n                            tb.popStackToClose(formatEl.nodeName());\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            return true;\n                        }\n                    }\n\n                    //... existing code...",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}