{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n                return tb.process(t, InHead);\n            } else if (name.equals(\"body\")) {\n                tb.error(this);\n                LinkedList<Element> stack = tb.getStack();\n                if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                    return false; // ignore\n                } else {\n                    tb.framesetOk(false);\n                    Element body = stack.get(1);\n                    for (Attribute attribute : startTag.getAttributes()) {\n                        if (!body.hasAttr(attribute.getKey()))\n                            body.attributes().put(attribute);\n                    }\n                }\n            } else if (name.equals(\"a\")) {\n                if (tb.getActiveFormattingElement(\"a\") != null) {\n                    tb.error(this);\n                    tb.process(new Token.EndTag(\"a\"));\n\n                    Element remainingA = tb.getFromStack(\"a\");\n                    if (remainingA != null) {\n                        tb.removeFromActiveFormattingElements(remainingA);\n                        tb.removeFromStack(remainingA);\n                    }\n                }\n                tb.reconstructFormattingElements();\n                Element a = tb.insert(startTag);\n                tb.pushActiveFormattingElements(a);\n            } else {\n                return handleStartTag(name, startTag, tb);\n            }\n            break;\n\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.name();\n            if (name.equals(\"body\")) {\n                if (!tb.inScope(\"body\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.transition(AfterBody);\n                }\n            } else if (name.equals(\"html\")) {\n                boolean notIgnored = tb.process(new Token.EndTag(\"body\"));\n                if (notIgnored)\n                    return tb.process(endTag);\n            } else if (StringUtil.in(name, \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                return handleFormattingEndTag(name, t, tb);\n            } else {\n                return anyOtherEndTag(t, tb);\n            }\n            break;\n\n        case EOF:\n            // handle EOF case if needed\n            break;\n    }\n    return true;\n}\n\nprivate boolean handleStartTag(String name, Token.StartTag startTag, HtmlTreeBuilder tb) {\n    if (StringUtil.in(name, \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\")) {\n        if (tb.inButtonScope(\"p\")) {\n            tb.process(new Token.EndTag(\"p\"));\n        }\n        tb.insert(startTag);\n    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n        if (tb.inButtonScope(\"p\")) {\n            tb.process(new Token.EndTag(\"p\"));\n        }\n        if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n            tb.error(this);\n            tb.pop();\n        }\n        tb.insert(startTag);\n    } else if (name.equals(\"li\")) {\n        tb.framesetOk(false);\n        LinkedList<Element> stack = tb.getStack();\n        for (int i = stack.size() - 1; i > 0; i--) {\n            Element el = stack.get(i);\n            if (el.nodeName().equals(\"li\")) {\n                tb.process(new Token.EndTag(\"li\"));\n                break;\n            }\n            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                break;\n        }\n        if (tb.inButtonScope(\"p\")) {\n            tb.process(new Token.EndTag(\"p\"));\n        }\n        tb.insert(startTag);\n    } else {\n        // Handle other start tags\n    }\n    return true;\n}\n\nprivate boolean handleFormattingEndTag(String name, Token.EndTag t, HtmlTreeBuilder tb) {\n    // Implementation of the adoption agency algorithm\n    for (int i = 0; i < 8; i++) {\n        Element formatEl = tb.getActiveFormattingElement(name);\n        if (formatEl == null) {\n            return anyOtherEndTag(t, tb);\n        } else if (!tb.onStack(formatEl)) {\n            tb.error(this);\n            tb.removeFromActiveFormattingElements(formatEl);\n            return true;\n        } else if (!tb.inScope(formatEl.nodeName())) {\n            tb.error(this);\n            return false;\n        } else if (tb.currentElement() != formatEl) {\n            tb.error(this);\n        }\n\n        Element furthestBlock = null;\n        Element commonAncestor = null;\n        boolean seenFormattingElement = false;\n        LinkedList<Element> stack = tb.getStack();\n\n        for (int si = 0; si < stack.size(); si++) {\n            Element el = stack.get(si);\n            if (el == formatEl) {\n                commonAncestor = stack.get(si - 1);\n                seenFormattingElement = true;\n            } else if (seenFormattingElement && tb.isSpecial(el)) {\n                furthestBlock = el;\n                break;\n            }\n        }\n        if (furthestBlock == null) {\n            tb.popStackToClose(formatEl.nodeName());\n            tb.removeFromActiveFormattingElements(formatEl);\n            return true;\n        }\n\n        Element node = furthestBlock;\n        Element lastNode = furthestBlock;\n\n        for (int innerLoop = 0; innerLoop < 3; innerLoop++) {\n            if (tb.onStack(node))\n                node = tb.aboveOnStack(node);\n\n            if (!tb.isInActiveFormattingElements(node)) {\n                tb.removeFromStack(node);\n                continue;\n            }\n\n            Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n            tb.replaceActiveFormattingElement(node, replacement);\n            tb.replaceOnStack(node, replacement);\n            node = replacement;\n\n            if (lastNode == furthestBlock) {\n                // logic for handling furthestBlock case\n            }\n            if (lastNode.parent() != null) {\n                lastNode.remove();\n            }\n            node.appendChild(lastNode);\n\n            lastNode = node;\n        }\n\n        tb.removeFromActiveFormattingElements(formatEl);\n        tb.removeFromStack(formatEl);\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}