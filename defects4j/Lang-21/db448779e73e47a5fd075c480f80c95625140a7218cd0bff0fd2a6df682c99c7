{
    "generation": "/**\n * <p>Checks if two calendar objects represent the same local time.</p>\n *\n * <p>This method compares the values of the fields of the two objects, \n * considering their respective time zones.</p>\n * \n * @param cal1  the first calendar, not altered, not null\n * @param cal2  the second calendar, not altered, not null\n * @return true if they represent the same local time\n * @throws IllegalArgumentException if either date is <code>null</code>\n * @since 2.1\n */\npublic static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // Normalize to a common time zone (e.g., UTC) for comparison\n    long utc1 = cal1.getTimeInMillis() - cal1.getTimeZone().getOffset(cal1.getTimeInMillis());\n    long utc2 = cal2.getTimeInMillis() - cal2.getTimeZone().getOffset(cal2.getTimeInMillis());\n    \n    // Compare the local times by comparing the UTC times and the time zones\n    return (utc1 / (1000 * 60 * 60 * 24) == utc2 / (1000 * 60 * 60 * 24)) &&  // same day\n           ((utc1 % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60) == (utc2 % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)) &&  // same hour\n           ((utc1 % (1000 * 60 * 60)) / (1000 * 60) == (utc2 % (1000 * 60 * 60)) / (1000 * 60)) &&  // same minute\n           (utc1 % (1000 * 60) == utc2 % (1000 * 60));  // same second and millisecond\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}