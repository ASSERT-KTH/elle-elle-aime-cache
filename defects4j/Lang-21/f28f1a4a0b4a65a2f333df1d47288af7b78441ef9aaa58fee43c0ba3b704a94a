{
    "generation": "/**\n * <p>Checks if two calendar objects represent the same local time.</p>\n *\n * <p>This method compares the values of the fields of the two objects\n * after normalizing them to the same time zone. In addition, both calendars\n * must be of the same type.</p>\n * \n * @param cal1  the first calendar, not altered, not null\n * @param cal2  the second calendar, not altered, not null\n * @return true if they represent the same local time after normalization\n * @throws IllegalArgumentException if either date is <code>null</code>\n * @since 2.1\n */\npublic static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    \n    // Normalize both calendars to the same time zone\n    TimeZone tz = TimeZone.getDefault();\n    Calendar normalizedCal1 = (Calendar) cal1.clone();\n    Calendar normalizedCal2 = (Calendar) cal2.clone();\n    normalizedCal1.setTimeZone(tz);\n    normalizedCal2.setTimeZone(tz);\n    \n    return (normalizedCal1.get(Calendar.MILLISECOND) == normalizedCal2.get(Calendar.MILLISECOND) &&\n            normalizedCal1.get(Calendar.SECOND) == normalizedCal2.get(Calendar.SECOND) &&\n            normalizedCal1.get(Calendar.MINUTE) == normalizedCal2.get(Calendar.MINUTE) &&\n            normalizedCal1.get(Calendar.HOUR_OF_DAY) == normalizedCal2.get(Calendar.HOUR_OF_DAY) && // Use HOUR_OF_DAY to compare the 24-hour format\n            normalizedCal1.get(Calendar.DAY_OF_YEAR) == normalizedCal2.get(Calendar.DAY_OF_YEAR) &&\n            normalizedCal1.get(Calendar.YEAR) == normalizedCal2.get(Calendar.YEAR) &&\n            normalizedCal1.get(Calendar.ERA) == normalizedCal2.get(Calendar.ERA) &&\n            cal1.getClass() == cal2.getClass());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}