{
    "generation": "/**\n * <p>Checks if two calendar objects represent the same local time.</p>\n * \n * <p>This method compares the values of the fields of the two objects.\n * In addition, both calendars must be the same of the same type.</p>\n * \n * @param cal1  the first calendar, not altered, not null\n * @param cal2  the second calendar, not altered, not null\n * @return true if they represent the same millisecond instant\n * @throws IllegalArgumentException if either date is <code>null</code>\n * @since 2.1\n */\npublic static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // Convert the calendar objects to the same timezone for comparison\n    Calendar temp1 = (Calendar) cal1.clone();\n    temp1.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    Calendar temp2 = (Calendar) cal2.clone();\n    temp2.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    return (temp1.get(Calendar.MILLISECOND) == temp2.get(Calendar.MILLISECOND) &&\n            temp1.get(Calendar.SECOND) == temp2.get(Calendar.SECOND) &&\n            temp1.get(Calendar.MINUTE) == temp2.get(Calendar.MINUTE) &&\n            temp1.get(Calendar.HOUR_OF_DAY) == temp2.get(Calendar.HOUR_OF_DAY) &&\n            temp1.get(Calendar.DAY_OF_YEAR) == temp2.get(Calendar.DAY_OF_YEAR) &&\n            temp1.get(Calendar.YEAR) == temp2.get(Calendar.YEAR) &&\n            temp1.get(Calendar.ERA) == temp2.get(Calendar.ERA) &&\n            cal1.getClass() == cal2.getClass());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}