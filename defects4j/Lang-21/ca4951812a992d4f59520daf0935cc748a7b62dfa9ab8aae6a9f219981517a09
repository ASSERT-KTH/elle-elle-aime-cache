{
    "generation": "    /**\n     * <p>Checks if two calendar objects represent the same local time.</p>\n     *\n     * <p>This method compares the values of the fields of the two objects.\n     * In addition, both calendars must be of the same type.</p>\n     * \n     * @param cal1  the first calendar, not altered, not null\n     * @param cal2  the second calendar, not altered, not null\n     * @return true if they represent the same millisecond instant\n     * @throws IllegalArgumentException if either date is <code>null</code>\n     * @since 2.1\n     */\n    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n        if (cal1 == null || cal2 == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        // Clone the calendars to avoid altering the original instances\n        Calendar cal1Clone = (Calendar) cal1.clone();\n        Calendar cal2Clone = (Calendar) cal2.clone();\n        \n        // Set both calendars to the same time zone (UTC) before comparing\n        cal1Clone.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        cal2Clone.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        \n        return (cal1Clone.get(Calendar.MILLISECOND) == cal2Clone.get(Calendar.MILLISECOND) &&\n                cal1Clone.get(Calendar.SECOND) == cal2Clone.get(Calendar.SECOND) &&\n                cal1Clone.get(Calendar.MINUTE) == cal2Clone.get(Calendar.MINUTE) &&\n                cal1Clone.get(Calendar.HOUR_OF_DAY) == cal2Clone.get(Calendar.HOUR_OF_DAY) && // Use HOUR_OF_DAY instead of HOUR\n                cal1Clone.get(Calendar.DAY_OF_YEAR) == cal2Clone.get(Calendar.DAY_OF_YEAR) &&\n                cal1Clone.get(Calendar.YEAR) == cal2Clone.get(Calendar.YEAR) &&\n                cal1Clone.get(Calendar.ERA) == cal2Clone.get(Calendar.ERA) &&\n                cal1Clone.getClass() == cal2Clone.getClass());\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}