{
    "generation": "/**\n * Write a long integer into a buffer as an octal string if it will fit,\n * or as a binary number otherwise.\n *\n * Uses {@link #formatUnsignedOctalString} to format\n * the value as an octal string with leading zeros.\n * The converted number is followed by a space.\n *\n * @param value The value to write into the buffer.\n * @param buf The destination buffer.\n * @param offset The starting offset into the buffer.\n * @param length The length of the buffer.\n * @return The updated offset.\n * @throws IllegalArgumentException if the value (and trailer)\n * will not fit in the buffer.\n * @since 1.4\n */\npublic static int formatLongOctalOrBinaryBytes(\n    final long value, final byte[] buf, final int offset, final int length) {\n\n    // Determine the maximum value that can be represented as octal in the given length\n    final long maxAsOctalChar = (length == TarConstants.UIDLEN) ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n    final boolean negative = value < 0;\n    if (!negative && value <= maxAsOctalChar) {\n        // OK to store as octal chars\n        return formatLongOctalBytes(value, buf, offset, length);\n    }\n\n    // For binary format, ensure the buffer is large enough to hold the value\n    if (length < 8) {\n        throw new IllegalArgumentException(\"Buffer too small to store binary value.\");\n    }\n\n    // Store the long value in binary format, big-endian\n    for (int i = 0; i < 8; i++) {\n        buf[offset + i] = (byte) (value >>> (56 - i * 8));\n    }\n\n    // If the value was negative, set the highest bit of the first byte\n    if (negative) {\n        buf[offset] |= 0x80;\n    }\n\n    return offset + 8;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}