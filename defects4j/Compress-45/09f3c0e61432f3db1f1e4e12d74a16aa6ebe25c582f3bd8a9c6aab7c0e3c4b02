{
    "generation": "public static int formatLongOctalOrBinaryBytes(\n    final long value, final byte[] buf, final int offset, final int length) {\n\n    // Check whether we are dealing with UID/GID or SIZE field\n    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n    final boolean negative = value < 0;\n    final long absValue = negative ? -1 * (value + 1) + Long.MAX_VALUE : value;\n\n    if (absValue <= maxAsOctalChar) { // OK to store as octal chars\n        return formatLongOctalBytes(absValue, buf, offset, length);\n    }\n\n    if (absValue > maxAsOctalChar) { // Not possible to store as octal, so store as binary\n        if (length < 9) {\n            throw new IllegalArgumentException(\"Value is too large for \" + length + \" byte field.\");\n        }\n        formatLongBinary(absValue, buf, offset, length, negative);\n    }\n\n    buf[offset] = (byte) (negative ? 0xff : 0x80);\n    return offset + length;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}