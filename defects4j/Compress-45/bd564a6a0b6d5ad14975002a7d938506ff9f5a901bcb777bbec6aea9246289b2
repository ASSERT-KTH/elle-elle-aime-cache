{
    "generation": "/**\n * Write an long integer into a buffer as an octal string if this\n * will fit, or as a binary number otherwise.\n * \n * Uses {@link #formatUnsignedOctalString} to format\n * the value as an octal string with leading zeros.\n * The converted number is followed by a space.\n * \n * @param value The value to write into the buffer.\n * @param buf The destination buffer.\n * @param offset The starting offset into the buffer.\n * @param length The length of the buffer.\n * @return The updated offset.\n * @throws IllegalArgumentException if the value (and trailer)\n * will not fit in the buffer.\n * @since 1.4\n */\npublic static int formatLongOctalOrBinaryBytes(\n    final long value, final byte[] buf, final int offset, final int length) {\n\n    // Check whether we are dealing with UID/GID or SIZE field\n    final long maxAsOctalChar = length == TarConstants.UIDLEN? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n    final boolean negative = value < 0;\n    long absValue = negative? -value : value;\n\n    if (absValue <= maxAsOctalChar) { // OK to store as octal chars\n        return formatLongOctalBytes(negative? -absValue : absValue, buf, offset, length);\n    }\n\n    // Try to fit the value into the buffer as a binary number\n    if (length >= 9) {\n        formatBigIntegerBinary(value, buf, offset, length, negative);\n        return offset + length;\n    } else {\n        // buffer is too small for binary representation\n        throw new IllegalArgumentException(\"Value is too large for \" + length + \" byte field.\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}