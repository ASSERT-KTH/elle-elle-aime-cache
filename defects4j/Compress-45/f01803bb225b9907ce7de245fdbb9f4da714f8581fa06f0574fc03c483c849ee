{
    "generation": "    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        final boolean negative = value < 0;\n        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        final int binaryLength = 8 + 1; // 8 bytes for binary data + 1 byte prefix\n        if (length < binaryLength) {\n            throw new IllegalArgumentException(\n                \"Value \" + value + \" is too large for \" + length + \" byte field.\");\n        }\n\n        formatLongBinary(value, buf, offset, length, negative);\n        buf[offset] = (byte) (negative ? 0xff : 0x80);\n        return offset + binaryLength;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}