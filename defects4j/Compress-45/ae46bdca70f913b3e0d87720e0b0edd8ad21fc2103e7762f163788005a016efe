{
    "generation": "/**\n * Write a long integer into a buffer as an octal string if this\n * will fit, or as a binary number otherwise.\n *\n * Uses {@link #formatUnsignedOctalString} to format\n * the value as an octal string with leading zeros.\n * The converted number is followed by a space.\n *\n * @param value The value to write into the buffer.\n * @param buf The destination buffer.\n * @param offset The starting offset into the buffer.\n * @param length The length of the buffer.\n * @return The updated offset.\n * @throws IllegalArgumentException if the value (and trailer)\n * will not fit in the buffer.\n * @since 1.4\n */\npublic static int formatLongOctalOrBinaryBytes(\n    final long value, final byte[] buf, final int offset, final int length) {\n\n    // Determine if this is UID/GID or SIZE field\n    final long maxAsOctalChar = (length == TarConstants.UIDLEN) ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n    final boolean negative = value < 0;\n    final long absValue = negative ? -value : value;\n\n    // Calculate the number of octal digits needed\n    int octalLength;\n    if (absValue == 0) {\n        octalLength = 1; // \"0\"\n    } else {\n        octalLength = Long.toString(absValue, 8).length();\n    }\n    if (negative) {\n        octalLength++; // for the minus sign\n    }\n    // Include space at the end\n    octalLength++;\n\n    if (octalLength <= length) {\n        // Fit as octal string\n        return formatLongOctalBytes(value, buf, offset, length);\n    } else {\n        // Fall back to binary representation\n        if (length < 9) {\n            formatLongBinary(value, buf, offset, length, negative);\n        } else {\n            formatBigIntegerBinary(value, buf, offset, length, negative);\n        }\n        buf[offset] = (byte) (negative ? 0xff : 0x80);\n        return offset + length;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}