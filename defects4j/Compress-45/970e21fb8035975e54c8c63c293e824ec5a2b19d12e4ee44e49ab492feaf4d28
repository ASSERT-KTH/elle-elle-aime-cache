{
    "generation": "public static int formatLongOctalOrBinaryBytes(\n    final long value, final byte[] buf, final int offset, final int length) {\n\n    // Check whether we are dealing with UID/GID or SIZE field\n    final long maxAsOctalChar = (length == TarConstants.UIDLEN) ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n    final boolean negative = value < 0;\n    if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n        return formatLongOctalBytes(value, buf, offset, length);\n    }\n\n    // Check if the buffer is large enough for binary representation\n    if (length < 8) {\n        throw new IllegalArgumentException(\"Buffer length is insufficient for binary representation.\");\n    }\n\n    // Handle binary representation\n    if (negative) {\n        // For negative values, store two's complement\n        value = ~value + 1;\n    }\n\n    // Write the value in big-endian format\n    for (int i = length - 1; i >= 0; i--) {\n        buf[offset + i] = (byte) (value & 0xFF);\n        value >>= 8;\n    }\n\n    return offset + length;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}