{
    "generation": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {\n    double width = constraint.getWidth();\n    double height = constraint.getHeight();\n\n    // Arrange top block\n    double topHeight = 0;\n    if (this.topBlock != null) {\n        RectangleConstraint topConstraint = new RectangleConstraint(\n            width,\n            null,\n            LengthConstraintType.FIXED,\n            0.0,\n            new Range(0.0, height),\n            LengthConstraintType.RANGE\n        );\n        Size2D topSize = this.topBlock.arrange(g2, topConstraint);\n        topHeight = topSize.height;\n    }\n\n    // Arrange bottom block\n    double bottomHeight = 0;\n    if (this.bottomBlock != null) {\n        RectangleConstraint bottomConstraint = new RectangleConstraint(\n            width,\n            null,\n            LengthConstraintType.FIXED,\n            0.0,\n            new Range(0.0, height - topHeight),\n            LengthConstraintType.RANGE\n        );\n        Size2D bottomSize = this.bottomBlock.arrange(g2, bottomConstraint);\n        bottomHeight = bottomSize.height;\n    }\n\n    // Calculate remaining height for center area\n    double centerHeight = height - topHeight - bottomHeight;\n\n    // Arrange left block\n    double leftWidth = 0;\n    if (this.leftBlock != null) {\n        RectangleConstraint leftConstraint = new RectangleConstraint(\n            0.0,\n            new Range(0.0, width),\n            LengthConstraintType.RANGE,\n            centerHeight,\n            null,\n            LengthConstraintType.FIXED\n        );\n        Size2D leftSize = this.leftBlock.arrange(g2, leftConstraint);\n        leftWidth = leftSize.width;\n    }\n\n    // Arrange right block\n    double rightWidth = 0;\n    if (this.rightBlock != null) {\n        RectangleConstraint rightConstraint = new RectangleConstraint(\n            0.0,\n            new Range(0.0, width - leftWidth),\n            LengthConstraintType.RANGE,\n            centerHeight,\n            null,\n            LengthConstraintType.FIXED\n        );\n        Size2D rightSize = this.rightBlock.arrange(g2, rightConstraint);\n        rightWidth = rightSize.width;\n    }\n\n    // Calculate remaining width for center area\n    double centerWidth = width - leftWidth - rightWidth;\n\n    // Arrange center block\n    RectangleConstraint centerConstraint = new RectangleConstraint(\n        centerWidth,\n        centerHeight\n    );\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, centerConstraint);\n    }\n\n    // Set bounds for all blocks\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width, topHeight));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, topHeight + centerHeight, width, bottomHeight));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight, leftWidth, centerHeight));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(leftWidth + centerWidth, topHeight, rightWidth, centerHeight));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, topHeight, centerWidth, centerHeight));\n    }\n\n    // Determine the overall size\n    double overallWidth = width;\n    double overallHeight = topHeight + centerHeight + bottomHeight;\n\n    return new Size2D(overallWidth, overallHeight);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}