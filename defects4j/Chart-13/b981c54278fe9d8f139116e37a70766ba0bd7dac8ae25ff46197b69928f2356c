{
    "generation": "/**\n * Arranges the items within a container.\n *\n * @param container  the container.\n * @param constraint  the constraint.\n * @param g2  the graphics device.\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock!= null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock!= null) {\n        double maxHeight = constraint.getHeight() - (this.topBlock!= null? h[0] : 0);\n        if (maxHeight < 0) {\n            maxHeight = 0;\n        }\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0, maxHeight), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    double middleHeight = constraint.getHeight() - (this.topBlock!= null? h[0] : 0) - (this.bottomBlock!= null? h[1] : 0);\n    if (middleHeight < 0) {\n        middleHeight = 0;\n    }\n    h[2] = middleHeight;\n    if (this.leftBlock!= null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock!= null) {\n        double maxWidth = constraint.getWidth() - (this.leftBlock!= null? w[2] : 0);\n        if (maxWidth < 0) {\n            maxWidth = 0;\n        }\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n                new Range(0.0, maxWidth),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n    }\n    h[4] = h[2];\n    double centerWidth = constraint.getWidth() - (this.leftBlock!= null? w[2] : 0) - (this.rightBlock!= null? w[3] : 0);\n    if (centerWidth < 0) {\n        centerWidth = 0;\n    }\n    w[4] = centerWidth;\n    RectangleConstraint c5 = new RectangleConstraint(centerWidth, h[4]);\n    if (this.centerBlock!= null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n\n    if (this.topBlock!= null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                h[0]));\n    }\n    if (this.bottomBlock!= null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                w[1], h[1]));\n    }\n    if (this.leftBlock!= null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                h[2]));\n    }\n    if (this.rightBlock!= null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                w[3], h[3]));\n    }\n    if (this.centerBlock!= null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                h[4]));\n    }\n    double finalHeight = (this.topBlock!= null? h[0] : 0) + (this.bottomBlock!= null? h[1] : 0) + h[2];\n    if (finalHeight < 0) {\n        finalHeight = 0;\n    }\n    return new Size2D(constraint.getWidth(), finalHeight);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}