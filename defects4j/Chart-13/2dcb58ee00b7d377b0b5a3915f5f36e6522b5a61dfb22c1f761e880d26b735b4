{
    "generation": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    \n    double totalHeight = 0.0;\n    double remainingHeight = constraint.getHeight();\n\n    // Arrange top block\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, \n                new Range(0.0, remainingHeight), LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n        totalHeight += h[0];\n        remainingHeight = Math.max(0, remainingHeight - h[0]);\n    }\n\n    // Arrange bottom block\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, \n                new Range(0.0, remainingHeight), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n        totalHeight += h[1];\n        remainingHeight = Math.max(0, remainingHeight - h[1]);\n    }\n\n    // Set middle height\n    h[2] = remainingHeight;\n    totalHeight += h[2];\n\n    // Arrange left block\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0, \n                new Range(0.0, w[0]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n\n    // Arrange right block\n    if (this.rightBlock != null) {\n        double remainingWidth = w[0] - (this.leftBlock != null ? w[2] : 0);\n        RectangleConstraint c4 = new RectangleConstraint(0.0, \n                new Range(0.0, Math.max(0, remainingWidth)), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n    }\n\n    // Set center width\n    w[4] = w[0] - w[2] - w[3];\n    if (w[4] < 0) {\n        w[4] = 0;\n    }\n\n    // Arrange center block\n    if (this.centerBlock != null) {\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[2]);\n        Size2D size = this.centerBlock.arrange(g2, c5);\n        // We don't use the returned size for center block as it's constrained\n    }\n\n    // Set bounds for blocks\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, totalHeight - h[1], w[0], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[0] - w[3], h[0], w[3], h[2]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[2]));\n    }\n\n    return new Size2D(constraint.getWidth(), totalHeight);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}