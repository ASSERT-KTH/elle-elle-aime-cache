{
    "generation": "/**\n * <p>Formats a <code>Date</code> object.</p>\n * \n * @param date  the date to format\n * @return the formatted string\n */\npublic String format(Date date) {\n    Calendar c = Calendar.getInstance(mTimeZone, Locale.getDefault());\n    c.setTime(date);\n    if (mPattern.indexOf('w') >= 0) {\n        c.set(Calendar.WEEK_OF_YEAR, getWeekOfYear(c));\n    }\n    return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n}\n\nprivate int getWeekOfYear(Calendar c) {\n    Calendar firstDayOfWeek = (Calendar) c.clone();\n    firstDayOfWeek.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());\n    firstDayOfWeek.set(Calendar.WEEK_OF_YEAR, 1);\n    int days = 0;\n    while (firstDayOfWeek.getTimeInMillis() < c.getTimeInMillis()) {\n        firstDayOfWeek.add(Calendar.DAY_OF_YEAR, 1);\n        days++;\n    }\n    return (days / 7) + 1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}