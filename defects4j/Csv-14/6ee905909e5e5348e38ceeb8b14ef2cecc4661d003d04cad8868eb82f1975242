{
    "generation": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n            final Appendable out, final boolean newRecord) throws IOException {\n        boolean quote = false;\n        int start = offset;\n        int pos = offset;\n        final int end = offset + len;\n\n        QuoteMode quoteModePolicy = getQuoteMode();\n        if (quoteModePolicy == null) {\n            quoteModePolicy = QuoteMode.MINIMAL;\n        }\n        switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            outline.append(value, start, end);\n            return;\n        case MINIMAL:\n            if (len == 0) {\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n                if (newRecord && !Character.isDigit(c) && !Character.isLetter(c)) {\n                    quote = true;\n                }\n                while (pos < end && !quote) {\n                    c = value.charAt(pos);\n                    if (c == LF || c == CR || c == getQuoteCharacter() || c == getDelimiter()) {\n                        quote = true;\n                        break;\n                    }\n                    pos++;\n                }\n                if (!quote && c <= COMMENT) {\n                    quote = true;\n                }\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n        }\n\n        if (!quote) {\n            out.append(value, start, end);\n            return;\n        }\n\n        out.append(getQuoteCharacter());\n        for (pos = start; pos < end; pos++) {\n            final char c = value.charAt(pos);\n            if (c == getQuoteCharacter()) {\n                out.append(value, start, pos);\n                out.append(getQuoteCharacter());\n                start = pos;\n            }\n        }\n        out.append(value, start, end);\n        out.append(getQuoteCharacter());\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}