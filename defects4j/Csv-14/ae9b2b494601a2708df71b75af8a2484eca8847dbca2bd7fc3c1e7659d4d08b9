{
    "generation": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    char delimChar = getDelimiter();\n    char quoteChar = getQuoteCharacter().charValue();\n    boolean escape = getEscapeCharacter() != null;\n\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n\n    switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            printRaw(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                quote = newRecord;\n            } else {\n                char c = value.charAt(pos);\n                if (c == LF || c == CR || c == quoteChar || c == delimChar || (escape && (c == getEscapeCharacter()))) {\n                    quote = true;\n                } else {\n                    for (pos++; pos < end; pos++) {\n                        if ((c = value.charAt(pos)) == LF || c == CR || c == quoteChar || c == delimChar || (escape && (c == getEscapeCharacter()))) {\n                            quote = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n\n    if (quote) {\n        out.append(quoteChar);\n        for (pos = start; pos < end; pos++) {\n            char c = value.charAt(pos);\n            if (c == quoteChar) {\n                out.append(value, start, pos).append(quoteChar);\n                start = pos;\n            }\n        }\n        out.append(value, start, end).append(quoteChar);\n    } else {\n        out.append(value, start, end);\n    }\n}\n\nprivate void printRaw(final CharSequence value, final int offset, final int len, final Appendable out) throws IOException {\n    int start = offset;\n    int end = offset + len;\n    char escapeChar = getEscapeCharacter();\n\n    for (int pos = start; pos < end; pos++) {\n        char c = value.charAt(pos);\n        if (c == escapeChar) {\n            out.append(value, start, pos);\n            start = pos;\n            end = Math.min(pos + 2, end);\n            break;\n        }\n    }\n    out.append(value, start, end);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}