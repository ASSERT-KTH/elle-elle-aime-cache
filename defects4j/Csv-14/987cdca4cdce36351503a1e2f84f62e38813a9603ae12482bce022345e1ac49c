{
    "generation": "/**\n * Fixed version of the printAndQuote function to handle escaping correctly\n * when the escape character is null or a backslash.\n */\nprivate void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    final Character escapeChar = getEscapeCharacter(); // Added to handle escaping correctly\n\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        // Use the existing escaping code\n        printAndEscape(value, offset, len, out, escapeChar); // Pass escapeChar to printAndEscape\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            // always quote an empty token that is the first\n            // on the line, as it may be the only thing on the\n            // line. If it were not quoted in that case,\n            // an empty line has no tokens.\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n\n            // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n                quote = true;\n            } else if (c <= COMMENT) {\n                // Some other chars at the start of a value caused the parser to fail, so for now\n                // encapsulate if we start in anything less than '#'. We are being conservative\n                // by including the default comment char too.\n                quote = true;\n            } else {\n                while (pos < end) {\n                    c = value.charAt(pos);\n                    if (c == LF || c == CR || c == quoteChar || c == delimChar || (escapeChar!= null && c == escapeChar.charValue())) {\n                        quote = true;\n                        break;\n                    }\n                    pos++;\n                }\n\n                if (!quote) {\n                    pos = end - 1;\n                    c = value.charAt(pos);\n                    // Some other chars at the end caused the parser to fail, so for now\n                    // encapsulate if we end in anything less than ' '\n                    if (c <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n        }\n\n        if (!quote) {\n            // no encapsulation needed - write out the original value\n            printAndEscape(value, offset, len, out, escapeChar); // Pass escapeChar to printAndEscape\n            return;\n        }\n        break;\n    default:\n        throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n\n    if (!quote) {\n        // no encapsulation needed - write out the original value\n        printAndEscape(value, offset, len, out, escapeChar); // Pass escapeChar to printAndEscape\n        return;\n    }\n\n    // we hit something that needed encapsulation\n    out.append(quoteChar);\n\n    // Pick up where we left off: pos should be positioned on the first character that caused\n    // the need for encapsulation.\n    while (pos < end) {\n        final char c = value.charAt(pos);\n        if (c == quoteChar) {\n            // write out the chunk up until this point\n\n            // add 1 to the length to write out the encapsulator also\n            printAndEscape(value, start, pos + 1, out, escapeChar); // Pass escapeChar to printAndEscape\n            // put the next starting position on the encapsulator so we will\n            // write it out again with the next string (effectively doubling it)\n            start = pos;\n        } else if (escapeChar!= null && c == escapeChar.charValue()) {\n            // Handle escape character correctly\n            if (pos + 1 < end) {\n                final char nextChar = value.charAt(pos + 1);\n                if (nextChar == quoteChar || nextChar == escapeChar.charValue() || nextChar == delimChar) {\n                    out.append(c);\n                    out.append(nextChar);\n                    pos++; // Skip the next character\n                }\n            }\n        }\n        pos++;\n    }\n\n    // write the last segment\n    printAndEscape(value, start, pos, out, escapeChar); // Pass escapeChar to printAndEscape\n    out.append(quoteChar);\n}\n\n// Please ensure printAndEscape function is updated as below to handle escape character correctly\nprivate void printAndEscape(final CharSequence value, final int offset, final int len, final Appendable out, final Character escapeChar) throws IOException {\n    int pos = offset;\n    final int end = offset + len;\n    while (pos < end) {\n        final char c = value.charAt(pos);\n        if (escapeChar!= null && c == escapeChar.charValue() && pos + 1 < end) {\n            final char nextChar = value.charAt(pos + 1);\n            if (nextChar == quoteChar || nextChar == escapeChar.charValue() || nextChar == delimChar) {\n                out.append(c);\n                out.append(nextChar);\n                pos++; // Skip the next character\n            } else {\n                out.append(c);\n            }\n        } else {\n            out.append(c);\n        }\n        pos++;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}