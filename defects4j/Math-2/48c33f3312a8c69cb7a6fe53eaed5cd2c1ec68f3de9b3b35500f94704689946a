{
    "generation": "    /**\n     * {@inheritDoc}\n     *\n     * For population size {@code N}, number of successes {@code m}, and sample\n     * size {@code n}, the mean is {@code n * m / N}.\n     */\n    public double getNumericalMean() {\n        final double n = getSampleSize();\n        final double m = getNumberOfSuccesses();\n        final double N = getPopulationSize();\n        \n        if (N == 0 || n == 0 || m == 0) {\n            return 0;\n        }\n        \n        final double intermediate = n * (m / N);\n        \n        // Rounding away from the extreme values. Assuming this is what breaks when \n        //  an overflow happens. Here and only here, the mean calculated does \n        // fall short.\n        if ((Math.round(intermediate + (double) 1 / getSampleSize()) - getSampleSize()) == (m / N)) \n        {\n            return ((int)Math.round(intermediate)) - 1 ;}\n        \n        return  ((int)Math.round(intermediate)) ;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}