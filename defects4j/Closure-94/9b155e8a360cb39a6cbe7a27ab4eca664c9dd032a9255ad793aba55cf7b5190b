{
    "generation": "/**\n * Determines whether the given value may be assigned to a define.\n *\n * @param val The value being assigned.\n * @param defines The list of names of existing defines.\n */\nstatic boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n        case Token.STRING:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n            return true;\n\n        // Unary operators are valid if the child is valid.\n        case Token.NOT:\n        case Token.NEG:\n        case Token.BITNOT:\n            return isValidDefineValue(val.getFirstChild(), defines);\n\n        // Binary operators are only valid if both children are valid.\n        case Token.BITAND:\n        case Token.BITOR:\n        case Token.BITXOR:\n        case Token.ADD:\n            Node left = val.getFirstChild();\n            Node right = left.getNext();\n            return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);\n\n        // Names are valid if and only if they are defines themselves.\n        case Token.NAME:\n            return defines.contains(val.getString());\n\n        // Property access is valid if the property name is a define.\n        case Token.GETPROP:\n            Node propName = val.getLastChild();\n            return propName.isString() && defines.contains(propName.getString());\n\n        // Allow string concatenation with constants\n        case Token.ADD:\n            if (val.getFirstChild().getType() == Token.STRING &&\n                val.getLastChild().getType() == Token.STRING) {\n                return true;\n            }\n            // Fall through to default case if not string concatenation\n\n        default:\n            return false;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}