{
    "generation": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n        case Token.STRING:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n            return true;\n\n        // Binary operators are only valid if both children are valid.\n        case Token.BITAND:\n        case Token.BITOR:\n        case Token.BITXOR:\n            Node left = val.getFirstChild();\n            Node right = val.getLastChild();\n            return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);\n\n        // Unary operators are valid if the child is valid.\n        case Token.NOT:\n        case Token.NEG:\n            return isValidDefineValue(val.getFirstChild(), defines);\n\n        // Names are valid if and only if they are defines themselves.\n        case Token.NAME:\n            return defines.contains(val.getString());\n\n        case Token.GETPROP:\n            if (val.isQualifiedName()) {\n                return defines.contains(val.getQualifiedName());\n            }\n            break;\n\n        // Handle other binary operators that might be considered valid.\n        case Token.ADD:\n            // Check both children for addition operator.\n            Node addLeft = val.getFirstChild();\n            Node addRight = val.getLastChild();\n            return isValidDefineValue(addLeft, defines) && isValidDefineValue(addRight, defines);\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}