{
    "generation": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n  switch (val.getType()) {\n    case Token.STRING:\n    case Token.NUMBER:\n    case Token.TRUE:\n    case Token.FALSE:\n      return true;\n\n    case Token.BITAND:\n    case Token.BITNOT:\n    case Token.BITOR:\n    case Token.BITXOR:\n    // Added condition to check if both children are valid define values\n      if (val.getFirstChild() != null && val.getSecondChild() != null) {\n        return isValidDefineValue(val.getFirstChild(), defines) &&\n               isValidDefineValue(val.getSecondChild(), defines);\n      }\n      break;\n\n    case Token.NOT:\n    case Token.NEG:\n      if (val.getFirstChild() != null) {\n        return isValidDefineValue(val.getFirstChild(), defines);\n      }\n      break;\n\n    case Token.NAME:\n    case Token.GETPROP:\n      if (val.isQualifiedName()) {\n        return defines.contains(val.getQualifiedName());\n      }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}