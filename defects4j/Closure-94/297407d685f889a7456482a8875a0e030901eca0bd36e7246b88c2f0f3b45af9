{
    "generation": "/**\n * Determines whether the given value may be assigned to a define.\n *\n * @param val The value being assigned.\n * @param defines The list of names of existing defines.\n */\nstatic boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n        case Token.STRING:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n            return true;\n\n        // Binary operators are only valid if both children are valid.\n        case Token.BITAND:\n        case Token.BITNOT:\n        case Token.BITOR:\n        case Token.BITXOR:\n        case Token.ADD: // Include addition for string concatenation\n            Node left = val.getFirstChild();\n            Node right = val.getSecondChild();\n            return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);\n\n        // Unary operators are valid if the child is valid.\n        case Token.NOT:\n        case Token.NEG:\n            Node child = val.getFirstChild();\n            // Negation or NOT of a boolean or number is fine, but not of a string or other types.\n            return child.getType() == Token.TRUE || child.getType() == Token.FALSE || child.getType() == Token.NUMBER;\n\n        // Names are valid if and only if they are defines themselves.\n        case Token.NAME:\n        case Token.GETPROP:\n            if (val.isQualifiedName()) {\n                return defines.contains(val.getQualifiedName());\n            }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}