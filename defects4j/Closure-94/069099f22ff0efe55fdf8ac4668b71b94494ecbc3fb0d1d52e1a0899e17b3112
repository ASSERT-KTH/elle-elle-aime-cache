{
    "generation": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n        case Token.STRING:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n            return true;\n\n        // Binary operators are only valid if both children are valid.\n        case Token.BITAND:\n        case Token.BITNOT:\n        case Token.BITOR:\n        case Token.BITXOR:\n        case Token.ADD:\n        // Uniary operators are valid if the child is valid.\n        case Token.NOT:\n        case Token.NEG:\n            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getSecondChild(), defines);\n\n        // Names are valid if and only if they are defines themselves or a literal string in case of ADD operator.\n        case Token.NAME:\n        case Token.GETPROP:\n            if (val.isQualifiedName()) {\n                return defines.contains(val.getQualifiedName());\n            }\n            // Allow literal strings in ADD operations\n            if (val.getType() == Token.STRING && val.getParent() != null && val.getParent().getType() == Token.ADD) {\n                return true;\n            }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}