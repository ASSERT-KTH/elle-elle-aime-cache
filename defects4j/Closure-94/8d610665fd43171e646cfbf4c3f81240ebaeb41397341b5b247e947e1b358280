{
    "generation": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n        case Token.STRING:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n            return true;\n\n        // Binary operators are only valid if both children are valid.\n        case Token.BITAND:\n        case Token.BITOR:\n        case Token.BITXOR:\n        case Token.BITNOT:\n        case Token.ADD:\n        case Token.SUB:\n        case Token.MUL:\n        case Token.DIV:\n        case Token.MOD:\n        case Token.LSH:\n        case Token.RSH:\n        case Token.URSH:\n        case Token.BITAND:\n        case Token.BITOR:\n        case Token.BITXOR:\n        case Token.EQ:\n        case Token.NE:\n        case Token.SHEQ:\n        case Token.SHNE:\n        case Token.LT:\n        case Token.GT:\n        case Token.LE:\n        case Token.GE:\n        case Token.IN:\n        case Token.INSTANCEOF:\n            // Ensure both children are valid.\n            Node left = val.getFirstChild();\n            Node right = left.getNext();\n            return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);\n\n        // Unary operators are valid if the child is valid.\n        case Token.NOT:\n        case Token.NEG:\n            return isValidDefineValue(val.getFirstChild(), defines);\n\n        // Names are valid if and only if they are defines themselves.\n        case Token.NAME:\n        case Token.GETPROP:\n            if (val.isQualifiedName()) {\n                return defines.contains(val.getQualifiedName());\n            }\n            return false;\n\n        default:\n            return false;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}