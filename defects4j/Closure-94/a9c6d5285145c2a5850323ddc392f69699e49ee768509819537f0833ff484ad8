{
    "generation": "/**\n * Determines whether the given value may be assigned to a define.\n *\n * @param val The value being assigned.\n * @param defines The list of names of existing defines.\n */\nstatic boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n        case Token.STRING:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n            return true;\n\n        // Binary operators are only valid if both children are valid.\n        case Token.BITAND:\n        case Token.BITNOT:\n        case Token.BITOR:\n        case Token.BITXOR:\n            return isValidDefineValue(val.getFirstChild(), defines) &&\n                   isValidDefineValue(val.getLastChild(), defines);\n\n        // Unary operators are valid if the child is valid.\n        case Token.NOT:\n            return isValidDefineValue(val.getFirstChild(), defines);\n\n        case Token.NEG:\n            // NEG is valid only if the child is a number\n            Node child = val.getFirstChild();\n            return child.getType() == Token.NUMBER && isValidDefineValue(child, defines);\n\n        // Addition is allowed for string concatenation\n        case Token.ADD:\n            return isValidDefineValue(val.getFirstChild(), defines) &&\n                   isValidDefineValue(val.getLastChild(), defines);\n\n        // Names are valid if and only if they are defines themselves.\n        case Token.NAME:\n        case Token.GETPROP:\n            if (val.isQualifiedName()) {\n                return defines.contains(val.getQualifiedName());\n            }\n            break;\n\n        // Explicitly check for invalid values\n        case Token.NULL:\n        case Token.VOID: // void is used for undefined in some cases\n            return false;\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}