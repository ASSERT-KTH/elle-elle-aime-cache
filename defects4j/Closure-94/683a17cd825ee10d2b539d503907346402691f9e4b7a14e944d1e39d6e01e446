{
    "generation": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n        case Token.STRING:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n            return true;\n\n        case Token.BITAND:\n        case Token.BITOR:\n        case Token.BITXOR:\n        case Token.BITNOT:\n        case Token.NOT:\n        case Token.NEG:\n            // For unary and binary operations, check both children.\n            Node left = val.getFirstChild();\n            Node right = val.getSecondChild();\n            if (right != null) {\n                // Binary operation: both children must be valid.\n                return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);\n            } else {\n                // Unary operation: the child must be valid.\n                return isValidDefineValue(left, defines);\n            }\n\n        case Token.NAME:\n        case Token.GETPROP:\n            if (val.isQualifiedName()) {\n                return defines.contains(val.getQualifiedName());\n            }\n            return false;\n\n        case Token.ADD:\n            // Handle string concatenation.\n            Node addLeft = val.getFirstChild();\n            Node addRight = val.getSecondChild();\n            return (addLeft != null && addRight != null) &&\n                    (isValidDefineValue(addLeft, defines) && isValidDefineValue(addRight, defines));\n\n        default:\n            return false;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}