{
    "generation": "  public TypePair getTypesUnderInequality(JSType that) {\n    // union types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        return new TypePair(null, null);\n\n      case FALSE:\n      case UNKNOWN:\n        // If the comparison is FALSE, restrict the types to non-null\n        // If the comparison is UNKNOWN, keep the original types\n        if (this.isVoidType() && that.isVoidType()) {\n            return new TypePair(this, that);\n        }\n        return new TypePair(this.restrictByNotNull(), that.restrictByNotNull());\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}