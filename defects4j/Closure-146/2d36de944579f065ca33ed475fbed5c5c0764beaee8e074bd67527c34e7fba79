{
    "generation": "public TypePair getTypesUnderInequality(JSType that) {\n    // Handle unions types\n    if (that instanceof UnionType) {\n        TypePair p = that.getTypesUnderInequality(this);\n        return new TypePair(p.typeB, p.typeA);\n    }\n\n    // Handle both types being VoidType\n    if (this.isVoid() && that.isVoid()) {\n        return new TypePair(NO_TYPE, NO_TYPE);\n    }\n\n    // Other types\n    switch (this.testForEquality(that)) {\n        case TRUE:\n            return new TypePair(null, null);\n\n        case FALSE:\n        case UNKNOWN:\n            return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}