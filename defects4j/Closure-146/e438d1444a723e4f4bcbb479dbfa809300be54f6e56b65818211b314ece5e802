{
    "generation": "public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n        TypePair p = that.getTypesUnderInequality(this);\n        return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    if (this instanceof VoidType || that instanceof VoidType) {\n        // If either this or that is undefined, then they must be equal,\n        // so return new TypePair with null, as we don't know the actual type.\n        return new TypePair(null, null);\n    }\n\n    switch (this.testForEquality(that)) {\n        case FALSE:\n        case UNKNOWN:\n            return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    return new TypePair(null, null);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}