{
    "generation": "  /**\n   * Computes the subset of {@code this} and {@code that} types if inequality\n   * is observed. If a value {@code v1} of type {@code number} is not equal to a\n   * value {@code v2} of type {@code (undefined,number)}, we can infer that the\n   * type of {@code v1} is {@code number} and the type of {@code v2} is\n   * {@code number} as well.\n   *\n   * @return a pair containing the restricted type of {@code this} as the first\n   *         component and the restricted type of {@code that} as the second\n   *         element. The returned pair is never {@code null} even though its\n   *         components may be {@code null}\n   */\n  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        // Return both types as they are since they are known to be equal\n        return new TypePair(this, that);\n\n      case FALSE:\n        // When we know types are not equal, do not update their types to NULL or to the types\n        // of variables directly being compared, keep types and the original behavior when dealing with undefined/none in logic downstream.\n        // return original this, original that since none can only take 0\n        if ((that.isVoidOrNull()) && this.isNoType()){\n          return new TypePair(null, that);\n        } else {\n          if(this.isNoType()){\n            return new TypePair(null, null);\n          }else {\n            return new TypePair(this, null);\n          }\n        }\n        \n      case UNKNOWN:\n        // do nothing - original, non-changed function - for future types where tests not failing today  \n        return new TypePair(this, that);\n\n      // switch case is exhaustive  \n    }\n\n    throw new IllegalStateException();\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}