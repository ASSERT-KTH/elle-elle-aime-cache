{
    "generation": "/**\n * Computes the subset of {@code this} and {@code that} types if inequality\n * is observed. If a value {@code v1} of type {@code number} is not equal to a\n * value {@code v2} of type {@code (undefined,number)}, we can infer that the\n * type of {@code v1} is {@code number} and the type of {@code v2} is\n * {@code number} as well.\n *\n * @return a pair containing the restricted type of {@code this} as the first\n *         component and the restricted type of {@code that} as the second\n *         element. The returned pair is never {@code null} even though its\n *         components may be {@code null}\n */\npublic TypePair getTypesUnderInequality(JSType that) {\n  // unions types\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n\n  // other types\n  switch (this.testForEquality(that)) {\n    case TRUE:\n      // If two types are definitely equal, we can refine them both to be NULL_TYPE or VOID_TYPE,\n      // based on the original types.\n      if (this.isNoType() && that.isNoType()) {\n        return new TypePair(NULL_TYPE, NULL_TYPE);\n      } else if (this.isVoidType() && that.isVoidType()) {\n        return new TypePair(VOID_TYPE, VOID_TYPE);\n      } else {\n        return new TypePair(null, null);\n      }\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n\n  // switch case is exhaustive\n  throw new IllegalStateException();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}