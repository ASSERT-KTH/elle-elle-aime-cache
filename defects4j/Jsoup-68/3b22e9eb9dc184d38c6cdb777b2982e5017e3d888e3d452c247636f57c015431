{
    "generation": "/**\n * Checks if an element is within a specific scope as defined by the HTML spec.\n * \n * @param targetNames Names of elements to match for a positive result\n * @param baseTypes   Names of elements that, if encountered, immediately end the search with a negative result\n * @param extraTypes  Additional names of elements that, if encountered, immediately end the search with a negative result\n * @return True if a matching target element is found before any base or extra types, False otherwise\n */\nprivate boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n    // Calculate the top and bottom indices for the search, ensuring we don't walk too far up the tree\n    final int bottom = Math.min(stack.size() - 1, MaxScopeSearchDepth); // Fix: Ensure bottom doesn't exceed MaxScopeSearchDepth directly\n    final int top = Math.max(bottom - MaxScopeSearchDepth, 0); // Fix: Simplify calculation and ensure top is not negative\n\n    // Iterate from bottom to top of the specified range in the stack\n    for (int pos = bottom; pos >= top; pos--) {\n        final String elName = stack.get(pos).nodeName();\n        if (inSorted(elName, targetNames))\n            return true; // Found a target, return immediately\n        if (inSorted(elName, baseTypes) || (extraTypes!= null && inSorted(elName, extraTypes)))\n            return false; // Found a base or extra type, return immediately with failure\n    }\n    // If the loop completes without finding a match, the element is not in the specific scope\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}