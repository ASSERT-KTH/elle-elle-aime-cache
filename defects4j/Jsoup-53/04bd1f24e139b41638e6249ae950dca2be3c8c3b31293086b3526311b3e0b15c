{
    "generation": "/**\n * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n * contains text strings; use unescape for that.\n * @param open opener\n * @param close closer\n * @return data matched from the queue\n */\npublic String chompBalanced(char open, char close) {\n    int start = -1;\n    int end = -1;\n    int depth = 0;\n    char last = 0;\n    boolean inQuote = false;\n    char quote = 0;\n\n    do {\n        if (isEmpty()) break;\n        Character c = consume();\n        if (inQuote) {\n            if (last == '\\\\') {\n                if (c.equals(quote)) {\n                    inQuote = false;\n                    quote = 0;\n                }\n            } else if (c.equals(quote)) {\n                inQuote = false;\n                quote = 0;\n            }\n        } else {\n            if (c.equals('\\\\')) {\n                if (last == '\\\\') {\n                    last = c;\n                }\n            } else if (c.equals('\"') || c.equals('\\'')) {\n                inQuote = true;\n                quote = c;\n            } else if (c.equals(open)) {\n                depth++;\n                if (start == -1)\n                    start = pos;\n            } else if (c.equals(close)) {\n                depth--;\n            }\n        }\n\n        if (start == -1) {\n            start = pos;\n        }\n        end = pos;\n        last = c;\n    } while (depth > 0 || inQuote);\n    return (start >= 0 && end > start)? queue.substring(start, end) : \"\";\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}