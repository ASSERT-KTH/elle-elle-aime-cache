{
    "generation": "    /**\n     * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n     * and leave \" four\" on the queue. Unbalanced openers and closers can be quoted (with ' or \") or escaped (with \\). Those escapes will be left\n     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n     * contains text strings; use unescape for that.\n     * @param open opener\n     * @param close closer\n     * @return data matched from the queue\n     */\n    public String chompBalanced(char open, char close) {\n        int start = -1;\n        int end = -1;\n        int depth = 0;\n        char last = 0;\n        boolean isEscaped = false;\n\n        do {\n            if (isEmpty()) break;\n            Character c = consume();\n\n            if (!isEscaped) {\n                if (last == 0 || last != ESC) {\n                    if (c.equals(open)) {\n                        depth++;\n                        if (start == -1)\n                            start = pos;\n                    } else if (c.equals(close)) {\n                        depth--;\n                        if (depth == 0) {\n                            end = pos; // mark the end position\n                            break; // exit the loop when balanced\n                        }\n                    }\n                }\n\n                if (c.equals('\\\\')) {\n                    isEscaped = true; // next character is escaped\n                }\n            } else {\n                isEscaped = false; // reset after processing escaped character\n            }\n\n            last = c;\n        } while (true);\n\n        return (end >= 0) ? queue.substring(start, end) : \"\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}