{
    "generation": "    /**\n     * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n     * and leave \" four\" on the queue. Unbalanced openers and closers can be quoted (with ' or \") or escaped (with \\). Those escapes will be left\n     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n     * contains text strings; use unescape for that.\n     * @param open opener\n     * @param close closer\n     * @return data matched from the queue\n     */\n    public String chompBalanced(char open, char close) {\n        int start = -1;\n        int end = -1;\n        int depth = 0;\n        char last = 0;\n        boolean isEscaped = false;\n        boolean isQuoted = false;\n        char quoteChar = 0;\n\n        do {\n            if (isEmpty()) break;\n            Character c = consume();\n\n            if (last == 0 || last != ESC) {\n                if (!isQuoted) {\n                    if (c == open && !isEscaped) {\n                        depth++;\n                        if (start == -1)\n                            start = pos;\n                    } else if (c == close && !isEscaped) {\n                        depth--;\n                    }\n                }\n\n                if (c == quoteChar) {\n                    isQuoted = !isQuoted;\n                } else if (c == '\\'' || c == '\"') {\n                    quoteChar = c;\n                    isQuoted = true;\n                }\n            }\n\n            if (depth > 0 && last != 0 && !isQuoted) {\n                end = pos; // don't include the outer match pair in the return\n            }\n\n            isEscaped = (c == '\\\\');\n            last = c;\n        } while (depth > 0);\n        return (end >= 0) ? queue.substring(start, end) : \"\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}