{
    "generation": "    /**\n     * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n     * and leave \" four\" on the queue. Unbalanced openers and closers can be quoted (with ' or \") or escaped (with \\). Those escapes will be left\n     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n     * contains text strings; use unescape for that.\n     * @param open opener\n     * @param close closer\n     * @return data matched from the queue\n     */\n    public String chompBalanced(char open, char close) {\n        int start = -1;\n        int end = -1;\n        int depth = 0;\n        char last = 0;\n        boolean inQuote = false;\n        char quoteChar = 0;\n\n        do {\n            if (isEmpty()) break;\n            char c = consume();\n\n            if (inQuote) {\n                if (c == quoteChar && last != ESC) {\n                    inQuote = false;\n                }\n            } else if (c == '\\'' || c == '\"') {\n                inQuote = true;\n                quoteChar = c;\n            } else if (last != ESC) {\n                if (c == open) {\n                    depth++;\n                    if (start == -1) start = pos - 1;\n                } else if (c == close) {\n                    depth--;\n                }\n            }\n\n            if (depth > 0) {\n                end = pos;\n            }\n\n            last = c;\n        } while (depth > 0);\n\n        if (end >= start) {\n            return queue.substring(start, end);\n        } else {\n            return \"\";\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}