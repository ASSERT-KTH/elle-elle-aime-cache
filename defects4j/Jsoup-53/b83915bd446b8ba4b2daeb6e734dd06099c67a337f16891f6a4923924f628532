{
    "generation": "/**\n * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n * contains text strings; use unescape for that.\n * @param open opener\n * @param close closer\n * @return data matched from the queue\n */\npublic String chompBalanced(char open, char close) {\n    int start = -1;\n    StringBuilder accum = new StringBuilder();\n    int depth = 0;\n    char last = 0;\n    boolean inQuotes = false;\n    char quoteChar = 0;\n\n    do {\n        if (isEmpty()) break;\n        Character c = consume();\n        \n        if (inQuotes) {\n            if (c == quoteChar && last != ESC) {\n                inQuotes = false;\n            }\n            accum.append(c);\n            last = c;\n            continue;\n        }\n\n        if ((c == '\\'' || c == '\"') && last != ESC) {\n            inQuotes = true;\n            quoteChar = c;\n            accum.append(c);\n            last = c;\n            continue;\n        }\n\n        if (last == 0 || last != ESC) {\n            if (c == open) {\n                depth++;\n                if (start == -1) start = pos - 1;\n            } else if (c == close) {\n                depth--;\n            }\n        }\n\n        accum.append(c);\n        last = c;\n    } while (depth > 0);\n\n    if (depth == 0 && start >= 0) {\n        return accum.substring(start + 1, accum.length() - 1);\n    } else {\n        return \"\";\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}