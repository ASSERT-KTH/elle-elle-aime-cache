{
    "generation": "/**\n * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n * contains text strings; use unescape for that.\n * @param open opener\n * @param close closer\n * @return data matched from the queue\n */\npublic String chompBalanced(char open, char close) {\n    int start = pos;\n    int depth = 0;\n    boolean inQuote = false;\n    char quoteChar = 0;\n    boolean escape = false;\n\n    do {\n        if (isEmpty()) break;\n        Character c = consume();\n        \n        if (escape) {\n            escape = false;\n        } else if (inQuote) {\n            if (c.equals(quoteChar)) {\n                inQuote = false;\n            }\n        } else if (c.equals('\\\\')) {\n            escape = true;\n        } else if (c.equals('\\'') || c.equals('\"')) {\n            inQuote = true;\n            quoteChar = c;\n        } else if (c.equals(open)) {\n            depth++;\n        } else if (c.equals(close)) {\n            depth--;\n        }\n    } while (inQuote || depth > 0);\n    \n    if (depth!= 0) {\n        throw new RuntimeException(\"Unbalanced quote or bracket in selector\");\n    }\n    return queue.substring(start, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}