{
    "generation": "/**\n * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n * contains text strings; use unescape for that.\n * @param open opener\n * @param close closer\n * @return data matched from the queue\n */\npublic String chompBalanced(char open, char close) {\n    int start = -1;\n    int end = -1;\n    int depth = 0;\n    char last = 0;\n    boolean inQuote = false;\n    char quoteChar = 0;\n\n    do {\n        if (isEmpty()) break;\n        Character c = consume();\n        \n        // Handle quotes\n        if (!inQuote && (c.equals('\\'') || c.equals('\"'))) {\n            inQuote = true;\n            quoteChar = c;\n        } else if (inQuote && c.equals(quoteChar)) {\n            inQuote = false;\n        }\n\n        // Ignore escapes if not at start of sequence or if in quote\n        if (last == ESC && (start == -1 || inQuote)) {\n            last = c;\n            continue;\n        }\n\n        // Update start if not yet set and not in quote\n        if (start == -1 &&!inQuote) {\n            start = pos;\n        }\n\n        // Update depth if not in quote and not escaped\n        if (!inQuote && last!= ESC) {\n            if (c.equals(open)) {\n                depth++;\n            } else if (c.equals(close)) {\n                depth--;\n            }\n        }\n\n        // Update end if depth is positive and not in quote (exclude outer match pair)\n        if (depth > 0 &&!inQuote) {\n            end = pos;\n        }\n\n        last = c;\n    } while (depth > 0 || inQuote);\n    return (end >= 0)? queue.substring(start, end) : \"\";\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}