{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n        byteData.mark(); // Mark the position for potential rewind\n\n        if (charsetName == null) { // determine from meta, safe parse as UTF-8\n            // Decode using default charset first\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n\n            // Handle UTF-8 BOM (char 65279) and remove it if exists\n            if (docData.length() > 0 && docData.charAt(0) == 65279) {\n                docData = docData.substring(1);\n            }\n\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n\n            if (meta != null) { // Look for charset in meta tag\n                String foundCharset = null;\n\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { \n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.reset(); // Rewind to the marked position\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n\n                    // Handle potential BOM in the newly decoded data\n                    if (docData.length() > 0 && docData.charAt(0) == 65279) {\n                        docData = docData.substring(1);\n                    }\n\n                    doc = null; // Reset doc to reparse with correct charset\n                }\n            }\n        } else { // Charset specified\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n\n            // Handle UTF-8 BOM (char 65279) for explicitly specified charset\n            if (docData.length() > 0 && docData.charAt(0) == 65279) {\n                docData = docData.substring(1);\n            }\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName != null ? Charset.forName(charsetName) : Charset.forName(defaultCharset));\n        }\n\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}