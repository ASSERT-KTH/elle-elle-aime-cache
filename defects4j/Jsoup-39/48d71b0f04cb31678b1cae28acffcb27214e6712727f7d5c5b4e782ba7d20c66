{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    \n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = decodeWithBOMHandling(byteData, \"UTF-8\");\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(\"UTF-8\")) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = decodeWithBOMHandling(byteData, foundCharset);\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = decodeWithBOMHandling(byteData, charsetName);\n    }\n    \n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : \"UTF-8\");\n    }\n    return doc;\n}\n\nprivate static String decodeWithBOMHandling(ByteBuffer byteData, String charsetName) {\n    CharsetDecoder decoder = Charset.forName(charsetName).newDecoder();\n    CharBuffer charBuffer = decoder.decode(byteData);\n    String docData = charBuffer.toString();\n    if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n        docData = docData.substring(1); // Remove BOM\n    }\n    return docData;\n}\n\nprivate static String getCharsetFromContentType(String contentType) {\n    for (String param : contentType.split(\";\")) {\n        param = param.trim();\n        if (param.toLowerCase().startsWith(\"charset=\")) {\n            return param.substring(\"charset=\".length());\n        }\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}