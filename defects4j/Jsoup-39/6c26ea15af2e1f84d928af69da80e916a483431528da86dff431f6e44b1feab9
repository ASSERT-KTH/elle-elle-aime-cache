{
    "generation": "/**\n * Fix: Correctly handle UTF-8 BOM when no charset is set and meta charset is not found\n */\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    boolean decodedWithBOM = false;\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        decodedWithBOM = docData.length() > 0 && docData.charAt(0) == 65279;\n        if (decodedWithBOM) {\n            docData = docData.substring(1);\n        }\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta!= null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                if (decodedWithBOM) {\n                    // Ensure BOM is handled if present in the original decoding\n                    if (docData.length() > 0 && docData.charAt(0) == 65279) {\n                        docData = docData.substring(1);\n                    }\n                }\n                doc = null;\n            } else if (decodedWithBOM) {\n                // If meta charset not found but BOM was initially detected, set charset to UTF-8\n                charsetName = defaultCharset;\n            }\n        } else if (decodedWithBOM) {\n            // No meta charset found, but BOM was detected, so set charset to UTF-8\n            charsetName = defaultCharset;\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        // UTF-8 BOM indicator, takes precedence if not already handled\n        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            byteData.rewind();\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            docData = docData.substring(1);\n            charsetName = defaultCharset;\n        }\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}