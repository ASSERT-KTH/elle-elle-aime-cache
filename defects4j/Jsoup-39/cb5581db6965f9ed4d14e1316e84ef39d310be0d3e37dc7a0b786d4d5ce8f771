{
    "generation": "/**\n * Fixed function to parse byte data into a Document, handling charset detection and UTF-8 BOM.\n * \n * @param byteData    ByteBuffer containing the HTML data\n * @param charsetName Specified charset, or null to auto-detect from HTML\n * @param baseUri     Base URI for the document\n * @param parser      Parser to use for HTML parsing\n * @return Parsed Document\n */\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) { // determine from meta, safe parse as UTF-8 initially\n        byteData.mark(); // mark the initial position to allow rewinding later\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        \n        // Check for UTF-8 BOM before attempting to parse as HTML\n        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            byteData.reset(); // rewind to the initial position\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            docData = docData.substring(1);\n            charsetName = defaultCharset;\n        } else {\n            byteData.reset(); // rewind for potential re-parsing with detected charset\n        }\n        \n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta!= null) { \n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { \n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        \n        // Handle UTF-8 BOM when charset is specified\n        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            byteData.rewind();\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n            docData = docData.substring(1);\n        }\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName!= null? charsetName : defaultCharset);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}