{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM and handle it early\n    boolean hasBOM = false;\n    if (byteData.remaining() >= 3) {\n        int firstByte = byteData.get(0) & 0xFF;\n        int secondByte = byteData.get(1) & 0xFF;\n        int thirdByte = byteData.get(2) & 0xFF;\n        if (firstByte == 0xEF && secondByte == 0xBB && thirdByte == 0xBF) {\n            hasBOM = true;\n            byteData.position(3);\n        }\n    }\n\n    if (charsetName == null) {\n        // If no charset is specified, try to detect it from the content\n        byteData.mark();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        byteData.reset();\n\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        String foundCharset = null;\n\n        if (meta != null) {\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    foundCharset = meta.attr(\"charset\");\n                }\n            } else if (meta.hasAttr(\"charset\")) {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {\n                try {\n                    Charset.forName(foundCharset);\n                    charsetName = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    byteData.rewind();\n                    if (hasBOM) {\n                        byteData.position(3);\n                    }\n                    docData = Charset.forName(charsetName).decode(byteData).toString();\n                    doc = null;\n                } catch (UnsupportedCharsetException e) {\n                    // Keep the default charset if the found one is not supported\n                }\n            }\n        }\n    } else {\n        // Use the specified charset\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // Handle BOM if present\n    if (hasBOM) {\n        docData = docData.substring(1);\n        if (charsetName == null) {\n            charsetName = defaultCharset;\n        }\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    }\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}