{
    "generation": "/**\n * Parses the given byte data into a Document, using the provided charset name and base URI.\n * If charsetName is null, attempts to detect from HTML meta tags, defaulting to UTF-8.\n * \n * @param byteData    the byte data to parse\n * @param charsetName the character set to use for parsing (null to auto-detect)\n * @param baseUri     the base URI for the document\n * @param parser      the parser to use for HTML parsing\n * @return the parsed Document\n */\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) { // determine from meta, safe parse as UTF-8\n        // Check for UTF-8 BOM before initial decoding\n        if (byteData.remaining() >= 3 && byteData.get(0) == (byte) 0xEF && byteData.get(1) == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) {\n            byteData.position(3); // Skip BOM\n            charsetName = \"UTF-8\";\n        } else {\n            byteData.mark(); // Mark for potential rewind\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta!= null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                    if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                        try {\n                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n                                foundCharset = meta.attr(\"charset\");\n                            }\n                        } catch (IllegalCharsetNameException e) {\n                            foundCharset = null;\n                        }\n                    }\n                } else {\n                    foundCharset = meta.attr(\"charset\");\n                }\n\n                if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.reset(); // Rewind to initial position for re-decoding\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                } else {\n                    // If no charset detected and initial decode was with defaultCharset, check for UTF-8 BOM in decoded string\n                    if (docData.length() > 0 && docData.charAt(0) == 65279) {\n                        docData = docData.substring(1);\n                        charsetName = \"UTF-8\";\n                        doc = parser.parseInput(docData, baseUri);\n                    }\n                }\n            } else {\n                // If no meta tag and initial decode was with defaultCharset, check for UTF-8 BOM in decoded string\n                if (docData.length() > 0 && docData.charAt(0) == 65279) {\n                    docData = docData.substring(1);\n                    charsetName = \"UTF-8\";\n                    doc = parser.parseInput(docData, baseUri);\n                }\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        // Check for UTF-8 BOM\n        if (charsetName.equalsIgnoreCase(\"UTF-8\") && byteData.remaining() >= 3 && byteData.get(0) == (byte) 0xEF && byteData.get(1) == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) {\n            byteData.position(3); // Skip BOM\n        }\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}