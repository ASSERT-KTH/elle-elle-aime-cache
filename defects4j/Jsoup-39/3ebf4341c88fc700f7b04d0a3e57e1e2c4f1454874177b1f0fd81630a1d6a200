{
    "generation": "/**\n * Fixes: Made Two key changes to handle the presence of a BOM (Byte Order Mark) \n *        when the charset is not explicitly set. Now, it correctly identifies and \n *        handles the UTF-8 BOM, and also sets the output charset correctly.\n */\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        \n        // **KEY CHANGE 1:** Handle UTF-8 BOM before parsing the document\n        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            docData = docData.substring(1);\n            charsetName = defaultCharset; // set charsetName to defaultCharset for consistency\n        }\n        \n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta!= null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                if (docData.length() > 0 && docData.charAt(0) == 65279) {\n                    docData = docData.substring(1); // **CONSISTENCY:** Handle BOM in re-decoded data if present\n                }\n                doc = null;\n            }\n        } else if (charsetName == null) { // still null, set it based on initial detection or default\n            charsetName = defaultCharset;\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    \n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        // **KEY CHANGE 2:** Ensure the output charset is set correctly even when initially parsing with a default\n        doc.outputSettings().charset(charsetName!= null? charsetName : defaultCharset);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}