{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    final String defaultCharset = \"UTF-8\"; // make sure this placeholder is defined\n    String docData;\n    Document doc = null;\n    boolean isBOM = false; // flag to check BOM existence\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        \n        // Check for UTF-8 BOM (Byte Order Mark) and discard it if present\n        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            docData = docData.substring(1);\n            isBOM = true;\n        }\n\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { \n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            \n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { \n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                \n                // Handle BOM again after re-decoding\n                if (docData.length() > 0 && docData.charAt(0) == 65279) {\n                    docData = docData.substring(1);\n                }\n                \n                doc = parser.parseInput(docData, baseUri); // reparse with new charset\n            }\n        }\n    } else { \n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n\n        // Check for UTF-8 BOM and discard if present\n        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            docData = docData.substring(1);\n            charsetName = defaultCharset; // default to UTF-8 if BOM is found\n            isBOM = true;\n        }\n    }\n    \n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n    }\n    doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    \n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}