{
    "generation": "import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.select.Elements;\n\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\n\npublic class DataUtil {\n    private static final String defaultCharset = \"UTF-8\";\n\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // Check for BOM and adjust buffer position\n        byteData.mark();\n        if (byteData.remaining() >= 3) {\n            int bom = (byteData.get() & 0xFF) << 16 | (byteData.get() & 0xFF) << 8 | (byteData.get() & 0xFF);\n            if (bom == 0xEFBBBF) { // UTF-8 BOM\n                // BOM found, set charset to UTF-8 if not already set\n                if (charsetName == null) {\n                    charsetName = \"UTF-8\";\n                }\n                // Skip BOM\n                byteData.reset(); // reset to mark\n                byteData.position(byteData.position() + 3);\n            } else {\n                byteData.reset(); // reset to mark\n            }\n        }\n\n        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n            // Decode using default charset\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                    if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                        try {\n                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n                                foundCharset = meta.attr(\"charset\");\n                            }\n                        } catch (IllegalCharsetNameException e) {\n                            foundCharset = null;\n                        }\n                    }\n                } else {\n                    foundCharset = meta.attr(\"charset\");\n                }\n\n                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else { // specified by content type header (or by user on file load)\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        // If doc is still null, parse it\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n\n        return doc;\n    }\n\n    private static String getCharsetFromContentType(String contentType) {\n        if (contentType != null) {\n            String[] parts = contentType.split(\";\");\n            for (String part : parts) {\n                part = part.trim();\n                if (part.toLowerCase().startsWith(\"charset=\")) {\n                    return part.substring(\"charset=\".length()).trim();\n                }\n            }\n        }\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}