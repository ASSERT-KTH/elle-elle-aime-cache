{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    if (charsetName == null) {\n        // Decode the ByteBuffer using the default charset (UTF-8)\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n\n        // Look for meta tags containing charset information\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n\n        if (meta != null) {\n            String foundCharset = null;\n\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else if (meta.hasAttr(\"charset\")) {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\"); // Cleanup charset name\n                charsetName = foundCharset; \n                byteData.rewind(); // Rewind buffer for re-decoding\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // Decode directly with a specified charset\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // UTF-8 BOM (Byte Order Mark) detection\n    if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n        docData = docData.substring(1); // Remove BOM character\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    }\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}