{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n            // Decode as UTF-8 initially\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            \n            // Parse the document and check for any meta charset info\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset = null;\n                \n                // Check for charset in meta tag attributes\n                if (meta.hasAttr(\"charset\")) {\n                    foundCharset = meta.attr(\"charset\");\n                } else if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n\n                // Attempt to re-decode using the found charset if different from default\n                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    \n                    if (Charset.isSupported(foundCharset)) {\n                        charsetName = foundCharset;\n                        byteData.rewind(); // Reset buffer for re-decode\n                        docData = Charset.forName(foundCharset).decode(byteData).toString();\n                        doc = null; // Reset doc to parse again with correct charset\n                    }\n                }\n            }\n        } else { // specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        // Check for UTF-8 BOM (Byte Order Mark)\n        if (docData.length() > 0 && docData.charAt(0) == 65279) { // 65279 is the BOM character\n            docData = docData.substring(1); // Remove BOM\n            byteData.rewind();\n        }\n\n        if (doc == null) { // Parse the document if not already done\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n        }\n\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}