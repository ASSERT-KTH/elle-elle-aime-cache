{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = getCharsetFromMeta(meta); // Extracted common logic into a separate method\n            if (foundCharset != null && !foundCharset.equals(defaultCharset)) {\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                charsetName = foundCharset;\n                doc = parser.parseInput(docData, baseUri); // Re-parse document data after charset has been changed\n            }\n        }\n        byteData.rewind();\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // UTF-8 BOM indicator\n    if (docData.length() > 0 && docData.charAt(0) == 65279) {\n        docData = docData.substring(1);\n        byteData.rewind();\n        if (charsetName == null || charsetName.equals(defaultCharset)) {\n            charsetName = \"UTF-8\";\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri); // Re-parse document data after BOM has been removed\n        }\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n    }\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}\n\nprivate static String getCharsetFromMeta(Element meta) {\n    String foundCharset = null;\n    if (meta.hasAttr(\"http-equiv\")) {\n        foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n        if (foundCharset == null && meta.hasAttr(\"charset\")) {\n            try {\n                if (Charset.isSupported(meta.attr(\"charset\"))) {\n                    foundCharset = meta.attr(\"charset\");\n                }\n            } catch (IllegalCharsetNameException e) {\n                foundCharset = null;\n            }\n        }\n    } else {\n        foundCharset = meta.attr(\"charset\");\n    }\n\n    if (foundCharset != null) {\n        foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n    }\n    return foundCharset;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}