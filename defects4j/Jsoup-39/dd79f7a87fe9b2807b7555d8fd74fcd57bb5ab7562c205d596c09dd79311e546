{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    boolean bomPresent = false;\n\n    // Check for UTF-8 BOM\n    if (byteData.remaining() >= 3) {\n        byte bom1 = byteData.get();\n        byte bom2 = byteData.get();\n        byte bom3 = byteData.get();\n        if (bom1 == (byte) 0xEF && bom2 == (byte) 0xBB && bom3 == (byte) 0xBF) {\n            charsetName = \"UTF-8\";\n            bomPresent = true;\n        } else {\n            byteData.position(byteData.position() - 3); // Rewind to start\n        }\n    }\n\n    if (charsetName == null) { // Determine from meta tags using default charset\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n            }\n        }\n        if (charsetName == null) {\n            charsetName = defaultCharset;\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n    }\n\n    // Decode byte data with the final determined charset\n    byteData.rewind();\n    docData = Charset.forName(charsetName).decode(byteData).toString();\n    if (bomPresent) {\n        docData = docData.substring(1); // Remove BOM character\n    }\n\n    // Parse the document with the correct charset\n    doc = parser.parseInput(docData, baseUri);\n    doc.outputSettings().charset(charsetName);\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}