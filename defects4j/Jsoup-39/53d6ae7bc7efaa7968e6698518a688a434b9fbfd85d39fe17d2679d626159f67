{
    "generation": "/**\n * Parses the given byte data into a Document, attempting to detect the charset if not provided.\n * \n * @param byteData     the byte data to parse\n * @param charsetName  the charset to use, or null to auto-detect\n * @param baseUri      the base URI for the document\n * @param parser       the parser to use for HTML parsing\n * @return the parsed Document\n */\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    boolean retryWithUtf8BomHandling = charsetName == null; // determine from meta, or handle UTF-8 BOM\n\n    while (true) {\n        if (charsetName == null) { \n            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        } else { \n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        // UTF-8 BOM indicator handling (takes precedence over everything else, rarely used)\n        if (retryWithUtf8BomHandling && docData.length() > 0 && docData.charAt(0) == 65279) {\n            docData = docData.substring(1);\n            charsetName = \"UTF-8\"; // explicitly set to UTF-8 when BOM is found\n        } else {\n            retryWithUtf8BomHandling = false; // prevent infinite loop\n        }\n\n        doc = parser.parseInput(docData, baseUri);\n\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta!= null) { \n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(charsetName)) { \n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                continue; // retry with newly detected charset\n            }\n        }\n        break; // exit loop when no more retries are needed\n    }\n\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}