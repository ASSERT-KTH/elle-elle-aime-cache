{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    \n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        docData = removeBOM(docData); // Remove any BOM at the start\n        doc = parser.parseInput(docData, baseUri);\n\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                docData = removeBOM(docData); // Ensure BOM is removed after re-decoding\n                doc = null;\n            }\n        }\n    } else { // specified by content type header or by user\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        byteData.rewind();\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        docData = removeBOM(docData); // Remove any BOM at the start\n    }\n\n    // If the document is still null, parse the input again\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    }\n    \n    return doc;\n}\n\nprivate static String removeBOM(String input) {\n    // UTF-8 BOM is the 'ZERO WIDTH NO-BREAK SPACE' character (U+FEFF)\n    if (input.length() > 0 && input.charAt(0) == 65279) {\n        return input.substring(1);\n    }\n    return input;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}