{
    "generation": "    @Override\n    @Deprecated\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.\n        // 01-May-2020, tatu: ... and now we can\n        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not subtype of \"+_class.getName());\n        }\n        // MUST check type erasure as well...\n        JavaType narrowed = constructSpecializedType(this, subclass);\n        // otherwise, ok to just construct new instance with different type arguments:\n        return narrowed;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}