{
    "generation": "    @Override\n    @Deprecated\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.\n        // 26-Nov-2016, tatu: ... not quite yet...\n        if (!_class.isAssignableFrom(subclass)) {\n           // Ideally should also check for assignability, but that gets tricky\n           // with potential \"natural types\" -- would need both Class.isAssignableFrom()\n           // and TypeBindings.isAssignable() checks (2.7 did have the latter; 2.8 not)\n\n            return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                    _valueHandler, _typeHandler, _asStatic);\n        }\n        return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                _valueHandler, _typeHandler, _asStatic);\n        // Otherwise, stitch together the hierarchy. First, super-class\n        // if not found, try a super-interface\n        // should not get here but...\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}