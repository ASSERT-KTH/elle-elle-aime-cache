{
    "generation": "@Override\n@Deprecated\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // Check if subclass is actually a subclass of _class\n    if (!_class.isAssignableFrom(subclass)) {\n        // Handle placeholder classes or report error\n        if (_class == Void.TYPE || _class == NoClass.class) {\n            // Handle placeholder classes appropriately\n            // For example, return a new SimpleType with the subclass\n            return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n        } else {\n            throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not sub-type of \" + _class.getName());\n        }\n    }\n    // Otherwise, create a new SimpleType instance\n    return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}