{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    \n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    RecordType otherRecord = that.toMaybeRecordType();\n    \n    // Add all properties from this record\n    for (String property : properties.keySet()) {\n        if (otherRecord.hasProperty(property)) {\n            JSType thisType = getPropertyType(property);\n            JSType thatType = otherRecord.getPropertyType(property);\n            if (thisType.isEquivalentTo(thatType)) {\n                builder.addProperty(property, thisType, getPropertyNode(property));\n            } else {\n                builder.addProperty(property, registry.createUnionType(thisType, thatType), getPropertyNode(property));\n            }\n        } else {\n            builder.addProperty(property, getPropertyType(property), getPropertyNode(property));\n        }\n    }\n    \n    // Add properties from the other record that are not in this record\n    for (String property : otherRecord.getPropertyNames()) {\n        if (!properties.containsKey(property)) {\n            builder.addProperty(property, otherRecord.getPropertyType(property), otherRecord.getPropertyNode(property));\n        }\n    }\n    \n    JSType result = builder.build();\n    \n    // If the result is not equivalent to either of the original types, \n    // we need to create a union type of both original types\n    if (!result.isEquivalentTo(this) && !result.isEquivalentTo(that)) {\n        return registry.createUnionType(this, that);\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}