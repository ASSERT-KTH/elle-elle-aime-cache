{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordType thatRecordType = that.toMaybeRecordType();\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    // Add all properties from this record type\n    for (String property : this.properties.keySet()) {\n      JSType propertyType = getPropertyType(property);\n      Node propertyNode = getPropertyNode(property);\n\n      if (thatRecordType.hasProperty(property)) {\n        JSType thatPropertyType = thatRecordType.getPropertyType(property);\n        builder.addProperty(property, propertyType.getLeastSupertype(thatPropertyType), propertyNode);\n      } else {\n        builder.addProperty(property, propertyType, propertyNode);\n      }\n    }\n\n    // Add remaining properties from 'that' record type\n    for (String property : thatRecordType.getProperties()) {\n      if (!this.hasProperty(property)) {\n        builder.addProperty(property, thatRecordType.getPropertyType(property), \n                            thatRecordType.getPropertyNode(property));\n      }\n    }\n\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}