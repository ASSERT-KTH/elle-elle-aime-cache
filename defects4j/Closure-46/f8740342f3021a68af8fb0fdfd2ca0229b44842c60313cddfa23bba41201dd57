{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    if (!this.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordType thisRecord = this.toMaybeRecordType();\n    RecordType thatRecord = that.toMaybeRecordType();\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    Set<String> allProperties = new HashSet<>(thisRecord.getProperties().keySet());\n    allProperties.addAll(thatRecord.getProperties().keySet());\n    for (String property : allProperties) {\n        JSType thisPropType = thisRecord.getPropertyType(property);\n        JSType thatPropType = thatRecord.getPropertyType(property);\n        if (thisPropType != null && thatPropType != null) {\n            builder.addProperty(property, thisPropType.getLeastSupertype(thatPropType), null);\n        } else if (thisPropType != null) {\n            builder.addProperty(property, thisPropType, null);\n        } else {\n            builder.addProperty(property, thatPropType, null);\n        }\n    }\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}