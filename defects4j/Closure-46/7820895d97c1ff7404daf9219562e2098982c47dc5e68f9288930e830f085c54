{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    boolean hasSharedProperties = false;\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property) &&\n          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n              getPropertyType(property))) {\n        hasSharedProperties = true;\n        break;\n      }\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      builder.addProperty(property, getPropertyType(property),\n          getPropertyNode(property));\n    }\n    JSType allPropertiesRecord = builder.build();\n    if (that.isEquivalentTo(allPropertiesRecord) ||!hasSharedProperties) {\n      return super.getLeastSupertype(that);\n    }\n\n    Set<String> differentProperties = new HashSet<>();\n    for (String property : properties.keySet()) {\n      if (!that.toMaybeRecordType().hasProperty(property) || \n         !that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n              getPropertyType(property))) {\n        differentProperties.add(property);\n      }\n    }\n    Map<String, JSType> onlyDifferentProperties1 = \n        Maps.restrictedMapView(properties, collection(differentProperties));\n    \n    JSType partialRecordWithDifferentPropertiesFrom1 =\n        newFromMapWithPropertyNodesWithoutInfluencingTheRegistryAtAll(registry, ImmutableMap.of(), onlyDifferentProperties1);\n    \n    Map<String, JSType> onlyDifferentProperties2 =\n        Maps.<String,JSType/filterMap(this.properties, entries -> propertyEntry -> {\n\n            });\n    JSType partialRecordWithDiffereningPropertiesFromB =\n      newFromUnorderedPropMapWithoutFlatteningAndWithoutInfluencingInTheRegistryWhatsoever(registries2, onlyNonEqualTypesFromBTypes);\n\n  JSTypes typesofDifferiungPops =JSTypes.differPartialTypesAsUnions(fixPartials(parcialREcordWithAdifferFromB, pafrictialRecordOnlyDiff))\n    return fufgulType(getPropertyTpes(), recrdToUnionWithDifferPop);\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}