{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    Set<String> commonProperties = new HashSet<>(properties.keySet());\n    commonProperties.retainAll(that.toMaybeRecordType().getProperties().keySet());\n\n    for (String property : commonProperties) {\n      JSType propertyType = getPropertyType(property);\n      JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);\n      if (propertyType.isEquivalentTo(thatPropertyType)) {\n        builder.addProperty(property, propertyType, getPropertyNode(property));\n      } else {\n        builder.addProperty(property, propertyType.getLeastSupertype(thatPropertyType), getPropertyNode(property));\n      }\n    }\n\n    Set<String> remainingProperties = new HashSet<>(properties.keySet());\n    remainingProperties.removeAll(commonProperties);\n    for (String property : remainingProperties) {\n      builder.addProperty(property, getPropertyType(property), getPropertyNode(property));\n    }\n\n    remainingProperties = new HashSet<>(that.toMaybeRecordType().getProperties().keySet());\n    remainingProperties.removeAll(commonProperties);\n    for (String property : remainingProperties) {\n      builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyNode(property));\n    }\n\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}