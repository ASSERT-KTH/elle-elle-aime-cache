{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  Set<String> allProperties = new HashSet<>(properties.keySet());\n  allProperties.addAll(that.toMaybeRecordType().getOwnPropertyNames());\n\n  boolean hasDifferences = false;\n  for (String property : allProperties) {\n    JSType thisPropertyType = getPropertyType(property);\n    JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);\n\n    if (thisPropertyType != null && thatPropertyType != null) {\n      builder.addProperty(property, registry.createUnionType(thisPropertyType, thatPropertyType), getPropertyNode(property));\n    } else if (thisPropertyType != null) {\n      builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n    } else if (thatPropertyType != null) {\n      builder.addProperty(property, thatPropertyType, that.toMaybeRecordType().getPropertyNode(property));\n    }\n\n    if (thisPropertyType == null || thatPropertyType == null || !thisPropertyType.isEquivalentTo(thatPropertyType)) {\n      hasDifferences = true;\n    }\n  }\n\n  if (hasDifferences) {\n    return registry.createUnionType(this, that);\n  }\n\n  return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}