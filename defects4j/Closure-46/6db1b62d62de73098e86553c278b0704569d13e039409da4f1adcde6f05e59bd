{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n\n    JSType maybeRecordType = that.toMaybeRecordType();\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    for (String property : properties.keySet()) {\n      if (maybeRecordType.hasProperty(property) &&\n          maybeRecordType.getPropertyType(property).isEquivalentTo(\n              getPropertyType(property))) {\n        builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n      }\n    }\n\n    // Ensure that properties only in `that` are also added to the union type\n    RecordType thatRecordType = (RecordType) that;\n    for (String property : thatRecordType.properties.keySet()) {\n      if (!properties.containsKey(property)) {\n        builder.addProperty(property, thatRecordType.getPropertyType(property),\n            thatRecordType.getPropertyNode(property));\n      }\n    }\n\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}