{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    RecordType thatRecord = that.toMaybeRecordType();\n    for (String property : properties.keySet()) {\n      if (thatRecord.hasProperty(property) &&\n          thatRecord.getPropertyType(property).isEquivalentTo(\n              getPropertyType(property))) {\n        builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n      }\n    }\n    for (String property : thatRecord.getProperties()) {\n      if (!properties.containsKey(property)) {\n          return registry.createUnionType(this, that);\n      }\n    }\n\n    return builder.build().isEquivalentTo(this) ? this : builder.build();\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}