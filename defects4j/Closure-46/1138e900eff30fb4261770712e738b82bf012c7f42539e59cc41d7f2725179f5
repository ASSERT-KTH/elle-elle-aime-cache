{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    RecordType thatRecord = that.toMaybeRecordType();\n\n    // Add all properties from the current record type\n    for (String property : properties.keySet()) {\n        JSType type1 = getPropertyType(property);\n        JSType type2 = thatRecord.hasProperty(property) ? thatRecord.getPropertyType(property) : null;\n\n        if (type2 != null && type1.isEquivalentTo(type2)) {\n            builder.addProperty(property, type1, getPropertyNode(property));\n        } else {\n            builder.addProperty(property, type1, getPropertyNode(property));\n            if (type2 != null) {\n                builder.addProperty(property, type2, null);\n            }\n        }\n    }\n\n    // Add any remaining properties from 'that' which were not already added\n    for (String property : thatRecord.getProperties()) {\n        if (!properties.containsKey(property)) {\n            builder.addProperty(property, thatRecord.getPropertyType(property), null);\n        }\n    }\n\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}