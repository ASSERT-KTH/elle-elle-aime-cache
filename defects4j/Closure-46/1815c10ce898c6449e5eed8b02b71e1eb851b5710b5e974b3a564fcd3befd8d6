{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String property : properties.keySet()) {\n    if (that.toMaybeRecordType().hasProperty(property)) {\n      JSType propertyType = getPropertyType(property);\n      JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);\n      if (!propertyType.isEquivalentTo(thatPropertyType)) {\n        return registry.createUnionType(this, that);\n      }\n      builder.addProperty(property, propertyType, getPropertyNode(property));\n    }\n  }\n  for (String property : that.toMaybeRecordType().getProperties().keySet()) {\n    if (!properties.containsKey(property)) {\n      return registry.createUnionType(this, that);\n    }\n  }\n  return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}