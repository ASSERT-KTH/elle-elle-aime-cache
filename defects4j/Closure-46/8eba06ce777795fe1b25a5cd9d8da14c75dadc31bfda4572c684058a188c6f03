{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n        if (that.toMaybeRecordType().hasProperty(property)) {\n            JSType thisPropertyType = getPropertyType(property);\n            JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);\n            builder.addProperty(property, \n                thisPropertyType.getLeastSupertype(thatPropertyType),\n                getPropertyNode(property));\n        }\n    }\n    for (String property : that.toMaybeRecordType().getOwnPropertyNames()) {\n        if (!properties.containsKey(property)) {\n            builder.addProperty(property, \n                that.toMaybeRecordType().getPropertyType(property),\n                that.toMaybeRecordType().getPropertyNode(property));\n        }\n    }\n    JSType builtType = builder.build();\n    if (builtType.isEquivalentTo(this) && builtType.isEquivalentTo(that)) {\n        return builtType;\n    }\n    return registry.createUnionType(this, that);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}