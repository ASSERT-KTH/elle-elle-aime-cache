{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    RecordType thisRecordType = this.toMaybeRecordType();\n    RecordType thatRecordType = that.toMaybeRecordType();\n\n    // Add all properties from 'this' record type.\n    for (String property : thisRecordType.getProperties()) {\n        if (thatRecordType.hasProperty(property)) {\n            builder.addProperty(property, registry.createUnionType(\n                thisRecordType.getPropertyType(property),\n                thatRecordType.getPropertyType(property)), null);\n        } else {\n            builder.addProperty(property, thisRecordType.getPropertyType(property), null);\n        }\n    }\n\n    // Add properties from 'that' record type which are not in 'this'.\n    for (String property : thatRecordType.getProperties()) {\n        if (!thisRecordType.hasProperty(property)) {\n            builder.addProperty(property, thatRecordType.getPropertyType(property), null);\n        }\n    }\n\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}