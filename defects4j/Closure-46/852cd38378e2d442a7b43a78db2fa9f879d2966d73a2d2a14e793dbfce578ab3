{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    JSType thatType = that.toMaybeRecordType();\n\n    // Get all possible properties from both types\n    Set<String> allProperties = new HashSet<>();\n    allProperties.addAll(properties.keySet());\n    allProperties.addAll(thatType.getProperties().keySet());\n\n    for (String property : allProperties) {\n        JSType thisProperty = this.getOwnPropertyType(property);\n        JSType thatProperty = thatType.getOwnPropertyType(property);\n\n        // Check if both properties exist and are equivalent\n        if (thisProperty.isNormalized() && thatProperty.isNormalized()\n                && thisProperty.isEquivalentTo(thatProperty)) {\n            builder.addProperty(property, thisProperty, getPropertyNode(property));\n        } else if (thisProperty.isNormalized()) {\n            // If only the current type has this property, add union type to the builder\n            builder.addProperty(property, registry.createUnionType(thisProperty, thatProperty), getPropertyNode(property));\n        } else if (thatProperty.isNormalized()) {\n            // If only the other type has this property, add union type to the builder\n            builder.addProperty(property, registry.createUnionType(thisProperty, thatProperty), thatType.getPropertyNode(property));\n        }\n    }\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}