{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  Set<String> allProperties = new HashSet<>(properties.keySet());\n  allProperties.addAll(that.toMaybeRecordType().getProperties());\n\n  for (String property : allProperties) {\n    JSType thisPropertyType = getPropertyType(property);\n    JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);\n    if (thisPropertyType != null || thatPropertyType != null) {\n      JSType leastSupertypeOfProperties = thisPropertyType != null && thatPropertyType != null ?\n          thisPropertyType.getLeastSupertype(thatPropertyType) :\n          (thisPropertyType != null ? thisPropertyType : thatPropertyType);\n      builder.addProperty(property, leastSupertypeOfProperties,\n          getPropertyNode(property));\n    }\n  }\n  return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}