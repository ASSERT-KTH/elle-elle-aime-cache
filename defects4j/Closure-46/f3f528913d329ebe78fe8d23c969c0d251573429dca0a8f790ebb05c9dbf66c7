{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    Set<String> allProperties = new HashSet<>(properties.keySet());\n    allProperties.addAll(that.toMaybeRecordType().getOwnPropertyNames());\n\n    for (String property : allProperties) {\n        if (properties.containsKey(property) && that.toMaybeRecordType().hasProperty(property)) {\n            // If both types have the property, we take the union of the property types\n            JSType thisType = getPropertyType(property);\n            JSType thatType = that.toMaybeRecordType().getPropertyType(property);\n            JSType unionType = registry.createUnionType(thisType, thatType);\n            builder.addProperty(property, unionType, getPropertyNode(property));\n        } else if (properties.containsKey(property)) {\n            // If only this type has the property, we add it as is\n            builder.addProperty(property, getPropertyType(property), getPropertyNode(property));\n        } else {\n            // If only that type has the property, we add it as is\n            builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), null);\n        }\n    }\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}