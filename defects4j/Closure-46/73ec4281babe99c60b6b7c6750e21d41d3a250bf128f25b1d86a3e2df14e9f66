{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n\n    RecordType thatRecord = that.toMaybeRecordType();\n    if (isEmpty() || thatRecord.isEmpty()) {\n      return getTopMostAncestorOfType(JSTypeNative.OBJECT_TYPE);\n    }\n\n    // The least supertype of two record types is a record type\n    // with the following properties:\n    // 1. The keys are the union of the keys of the two record types.\n    // 2. For each key k:\n    //    a. If k is in both record types, the property type is the\n    //       least super type of the two property types.\n    //    b. Otherwise, the property type is the property type in the\n    //       record type that has the key.\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      JSType thisPropertyType = getPropertyType(property);\n      JSType thatPropertyType = thatRecord.hasProperty(property) ?\n          thatRecord.getPropertyType(property) : null;\n\n      if (thatPropertyType != null) {\n        builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType),\n            getPropertyNode(property));\n      } else {\n         builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n      }\n    }\n    for (String property : thatRecord.getProperties()) {\n        if (!properties.containsKey(property)) {\n          builder.addProperty(property, thatRecord.getPropertyType(property),\n              thatRecord.getPropertyNode(property));\n        }\n    }\n    return builder.build();\n\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}