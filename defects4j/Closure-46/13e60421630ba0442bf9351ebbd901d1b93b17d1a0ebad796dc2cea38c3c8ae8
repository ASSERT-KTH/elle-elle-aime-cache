{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    RecordType thisRecord = this.toMaybeRecordType();\n    RecordType thatRecord = that.toMaybeRecordType();\n\n    // Add all properties from this record\n    for (String property : thisRecord.getProperties()) {\n        JSType thisPropertyType = thisRecord.getPropertyType(property);\n        if (thatRecord.hasProperty(property)) {\n            JSType thatPropertyType = thatRecord.getPropertyType(property);\n            // If the property is present in both, use the union of both types\n            builder.addProperty(property, \n                  registry.createUnionType(thisPropertyType, thatPropertyType),\n                  getPropertyNode(property));\n        } else {\n            // If it is unique to this record, add it as is\n            builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n        }\n    }\n\n    // Add properties unique to 'that' record\n    for (String property : thatRecord.getProperties()) {\n        if (!thisRecord.hasProperty(property)) {\n            JSType thatPropertyType = thatRecord.getPropertyType(property);\n            builder.addProperty(property, thatPropertyType, thatRecord.getPropertyNode(property));\n        }\n    }\n\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}