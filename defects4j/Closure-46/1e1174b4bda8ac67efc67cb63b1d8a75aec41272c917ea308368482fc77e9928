{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  \n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  RecordType thatRecordType = that.toMaybeRecordType();\n  \n  // Add common properties with equivalent types from both records\n  for (String property : properties.keySet()) {\n    if (thatRecordType.hasProperty(property) &&\n        thatRecordType.getPropertyType(property).isEquivalentTo(\n            getPropertyType(property))) {\n      builder.addProperty(property, getPropertyType(property),\n          getPropertyNode(property));\n    }\n  }\n  \n  // Add properties from 'that' record that are not in 'this' record\n  for (String property : thatRecordType.getProperties()) {\n    if (!properties.containsKey(property)) {\n      builder.addProperty(property, thatRecordType.getPropertyType(property),\n          thatRecordType.getPropertyNode(property));\n    }\n  }\n  \n  return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}