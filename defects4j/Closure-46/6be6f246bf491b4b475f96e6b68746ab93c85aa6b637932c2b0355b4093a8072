{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder commonPropertiesBuilder = new RecordTypeBuilder(registry);\n    RecordTypeBuilder allPropertiesBuilder = new RecordTypeBuilder(registry);\n\n    for (String property : properties.keySet()) {\n        if (that.toMaybeRecordType().hasProperty(property) &&\n            that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n                getPropertyType(property))) {\n            commonPropertiesBuilder.addProperty(property, getPropertyType(property),\n                getPropertyNode(property));\n        }\n        allPropertiesBuilder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n    }\n\n    for (String property : that.toMaybeRecordType().getProperties().keySet()) {\n        allPropertiesBuilder.addProperty(property, that.toMaybeRecordType().getPropertyType(property),\n            that.toMaybeRecordType().getPropertyNode(property));\n    }\n\n    JSType commonPropertiesType = commonPropertiesBuilder.build();\n    JSType allPropertiesType = allPropertiesBuilder.build();\n\n    return registry.createUnionType(commonPropertiesType, allPropertiesType);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}