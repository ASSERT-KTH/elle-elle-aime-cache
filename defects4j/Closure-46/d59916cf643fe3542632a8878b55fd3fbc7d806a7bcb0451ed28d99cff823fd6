{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordType thatRecord = that.toMaybeRecordType();\n    if (isEmpty() || thatRecord.isEmptyType()) {\n        return registry.createUnionType(this, that);\n    }\n\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (thatRecord.hasProperty(property)) {\n          JSType thisPropertyType = getPropertyType(property);\n          JSType thatPropertyType = thatRecord.getPropertyType(property);\n          builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType),\n              getPropertyNode(property));\n      }\n    }\n    for (String property : thatRecord.getProperties()) {\n        if (!hasProperty(property)) {\n            return registry.createUnionType(this, that);\n        }\n    }\n\n    return builder.build();\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}