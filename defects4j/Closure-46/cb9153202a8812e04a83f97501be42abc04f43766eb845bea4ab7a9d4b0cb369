{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    // If the other type is a record type, the least supertype is the union of the two record types\n    RecordType thisRecordType = this.toMaybeRecordType().orElse(null);\n    RecordType thatRecordType = that.toMaybeRecordType().orElse(null);\n    \n    if (thisRecordType == null || thatRecordType == null) {\n        return super.getLeastSupertype(that);\n    }\n    \n    RecordTypeBuilder commonBuilder = new RecordTypeBuilder(registry);\n    for (String property : thisRecordType.getProperties().keySet()) {\n        if (thatRecordType.hasProperty(property) &&\n            thatRecordType.getPropertyType(property).isEquivalentTo(\n                thisRecordType.getPropertyType(property))) {\n            commonBuilder.addProperty(property, thisRecordType.getPropertyType(property),\n                thisRecordType.getPropertyNode(property));\n        }\n    }\n    \n    // Add properties unique to the other record type\n    for (String property : thatRecordType.getProperties().keySet()) {\n        if (!thisRecordType.hasProperty(property)) {\n            commonBuilder.addProperty(property, thatRecordType.getPropertyType(property),\n                thatRecordType.getPropertyNode(property));\n        }\n    }\n    \n    // If no common properties, return the union of the two record types\n    if (commonBuilder.getProperties().isEmpty()) {\n        return registry.createUnionType(this, that);\n    }\n    \n    return commonBuilder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}