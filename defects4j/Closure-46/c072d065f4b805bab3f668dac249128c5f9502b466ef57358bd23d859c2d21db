{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    \n    // Iterate over all properties from both this record and the other record\n    Set<String> allProperties = new HashSet<>(properties.keySet());\n    allProperties.addAll(that.toMaybeRecordType().getAllPropertyNames());\n    \n    for (String property : allProperties) {\n        JSType thisPropertyType = getPropertyType(property);\n        JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);\n        \n        // If both records have the property, find the least supertype of their types\n        if (thisPropertyType!= null && thatPropertyType!= null) {\n            builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType),\n                getPropertyNode(property));\n        } \n        // If only this record has the property, add it to the result\n        else if (thisPropertyType!= null) {\n            builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n        } \n        // If only the other record has the property, add it to the result\n        else {\n            builder.addProperty(property, thatPropertyType, null);\n        }\n    }\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}