{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    Set<String> allProperties = new HashSet<>(properties.keySet());\n    allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());\n    for (String property : allProperties) {\n      if (properties.containsKey(property) && that.toMaybeRecordType().hasProperty(property)) {\n        // If both record types have the property, put the union of the types in the least supertype\n        JSType type1 = properties.get(property).getType();\n        JSType type2 = that.toMaybeRecordType().getPropertyType(property).getType();\n        JSType unionType = registry.createUnionType(type1, type2);\n        if (unionType == null) {\n          // If no common supertype, the least supertype is a ProxyObjectType\n          unionType = new ProxyObjectType(registry, type1, type2);\n        }\n        builder.addProperty(property, unionType, getPropertyNode(property));\n      } else if (properties.containsKey(property)) {\n        // If only the current record type has the property, put its type in the least supertype\n        builder.addProperty(property, properties.get(property).getType(), getPropertyNode(property));\n      } else {\n        // If only the other record type has the property, put its type in the least supertype\n        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property).getType(), that.toMaybeRecordType().getPropertyNode(property));\n      }\n    }\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}