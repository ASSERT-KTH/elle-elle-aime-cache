{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordType thatRecord = that.toMaybeRecordType();\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    boolean hasCommonProperty = false;\n    // Add properties that are in both types with equivalent types\n    for (String property : properties.keySet()) {\n        JSType thisPropType = getPropertyType(property);\n        if (thatRecord.hasProperty(property)) {\n            JSType thatPropType = thatRecord.getPropertyType(property);\n            if (thisPropType.isEquivalentTo(thatPropType)) {\n                builder.addProperty(property, thisPropType, getPropertyNode(property));\n                hasCommonProperty = true;\n            }\n        }\n    }\n\n    // If there are no common properties, return a union type of both record types\n    if (!hasCommonProperty) {\n        return registry.createUnionType(this, that);\n    }\n\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}