{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder commonPropertiesBuilder = new RecordTypeBuilder(registry);\n    RecordTypeBuilder allPropertiesBuilder = new RecordTypeBuilder(registry);\n    \n    for (String property : properties.keySet()) {\n        if (that.toMaybeRecordType().hasProperty(property)) {\n            allPropertiesBuilder.addProperty(property, getPropertyType(property), \n                                            getPropertyNode(property));\n        }\n        if (that.toMaybeRecordType().hasProperty(property) &&\n            that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n                getPropertyType(property))) {\n            commonPropertiesBuilder.addProperty(property, getPropertyType(property), \n                                               getPropertyNode(property));\n        }\n    }\n    \n    for (String property : that.toMaybeRecordType().getProperties()) {\n        if (!properties.containsKey(property)) {\n            allPropertiesBuilder.addProperty(property, \n                                            that.toMaybeRecordType().getPropertyType(property), \n                                            null);\n        }\n    }\n    \n    if (commonPropertiesBuilder.getProperties().isEmpty()) {\n        return registry.createUnionType(this, that);\n    }\n    return registry.createUnionType(allPropertiesBuilder.build(), \n                                    commonPropertiesBuilder.build());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}