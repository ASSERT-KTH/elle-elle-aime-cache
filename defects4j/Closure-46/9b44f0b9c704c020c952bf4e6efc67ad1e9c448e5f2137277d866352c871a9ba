{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  RecordType thatRecordType = that.toMaybeRecordType();\n\n  // Collect all properties from both record types\n  Set<String> allProperties = new HashSet<>(properties.keySet());\n  allProperties.addAll(thatRecordType.getProperties());\n\n  for (String property : allProperties) {\n    JSType thisPropertyType = getPropertyType(property);\n    JSType thatPropertyType = thatRecordType.getPropertyType(property);\n\n    if (thisPropertyType != null && thatPropertyType != null) {\n      // If both properties exist, take the least supertype of their types\n      JSType leastSupertype = thisPropertyType.getLeastSupertype(thatPropertyType);\n      if (leastSupertype != null) {\n        builder.addProperty(property, leastSupertype, getPropertyNode(property));\n      }\n    } else if (thisPropertyType != null) {\n      // If only this record has the property, add it as is\n      builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n    } else if (thatPropertyType != null) {\n      // If only the other record has the property, add it as is\n      builder.addProperty(property, thatPropertyType, thatRecordType.getPropertyNode(property));\n    }\n  }\n\n  return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}