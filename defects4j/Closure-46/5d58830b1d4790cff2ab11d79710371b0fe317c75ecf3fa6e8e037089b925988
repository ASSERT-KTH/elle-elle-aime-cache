{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    // Add properties present in either record type\n    Set<String> combinedProperties = new HashSet<>(this.properties.keySet());\n    combinedProperties.addAll(that.toMaybeRecordType().getOwnPropertyNames());\n\n    for (String property : combinedProperties) {\n        boolean thisHasProperty = this.hasProperty(property);\n        boolean thatHasProperty = that.toMaybeRecordType().hasProperty(property);\n\n        if (thisHasProperty && thatHasProperty) {\n            JSType thisPropertyType = this.getPropertyType(property);\n            JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);\n            builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType), null);\n        } else if (thisHasProperty) {\n            builder.addProperty(property, this.getPropertyType(property), null);\n        } else if (thatHasProperty) {\n            builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), null);\n        }\n    }\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}