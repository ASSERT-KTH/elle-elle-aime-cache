{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordType thatRecordType = that.toMaybeRecordType();\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    // Add all properties from both record types\n    for (String property : properties.keySet()) {\n      JSType thisPropertyType = getPropertyType(property);\n      if (thatRecordType.hasProperty(property)) {\n        JSType thatPropertyType = thatRecordType.getPropertyType(property);\n        // Combine types if property exists in both record types\n        builder.addProperty(\n            property,\n            thisPropertyType.getLeastSupertype(thatPropertyType),\n            getPropertyNode(property)); \n      } else {\n        // Add property from this record type only\n        builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n      }\n    }\n    for (String property : thatRecordType.getProperties().keySet()) {\n      if (!properties.containsKey(property)) {\n        // Add property from the other record type only\n        builder.addProperty(\n            property,\n            thatRecordType.getPropertyType(property),\n            thatRecordType.getPropertyNode(property));\n      }\n    }\n\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}