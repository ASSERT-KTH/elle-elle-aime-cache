{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordTypeBuilder commonPropertiesBuilder = new RecordTypeBuilder(registry);\n  RecordTypeBuilder uniquePropertiesBuilder = new RecordTypeBuilder(registry);\n  \n  for (String property : properties.keySet()) {\n    if (that.toMaybeRecordType().hasProperty(property) &&\n        that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n            getPropertyType(property))) {\n      commonPropertiesBuilder.addProperty(property, getPropertyType(property),\n          getPropertyNode(property));\n    } else {\n      uniquePropertiesBuilder.addProperty(property, getPropertyType(property),\n          getPropertyNode(property));\n    }\n  }\n  \n  for (String property : that.toMaybeRecordType().enumeratePropertyNames()) {\n    if (!properties.containsKey(property)) {\n      uniquePropertiesBuilder.addProperty(property, \n          that.toMaybeRecordType().getPropertyType(property),\n          that.toMaybeRecordType().getPropertyNode(property));\n    }\n  }\n  \n  JSType commonPropertiesType = commonPropertiesBuilder.build();\n  JSType uniquePropertiesType = uniquePropertiesBuilder.build();\n  \n  if (commonPropertiesType.isEmptyType() && uniquePropertiesType.isEmptyType()) {\n    return commonPropertiesType; // or return uniquePropertiesType, both are empty\n  } else if (commonPropertiesType.isEmptyType()) {\n    return uniquePropertiesType;\n  } else if (uniquePropertiesType.isEmptyType()) {\n    return commonPropertiesType;\n  } else {\n    return registry.createUnionType(commonPropertiesType, uniquePropertiesType);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}