{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  // Collect all properties from both record types\n  RecordType thisRecordType = this.toMaybeRecordType();\n  RecordType thatRecordType = that.toMaybeRecordType();\n\n  Set<String> allProperties = new HashSet<>(properties.keySet());\n  allProperties.addAll(thatRecordType.properties.keySet());\n\n  for (String property : allProperties) {\n    JSType thisPropType = thisRecordType.getPropertyType(property);\n    JSType thatPropType = thatRecordType.getPropertyType(property);\n\n    if (thisRecordType.hasProperty(property) && thatRecordType.hasProperty(property)) {\n      // Add the least supertype of the two property types\n      builder.addProperty(property, thisPropType.getLeastSupertype(thatPropType), null);\n    } else if (thisRecordType.hasProperty(property)) {\n      builder.addProperty(property, thisPropType, getPropertyNode(property));\n    } else {\n      builder.addProperty(property, thatPropType, thatRecordType.getPropertyNode(property));\n    }\n  }\n  return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}