{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String property : properties.keySet()) {\n    if (that.toMaybeRecordType().hasProperty(property)) {\n      builder.addProperty(property, getLeastSupertypePropertyType(that, property));\n    }\n  }\n  for (String property : that.toMaybeRecordType().properties().keySet()) {\n    if (!properties.containsKey(property)) {\n      builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property));\n    }\n  }\n  return builder.build().toMaybeUnionType().orElse(this);\n}\n\n// Helper method to get the least supertype property type\nprivate JSType getLeastSupertypePropertyType(JSType that, String property) {\n  return getPropertyType(property).getLeastSupertype(that.toMaybeRecordType().getPropertyType(property));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}