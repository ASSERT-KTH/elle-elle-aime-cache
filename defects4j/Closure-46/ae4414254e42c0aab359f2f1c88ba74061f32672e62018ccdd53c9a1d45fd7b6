{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n\n    RecordType thisRecord = this.toMaybeRecordType();\n    RecordType thatRecord = that.toMaybeRecordType();\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    // Combine all property names from both record types\n    Set<String> allProperties = new HashSet<>();\n    allProperties.addAll(thisRecord.getProperties().keySet());\n    allProperties.addAll(thatRecord.getProperties().keySet());\n\n    for (String property : allProperties) {\n      boolean thisHasProp = thisRecord.hasProperty(property);\n      boolean thatHasProp = thatRecord.hasProperty(property);\n\n      if (thisHasProp && thatHasProp) {\n        JSType thisPropType = thisRecord.getPropertyType(property);\n        JSType thatPropType = thatRecord.getPropertyType(property);\n        builder.addProperty(\n            property,\n            thisPropType.getLeastSupertype(thatPropType),\n            thisRecord.getPropertyNode(property));\n      } else if (thisHasProp) {\n        builder.addProperty(\n            property,\n            thisRecord.getPropertyType(property),\n            thisRecord.getPropertyNode(property));\n      } else {\n        builder.addProperty(\n            property,\n            thatRecord.getPropertyType(property),\n            thatRecord.getPropertyNode(property));\n      }\n    }\n\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}