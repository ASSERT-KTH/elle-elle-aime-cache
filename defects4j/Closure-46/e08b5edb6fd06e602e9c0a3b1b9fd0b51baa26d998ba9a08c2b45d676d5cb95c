{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    \n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    Set<String> allProperties = new HashSet<>(properties.keySet());\n    allProperties.addAll(that.toMaybeRecordType().getOwnPropertyNames());\n\n    for (String property : allProperties) {\n        if (properties.containsKey(property) && that.toMaybeRecordType().hasProperty(property)) {\n            JSType thisPropertyType = getPropertyType(property);\n            JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);\n            if (thisPropertyType.isEquivalentTo(thatPropertyType)) {\n                builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n            } else {\n                // If property types are different, we need to create a union type\n                JSType unionType = registry.createUnionType(thisPropertyType, thatPropertyType);\n                builder.addProperty(property, unionType, null);\n            }\n        } else if (properties.containsKey(property)) {\n            // Property only in this record\n            builder.addProperty(property, getPropertyType(property), getPropertyNode(property));\n        } else if (that.toMaybeRecordType().hasProperty(property)) {\n            // Property only in that record\n            builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), null);\n        }\n    }\n\n    JSType thisRecordType = builder.build();\n    return registry.createUnionType(thisRecordType, that);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}