{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return registry.createUnionType(this, that);\n  }\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  Set<String> allProperties = new HashSet<>(properties.keySet());\n  allProperties.addAll(that.toMaybeRecordType().getProperties());\n\n  for (String property : allProperties) {\n    JSType thisPropertyType = isRecordType() && properties.containsKey(property)\n        ? getPropertyType(property)\n        : null;\n    JSType thatPropertyType = that.isRecordType() && that.toMaybeRecordType().hasProperty(property)\n        ? that.toMaybeRecordType().getPropertyType(property)\n        : null;\n\n    if (thisPropertyType != null && thisPropertyType.equals(thatPropertyType)) {\n      builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n    } else if (thisPropertyType != null && thatPropertyType != null) {\n      builder.addProperty(property, registry.createUnionType(thisPropertyType, thatPropertyType), null);\n    } else if (thisPropertyType != null) {\n      builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n    } else if (thatPropertyType != null) {\n      builder.addProperty(property, thatPropertyType, that.toMaybeRecordType().getPropertyNode(property));\n    }\n  }\n  JSType leastSupertype = builder.build();\n  if (!this.equals(leastSupertype) || !that.equals(leastSupertype)) {\n    return registry.createUnionType(this, that);\n  } else {\n    return leastSupertype;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}