{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  RecordType thatRecordType = that.toMaybeRecordType();\n\n  // Add properties from this record type\n  for (String property : properties.keySet()) {\n    JSType thisPropertyType = getPropertyType(property);\n    JSType thatPropertyType = thatRecordType.getPropertyType(property);\n    if (thatRecordType.hasProperty(property)) {\n      builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType), getPropertyNode(property));\n    } else {\n      builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n    }\n  }\n\n  // Add properties from the other record type that are not in this record type\n  for (String property : thatRecordType.getProperties()) {\n    if (!properties.containsKey(property)) {\n      builder.addProperty(property, thatRecordType.getPropertyType(property), thatRecordType.getPropertyNode(property));\n    }\n  }\n\n  return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}