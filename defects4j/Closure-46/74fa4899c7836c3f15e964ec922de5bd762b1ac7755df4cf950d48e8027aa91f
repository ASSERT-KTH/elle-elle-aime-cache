{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType() || that.isUnknownType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    JSType thisRecord = this.toMaybeRecordType();\n    JSType thatRecord = that.toMaybeRecordType();\n    for (String property : thisRecord.getProperties().keySet()) {\n      if (thatRecord.hasProperty(property)) {\n        JSType thisPropType = thisRecord.getPropertyType(property);\n        JSType thatPropType = thatRecord.getPropertyType(property);\n        if (thisPropType.isEquivalentTo(thatPropType)) {\n          builder.addProperty(property, thisPropType, thisRecord.getPropertyNode(property));\n        } else {\n          builder.addProperty(property, registry.createUnionType(thisPropType, thatPropType),\n              thisPropType.toMaybeRecordType().getPropertyNode(property));\n        }\n      } else {\n        builder.addProperty(property, thisRecord.getPropertyType(property),\n            thisRecord.getPropertyNode(property));\n      }\n    }\n    for (String property : thatRecord.getProperties().keySet()) {\n      if (!thisRecord.hasProperty(property)) {\n        builder.addProperty(property, thatRecord.getPropertyType(property),\n            thatRecord.getPropertyNode(property));\n      }\n    }\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}