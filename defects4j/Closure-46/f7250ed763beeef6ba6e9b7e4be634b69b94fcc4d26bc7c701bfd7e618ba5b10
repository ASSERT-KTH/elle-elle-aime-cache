{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    RecordType thatRecord = that.toMaybeRecordType();\n\n    // Add all properties from both record types to the builder\n    for (String property : properties.keySet()) {\n        JSType thisPropertyType = getPropertyType(property);\n        if (thatRecord.hasProperty(property)) {\n            JSType thatPropertyType = thatRecord.getPropertyType(property);\n            JSType leastSupertype = thisPropertyType.getLeastSupertype(thatPropertyType);\n            builder.addProperty(property, leastSupertype, getPropertyNode(property));\n        } else {\n            builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n        }\n    }\n\n    for (String property : thatRecord.getProperties()) {\n        if (!properties.containsKey(property)) {\n            builder.addProperty(property, thatRecord.getPropertyType(property), thatRecord.getPropertyNode(property));\n        }\n    }\n\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}