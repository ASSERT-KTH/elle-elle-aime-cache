{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    \n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    Set<String> allProperties = new HashSet<>(properties.keySet());\n    allProperties.addAll(that.toMaybeRecordType().getOwnPropertyNames());\n\n    for (String property : allProperties) {\n        if (hasProperty(property) && that.toMaybeRecordType().hasProperty(property)) {\n            JSType thisPropertyType = getPropertyType(property);\n            JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);\n            if (thisPropertyType.isEquivalentTo(thatPropertyType)) {\n                builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n            } else {\n                builder.addProperty(property, registry.createUnionType(thisPropertyType, thatPropertyType), getPropertyNode(property));\n            }\n        } else if (hasProperty(property)) {\n            builder.addProperty(property, getPropertyType(property), getPropertyNode(property));\n        } else if (that.toMaybeRecordType().hasProperty(property)) {\n            builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyNode(property));\n        }\n    }\n    \n    JSType result = builder.build();\n    if (result.isEquivalentTo(this) || result.isEquivalentTo(that)) {\n        return registry.createUnionType(this, that);\n    }\n    return registry.createUnionType(this, that, result);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}