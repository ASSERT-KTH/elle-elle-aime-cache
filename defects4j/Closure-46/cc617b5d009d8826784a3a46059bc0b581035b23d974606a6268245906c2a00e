{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    // Add properties in this type that are not in that type.\n    for (String property : properties.keySet()) {\n      if (!that.toMaybeRecordType().hasProperty(property)) {\n        builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n      }\n    }\n    for (String property : that.toMaybeRecordType().getProperties()) {\n      // Add properties that are in both types if they are equivalent.\n      if (hasProperty(property) &&\n          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n              getPropertyType(property))) {\n        builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n      } else if (!hasProperty(property)) {\n        // Add properties in that type that are not in this type.\n        builder.addProperty(property,\n            that.toMaybeRecordType().getPropertyType(property),\n            that.toMaybeRecordType().getSlot(property).getPropertyNode());\n      }\n    }\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}