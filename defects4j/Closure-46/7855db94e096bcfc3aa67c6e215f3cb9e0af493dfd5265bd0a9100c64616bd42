{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n\n    RecordType thatRecord = that.toMaybeRecordType();\n    if (thatRecord == null) {\n      return super.getLeastSupertype(that);\n    }\n\n    boolean hasCommonProperties = false;\n    for (String property : properties.keySet()) {\n      if (thatRecord.hasProperty(property)) {\n        hasCommonProperties = true;\n        break;\n      }\n    }\n\n    if (hasCommonProperties) {\n        RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n        for (String property : properties.keySet()) {\n          if (thatRecord.hasProperty(property)) {\n              JSType thisPropertyType = getPropertyType(property);\n              JSType thatPropertyType = thatRecord.getPropertyType(property);\n              if (thisPropertyType != null && thatPropertyType != null &&\n                  thisPropertyType.isEquivalentTo(thatPropertyType)) {\n                builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n              }\n           }\n        }\n         if (!builder.isEmpty()){\n           return builder.build();\n         }\n    }\n\n\n    return registry.createUnionType(this, that);\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}