{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    // Add all properties from both record types to the builder\n    for (String property : getAllProperties(this, that)) {\n        JSType thisPropertyType = getPropertyType(property);\n        JSType thatPropertyType = that.getPropertyType(property);\n        // If both types have the property, use the least supertype of the property types\n        if (thisPropertyType!= null && thatPropertyType!= null) {\n            builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType),\n                getPropertyNode(property));\n        } \n        // If only this type has the property, add it to the builder\n        else if (thisPropertyType!= null) {\n            builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n        } \n        // If only the other type has the property, add it to the builder\n        else {\n            builder.addProperty(property, thatPropertyType, that.getPropertyNode(property));\n        }\n    }\n    return builder.build();\n}\n\n// Helper method to get all unique properties from both record types\nprivate Set<String> getAllProperties(JSType type1, JSType type2) {\n    Set<String> properties = new HashSet<>(type1.getPropertyNames());\n    properties.addAll(type2.getPropertyNames());\n    return properties;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}