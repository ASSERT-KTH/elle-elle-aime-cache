{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordType otherRecord = that.toMaybeRecordType();\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    \n    // Add all properties from this record\n    for (String property : properties.keySet()) {\n        JSType thisType = getPropertyType(property);\n        JSType otherType = otherRecord.getPropertyType(property);\n        if (otherType != null) {\n            // If property exists in both, take the least supertype of their types\n            JSType supertype = thisType.getLeastSupertype(otherType);\n            builder.addProperty(property, supertype, getPropertyNode(property));\n        } else {\n            // Property only in this record\n            builder.addProperty(property, thisType, getPropertyNode(property));\n        }\n    }\n    \n    // Add properties only in the other record\n    for (String property : otherRecord.getProperties().keySet()) {\n        if (!properties.containsKey(property)) {\n            JSType otherType = otherRecord.getPropertyType(property);\n            builder.addProperty(property, otherType, otherRecord.getPropertyNode(property));\n        }\n    }\n    \n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}