{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    Set<String> thatProperties = that.toMaybeRecordType().getPropertyNames().keySet();\n\n    for (String property : properties.keySet()) {\n      if (thatProperties.contains(property) &&\n          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n              getPropertyType(property))) {\n        builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n      } else {\n        builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property),\n            that.toMaybeRecordType().getPropertyNode(property));\n      }\n    }\n\n    for (String property : thatProperties) {\n      if (!properties.keySet().contains(property)) {\n        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property),\n            that.toMaybeRecordType().getPropertyNode(property));\n      }\n    }\n\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}