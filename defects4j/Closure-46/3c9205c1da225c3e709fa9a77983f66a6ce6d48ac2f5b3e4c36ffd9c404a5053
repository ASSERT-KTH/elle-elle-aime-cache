{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n  // Add properties from the current record type\n  for (String property : properties.keySet()) {\n    JSType thisPropertyType = getPropertyType(property);\n    JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);\n\n    if (that.toMaybeRecordType().hasProperty(property)) {\n      // If the property exists in both record types, create a union of their types\n      JSType unionType = thatPropertyType.isEquivalentTo(thisPropertyType)\n          ? thisPropertyType\n          : registry.createUnionType(thisPropertyType, thatPropertyType);\n      builder.addProperty(property, unionType, getPropertyNode(property));\n    } else {\n      // If the property exists only in the current record type, add it as is\n      builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n    }\n  }\n\n  // Add properties from the `that` record type that are not in the current record type\n  for (String property : that.toMaybeRecordType().getProperties()) {\n    if (!properties.containsKey(property)) {\n      JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);\n      builder.addProperty(property, thatPropertyType, that.toMaybeRecordType().getPropertyNode(property));\n    }\n  }\n\n  return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}