{
    "generation": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // initial parameter checks\n    if (str == null) {\n        return null;\n    }\n    if (str.length() == 0) {\n        return StringUtils.EMPTY;\n    }\n\n    // if the lower value is greater than the length of the string,\n    // set to the length of the string\n    // if the upper value is -1 (i.e. no limit) or is greater\n    // than the length of the string, set to the length of the string\n    if (upper == -1 || upper > str.length()) {\n        upper = str.length();\n    }\n    // if upper is less than lower, raise it to lower\n    if (upper < lower) {\n        upper = lower;\n    }\n\n    StringBuffer result = new StringBuffer();\n    int index = StringUtils.indexOf(str, \" \", lower);\n    boolean abbreviated = false;\n\n    if (index == -1) {\n        // No space found, abbreviate to the upper limit\n        result.append(str.substring(0, upper));\n        abbreviated = true;\n    } else if (index > upper) {\n        // Space found but beyond upper limit, abbreviate to the upper limit\n        result.append(str.substring(0, upper));\n        abbreviated = true;\n    } else {\n        // Space found within the upper limit, abbreviate to the space\n        result.append(str.substring(0, index));\n    }\n\n    // Append the appendToEnd string if the string was abbreviated\n    if (abbreviated && upper != str.length()) {\n        result.append(StringUtils.defaultString(appendToEnd));\n    }\n\n    return result.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}