{
    "generation": "\n/**\n\n * Parse an octal string from a buffer.\n\n *\n\n * <p>Leading spaces are ignored.\n\n * The buffer must contain a trailing space or NUL,\n\n * and may contain an additional trailing space or NUL.</p>\n\n *\n\n * <p>The input buffer is allowed to contain all NULs,\n\n * in which case the method returns 0L\n\n * (this allows for missing fields).</p>\n\n *\n\n * <p>To work-around some tar implementations that insert a\n\n * leading NUL this method returns 0 if it detects a leading NUL\n\n * since Commons Compress 1.4.</p>\n\n *\n\n * @param buffer The buffer from which to parse.\n\n * @param offset The offset into the buffer from which to parse.\n\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n\n * @return The long value of the octal string.\n\n * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n\n */\n\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n\n    long    result = 0;\n\n    int     end = offset + length;\n\n    int     start = offset;\n\n    if (length < 2){\n\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n\n    }\n\n    // Skip leading spaces\n\n    while (start < end){\n\n        if (buffer[start] == ' '){\n\n            start++;\n\n        } else {\n\n            break;\n\n        }\n\n    }\n\n    // If all bytes are spaces or NUL, return 0\n\n    if (start == end || (start < end && buffer[start] == 0)) {\n\n        // Check if all remaining bytes are NUL\n\n        boolean allNUL = true;\n\n        for (int i = start; i < end; i++) {\n\n            if (buffer[i] != 0) {\n\n                allNUL = false;\n\n                break;\n\n            }\n\n        }\n\n        if (allNUL) {\n\n            return 0L;\n\n        }\n\n    }\n\n    // Must have trailing NUL or space\n\n    byte trailer;\n\n    trailer = buffer[end-1];\n\n    if (trailer == 0 || trailer == ' '){\n\n        end--;\n\n    } else {\n\n        throw new IllegalArgumentException(\n\n                exceptionMessage(buffer, offset, length, end-1, trailer));\n\n    }\n\n    // May have additional NULs or spaces\n\n    trailer = buffer[end - 1];\n\n    if (trailer == 0 || trailer == ' '){\n\n        end--;\n\n    }\n\n    // Ensure there's at least one digit to parse\n\n    if (start >= end) {\n\n        throw new IllegalArgumentException(\"No digits to parse\");\n\n    }\n\n    for ( ;start < end; start++) {\n\n        final byte currentByte = buffer[start];\n\n        // CheckStyle:MagicNumber OFF\n\n        if (currentByte < '0' || currentByte > '7'){\n\n            throw new IllegalArgumentException(\n\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n\n        }\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n\n        // CheckStyle:MagicNumber ON\n\n    }\n\n    return result;\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}