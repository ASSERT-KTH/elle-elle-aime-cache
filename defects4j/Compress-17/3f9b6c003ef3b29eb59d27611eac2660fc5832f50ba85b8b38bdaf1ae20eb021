{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long result = 0;\n        int end = offset + length;\n        int start = offset;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n        }\n\n        // Handle buffers filled with NULs\n        boolean allNuls = true;\n        for (int i = offset; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNuls = false;\n                break;\n            }\n        }\n        if (allNuls) {\n            return 0L;\n        }\n\n        // Handle leading NULs\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end) {\n            if (buffer[start] == ' ') {\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Validate and adjust trailing NUL or space\n        while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n            end--;\n        }\n\n        // Parse the octal string\n        for (; start < end; start++) {\n            final byte currentByte = buffer[start];\n\n            // Validate the byte is in the octal range\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte)\n                );\n            }\n            result = (result << 3) + (currentByte - '0'); // Convert from ASCII\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}