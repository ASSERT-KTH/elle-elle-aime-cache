{
    "generation": "/**\n * Parse an octal string from a buffer.\n *\n * <p>Leading spaces and zeros are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.</p>\n *\n * <p>The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).</p>\n *\n * <p>To work-around some tar implementations that insert a\n * leading NUL this method returns 0 if it detects a leading NUL\n * since Commons Compress 1.4.</p>\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Check for all zeros\n    boolean allZeros = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allZeros = false;\n            break;\n        }\n    }\n    if (allZeros) {\n        return 0L;\n    }\n\n    // Skip leading spaces and zeros\n    while (start < end && (buffer[start] == ' ' || buffer[start] == 0)) {\n        start++;\n    }\n\n    // Check for leading NUL\n    if (start < end && buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Find the end of the octal number\n    int numberEnd = start;\n    while (numberEnd < end && buffer[numberEnd] >= '0' && buffer[numberEnd] <= '7') {\n        numberEnd++;\n    }\n\n    // Parse the octal number\n    for (int i = start; i < numberEnd; i++) {\n        result = (result << 3) + (buffer[i] - '0'); // convert from ASCII\n    }\n\n    // Check for valid trailing characters\n    for (int i = numberEnd; i < end; i++) {\n        if (buffer[i] != 0 && buffer[i] != ' ') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, buffer[i]));\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}