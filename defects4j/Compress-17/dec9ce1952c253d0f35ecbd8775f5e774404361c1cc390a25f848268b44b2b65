{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Handle leading NUL\n    if (buffer[start] == 0) {\n        start++;\n        // Skip additional leading NULs\n        while (start < end && buffer[start] == 0) {\n            start++;\n        }\n        // If only NULs were found, return 0\n        if (start == end) {\n            return 0L;\n        }\n        // If non-NUL character found after NULs, continue parsing\n    }\n\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // If only spaces were found, return 0\n    if (start == end) {\n        return 0L;\n    }\n\n    // Find the end of the octal number\n    int numberEnd = start;\n    while (numberEnd < end && buffer[numberEnd] >= '0' && buffer[numberEnd] <= '7') {\n        numberEnd++;\n    }\n\n    // Check for valid trailing characters\n    for (int i = numberEnd; i < end; i++) {\n        if (buffer[i] != 0 && buffer[i] != ' ') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, buffer[i]));\n        }\n    }\n\n    // Parse the octal number\n    for (int i = start; i < numberEnd; i++) {\n        result = (result << 3) + (buffer[i] - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}