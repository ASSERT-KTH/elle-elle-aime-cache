{
    "generation": "@Override\npublic boolean apply(Node n) {\n    // When the node is null it means, we reached the implicit return\n    // where the function returns (possibly without an return statement)\n    if (n == null) {\n        return false;\n    }\n\n    // Check for for-in expression, which can have side effects\n    if (n.isForIn()) {\n        Node lhs = n.getFirstChild(); // left-hand side of the for-in\n        Node rhs = lhs.getNext(); // right-hand side of the for-in\n        if (NodeUtil.mayHaveSideEffects(rhs, compiler)) {\n            return true;\n        }\n    }\n\n    // We only care about calls to functions that pass one of the dependent variable to a non-side-effect free function.\n    if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n        return true;\n    }\n\n    if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n        return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}