{
    "generation": "    /**\n     * Parses the raw bytes read from the central directory extra\n     * field with knowledge which fields are expected to be there.\n     *\n     * <p>All four fields inside the zip64 extended information extra\n     * field are optional and must only be present if their corresponding\n     * entry inside the central directory contains the correct magic\n     * value.</p>\n     */\n    public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                            boolean hasCompressedSize,\n                                            boolean hasRelativeHeaderOffset,\n                                            boolean hasDiskStart)\n        throws ZipException {\n        if (rawCentralDirectoryData!= null) {\n            int expectedLength = (hasUncompressedSize? 8 : 0)\n                + (hasCompressedSize? 8 : 0)\n                + (hasRelativeHeaderOffset? 8 : 0)\n                + (hasDiskStart? 4 : 0);\n            int actualLength = Math.min(expectedLength, rawCentralDirectoryData.length);\n            if (actualLength!= expectedLength) {\n                // log a warning?\n            }\n            int offset = 0;\n            if (hasUncompressedSize) {\n                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += 8;\n            }\n            if (hasCompressedSize) {\n                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += 8;\n            }\n            if (hasRelativeHeaderOffset) {\n                relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += 8;\n            }\n            if (hasDiskStart) {\n                diskStart = new ZipLong(rawCentralDirectoryData, offset);\n                offset += 4;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}