{
    "generation": "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData != null) {\n        int expectedLength = 0;\n        if (hasUncompressedSize) {\n            expectedLength += DWORD;\n        }\n        if (hasCompressedSize) {\n            expectedLength += DWORD;\n        }\n        if (hasRelativeHeaderOffset) {\n            expectedLength += DWORD;\n        }\n        if (hasDiskStart) {\n            expectedLength += WORD;\n        }\n        \n        // Allow for extra data in the extra field\n        if (rawCentralDirectoryData.length < expectedLength) {\n            throw new ZipException(\"central directory zip64 extended information extra field's length is shorter than expected. Expected at least \" + expectedLength + \" but is \" + rawCentralDirectoryData.length);\n        }\n        \n        int offset = 0;\n        if (hasUncompressedSize) {\n            size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += DWORD;\n        }\n        if (hasCompressedSize) {\n            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += DWORD;\n        }\n        if (hasRelativeHeaderOffset) {\n            relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += DWORD;\n        }\n        if (hasDiskStart) {\n            diskStart = new ZipLong(rawCentralDirectoryData, offset);\n            offset += WORD;\n        }\n        \n        // Ignore any extra data beyond the expected fields\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}