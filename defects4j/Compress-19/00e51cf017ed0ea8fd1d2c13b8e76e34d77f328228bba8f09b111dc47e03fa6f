{
    "generation": "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData != null) {\n        if ((hasUncompressedSize || hasCompressedSize || hasRelativeHeaderOffset || hasDiskStart) &&\n            rawCentralDirectoryData.length < (DWORD * 3 + WORD)) {\n            throw new ZipException(\"central directory zip64 extended information extra field has insufficient data.\");\n        }\n        int offset = 0;\n        if (hasUncompressedSize) {\n            size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += DWORD;\n        }\n        if (hasCompressedSize) {\n            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += DWORD;\n        }\n        if (hasRelativeHeaderOffset) {\n            relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += DWORD;\n        }\n        if (hasDiskStart) {\n            if (rawCentralDirectoryData.length - offset >= WORD) {\n                diskStart = new ZipLong(rawCentralDirectoryData, offset);\n            } else {\n                throw new ZipException(\"central directory zip64 extended information extra field has insufficient data for disk start.\");\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}