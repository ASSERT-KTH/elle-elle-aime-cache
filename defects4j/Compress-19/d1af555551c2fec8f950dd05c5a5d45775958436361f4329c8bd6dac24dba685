{
    "generation": "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData == null) {\n        return;\n    }\n\n    int offset = 0;\n    int endOffset = rawCentralDirectoryData.length;\n\n    ZipEightByteInteger sizeFound = null;\n    ZipEightByteInteger compressedSizeFound = null;\n    ZipEightByteInteger relativeHeaderOffsetFound = null;\n    ZipLong diskStartFound = null;\n\n    while (offset < endOffset) {\n        if (offset + 4 > endOffset) {\n            throw new ZipException(\"Central directory Zip64 extra field is truncated\");\n        }\n        int id = readShort(rawCentralDirectoryData, offset);\n        int dataLength = readShort(rawCentralDirectoryData, offset + 2);\n        offset += 4;\n\n        if (offset + dataLength > endOffset) {\n            throw new ZipException(\"Central directory Zip64 extra field is truncated\");\n        }\n\n        if (id == UNCOMPRESSED_SIZE_ID && hasUncompressedSize) {\n            sizeFound = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n        } else if (id == COMRESSED_SIZE_ID && hasCompressedSize) {\n            compressedSizeFound = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n        } else if (id == RELATIVE_HEADER_OFFSET_ID && hasRelativeHeaderOffset) {\n            relativeHeaderOffsetFound = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n        } else if (id == DISK_START_ID && hasDiskStart) {\n            diskStartFound = new ZipLong(rawCentralDirectoryData, offset);\n        }\n\n        offset += dataLength;\n    }\n\n    if (hasUncompressedSize && sizeFound == null) {\n        throw new ZipException(\"Uncompressed size field not found in Zip64 extra field\");\n    }\n    if (hasCompressedSize && compressedSizeFound == null) {\n        throw new ZipException(\"Compressed size field not found in Zip64 extra field\");\n    }\n    if (hasRelativeHeaderOffset && relativeHeaderOffsetFound == null) {\n        throw new ZipException(\"Relative header offset field not found in Zip64 extra field\");\n    }\n    if (hasDiskStart && diskStartFound == null) {\n        throw new ZipException(\"Disk start field not found in Zip64 extra field\");\n    }\n\n    if (hasUncompressedSize) {\n        size = sizeFound;\n    }\n    if (hasCompressedSize) {\n        compressedSize = compressedSizeFound;\n    }\n    if (hasRelativeHeaderOffset) {\n        relativeHeaderOffset = relativeHeaderOffsetFound;\n    }\n    if (hasDiskStart) {\n        diskStart = diskStartFound;\n    }\n}\n\nprivate int readShort(byte[] data, int offset) {\n    return (data[offset] & 0xFF) | ((data[offset + 1] & 0xFF) << 8);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}