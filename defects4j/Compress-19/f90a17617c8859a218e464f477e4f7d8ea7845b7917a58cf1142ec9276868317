{
    "generation": "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData != null) {\n        int expectedLength = 0;\n        if (hasUncompressedSize) {\n            expectedLength += 4 + 8; // field header (4 bytes) + size (8 bytes)\n        }\n        if (hasCompressedSize) {\n            expectedLength += 4 + 8; // field header (4 bytes) + size (8 bytes)\n        }\n        if (hasRelativeHeaderOffset) {\n            expectedLength += 4 + 8; // field header (4 bytes) + offset (8 bytes)\n        }\n        if (hasDiskStart) {\n            expectedLength += 4 + 4; // field header (4 bytes) + disk number (4 bytes)\n        }\n        if (rawCentralDirectoryData.length != expectedLength) {\n            throw new ZipException(\"central directory zip64 extended information extra field's length doesn't match central directory data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length);\n        }\n        int offset = 0;\n        if (hasUncompressedSize) {\n            // Skip field header (4 bytes)\n            offset += 4;\n            size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += 8;\n        }\n        if (hasCompressedSize) {\n            // Skip field header (4 bytes)\n            offset += 4;\n            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += 8;\n        }\n        if (hasRelativeHeaderOffset) {\n            // Skip field header (4 bytes)\n            offset += 4;\n            relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += 8;\n        }\n        if (hasDiskStart) {\n            // Skip field header (4 bytes)\n            offset += 4;\n            diskStart = new ZipInteger(rawCentralDirectoryData, offset, 4); // Assuming ZipInteger can handle 4-byte integers\n            offset += 4;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}