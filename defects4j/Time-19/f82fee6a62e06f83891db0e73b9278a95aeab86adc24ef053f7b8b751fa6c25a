{
    "generation": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // We need to ensure that time is always after the DST gap\n            // This happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // If we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            } else {\n                // For the case where the offset is positive, we need to check if we are in a DST overlap\n                long prevLocal = previousTransition(instantAdjusted);\n                if (prevLocal != instantAdjusted) {\n                    int offsetPrev = getOffset(prevLocal);\n                    if (offsetPrev != offsetAdjusted && instantAdjusted - prevLocal < Math.abs(offsetPrev - offsetAdjusted)) {\n                        return offsetPrev;\n                    }\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}