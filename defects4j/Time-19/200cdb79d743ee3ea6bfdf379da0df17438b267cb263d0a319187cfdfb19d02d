{
    "generation": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        if (offsetLocal - offsetAdjusted > 0) {\n            // In case of a daylight saving time gap, instantLocal is after the gap.\n            // If offsetLocal is greater than offsetAdjusted then it means instantLocal could be into the overlapping period.\n            // So we need to check previous transition time.\n            long prev = previousTransition(instantAdjusted);\n            if (prev < instantAdjusted) {\n                int offsetPrev = getOffset(prev);\n                // if the difference between previous offset and current offset is smaller or equal to\n                // the difference between current time and previous transition time, then use the previous offset.\n                if (instantAdjusted - prev <= offsetPrev - offsetLocal) {\n                    return offsetPrev;\n                }\n            }\n        } else {\n            // In case of a daylight saving time overlap, instantLocal could be in the overlap period.\n            // In this case, use the smaller offset to ensure that we're not using a non-existent time.\n            return Math.min(offsetLocal, offsetAdjusted);\n        }\n    }\n    return offsetAdjusted;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}