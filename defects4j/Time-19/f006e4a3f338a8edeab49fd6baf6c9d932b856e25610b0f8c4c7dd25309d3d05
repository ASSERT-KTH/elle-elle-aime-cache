{
    "generation": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // Adjust instantLocal using the estimate and recalculate the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // If the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // Determine the direction of the offset change\n        int offsetDifference = offsetLocal - offsetAdjusted;\n        if (offsetDifference < 0) {\n            // If offsetLocal is less than offsetAdjusted, we might be in a DST gap\n            // Ensure the time is after the DST gap\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        } else {\n            // If offsetLocal is greater than offsetAdjusted, handle DST overlap\n            // Favor the earlier instant (daylight time)\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n            if (prevLocal != prevAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal > 0) {\n        // Check for potential previous transitions in positive offset scenarios\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}