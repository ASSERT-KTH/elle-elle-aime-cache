{
    "generation": "/**\n * Visits a CALL node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n */\nprivate void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if(functionJSDocInfo!= null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource.isExtern();\n        }\n\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() &&\n           !functionType.isNativeObjectType() &&\n            (functionType.getReturnType().isUnknownType() ||\n             functionType.getReturnType().isVoidType() ||\n            !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n\n        // Check if the function has a 'this' type\n        JSType thisType = functionType.getThisType();\n        if (thisType!= null) {\n            if (n.getParent().getType()!= Token.GETPROP &&\n                n.getParent().getType()!= Token.GETELEM) {\n                report(t, n, MUST_BE_CALLED_WITH_THIS_TYPE, functionType.toString());\n            }\n        }\n\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}