{
    "generation": "private void visitCall(NodeTraversal t, Node n) {\n  Node child = n.getFirstChild();\n  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n  if (!childType.canBeCalled()) {\n    report(t, n, NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  if (childType instanceof FunctionType) {\n    FunctionType functionType = (FunctionType) childType;\n\n    boolean isExtern = false;\n    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n    if(functionJSDocInfo != null) {\n      String sourceName = functionJSDocInfo.getSourceName();\n      CompilerInput functionSource = compiler.getInput(sourceName);\n      isExtern = functionSource.isExtern();\n    }\n\n    if (functionType.isConstructor() && !functionType.isNativeObjectType() &&\n        (functionType.getReturnType().isUnknownType() ||\n        functionType.getReturnType().isVoidType() ||\n        !isExtern)) {\n      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n    }\n\n    visitParameterList(t, n, functionType);\n\n    // Check if the function has an explicit 'this' type and report an error if not called with the correct 'this' type\n    if (functionType.hasExplicitThisType() && !isThisTypeCorrect(t, n, functionType)) {\n      report(t, n, THIS_TYPE_MISMATCH, functionType.getTypeOfThis().toString());\n    }\n\n    ensureTyped(t, n, functionType.getReturnType());\n  } else {\n    ensureTyped(t, n);\n  }\n  // TODO: Add check for calls of RegExp objects\n}\n\n// Helper method to check if the 'this' type of the function call is correct\nprivate boolean isThisTypeCorrect(NodeTraversal t, Node n, FunctionType functionType) {\n  // Get the parent node of the function call\n  Node parent = n.getParent();\n  // Check if the parent is a GETPROP or GETELEM node and the type of the grandparent matches the explicit 'this' type\n  return (parent.isGetProp() || parent.isGetElem()) && t.getType(parent.getParent()).subtype(functionType.getTypeOfThis());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}