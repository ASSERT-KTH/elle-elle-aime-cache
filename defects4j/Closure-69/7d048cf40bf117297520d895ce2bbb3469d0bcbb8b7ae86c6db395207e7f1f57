{
    "generation": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource.isExtern();\n        }\n\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() &&\n            !functionType.isNativeObjectType() &&\n            (functionType.getReturnType().isUnknownType() ||\n             functionType.getReturnType().isVoidType() ||\n             !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n\n        // Check if the function has an explicit 'this' type and\n        // ensure it's being called with the correct 'this' type.\n        JSType thisType = functionType.getThisType();\n        if (thisType != null && !thisType.isUnknownType()) {\n            Node callee = child;\n            if (callee.isGetProp()) {\n                // Check if the getter has the correct type.\n                Node objectNode = callee.getFirstChild();\n                JSType objectType = getJSType(objectNode);\n                if (!objectType.isSubtypeOf(thisType)) {\n                    report(t, n, THIS_TYPE_MISMATCH, thisType.toString(), objectType.toString());\n                }\n            } else if (callee.isGetElem()) {\n                // Check if the element has the correct type.\n                Node objectNode = callee.getFirstChild();\n                JSType objectType = getJSType(objectNode);\n                if (!objectType.isSubtypeOf(thisType)) {\n                    report(t, n, THIS_TYPE_MISMATCH, thisType.toString(), objectType.toString());\n                }\n            } else {\n                // Function is not called as a method, so 'this' type might be incorrect.\n                report(t, n, MISSING_THIS_TYPE, thisType.toString());\n            }\n        }\n\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}