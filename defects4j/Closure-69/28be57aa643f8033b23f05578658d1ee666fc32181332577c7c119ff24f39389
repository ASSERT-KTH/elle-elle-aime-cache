{
    "generation": "  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      if (functionType.hasTypeInfo() && functionType.getTypeOfThis() != null) {\n        // Check if the function is called with the correct 'this' type.\n        Node grandparent = n.getParent().getParent();\n        if (!validCallToFunction(t, n, grandparent)) {\n          report(t, n, THIS_TYPE_NOT_CALLABLE, childType.toString());\n        }\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }\n\n  private boolean validCallToFunction(NodeTraversal t, Node n, Node grandparent) {\n    if (grandparent == null) {\n      return false;\n    }\n\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!(childType instanceof FunctionType)) {\n      return false;\n    }\n\n    FunctionType functionType = (FunctionType) childType;\n    if (functionType.getTypeOfThis() == null) {\n      return true;\n    }\n\n    if (grandparent.isGetProp() || grandparent.isGetElem()) {\n      Node qualifiedCallTarget = grandparent.getFirstChild();\n      JSType qualifiedType = getJSType(qualifiedCallTarget).restrictByNotNullOrUndefined();\n      if (functionType.getTypeOfThis().isSubtype(qualifiedType)) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}