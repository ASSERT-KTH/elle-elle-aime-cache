{
    "generation": "private void visitCall(NodeTraversal t, Node n) {\n  Node child = n.getFirstChild();\n  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n  if (!childType.canBeCalled()) {\n    report(t, n, NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  // A couple of types can be called as if they were functions.\n  // If it is a function type, then validate parameters.\n  if (childType instanceof FunctionType) {\n    FunctionType functionType = (FunctionType) childType;\n\n    boolean isExtern = false;\n    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n    if (functionJSDocInfo != null) {\n      String sourceName = functionJSDocInfo.getSourceName();\n      CompilerInput functionSource = compiler.getInput(sourceName);\n      isExtern = functionSource.isExtern();\n    }\n\n    // Non-native constructors should not be called directly\n    // unless they specify a return type and are defined\n    // in an extern.\n    if (functionType.isConstructor() &&\n        !functionType.isNativeObjectType() &&\n        (functionType.getReturnType().isUnknownType() ||\n         functionType.getReturnType().isVoidType() ||\n         !isExtern)) {\n      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n    }\n\n    // Check if the function has an explicit 'this' type\n    JSType thisType = functionType.getThisType();\n    if (thisType != null && !thisType.isUnknownType()) {\n      // Determine the 'this' value for the call\n      Node callee = child;\n      JSType actualThisType = getThisTypeForCall(callee);\n\n      // Check if the actual 'this' type matches the expected 'this' type\n      if (!thisType.isAssignableFrom(actualThisType)) {\n        report(t, n, \"ThisTypeMismatch\", functionType.toString(), actualThisType.toString());\n      }\n    }\n\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n  } else {\n    ensureTyped(t, n);\n  }\n\n  // TODO: Add something to check for calls of RegExp objects, which is not\n  // supported by IE.  Either say something about the return type or warn\n  // about the non-portability of the call or both.\n}\n\nprivate JSType getThisTypeForCall(Node callee) {\n  // Determine the 'this' value based on the callee node\n  if (callee.isGetProp()) {\n    // Called as a method of an object\n    Node receiver = callee.getFirstChild();\n    return getJSType(receiver);\n  } else if (callee.isGetElem()) {\n    // Called as a method via array access\n    Node receiver = callee.getFirstChild();\n    return getJSType(receiver);\n  } else {\n    // Called directly, 'this' will be the global object\n    return getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}