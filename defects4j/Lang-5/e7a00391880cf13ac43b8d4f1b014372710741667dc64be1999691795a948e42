{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     * </pre>\n     *\n     * <p>(#) The behavior of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        if (len == 0 || str.charAt(0) == '_' && len < 3 || len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        String language = \"\", country = \"\", variant = \"\";\n        int underlineCount = 0;\n\n        for (int i = 0; i < len; i++) {\n            final char ch = str.charAt(i);\n\n            if (underlineCount == 0) { // Parsing language\n                if (ch == '_') {\n                    if (language.length() == 0) {\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                    underlineCount++;\n                } else if (Character.isLowerCase(ch)) {\n                    language += ch;\n                } else {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n            } else if (underlineCount == 1) { // Parsing country\n                if (ch == '_') {\n                    if (country.length() != 2) {\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                    underlineCount++;\n                } else if (Character.isUpperCase(ch)) {\n                    country += ch;\n                } else {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n            } else { // Parsing variant\n                variant += ch;\n            }\n        }\n\n        if (underlineCount == 0 && language.length() > 0) {\n            return new Locale(language);\n        } else if (underlineCount == 1 && country.length() == 2) {\n            return new Locale(language, country);\n        } else if (underlineCount == 2 && variant.length() > 0) {\n            return new Locale(language, country, variant);\n        } else {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}