{
    "generation": "/**\n * <p>Converts a String to a Locale.</p>\n *\n * <p>This method takes the string format of a locale and creates the\n * locale object from it.</p>\n *\n * <pre>\n *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")\n *   LocaleUtils.toLocale(\"_GB\")         = new Locale(\"\", \"GB\")\n *   LocaleUtils.toLocale(\"_GB_P\")       = new Locale(\"\", \"GB\", \"P\")\n *   LocaleUtils.toLocale(\"_GB_POSIX\")   = new Locale(\"\", \"GB\", \"POSIX\")\n * </pre>\n *\n * <p>This method validates the input strictly.\n * The language code must be lowercase if present.\n * The country code must be uppercase if present.\n * The separator must be an underscore.\n * The length must be correct.\n * </p>\n *\n * @param str  the locale String to convert, null returns null\n * @return a Locale, null if null input\n * @throws IllegalArgumentException if the string is an invalid format\n */\npublic static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    if (str.charAt(0) == '_') {\n        final char ch1 = str.charAt(1);\n        if (Character.isUpperCase(ch1)) {\n            if (len == 2) {\n                return new Locale(\"\", str.substring(1, 2));\n            }\n            if (len < 5 || str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \". Must be at least 5 chars if starts with underscore\");\n            }\n            final char ch3 = str.charAt(3);\n            final char ch4 = str.charAt(4);\n            if (Character.isUpperCase(ch3) && Character.isUpperCase(ch4)) {\n                if (len == 5) {\n                    return new Locale(\"\", str.substring(1, 3));\n                }\n                if (len < 7 || str.charAt(5) != '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(\"\", str.substring(1, 3), str.substring(6));\n            }\n        }\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str + \". Must be letter if starts with underscore\");\n    }\n\n    final char ch0 = str.charAt(0);\n    final char ch1 = str.charAt(1);\n    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 2) {\n        return new Locale(str);\n    }\n    if (len < 5 || str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch3 = str.charAt(3);\n    if (ch3 == '_') {\n        return new Locale(str.substring(0, 2), \"\", str.substring(4));\n    }\n    final char ch4 = str.charAt(4);\n    if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 5) {\n        return new Locale(str.substring(0, 2), str.substring(3, 5));\n    }\n    if (len < 7 || str.charAt(5) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}