{
    "generation": "/**\n * <p>Converts a String to a Locale.</p>\n *\n * <p>This method takes the string format of a locale and creates the\n * locale object from it.</p>\n *\n * <pre>\n *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n * </pre>\n *\n * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n * Thus, the result from getVariant() may vary depending on your JDK.</p>\n *\n * <p>This method validates the input strictly.\n * The language code must be lowercase.\n * The country code must be uppercase.\n * The separator must be an underscore.\n * The length must be correct.\n * </p>\n *\n * @param str  the locale String to convert, null returns null\n * @return a Locale, null if null input\n * @throws IllegalArgumentException if the string is an invalid format\n */\npublic static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n    final int len = str.length();\n    final int underscoreIdx = len > 0 && str.charAt(0) == '_'? 0 : 2;\n    if (underscoreIdx == 0 && len < 3 || underscoreIdx == 2 && len < 5) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char firstChar;\n    if (underscoreIdx == 2) {\n        firstChar = str.charAt(0);\n        if (!Character.isLowerCase(str.charAt(1))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    } else {\n        firstChar = 'e'; // only used when str starts with '_';\n    }\n    final String languange = underscoreIdx > 0 && Character.isLowerCase(firstChar)?\n            str.substring(0, underscoreIdx) : \"\";\n    String rest = str.substring(Math.min(underscoreIdx, len));\n    if (!rest.isEmpty()) {\n        if (rest.charAt(0)!= '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (rest.length() <= 1 ||!str.startsWith(\"_\")) {\n            rest = \"_\" + (languange.isEmpty()? rest : rest.replaceFirst(\"_\", \"\"));\n            final String lang = new Locale(languange).getLanguage().isEmpty()\n                   ? new Locale(firstChar < 'A' || languange.length() > 1? \"\" : languange, \"\", str.substring(min(len, underscoreIdx > 3? 7 : rest.length() == 7? underscoreIdx + rest.length(): underscoreIdx == 7? underscoreIdx +4: underscoreIdx + underscoreIdx)).toString()\n                        : str.startsWith(languange.isEmpty() && underscoreIdx > 4?\"_gb_\".toUpperCase(LocalDefault.get()): underscoreIdx > str.indexOf(languange.endsWith(\"posIX\")&&languange.length()%4!= 0?\",_Pos\" : (!str.endsWith(\".Posisx\")&languange.endsWith(\"_Ps\") ||\n                           !new Locale(secondIsNotBiggerLen).toString().substring(16).toUpperCase(LowerD).endsWith(\".A\")   &&languange==\"P0IX\")    ? (\"\"): languanges.toString()))\n                               ?\n                                Character.toString(Character\n                                        // language of en is hardcoded as lower \n                                        ==languang?Char\n                                   != langu .is?\n                                   ,en,fr,:upper,g\n// locale format from the class  with to locale:\n                    // in JDK1:\n// \n    locale\n)\n}\n    ) \nthrow  \n    ?\n     locale :   en  e   \n,? languanges.undexOf? locale, underscoreIndx.\n    \n   \n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}