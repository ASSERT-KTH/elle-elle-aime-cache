{
    "generation": "/**\n * Returns the options with a long name starting with the name specified.\n * \n * @param opt the partial name of the option\n * @return the options matching the partial name specified, or an empty list if none matches\n * @since 1.3\n */\npublic List<String> getMatchingOptions(String opt)\n{\n    opt = Util.stripLeadingHyphens(opt);\n    \n    List<String> matchingOpts = new ArrayList<String>();\n\n    // for a perfect match return the single option only\n\n    for (String longOpt : longOpts.keySet())\n    {\n        if (longOpt.equals(opt) || (longOpt.startsWith(opt) &&!hasExactMatch(longOpt, opt)))\n        {\n            matchingOpts.add(longOpt);\n        }\n    }\n    \n    // If we find an exact match, remove all the other options from the list\n    if (matchingOpts.size() > 1) {\n        String exactMatch = null;\n        for (String optName : matchingOpts) {\n            if (optName.equals(opt)) {\n                exactMatch = optName;\n                break;\n            }\n        }\n        if (exactMatch!= null) {\n            matchingOpts.clear();\n            matchingOpts.add(exactMatch);\n        }\n    }\n    \n    return matchingOpts;\n}\n\n// Helper function to check if there's another option that starts with the longOpt\nprivate boolean hasExactMatch(String longOpt, String opt) {\n    for (String otherOpt : longOpts.keySet()) {\n        if (!otherOpt.equals(longOpt) && otherOpt.startsWith(longOpt) && otherOpt.length() > longOpt.length()) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}