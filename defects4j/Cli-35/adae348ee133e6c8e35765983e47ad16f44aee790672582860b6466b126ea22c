{
    "generation": "/**\n * Returns the options with a long name starting with the name specified.\n * If an exact match is found, only that option is returned; otherwise, \n * all options matching the partial name specified are returned.\n * \n * @param opt the partial name of the option\n * @return the options matching the partial name specified, or an empty list if none matches\n * @since 1.3\n */\npublic List<String> getMatchingOptions(String opt)\n{\n    opt = Util.stripLeadingHyphens(opt);\n    \n    List<String> matchingOpts = new ArrayList<String>();\n\n    // Check for an exact match first\n    if (longOpts.containsKey(opt)) {\n        matchingOpts.add(opt);\n    } else {\n        // if no exact match, find all options starting with the partial name\n        for (String longOpt : longOpts.keySet())\n        {\n            if (longOpt.startsWith(opt) &&!matchingOpts.contains(longOpt))\n            {\n                matchingOpts.add(longOpt);\n            }\n        }\n    }\n    \n    // If multiple options match and one is a prefix of another, throw AmbiguousOptionException\n    if (matchingOpts.size() > 1) {\n        for (String match : matchingOpts) {\n            for (String otherMatch : matchingOpts) {\n                if (!match.equals(otherMatch) && otherMatch.startsWith(match)) {\n                    throw new AmbiguousOptionException(\"Ambiguous option: '\" + opt + \"'  (could be: \" + String.join(\", \", matchingOpts) + \")\");\n                }\n            }\n        }\n    }\n    \n    return matchingOpts;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}