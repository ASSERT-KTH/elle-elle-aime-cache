{
    "generation": "/**\n * Returns the options with a long name starting with the name specified.\n * If an exact match is found, returns a list containing only the exact match.\n * Otherwise, returns a list of options matching the partial name specified.\n * \n * @param opt the partial name of the option\n * @return the options matching the partial name specified, or an empty list if none matches\n * @since 1.3\n */\npublic List<String> getMatchingOptions(String opt)\n{\n    opt = Util.stripLeadingHyphens(opt);\n    \n    List<String> matchingOpts = new ArrayList<String>();\n\n    // Check for an exact match first\n    if (longOpts.containsKey(opt)) {\n        matchingOpts.add(opt);\n    } else {\n        // for partial matches return all matching options\n        for (String longOpt : longOpts.keySet())\n        {\n            if (longOpt.startsWith(opt) &&!longOpt.equals(opt)) // exclude the exact match already handled\n            {\n                matchingOpts.add(longOpt);\n            }\n        }\n    }\n    \n    // If multiple matches are found and not all are exact matches, \n    // the user likely intended an exact match, so filter to exact matches only\n    if (matchingOpts.size() > 1) {\n        matchingOpts.removeIf(match ->!opt.equals(match));\n    }\n    \n    return matchingOpts;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}