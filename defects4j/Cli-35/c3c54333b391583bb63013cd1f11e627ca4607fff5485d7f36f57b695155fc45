{
    "generation": "/**\n * Returns the options with a long name starting with the name specified.\n * If an exact match is found, returns only that option. Otherwise, returns all matching options.\n * \n * @param opt the partial name of the option\n * @return the options matching the partial name specified, or an empty list if none matches\n * @since 1.3\n */\npublic List<String> getMatchingOptions(String opt)\n{\n    opt = Util.stripLeadingHyphens(opt);\n    \n    List<String> matchingOpts = new ArrayList<String>();\n\n    // Check for an exact match first\n    if (longOpts.containsKey(opt)) {\n        // If an exact match is found, return only that option\n        matchingOpts.add(opt);\n    } else {\n        // No exact match, return all options starting with the specified name\n        for (String longOpt : longOpts.keySet())\n        {\n            if (longOpt.startsWith(opt))\n            {\n                matchingOpts.add(longOpt);\n            }\n        }\n    }\n    \n    // If multiple options match and the input is an exact prefix of more than one option, \n    // filter out options that have another option as a prefix\n    if (matchingOpts.size() > 1) {\n        List<String> filteredOpts = new ArrayList<>();\n        for (String match : matchingOpts) {\n            boolean isPrefixOfOther = false;\n            for (String otherMatch : matchingOpts) {\n                if (match!= otherMatch && otherMatch.startsWith(match)) {\n                    isPrefixOfOther = true;\n                    break;\n                }\n            }\n            if (!isPrefixOfOther) {\n                filteredOpts.add(match);\n            }\n        }\n        matchingOpts = filteredOpts;\n    }\n    \n    return matchingOpts;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}