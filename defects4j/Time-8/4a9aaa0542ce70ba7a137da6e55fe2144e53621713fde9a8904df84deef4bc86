{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Minutes must be positive when hours are positive\");\n    }\n    if (hoursOffset < 0 && minutesOffset > 0) {\n        throw new IllegalArgumentException(\"Minutes must be negative when hours are negative\");\n    }\n\n    int offset = FieldUtils.safeAdd(FieldUtils.safeMultiply(hoursOffset, DateTimeConstants.MILLIS_PER_HOUR), FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE));\n    if (offset > 23 * DateTimeConstants.MILLIS_PER_HOUR + 59 * DateTimeConstants.MILLIS_PER_MINUTE || offset < -23 * DateTimeConstants.MILLIS_PER_HOUR - 59 * DateTimeConstants.MILLIS_PER_MINUTE) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}