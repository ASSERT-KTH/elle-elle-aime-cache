{
    "generation": "    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        if (minutesOffset < -59 || minutesOffset > 59) { // Updated to allow negative minutes\n            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n        }\n        if (hoursOffset > 0 && minutesOffset < 0) { // Disallow negative minutes when hours are positive\n            throw new IllegalArgumentException(\"Negative minutes not allowed when hours are positive: \" + minutesOffset);\n        }\n\n        int offset = 0;\n        try {\n            int totalMinutes = hoursOffset * 60 + minutesOffset; // Combine hours and minutes properly\n            if (totalMinutes < -24 * 60 || totalMinutes > 24 * 60 - 1) { // Ensure total offset does not exceed +/- 23:59\n                throw new IllegalArgumentException(\"Offset is out of range: \" + totalMinutes);\n            }\n            offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n        } catch (ArithmeticException ex) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        return forOffsetMillis(offset);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}