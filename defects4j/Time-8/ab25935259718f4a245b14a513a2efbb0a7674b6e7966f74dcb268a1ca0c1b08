{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    if (hoursOffset >= 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Minutes must be positive when hours are positive: \" + minutesOffset);\n    }\n    if (hoursOffset <= 0 && minutesOffset > 0 && (hoursOffset != 0 || minutesOffset != 0)) {\n        throw new IllegalArgumentException(\"Minutes must be negative when hours are negative: \" + minutesOffset);\n    }\n    \n    int offset;\n    try {\n        offset = FieldUtils.safeMultiply(hoursOffset, DateTimeConstants.MILLIS_PER_HOUR);\n        offset = FieldUtils.safeAdd(offset, FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE));\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\", ex);\n    }\n    \n    if (offset > DateTimeConstants.MILLIS_PER_HOUR * 23 + DateTimeConstants.MILLIS_PER_MINUTE * 59) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    if (offset < -DateTimeConstants.MILLIS_PER_HOUR * 23 - DateTimeConstants.MILLIS_PER_MINUTE * 59) {\n        throw new IllegalArgumentException(\"Offset is too small\");\n    }\n    \n    return forOffsetMillis(offset);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}