{
    "generation": "    protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n            BeanDescription beanDesc, CreatorCollector creators,\n            CreatorCandidate candidate)\n        throws JsonMappingException\n    {\n        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:\n        if (1!= candidate.paramCount()) {\n            // Ok: for delegates, we want one and exactly one parameter without\n            // injection AND without name\n            int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n            if (oneNotInjected >= 0) {\n                // getting close; but most not have name\n                if (candidate.paramName(oneNotInjected) == null) {\n                    _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                    return;\n                }\n            }\n            _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n            return;\n        }\n        AnnotatedParameter param = candidate.parameter(0);\n        JacksonInject.Value injectId = candidate.injection(0);\n        PropertyName explicitParamName = candidate.explicitParamName(0);\n        PropertyName namingStrategyParamName = getPropertyName(ctxt, implicitName(explicitParamName));\n        BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n\n        // If there's injection or explicit name, should be properties-based\n        boolean useProps = namingStrategyParamName!= null || (injectId!= null);\n        if (useProps) {\n            SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                constructCreatorProperty(ctxt, beanDesc, \n                    namingStrategyParamName!= null? namingStrategyParamName : explicitParamName, 0,\n                    param, injectId)\n            };\n            creators.addPropertyCreator(candidate.creator(), true, properties);\n        } else {\n            throw new JsonMappingException.from(ctxt,\n                    MSG_INVALID_CREATOR_DEFINITION_NAME);\n        }\n\n        paramDef.removeConstructors() ;\n    }\n\n    private property getPropertyName(ctxt,name){\n        // code for method implementation \n        // logic is based on 2 lines \n        // the lines were above this fucntion in parent file \n        // get implicit name  with `getPropertyName`\n        candidate.findImplicitParamName(xxx)\n    }\n            \n    private String implicit(String explicitName) {\n                \n    // method to follow 25 -May  \n        // this 2 meths were removed so the data type can vary  \n         \n        // follow this log \n        // [JacksonDatabind 2552 ], 14 Nov 2018 )\n                \n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}