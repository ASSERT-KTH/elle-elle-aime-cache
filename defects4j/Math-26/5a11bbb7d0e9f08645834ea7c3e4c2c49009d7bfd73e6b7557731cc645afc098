{
    "generation": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n    throws FractionConversionException\n{\n    long overflow = Integer.MAX_VALUE;\n\n    // Check if value is close enough to an integer without iterations\n    long intValue = (long)FastMath.rint(value);\n    if (FastMath.abs(intValue - value) < epsilon) {\n        this.numerator = intValue > overflow ? Integer.MAX_VALUE : (int) intValue;\n        this.denominator = 1;\n        return;\n    }\n\n    double r0 = value;\n    long a0 = (long)FastMath.floor(r0);\n\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n\n    long p2 = 0;\n    long q2 = 1;\n\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        double r1 = 1.0 / (r0 - a0);\n        long a1 = (long)FastMath.floor(r1);\n        p2 = a1 * p1 + p0;\n        q2 = a1 * q1 + q0;\n\n        // Check for overflow\n        if (p2 > overflow || q2 > overflow) {\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n            stop = true;\n        }\n\n        double convergent = (double)p2 / (double)q2;\n        // Check if convergent is close enough to value or if maxIterations or maxDenominator is reached\n        if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            if (n >= maxIterations || q2 >= maxDenominator) {\n                throw new FractionConversionException(value, maxIterations);\n            } else {\n                this.numerator = (int) p2;\n                this.denominator = (int) q2;\n            }\n            stop = true;\n        }\n    } while (!stop);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}