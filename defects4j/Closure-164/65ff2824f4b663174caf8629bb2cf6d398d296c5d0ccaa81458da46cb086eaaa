{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    int thisParamCount = 0;\n    int thatParamCount = 0;\n\n    while (thisParam != null || thatParam != null) {\n        if (thisParam == null) {\n            // \"that\" has more parameters than \"this\", but they are optional\n            if (!thatParam.isOptional()) {\n                return false;\n            }\n            thatParam = thatParam.getNext();\n            thatParamCount++;\n            continue;\n        }\n        if (thatParam == null) {\n            // \"this\" has more parameters than \"that\", but they are required\n            if (!thisParam.isOptional()) {\n                return false;\n            }\n            thisParam = thisParam.getNext();\n            thisParamCount++;\n            continue;\n        }\n\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n\n        if (thisParamType != null) {\n            if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        }\n\n        boolean thisIsVarArgs = thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n\n        // If both methods have varargs, we can't have more parameters in the superclass method\n        if (thisIsVarArgs && thatIsVarArgs) {\n            // both var_args indicates the end\n            thisParam = null;\n            thatParam = null;\n        } else {\n            // don't advance if we have variable arguments\n            if (!thisIsVarArgs) {\n                thisParam = thisParam.getNext();\n                thisParamCount++;\n            }\n            if (!thatIsVarArgs) {\n                thatParam = thatParam.getNext();\n                thatParamCount++;\n            }\n        }\n    }\n\n    // Ensure all non-optional parameters in \"that\" are matched by \"this\"\n    if (thatParamCount > thisParamCount) {\n        thatParam = that.parameters.getFirstChild();\n        for (int i = 0; i < thatParamCount; i++) {\n            if (!thatParam.isOptional() && i >= thisParamCount) {\n                return false;\n            }\n            thatParam = thatParam.getNext();\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}