{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thatParamType == null || thisParamType != null && !thatParamType.isSubtype(thisParamType)) {\n      // If \"thatParamType\" is null or \"thisParamType\" is not a subtype of \"thatParamType\", return false.\n      return false;\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // \"that\" can't be a supertype, because it's missing a required argument.\n    // This check is correct, but it needs to be adjusted for variable arguments.\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs || thisIsVarArgs) { // Always advance \"thatParam\" if \"thisParam\" is variable arguments.\n      thatParam = thatParam.getNext();\n    }\n\n    // both var_args indicates the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  // \"that\" can't be a supertype, because it's missing a required argument.\n  // This check needs to be adjusted for cases where all parameters of \"that\" are optional.\n  if (thatParam != null) {\n    while (thatParam != null) {\n      if (!thatParam.isOptionalArg()) {\n        // If \"that\" has a non-optional argument that \"this\" doesn't have, return false.\n        return false;\n      }\n      thatParam = thatParam.getNext();\n    }\n  }\n\n  // If none of the above conditions failed, \"this\" is a subtype of \"that\".\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}