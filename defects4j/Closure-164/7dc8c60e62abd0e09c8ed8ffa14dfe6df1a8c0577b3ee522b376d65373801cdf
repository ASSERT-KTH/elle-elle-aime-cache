{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  // If this.paramType[i] is required, then that.paramType[i] is required.\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thisParam != null || thatParam != null) {\n    JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;\n    JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;\n\n    if (thisParamType != null) {\n      if (thatParamType == null) {\n        // 'that' has fewer parameters than 'this', which is not allowed\n        return false;\n      }\n      if (!thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    } else {\n      if (thatParamType != null) {\n        // 'that' has more parameters than 'this', but only if 'that' parameters are optional\n        // In our type system, we might allow this, but need to check if 'that' parameters are optional\n        // For now, assuming that extra parameters in 'that' are optional\n        // TODO: Implement proper checking for optional parameters\n        continue;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();\n\n    // don't advance if we have variable arguments\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    // both var_args indicates the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}