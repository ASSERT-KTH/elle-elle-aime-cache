{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    // If this.paramType[i] is required, then that.paramType[i] is required.\n    // We need to ensure that 'other' can accept all arguments that 'this' can.\n\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    while (thisParam != null && thatParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n\n        if (thisParamType != null) {\n            if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        }\n\n        boolean thisIsVarArgs = thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n\n        // If 'this' has varargs, it can accept any number of additional arguments.\n        // 'that' must also have varargs or have at least as many parameters as 'this'.\n        if (thisIsVarArgs) {\n            if (!thatIsVarArgs) {\n                // 'that' must have at least as many parameters as 'this'\n                Node nextThisParam = thisParam.getNext();\n                Node nextThatParam = thatParam.getNext();\n                while (nextThisParam != null) {\n                    if (nextThatParam == null) {\n                        return false;\n                    }\n                    nextThisParam = nextThisParam.getNext();\n                    nextThatParam = nextThatParam.getNext();\n                }\n            }\n        } else {\n            if (thatIsVarArgs) {\n                // 'that' has varargs, which is acceptable as it can accept more arguments.\n            } else {\n                // Both have fixed arguments; proceed to next parameters.\n            }\n        }\n\n        // Don't advance if we have variable arguments\n        if (!thisIsVarArgs) {\n            thisParam = thisParam.getNext();\n        }\n        if (!thatIsVarArgs) {\n            thatParam = thatParam.getNext();\n        }\n\n        // Both var_args indicates the end\n        if (thisIsVarArgs && thatIsVarArgs) {\n            thisParam = null;\n            thatParam = null;\n        }\n    }\n\n    // After processing parameters, ensure that 'this' doesn't have required parameters\n    // that 'that' doesn't have.\n    if (thisParam != null) {\n        // 'this' has more parameters than 'that'\n        if (!thisParam.isVarArgs()) {\n            // 'this' has required parameters that 'that' doesn't have\n            return false;\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}