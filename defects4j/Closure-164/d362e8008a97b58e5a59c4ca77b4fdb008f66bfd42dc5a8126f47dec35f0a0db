{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // In theory, the \"required-ness\" should work in the other direction as\n    // well. In other words, if we have\n    //\n    // function f(number, number) {}\n    // function g(number) {}\n    //\n    // Then f *should* not be a subtype of g, and g *should* not be\n    // a subtype of f. But in practice, we do not implement it this way.\n    // We want to support the use case where you can pass g where f is\n    // expected, and pretend that g ignores the second argument.\n    // That way, you can have a single \"no-op\" function, and you don't have\n    // to create a new no-op function for every possible type signature.\n    //\n    // So, in this case, g < f, but f !< g\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    int thisCount = 0;\n    int thatCount = 0;\n    while (thisParam != null || thatParam != null) {\n      if (thisParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        if (thisParamType != null) {\n          if (thatParam == null || thatParamType.getJSType() == null ||\n              !thatParamType.isSubtype(thisParamType)) {\n            return false;\n          }\n        }\n        thisCount++;\n        thisParam = thisParam.getNext();\n      }\n\n      if (thatParam != null) {\n        JSType thatParamType = thatParam.getJSType();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n        thatCount++;\n        if (!thatIsVarArgs && thatParam.getNext() == null && thisParam != null) {\n          return false;\n        }\n        thatParam = thatParam.getNext();\n      }\n    }\n\n    // Ensure both methods have the same number of parameters or the additional\n    // parameters in the overriding method are optional, with the exception\n    // of var_args handling\n    if (thisCount < thatCount && !thisParam.isVarArgs()) {\n        return false;\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}