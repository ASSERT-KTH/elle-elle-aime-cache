{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // Check return type (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null || thatParam != null) {\n        // If 'that' has more parameters, it's not a supertype\n        if (thisParam == null && thatParam != null) {\n            return false;\n        }\n\n        // If 'this' has more parameters, it can still be a subtype\n        if (thisParam != null && thatParam == null) {\n            return true;\n        }\n\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n\n        // Check parameter type (contravariant)\n        if (thisParamType != null && thatParamType != null &&\n            !thatParamType.isSubtype(thisParamType)) {\n            return false;\n        }\n\n        boolean thisIsVarArgs = thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n\n        // If both are var_args, we're done\n        if (thisIsVarArgs && thatIsVarArgs) {\n            return true;\n        }\n\n        // Move to next parameter if not var_args\n        if (!thisIsVarArgs) {\n            thisParam = thisParam.getNext();\n        }\n        if (!thatIsVarArgs) {\n            thatParam = thatParam.getNext();\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}