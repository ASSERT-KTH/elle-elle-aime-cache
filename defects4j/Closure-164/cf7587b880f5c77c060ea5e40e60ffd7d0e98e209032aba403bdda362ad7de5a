{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    boolean thisHasVarArgs = false;\n    boolean thatHasVarArgs = false;\n\n    while (thisParam != null || thatParam != null) {\n        if (thisParam == null && !thatHasVarArgs) {\n            return false; // \"that\" has more parameters than \"this\"\n        }\n        if (thatParam == null && !thisHasVarArgs) {\n            return false; // \"this\" has more parameters than \"that\"\n        }\n\n        JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;\n        JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;\n\n        if (thisParamType != null && thatParamType != null) {\n            if (!thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        }\n\n        thisHasVarArgs = thisParam != null && thisParam.isVarArgs();\n        thatHasVarArgs = thatParam != null && thatParam.isVarArgs();\n\n        if (thisHasVarArgs && thatHasVarArgs) {\n            break; // Both have varargs, so we're done comparing\n        }\n\n        if (!thisHasVarArgs) {\n            thisParam = thisParam.getNext();\n        }\n        if (!thatHasVarArgs) {\n            thatParam = thatParam.getNext();\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}