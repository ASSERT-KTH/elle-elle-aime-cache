{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null || thatParam != null) {\n        JSType thisParamType = (thisParam != null) ? thisParam.getJSType() : null;\n        JSType thatParamType = (thatParam != null) ? thatParam.getJSType() : null;\n\n        if (thisParamType != null) {\n            // If \"this\" has a parameter type, ensure \"that\" is a supertype.\n            if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        } else if (thatParamType != null) {\n            // If \"that\" has a parameter type and \"this\" is null, then it's not a subtype.\n            return false;\n        }\n\n        boolean thisIsVarArgs = (thisParam != null) && thisParam.isVarArgs();\n        boolean thatIsVarArgs = (thatParam != null) && thatParam.isVarArgs();\n\n        if (thisIsVarArgs && thatIsVarArgs) {\n            // If both are varargs, we're at the end.\n            return true;\n        }\n\n        if (!thisIsVarArgs) {\n            thisParam = (thisParam != null) ? thisParam.getNext() : null;\n        }\n        if (!thatIsVarArgs) {\n            thatParam = (thatParam != null) ? thatParam.getNext() : null;\n        }\n\n        // If one list has ended but the other has not, \"this\" cannot be a subtype.\n        if ((thisParam == null && thatParam != null) ||\n            (thatParam == null && thisParam != null)) {\n            return false;\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}