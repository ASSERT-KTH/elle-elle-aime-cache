{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // Check if this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Check if the parameters follow contravariance rules\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thisParam != null || thatParam != null) { // Ensure both parameter lists are handled\n    JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;\n    JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;\n\n    boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();\n\n    // If \"that.param\" is null but \"this.param\" is required, fail (missing required argument)\n    if (thisParamType != null && !thisIsVarArgs && thatParamType == null) {\n      return false;\n    }\n\n    // Check contravariance: that.paramType[i] <: this.paramType[i]\n    if (thatParamType != null && !thatParamType.isSubtype(thisParamType)) {\n      return false;\n    }\n\n    // Don't advance if we're at varargs; otherwise, step forward\n    if (!thisIsVarArgs) {\n      thisParam = thisParam != null ? thisParam.getNext() : null;\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam != null ? thatParam.getNext() : null;\n    }\n\n    // Break if both are varargs, as there are no more checks to perform\n    if (thisIsVarArgs && thatIsVarArgs) {\n      break;\n    }\n  }\n\n  // Ensure \"that\" doesn't miss any required arguments\n  if (thisParam != null && !thisParam.isOptionalArg() && !thisParam.isVarArgs()) {\n    return false;\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}