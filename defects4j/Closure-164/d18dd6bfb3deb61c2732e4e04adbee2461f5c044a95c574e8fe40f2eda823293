{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;\n\n        // If \"this\" has a parameter but \"that\" does not, \"that\" is not a subtype\n        if (thatParam == null) {\n            return false;\n        }\n\n        // Check contravariance for the parameter types\n        if (thisParamType != null && (thatParamType == null || !thatParamType.isSubtype(thisParamType))) {\n            return false;\n        }\n\n        boolean thisIsVarArgs = thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n\n        // If both parameters are varargs, we can stop checking\n        if (thisIsVarArgs && thatIsVarArgs) {\n            return true;\n        }\n\n        // Move to the next parameter if \"this\" parameter is not varargs\n        if (!thisIsVarArgs) {\n            thisParam = thisParam.getNext();\n        }\n\n        // Move to the next parameter if \"that\" parameter is not varargs\n        if (!thatIsVarArgs) {\n            thatParam = thatParam.getNext();\n        }\n    }\n\n    // If \"that\" has more parameters than \"this\", \"that\" is not a subtype\n    if (thatParam != null) {\n        return false;\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}