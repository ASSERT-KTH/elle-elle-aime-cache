{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // Check return type (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    boolean thisIsVarArgs = false;\n    boolean thatIsVarArgs = false;\n\n    while (true) {\n        if (thisParam == null && thatParam == null) {\n            break;\n        }\n\n        JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;\n        JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;\n\n        if (thisParam != null) {\n            thisIsVarArgs = thisParam.isVarArgs();\n        }\n        if (thatParam != null) {\n            thatIsVarArgs = thatParam.isVarArgs();\n        }\n\n        if (thisIsVarArgs && thatIsVarArgs) {\n            // If both are varargs, we can stop comparing\n            break;\n        }\n\n        if (thisParam == null && !thatIsVarArgs) {\n            // 'this' has fewer parameters than 'that'\n            return false;\n        }\n\n        if (thatParam == null && !thisIsVarArgs) {\n            // 'that' has fewer parameters than 'this'\n            return false;\n        }\n\n        if (thisParamType != null && thatParamType != null) {\n            if (!thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        }\n\n        if (!thisIsVarArgs) {\n            thisParam = thisParam.getNext();\n        }\n        if (!thatIsVarArgs) {\n            thatParam = thatParam.getNext();\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}