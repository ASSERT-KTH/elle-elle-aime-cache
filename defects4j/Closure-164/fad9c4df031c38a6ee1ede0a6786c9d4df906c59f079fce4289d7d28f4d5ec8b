{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam!= null && thatParam!= null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thisParamType!= null) {\n      if (thatParamType == null ||\n         !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    if (!thisIsVarArgs &&!thatIsVarArgs) {\n      // Both are required, move to the next parameters\n      thisParam = thisParam.getNext();\n      thatParam = thatParam.getNext();\n    } else if (thisIsVarArgs && thatIsVarArgs) {\n      // Both are varargs, stop checking parameters\n      break;\n    } else if (thisIsVarArgs) {\n      // that has more required parameters, so it's not a supertype\n      return false;\n    } else {\n      // this has more required parameters, move to the next parameter in this\n      thisParam = thisParam.getNext();\n    }\n  }\n\n  // Check if that has more required parameters\n  while (thatParam!= null &&!thatParam.isVarArgs()) {\n    thatParam = thatParam.getNext();\n  }\n\n  return thatParam == null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}