{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    // If this.paramType[i] is required, then that.paramType[i] is required.\n\n    // We need to ensure that 'that' function can accept all arguments that\n    // 'this' function can accept.\n\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    while (thisParam != null && thatParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n\n        if (thisParamType != null) {\n            if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        }\n\n        boolean thisIsVarArgs = thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n\n        // If both are varargs, consider them at the end\n        if (!thisIsVarArgs) {\n            thisParam = thisParam.getNext();\n        }\n        if (!thatIsVarArgs) {\n            thatParam = thatParam.getNext();\n        }\n\n        if (thisIsVarArgs && thatIsVarArgs) {\n            thisParam = null;\n            thatParam = null;\n        }\n    }\n\n    // After processing params, ensure that 'that' doesn't have more required params\n    // than 'this'. If 'that' has more required params, it cannot be a supertype.\n\n    // If 'this' has more params left, and they are not varargs, then 'that' cannot be a supertype.\n    if (thisParam != null && !thisParam.isVarArgs()) {\n        return false;\n    }\n\n    // If 'that' has more params left, and they are required, then 'that' cannot be a supertype.\n    if (thatParam != null && !thatParam.isVarArgs()) {\n        return false;\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}