{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  //\n  // If this.paramType[i] is required,\n  // then that.paramType[i] is required.\n  //\n  // Check if \"that\" has at least as many required parameters as \"this\".\n  int requiredParamsThis = getRequiredParameterCount();\n  int requiredParamsThat = that.getRequiredParameterCount();\n  if (requiredParamsThat < requiredParamsThis) {\n    return false;\n  }\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam!= null && thatParam!= null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thisParamType!= null) {\n      if (thatParamType == null ||\n         !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // don't advance if we have variable arguments\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    // both var_args indicates the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  // If \"this\" has more parameters than \"that\", but \"this\" has a varargs \n  // parameter, it's still a subtype.\n  if (thisParam!= null && thisParam.isVarArgs()) {\n    return true;\n  }\n\n  // If \"this\" has more parameters than \"that\" and no varargs, it's not a subtype.\n  return thisParam == null;\n}\n\n// Helper method to get the number of required parameters.\nprivate int getRequiredParameterCount() {\n  int count = 0;\n  Node param = parameters.getFirstChild();\n  while (param!= null &&!param.isVarArgs()) {\n    count++;\n    param = param.getNext();\n  }\n  return count;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}