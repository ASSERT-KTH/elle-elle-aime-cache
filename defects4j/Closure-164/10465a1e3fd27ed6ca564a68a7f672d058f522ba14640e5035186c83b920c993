{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null || thatParam != null) {\n      if (thisParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        if (thatParam != null) {\n          JSType thatParamType = thatParam.getJSType();\n          if (thisParamType != null && (thatParamType == null || !thatParamType.isSubtype(thisParamType))) {\n            return false;\n          }\n        } else if (!thisParam.isVarArgs() && thisParamType != null && !thisParamType.isUnknownType()) {\n          return false; // `that` is missing a required parameter.\n        }\n\n        thisParam = thisParam.getNext();\n      } else if (thatParam != null && !thatParam.isVarArgs()) {\n         // thisParam is null, but thatParam is not null and is not a var_args.\n        return false;\n      }\n      if (thatParam != null) {\n        thatParam = thatParam.getNext();\n      }\n    }\n\n    return true;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}