{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    int thisParamCount = 0;\n    int thatParamCount = 0;\n\n    while (thisParam != null && thatParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n        if (thisParamType != null) {\n            if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        }\n\n        boolean thisIsVarArgs = thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n\n        // If \"this\" has a required parameter, \"that\" must also have a required parameter\n        if (!thisParam.isOptionalArg() && thatParam.isOptionalArg()) {\n            return false;\n        }\n\n        // \"that\" can't be a supertype, because it's missing a required argument.\n        if (thatParam.isOptionalArg() && !thisParam.isOptionalArg()) {\n            return false;\n        }\n\n        // don't advance if we have variable arguments\n        if (!thisIsVarArgs) {\n            thisParam = thisParam.getNext();\n            thisParamCount++;\n        }\n        if (!thatIsVarArgs) {\n            thatParam = thatParam.getNext();\n            thatParamCount++;\n        }\n\n        // both var_args indicates the end\n        if (thisIsVarArgs && thatIsVarArgs) {\n            thisParam = null;\n            thatParam = null;\n        }\n    }\n\n    // \"that\" can't be a supertype, because it's missing a required argument.\n    if (thisParam != null && !thisParam.isVarArgs()) {\n        return false;\n    }\n\n    // If \"this\" has more required parameters than \"that\", then \"that\" is not a subtype of \"this\"\n    if (thisParamCount > thatParamCount) {\n        Node remainingThisParam = thisParam;\n        while (remainingThisParam != null) {\n            if (!remainingThisParam.isOptionalArg()) {\n                return false;\n            }\n            remainingThisParam = remainingThisParam.getNext();\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}