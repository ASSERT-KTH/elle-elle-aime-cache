{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thisParam != null || thatParam != null) {\n    JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;\n    JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;\n\n    // Check subtype only if both parameters are non-null\n    if (thisParamType != null && thatParamType != null) {\n      if (!thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();\n\n    // Handle variadic arguments\n    if (thisIsVarArgs && thatParam == null) {\n      break;\n    }\n    if (thatIsVarArgs && thisParam == null) {\n      return false;\n    }\n    if (thisIsVarArgs && thatIsVarArgs) {\n      break;\n    }\n\n    // Don't advance varargs; move to next parameters otherwise\n    if (!thisIsVarArgs) {\n      thisParam = thisParam != null ? thisParam.getNext() : null;\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam != null ? thatParam.getNext() : null;\n    }\n  }\n\n  // Check if \"that\" is missing any required parameters\n  if (thatParam != null) {\n    return false;\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}