{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // Covariant check for return types\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // Contravariant check for parameters\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thatParam != null) {\n      JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;\n      JSType thatParamType = thatParam.getJSType();\n\n      if (thatParamType != null) {\n        if (thisParamType == null || !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n\n      boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // Move to the next parameter if not a var-args parameter\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n      if (!thisIsVarArgs && thisParam != null) {\n        thisParam = thisParam.getNext();\n      }\n\n      // End both loops if both var-args, as it implies the end\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n      }\n    }\n\n    // Ensure no required parameters are left in this but not in that\n    if (thisParam != null) {\n      return false;\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}