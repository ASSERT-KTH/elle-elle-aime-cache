{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    // Check that every parameter in 'that' function is assignable to the corresponding parameter in 'this' function\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n        if (thisParamType != null) {\n            if (thatParamType == null ||\n                !thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        }\n\n        // don't advance if we have variable arguments\n        if (!thisParam.isVarArgs()) {\n            thisParam = thisParam.getNext();\n        }\n        if (!thatParam.isVarArgs()) {\n            thatParam = thatParam.getNext();\n        }\n    }\n\n    // Check that 'this' function does not have more required parameters than 'that' function\n    if (thisParam != null && parameterCount() > that.parameterCount()) {\n        return false;\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}