{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // Contravariant checking of parameters\n    Node thisParam = this.parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n        if (thisParamType != null && thatParamType != null) {\n            if (!thisParamType.isSubtype(thatParamType)) {\n                return false;\n            }\n        }\n\n        boolean thisIsVarArgs = thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n\n        // Advance if we don't have variable arguments\n        // Also advance if \"this\" is a variable argument, but \"that\" is not, following the rule:\n        // \"That\" can't be a supertype, because it's missing a required argument.\n        if (!thisIsVarArgs || (thisIsVarArgs && !thatIsVarArgs)) {\n            thisParam = thisParam.getNext();\n        }\n        if (!thatIsVarArgs) {\n            thatParam = thatParam.getNext();\n        }\n\n        // Both var_args indicates the end\n        if (thisIsVarArgs && thatIsVarArgs) {\n            thisParam = null;\n            thatParam = null;\n        }\n    }\n\n    // Check if there are any remaining parameters in \"that\" which are not in \"this\"\n    // \"That\" can't be a supertype, because it's missing a required argument.\n    if (thatParam != null) {\n        return false;\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}