{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    while (thisParam != null || thatParam != null) {\n        if (thisParam != null && thatParam != null) {\n            JSType thisParamType = thisParam.getJSType();\n            JSType thatParamType = thatParam.getJSType();\n\n            if (thisParamType != null) {\n                if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n                    return false;\n                }\n            }\n\n            boolean thisIsVarArgs = thisParam.isVarArgs();\n            boolean thatIsVarArgs = thatParam.isVarArgs();\n\n            if (!thisIsVarArgs) {\n                thisParam = thisParam.getNext();\n            }\n            if (!thatIsVarArgs) {\n                thatParam = thatParam.getNext();\n            }\n\n            if (thisIsVarArgs && thatIsVarArgs) {\n                break;\n            }\n        } else {\n            if (thisParam != null && !thisParam.isVarArgs()) {\n                return false; // \"that\" is missing required arguments\n            } else if (thatParam != null && !thatParam.isVarArgs()) {\n                return false; // \"this\" is missing required arguments\n            }\n            break;\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}