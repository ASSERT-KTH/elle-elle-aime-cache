{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // Covariant: this.returnType <: that.returnType\n  if (!this.returnType.isSubtypeOf(that.returnType)) {\n    return false;\n  }\n\n  // Contravariant: that.paramType[i] <: this.paramType[i]\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thisParam != null || thatParam != null) {\n    if (thisParam == null) {\n      // \"that\" has more parameters; only valid if they're optional or varargs\n      if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {\n        return false;\n      }\n      thatParam = thatParam.getNext();\n      continue;\n    }\n\n    if (thatParam == null) {\n      // \"this\" has more required parameters; invalid\n      if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {\n        return false;\n      }\n      thisParam = thisParam.getNext();\n      continue;\n    }\n\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n\n    if (thisParamType != null && thatParamType != null) {\n      if (!thatParamType.isSubtypeOf(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // If both are varargs, we've reached the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      break;\n    }\n\n    // Advance to the next parameter\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}