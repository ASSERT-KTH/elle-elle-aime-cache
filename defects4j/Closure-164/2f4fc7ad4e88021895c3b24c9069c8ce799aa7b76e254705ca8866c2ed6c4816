{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // In theory, the \"required-ness\" should work in the other direction as\n    // well. In other words, if we have\n    //\n    // function f(number, number) {}\n    // function g(number) {}\n    //\n    // Then f *should* not be a subtype of g, and g *should* not be\n    // a subtype of f. But in practice, we do not implement it this way.\n    // We want to support the use case where you can pass g where f is\n    // expected, and pretend that g ignores the second argument.\n    // That way, you can have a single \"no-op\" function, and you don't have\n    // to create a new no-op function for every possible type signature.\n    //\n    // So, in this case, g < f, but f !< g\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    boolean thisHasMoreParams = true;\n    boolean thatHasMoreParams = true;\n    \n    while (thisHasMoreParams || thatHasMoreParams) {\n        JSType thisParamType = null;\n        JSType thatParamType = null;\n        \n        if (thisParam != null) {\n            thisParamType = thisParam.getJSType();\n        }\n        \n        if (thatParam != null) {\n            thatParamType = thatParam.getJSType();\n        }\n        \n        boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();\n\n        if (thisParamType != null && thatParamType != null) {\n            if (!thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        } else if (thisParamType == null && thatParamType != null && !thatIsVarArgs) {\n            return false;\n        } else if (thisParamType != null && thatParamType == null && !thisIsVarArgs) {\n            return false;\n        }\n\n        if (!thisIsVarArgs) {\n            thisParam = thisParam != null ? thisParam.getNext() : null;\n            thisHasMoreParams = thisParam != null;\n        } else {\n            thisHasMoreParams = false;\n        }\n\n        if (!thatIsVarArgs) {\n            thatParam = thatParam != null ? thatParam.getNext() : null;\n            thatHasMoreParams = thatParam != null;\n        } else {\n            thatHasMoreParams = false;\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}