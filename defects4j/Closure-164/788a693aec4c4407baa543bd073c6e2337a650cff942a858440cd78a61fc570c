{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    while (thisParam != null || thatParam != null) {\n        JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;\n        JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;\n\n        if (thisParamType != null) {\n            if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        } else if (thatParamType != null) {\n            // If this parameter is null but the other parameter isn't, \n            // it's not a subtype due to an arity mismatch.\n            return false;\n        }\n\n        boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();\n\n        // When both are varargs, stop the iteration as they are compatible.\n        if (thisIsVarArgs && thatIsVarArgs) {\n            break;\n        }\n\n        // Advance the nodes unless they are varargs.\n        if (thisParam != null && !thisIsVarArgs) {\n            thisParam = thisParam.getNext();\n        } else {\n            thisParam = null; // Ensure we don't keep looping if this is exhausted.\n        }\n        \n        if (thatParam != null && !thatIsVarArgs) {\n            thatParam = thatParam.getNext();\n        } else {\n            thatParam = null; // Ensure we don't keep looping if that is exhausted.\n        }\n    }\n\n    // Ensure that all required parameters on 'this' are matched by 'that'.\n    if (thisParam != null) {\n        return false;\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}