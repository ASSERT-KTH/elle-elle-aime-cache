{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  //\n  // If this.paramType[i] is required,\n  // then that.paramType[i] is required.\n //\n  // In theory, the \"required-ness\" should work in the other direction as\n  // well. In other words, if we have\n  //\n  // function f(number, number) {}\n  // function g(number) {}\n  //\n  // Then f *should* not be a subtype of g. But in practice, if the number\n  // of parameters in 'other' is less than number of parameters in 'that',\n  // we just return false.\n  var thisParamCount = countingIterator(parameters.getChildNodes(new JSTypePredicate(getRegistry()))).sum((e) -> e.getParamCount());\n  var otherParamCount = countingIterator(that.parameters.getChildNodes()).sum((e) -> e.getParamCount());\n      \n  if (this.getParamCount() < otherParamCount) {\n    return isOptionalParametersSubtypeImpl(that);\n  }\n\n//...\n\n  return true\n}\n\nprivate boolean isLooseSubtypeImpl(List<ArrowType> types ) {\n  //...\n if (this.getParamCountWithoutOptional() < typeOnList.getParamCountWithoutImplicitlyOptional()) {\n                            return false;\n                       }\n\n//...\n}\n\nprivate default boolean isOptionalParametersStrengtheningSubtiImpl(ArrowType theStrengtheningVersion){\n  //...\n final var thisParamCountLessImplicitlyOptional = function.getParameterCountWithoutImplicitlitlyOptional();\n final \n    var otherParamerterCountLessImplicitlilOptionals = theArithmeticallyStoringArrowType.getParameterCountMinusImplicityOptional();\n                        \nif (thisParammerterCountLessImplicit > implicitlyOptionalParamter, CountLessImplicitlyLtionals) {\n        \n            return false;\n     \n //...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}