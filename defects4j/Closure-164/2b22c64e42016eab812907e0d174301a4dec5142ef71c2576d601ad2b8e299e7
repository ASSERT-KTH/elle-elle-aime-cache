{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // **FIXED**: Check for required params in both directions\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam!= null || thatParam!= null) { // **CHANGED** to handle unequal param lengths\n      JSType thisParamType = (thisParam!= null)? thisParam.getJSType() : null;\n      JSType thatParamType = (thatParam!= null)? thatParam.getJSType() : null;\n\n      if (thisParamType!= null && thatParamType == null) {\n        return false; // **ADDED**: this has required param, but that doesn't\n      }\n\n      if (thisParamType == null && thatParamType!= null) {\n        // **UNCHANGED**: Allow that to have more params (ignoring extra args)\n      }\n\n      if (thisParamType!= null && thatParamType!= null) {\n        if (!thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n\n      boolean thisIsVarArgs = (thisParam!= null) && thisParam.isVarArgs();\n      boolean thatIsVarArgs = (thatParam!= null) && thatParam.isVarArgs();\n\n      // don't advance if we have variable arguments\n      if (!thisIsVarArgs) {\n        thisParam = (thisParam!= null)? thisParam.getNext() : null;\n      }\n      if (!thatIsVarArgs) {\n        thatParam = (thatParam!= null)? thatParam.getNext() : null;\n      }\n\n      // both var_args indicates the end\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n      }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}