{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // Checking for return type subtyping (covariance)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thisParam != null || thatParam != null) {\n    JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;\n    JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;\n\n    if (thatParamType != null && thisParamType != null) {\n      if (!thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    } else if (thisParamType != null && !thisParam.isVarArgs()) {\n      // If this parameter is required and that parameter is missing, then it is not a subtype.\n      return false;\n    }\n\n    boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();\n\n    if (!thisIsVarArgs && thisParam != null) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs && thatParam != null) {\n      thatParam = thatParam.getNext();\n    }\n\n    // Both having var_args would indicate the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      break;\n    }\n  }\n\n  // Check if \"this\" has more parameters which are required but \"that\" does not.\n  if (thisParam != null && !thisParam.isVarArgs()) {\n    return false;\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}