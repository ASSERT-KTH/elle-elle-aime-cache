{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    \n    // Check if the number of required parameters matches\n    int thisParamCount = 0;\n    int thatParamCount = 0;\n    Node temp = thisParam;\n    while (temp != null) {\n        thisParamCount++;\n        temp = temp.getNext();\n    }\n    temp = thatParam;\n    while (temp != null) {\n        thatParamCount++;\n        temp = temp.getNext();\n    }\n    \n    // If the subtype has more required parameters than the supertype,\n    // it's not a valid subtype\n    if (thisParamCount > thatParamCount) {\n        return false;\n    }\n\n    while (thisParam != null && thatParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n        if (thisParamType != null) {\n            if (thatParamType == null ||\n                !thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        }\n\n        boolean thisIsVarArgs = thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n\n        // don't advance if we have variable arguments\n        if (!thisIsVarArgs) {\n            thisParam = thisParam.getNext();\n        }\n        if (!thatIsVarArgs) {\n            thatParam = thatParam.getNext();\n        }\n\n        // both var_args indicates the end\n        if (thisIsVarArgs && thatIsVarArgs) {\n            thisParam = null;\n            thatParam = null;\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}