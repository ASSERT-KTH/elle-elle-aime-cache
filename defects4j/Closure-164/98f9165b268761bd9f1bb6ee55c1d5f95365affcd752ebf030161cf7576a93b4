{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // Check return types for covariance\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // Handle parameter type subtyping (contravariance)\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    // Count number of non-vararg parameters\n    int thisParamCount = 0;\n    int thatParamCount = 0;\n    Node temp = thisParam;\n    while (temp != null) {\n      if (!temp.isVarArgs()) thisParamCount++;\n      temp = temp.getNext();\n    }\n    temp = thatParam;\n    while (temp != null) {\n      if (!temp.isVarArgs()) thatParamCount++;\n      temp = temp.getNext();\n    }\n\n    // If 'that' has fewer required parameters, 'this' cannot be a subtype\n    if (thatParamCount < thisParamCount) {\n      return false;\n    }\n\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n      if (thisParamType != null) {\n        if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // advance non-varargs parameters\n      if (!thisIsVarArgs) thisParam = thisParam.getNext();\n      if (!thatIsVarArgs) thatParam = thatParam.getNext();\n\n      // both being varargs indicates the end\n      if (thisIsVarArgs && thatIsVarArgs) {\n        break;\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}