{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    \n    while (thatParam != null) { // Change the loop condition to iterate through 'thatParam' only\n        JSType thatParamType = thatParam.getJSType();\n\n        // If thatParamType is required, thisParamType must exist and be a supertype\n        if (thatParamType != null) {\n            if (thisParam == null) {\n                // \"this\" can't be a subtype, because it's missing a required argument in \"that\".\n                return false;\n            }\n\n            JSType thisParamType = thisParam.getJSType();\n            if (thisParamType == null || !thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        }\n\n        boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n\n        // don't advance if we have variable arguments\n        if (!thatIsVarArgs) {\n            thatParam = thatParam.getNext();\n        }\n\n        if (!thisIsVarArgs) {\n            thisParam = thisParam == null ? null : thisParam.getNext();\n        }\n\n        // both var_args indicates the end\n        if (thisIsVarArgs && thatIsVarArgs) {\n            thisParam = null;\n            thatParam = null;\n        }\n    }\n\n    // With the modification, we only fail if \"that\" requires an argument that \"this\" doesn't provide.\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}