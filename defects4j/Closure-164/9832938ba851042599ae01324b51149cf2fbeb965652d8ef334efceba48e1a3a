{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  // Handle case where this has more required parameters\n  while (thisParam != null && !thisParam.isVarArgs()) {\n    if (thatParam == null || !thatParam.getJSType().isSubtype(thisParam.getJSType())) {\n      return false;\n    }\n    thisParam = thisParam.getNext();\n    thatParam = thatParam.getNext();\n  }\n\n  // Handle case where `that` has more required parameters\n  while (thatParam != null && !thatParam.isVarArgs()) {\n    if (thisParam == null) {\n      return false; // this is missing a required parameter that `that` has\n    }\n    thatParam = thatParam.getNext();\n  }\n\n  // Both have reached the end or var_args are consistent\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}