{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null || thatParam != null) {\n    JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;\n    JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;\n\n    if (thisParam != null && thatParam != null) {\n      if (thisParamType != null) {\n        if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      } else if (thatParamType != null) {\n        // Missing required argument in 'this'\n        return false;\n      }\n    } else if (thisParam != null && thatParam == null) {\n      // 'that' has less parameters, optional parameter requirement mismatch\n      return false;\n    } else if (thisParam == null && thatParam != null && thatParamType != null) {\n      // 'that' has more required parameters than 'this'\n      return false;\n    }\n\n    boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();\n\n    // Handle varargs\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    } else if (thisIsVarArgs || thatIsVarArgs) {\n      return false;\n    }\n\n    // Advance to next parameter\n    thisParam = thisParam != null ? thisParam.getNext() : null;\n    thatParam = thatParam != null ? thatParam.getNext() : null;\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}