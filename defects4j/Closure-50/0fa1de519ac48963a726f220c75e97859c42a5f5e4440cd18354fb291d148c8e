{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nprivate Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n        return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n        if (!NodeUtil.isImmutableValue(right)) {\n            return n;\n        }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n        return n;\n    }\n\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newArrayList();\n    StringBuilder sb = new StringBuilder();\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n        if (NodeUtil.isImmutableValue(elem)) {\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            sb.append(NodeUtil.getArrayElementStringValue(elem));\n        } else {\n            if (sb.length() > 0) {\n                arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n                sb.setLength(0);\n            }\n            arrayFoldedChildren.add(elem);\n        }\n        prev = elem;\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n\n    if (arrayFoldedChildren.size() == 1 && NodeUtil.isString(arrayFoldedChildren.get(0))) {\n        Node foldedStringNode = arrayFoldedChildren.get(0);\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n    } else if (arrayFoldedChildren.size() == arrayNode.getChildCount() && right == null) {\n        return n;\n    }\n\n    int foldedSize = 0;\n    for (Node node : arrayFoldedChildren) {\n        foldedSize += InlineCostEstimator.getCost(node);\n    }\n    foldedSize += arrayFoldedChildren.size() > 1 ? (arrayFoldedChildren.size() - 1) * joinString.length() : 0;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (foldedSize >= originalSize) {\n        return n;\n    }\n\n    arrayNode.detachChildren();\n    for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n    }\n    reportCodeChange();\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}