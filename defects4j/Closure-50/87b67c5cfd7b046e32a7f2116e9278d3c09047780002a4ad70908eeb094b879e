{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nprivate Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n        return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null && !NodeUtil.isImmutableValue(right)) {\n        return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n        return n;\n    }\n\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n\n    // Merges adjacent String nodes and handles non-string elements\n    while (elem != null) {\n        String elementValue = NodeUtil.getArrayElementStringValue(elem);\n        if (elementValue != null) {\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            sb.append(elementValue);\n        } else {\n            if (sb.length() > 0) {\n                foldedSize += sb.length();\n                arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n                sb.setLength(0);\n            }\n            foldedSize += InlineCostEstimator.getCost(elem);\n            arrayFoldedChildren.add(elem);\n        }\n        prev = elem;\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        foldedSize += sb.length();\n        arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n\n    // Add size for join string between elements\n    foldedSize += (arrayFoldedChildren.size() > 1) ? joinString.length() * (arrayFoldedChildren.size() - 1) : 0;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n        case 0:\n            Node emptyStringNode = Node.newString(\"\");\n            n.getParent().replaceChild(n, emptyStringNode);\n            reportCodeChange();\n            return emptyStringNode;\n        case 1:\n            Node foldedStringNode = arrayFoldedChildren.get(0);\n            if (foldedSize > originalSize) {\n                return n;\n            }\n            arrayNode.detachChildren();\n            if (foldedStringNode.getType() != Token.STRING) {\n                Node replacement = new Node(Token.ADD,\n                    Node.newString(\"\").copyInformationFrom(n),\n                    foldedStringNode);\n                foldedStringNode = replacement;\n            }\n            n.getParent().replaceChild(n, foldedStringNode);\n            reportCodeChange();\n            return foldedStringNode;\n        default:\n            if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n                return n;\n            }\n            int kJoinOverhead = \"[].join()\".length();\n            foldedSize += kJoinOverhead;\n            foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n            if (foldedSize > originalSize) {\n                return n;\n            }\n            arrayNode.detachChildren();\n            Node newArrayNode = new Node(Token.ARRAYLIT);\n            for (Node node : arrayFoldedChildren) {\n                newArrayNode.addChildToBack(node);\n            }\n            Node newCall = new Node(Token.CALL,\n                new Node(Token.GETPROP, newArrayNode, Node.newString(\"join\")),\n                right != null ? right.cloneTree() : null);\n            n.getParent().replaceChild(n, newCall);\n            reportCodeChange();\n            return newCall;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}