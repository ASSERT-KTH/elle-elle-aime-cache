{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nprivate Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n        return n;\n    }\n\n    Node right = callTarget.getNext();\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    if (joinString == null) {\n        return n; // Can't fold if joinString is null\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n        return n;\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    boolean firstElement = true;\n    Node elem = arrayNode.getFirstChild();\n\n    while (elem != null) {\n        String elementValue = NodeUtil.getArrayElementStringValue(elem);\n        if (elementValue != null) {\n            if (!firstElement) {\n                sb.append(joinString);\n            }\n            sb.append(elementValue);\n            firstElement = false;\n        } else {\n            if (sb.length() > 0) {\n                arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));\n                sb = new StringBuilder();\n                firstElement = true;\n            }\n            arrayFoldedChildren.add(elem);\n        }\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(arrayNode.getLastChild()));\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    int foldedSize = 0;\n\n    switch (arrayFoldedChildren.size()) {\n        case 0:\n            Node emptyStringNode = Node.newString(\"\");\n            n.getParent().replaceChild(n, emptyStringNode);\n            reportCodeChange();\n            return emptyStringNode;\n        case 1:\n            Node foldedStringNode = arrayFoldedChildren.get(0);\n            if (foldedStringNode.getType() == Token.STRING) {\n                foldedSize = foldedStringNode.getString().length() + 2; // +2 for quotes\n            } else {\n                foldedSize = InlineCostEstimator.getCost(foldedStringNode);\n            }\n            if (foldedSize <= originalSize) {\n                n.getParent().replaceChild(n, foldedStringNode);\n                reportCodeChange();\n                return foldedStringNode;\n            }\n            break;\n        default:\n            for (Node child : arrayFoldedChildren) {\n                if (child.getType() == Token.STRING) {\n                    foldedSize += child.getString().length() + 2; // +2 for quotes\n                } else {\n                    foldedSize += InlineCostEstimator.getCost(child);\n                }\n            }\n            foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length(); // Add size of join strings\n            foldedSize += \"[].join()\".length(); // Overhead of join call\n            if (right != null) {\n                foldedSize += InlineCostEstimator.getCost(right);\n            }\n            if (foldedSize <= originalSize) {\n                arrayNode.detachChildren();\n                for (Node node : arrayFoldedChildren) {\n                    arrayNode.addChildToBack(node);\n                }\n                reportCodeChange();\n                return n;\n            }\n            break;\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}