{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null && !NodeUtil.isImmutableValue(right)) {\n      return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = callTarget.getLastChild();\n\n    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        if (sb.length() > 0) {\n          arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n          sb.setLength(0);\n        }\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n\n    if (arrayFoldedChildren.size() == 1 && NodeUtil.isString(arrayFoldedChildren.get(0))) {\n      Node foldedStringNode = arrayFoldedChildren.get(0);\n      if (foldedStringNode.getType() != Token.STRING) {\n        // If the Node is not a string literal, ensure that\n        // it is coerced to a string.\n        Node replacement = new Node(Token.ADD,\n            Node.newString(\"\").copyInformationFrom(n),\n            foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      n.getParent().replaceChild(n, foldedStringNode);\n      reportCodeChange();\n      return foldedStringNode;\n    }\n\n    int foldedSize = 0;\n    for (Node node : arrayFoldedChildren) {\n      foldedSize += InlineCostEstimator.getCost(node);\n    }\n    foldedSize += arrayFoldedChildren.size() > 1 ? (arrayFoldedChildren.size() - 1) * joinString.length() : 0;\n    foldedSize += InlineCostEstimator.getCost(arrayNode);\n    if (right != null) {\n      foldedSize += InlineCostEstimator.getCost(right);\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (foldedSize >= originalSize) {\n      return n;\n    }\n\n    arrayNode.detachChildren();\n    for (Node node : arrayFoldedChildren) {\n      arrayNode.addChildToBack(node);\n    }\n    reportCodeChange();\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}