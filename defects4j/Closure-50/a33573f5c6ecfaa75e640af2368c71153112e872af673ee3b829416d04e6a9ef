{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nprivate Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n        return n;\n    }\n\n    Node functionName = callTarget.getLastChild();\n    if (!functionName.getString().equals(\"join\")) {\n        return n;\n    }\n\n    // Check if the number of arguments to join is greater than 1\n    if (n.getChildCount() > 2) {\n        return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    if (arrayNode.getType() != Token.ARRAYLIT) {\n        return n;\n    }\n\n    Node right = n.getLastChild();\n    String joinString = (right == null) ? \",\" : right.isString() ? right.getString() : String.valueOf(right.getDouble());\n\n    StringBuilder sb = new StringBuilder();\n    Node elem = arrayNode.getFirstChild();\n    while (elem != null) {\n        sb.append(NodeUtil.isImmutableValue(elem) || elem.isString() ? NodeUtil.getArrayElementStringValue(elem) : \"String(\"+NodeUtil.nodeToString(elem)+\")\");\n        Node nextElem = elem.getNext();\n        if (nextElem != null && !(NodeUtil.isImmutableValue(nextElem) || nextElem.isString())) {\n            for (int i = elem.getNext().getIndex(); i < arrayNode.getChildCount(); i++) {\n                return n;\n            }\n        } else if (nextElem != null) {\n            sb.append(joinString);\n        }\n        elem = nextElem;\n    }\n\n    Node foldedStringNode = Node.newString(sb.toString()).copyInformationFrom(n);\n    arrayNode.detachChildren();\n    n.getParent().replaceChild(n, foldedStringNode);\n    reportCodeChange();\n\n    return foldedStringNode;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}