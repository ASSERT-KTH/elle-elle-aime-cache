{
    "generation": "private Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n  \n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n  \n  Node right = callTarget.getNext();\n  if (right != null && !NodeUtil.isImmutableValue(right)) {\n    return n;\n  }\n  \n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  \n  if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n    return n;\n  }\n  \n  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = new LinkedList<>();\n  StringBuilder sb = null;\n  int foldedSize = 0;\n  Node prev = null;\n  Node elem = arrayNode.getFirstChild();\n  \n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n      if (sb == null) {\n        sb = new StringBuilder();\n      } else {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getArrayElementStringValue(elem));\n    } else {\n      if (sb != null) {\n        Preconditions.checkNotNull(prev);\n        foldedSize += sb.length() + 2; // +2 for quotes\n        arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n        sb = null;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    prev = elem;\n    elem = elem.getNext();\n  }\n  \n  if (sb != null) {\n    Preconditions.checkNotNull(prev);\n    foldedSize += sb.length() + 2; // +2 for quotes\n    arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n  }\n  \n  foldedSize += arrayFoldedChildren.size() - 1; // for commas\n  \n  int originalSize = InlineCostEstimator.getCost(n);\n  \n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      Node emptyStringNode = Node.newString(\"\");\n      n.getParent().replaceChild(n, emptyStringNode);\n      reportCodeChange();\n      return emptyStringNode;\n    case 1:\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        Node replacement = new Node(Token.ADD, Node.newString(\"\").copyInformationFrom(n), foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      n.getParent().replaceChild(n, foldedStringNode);\n      reportCodeChange();\n      return foldedStringNode;\n    default:\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      if (right != null) {\n        foldedSize += InlineCostEstimator.getCost(right);\n      }\n      if (foldedSize >= originalSize) {\n        return n;\n      }\n      arrayNode.detachChildren();\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      reportCodeChange();\n      break;\n  }\n  \n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}