{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nprivate Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  Node right = n.getChildCount() > 1 ? n.getLastChild() : null;\n\n  // Check if 'right' is not null and is not an immutable value, return n if true\n  if (right != null && !NodeUtil.isImmutableValue(right)) {\n    return n;\n  }\n\n  // \",\" is the default if 'right' is null, otherwise get the string value of 'right'\n  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right).toString();\n  StringBuilder sb = new StringBuilder();\n  Node elem = arrayNode.getFirstChild();\n  boolean canFold = true;\n\n  // If the element is a string or a number, append to the string builder, otherwise, set canFold to false\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY || elem.isNumber()) {\n      sb.append(NodeUtil.getArrayElementStringValue(elem));\n    } else {\n      canFold = false;\n      break;\n    }\n    if (elem.getNext() != null) { // Add the joinString between elements\n      sb.append(joinString);\n    }\n    elem = elem.getNext();\n  }\n\n  if (canFold) {\n    Node foldedStringNode = Node.newString(sb.toString()).copyInformationFrom(n);\n    n.getParent().replaceChild(n, foldedStringNode);\n    reportCodeChange();\n    return foldedStringNode;\n  }\n\n  return n;\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}