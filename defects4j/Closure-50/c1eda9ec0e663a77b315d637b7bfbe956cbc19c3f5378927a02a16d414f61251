{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null && !NodeUtil.isImmutableValue(right)) {\n      return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = callTarget.getLastChild();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    if (joinString == null) {\n      return n; // Fail fast for invalid join string.\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n    int foldedSize = 0;\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    boolean canFold = true;\n\n    // Merges adjacent String/number/boolean nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          foldedSize += sb.length() + 2; // +2 for quotes.\n          arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));\n          sb = null;\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      if (!NodeUtil.isImmutableValue(elem) && elem.getType() != Token.EMPTY) {\n        canFold = false;\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n\n    if (sb != null) {\n      Preconditions.checkNotNull(prev);\n      foldedSize += sb.length() + 2; // +2 for quotes.\n      arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n\n    foldedSize += arrayFoldedChildren.size() - 1; // One for each comma.\n    int originalSize = InlineCostEstimator.getCost(n);\n\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount() && canFold) {\n          StringBuilder foldedJoinResult = new StringBuilder();\n          for (Node child : arrayFoldedChildren) {\n            if (foldedJoinResult.length() > 0) {\n              foldedJoinResult.append(joinString);\n            }\n            foldedJoinResult.append(NodeUtil.getArrayElementStringValue(child));\n          }\n          if (foldedJoinResult.length() + 2 <= originalSize) { // +2 for quotes.\n            Node foldedNode = Node.newString(foldedJoinResult.toString());\n            n.getParent().replaceChild(n, foldedNode);\n            reportCodeChange();\n            return foldedNode;\n          }\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node child : arrayFoldedChildren) {\n          arrayNode.addChildToBack(child);\n        }\n        reportCodeChange();\n        break;\n    }\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}