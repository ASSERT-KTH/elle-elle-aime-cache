{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nprivate Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n        return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n        if (!NodeUtil.isImmutableValue(right)) {\n            return n;\n        }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n        return n;\n    }\n\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newArrayList();\n    StringBuilder sb = new StringBuilder();\n    boolean hasNonString = false;\n    Node elem = arrayNode.getFirstChild();\n\n    while (elem != null) {\n        if (NodeUtil.isImmutableValue(elem)) {\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            sb.append(NodeUtil.getArrayElementStringValue(elem));\n        } else {\n            if (sb.length() > 0) {\n                arrayFoldedChildren.add(Node.newString(sb.toString()));\n                sb.setLength(0);\n            }\n            hasNonString = true;\n            arrayFoldedChildren.add(elem);\n        }\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    if (arrayFoldedChildren.size() == 0) {\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n    } else if (arrayFoldedChildren.size() == 1 && !hasNonString) {\n        Node foldedStringNode = arrayFoldedChildren.get(0);\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n    } else if (hasNonString) {\n        Node newArrayNode = NodeUtil.newArrayNode();\n        for (Node node : arrayFoldedChildren) {\n            newArrayNode.addChildToBack(node);\n        }\n        n.removeFirstChild();\n        n.addChildToFront(newArrayNode);\n        if (right == null) {\n            n.removeChild(right);\n        }\n        reportCodeChange();\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}