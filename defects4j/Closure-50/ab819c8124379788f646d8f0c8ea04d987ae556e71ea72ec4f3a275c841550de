{
    "generation": "private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n        return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n        return n;\n    }\n\n    Node right = functionName.getNext();\n    if (right == null || !NodeUtil.isImmutableValue(right)) {\n        return n;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    StringBuilder sb = new StringBuilder();\n    boolean modified = false;\n    Node elem = arrayNode.getFirstChild();\n    while (elem != null) {\n        if (elem != arrayNode.getFirstChild()) {\n            sb.append(joinString);\n        }\n        if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n            sb.append(NodeUtil.getArrayElementStringValue(elem));\n        } else {\n            modified = true;\n            break;\n        }\n        elem = elem.getNext();\n    }\n\n    if (!modified) {\n        Node result = IR.string(sb.toString()).copyInformationFrom(n);\n        n.getParent().replaceChild(n, result);\n        reportCodeChange();\n        return result;\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}