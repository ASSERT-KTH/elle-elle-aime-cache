{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.NAME:\n      if (parent.getType() == Token.GETPROP &&\n          parent.getFirstChild().equals(n) &&\n          parent.getJSType() instanceof FunctionType) {\n        handleNamespaceProperty(n, parent);\n      }\n      break;\n  }\n}\n\nprivate void handleNamespaceProperty(Node nameNode, Node parent) {\n  Node objectNode = parent.getFirstChild();\n  Node propertyNode = parent.getLastChild();\n\n  JSType objectType = objectNode.getJSType();\n  if (objectType != null && objectType.isObjectType()) {\n    ObjectType objectObjectType = objectType.toObjectType();\n    if (objectObjectType.hasOwnProperty(propertyNode.getString())) {\n      scope.declare(\n          nameNode,\n          objectObjectType.getPropertyType(propertyNode.getString()),\n          symbolTable.getReadableNameForNode(parent));\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}