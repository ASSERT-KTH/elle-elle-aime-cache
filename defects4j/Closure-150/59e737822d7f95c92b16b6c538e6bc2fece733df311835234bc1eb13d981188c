{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n\n    if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {\n        handleFunctionInputs(parent);\n        return;\n    }\n\n    attachLiteralTypes(n);\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n                defineVar(child, n);\n            }\n            break;\n        case Token.LET:\n        case Token.CONST:\n            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n                defineVar(child, n);\n            }\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}