{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent != null && parent.getType() == Token.NAME) {\n        handleNamespacedFunction(n, parent);\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}\n\nprivate void handleNamespacedFunction(Node function, Node parent) {\n  String functionName = parent.getString();\n  Node grandParent = parent.getParent();\n  if (grandParent != null && grandParent.getType() == Token.GETPROP) {\n    String namespaceName = grandParent.getFirstChild().getString();\n    Node namespaceNode = scope.getVar(namespaceName);\n    if (namespaceNode != null) {\n      JSType namespaceType = scope.getTypeOfOrUnknown(namespaceNode);\n      if (namespaceType.isObject()) {\n        ObjectType objectType = (ObjectType) namespaceType;\n        JSType functionStub = JSType.getFunctionType(objectType);\n        objectType.defineProperty(functionName, functionStub, Node.newString(functionName));\n        scope.setTypeOf(namespaceNode, objectType);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}