{
    "generation": "/**\n * Visit a node in a local scope, and add any local variables or catch\n * parameters into the local symbol table.\n *\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        handleFunctionStub(n, parent);\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.ASSIGN:\n      if (n.getFirstChild().getType() == Token.GETPROP) {\n        handlePropertyAssignment(n);\n      }\n      break;\n  }\n}\n\n/**\n * Handle function stubs with type annotations.\n */\nprivate void handleFunctionStub(Node n, Node parent) {\n  Node nameNode = parent;\n  String functionName = nameNode.getString();\n  Node typeAnnotation = n.getJSDocInfo() != null ? n.getJSDocInfo().getType() : null;\n\n  if (typeAnnotation != null) {\n    String typeName = typeAnnotation.toString();\n    scope.declare(functionName, n, new FunctionType(scope, typeName));\n  } else {\n    scope.declare(functionName, n, new FunctionType(scope));\n  }\n}\n\n/**\n * Handle property assignments with type annotations.\n */\nprivate void handlePropertyAssignment(Node n) {\n  Node lhs = n.getFirstChild();\n  Node rhs = lhs.getNext();\n  \n  if (rhs.isQualifiedName() && rhs.getJSDocInfo() != null) {\n    Node typeAnnotation = rhs.getJSDocInfo().getType();\n    if (typeAnnotation != null) {\n      String propertyName = lhs.getLastChild().getString();\n      String typeName = typeAnnotation.toString();\n      \n      Node objNode = lhs.getFirstChild();\n      String objName = objNode.isName() ? objNode.getString() : null;\n      \n      if (objName != null) {\n        ObjectType objType = (ObjectType) scope.getVar(objName).getType();\n        objType.defineDeclaredProperty(propertyName, JSType.fromString(scope, typeName), n);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}