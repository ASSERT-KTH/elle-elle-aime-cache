{
    "generation": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.ASSIGN:\n          if (n.getFirstChild().getType() == Token.GETPROP) {\n            defineProperty(n, parent);\n          }\n          break;\n      }\n    }\n\n    private void defineProperty(Node n, Node parent) {\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getFirstChild();\n      if (rhs.getType() == Token.GETPROP) {\n        Node target = rhs.getFirstChild();\n        String propertyName = rhs.getSecondChild().getString();\n        JSType propertyType = n.getSecondChild().getJSType();\n        if (target.getType() == Token.NAME) {\n          JSType targetType = t.getScope().getVar(target.getString()).getType();\n          if (targetType instanceof ObjectType) {\n            ObjectType objectType = (ObjectType) targetType;\n            objectType.defineProperty(propertyName, propertyType, true);\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}