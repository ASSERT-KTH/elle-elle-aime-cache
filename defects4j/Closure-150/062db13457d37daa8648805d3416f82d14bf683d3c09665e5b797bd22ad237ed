{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        // Handle function stubs (namespaced or collected)\n        if (n.hasChildren() && n.getFirstChild().getType() == Token.NAME) {\n          Node functionName = n.getFirstChild();\n          if (functionName.hasChildren() && functionName.getFirstChild().getType() == Token.STRING) {\n            // Handle collected function stubs\n            handleCollectedFunctionStub(n, parent);\n          } else {\n            // Handle namespaced function stubs\n            handleNamespacedFunctionStub(n, parent);\n          }\n        }\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}