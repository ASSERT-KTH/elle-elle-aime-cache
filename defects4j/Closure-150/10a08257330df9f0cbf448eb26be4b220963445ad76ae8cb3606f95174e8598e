{
    "generation": "    /**\n     * Visit a node in a local scope, and add any local variables or catch\n     * parameters into the local symbol table.\n     *\n     * @param t The node traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     */\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          // Handle the case where the function is a namespaced function stub\n          if (parent.getType() == Token.NAME) {\n            defineNamespacedFunctionStub(n, parent);\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }\n\n    /**\n     * Define a namespaced function stub in the local scope.\n     *\n     * @param n The function node.\n     * @param parent The parent of the function node.\n     */\n    private void defineNamespacedFunctionStub(Node n, Node parent) {\n      // Get the name of the namespace and the function\n      String namespaceName = parent.getString();\n      String functionName = n.getFirstChild().getString();\n\n      // Create a new variable for the namespaced function stub\n      Var var = scope.getVar(namespaceName);\n      if (var != null) {\n        ObjectType namespaceType = (ObjectType) var.getType();\n        if (namespaceType != null) {\n          FunctionType functionType = (FunctionType) n.getJSType();\n          if (functionType != null) {\n            namespaceType.defineDeclaredProperty(functionName, functionType, n);\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}