{
    "generation": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.EXPR_RESULT:\n          if (n.getFirstChild().getType() == Token.ASSIGN && \n              n.getFirstChild().getFirstChild().getType() == Token.GETPROP) {\n            Node lhs = n.getFirstChild().getFirstChild();\n            Node propNode = lhs.getLastChild();\n            String propName = propNode.getString();\n            Node objNode = lhs.getFirstChild();\n            Scope currentScope = t.getScope();\n            if (objNode.getType() == Token.NAME) {\n              Var var = currentScope.getVar(objNode.getString());\n              if (var != null) {\n                ObjectType objType = (ObjectType) var.getType();\n                if (objType != null) {\n                  JSType propType = n.getLastChild().getJSType();\n                  objType.defineProperty(propName, propType, Property declaration);\n                }\n              }\n            }\n          }\n          break;\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}