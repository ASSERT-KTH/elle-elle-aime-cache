{
    "generation": "/**\n * Visit a node in a local scope, and add any local variables or catch\n * parameters into the local symbol table.\n *\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        // Fix: Handle namespaced function stubs by defining the function\n        // in the parent's type, if it's an object.\n        if (parent.getType() == Token.NAME && parent.getParent().getType() == Token.DOT) {\n          Node grandParent = parent.getParent();\n          JSType grandParentType = scope.getTypeFromNode(grandParent);\n          if (grandParentType.isObject() &&!((ObjectType) grandParentType).hasProperty(parent.getString())) {\n            defineDeclaredFunction(n, grandParent);\n          }\n        }\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.DOT:\n      // Fix: Handle collected function stubs by propagating the type\n      // from the object to the property.\n      if (n.getFirstChild().getType() == Token.NAME && n.getParent().getType() == Token.VAR) {\n        Node child = n.getFirstChild();\n        JSType objectType = scope.getTypeFromNode(n);\n        if (objectType.isObject() && ((ObjectType) objectType).hasProperty(child.getString())) {\n          scope.addVar(child.getString(), ((ObjectType) objectType).getPropertyType(child.getString()));\n        }\n      }\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}