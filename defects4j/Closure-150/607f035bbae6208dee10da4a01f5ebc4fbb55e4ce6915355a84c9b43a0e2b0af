{
    "generation": "/**\n * Visit a node in a local scope, and add any local variables or catch\n * parameters into the local symbol table.\n *\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n@Override public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n\n    if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {\n        handleFunctionInputs(parent);\n        return;\n    }\n\n    attachLiteralTypes(n);\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        case Token.GETPROP:\n            if (parent.getType() == Token.VAR || parent.getType() == Token.ASSIGN || parent.getType() == Token.LP) {\n                attachQualifiedNameTypes(n, parent);\n            }\n            break;\n        case Token.GETELEM:\n            if (parent.getType() == Token.VAR || parent.getType() == Token.ASSIGN || parent.getType() == Token.LP) {\n                attachQualifiedNameTypes(n, parent);\n            }\n            break;\n    }\n}\n\nprivate void attachQualifiedNameTypes(Node n, Node parent) {\n    JSDocInfo jsdoc = n.getJSDocInfo();\n    if (jsdoc != null) {\n        String qname = n.getQualifiedName();\n        if (qname != null) {\n            Var var = lastLocalScope.getVar(qname);\n            if (var != null) {\n                var.setType(t.getTypeRegistry().createObjectType(jsdoc));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}