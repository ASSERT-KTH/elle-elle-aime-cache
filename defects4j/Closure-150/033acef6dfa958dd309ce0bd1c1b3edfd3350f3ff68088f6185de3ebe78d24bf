{
    "generation": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.ASSIGN:\n          if (n.getFirstChild().getType() == Token.GETPROP) {\n            Node lhs = n.getFirstChild();\n            Node propName = lhs.getLastChild();\n            if (propName.getType() == Token.STRING) {\n              String propertyName = propName.getString();\n              Node objectNode = lhs.getFirstChild();\n              Scope currentScope = t.getScope();\n              while (currentScope != null && !currentScope.isGlobal()) {\n                Var objectVar = currentScope.getVar(objectNode.getQualifiedName());\n                if (objectVar != null) {\n                  ObjectType objectType = (ObjectType) objectVar.getType();\n                  if (objectType != null) {\n                    JSType functionType = JSType.UNKNOWN;\n                    for (Node child : n.getLastChild().getChildren()) {\n                      if (child.getType() == Token.FUNCTION) {\n                        functionType = defineDeclaredFunction(child, n);\n                      }\n                    }\n                    if (functionType != null) {\n                      objectType.defineDeclaredProperty(propertyName, functionType, Collections.<InputId>emptySet());\n                    }\n                  }\n                }\n                currentScope = currentScope.getParent();\n              }\n            }\n          }\n          break;\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}