{
    "generation": "/**\n * Visit a node in a local scope, and add any local variables or catch\n * parameters into the local symbol table.\n *\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        // Handle function stubs (namespaced and collected)\n        if (n.isFunction() && n.getFirstChild() == null) {\n          defineFunctionStub(n, parent);\n        } else {\n          return;\n        }\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.ASSIGN:\n      // Handle property assignment for function stubs\n      if (n.getFirstChild().isGetProp()) {\n        Node lhs = n.getFirstChild();\n        if (lhs.getFirstChild().isName() && lhs.getSecondChild().isString()) {\n          definePropertyStub(lhs.getFirstChild().getString(), lhs.getSecondChild().getString(), n.getSecondChild());\n        }\n      }\n      break;\n  }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}