{
    "generation": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            defineDeclaredFunction(parent.getParent(), parent);\n          } else {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.GETPROP:\n          // Handle function stubs\n          if (parent.getType() == Token.ASSIGN && n == parent.getFirstChild()\n              && parent.getLastChild().getType() == Token.FUNCTION) {\n            defineDeclaredFunction(parent.getLastChild(), parent);\n          }\n          break;\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}