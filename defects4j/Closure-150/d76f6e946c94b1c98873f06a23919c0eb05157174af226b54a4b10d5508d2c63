{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n != null && n.getType() == Token.NAME) {\n    Node grandParent = parent.getParent();\n    if (grandParent != null && grandParent.getType() == Token.GETPROP) {\n      String name = n.getString();\n      Node root = scope.getRootNode();\n      NodeTraversal traversal = scope.getTraversal();\n      if (root != null && root.getType() == Token.SCRIPT && name.contains(\".\")) {\n        String[] parts = name.split(\"\\\\.\");\n        JSType parentType = null;\n        JSType type = null;\n        Node currentNode = n;\n        for (String part : parts) {\n          type = scope.getTypeOfNode(currentNode);\n          if (parentType != null && parentType.isObjectType() && !type.isUnknownType()) {\n            ObjectType objectType = parentType.toObjectType();\n            if (!objectType.hasProperty(part)) {\n              objectType.defineDeclaredProperty(part, type, null);\n            }\n          }\n          parentType = type;\n          currentNode = currentNode.getParent();\n          if (currentNode == null || currentNode.getType() != Token.GETPROP) break;\n          currentNode = currentNode.getLastChild();\n        }\n        return;\n      }\n    }\n  }\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}