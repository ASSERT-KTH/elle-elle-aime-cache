{
    "generation": "    /**\n     * Visit a node in a local scope, and add any local variables or catch\n     * parameters into the local symbol table.\n     *\n     * @param t The node traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     */\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.EXPR_RESULT:\n          // Handle stubs for namespaces or collected function stubs.\n          defineNamespaceOrCollectedFunctionStub(n);\n          break;\n      }\n    }\n\n    /**\n     * Defines a namespace or collected function stub from an EXPR_RESULT node.\n     *\n     * @param n The EXPR_RESULT node\n     */\n    private void defineNamespaceOrCollectedFunctionStub(Node n) {\n      Node expr = n.getFirstChild();\n      if (expr != null && expr.isGetProp() && expr.getParent().isExprResult()) {\n        JSType type = expr.getJSType();\n        if (type != null && type.isFunctionType()) {\n          String propName = expr.getLastChild().getString();\n          ObjectType objType = ObjectType.cast(expr.getFirstChild().getJSType());\n          if (objType != null && objType.hasOwnProperty(propName)) {\n            objType.defineProperty(propName, type, expr);\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}