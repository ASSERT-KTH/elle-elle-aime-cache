{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n\n    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n    }\n\n    attachLiteralTypes(n);\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            if (parent.getType() == Token.NAME) {\n                defineNamedFunction(n, parent);\n                return;\n            } else if (parent.getType() == Token.ASSIGN && parent.getFirstChild() != n) {\n                defineFunctionStub(n, parent);\n                return;\n            }\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}