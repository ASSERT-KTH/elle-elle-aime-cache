{
    "generation": "/**\n * Visit a node in a local scope, and add any local variables or catch\n * parameters into the local symbol table.\n *\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.ASSIGN:\n      if (n.getFirstChild().getType() == Token.GETPROP) {\n        Node propName = n.getFirstChild().getSecondChild();\n        if (propName.isString()) {\n          defineStubProperty(n.getFirstChild().getFirstChild(), propName.getString(), n);\n        }\n      }\n      break;\n    case Token.EXPR_RESULT:\n      if (n.getFirstChild().getType() == Token.GETPROP) {\n        Node propName = n.getFirstChild().getSecondChild();\n        if (propName.isString()) {\n          defineStubProperty(n.getFirstChild().getFirstChild(), propName.getString(), n);\n        }\n      }\n      break;\n  }\n}\n\n/**\n * Defines a stub property on an object.\n *\n * @param objNode The node representing the object.\n * @param propName The name of the property.\n * @param n The node containing the stub declaration.\n */\nprivate void defineStubProperty(Node objNode, String propName, Node n) {\n  Node propType = n.getJSTypeExpression();\n  if (propType != null) {\n    JSTypeExpression typeExpr = new JSTypeExpression(propType, n.getSourceFileName());\n    scope.declareProperty(propName, typeExpr, objNode);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}