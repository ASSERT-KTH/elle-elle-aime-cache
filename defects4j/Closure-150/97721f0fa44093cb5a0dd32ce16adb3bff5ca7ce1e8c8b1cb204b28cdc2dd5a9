{
    "generation": "@Override \npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        // FIX: Handle namespaced function declarations\n        if (parent.getParent()!= null && parent.getParent().getType() == Token.DOT) {\n          defineDeclaredFunction(n, parent.getParent());\n        } else {\n          return;\n        }\n      } else {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.DOT:\n      // FIX: Handle collected function stubs with 'this' context\n      if (n.getFirstChild().getType() == Token.THIS) {\n        Node----\n\n    Node functionDef = n.getNext();\n        while (functionDef!= null && functionDef.getType()!= Token.FUNCTION) {\n          functionDef = functionDef.getNext();\n        }\n        if (functionDef!= null) {\n          defineDeclaredFunction(functionDef, n);\n        }\n      }\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}