{
    "generation": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            // Ensure the function is defined in the correct scope\n            if (parent.getType() == Token.EXPR_RESULT) {\n              defineDeclaredFunction(n, parent);\n            }\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.ASSIGN:\n          if (n.getFirstChild().getType() == Token.GETPROP) {\n            Node lhs = n.getFirstChild();\n            Node rhs = n.getLastChild();\n            if (rhs.getType() == Token.FUNCTION) {\n              defineDeclaredFunction(rhs, n);\n            }\n          }\n          break;\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}