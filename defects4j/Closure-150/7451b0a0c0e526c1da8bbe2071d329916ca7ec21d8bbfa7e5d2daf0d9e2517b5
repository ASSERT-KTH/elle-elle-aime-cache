{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      // Check if the function is being assigned to an object property\n      if (parent.getType() == Token.ASG) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.getType() == Token.GETPROP) {\n          // It's being assigned to an object property\n          String objName = lhs.getFirstChild().getString();\n          String propName = lhs.getLastChild().getString();\n          ObjectType objType = (ObjectType) findNameType(objName, lastLocalScope);\n          if (objType != null) {\n            FunctionType funcType = createFunctionTypeFromNode(n);\n            objType.setPropertyType(propName, funcType, true); // true for declared\n          }\n        }\n      } else {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}