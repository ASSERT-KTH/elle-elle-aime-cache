{
    "generation": "/**\n * Visit a node in a local scope, and add any local variables or catch\n * parameters into the local symbol table.\n *\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        // Handle named function expressions\n        defineNamedFunctionInScope(parent.getString(), n, parent);\n      } else {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.ASSIGN:\n      // Handle assignments like goog.foo = function() {...};\n      if (n.getFirstChild().isQualifiedName()) {\n        String qname = n.getFirstChild().getQualifiedName();\n        Node functionNode = n.getSecondChild();\n        if (functionNode.isFunction()) {\n          defineNamedFunctionInScope(qname, functionNode, n);\n        }\n      }\n      break;\n  }\n}\n\nprivate void defineNamedFunctionInScope(String name, Node functionNode, Node parent) {\n  JSDocInfo jsDoc = NodeUtil.getFunctionJSDocInfo(functionNode);\n  JSType functionType = typeRegistry.createFunctionTypeWithVarArgs(null, jsDoc.getParameterTypes());\n  Var var = scope.declare(name, functionNode, functionType, null);\n  var.markAsInjected();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}