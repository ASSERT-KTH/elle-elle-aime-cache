{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {\n    handleFunctionInputs(parent);\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      Node functionName = parent.getFirstChild();\n      if (functionName != null && functionName.getType() == Token.NAME) {\n        defineDeclaredFunction(n, functionName);\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.ASSIGN:\n      if (parent.getType() == Token.NAME && parent.getParent() != null &&\n          parent.getParent().getType() == Token.TYPE_APPLICATION &&\n          parent.getParent().getFirstChild() == parent) {\n        Node typeNode = parent.getNext().getFirstFirstChild();\n        if (typeNode != null) {\n          setTypeOfNode(parent, typeNode);\n        }\n      }\n      break;\n  }\n}\n\nprivate void handleFunctionInputs(Node n) {\n  if (n.getSecondChild().getType() == Token.PARAM_LIST) {\n    for (Node param = n.getSecondChild().getFirstChild(); param != null; param = param.getNext()) {\n      if (param.getType() == Token.NAME || param.getType() == Token.DEFAULT_VALUE) {\n        addParameter(param);\n      }\n    }\n  }\n}\n\nprivate void addParameter(Node param) {\n  if (param.getType() == Token.DEFAULT_VALUE) {\n    param = param.getFirstChild();\n  }\n  scope.createSlot(param.getString(), param).setType(param.getJSType());\n}\n\nprivate void defineDeclaredFunction(Node n, Node functionName) {\n  // Code to define a declared function.\n}\n\nprivate void defineCatch(Node n, Node parent) {\n  // Code to define a catch block.\n}\n\nprivate void defineVar(Node n, Node parent) {\n  // Code to define a var.\n}\n\nprivate void setTypeOfNode(Node n, Node typeNode) {\n  // Code to set the type of a node.\n}\n\nprivate void attachLiteralTypes(Node n) {\n  // Code to attach literal types to a node.\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}