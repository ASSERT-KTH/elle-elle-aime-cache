{
    "generation": "    /**\n     * Visit a node in a local scope, and add any local variables or catch\n     * parameters into the local symbol table.\n     *\n     * @param t The node traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     */\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.EXPR_RESULT:\n          maybeDefineStubFunction(n);\n          break;\n      }\n    }\n\n    /**\n     * Handles the case where a stub function is being defined, e.g., \n     * /** @param {number} x * / obj.foo;.\n     */\n    private void maybeDefineStubFunction(Node n) {\n      Node expr = n.getFirstChild();\n      if (expr != null && expr.isGetProp() && expr.getJSDocInfo() != null) {\n        defineStubFunction(expr);\n      }\n    }\n\n    private void defineStubFunction(Node getPropNode) {\n      String name = getPropNode.getQualifiedName();\n      if (name != null) {\n        scope.declare(name, getPropNode, getPropNode.getJSDocInfo().getType(), /* inferred= */ false);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}