{
    "generation": "        } else { // specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        }\n        if (doc == null) {\n            if (charsetName == null)\n                charsetName = defaultCharset;\n            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);\n            if (bomCharset != null && bomCharset.offset) // creating the buffered reader ignores the input pos, so must skip here\n                reader.skip(1);\n            try {\n                doc = parser.parseInput(reader, baseUri);\n            } catch (UncheckedIOException e) {\n                // io exception when parsing (not seen before because reading the stream as we go)\n                throw e.ioException();\n            }\n            Charset charset = Charset.forName(charsetName);\n            if (!charset.canEncode()) {\n                // if the selected charset can't encode, fall back to utf-8\n                charset = Charset.forName(\"UTF-8\");\n                charsetName = \"UTF-8\";\n                doc.charset(charset);\n                Elements metaElements = doc.select(\"meta[charset]\");\n                if (!metaElements.isEmpty()) {\n                    metaElements.first().attr(\"charset\", charsetName);\n                }\n            }\n            doc.outputSettings().charset(charset);\n        }\n        input.close();\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}