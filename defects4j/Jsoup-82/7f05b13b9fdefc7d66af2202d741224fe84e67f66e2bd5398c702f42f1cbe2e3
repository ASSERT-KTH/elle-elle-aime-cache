{
    "generation": "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {\n        if (input == null)\n            return new Document(baseUri);\n        input = ConstrainableInputStream.wrap(input, bufferSize, 0);\n\n        Document doc = null;\n        boolean fullyRead = false;\n\n        input.mark(bufferSize);\n        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1);\n        fullyRead = input.read() == -1;\n        input.reset();\n\n        BomCharset bomCharset = detectCharsetFromBom(firstBytes);\n        if (bomCharset != null)\n            charsetName = bomCharset.charset;\n\n        if (charsetName == null) {\n            String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();\n            doc = parser.parseInput(docData, baseUri);\n\n            String foundCharset = findCharsetFromMetaTagsAndXmlDeclaration(doc);\n\n            foundCharset = validateCharset(foundCharset);\n            if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                try {\n                    Charset.forName(foundCharset);\n                    charsetName = foundCharset;\n                    doc = null;\n                } catch (Exception e) {\n                    charsetName = \"UTF-8\";\n                    doc = null;\n                }\n            } else if (!fullyRead) {\n                doc = null;\n            }\n        } else {\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        }\n\n        if (doc == null) {\n            if (charsetName == null)\n                charsetName = defaultCharset;\n            InputStreamReader reader;\n            try {\n                reader = new InputStreamReader(input, charsetName);\n            } catch (Exception e) {\n                charsetName = \"UTF-8\";\n                reader = new InputStreamReader(input, charsetName);\n            }\n            BufferedReader bufferedReader = new BufferedReader(reader, bufferSize);\n            if (bomCharset != null && bomCharset.offset)\n                bufferedReader.skip(1);\n\n            try {\n                doc = parser.parseInput(bufferedReader, baseUri);\n            } catch (UncheckedIOException e) {\n                throw e.ioException();\n            }\n            Charset charset = Charset.forName(charsetName);\n            doc.outputSettings().charset(charset);\n        }\n        input.close();\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}