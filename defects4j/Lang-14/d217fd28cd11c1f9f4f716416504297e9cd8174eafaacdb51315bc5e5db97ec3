{
    "generation": "/**\n * <p>Compares two CharSequences, returning {@code true} if they represent\n * equal sequences of characters.</p>\n *\n * <p>{@code null}s are handled without exceptions. Two {@code null}\n * references are considered to be equal. The comparison is case sensitive.</p>\n *\n * <pre>\n * StringUtils.equals(null, null)   = true\n * StringUtils.equals(null, \"abc\")  = false\n * StringUtils.equals(\"abc\", null)  = false\n * StringUtils.equals(\"abc\", \"abc\") = true\n * StringUtils.equals(\"abc\", \"ABC\") = false\n * </pre>\n *\n * @see java.lang.CharSequence#equals(Object)\n * @param cs1  the first CharSequence, may be {@code null}\n * @param cs2  the second CharSequence, may be {@code null}\n * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n */\npublic static boolean equals(CharSequence cs1, CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true; // both are the same object\n    }\n    if (cs1 == null || cs2 == null) {\n        return false; // one is null, the other is not\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2); // both are strings, use equals()\n    }\n    // fall back to iterating over characters for other CharSequence types\n    int length = cs1.length();\n    if (length!= cs2.length()) {\n        return false; // different lengths, cannot be equal\n    }\n    for (int i = 0; i < length; i++) {\n        if (cs1.charAt(i)!= cs2.charAt(i)) {\n            return false; // mismatched characters\n        }\n    }\n    return true; // all characters match\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}