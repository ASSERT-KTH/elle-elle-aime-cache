{
    "generation": "    /** {@inheritDoc} */\n    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n        if (f.value(min) * f.value(max) > 0) {\n            throw new IllegalArgumentException(\"f must have different signs at endpoints\");\n        }\n\n        double fMin = f.value(min);\n        double fMax = f.value(max);\n        double fInitial = f.value(initial);\n\n        if (fMin == 0.0) {\n            return min;\n        } else if (fMax == 0.0) {\n            return max;\n        } else if (fInitial == 0.0) {\n            return initial;\n        }\n\n        // If the initial guess is not a root after evaluation...\n        if (fMin * fInitial > 0) {\n            min = initial;\n            fMin = fInitial;\n        } else if (fMax * fInitial > 0) {\n            max = initial;\n            fMax = fInitial;\n        }\n\n        double base = min;\n        double fBase = fMin;\n        double fRoot;\n        double root, fRootBefore;\n\n        while (true) {\n            root = (max + base) / 2;\n            if (base == root) {\n                break;\n            }\n            fRoot = f.value(root);\n            if (fRoot == 0.0 || Math.abs(root - base) <= absoluteAccuracy) {\n                break;\n            }\n            if (fBase * fRoot <= 0) {\n                max = root;\n            } else {\n                base = root;\n                fBase = fRoot;\n            }\n        }\n\n        fRootBefore = f.value(root);\n        if (fRootBefore == 0.0) {\n            return root;\n        } else {\n            throw new MaxIterationsExceededException(root);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}