{
    "generation": "/** {@inheritDoc} */\npublic double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, IllegalArgumentException, FunctionEvaluationException {\n    checkParameters(f, min, max, initial);\n    double start = min;\n    double end = max;\n    double midpoint;\n    double fm;\n    double fStart = f.value(min);\n    double fEnd = f.value(max);\n\n    if (fStart * fEnd > 0) {\n        throw new IllegalArgumentException(\"f(a) and f(b) must have different signs\");\n    }\n\n    while (end - start > getAbsoluteAccuracy()) {\n        midpoint = (start + end) / 2.0;\n        fm = f.value(midpoint);\n        if (fm == 0.0) {\n            return midpoint;\n        }\n        if (fStart * fm > 0.0) {\n            start = midpoint;\n            fStart = fm;\n        } else {\n            end = midpoint;\n            fEnd = fm;\n        }\n    }\n    return (start + end) / 2.0;\n}\n\nprotected void checkParameters(final UnivariateRealFunction f, double min, double max, double initial)\n        throws IllegalArgumentException {\n    if (f == null) {\n        throw new IllegalArgumentException(\"Function cannot be null\");\n    }\n    if (min >= max) {\n        throw new IllegalArgumentException(\"Minimum value must be less than the maximum value\");\n    }\n    if (initial < min || initial > max) {\n        throw new IllegalArgumentException(\"Initial value must be between minimum and maximum values\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}