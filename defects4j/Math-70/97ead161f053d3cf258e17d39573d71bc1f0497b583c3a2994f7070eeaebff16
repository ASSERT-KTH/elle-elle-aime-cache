{
    "generation": "    /** {@inheritDoc} */\n    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n        // Use the provided initial value as the starting point for bisection\n        double x = initial;\n        \n        // Check the sign of the function at the endpoints\n        double fMin = f.value(min);\n        double fMax = f.value(max);\n        \n        // Ensure the function has opposite signs at the endpoints\n        if (fMin * fMax >= 0) {\n            throw new IllegalArgumentException(\"Function must have opposite signs at endpoints.\");\n        }\n        \n        // Bisection loop\n        for (int i = 0; i < maximalIterationCount; i++) {\n            double fValue = f.value(x);\n            \n            if (fValue == 0.0) {\n                // Exact solution found\n                return x;\n            } else if (fValue * fMin < 0) {\n                // The solution is in the lower half\n                max = x;\n                fMax = fValue;\n            } else {\n                // The solution is in the upper half\n                min = x;\n                fMin = fValue;\n            }\n            \n            // Update x to the midpoint\n            x = (min + max) / 2;\n            \n            // Check for convergence\n            if (Math.abs(max - min) <= absoluteAccuracy) {\n                return x;\n            }\n        }\n        \n        // Maximum iterations reached without convergence\n        throw new MaxIterationsExceededException(maximalIterationCount);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}