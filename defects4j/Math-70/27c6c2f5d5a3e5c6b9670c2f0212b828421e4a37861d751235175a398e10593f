{
    "generation": "    /** {@inheritDoc} */\n    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n        checkParameters(min < max);\n\n        clearResults();\n        verifyBracketing(f, min, max);\n\n        int evaluations = functionEvaluationChecker.check(f);\n\n        int uMin = countSignChange(f, FunctionEvaluationWrapper.univariateF(f));\n        int absoluteAccuracyNumber = getSafeAbsolutePrecision(max - min);\n\n        for (maxIterations.checkIterations(evaluations.getCost()); functionEvaluationChecker.result == null\n                || (!isNumberValid(uncheckedResult[0][functionEvaluationWrapperIndex]); ++evaluations.getIterationsCount()) {\n\n            computeBisectionPoint(previousSolversResult.min, lastPoint, minimumPointDifferenceField.maxAbsolutePrecision));\n\n            calculateValue(fa, midpoint[0 + functionInputValueIndex]).calculateFractionAndCheckType();\n\n        verifySequenceInitialized();\n\n    // Rest omitted for briefness\n      return bestSolution[verifiedSolutionAtBestIndex(verifiedValuesFoundFromSequencesArray)];",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}