{
    "generation": "    /**\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @param version the version string to convert\n     * @return the version, for example 131 for Java 1.3.1, or 0 if the version string is null, empty, or invalid\n     */\n    static int toJavaVersionInt(String version) {\n        if (version == null || version.isEmpty()) {\n            return 0;\n        }\n\n        // Extract the version number from the string\n        String[] parts = version.split(\"[^0-9]+\");\n        StringBuilder versionBuilder = new StringBuilder();\n        for (String part : parts) {\n            if (!part.isEmpty()) {\n                versionBuilder.append(part);\n                if (versionBuilder.length() >= 3) {\n                    break;\n                }\n            }\n        }\n\n        String extractedVersion = versionBuilder.toString();\n        if (extractedVersion.length() < 3) {\n            extractedVersion = String.format(\"%-3s\", extractedVersion).replace(' ', '0');\n        }\n\n        try {\n            return Integer.parseInt(extractedVersion);\n        } catch (NumberFormatException e) {\n            return 0;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}