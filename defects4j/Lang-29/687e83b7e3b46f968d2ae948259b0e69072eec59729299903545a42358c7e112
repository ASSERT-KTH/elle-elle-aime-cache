{
    "generation": "static int toJavaVersionInt(String version) {\n    if (version == null) {\n        return 0;\n    }\n    int[] versionArray = toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE);\n    return toVersionInt(versionArray);\n}\n\nprivate static int[] toJavaVersionIntArray(String version, int trimSize) {\n    int[] versionArray = new int[trimSize];\n    if (version == null) {\n        return versionArray;\n    }\n    Matcher m = JAVA_VERSION_PATTERN.matcher(version);\n    if (!m.find()) {\n        return versionArray;\n    }\n    String[] versionNumbers = m.group(1).split(\"\\\\.\");\n    for (int i = 0; i < versionNumbers.length && i < trimSize; i++) {\n        try {\n            versionArray[i] = Integer.parseInt(versionNumbers[i]);\n        } catch (NumberFormatException e) {\n            versionArray[i] = 0;\n        }\n    }\n    return versionArray;\n}\n\nprivate static int toVersionInt(int[] versionParts) {\n    int version = 0;\n    for (int versionPart : versionParts) {\n        version = version * 100 + versionPart % 100;\n    }\n    return version;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}