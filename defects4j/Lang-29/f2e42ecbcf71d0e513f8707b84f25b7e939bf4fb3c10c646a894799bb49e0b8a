{
    "generation": "    /**\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @return the version, for example 131 for Java 1.3.1\n     */\n    static int toJavaVersionInt(String version) {\n        if (version == null || version.isEmpty()) {\n            return 0;\n        }\n        String[] versionParts = toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE);\n        if (versionParts == null || versionParts.length == 0 || versionParts[0] == null) {\n            return 0;\n        }\n        int major = Integer.parseInt(versionParts[0]);\n        int minor = (versionParts.length > 1 && versionParts[1] != null) ? Integer.parseInt(versionParts[1]) : 0;\n        return major * 100 + minor * 10;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}