{
    "generation": "/**\n * <p>\n * Converts the given Java version string to an <code>int</code>.\n * </p>\n * \n * <p>\n * Example return values:\n * </p>\n * <ul>\n * <li><code>120</code> for Java 1.2</li>\n * <li><code>131</code> for Java 1.3.1</li>\n * <li><code>160</code> for Java 1.6.0_20</li>\n * </ul>\n * \n * <p>\n * Patch releases are not reported.\n * </p>\n * <p>\n * This method is package private instead of private to support unit test invocation.\n * </p>\n * \n * @param version the version string, may be null or empty\n * @return the version, for example 131 for Java 1.3.1, or 0 if the version string cannot be parsed\n */\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n\n    String[] parts = version.split(\"\\\\D+\");\n    if (parts.length < 2) {\n        return 0;\n    }\n\n    int major = 0;\n    int minor = 0;\n    int patch = 0;\n\n    try {\n        major = Integer.parseInt(parts[0]);\n        minor = Integer.parseInt(parts[1]);\n        if (parts.length > 2) {\n            patch = Integer.parseInt(parts[2]);\n        }\n    } catch (NumberFormatException e) {\n        return 0;\n    }\n\n    return major * 100 + minor * 10 + patch;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}