{
    "generation": "/**\n * <p>\n * Converts the given Java version string to an {@code int}.\n * </p>\n * \n * <p>\n * Example return values:\n * </p>\n * <ul>\n * <li>{@code 120} for Java 1.2</li>\n * <li>{@code 131} for Java 1.3.1</li>\n * <li>{@code 160} for Java 1.6.0_20</li>\n * </ul>\n * \n * <p>\n * Patch releases are not reported.\n * </p>\n * <p>\n * This method is package private instead of private to support unit test invocation.\n * </p>\n * \n * @return the version, for example 131 for Java 1.3.1\n */\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    \n    // Remove any non-digit and non-dot characters\n    String cleanedVersion = version.replaceAll(\"[^\\\\d.]\", \"\");\n    \n    if (cleanedVersion.isEmpty()) {\n        return 0;\n    }\n    \n    String[] parts = cleanedVersion.split(\"\\\\.\");\n    if (parts.length < 2) {\n        return 0;\n    }\n    \n    try {\n        int major = Integer.parseInt(parts[0]);\n        int minor = Integer.parseInt(parts[1]);\n        int build = parts.length > 2 ? Integer.parseInt(parts[2]) : 0;\n        \n        // Convert to the expected format: 120 for 1.2, 131 for 1.3.1, etc.\n        return major * 100 + minor * 10 + build;\n    } catch (NumberFormatException e) {\n        return 0;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}