{
    "generation": "/**\n * Try to fold arithmetic binary operators\n */\nprivate Node performArithmeticOp(int opType, Node left, Node right) {\n  // Same initial conditions...\n\n  switch (opType) {\n    // ... same cases as before BITAND, BITOR, BITXOR, ADD, SUB, MUL...\n\n    case Token.MOD:\n      if (Math.abs(rval) < EPSILON) {\n        error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n        return null;\n      }\n      result = lval % rval;\n      break;\n    case Token.DIV:\n      if (Math.abs(rval) < EPSILON) {\n        error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n        return null;\n      }\n      result = lval / rval;\n      break;\n    default:\n      throw new Error(\"Unexpected arithmetic operator\");\n  }\n\n  // ... same final conditions...\n  return null;\n}\n\nprivate static final double EPSILON = 1e-15;  // Small value to account for precision issues",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}