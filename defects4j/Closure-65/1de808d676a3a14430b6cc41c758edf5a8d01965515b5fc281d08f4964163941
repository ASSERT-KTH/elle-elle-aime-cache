{
    "generation": "static String strEscape(String s, char quote,\n                         String doublequoteEscape,\n                         String singlequoteEscape,\n                         String backslashEscape,\n                         CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\\\\':\n                if (i + 1 < s.length()) {\n                    char nextChar = s.charAt(i + 1);\n                    switch (nextChar) {\n                        case '0':\n                        case 'n':\n                        case 'r':\n                        case 't':\n                        case '\\\\':\n                        case '\\\"':\n                        case '\\'':\n                            sb.append(\"\\\\\").append(nextChar);\n                            i++;\n                            break;\n                        case 'x':\n                            if (i + 3 < s.length()) {\n                                sb.append(\"\\\\x\").append(s.substring(i + 1, i + 3));\n                                i += 3;\n                                continue;\n                            }\n                            break;\n                        case 'u':\n                            if (i + 5 < s.length()) {\n                                sb.append(\"\\\\u\").append(s.substring(i + 1, i + 5));\n                                i += 5;\n                                continue;\n                            }\n                            break;\n                    }\n                }\n                break;\n            case '\\0': sb.append(\"\\\\0\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\t': sb.append(\"\\\\t\"); break;\n            case '\\\"': sb.append(doublequoteEscape); break;\n            case '\\'': sb.append(singlequoteEscape); break;\n            case '>':\n                if (i >= 2 &&\n                    ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n                     (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                                    END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                         START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}