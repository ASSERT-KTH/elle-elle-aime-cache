{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     *\n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        if (!token.startsWith(\"-\") || token.length() == 1)\n        {\n            return false;\n        }\n\n        // remove leading \"-\"\n        String optName = token.substring(1);\n\n        // split on \"=\" to handle cases like \"-S=V\" or \"-SV1=V2\"\n        int pos = optName.indexOf(\"=\");\n        optName = pos == -1 ? optName : optName.substring(0, pos);\n\n        // validate the options one character at a time for concatenated short options\n        for (int i = 0; i < optName.length(); i++) {\n            String singleOption = String.valueOf(optName.charAt(i));\n            if (!options.hasShortOption(singleOption)) {\n                return false;\n            }\n        }\n\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}