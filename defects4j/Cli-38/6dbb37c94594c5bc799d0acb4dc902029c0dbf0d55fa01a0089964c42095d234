{
    "generation": "/**\n * Tells if the token looks like a short option.\n * \n * @param token\n */\nprivate boolean isShortOption(String token)\n{\n    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n    if (!token.startsWith(\"-\") || token.length() < 2)\n    {\n        return false;\n    }\n\n    // Check for several concatenated short options\n    for (int i = 1; i < token.length(); i++) {\n        if (token.charAt(i) == '=') {\n            // short option with value, e.g. -S=V\n            break;\n        } else if (!Character.isLetter(token.charAt(i))) {\n            // invalid character in short option\n            return false;\n        }\n    }\n\n    // remove leading \"-\" and \"=value\"\n    int pos = token.indexOf(\"=\");\n    String optName = pos == -1? token.substring(1) : token.substring(1, pos);\n    \n    // Check individual short options in case of concatenation\n    for (char c : optName.toCharArray()) {\n        if (!options.hasShortOption(String.valueOf(c))) {\n            return false;\n        }\n    }\n    \n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}