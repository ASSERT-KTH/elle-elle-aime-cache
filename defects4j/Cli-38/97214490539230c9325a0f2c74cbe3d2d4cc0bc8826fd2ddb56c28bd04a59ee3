{
    "generation": "/**\n * Tells if the token looks like a short option.\n * \n * @param token\n */\nprivate boolean isShortOption(String token)\n{\n    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n    if (!token.startsWith(\"-\") || token.length() < 2)\n    {\n        return false;\n    }\n\n    // remove leading \"-\" \n    String optName = token.substring(1);\n\n    // check if token contains concatenated short options\n    for (char c : optName.toCharArray()) {\n        if (c == '=') break; // stop at the first '=' sign\n        if (options.hasShortOption(String.valueOf(c))) {\n            continue;\n        } else {\n            // if an unknown character is found, treat the token as a single short option\n            return options.hasShortOption(optName);\n        }\n    }\n    return true; // all characters in the token are known short options\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}