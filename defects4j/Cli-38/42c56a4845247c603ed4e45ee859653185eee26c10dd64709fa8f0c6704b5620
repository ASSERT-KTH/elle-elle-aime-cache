{
    "generation": "/**\n * Tells if the token looks like a short option.\n * \n * @param token\n */\nprivate boolean isShortOption(String token)\n{\n    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n    if (!token.startsWith(\"-\") || token.length() == 1)\n    {\n        return false;\n    }\n\n    // Check for concatenated short options\n    for (int i = 1; i < token.length(); i++) {\n        char c = token.charAt(i);\n        if (c == '=') {\n            // Option with value, check the part before '='\n            String optName = token.substring(1, i);\n            return options.hasShortOption(optName);\n        } else if (!options.hasShortOption(String.valueOf(c))) {\n            // If we encounter a character that is not a valid short option, it's not a valid short option token\n            return false;\n        }\n    }\n\n    // If we've made it this far, all characters after '-' are valid short options\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}