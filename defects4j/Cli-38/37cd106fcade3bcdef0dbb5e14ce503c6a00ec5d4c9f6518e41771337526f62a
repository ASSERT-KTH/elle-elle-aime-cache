{
    "generation": "/**\n * Tells if the token looks like a short option.\n * \n * @param token\n */\nprivate boolean isShortOption(String token)\n{\n    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n    if (!token.startsWith(\"-\") || token.length() < 2)\n    {\n        return false;\n    }\n\n    // remove leading \"-\"\n    String optName = token.substring(1);\n\n    // check for several concatenated short options\n    for (char c : optName.toCharArray()) {\n        if (c == '=') {\n            break; // stop at the first \"=\"\n        }\n        String singleOpt = String.valueOf(c);\n        if (!options.hasShortOption(singleOpt)) {\n            return false; // if any part is not a short option, return false\n        }\n    }\n\n    // if we have \"=\" in the token, the part before \"=\" should be a valid short option\n    int pos = token.indexOf(\"=\");\n    if (pos!= -1) {\n        optName = token.substring(1, pos);\n        return options.hasShortOption(optName);\n    }\n\n    // at this point, we only have concatenated short options without \"=\"\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}