{
    "generation": "/**\n * Tells if the token looks like a short option and processes concatenated short options.\n * \n * @param token the token to check\n * @return true if the token is a short option, false otherwise\n */\nprivate boolean isShortOption(String token) \n{\n    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n    if (!token.startsWith(\"-\") || token.length() == 1) \n    {\n        return false;\n    }\n\n    // remove leading \"-\"\n    String optName = token.substring(1);\n\n    // check for several concatenated short options\n    if (optName.length() > 1 &&!optName.contains(\"=\")) \n    {\n        for (char c : optName.toCharArray()) \n        {\n            String shortOpt = String.valueOf(c);\n            if (!options.hasShortOption(shortOpt)) \n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // remove \"=value\"\n    int pos = optName.indexOf(\"=\");\n    optName = pos == -1? optName : optName.substring(0, pos);\n    return options.hasShortOption(optName);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}