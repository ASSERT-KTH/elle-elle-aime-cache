{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     * \n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        if (!token.startsWith(\"-\") || token.length() == 1)\n        {\n            return false;\n        }\n\n        // Check the first character after the '-' to see if it's a valid short option\n        String firstOpt = token.substring(1, 2);\n        if (!options.hasShortOption(firstOpt)) {\n            return false;\n        }\n        \n        // If token length is 2, it's a single short option (like -t)\n        if (token.length() == 2) {\n            return true;\n        }\n\n        // Check if it contains an '=' for an assigned value\n        if (token.contains(\"=\")) {\n            int pos = token.indexOf(\"=\");\n            String optName = token.substring(1, pos);\n            return optName.length() == 1 && options.hasShortOption(optName);\n        }\n\n        // Check for concatenated short options\n        for (int i = 1; i < token.length(); i++) {\n            if (!options.hasShortOption(token.substring(i, i + 1))) {\n                return false;\n            }\n        }\n        \n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}