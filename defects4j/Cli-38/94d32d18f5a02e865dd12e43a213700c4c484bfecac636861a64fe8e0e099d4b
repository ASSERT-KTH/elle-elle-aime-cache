{
    "generation": "/**\n * Tells if the token looks like a short option.\n * \n * @param token\n */\nprivate boolean isShortOption(String token)\n{\n    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n    if (!token.startsWith(\"-\") || token.length() == 1)\n    {\n        return false;\n    }\n\n    // remove leading \"-\"\n    String optName = token.substring(1);\n\n    // check if token contains concatenated short options\n    for (char c : optName.toCharArray()) {\n        String singleOpt = String.valueOf(c);\n        if (!options.hasShortOption(singleOpt) &&!singleOpt.contains(\"=\")) {\n            return false; // not a short option if any character doesn't match\n        }\n    }\n\n    // specifically check for the initial token without splitting, for \"=value\" case\n    int pos = token.indexOf(\"=\");\n    String initialOptName = pos == -1? optName : optName.substring(0, pos);\n    return options.hasShortOption(initialOptName);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}