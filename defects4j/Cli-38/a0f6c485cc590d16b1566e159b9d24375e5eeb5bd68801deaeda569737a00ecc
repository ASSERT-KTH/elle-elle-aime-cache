{
    "generation": "/**\n * Tells if the token looks like a short option.\n * \n * @param token\n */\nprivate boolean isShortOption(String token)\n{\n    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n    if (!token.startsWith(\"-\") || token.length() == 1)\n    {\n        return false;\n    }\n\n    // Check if the token contains '=' for options with values\n    int pos = token.indexOf(\"=\");\n    if (pos != -1) {\n        // If '=' is found, only consider the part before '='\n        String optName = token.substring(1, pos);\n        return options.hasShortOption(optName);\n    } else {\n        // For concatenated options, check each character\n        for (int i = 1; i < token.length(); i++) {\n            String optName = token.substring(i, i + 1);\n            if (!options.hasShortOption(optName)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}