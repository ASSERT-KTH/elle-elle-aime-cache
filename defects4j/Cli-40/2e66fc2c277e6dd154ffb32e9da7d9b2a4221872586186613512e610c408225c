{
    "generation": "import java.util.regex.Pattern;\n\npublic class TypeHandler {\n\n    public static final Class<String> STRING_VALUE = String.class;\n    public static final Class<Object> OBJECT_VALUE = Object.class;\n    public static final Class<Number> NUMBER_VALUE = Number.class;\n    public static final Class<Date> DATE_VALUE = Date.class;\n    public static final Class<Class<?>> CLASS_VALUE = Class.class;\n    public static final Class<File> FILE_VALUE = File.class;\n    public static final Class<File> EXISTING_FILE_VALUE = File.class;\n    public static final Class<File[]> FILES_VALUE = File[].class;\n    public static final Class<URL> URL_VALUE = URL.class;\n\n    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n    {\n        if (STRING_VALUE == clazz)\n        {\n            return (T) str;\n        }\n        else if (OBJECT_VALUE == clazz)\n        {\n            return (T) createObject(str);\n        }\n        else if (NUMBER_VALUE == clazz)\n        {\n            return (T) createNumber(str);\n        }\n        else if (DATE_VALUE == clazz)\n        {\n            return (T) createDate(str);\n        }\n        else if (CLASS_VALUE == clazz)\n        {\n            return (T) createClass(str);\n        }\n        else if (FILE_VALUE == clazz)\n        {\n            return (T) createFile(str);\n        }\n        else if (EXISTING_FILE_VALUE == clazz)\n        {\n            return (T) openFile(str);\n        }\n        else if (FILES_VALUE == clazz)\n        {\n            return (T) createFiles(str);\n        }\n        else if (URL_VALUE == clazz)\n        {\n            return (T) createURL(str);\n        }\n        else\n        {\n            try {\n                return clazz.getConstructor(String.class).newInstance(str);\n            } catch (Exception e) {\n                throw new ParseException(\"Unable to create value for class \" + clazz.getName() + \" from string \" + str, e);\n            }\n        }\n    }\n\n    // Dummy methods for the sake of completeness\n    private static Object createObject(String str) {\n        return str;\n    }\n\n    private static Number createNumber(String str) {\n        return Integer.parseInt(str);\n    }\n\n    private static Date createDate(String str) {\n        return new Date(Long.parseLong(str));\n    }\n\n    private static Class<?> createClass(String str) {\n        try {\n            return Class.forName(str);\n        } catch (ClassNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static File createFile(String str) {\n        return new File(str);\n    }\n\n    private static File openFile(String str) {\n        File file = new File(str);\n        if (file.exists()) {\n            return file;\n        } else {\n            throw new RuntimeException(\"File does not exist: \" + str);\n        }\n    }\n\n    private static File[] createFiles(String str) {\n        return new File(str).listFiles();\n    }\n\n    private static URL createURL(String str) {\n        try {\n            return new URL(str);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}