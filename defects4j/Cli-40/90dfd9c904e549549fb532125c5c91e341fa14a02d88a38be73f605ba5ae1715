{
    "generation": "import java.util.regex.Pattern;\nimport java.text.ParseException;\nimport java.net.URL;\nimport java.io.File;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Locale;\n\npublic class TypeHandler {\n\n    /**\n     * Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     * @throws ParseException if the value creation for the given class failed\n     */\n    @SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\n    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return (T) str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return (T) createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return (T) createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return (T) createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return (T) createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return (T) createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return (T) openFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return (T) createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return (T) createURL(str);\n        }\n        else if (clazz == Integer.class)\n        {\n            try {\n                return (T) Integer.valueOf(str);\n            } catch (NumberFormatException e) {\n                throw new ParseException(\"Invalid integer value: \" + str);\n            }\n        }\n        else if (clazz == Long.class)\n        {\n            try {\n                return (T) Long.valueOf(str);\n            } catch (NumberFormatException e) {\n                throw new ParseException(\"Invalid long value: \" + str);\n            }\n        }\n        else if (clazz == Double.class)\n        {\n            try {\n                return (T) Double.valueOf(str);\n            } catch (NumberFormatException e) {\n                throw new ParseException(\"Invalid double value: \" + str);\n            }\n        }\n        else if (clazz == Boolean.class)\n        {\n            return (T) Boolean.valueOf(str);\n        }\n        else\n        {\n            throw new ParseException(\"Unsupported type: \" + clazz.getName());\n        }\n    }\n\n    // Dummy implementations for the helper methods\n    private static Object createObject(String str) {\n        // Implementation\n        return str;\n    }\n\n    private static Number createNumber(String str) {\n        // Implementation\n        return Integer.parseInt(str);\n    }\n\n    private static Date createDate(String str) {\n        // Implementation\n        try {\n            return new SimpleDateFormat(\"yyyy-MM-dd\", Locale.US).parse(str);\n        } catch (java.text.ParseException e) {\n            throw new ParseException(\"Invalid date value: \" + str);\n        }\n    }\n\n    private static Class<?> createClass(String str) {\n        // Implementation\n        try {\n            return Class.forName(str);\n        } catch (ClassNotFoundException e) {\n            throw new ParseException(\"Class not found: \" + str);\n        }\n    }\n\n    private static File createFile(String str) {\n        // Implementation\n        return new File(str);\n    }\n\n    private static File openFile(String str) {\n        // Implementation\n        File file = new File(str);\n        if (!file.exists()) {\n            throw new ParseException(\"File does not exist: \" + str);\n        }\n        return file;\n    }\n\n    private static File[] createFiles(String str) {\n        // Implementation\n        return new File[]{new File(str)};\n    }\n\n    private static URL createURL(String str) {\n        // Implementation\n        try {\n            return new URL(str);\n        } catch (java.net.MalformedURLException e) {\n            throw new ParseException(\"Invalid URL: \" + str);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}