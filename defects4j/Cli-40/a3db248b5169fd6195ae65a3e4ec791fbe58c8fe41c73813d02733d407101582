{
    "generation": "    /**\n     * Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     * @throws ParseException if the value creation for the given class failed\n     */\n    @SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\n    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n    {\n        if (clazz == String.class)\n        {\n            return (T) str;\n        }\n        else if (clazz == Object.class)\n        {\n            return (T) createObject(str);\n        }\n        else if (clazz == Number.class)\n        {\n            return (T) createNumber(str);\n        }\n        else if (clazz == Date.class)\n        {\n            return (T) createDate(str);\n        }\n        else if (clazz == Class.class)\n        {\n            return (T) createClass(str);\n        }\n        else if (clazz == File.class)\n        {\n            return (T) createFile(str);\n        }\n        else if (clazz == File.class) // Assuming FILES_VALUE is mapped to File[]\n        {\n            return (T) createFiles(str);\n        }\n        else if (clazz == URL.class)\n        {\n            return (T) createURL(str);\n        }\n        else\n        {\n            throw new ParseException(\"Unable to create value for class: \" + clazz.getName());\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}