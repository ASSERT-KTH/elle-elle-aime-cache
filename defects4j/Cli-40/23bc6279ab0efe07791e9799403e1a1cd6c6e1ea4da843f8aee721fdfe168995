{
    "generation": "    @SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\n    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n    {\n        try\n        {\n            if (PatternOptionBuilder.STRING_VALUE == clazz)\n            {\n                return (T) str;\n            }\n            else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n            {\n                return (T) createObject(str);\n            }\n            else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n            {\n                return (T) createNumber(str);\n            }\n            else if (PatternOptionBuilder.DATE_VALUE == clazz)\n            {\n                return (T) createDate(str);\n            }\n            else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n            {\n                return (T) createClass(str);\n            }\n            else if (PatternOptionBuilder.FILE_VALUE == clazz)\n            {\n                return (T) createFile(str);\n            }\n            else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n            {\n                return (T) openFile(str);\n            }\n            else if (PatternOptionBuilder.FILES_VALUE == clazz)\n            {\n                return (T) createFiles(str);\n            }\n            else if (PatternOptionBuilder.URL_VALUE == clazz)\n            {\n                return (T) createURL(str);\n            }\n            else if (clazz == Integer.class)\n            {\n                return (T) Integer.valueOf(str);\n            }\n            else if (clazz == Double.class)\n            {\n                return (T) Double.valueOf(str);\n            }\n            else if (clazz == Float.class)\n            {\n                return (T) Float.valueOf(str);\n            }\n            else if (clazz == Long.class)\n            {\n                return (T) Long.valueOf(str);\n            }\n            else if (clazz == Boolean.class)\n            {\n                return (T) Boolean.valueOf(str);\n            }\n            else\n            {\n                throw new ParseException(\"Unsupported class: \" + clazz);\n            }\n        }\n        catch (Exception e)\n        {\n            throw new ParseException(\"Unable to parse value '\" + str + \"' for class: \" + clazz);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}