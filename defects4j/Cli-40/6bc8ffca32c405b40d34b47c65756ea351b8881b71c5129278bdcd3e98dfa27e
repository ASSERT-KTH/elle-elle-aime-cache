{
    "generation": "/**\n * Returns the <code>Object</code> of type <code>clazz</code>\n * with the value of <code>str</code>.\n *\n * @param str the command line value\n * @param clazz the type of argument\n * @return The instance of <code>clazz</code> initialised with\n * the value of <code>str</code>.\n * @throws ParseException if the value creation for the given class failed\n */\n@SuppressWarnings(\"unchecked\")\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (String.class == clazz)\n    {\n        return (T) str;\n    }\n    else if (Integer.class == clazz)\n    {\n        return (T) Integer.valueOf(str);\n    }\n    else if (Double.class == clazz)\n    {\n        return (T) Double.valueOf(str);\n    }\n    else if (Date.class == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (Class.class == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (File.class == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (URL.class == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n        throw new ParseException(\"Unsupported type: \" + clazz.getName());\n    }\n}\n\n// The methods createObject, createNumber, createDate, createClass, createFile, openFile, createFiles and createURL are assumed to be implemented elsewhere in the code",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}