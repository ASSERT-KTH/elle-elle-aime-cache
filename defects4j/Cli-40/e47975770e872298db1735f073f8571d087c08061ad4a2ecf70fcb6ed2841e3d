{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {\n    if (PatternOptionBuilder.STRING_VALUE == clazz) {\n        return (T) str;\n    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {\n        return (T) createObject(str);\n    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {\n        return (T) createNumber(str);\n    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {\n        return (T) createDate(str);\n    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {\n        return (T) createClass(str);\n    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {\n        return (T) createFile(str);\n    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {\n        return (T) openFile(str);\n    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {\n        return (T) createFiles(str);\n    } else if (PatternOptionBuilder.URL_VALUE == clazz) {\n        return (T) createURL(str);\n    } else if (Number.class.isAssignableFrom(clazz)) {\n        try {\n            if (Integer.class == clazz) {\n                return (T) Integer.valueOf(str);\n            }\n            // Add other number type conversions if needed\n            throw new ParseException(\"Unable to parse number type: \" + clazz);\n        } catch (NumberFormatException e) {\n            throw new ParseException(\"Unable to parse number: \" + str);\n        }\n    } else {\n        throw new ParseException(\"Unable to handle type: \" + clazz);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}