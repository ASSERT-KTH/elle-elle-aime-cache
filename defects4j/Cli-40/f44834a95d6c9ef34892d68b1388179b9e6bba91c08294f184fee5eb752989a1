{
    "generation": "import java.text.ParseException;\nimport java.util.regex.Pattern;\n\npublic class TypeHandler {\n\n    /**\n     * Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     * @throws ParseException if the value creation for the given class failed\n     */\n    @SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\n    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return (T) str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return (T) createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return (T) createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return (T) createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return (T) createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return (T) createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return (T) openFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return (T) createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return (T) createURL(str);\n        }\n        else\n        {\n            try {\n                return clazz.cast(convertToType(str, clazz));\n            } catch (Exception e) {\n                throw new ParseException(\"Failed to create value for type \" + clazz + \" from string \" + str, e);\n            }\n        }\n    }\n\n    private static <T> T convertToType(String str, Class<T> clazz) throws Exception {\n        if (clazz == Integer.class) {\n            return clazz.cast(Integer.parseInt(str));\n        } else if (clazz == Long.class) {\n            return clazz.cast(Long.parseLong(str));\n        } else if (clazz == Float.class) {\n            return clazz.cast(Float.parseFloat(str));\n        } else if (clazz == Double.class) {\n            return clazz.cast(Double.parseDouble(str));\n        } else if (clazz == Boolean.class) {\n            return clazz.cast(Boolean.parseBoolean(str));\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type: \" + clazz);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}