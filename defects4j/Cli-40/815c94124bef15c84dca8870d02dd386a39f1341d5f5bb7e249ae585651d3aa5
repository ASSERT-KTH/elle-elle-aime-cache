{
    "generation": "public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return clazz.cast(str);\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return clazz.cast(createObject(str));\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        if (clazz == Integer.class)\n        {\n            return clazz.cast(Integer.parseInt(str));\n        }\n        else if (clazz == Float.class)\n        {\n            return clazz.cast(Float.parseFloat(str));\n        }\n        else if (clazz == Double.class)\n        {\n            return clazz.cast(Double.parseDouble(str));\n        }\n        else\n        {\n            throw new ParseException(\"Unsupported numeric type\");\n        }\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return clazz.cast(createDate(str));\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return clazz.cast(createClass(str));\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return clazz.cast(createFile(str));\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return clazz.cast(openFile(str));\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return clazz.cast(createFiles(str));\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return clazz.cast(createURL(str));\n    }\n    else\n    {\n        throw new ParseException(\"Unsupported type\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}