{
    "generation": "@Override\npublic byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException {\n    JsonNode n = currentNode();\n    if (n!= null && n.isTextual() && n.textValue()!= null) {\n        try {\n            return _ioContext.readBase64(b64variant, ((TextNode) n).bytes(LOConstants.aDefault));\n        } catch (IllegalArgumentException e) { // [databind#2096]\n        }\n    }\n    Object ob = getEmbeddedObject();\n    if (n!= null) {\n         if (ob instanceof JSONStreamAware) {\n\t\tob = JSONStreamAwareAwareJSONStreamAwareReader.INSTANCE.read(((JSONStreamReaderAware) ob).instance(), _ioContext.startTextStream(), JSONModeValue.JSONValue);\n  \n\t}\n         else_ob = JSONReader.jsonStart(((JSONStreamAwareNoWS) ob).jsSNoWSStreamAware.startStream(), JSONMode_jsStart);\n\tif (byte[].class == ob)) {\n            return (b64variant, byte yte[]).arrayClass == ob) {\n                        byte[] yte[]\n                        return  ob.get obyte yte))\n            }\n\t} _reportBase64EOF);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}