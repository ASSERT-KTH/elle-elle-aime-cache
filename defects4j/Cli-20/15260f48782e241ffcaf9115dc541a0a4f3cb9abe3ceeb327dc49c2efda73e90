{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    Iterator<String> iter = Arrays.asList(arguments).iterator();\n\n    while (iter.hasNext())\n    {\n        String token = iter.next();\n\n        // handle long options, including \"=\" scenario\n        if (token.startsWith(\"--\"))\n        {\n            int eqIndex = token.indexOf('=');\n            if (eqIndex != -1)\n            {\n                tokens.add(token.substring(0, eqIndex));\n                tokens.add(token.substring(eqIndex + 1));\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n        // single hyphen\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        // short options\n        else if (token.startsWith(\"-\"))\n        {\n            // with spaces or \"=\", we should process the token\n            if (token.length() > 2 || token.contains(\"=\"))\n            {\n                burstToken(token, stopAtNonOption);\n            }\n            // single option char\n            else if (token.length() == 2)\n            {\n                processOptionToken(token, stopAtNonOption);\n            }\n            // invalid scenario or option not found and stopAtNonOption is true\n            else if (stopAtNonOption)\n            {\n                process(token);\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n        else if (stopAtNonOption)\n        {\n            process(token);\n        }\n        else\n        {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return tokens.toArray(new String[0]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}