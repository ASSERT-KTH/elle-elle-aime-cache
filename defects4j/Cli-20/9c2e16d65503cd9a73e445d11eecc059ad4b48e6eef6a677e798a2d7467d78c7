{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n\n    // an iterator for the command line tokens\n    Iterator<String> iter = Arrays.asList(arguments).iterator();\n\n    // process each command line token\n    while (iter.hasNext()) {\n        // get the next command line token\n        String token = iter.next();\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\")) {\n            int eqIdx = token.indexOf('=');\n            if (eqIdx != -1 && eqIdx > 2) {\n                tokens.add(token.substring(0, eqIdx));\n                tokens.add(token.substring(eqIdx + 1));\n            } else if (stopAtNonOption) {\n                process(token);\n            } else {\n                tokens.add(token);\n            }\n        }\n        // single hyphen\n        else if (\"-\".equals(token)) {\n            tokens.add(token);\n        } else if (token.startsWith(\"-\")) {\n            if (token.length() > 2) {\n                burstToken(token, stopAtNonOption);\n            } else if (token.length() == 2) {\n                processOptionToken(token, stopAtNonOption);\n            }\n        } else if (stopAtNonOption) {\n            process(token);\n        } else {\n            tokens.add(token);\n        }\n\n        gobble(iter);\n    }\n\n    return tokens.toArray(new String[0]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}