{
    "generation": "\nprotected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n\n{\n\n    init();\n\n    this.options = options;\n\n    // an iterator for the command line tokens\n\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    // process each command line token\n\n    while (iter.hasNext())\n\n    {\n\n        // get the next command line token\n\n        String token = (String) iter.next();\n\n        // handle long option --foo or --foo=bar\n\n        if (token.startsWith(\"--\"))\n\n        {\n\n            if (token.indexOf('=') != -1)\n\n            {\n\n                tokens.add(token.substring(0, token.indexOf('=')));\n\n                tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n\n            }\n\n            else\n\n            {\n\n                tokens.add(token);\n\n            }\n\n        }\n\n        // single hyphen\n\n        else if (\"-\".equals(token))\n\n        {\n\n            tokens.add(token);\n\n        }\n\n        else if (token.startsWith(\"-\"))\n\n        {\n\n            if (token.length() == 2)\n\n            {\n\n                processOptionToken(token, stopAtNonOption);\n\n            }\n\n            else if (!stopAtNonOption)\n\n            {\n\n                burstToken(token, stopAtNonOption);\n\n            }\n\n            else\n\n            {\n\n                tokens.add(token);\n\n            }\n\n        }\n\n        else\n\n        {\n\n            if (stopAtNonOption)\n\n            {\n\n                process(token);\n\n            }\n\n            else\n\n            {\n\n                tokens.add(token);\n\n            }\n\n        }\n\n        gobble(iter);\n\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}