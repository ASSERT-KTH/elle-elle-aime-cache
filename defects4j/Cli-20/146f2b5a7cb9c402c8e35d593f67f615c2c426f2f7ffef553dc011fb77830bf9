{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n    List<String> tokens = new ArrayList<>();\n\n    for (String token : arguments)\n    {\n        if (token.startsWith(\"--\"))\n        {\n            if (token.indexOf('=') != -1)\n            {\n                tokens.add(token.substring(0, token.indexOf('=')));\n                tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                processOptionToken(token, stopAtNonOption);\n            }\n            else if (options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            else\n            {\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                for(String arg: token.split(\"(?=\\\\B)\"))\n                {\n                    tokens.add(arg);\n                }\n                break;\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n    }\n\n    return tokens.toArray(new String[0]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}