{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    // an iterator for the command line tokens\n    Iterator iter = Arrays.asList(arguments).iterator();\n\n    // process each command line token\n    while (iter.hasNext())\n    {\n        // get the next command line token\n        String token = (String) iter.next();\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\"))\n        {\n            if (token.indexOf('=') != -1)\n            {\n                tokens.add(token.substring(0, token.indexOf('=')));\n                tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n\n        // single hyphen\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                if (!processOptionToken(token, stopAtNonOption) && stopAtNonOption)\n                {\n                    processNonOption(token, iter, stopAtNonOption);\n                    break;\n                }\n            }\n            else if (options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            // requires bursting\n            else\n            {\n                if (!burstToken(token, stopAtNonOption) && stopAtNonOption)\n                {\n                    processNonOption(token, iter, stopAtNonOption);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            if (stopAtNonOption)\n            {\n                processNonOption(token, iter, stopAtNonOption);\n                break;\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n\n        if (stopAtNonOption && !currentOption.isSet())\n        {\n            gobble(iter);\n            break;\n        }\n        else\n        {\n            gobble(iter);\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}\n\nprivate boolean processOptionToken(String token, boolean stopAtNonOption)\n{\n    if (options.hasOption(token))\n    {\n        tokens.add(token);\n        currentOption = options.getOption(token);\n        return true;\n    }\n    else if (stopAtNonOption)\n    {\n        return false;\n    }\n    return true;\n}\n\nprivate boolean burstToken(String token, boolean stopAtNonOption)\n{\n    boolean allOptions = true;\n    for (int i = 1; i < token.length(); i++)\n    {\n        String ch = \"-\" + token.charAt(i);\n        if (options.hasOption(ch))\n        {\n            tokens.add(ch);\n            currentOption = options.getOption(ch);\n        }\n        else\n        {\n            allOptions = false;\n            if (stopAtNonOption)\n            {\n                break;\n            }\n        }\n    }\n    return allOptions;\n}\n\nprivate void processNonOption(String token, Iterator iter, boolean stopAtNonOption)\n{\n    tokens.add(token);\n    while (iter.hasNext())\n    {\n        tokens.add((String) iter.next());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}