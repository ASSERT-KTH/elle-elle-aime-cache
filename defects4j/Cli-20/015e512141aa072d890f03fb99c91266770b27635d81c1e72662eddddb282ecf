{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options = options;\n\n    // an iterator for the command line tokens\n    Iterator<String> iter = Arrays.asList(arguments).iterator();\n\n    // process each command line token\n    while (iter.hasNext()) {\n        // get the next command line token\n        String token = iter.next();\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\")) {\n            int indexOfEquals = token.indexOf('=');\n            if (indexOfEquals != -1) {\n                tokens.add(token.substring(0, indexOfEquals));\n                tokens.add(token.substring(indexOfEquals + 1));\n            } else {\n                tokens.add(token);\n            }\n        }\n        // single hyphen\n        else if (\"-\".equals(token)) {\n            tokens.add(token);\n        }\n        // short option(s) -abtoast or -a\n        else if (token.startsWith(\"-\")) {\n            if (token.length() == 2) {\n                processOptionToken(token, stopAtNonOption);\n            } else {\n                // requires bursting\n                burstToken(token, stopAtNonOption);\n            }\n        }\n        // non-option\n        else if (stopAtNonOption) {\n            // stop processing and add all remaining tokens as non-option arguments\n            tokens.add(token);\n            while (iter.hasNext()) {\n                tokens.add(iter.next());\n            }\n            break;\n        } else {\n            tokens.add(token);\n        }\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}