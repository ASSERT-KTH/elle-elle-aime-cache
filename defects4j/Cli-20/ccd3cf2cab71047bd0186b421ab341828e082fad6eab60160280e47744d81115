{
    "generation": "/**\n * <p>An implementation of {@link Parser}'s abstract\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n *\n * @param options The command line {@link Options}\n * @param arguments The command line arguments to be parsed\n * @param stopAtNonOption Specifies whether to stop flattening\n * when an non option is found.\n * @return The flattened <code>arguments</code> String array.\n */\nprotected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    init();\n    this.options = options;\n\n    // an iterator for the command line tokens\n    Iterator iter = Arrays.asList(arguments).iterator();\n    boolean burstingStopped = false; // track if bursting has stopped\n\n    // process each command line token\n    while (iter.hasNext())\n    {\n        // get the next command line token\n        String token = (String) iter.next();\n\n        // handle long option --foo or --foo=bar\n        if (token.startsWith(\"--\"))\n        {\n            if (token.indexOf('=')!= -1)\n            {\n                tokens.add(token.substring(0, token.indexOf('=')));\n                tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n            }\n            else\n            {\n                tokens.add(token);\n            }\n        }\n\n        // single hyphen\n        else if (\"-\".equals(token))\n        {\n            tokens.add(token);\n        }\n        else if (token.startsWith(\"-\"))\n        {\n            if (token.length() == 2)\n            {\n                processOptionToken(token, stopAtNonOption);\n                if (stopAtNonOption &&!options.hasOption(token.substring(1, 2))) {\n                    burstingStopped = true;\n                }\n            }\n            else if (options.hasOption(token))\n            {\n                tokens.add(token);\n            }\n            // requires bursting\n            else\n            {\n                if (!burstingStopped) {\n                    burstToken(token, stopAtNonOption);\n                    if (stopAtNonOption) {\n                        burstingStopped = true;\n                    }\n                }\n            }\n        }\n        else\n        {\n            if (stopAtNonOption &&!burstingStopped) {\n                burstingStopped = true;\n            }\n            if (burstingStopped) {\n                tokens.add(token);\n                while (iter.hasNext()) {\n                    tokens.add((String) iter.next());\n                }\n                break;\n            } else {\n                tokens.add(token);\n            }\n        }\n\n        gobble(iter);\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}