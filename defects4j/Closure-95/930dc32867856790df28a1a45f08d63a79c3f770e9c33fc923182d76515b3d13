{
    "generation": "/**\n * Defines a typed variable. The defining node will be annotated with the\n * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is\n * inferred.\n *\n * Slots may be any variable or any qualified name in the global scope.\n *\n * @param n the defining NAME or GETPROP node.\n * @param parent the {@code n}'s parent.\n * @param type the variable's type. It may be {@code null} if\n *     {@code inferred} is {@code true}.\n */\nvoid defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type!= null);\n\n  // Only allow declarations of NAMEs and qualfied names.\n  boolean shouldDeclareOnGlobalThis = false;\n  if (n.getType() == Token.NAME) {\n    Preconditions.checkArgument(\n        parent.getType() == Token.FUNCTION ||\n        parent.getType() == Token.VAR ||\n        parent.getType() == Token.LP ||\n        parent.getType() == Token.CATCH);\n    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n        (parent.getType() == Token.VAR ||\n         parent.getType() == Token.FUNCTION);\n  } else {\n    Preconditions.checkArgument(\n        n.getType() == Token.GETPROP &&\n        (parent.getType() == Token.ASSIGN ||\n         parent.getType() == Token.EXPR_RESULT));\n  }\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  // If n is a property, then we should really declare it in the\n  // scope where the root object appears. This helps out people\n  // who declare \"global\" names in an anonymous namespace.\n  Scope scopeToDeclareIn = getScopeForQualifiedNameRoot(variableName);\n  Preconditions.checkNotNull(scopeToDeclareIn);\n\n  // declared in closest scope?\n  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    validator.expectUndeclaredVariable(\n        sourceName, n, parent, oldVar, variableName, type);\n  } else {\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName,\n            type == null?\n                getNativeType(JSTypeNative.NO_TYPE) :\n                type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n\n    // If we're in the global scope, also declare var.prototype\n    // in the scope chain.\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n            fnType.getPrototype(), compiler.getInput(sourceName),\n            /* declared iff there's an explicit supertype */\n            superClassCtor == null ||\n            superClassCtor.getInstanceType().equals(\n                getNativeType(OBJECT_TYPE)));\n      }\n    }\n  }\n}\n\nprivate Scope getScopeForQualifiedNameRoot(String varName) {\n  Node rootNode = varName.getRootNode();\n  if (rootNode.isQualifiedNameForGlobal()) {\n    String globalVarName = varName.getRootNode().toString();\n    Scope global = compiler.getScriptScope(getCurrentScriptName());\n    Preconditions.checkNotNull(global);\n    Preconditions.checkArgument(globalVarName.equals(rootNode.getString()));\n    Var globalDecl = global.getVar(globalVarName);\n    // the global itself is definitely already declared;\n    // no one could try to refer to a nested property within an undeclared global symbol\n    Preconditions.checkNotNull(globalDecl);\n    Preconditions.checkNotNull(globalDecl.getFirstDeclarationId());\n    if (rootScopeMap.containsKey(rootNode.getName())) {\n      return findCommonScopeAncestorToDeclaredVariableScopes(IterableUtil.singletonIterable(scope));\n    }\n    declareMissingScopeTreeForQualifiedNameNamespace(compiler.getScript(scope.getSourceName()));\n    scope.rootScopeMap.put(varName.getRootName(), Boolean.TRUE);\n  }\n  return varName.getRootName().isValidGlobalQualifiedNameReference() || (rootScopeMap.containsKey(rootNode.getName()) && declaredNameScope.hasOwnBlockLevelLocal())? closestParentBlockForDeclaredHoisted : (rootScopeMap.containsKey(rootNode.getName()))? declaredNameScope.getCurrentVarNameSpace() : lastNodeBlockAncestorNotGlobalForScopesWithinItsNameForDecl ;\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}