{
    "generation": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  boolean shouldDeclareOnGlobalThis = false;\n  if (n.getType() == Token.NAME) {\n    Preconditions.checkArgument(\n        parent.getType() == Token.FUNCTION ||\n        parent.getType() == Token.VAR ||\n        parent.getType() == Token.LP ||\n        parent.getType() == Token.CATCH);\n    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n        (parent.getType() == Token.VAR ||\n         parent.getType() == Token.FUNCTION);\n  } else if (n.getType() == Token.GETPROP) {\n    Preconditions.checkArgument(\n        parent.getType() == Token.ASSIGN ||\n        parent.getType() == Token.EXPR_RESULT);\n    // For qualified names, resolve the root object's type and define the property on it.\n    String qualifiedName = n.getQualifiedName();\n    String[] parts = qualifiedName.split(\"\\\\.\");\n    String rootName = parts[0];\n    Var rootVar = scope.getVar(rootName);\n    if (rootVar != null && rootVar.getType() instanceof ObjectType) {\n      ObjectType rootType = (ObjectType) rootVar.getType();\n      rootType.defineProperty(\n          parts[1], type, /* isConstant */ false, /* isExternal */ false);\n      return; // No need to declare on global scope or further.\n    }\n  } else {\n    throw new IllegalStateException(\"Unexpected node type: \" + n.getType());\n  }\n\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  Scope scopeToDeclareIn = scope;\n  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    // Update existing declaration if necessary.\n    if (!inferred || oldVar.getType().isUnknownType()) {\n      oldVar.setType(type);\n    }\n  } else {\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName,\n            type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n            fnType.getPrototype(), compiler.getInput(sourceName),\n            superClassCtor == null ||\n            superClassCtor.getInstanceType().equals(\n                getNativeType(OBJECT_TYPE)));\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}