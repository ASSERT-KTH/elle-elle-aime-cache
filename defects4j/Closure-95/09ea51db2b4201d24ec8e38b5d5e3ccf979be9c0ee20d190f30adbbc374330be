{
    "generation": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  boolean shouldDeclareOnGlobalThis = false;\n  if (n.getType() == Token.NAME) {\n    Preconditions.checkArgument(\n        parent.getType() == Token.FUNCTION ||\n        parent.getType() == Token.VAR ||\n        parent.getType() == Token.LP ||\n        parent.getType() == Token.CATCH);\n    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n        (parent.getType() == Token.VAR ||\n         parent.getType() == Token.FUNCTION);\n  } else {\n    Preconditions.checkArgument(\n        n.getType() == Token.GETPROP &&\n        (parent.getType() == Token.ASSIGN ||\n         parent.getType() == Token.EXPR_RESULT));\n  }\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  Scope globalScope = scope.getRoot(); // get the global scope\n\n  // declare in the global scope if not already declared\n  if (!globalScope.isDeclared(variableName, false)) {\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    globalScope.declare(variableName, n, type, input, inferred);\n  } else {\n    Var oldVar = globalScope.getVar(variableName);\n    validator.expectUndeclaredVariable(\n        sourceName, n, parent, oldVar, variableName, type);\n  }\n\n  if (shouldDeclareOnGlobalThis) {\n    ObjectType globalThis =\n        typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n    boolean isExtern = input.isExtern();\n    if (inferred) {\n      globalThis.defineInferredProperty(variableName,\n          type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n          isExtern);\n    } else {\n      globalThis.defineDeclaredProperty(variableName, type, isExtern);\n    }\n  }\n\n  if (scope.isGlobal() && type instanceof FunctionType) {\n    FunctionType fnType = (FunctionType) type;\n    if (fnType.isConstructor() || fnType.isInterface()) {\n      FunctionType superClassCtor = fnType.getSuperClassConstructor();\n      scope.declare(variableName + \".prototype\", n,\n          fnType.getPrototype(), compiler.getInput(sourceName),\n          superClassCtor == null ||\n          !superClassCtor.getInstanceType().equals(\n              getNativeType(OBJECT_TYPE)));\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}