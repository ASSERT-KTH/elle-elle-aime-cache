{
    "generation": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  // Only allow declarations of NAMEs and qualified names.\n  boolean shouldDeclareOnGlobalThis = false;\n  if (n.getType() == Token.NAME) {\n    Preconditions.checkArgument(\n        parent.getType() == Token.FUNCTION ||\n        parent.getType() == Token.VAR ||\n        parent.getType() == Token.LP ||\n        parent.getType() == Token.CATCH);\n    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n        (parent.getType() == Token.VAR ||\n         parent.getType() == Token.FUNCTION);\n  } else if (n.getType() == Token.GETPROP) {\n    Preconditions.checkArgument(\n        parent.getType() == Token.ASSIGN ||\n        parent.getType() == Token.EXPR_RESULT);\n\n    // For GETPROP, resolve the receiver's type.\n    Node receiver = n.getFirstChild();\n    Var receiverVar = scope.getVar(receiver.getString());\n    if (receiverVar != null) {\n      JSType receiverType = receiverVar.getType();\n      if (receiverType.isObject()) {\n        // Define the property on the receiver's type.\n        String propertyName = n.getLastChild().getString();\n        receiverType.setPropertyType(propertyName, type, inferred);\n        return;\n      }\n    }\n    // Fallback: declare on globalThis if receiver is global.\n    shouldDeclareOnGlobalThis = scope.isGlobal();\n  } else {\n    throw new IllegalArgumentException(\"Unexpected node type: \" + n.getType());\n  }\n\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  // If n is a property, then we should really declare it in the\n  // scope where the root object appears. This helps out people\n  // who declare \"global\" names in an anonymous namespace.\n  Scope scopeToDeclareIn = scope;\n\n  // don't try to declare in the global scope if there's\n  // already a symbol there with this name.\n\n  // declared in closest scope?\n  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    validator.expectUndeclaredVariable(\n        sourceName, n, parent, oldVar, variableName, type);\n  } else {\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName,\n            type == null ?\n                getNativeType(JSTypeNative.NO_TYPE) :\n                type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n\n    // If we're in the global scope, also declare var.prototype\n    // in the scope chain.\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n            fnType.getPrototype(), compiler.getInput(sourceName),\n            // declared iff there's an explicit supertype\n            superClassCtor == null ||\n            superClassCtor.getInstanceType().equals(\n                getNativeType(OBJECT_TYPE)));\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}