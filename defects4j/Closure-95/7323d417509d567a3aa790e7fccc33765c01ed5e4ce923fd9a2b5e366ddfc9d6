{
    "generation": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  // Only allow declarations of NAMEs and qualified names.\n  boolean shouldDeclareOnGlobalThis = false;\n  if (n.getType() == Token.NAME) {\n    Preconditions.checkArgument(\n        parent.getType() == Token.FUNCTION ||\n        parent.getType() == Token.VAR ||\n        parent.getType() == Token.LP ||\n        parent.getType() == Token.CATCH);\n    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n        (parent.getType() == Token.VAR ||\n         parent.getType() == Token.FUNCTION);\n  } else {\n    Preconditions.checkArgument(\n        n.getType() == Token.GETPROP &&\n        (parent.getType() == Token.ASSIGN ||\n         parent.getType() == Token.EXPR_RESULT));\n  }\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  // If n is a property, declare it in the scope where the root object appears.\n  Scope scopeToDeclareIn = scope;\n\n  // Check if already declared in the current scope\n  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    validator.expectUndeclaredVariable(\n        sourceName, n, parent, oldVar, variableName, type);\n  } else {\n    // Handle qualified names\n    if (variableName.contains(\".\")) {\n      String[] parts = variableName.split(\"\\\\.\");\n      String rootName = parts[0];\n      Scope rootScope = scope.getRootScope();\n\n      if (rootScope.isDeclared(rootName, false)) {\n        Var rootVar = rootScope.getVar(rootName);\n        if (rootVar.getType() instanceof ObjectType) {\n          ObjectType objType = (ObjectType) rootVar.getType();\n          for (int i = 1; i < parts.length; i++) {\n            String part = parts[i];\n            JSType propertyType = objType.getPropertyType(part);\n            if (propertyType == null) {\n              // If property doesn't exist, add it\n              if (inferred) {\n                objType.defineInferredProperty(part, type, false);\n              } else {\n                objType.defineDeclaredProperty(part, type, false);\n              }\n            } else {\n              // If property exists, update its type if necessary\n              if (!inferred && !propertyType.equals(type)) {\n                objType.defineDeclaredProperty(part, type, false);\n              }\n            }\n            objType = (ObjectType) propertyType;\n          }\n        }\n      }\n    }\n\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName,\n            type == null ?\n                getNativeType(JSTypeNative.NO_TYPE) :\n                type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n\n    // Declare var.prototype in the scope chain if applicable\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n            fnType.getPrototype(), compiler.getInput(sourceName),\n            /* declared iff there's an explicit supertype */\n            superClassCtor != null &&\n            !superClassCtor.getInstanceType().equals(\n                getNativeType(JSTypeNative.OBJECT_TYPE)));\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}