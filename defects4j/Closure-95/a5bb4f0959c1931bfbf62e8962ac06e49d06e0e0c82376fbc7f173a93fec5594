{
    "generation": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  boolean shouldDeclareOnGlobalThis = false;\n  if (n.isName()) {\n    Preconditions.checkArgument(\n        parent.isFunction() ||\n        parent.isArrayLit() ||\n        parent.isCall() ||\n        parent.isCatch());\n    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n        (parent.isVar() ||\n         parent.isFunction());\n  } else if (n.isGetProp()) {\n    Preconditions.checkArgument(\n        parent.isAssign() ||\n        parent.isExprResult());\n  } else {\n    throw new IllegalArgumentException(\"Unsupported node type: \" + n.getType());\n  }\n\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  Scope scopeToDeclareIn = scope;\n\n  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    validator.expectUndeclaredVariable(\n        sourceName, n, parent, oldVar, variableName, type);\n  } else {\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n    if (scopeToDeclareIn.isGlobal() && shouldDeclareOnGlobalThis) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName,\n            type == null ?\n                getNativeType(JSTypeNative.NO_TYPE) :\n                type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                                  fnType.getPrototype(), compiler.getInput(sourceName),\n                                  /* declared iff there's an explicit supertype */\n                                  superClassCtor == null ||\n                                  superClassCtor.getInstanceType().equals(\n                                      getNativeType(OBJECT_TYPE)));\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}