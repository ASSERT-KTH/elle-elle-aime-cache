{
    "generation": "/**\n * Removes unreferenced arguments from a function declaration and when\n * possible the function's callSites.\n *\n * @param fnScope The scope inside the function\n */\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    \n    // Check if we're in SIMPLE_OPTIMIZATIONS mode or if debug flag is set\n    boolean isSimpleMode = compiler.getOptions().getCompilationLevel() == CompilationLevel.SIMPLE_OPTIMIZATIONS;\n    boolean isDebugEnabled = compiler.getOptions().debug;\n\n    if (isSimpleMode || isDebugEnabled) {\n        // In simple mode or with debug flag, don't remove unused function args\n        return;\n    }\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n            Var var = fnScope.getVar(lastArg.getString());\n            if (!referenced.contains(var)) {\n                argList.removeChild(lastArg);\n                compiler.reportCodeChange();\n            } else {\n                break;\n            }\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}