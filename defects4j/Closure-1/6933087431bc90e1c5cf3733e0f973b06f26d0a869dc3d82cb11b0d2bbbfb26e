{
    "generation": "/**\n * Removes unreferenced arguments from a function declaration and when\n * possible the function's callSites.\n *\n * @param fnScope The scope inside the function\n */\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean canModifyCallers = removeGlobal && modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    Node arg = argList.getFirstChild();\n    while (arg!= null) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n            if (!canModifyCallers || compilationLevel == CompilationLevel.WHITESPACE_ONLY\n                    || compilationLevel == CompilationLevel.SIMPLE_OPTIMIZATIONS\n                    || function.getParent() instanceof Node\n                    || function.getParent() instanceof ExternsRoot) {\n                arg = arg.getNext();\n            } else {\n                argList.removeChild(arg);\n                compiler.reportCodeChange();\n                arg = argList.getFirstChild();\n                continue;\n            }\n        }\n        arg = arg.getNext();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}