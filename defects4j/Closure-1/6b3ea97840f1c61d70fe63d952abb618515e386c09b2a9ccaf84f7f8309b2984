{
    "generation": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function);\n    \n    // Check if we're in SIMPLE_OPTIMIZATIONS mode\n    boolean isSimpleMode = compiler.getOptions().getLanguageOut().isEs5OrHigher();\n\n    if (!modifyCallers && !isSimpleMode) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n            Var var = fnScope.getVar(lastArg.getString());\n            if (!referenced.contains(var)) {\n                argList.removeChild(lastArg);\n                compiler.reportCodeChange();\n            } else {\n                break;\n            }\n        }\n    } else if (modifyCallers) {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}