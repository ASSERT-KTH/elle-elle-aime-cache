{
    "generation": "/**\n * Removes unreferenced arguments from a function declaration and when\n * possible the function's callSites.\n *\n * @param fnScope The scope inside the function\n */\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    // Check if we should remove unreferenced function args\n    if (!shouldRemoveUnreferencedFunctionArgs()) {\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n            Var var = fnScope.getVar(lastArg.getString());\n            if (!referenced.contains(var)) {\n                argList.removeChild(lastArg);\n                compiler.reportCodeChange();\n            } else {\n                break;\n            }\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}\n\n/**\n * Determines whether unreferenced function arguments should be removed.\n * \n * @return true if unreferenced function arguments should be removed, false otherwise\n */\nprivate boolean shouldRemoveUnreferencedFunctionArgs() {\n    // Do not remove unreferenced function args in SIMPLE_OPTIMIZATIONS mode\n    if (compilationLevel == CompilationLevel.SIMPLE_OPTIMIZATIONS) {\n        return false;\n    }\n    \n    // Do not remove unreferenced function args if debug flag is set to false\n    if (options.debug == false) {\n        return false;\n    }\n    \n    // Do not remove unreferenced function args if removeGlobal is false\n    if (options.removeGlobal == false) {\n        return false;\n    }\n    \n    // Otherwise, allow removal of unreferenced function args\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}