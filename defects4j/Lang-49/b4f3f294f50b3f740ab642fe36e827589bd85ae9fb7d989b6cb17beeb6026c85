{
    "generation": "/**\n * <p>Reduce the fraction to the smallest values for the numerator and\n * denominator, returning the result.</p>\n * \n * <p>For example, if this fraction represents 2/4, then the result\n * will be 1/2.</p>\n *\n * @return a new reduced fraction instance, or this if no simplification possible\n */\npublic Fraction reduce() {\n    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n    int newNumerator = numerator / gcd;\n    int newDenominator = denominator / gcd;\n    if ((numerator < 0 && denominator < 0) || (numerator > 0 && denominator > 0)) {\n        return Fraction.getFraction(Math.abs(newNumerator), Math.abs(newDenominator));\n    } else {\n        if (newNumerator > 0) {\n            return Fraction.getFraction(-Math.abs(newNumerator), Math.abs(newDenominator));\n        } else {\n            return Fraction.getFraction(Math.abs(newNumerator), Math.abs(newDenominator));\n        }\n    }\n    // Simplified to:\n    // return numerator >= 0 == denominator >= 0? \n    //         Fraction.getFraction(Math.abs(newNumerator), Math.abs(newDenominator)) : \n    //         Fraction.getFraction(-Math.abs(newNumerator), Math.abs(newDenominator));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}