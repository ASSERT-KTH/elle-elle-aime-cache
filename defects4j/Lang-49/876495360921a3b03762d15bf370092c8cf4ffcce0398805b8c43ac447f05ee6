{
    "generation": "/**\n * <p>Reduce the fraction to the smallest values for the numerator and\n * denominator, returning the result.</p>\n * \n * <p>For example, if this fraction represents 2/4, then the result\n * will be 1/2.</p>\n *\n * @return a new reduced fraction instance, or this if no simplification possible\n */\npublic Fraction reduce() {\n    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n    if (numerator == 0) { // special case for zero numerator\n        return Fraction.ZERO;\n    } else if (gcd == 1) {\n        // preserve the original sign\n        if (numerator < 0 ^ denominator < 0) {\n            return Fraction.getFraction(-Math.abs(numerator), Math.abs(denominator));\n        } else {\n            return this;\n        }\n    } else {\n        // simplify and preserve the original sign\n        int newNumerator = (numerator < 0 ^ denominator < 0)? \n            -Math.abs(numerator / gcd) : Math.abs(numerator / gcd);\n        return Fraction.getFraction(newNumerator, Math.abs(denominator / gcd));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}