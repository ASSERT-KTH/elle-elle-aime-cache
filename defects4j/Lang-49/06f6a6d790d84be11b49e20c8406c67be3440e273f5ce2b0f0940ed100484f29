{
    "generation": "/**\n * <p>Reduce the fraction to the smallest values for the numerator and\n * denominator, returning the result.</p>\n *\n * <p>For example, if this fraction represents 2/4, then the result\n * will be 1/2.</p>\n *\n * @return a new reduced fraction instance, or this if no simplification possible\n */\npublic Fraction reduce() {\n    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n    if (gcd == 1) {\n        return this;\n    }\n    int newNumerator = numerator / gcd;\n    int newDenominator = denominator / gcd;\n    // if the numerator is 0, make sure the denominator is 1\n    if (newNumerator == 0) {\n        newDenominator = 1;\n    }\n    if (newNumerator == numerator && newDenominator == denominator) {\n        return this;\n    }\n    // NOTE: newDenominator is never 0, because gcd is 1 when we would be\n    // dividing by zero\n    return Fraction.getFraction(newNumerator, newDenominator);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}