{
    "generation": "/**\n * <p>Reduce the fraction to the smallest values for the numerator and\n * denominator, returning the result.</p>\n * \n * <p>For example, if this fraction represents 2/4, then the result\n * will be 1/2.</p>\n *\n * @return a new reduced fraction instance, or this if no simplification possible\n */\npublic Fraction reduce() {\n    if (numerator == 0) {\n        return this; // already in simplest form (0/x)\n    }\n\n    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n    if (gcd == 1) {\n        return this; // already in simplest form\n    }\n    \n    int newNumerator = numerator / gcd;\n    int newDenominator = denominator / gcd;\n    \n    // Ensure the resulting fraction has a positive denominator\n    if (newDenominator < 0) {\n        newNumerator = -newNumerator;\n        newDenominator = -newDenominator;\n    }\n    \n    // Return this if the reduction doesn't change the values (aside from sign)\n    if (Math.abs(newNumerator) == Math.abs(numerator) && Math.abs(newDenominator) == Math.abs(denominator)) {\n        return this;\n    }\n    \n    return Fraction.getFraction(newNumerator, newDenominator);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}