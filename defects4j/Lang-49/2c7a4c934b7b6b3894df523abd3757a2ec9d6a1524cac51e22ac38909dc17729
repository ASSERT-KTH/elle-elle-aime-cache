{
    "generation": "/**\n * <p>Reduce the fraction to the smallest values for the numerator and\n * denominator, returning the result.</p>\n * \n * <p>For example, if this fraction represents 2/4, then the result\n * will be 1/2.</p>\n *\n * @return a new reduced fraction instance, or this if no simplification possible\n */\npublic Fraction reduce() {\n    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n    if (gcd == 1) {\n        return this;\n    }\n    int newNumerator = numerator / gcd;\n    int newDenominator = denominator / gcd;\n    // Make sure the sign of the fraction is preserved in the reduced form\n    if ((numerator < 0 && denominator < 0) || (numerator > 0 && denominator > 0)) {\n        // Both negative or both positive, so the result should be positive\n        return Fraction.getFraction(Math.abs(newNumerator), Math.abs(newDenominator));\n    } else {\n        // One negative and one positive, so the result should be negative\n        if (newNumerator > 0) {\n            newNumerator = -newNumerator;\n        }\n        return Fraction.getFraction(newNumerator, Math.abs(newDenominator));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}