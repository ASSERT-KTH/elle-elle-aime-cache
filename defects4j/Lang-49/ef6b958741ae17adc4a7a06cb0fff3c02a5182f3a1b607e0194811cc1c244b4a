{
    "generation": "/**\n * <p>Reduce the fraction to the smallest values for the numerator and\n * denominator, returning the result.</p>\n * \n * <p>For example, if this fraction represents 2/4, then the result\n * will be 1/2.</p>\n *\n * @return a new reduced fraction instance, or this if no simplification possible\n */\npublic Fraction reduce() {\n    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n    if (gcd == 1 || (numerator == 0 && gcd == denominator)) {\n        return this; // return original for 0 numerator to maintain denominator\n    }\n    int newNumerator = numerator / gcd;\n    int newDenominator = denominator / gcd;\n    \n    // Ensure the denominator is always positive\n    if (newDenominator < 0) {\n        newNumerator = -newNumerator;\n        newDenominator = -newDenominator;\n    }\n    \n    // Special case for reduced 0 numerator to always have denominator as 1\n    if (newNumerator == 0) {\n        newDenominator = 1;\n    }\n    \n    return Fraction.getFraction(newNumerator, newDenominator);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}