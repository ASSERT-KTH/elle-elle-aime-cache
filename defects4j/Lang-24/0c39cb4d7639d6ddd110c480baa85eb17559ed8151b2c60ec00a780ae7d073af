{
    "generation": "public static boolean isNumber(String str) {\n    if (str == null || str.isEmpty()) {\n        return false;\n    }\n    char[] chars = str.toCharArray();\n    int sz = chars.length;\n    boolean hasExp = false;\n    boolean hasDecPoint = false;\n    boolean allowSigns = false;\n    boolean foundDigit = false;\n    int start = (chars[0] == '-') ? 1 : 0; // Start after minus if present\n\n    if (sz > start + 1) {\n        if (chars[start] == '0' && (chars[start + 1] == 'x' || chars[start + 1] == 'X')) {\n            int i = start + 2;\n            if (i == sz) {\n                return false; // \"0x\" is not valid\n            }\n            for (; i < chars.length; i++) {\n                if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F')) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    sz--; // Adjust to leave a slot for checking qualifiers\n    int i = start;\n\n    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n        if (chars[i] >= '0' && chars[i] <= '9') {\n            foundDigit = true;\n            allowSigns = false;\n\n        } else if (chars[i] == '.') {\n            if (hasDecPoint || hasExp) {\n                return false; // Multiple decimal points or decimal in exponent\n            }\n            hasDecPoint = true;\n\n        } else if (chars[i] == 'e' || chars[i] == 'E') {\n            if (hasExp || !foundDigit) {\n                return false;\n            }\n            hasExp = true;\n            allowSigns = true;\n            foundDigit = false; // Reset because we need digits after 'E'\n\n        } else if (chars[i] == '+' || chars[i] == '-') {\n            if (!allowSigns) {\n                return false; // Sign not allowed here\n            }\n            allowSigns = false;\n            foundDigit = false; // Expect digit after the sign\n\n        } else {\n            return false; // Invalid character\n        }\n        i++;\n    }\n\n    if (i < chars.length) {\n        if (chars[i] >= '0' && chars[i] <= '9') {\n            return true; // Ends with digit\n        }\n        if (chars[i] == '.') {\n            return !hasDecPoint && !hasExp && foundDigit; // Trailing decimal point\n        }\n        if (chars[i] == 'e' || chars[i] == 'E') {\n            return false; // 'E' cannot terminate a valid number\n        }\n        if (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F') {\n            return foundDigit; // Valid float qualifiers\n        }\n        if (chars[i] == 'l' || chars[i] == 'L') {\n            return foundDigit && !hasDecPoint && !hasExp; // Valid long qualifier\n        }\n        return false; // Invalid trailing character\n    }\n\n    return !allowSigns && foundDigit; // Check final state\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}