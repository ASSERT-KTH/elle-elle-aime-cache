{
    "generation": "public static boolean isNumber(String str) {\n    if (str == null || str.isEmpty()) {\n        return false;\n    }\n\n    char[] chars = str.toCharArray();\n    int sz = chars.length;\n    boolean hasExp = false;\n    boolean hasDecPoint = false;\n    boolean allowSigns = false;\n    boolean foundDigit = false;\n    int start = (chars[0] == '-') ? 1 : 0;\n\n    if (sz > start + 1) {\n        if (chars[start] == '0' && (chars[start + 1] == 'x' || chars[start + 1] == 'X')) {\n            int i = start + 2;\n            if (i == sz) {\n                return false; // str == \"0x\"\n            }\n            for (; i < chars.length; i++) {\n                if ((chars[i] < '0' || chars[i] > '9') &&\n                    (chars[i] < 'a' || chars[i] > 'f') &&\n                    (chars[i] < 'A' || chars[i] > 'F')) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    sz--; // Exclude the potential type qualifier character\n    int i = start;\n\n    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n        char ch = chars[i];\n\n        if (ch >= '0' && ch <= '9') {\n            foundDigit = true;\n            allowSigns = false;\n        } else if (ch == '.') {\n            if (hasDecPoint || hasExp) {\n                return false; // Two decimal points or a decimal point in the exponent\n            }\n            hasDecPoint = true;\n        } else if (ch == 'e' || ch == 'E') {\n            if (hasExp || !foundDigit) {\n                return false; // Two 'E's or 'E' without a digit before it\n            }\n            hasExp = true;\n            allowSigns = true;\n            foundDigit = false; // Require a digit after 'E'\n        } else if (ch == '+' || ch == '-') {\n            if (!allowSigns) {\n                return false;\n            }\n            allowSigns = false;\n            foundDigit = false; // Require a digit after '+' or '-'\n        } else {\n            return false; // Illegal character\n        }\n        i++;\n    }\n\n    if (i < chars.length) {\n        char lastChar = chars[i];\n\n        if (lastChar >= '0' && lastChar <= '9') {\n            return true; // Trailing digit is valid\n        }\n        if (lastChar == '.') {\n            if (hasDecPoint || hasExp) {\n                return false; // Two decimal points or a decimal point in the exponent\n            }\n            return foundDigit; // Single trailing decimal point is valid\n        }\n        if (!allowSigns && (lastChar == 'd' || lastChar == 'D' || lastChar == 'f' || lastChar == 'F')) {\n            return foundDigit; // Float or double type qualifiers are valid\n        }\n        if (!allowSigns && (lastChar == 'l' || lastChar == 'L')) {\n            return foundDigit && !hasExp && !hasDecPoint; // Long type qualifier is valid only for integers\n        }\n        return false; // Illegal trailing character\n    }\n\n    return !allowSigns && foundDigit; // All checks passed\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}