{
    "generation": "    /**\n     * <p>Checks whether the String a valid Java number.</p>\n     *\n     * <p>Valid numbers include hexadecimal marked with the <code>0x</code>\n     * qualifier, scientific notation and numbers marked with a type\n     * qualifier (e.g. 123L).</p>\n     *\n     * <p><code>Null</code> and empty String will return\n     * <code>false</code>.</p>\n     *\n     * @param str  the <code>String</code> to check\n     * @return <code>true</code> if the string is a correctly formatted number\n     */\n    public static boolean isNumber(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        char[] chars = str.toCharArray();\n        int sz = chars.length;\n        boolean hasExp = false;\n        boolean hasDecPoint = false;\n        boolean allowSigns = false;\n        boolean foundDigit = false;\n        int start = (chars[0] == '-') ? 1 : 0;\n        if (sz > start + 1) {\n            if (chars[start] == '0' && chars[start + 1] == 'x') {\n                int i = start + 2;\n                if (i == sz) {\n                    return false; // str == \"0x\"\n                }\n                for (; i < chars.length; i++) {\n                    if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F')) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        sz--;\n        int i = start;\n        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                foundDigit = true;\n                allowSigns = false;\n            } else if (chars[i] == '.') {\n                if (hasDecPoint || hasExp) {\n                    return false;\n                }\n                hasDecPoint = true;\n            } else if ((chars[i] == 'e' || chars[i] == 'E') && sz != i + 1) { // Add check to ensure 'e' or 'E' is not the last character\n                if (hasExp) {\n                    return false;\n                }\n                if (!foundDigit) {\n                    return false;\n                }\n                hasExp = true;\n                allowSigns = true;\n            } else if (chars[i] == '+' || chars[i] == '-') {\n                if (!allowSigns) {\n                    return false;\n                }\n                allowSigns = false;\n                foundDigit = false;\n            } else if ((chars[i] == 'l' || chars[i] == 'L') && i == sz) { // Check for long integer qualifier ('L' or 'l')\n                return foundDigit && !hasExp && !hasDecPoint;\n            } else {\n                return false;\n            }\n            i++;\n        }\n        if (i < chars.length) {\n            if (chars[i] >= '0' && chars[i] <= '9' && !hasExp) {\n                return true;\n            }\n            if ((chars[i] == 'e' || chars[i] == 'E') && sz != i + 1) {\n                return false;\n            }\n            if (chars[i] == '.' && !hasExp && foundDigit) {\n                return true;\n            }\n            if ((chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F') && foundDigit && !hasExp) {\n                return true;\n            }\n            if ((chars[i] == 'l' || chars[i] == 'L') && foundDigit && !hasExp && !hasDecPoint) {\n                return true;\n            }\n        }\n        return !allowSigns && foundDigit;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}