{
    "generation": "public static boolean isNumber(String str) {\n    if (StringUtils.isEmpty(str)) {\n        return false;\n    }\n    char[] chars = str.toCharArray();\n    int sz = chars.length;\n    boolean hasExp = false;\n    boolean hasDecPoint = false;\n    boolean allowSigns = false;\n    boolean foundDigit = false;\n    int start = (chars[0] == '-') || (chars[0] == '+') ? 1 : 0;\n    if (sz > start + 1) {\n        if (chars[start] == '0' && (chars[start + 1] == 'x' || chars[start + 1] == 'X')) {\n            int i = start + 2;\n            if (i == sz) return false; // \"0x\", \"0X\" is not valid\n            for (; i < chars.length; i++) {\n                if ((chars[i] < '0' || chars[i] > '9') &&\n                    (chars[i] < 'a' || chars[i] > 'f') &&\n                    (chars[i] < 'A' || chars[i] > 'F')) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    sz--; // process until the last character for type qualifiers\n    int i = start;\n    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n        if (chars[i] >= '0' && chars[i] <= '9') {\n            foundDigit = true;\n            allowSigns = false;\n        } else if (chars[i] == '.') {\n            if (hasDecPoint || hasExp) {\n                return false; // only one decimal point and none in exponent\n            }\n            hasDecPoint = true;\n        } else if (chars[i] == 'e' || chars[i] == 'E') {\n            if (hasExp) return false; // only one exponent\n            if (!foundDigit) return false; // exponent must follow a digit\n            hasExp = true;\n            allowSigns = true;\n        } else if (chars[i] == '+' || chars[i] == '-') {\n            if (!allowSigns) return false;\n            allowSigns = false;\n            foundDigit = false; // require digit after exponent sign\n        } else {\n            return false;\n        }\n        i++;\n    }\n    if (i < chars.length) {\n        if (chars[i] >= '0' && chars[i] <= '9') {\n            return true;\n        }\n        if (chars[i] == '.') {\n            if (hasDecPoint || hasExp) {\n                return false;\n            }\n            return foundDigit;\n        }\n        if (chars[i] == 'e' || chars[i] == 'E') {\n            return false;\n        }\n        if (chars[i] == 'd' || chars[i] == 'D' ||\n            chars[i] == 'f' || chars[i] == 'F') {\n            return foundDigit;\n        }\n        if (chars[i] == 'l' || chars[i] == 'L') {\n            return foundDigit && !hasExp && !hasDecPoint;\n        }\n        return false; // invalid type qualifier\n    }\n    return !allowSigns && foundDigit;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}