{
    "generation": "  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE: Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than the\n    // one we're searching for, then start at that point.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        return null;\n      }\n      pos = nextpos + 1;\n    }\n\n    // Remember this offset for the next search we do.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    int nextNewline = js.indexOf('\\n', pos);\n    if (nextNewline == -1) {\n      // If there is no newline, check if we are at the end of the file and\n      // if there is still content, return it.\n      return pos < js.length() ? js.substring(pos) : null;\n    } else {\n      return js.substring(pos, nextNewline);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}