{
    "generation": "public ZipArchiveEntry getNextZipEntry() throws IOException {\n    if (closed || hitCentralDirectory) {\n        return null;\n    }\n    if (current != null) {\n        closeEntry();\n    }\n\n    try {\n        if (entriesRead == 0) {\n            // split archives have a special signature before the first local file header - look for it and fail if found.\n            bytesRead = in.read(LFH_BUF, 0, LFH_BUF.length);\n            if (bytesRead < LFH_BUF.length) {\n                throw new EOFException();\n            }\n            ZipLong sig = new ZipLong(LFH_BUF);\n            if (sig.equals(ZipLong.SPLIT_SIG)) {\n                throw new ZipException(\"Split archives are not supported\");\n            }\n        } else {\n            bytesRead = in.read(LFH_BUF, 0, LFH_BUF.length);\n            if (bytesRead < LFH_BUF.length) {\n                throw new EOFException();\n            }\n        }\n    } catch (final EOFException e) {\n        return null;\n    }\n\n    ZipLong sig = new ZipLong(LFH_BUF);\n    if (sig.equals(ZipLong.CFH_SIG) || sig.equals(ZipLong.AED_SIG)) {\n        hitCentralDirectory = true;\n        return null;\n    }\n    if (!sig.equals(ZipLong.LFH_SIG)) {\n        throw new ZipException(\"Unexpected record signature: 0x\" + Long.toHexString(sig.getValue()));\n    }\n\n    int off = WORD;\n    current = new CurrentEntry();\n    // Rest of the function...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}