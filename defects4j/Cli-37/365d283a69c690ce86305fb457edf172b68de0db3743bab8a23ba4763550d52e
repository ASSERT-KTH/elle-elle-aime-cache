{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     * \n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV)\n        if (token.startsWith(\"-\") && token.length() == 2) {\n            return options.hasShortOption(token.substring(1));\n        }\n        \n        // short options with value (-S=V)\n        if (token.startsWith(\"-\") && token.length() > 2 && token.charAt(2) == '=') {\n            return options.hasShortOption(token.substring(1, 2));\n        }\n        \n        // short options with multiple characters (-SV1=V2, -S1S2)\n        if (token.startsWith(\"-\") && token.length() > 2) {\n            String firstChar = token.substring(1, 2);\n            if (options.hasShortOption(firstChar)) {\n                Option opt = options.getOption(firstChar);\n                if (opt.hasArg()) {\n                    int equalsIndex = token.indexOf('=');\n                    if (equalsIndex > 0) {\n                        return token.substring(1, equalsIndex).chars().allMatch(c -> options.hasShortOption(String.valueOf((char)c)));\n                    } else {\n                        return token.substring(1).chars().allMatch(c -> options.hasShortOption(String.valueOf((char)c)));\n                    }\n                } else {\n                    return token.substring(1).chars().allMatch(c -> options.hasShortOption(String.valueOf((char)c)));\n                }\n            }\n        }\n        \n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}