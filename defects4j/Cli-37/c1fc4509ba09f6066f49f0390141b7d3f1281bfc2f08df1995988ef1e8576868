{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     *\n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        if (token.startsWith(\"-\") && token.length() >= 2) {\n            for (int i = 1; i < token.length(); i++) {\n                if (token.charAt(i) == '=' || token.charAt(i) == ' ') {\n                    // If an equal sign or space is encountered, check the option before it\n                    if (options.hasShortOption(token.substring(i - 1, i))) {\n                        return true;\n                    }\n                    break;\n                }\n                if (options.hasShortOption(token.substring(i, i + 1))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n\n        // remove leading \"-\" and \"=value\"\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}