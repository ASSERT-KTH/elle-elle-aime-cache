{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     * \n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        int offset = 1;\n        if (token.startsWith(\"-\") && token.length() > 2 && token.charAt(2)!= '=' \n            && Character.isJavaIdentifierPart(token.charAt(offset))) {\n            // looks like a grouped short options string; skip the options characters \n            while (offset < token.length() \n                    && Character.isJavaIdentifierPart(token.charAt(offset)) \n                    && token.charAt(offset)!= '-') {\n                offset++;\n            }\n            return token.substring(offset).isEmpty() ||!token.startsWith(\"-\") && Character.isLetter(token.charAt(1)) && token.indexOf(\"=\") > offset || \n            options.hasShortOption(token.substring(1, offset + 1).split(\"(?<=.)\"));\n\n        } else if(token.startsWith(\"-\") && options.hasShortOption(token.substring(1,2)) ||!token.substring(2).isEmpty()) {\n\n           // remove leading \"-\" and \"=value\"\n        }        \n       return  ( token.startsWith(\"-\")  &&!token.substring(2).isEmpty() \n          ||token.startsWith(\"-\"))   && token.length() >1 && \n                 token.startsWith(\"-\") && \n                    Character.isLetter(token.charAt(1)) &&\n           (( options.hasShortOption(token.substring(1)))&&options.hasShortOption(token.substring(2))\n                        );\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}