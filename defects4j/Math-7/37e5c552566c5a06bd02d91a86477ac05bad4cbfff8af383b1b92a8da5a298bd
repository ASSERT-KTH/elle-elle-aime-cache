{
    "generation": "    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {\n\n        double previousT = interpolator.getGlobalPreviousTime();\n        final double currentT = interpolator.getGlobalCurrentTime();\n\n        // Initialize the events states if needed\n        if (!statesInitialized) {\n            for (EventState state : eventsStates) {\n                state.reinitializeBegin(interpolator);\n            }\n            statesInitialized = true;\n        }\n\n        // Search for next events that may occur during the step\n        final int orderingSign = interpolator.isForward() ? +1 : -1;\n        SortedSet<EventState> occurringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n            public int compare(EventState es0, EventState es1) {\n                return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n            }\n        });\n\n        for (final EventState state : eventsStates) {\n            if (state.evaluateStep(interpolator)) {\n                // The event occurs during the current step\n                occurringEvents.add(state);\n            }\n        }\n\n        double nextT = currentT;\n        while (!occurringEvents.isEmpty()) {\n            // Handle the chronologically first event\n            final Iterator<EventState> iterator = occurringEvents.iterator();\n            final EventState currentEvent = iterator.next();\n            iterator.remove();\n\n            // Restrict the interpolator to the first part of the step, up to the event\n            final double eventT = currentEvent.getEventTime();\n            interpolator.setSoftPreviousTime(previousT);\n            interpolator.setSoftCurrentTime(eventT);\n\n            // Get state at event time\n            interpolator.setInterpolatedTime(eventT);\n            final double[] eventY = interpolator.getInterpolatedState().clone();\n\n            // Advance all event states to current time\n            for (EventState state : eventsStates) {\n                state.stepAccepted(eventT, eventY);\n            }\n\n            isLastStep = currentEvent.stop();\n\n            // Handle the first part of the step, up to the event\n            for (final StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n\n            if (isLastStep) {\n                // The event asked to stop integration\n                System.arraycopy(eventY, 0, y, 0, y.length);\n                return eventT;\n            }\n\n            boolean needReset = currentEvent.reset(eventT, eventY);\n            if (needReset) {\n                // Some event handler has triggered changes that\n                // invalidate the derivatives, we need to recompute them\n                System.arraycopy(eventY, 0, y, 0, y.length);\n                computeDerivatives(eventT, y, yDot);\n                resetOccurred = true;\n                return eventT;\n            }\n\n            // Prepare handling of the remaining part of the step\n            previousT = eventT;\n            interpolator.setSoftPreviousTime(eventT);\n            interpolator.setSoftCurrentTime(currentT);\n\n            // Check if more events occur in the remaining part of the step\n            SortedSet<EventState> newOccurringEvents = new TreeSet<EventState>(occurringEvents.comparator());\n            for (final EventState state : eventsStates) {\n                if (state.evaluateStep(interpolator)) {\n                    // The event occurs during the current step\n                    newOccurringEvents.add(state);\n                }\n            }\n\n            occurringEvents = newOccurringEvents;\n            nextT = eventT;\n        }\n\n        // Last part of the step, after the last event\n        interpolator.setInterpolatedTime(nextT);\n        final double[] currentY = interpolator.getInterpolatedState();\n        for (final EventState state : eventsStates) {\n            state.stepAccepted(nextT, currentY);\n            isLastStep = isLastStep || state.stop();\n        }\n        isLastStep = isLastStep || Precision.equals(nextT, tEnd, 1);\n\n        // Handle the remaining part of the step, after all events if any\n        for (StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        return nextT;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}