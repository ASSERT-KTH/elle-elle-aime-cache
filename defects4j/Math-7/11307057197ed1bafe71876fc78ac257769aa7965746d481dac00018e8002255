{
    "generation": "protected double acceptStep(final AbstractStepInterpolator interpolator,\n                            final double[] y, final double[] yDot, final double tEnd)\n    throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {\n\n    double previousT = interpolator.getGlobalPreviousTime();\n    final double currentT = interpolator.getGlobalCurrentTime();\n\n    // Initialize the events states if needed\n    if (!statesInitialized) {\n        for (EventState state : eventsStates) {\n            state.reinitializeBegin(interpolator);\n        }\n        statesInitialized = true;\n    }\n\n    // Search for next events that may occur during the step\n    final int orderingSign = interpolator.isForward() ? +1 : -1;\n    SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n        public int compare(EventState es0, EventState es1) {\n            return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n        }\n    });\n\n    for (final EventState state : eventsStates) {\n        if (state.evaluateStep(interpolator)) {\n            occuringEvents.add(state);\n        }\n    }\n\n    double nextT = previousT;\n    double[] nextY = y.clone();\n    double[] nextYDot = yDot.clone();\n    boolean resetOccurred = false;\n\n    while (!occuringEvents.isEmpty()) {\n        // Handle the chronologically first event\n        final Iterator<EventState> iterator = occuringEvents.iterator();\n        final EventState currentEvent = iterator.next();\n        iterator.remove();\n\n        // Restrict the interpolator to the first part of the step, up to the event\n        final double eventT = currentEvent.getEventTime();\n        interpolator.setSoftPreviousTime(nextT);\n        interpolator.setSoftCurrentTime(eventT);\n\n        // Get state at event time\n        interpolator.setInterpolatedTime(eventT);\n        final double[] eventY = interpolator.getInterpolatedState().clone();\n\n        // Advance all event states to current time\n        currentEvent.stepAccepted(eventT, eventY);\n        isLastStep = currentEvent.stop();\n\n        // Handle the first part of the step, up to the event\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        if (isLastStep) {\n            // The event asked to stop integration\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            for (final EventState remaining : occuringEvents) {\n                remaining.stepAccepted(eventT, eventY);\n            }\n            return eventT;\n        }\n\n        boolean needReset = currentEvent.reset(eventT, eventY);\n        if (needReset) {\n            // Some event handler has triggered changes that\n            // invalidate the derivatives, we need to recompute them\n            System.arraycopy(eventY, 0, nextY, 0, y.length);\n            computeDerivatives(eventT, nextY, nextYDot);\n            resetOccurred = true;\n        } else {\n            System.arraycopy(eventY, 0, nextY, 0, y.length);\n            System.arraycopy(yDot, 0, nextYDot, 0, yDot.length);\n        }\n\n        // Prepare handling of the remaining part of the step\n        nextT = eventT;\n\n        // Re-evaluate all events for the remaining part of the step\n        occuringEvents.clear();\n        interpolator.setSoftPreviousTime(nextT);\n        interpolator.setSoftCurrentTime(currentT);\n        for (final EventState state : eventsStates) {\n            if (state.evaluateStep(interpolator)) {\n                occuringEvents.add(state);\n            }\n        }\n    }\n\n    // Last part of the step, after the last event\n    interpolator.setSoftPreviousTime(nextT);\n    interpolator.setSoftCurrentTime(currentT);\n    interpolator.setInterpolatedTime(currentT);\n    final double[] currentY = interpolator.getInterpolatedState();\n    System.arraycopy(currentY, 0, nextY, 0, y.length);\n\n    for (final EventState state : eventsStates) {\n        state.stepAccepted(currentT, nextY);\n        isLastStep = isLastStep || state.stop();\n    }\n    isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n    // Handle the remaining part of the step, after all events if any\n    for (StepHandler handler : stepHandlers) {\n        handler.handleStep(interpolator, isLastStep);\n    }\n\n    // Update y and yDot with the final values\n    System.arraycopy(nextY, 0, y, 0, y.length);\n    System.arraycopy(nextYDot, 0, yDot, 0, yDot.length);\n\n    return currentT;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}