{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n    // Process arguments and enforce backward type inference\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      JSType argType = arg.getJSType();\n      if (argType != null && type != null && type.isFunctionType()) {\n        FunctionType functionType = type.toMaybeFunctionType();\n        if (functionType != null) {\n          int argIndex = arg.getIndexRelativeToSiblings() - 1;\n          if (argIndex > -1 && argIndex < functionType.getParameters().size()) {\n            JSType paramType = functionType.getParameters().get(argIndex);\n            if (paramType != null) {\n              scope = scope.withInferredType(arg, paramType);\n            }\n          }\n        }\n      }\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}