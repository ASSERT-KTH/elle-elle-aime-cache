{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(type);\n\n  // Get the function type of the constructor\n  FunctionType ct = constructor.getJSType().toMaybeFunctionType();\n  if (ct != null) {\n    // Get the parameter types\n    JSType[] paramTypes = ct.getParameterTypes();\n\n    // Traverse each argument and set its type based on the parameter type\n    for (int i = 0; i < n.getChildCount() - 1; i++) {\n      Node arg = n.getChildAtIndex(i + 1);\n      if (i < paramTypes.length) {\n        JSType paramType = paramTypes[i];\n        if (paramType != null) {\n          scope = scope.setUpperTypeOf(arg, paramType);\n        }\n      }\n      scope = traverse(arg, scope);\n    }\n  } else {\n    // Traverse remaining arguments without type inference\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}