{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType!= null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct!= null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // BACKWARDS INFERENCE: infer type of 'new' args from constructor params\n          Node firstArg = constructor.getNext();\n          if (firstArg!= null) {\n            JSType paramType = ct.getParamTypes().get(0);\n            if (paramType!= null) {\n              firstArg.setJSType(paramType);\n              scope = traverse(firstArg, scope); // re-traverse with updated type\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {\n      if (arg.getJSType() == null) { // only traverse if type wasn't just set\n        scope = traverse(arg, scope);\n      }\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}