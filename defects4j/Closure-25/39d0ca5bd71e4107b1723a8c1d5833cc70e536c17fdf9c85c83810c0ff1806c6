{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n\n                // Retrieve the constructor's parameter types\n                List<JSType> paramTypes = ct.getParameterTypes();\n                List<String> paramNames = ct.getParameterNames();\n\n                // Get the arguments passed to the 'new' operator\n                NodeList<Node> args = n.getChildren();\n                args.remove(constructor); // Remove the constructor node\n\n                // Ensure the number of arguments matches the number of parameters\n                int numArgs = args.size();\n                int numParams = paramTypes.size();\n                for (int i = 0; i < numArgs && i < numParams; i++) {\n                    Node arg = args.get(i);\n                    JSType paramType = paramTypes.get(i);\n                    String paramName = paramNames.get(i);\n\n                    // Perform backwards type inference\n                    if (paramType != null && arg.isName()) {\n                        // Update the type of the variable being passed as an argument\n                        String varName = arg.getString();\n                        if (scope.hasLocalVar(varName)) {\n                            Var var = scope.getVar(varName);\n                            if (var != null) {\n                                JSType currentType = var.getType();\n                                if (currentType != null) {\n                                    // Intersect the current type with the parameter type\n                                    JSType newType = currentType.intersection(paramType);\n                                    var.setType(newType);\n                                } else {\n                                    var.setType(paramType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}