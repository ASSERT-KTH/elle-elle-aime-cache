{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n\n                // Propagate parameter types to the argument nodes\n                if (constructor.isNew()) {\n                    Node paramNode = ct.getParametersNode();\n                    Node argNode = constructor.getFirstChild().getNext();\n                    while (paramNode != null && argNode != null) {\n                        JSType paramType = paramNode.getJSType();\n                        if (paramType != null && argNode.getJSType() == null) {\n                            argNode.setJSType(paramType);\n                        }\n                        paramNode = paramNode.getNext();\n                        argNode = argNode.getNext();\n                    }\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}