{
    "generation": "/**\n * Traverse a NEW expression, updating the flow scope and type annotations.\n * \n * @param n     Node representing the NEW expression\n * @param scope Current flow scope\n * @return Updated flow scope\n */\nprivate FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType!= null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct!= null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Fix: Backward type inference for NEW expression arguments\n          for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {\n            JSType argType = arg.getJSType();\n            if (argType!= null && type!= null) {\n              JSType paramType = ct.getParameterType(arg.getChildIndex());\n              if (paramType!= null) {\n                type = type.restrictByType(argType.restrictByType(paramType));\n                arg.setJSType(argType.restrictByType(paramType));\n              }\n            }\n            scope = traverse(arg, scope);\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}