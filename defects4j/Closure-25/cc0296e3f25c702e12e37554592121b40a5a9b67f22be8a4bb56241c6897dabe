{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n\n        // Add this block to handle parameter types\n        FunctionType.Parameter[] parameters = ct.getParameters();\n        Node arg = constructor.getNext();\n        for (int i = 0; i < parameters.length && arg != null; i++, arg = arg.getNext()) {\n          JSType paramType = parameters[i].getJSType();\n          if (paramType != null) {\n            scope = traverse(arg, scope);\n            JSType argType = arg.getJSType();\n            if (argType != null) {\n              scope = scope.inferTypeFromMatch(arg, argType, paramType);\n            }\n          }\n        }\n      }\n    }\n  }\n  n.setJSType(type);\n  \n  // Traverse remaining arguments if any\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    if (arg.getJSType() == null) {\n      scope = traverse(arg, scope);\n    }\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}