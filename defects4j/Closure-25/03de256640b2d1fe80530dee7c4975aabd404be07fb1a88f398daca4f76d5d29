{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n                // Handle parameter type inference\n                FunctionType.Parameter[] parameters = ct.getParameters();\n                Node arg = constructor.getNext();\n                int i = 0;\n                while (arg != null && i < parameters.length) {\n                    scope = traverse(arg, scope);\n                    JSType paramType = parameters[i].getJSType();\n                    if (paramType != null) {\n                        arg.setJSType(paramType);\n                        if (arg.isName() || arg.isObjectLit()) {\n                            scope.inferQualifiedSlot(arg, arg.getQualifiedName(), paramType, paramType);\n                        }\n                    }\n                    arg = arg.getNext();\n                    i++;\n                }\n                // Traverse any remaining args\n                while (arg != null) {\n                    scope = traverse(arg, scope);\n                    arg = arg.getNext();\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}