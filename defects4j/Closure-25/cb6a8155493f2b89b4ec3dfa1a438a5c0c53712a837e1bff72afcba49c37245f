{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType!= null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        ct = (FunctionType) constructorType;\n      }\n      if (ct!= null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(type);\n  Node arg = constructor.getNext();\n  while (arg!= null) {\n    scope = traverse(arg, scope);\n    // Update type based on argument\n    if (constructorType!= null && constructorType.isFunctionType()) {\n      FunctionType ft = constructorType.toMaybeFunctionType();\n      if (ft!= null) {\n        JSType paramType = ft.getParamType(0);\n        if (paramType!= null) {\n          arg.getJSType().restrictByType(paramType);\n        }\n      }\n    }\n    arg = arg.getNext();\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}