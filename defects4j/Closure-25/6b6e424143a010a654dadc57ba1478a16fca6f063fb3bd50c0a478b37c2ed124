{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n        \n        // Apply type information from constructor parameters\n        Node firstArg = constructor.getNext();\n        if (firstArg != null) {\n          JSType paramType = ct.getParameterType(0);\n          if (paramType != null && paramType.isRecordType()) {\n            inferPropertyTypesToLocalScope(scope, firstArg, paramType);\n          }\n        }\n      }\n    }\n  }\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}\n\nprivate void inferPropertyTypesToLocalScope(FlowScope scope, Node arg, JSType paramType) {\n  if (arg.isName()) {\n    String varName = arg.getString();\n    JSType varType = scope.getSlot(varName).getType();\n    if (varType != null && varType.isSubtype(getNativeType(OBJECT_TYPE))) {\n      ObjectType paramObjectType = paramType.toMaybeObjectType();\n      if (paramObjectType != null) {\n        for (String prop : paramObjectType.getOwnPropertyNames()) {\n          JSType propType = paramObjectType.getPropertyType(prop);\n          if (propType != null) {\n            varType = varType.toMaybeObjectType().withProperty(prop, propType);\n          }\n        }\n        scope.inferSlotType(varName, varType);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}