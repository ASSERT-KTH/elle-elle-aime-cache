{
    "generation": "/**\n * Fixes backwards type inference for 'new' expressions by propagating \n * constructor parameter types to the argument nodes.\n */\nprivate FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType!= null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // Handle NoObjectType as a valid FunctionType\n          ct = (FunctionType) constructorType;\n        }\n        if (ct!= null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Fix: Propagate constructor parameter types to argument nodes\n          JSType[] paramTypes = ct.getParameterTypes();\n          Node arg = constructor.getNext();\n          for (int i = 0; i < paramTypes.length && arg!= null; i++, arg = arg.getNext()) {\n            arg.setJSType(paramTypes[i]);\n            scope = traverse(arg, scope);\n          }\n          // Traverse any remaining arguments without type propagation\n          while (arg!= null) {\n            scope = traverse(arg, scope);\n            arg = arg.getNext();\n          }\n        } else {\n          // No change for non-constructor or unknown types\n          for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {\n            scope = traverse(arg, scope);\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}