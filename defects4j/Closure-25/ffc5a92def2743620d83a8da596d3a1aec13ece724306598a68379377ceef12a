{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n                // Apply the type of the constructor's parameters to the arguments\n                if (ct.getParametersNode() != null) {\n                    Node parameters = ct.getParametersNode();\n                    Node arg = constructor.getNext();\n                    while (arg != null && parameters != null) {\n                        JSType parameterType = parameters.getJSType();\n                        if (parameterType != null) {\n                            if (arg.getJSType() == null) {\n                                arg.setJSType(parameterType);\n                            } else {\n                                JSType existingType = arg.getJSType();\n                                JSType mergedType = existingType.getLeastSupertype(parameterType);\n                                arg.setJSType(mergedType);\n                            }\n                        }\n                        scope = traverse(arg, scope);\n                        arg = arg.getNext();\n                        parameters = parameters.getNext();\n                    }\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}