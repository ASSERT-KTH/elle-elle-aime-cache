{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n                \n                // Add this block to handle parameter types\n                Node argNode = constructor.getNext();\n                int paramIndex = 0;\n                for (Node param : ct.getParameters()) {\n                    if (argNode != null) {\n                        JSType paramType = param.getJSType();\n                        if (paramType != null) {\n                            scope = traverse(argNode, scope);\n                            JSType argType = argNode.getJSType();\n                            if (argType != null) {\n                                scope = scope.inferTypeFromMatch(argType, paramType);\n                            }\n                        }\n                        argNode = argNode.getNext();\n                        paramIndex++;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}