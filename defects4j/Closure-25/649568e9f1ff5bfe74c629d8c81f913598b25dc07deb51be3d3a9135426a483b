{
    "generation": "/**\n * Traverse a 'new' expression, updating the flow scope as necessary.\n *\n * @param n     the 'new' expression node\n * @param scope the current flow scope\n * @return the updated flow scope\n */\nprivate FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType!= null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct!= null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n                // FIX: Infer type of 'this' argument from constructor parameters\n                if (ct.getParameterTypes().length > 0) {\n                    JSType paramType = ct.getParameterTypes()[0];\n                    if (paramType.isObjectType()) {\n                        Node arg = constructor.getNext();\n                        if (arg!= null) {\n                            arg.setJSType(paramType); // Set type of argument for backwards inference\n                        }\n                    }\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}