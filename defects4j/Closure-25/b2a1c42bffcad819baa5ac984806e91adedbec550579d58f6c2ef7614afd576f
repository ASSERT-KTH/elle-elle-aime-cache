{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n\n                // Use the parameters to update the types of arguments\n                Node parameters = ct.getParametersNode();\n                if (parameters != null) {\n                    FunctionType ft = ct.getConstructor();\n                    if (ft != null) {\n                        for (Node p = parameters.getFirstChild(), a = constructor.getNext(); \n                             p != null && a != null; \n                             p = p.getNext(), a = a.getNext()) {\n                            JSType paramType = p.getJSType();\n                            JSType argType = a.getJSType();\n                            if (paramType != null && argType != null) {\n                                JSType inferredType = paramType.getLeastSupertype(argType);\n                                a.setJSType(inferredType);\n                                if (a.isObjectLit()) {\n                                    scope = reverseTypeInfer(a, inferredType, scope);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}\n\nprivate FlowScope reverseTypeInfer(Node node, JSType inferredType, FlowScope scope) {\n    // Implementation of reverse type inference for object literals\n    // to update the properties types.\n    if (node.isObjectLit() && inferredType.isRecordType()) {\n        RecordType recordType = inferredType.toMaybeRecordType();\n        for (Node prop = node.getFirstChild(); prop != null; prop = prop.getNext()) {\n            String propName = prop.getString();\n            JSType propType = recordType.getPropertyType(propName);\n            if (propType != null) {\n                prop.getFirstChild().setJSType(propType);\n            }\n        }\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}