{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n                \n                // Propagate inferred properties from constructor parameters\n                ObjectType objType = type.toObjectType();\n                if (objType != null && ct.getTypeOfThis() instanceof ObjectType) {\n                    ObjectType thisType = (ObjectType) ct.getTypeOfThis();\n                    if (thisType.hasReferenceName() && !thisType.isUnknownType()) {\n                        scope = backwardInferenceForObject(n, scope, thisType);\n                    }\n                }\n            }\n        }\n    }\n    \n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}\n\nprivate FlowScope backwardInferenceForObject(Node n, FlowScope scope, ObjectType objectType) {\n    Node objLit = n.getLastChild(); // Expecting that the last child represents the object literal being passed.\n    if (objLit != null && objLit.isObjectLit()) {\n        JSType objType = objLit.getJSType();\n        if (objType != null && objType.toObjectType() != null) {\n            for (String prop : objectType.getOwnPropertyNames()) {\n                JSType propType = objectType.getPropertyType(prop);\n                JSType inferredType = objType.toObjectType().getPropertyType(prop);\n                if (inferredType != null && inferredType.isSubtypeOf(propType)) {\n                    objLit.getProp(prop).setJSType(propType);\n                }\n            }\n        }\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}