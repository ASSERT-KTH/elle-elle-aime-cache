{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n            }\n        }\n    }\n    n.setJSType(type);\n\n    // Traverse the arguments and propagate the type information\n    boolean firstArg = true;\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n        if (firstArg && type != null && type instanceof ObjectType) {\n            // Propagate the constructor parameter types to the first argument\n            ObjectType instanceType = (ObjectType) type;\n            FunctionType constructorFnType = instanceType.getConstructor();\n            if (constructorFnType != null && constructorFnType.getParameters() != null) {\n                Node firstParam = constructorFnType.getParameters().getFirstChild();\n                if (firstParam != null) {\n                    JSType paramType = firstParam.getJSType();\n                    if (paramType != null) {\n                        // Set the type of the first argument to the type of the first parameter\n                        arg.setJSType(paramType);\n                    }\n                }\n            }\n        }\n        firstArg = false;\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}