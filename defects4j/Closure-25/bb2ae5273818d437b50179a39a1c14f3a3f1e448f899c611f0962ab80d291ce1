{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n\n          // Backward inference: Inferring the type for the arguments\n          Node param = ct.getParametersNode();\n          for (Node arg = constructor.getNext(); arg != null && param != null; \n               arg = arg.getNext(), param = param.getNext()) {\n\n            JSType paramType = param.getJSType();\n            if (paramType != null) {\n              JSType argType = arg.getJSType();\n              JSType inferredType = argType == null ? paramType : argType.getGreatestSubtype(paramType);\n              arg.setJSType(inferredType);\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}