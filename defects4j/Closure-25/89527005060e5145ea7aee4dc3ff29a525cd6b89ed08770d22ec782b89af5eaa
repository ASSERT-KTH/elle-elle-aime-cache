{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType!= null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct!= null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n        // If there are no constructor parameters (i.e. instanceType is empty record type), \n        // assume no backwards inference on function calls.\n        if (!ct.getInstanceType().toObjectType().hasPropertyDefs() && n.hasChildAtIndex(1)) {\n          JSType propChainObj = n.getChildAtIndex(1).getJSType();\n          FunctionParamList parameters = ct.getParameterList();\n          Preconditions.checkState(parameters.getHeadCount() == 1,\n              \"Invalid assumptions around constructor function instance creation type being empty\");\n          Object obj = parameters.getParamNode(parameters.getHead()).getChildAtIndex(0).getUserAgentJSLiteral();\n          type = propChainObj.getObjectChain(obj);\n        }\n      }\n    }\n  }\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}