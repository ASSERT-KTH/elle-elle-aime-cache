{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n        // add this line to update the constructor's type\n        constructorType = type;\n      }\n    }\n  }\n\n  // modify this block to update the argument's type\n  if (constructorType instanceof FunctionType && constructor.getSecondChild() != null) {\n    Node arg = constructor.getSecondChild();\n    JSType argType = arg.getJSType();\n    if (argType instanceof ObjectType) {\n      ObjectType o = (ObjectType) argType;\n      ObjectType t = ((FunctionType) constructorType).getPrototype();\n      t.seal();\n      o.forEachProperty((name, propType) -> {\n        JSType tType = t.getPropertyType(name);\n        propType.asMutable().bitwiseOr(tType);\n      });\n    }\n    scope = traverse(arg, scope);\n  }\n\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}