{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType!= null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        ct = (FunctionType) constructorType;\n      }\n      if (ct!= null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(type);\n  \n  // Update scope after traversing all arguments\n  Node firstArg = constructor.getNext();\n  for (Node arg = firstArg; arg!= null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  \n  // Update the type of the first argument if it's an object\n  if (firstArg!= null && firstArg.isCall() && firstArg.getFirstChild().isObject()) {\n    JSType argumentType = firstArg.getFirstChild().getJSType();\n    FunctionType functionType = constructorType.toMaybeFunctionType();\n    if (functionType!= null && functionType.getParameterCount() > 0) {\n      JSType paramType = functionType.getParameterType(0);\n      if (paramType!= null) {\n        argumentType = argumentType.restrictByType(paramType);\n        firstArg.getFirstChild().setJSType(argumentType);\n      }\n    }\n  }\n  \n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}