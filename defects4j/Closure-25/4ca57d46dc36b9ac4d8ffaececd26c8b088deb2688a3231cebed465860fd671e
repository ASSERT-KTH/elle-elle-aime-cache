{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Perform backward inference on the arguments\n          ObjectType ctType = ct.getInstanceType().toObjectType();\n          if (ctType != null && ctType.isRecordType()) {\n            for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n              JSType argType = arg.getJSType();\n              if (argType != null && argType.isObjectType()) {\n                updateTypeFromExpectations(arg.getJSType().toObjectType(), ctType);\n              }\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }\n\n  private void updateTypeFromExpectations(ObjectType provided, ObjectType expected) {\n    for (String property : expected.getOwnPropertyNames()) {\n      if (provided.hasProperty(property)) {\n        JSType expectedPropType = expected.getPropertyType(property);\n        JSType providedPropType = provided.getPropertyType(property);\n        JSType refinedType = providedPropType.getGreatestSubtype(expectedPropType);\n        provided.defineDeclaredProperty(property, refinedType, null);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}