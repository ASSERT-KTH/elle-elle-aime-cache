{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType!= null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct!= null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n      // Add inference for the constructor argument\n      if (arg.getNext() == null && constructorType!= null && type!= null) {\n        JSType argType = arg.getJSType();\n        if (argType!= null) {\n          JSType inferredType = getInferredType(constructorType, type);\n          if (inferredType!= null) {\n            arg.setJSType(inferredType);\n          }\n        }\n      }\n    }\n    return scope;\n  }\n\n  // Helper function to get the inferred type\n  private JSType getInferredType(JSType constructorType, JSType type) {\n    FunctionType ct = constructorType.toMaybeFunctionType();\n    if (ct!= null && ct.isConstructor()) {\n      JSType paramType = ct.getParameterType(0);\n      return paramType;\n    }\n    return null;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}