{
    "generation": "JSType constructorType = constructor.getJSType();\nJSType type = null;\nif (constructorType != null) {\n  constructorType = constructorType.restrictByNotNullOrUndefined();\n  if (constructorType.isUnknownType()) {\n    type = getNativeType(UNKNOWN_TYPE);\n  } else {\n    FunctionType ct = constructorType.toMaybeFunctionType();\n    if (ct == null && constructorType instanceof FunctionType) {\n      // If constructorType is a NoObjectType, then toMaybeFunctionType will\n      // return null. But NoObjectType implements the FunctionType\n      // interface, precisely because it can validly construct objects.\n      ct = (FunctionType) constructorType;\n    }\n    if (ct != null && ct.isConstructor()) {\n      type = ct.getInstanceType();\n    }\n  }\n}\nn.setJSType(type);",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}