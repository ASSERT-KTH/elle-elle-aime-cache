{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n                // Handle constructor parameter types for backwards inference\n                FunctionType functionType = ct.toMaybeFunctionType();\n                if (functionType != null) {\n                    Iterator<Node> arguments = n.children();\n                    arguments.next(); // Skip the constructor\n                    Iterator<Node> parameters = functionType.getParameters().iterator();\n                    while (arguments.hasNext() && parameters.hasNext()) {\n                        Node argument = arguments.next();\n                        JSType parameterType = parameters.next().getJSType();\n                        if (argument.getJSType() != null && parameterType != null) {\n                            argument.getJSType().matchConstraint(parameterType);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}