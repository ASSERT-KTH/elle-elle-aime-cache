{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          \n          // Perform backwards inference on constructor argument types\n          Node arg = constructor.getNext();\n          if (arg != null) {\n            for (Node param : ct.getParameters()) {\n              JSType paramType = param.getJSType();\n              if (paramType != null && !paramType.isUnknownType()) {\n                inferPropertyTypesFromArgument(scope, arg, paramType);\n              }\n              arg = arg.getNext();\n              if (arg == null) break;\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }\n  \n  private void inferPropertyTypesFromArgument(FlowScope scope, Node arg, JSType paramType) {\n    // Implementation of type inference from constructor parameter to argument\n    if (arg.isObjectLit() && paramType.isRecordType()) {\n      RecordType recordType = paramType.toMaybeRecordType();\n      if (recordType != null) {\n        for (String propertyName : recordType.getPropertyNames()) {\n          JSType propertyType = recordType.getPropertyType(propertyName);\n          Node propertyNode = arg.getFirstChild();\n          while (propertyNode != null) {\n            if (propertyNode.getString().equals(propertyName)) {\n              propertyNode.setJSType(propertyType);\n            }\n            propertyNode = propertyNode.getNext();\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}