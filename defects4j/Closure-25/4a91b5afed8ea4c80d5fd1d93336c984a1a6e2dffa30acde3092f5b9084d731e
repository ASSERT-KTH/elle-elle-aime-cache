{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      JSType withoutNullOrUndefined = constructorType.restrictByNotNullOrUndefined();\n      if (withoutNullOrUndefined.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = withoutNullOrUndefined.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n\n        // get the type of the argument\n        Node firstArg = constructor.getNext();\n        if (firstArg != null && ct != null) {\n          JSType argType = firstArg.getJSType();\n          JSType withoutNullOrUndefinedArg = argType.restrictByNotNullOrUndefined();\n          JSType mergedType = type.getObjectProperty(\"x\").getType().getUnion(withoutNullOrUndefinedArg);\n          type = type.setProperty(\"x\", mergedType);\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}