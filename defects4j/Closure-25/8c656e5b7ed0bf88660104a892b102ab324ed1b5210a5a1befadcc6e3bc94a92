{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType!= null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                ct = (FunctionType) constructorType;\n            }\n            if (ct!= null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n            }\n        }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n        // Backward type inference for the 'new' operator\n        if (type!= null) {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct!= null && ct.isConstructor()) {\n                JSType paramType = ct.getParameterType(0);\n                if (paramType!= null && arg.getJSType()!= null) {\n                    arg.getJSType().restrictToIntersection(paramType);\n                }\n            }\n        }\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}