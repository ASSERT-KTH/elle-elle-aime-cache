{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType!= null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct!= null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Fix: Backward inference for constructor arguments\n          if (n.getChildCount() > 1) { // Node has arguments\n            Node arg = constructor.getNext();\n            JSType paramType = ct.getParameterTypes().isEmpty()? \n                                getNativeType(UNKNOWN_TYPE) : \n                                ct.getParameterTypes().get(0);\n            scope = inferBackwardType(arg, paramType, scope);\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}