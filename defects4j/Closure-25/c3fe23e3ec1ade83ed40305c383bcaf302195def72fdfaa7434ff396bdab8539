{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    \n    ObjectType functionPrototype = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          functionPrototype = ct.getInstanceType();\n          type = functionPrototype;\n        }\n      }\n    }\n    n.setJSType(type);\n    \n    // Update backward-inferred properties if type is known \n    if (functionPrototype != null && n.getChildCount() > 1) {\n      ObjectType instanceType = functionPrototype.toObjectType();\n      if (instanceType != null) {\n        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n          scope = traverse(arg, scope);\n          JSType argType = arg.getJSType();\n          if (argType != null && argType.isObjectType()) {\n            updatePropertyTypes(instanceType, argType.toObjectType());\n          }\n        }\n      }\n    } else {\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n      }\n    }\n    \n    return scope;\n  }\n\n  private void updatePropertyTypes(ObjectType targetType, ObjectType sourceType) {\n    for (String propertyName : sourceType.getOwnPropertyNames()) {\n      JSType sourcePropertyType = sourceType.getPropertyType(propertyName);\n      if (!targetType.hasProperty(propertyName)) {\n        targetType.defineDeclaredProperty(propertyName, sourcePropertyType, null);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}