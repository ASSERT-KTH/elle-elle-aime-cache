{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n        // Get the parameter types of the constructor\n        NodeList<Param> params = ct.getParams();\n        int argIndex = 0;\n        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n          if (argIndex < params.size()) {\n            Param param = params.get(argIndex);\n            JSType paramType = param.getType();\n            if (paramType != null) {\n              // Infer the type of the argument based on the parameter type\n              scope = setBackwardsType(arg, paramType, scope);\n            }\n          }\n          scope = traverse(arg, scope);\n          argIndex++;\n        }\n      }\n    }\n  }\n  n.setJSType(type);\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}