{
    "generation": "\nprivate FlowScope traverseNew(Node n, FlowScope scope) {\n\n  Node constructor = n.getFirstChild();\n\n  scope = traverse(constructor, scope);\n\n  JSType constructorType = constructor.getJSType();\n\n  JSType type = null;\n\n  if (constructorType != null) {\n\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n\n    if (constructorType.isUnknownType()) {\n\n      type = getNativeType(UNKNOWN_TYPE);\n\n    } else {\n\n      FunctionType ct = constructorType.toMaybeFunctionType();\n\n      if (ct == null && constructorType instanceof FunctionType) {\n\n        ct = (FunctionType) constructorType;\n\n      }\n\n      if (ct != null && ct.isConstructor()) {\n\n        type = ct.getInstanceType();\n\n        // Get parameter types from the constructor function\n\n        List<JSType> paramTypes = ct.getParameterTypes();\n\n        // Get argument nodes\n\n        NodeList<Node> args = n.getChildren();\n\n        args.removeFirst(); // Remove the constructor node\n\n        // Set types for argument nodes based on parameter types\n\n        for (int i = 0; i < args.size(); i++) {\n\n          Node arg = args.get(i);\n\n          if (i < paramTypes.size()) {\n\n            JSType paramType = paramTypes.get(i);\n\n            scope = setArgumentType(arg, paramType, scope);\n\n          } else {\n\n            // Handle extra arguments if needed\n\n          }\n\n        }\n\n      }\n\n    }\n\n  }\n\n  n.setJSType(type);\n\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n\n    scope = traverse(arg, scope);\n\n  }\n\n  return scope;\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}