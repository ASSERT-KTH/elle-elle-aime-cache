{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType argType = null;\n    if (constructorType != null && constructorType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) constructorType;\n        if (functionType.isConstructor()) {\n            // perform type check of constructor argument\n            Node arg = constructor.getNext();\n            traverse(arg, scope);\n            JSType argJSType = arg.getJSType();\n            if (argJSType != null) {\n                argType = functionType.checkParameterType(argJSType);\n                if (argJSType.isObject() && arg instanceof Node.ObjectLit) {\n                    // if the argument is an object literal, merge its properties with the expected parameter type\n                    ObjectType objectType = argJSType.toObjectType();\n                    if (objectType != null && argType != null && argType.isObject()) {\n                        ObjectType paramObjectType = argType.toObjectType();\n                        if (paramObjectType != null) {\n                            paramObjectType.mergeWith(objectType);\n                            argType = paramObjectType;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    n.setJSType(argType);\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}