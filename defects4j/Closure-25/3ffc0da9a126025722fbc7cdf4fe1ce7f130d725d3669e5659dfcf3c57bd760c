{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n            }\n        }\n    }\n    n.setJSType(type);\n\n    // Process the arguments\n    Node arg = constructor.getNext();\n    int argIndex = 0;\n    while (arg != null) {\n        scope = traverse(arg, scope);\n\n        // Update the type of the argument based on the constructor's parameter types\n        if (constructorType != null && constructorType instanceof FunctionType) {\n            FunctionType ctorType = (FunctionType) constructorType;\n            Node param = ctorType.getParametersNode().getChildAt(argIndex);\n            if (param != null) {\n                JSType paramType = param.getJSType();\n                if (paramType != null) {\n                    JSType argType = arg.getJSType();\n                    if (argType != null && !argType.isUnknownType() && !argType.isSubtype(paramType)) {\n                        arg.setJSType(argType.getLeastSupertype(paramType));\n                    }\n                }\n            }\n        }\n        argIndex++;\n        arg = arg.getNext();\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}