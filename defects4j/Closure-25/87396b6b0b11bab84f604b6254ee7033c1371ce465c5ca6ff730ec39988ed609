{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n            }\n        }\n    }\n    n.setJSType(type);\n\n    // Traverse arguments\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n\n    // Backwards inference for the constructor arguments\n    if (constructorType != null && constructorType.isConstructor()) {\n        FunctionType functionType = (FunctionType) constructorType;\n        Node param = functionType.getParametersNode();\n        for (Node arg = constructor.getNext(); arg != null && param != null; arg = arg.getNext(), param = param.getNext()) {\n            JSType argType = arg.getJSType();\n            if (argType != null) {\n                param.setJSType(argType);\n            }\n        }\n    }\n\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}