{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n            }\n        }\n    }\n    n.setJSType(type);\n\n    // Traverse arguments and infer types\n    Node arg = constructor.getNext();\n    if (ct != null && ct.isConstructor()) {\n        FunctionType functionType = ct;\n        List<ObjectType> parameterTypes = functionType.getParameterTypes();\n        for (int i = 0; arg != null && i < parameterTypes.size(); i++) {\n            JSType paramType = parameterTypes.get(i);\n            scope = traverse(arg, scope);\n            JSType argType = arg.getJSType();\n            if (argType != null) {\n                argType = argType.specialize(paramType);\n                arg.setJSType(argType);\n            }\n            arg = arg.getNext();\n        }\n    } else {\n        for (; arg != null; arg = arg.getNext()) {\n            scope = traverse(arg, scope);\n        }\n    }\n\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}