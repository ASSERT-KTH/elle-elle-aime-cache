{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          if (n.getParent().isName()) {\n            n.getParent().setJSType(type);\n          }\n\n          // Propagate the declared type to the new'ed constructor.\n          Node arg = constructor.getNext();\n          if (arg != null) {\n             // Check for arguments that are not passed\n             if (ct.getParameterCount() == 0 ) {\n               for (; arg != null; arg = arg.getNext()) {\n                 scope = traverse(arg, scope);\n               }             \n               return scope;\n             }\n            for (int i = 0; i < ct.getParameterCount() && arg != null;\n                 i++, arg = arg.getNext()) {\n\n              JSType declaredParamType = ct.getParameterType(i);\n              scope = traverse(arg, scope.withDeclaredType(declaredParamType));\n              \n            }            \n            for (; arg != null; arg = arg.getNext()) {\n              scope = traverse(arg, scope);\n            }\n          }\n          return scope;\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}