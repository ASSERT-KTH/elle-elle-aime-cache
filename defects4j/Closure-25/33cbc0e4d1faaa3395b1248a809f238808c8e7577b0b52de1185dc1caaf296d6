{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n                // Perform backwards inference on the constructor parameters\n                FunctionType instanceType = ct.getInstanceType();\n                if (instanceType != null) {\n                    Node params = ct.getParametersNode();\n                    Node args = constructor.getNext();\n                    for (int i = 0; i < params.getChildCount() && args != null; i++) {\n                        Node param = params.getChildAtIndex(i);\n                        JSType paramType = param.getJSType();\n                        Node arg = args;\n                        JSType argType = arg.getJSType();\n                        if (argType != null && paramType != null) {\n                            arg.setJSType(argType.intersectionWith(paramType));\n                        }\n                        args = args.getNext();\n                    }\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}