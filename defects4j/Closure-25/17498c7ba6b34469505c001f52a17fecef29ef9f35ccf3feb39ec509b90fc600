{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType!= null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct!= null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n\n    if (type == null) {\n      for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n        JSType argType = arg.getJSType();\n        if (argType!= null &&!argType.isEmpty()) {\n          if (constructorType instanceof FunctionType && ((FunctionType) constructorType).getParameterTypes().get(0).isTop()) {\n            ((FunctionType) constructorType).getParameterTypes().set(0, argType);\n            constructorType = constructorType.toMaybeFunctionType();\n            if (constructorType.isConstructor()) {\n              type = ((FunctionType) constructorType).getInstanceType();\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (type == null && constructorType instanceof FunctionType) {\n      type = ((FunctionType) constructorType).getInstanceType();\n    }\n\n    n.setJSType(type);\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}