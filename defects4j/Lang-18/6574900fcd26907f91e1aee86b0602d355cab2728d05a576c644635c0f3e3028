{
    "generation": "protected List<Rule> parsePattern() {\n    DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    List<Rule> rules = new ArrayList<Rule>();\n\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n\n    int length = mPattern.length();\n    int[] indexRef = new int[1];\n\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n\n        Rule rule;\n        char c = token.charAt(0);\n\n        switch (c) {\n        case 'G': // era designator (text)\n            switch (tokenLen) {\n                case 4: // long form\n                    rule = new TextField(Calendar.ERA, ERAs);\n                    break;\n                case 3: // short form\n                    rule = new TextField(Calendar.ERA, Arrays.stream(ERAs).map(s -> s.length() > 3 ? s.substring(0, 3) : s).toArray(String[]::new));\n                    break;\n                case 2: // narrow form\n                    rule = new TextField(Calendar.ERA, Arrays.stream(ERAs).map(s -> s.length() > 1 ? s.substring(0, 1) + s.substring(s.length() - 1) : s).toArray(String[]::new));\n                    break;\n                case 1: // narrowest form\n                    rule = new TextField(Calendar.ERA, Arrays.stream(ERAs).map(s -> s.substring(0, 1)).toArray(String[]::new));\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid pattern component: \" + token);\n            }\n            break;\n        ... // rest of the cases\n    }\n\n    return rules;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}