{
    "generation": "/**\n * <p>Returns a list of Rules given a pattern.</p>\n *\n * @return a {@code List} of Rule objects\n * @throws IllegalArgumentException if pattern is invalid\n */\nprotected List<Rule> parsePattern() {\n    DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n    List<Rule> rules = new ArrayList<Rule>();\n\n    String[] ERAs = symbols.getEras();\n    String[] months = symbols.getMonths();\n    String[] shortMonths = symbols.getShortMonths();\n    String[] weekdays = symbols.getWeekdays();\n    String[] shortWeekdays = symbols.getShortWeekdays();\n    String[] AmPmStrings = symbols.getAmPmStrings();\n\n    int length = mPattern.length();\n    int[] indexRef = new int[1];\n\n    for (int i = 0; i < length; i++) {\n        indexRef[0] = i;\n        String token = parseToken(mPattern, indexRef);\n        i = indexRef[0];\n\n        int tokenLen = token.length();\n        if (tokenLen == 0) {\n            break;\n        }\n\n        Rule rule;\n        char c = token.charAt(0);\n\n        switch (c) {\n        case 'G': // era designator (text)\n            if (tokenLen >= 4) {\n                rule = new TextField(Calendar.ERA, ERAs);\n            } else if (tokenLen == 3) {\n                rule = new TextField(Calendar.ERA, ERAs); // Fix: Handle 'GGG' pattern\n            } else {\n                rule = new TextField(Calendar.ERA, ERAs); // Fix: Handle 'GG' and 'G' patterns\n            }\n            break;\n        //... (rest of the code remains the same)\n\n        case '\\'': // literal text\n            String sub = token.substring(1);\n            if (sub.length() == 1) {\n                rule = new CharacterLiteral(sub.charAt(0));\n            } else {\n                rule = new StringLiteral(sub);\n            }\n            break;\n        default:\n            throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n        }\n\n        rules.add(rule);\n    }\n\n    return rules;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}