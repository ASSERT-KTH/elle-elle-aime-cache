{
    "generation": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n        // Determine if this is an override\n        boolean isOverride = t.inGlobalScope() &&\n                             parent.getType() == Token.ASSIGN &&\n                             parent.getFirstChild() == getprop;\n\n        // Find the lowest property defined on a class with visibility information.\n        if (isOverride) {\n            objectType = objectType.getImplicitPrototype();\n        }\n        JSDocInfo docInfo = null;\n        for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n            docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n            if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n                break;\n            }\n        }\n\n        if (objectType == null) {\n            // No visibility modifier found; assume public.\n            return;\n        }\n\n        boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n        Visibility visibility = docInfo.getVisibility();\n        JSType ownerType = normalizeClassType(objectType);\n\n        if (isOverride) {\n            // Check an ASSIGN statement trying to override a property on a superclass.\n            JSDocInfo overridingInfo = parent.getJSDocInfo();\n            Visibility overridingVisibility = overridingInfo == null ?\n                Visibility.INHERITED : overridingInfo.getVisibility();\n\n            // Ensure the property can be overridden and that the visibility matches.\n            if (visibility == Visibility.PRIVATE && !sameInput) {\n                compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n            } else if (overridingVisibility != Visibility.INHERITED && \n                       overridingVisibility != visibility) {\n                compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, \n                    visibility.name(), objectType.toString(), overridingVisibility.name()));\n            }\n        } else {\n            if (sameInput) {\n                // private access is allowed in the same file.\n                return;\n            } else if (visibility == Visibility.PRIVATE && \n                       (currentClass == null || ownerType.differsFrom(currentClass))) {\n                if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {\n                    return;\n                }\n                // private access not allowed outside the file from a different class.\n                compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, \n                    propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n            } else if (visibility == Visibility.PROTECTED) {\n                // protected access checks\n                if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n                    compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, \n                        propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}