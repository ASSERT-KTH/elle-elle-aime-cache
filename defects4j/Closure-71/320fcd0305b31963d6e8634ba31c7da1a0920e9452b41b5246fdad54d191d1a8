{
    "generation": "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  JSType type = getprop.getFirstChild().getJSType();\n  ObjectType objectType = (type instanceof ObjectType) ? (ObjectType) type : null;\n  String propertyName = getprop.getLastChild().getString();\n\n  if (objectType != null) {\n    // Determine if this is an override\n    boolean isOverride = t.inGlobalScope() &&\n        parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop;\n\n    // Find the lowest property defined on a class with visibility information\n    JSDocInfo docInfo = null;\n    for (ObjectType currentType = objectType;\n         currentType != null;\n         currentType = currentType.getImplicitPrototype()) {\n      docInfo = currentType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n\n    if (docInfo == null) {\n      // No visibility information found; assume public\n      return;\n    }\n\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n    if (isOverride) {\n      // Check override visibility\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = (overridingInfo != null) ?\n          overridingInfo.getVisibility() : Visibility.INHERITED;\n\n      if (visibility == Visibility.PRIVATE &&\n          !t.getInput().getName().equals(docInfo.getSourceName())) {\n        compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, ownerType.toString()));\n      } else if (overridingVisibility != visibility && visibility != Visibility.INHERITED) {\n        compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), ownerType.toString(), overridingVisibility.name()));\n      }\n    } else {\n      // Check property access visibility\n      boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n      if (!sameInput) {\n        if (visibility == Visibility.PRIVATE) {\n          if (currentClass == null || !ownerType.isSubtype(currentClass)) {\n            if (!isValidPrivateConstructorAccess(parent)) {\n              compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n            }\n          }\n        } else if (visibility == Visibility.PROTECTED) {\n          if (currentClass == null || !ownerType.isSubtype(currentClass)) {\n            compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n          }\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}