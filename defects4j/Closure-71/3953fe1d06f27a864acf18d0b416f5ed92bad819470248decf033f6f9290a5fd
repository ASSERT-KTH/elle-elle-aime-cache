{
    "generation": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n        boolean isOverride = isOverride(t, getprop, parent);\n        JSDocInfo docInfo = findDefinedProperty(objectType, propertyName, isOverride);\n\n        if (docInfo == null) {\n            return;\n        }\n\n        boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n        Visibility visibility = docInfo.getVisibility();\n        JSType ownerType = normalizeClassType(objectType);\n\n        if (isOverride) {\n            checkOverride(t, getprop, parent, visibility, ownerType, sameInput);\n        } else {\n            checkAccess(t, getprop, visibility, ownerType, sameInput);\n        }\n    }\n}\n\nprivate boolean isOverride(NodeTraversal t, Node getprop, Node parent) {\n    return t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;\n}\n\nprivate JSDocInfo findDefinedProperty(ObjectType objectType, String propertyName, boolean isOverride) {\n    if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n    }\n\n    for ( ; objectType != null; objectType = objectType.getImplicitPrototype()) {\n        JSDocInfo docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n            return docInfo;\n        }\n    }\n\n    return null;\n}\n\nprivate void checkOverride(NodeTraversal t, Node getprop, Node parent, Visibility visibility, JSType ownerType, boolean sameInput) {\n    JSDocInfo overridingInfo = parent.getJSDocInfo();\n    Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();\n\n    if (visibility == Visibility.PRIVATE && !sameInput) {\n        compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, ownerType.toString()));\n    } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {\n        compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), ownerType.toString(), overridingVisibility.name()));\n    }\n}\n\nprivate void checkAccess(NodeTraversal t, Node getprop, Visibility visibility, JSType ownerType, boolean sameInput) {\n    if (visibility == Visibility.PRIVATE && !sameInput) {\n        compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n    } else if (visibility == Visibility.PROTECTED && !sameInput && (currentClass == null || !currentClass.isSubtype(ownerType))) {\n        compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}