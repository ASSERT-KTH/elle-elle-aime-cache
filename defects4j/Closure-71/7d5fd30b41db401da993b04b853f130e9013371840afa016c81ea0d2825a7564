{
    "generation": "if (isOverride) {\n  objectType = objectType.getImplicitPrototype();\n}\nJSDocInfo docInfo = null;\nfor (; objectType != null;\n     objectType = objectType.getImplicitPrototype()) {\n  docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n  if (docInfo != null &&\n      docInfo.getVisibility() != Visibility.INHERITED) {\n    break;\n  }\n}\n\nif (objectType == null) {\n  // We couldn't find a visibility modifier; assume it's public.\n  return;\n}\n\nboolean sameInput =\n    t.getInput().getName().equals(docInfo.getSourceName());\nVisibility visibility = docInfo.getVisibility();\nJSType ownerType = normalizeClassType(objectType);\nif (isOverride) {\n  // Check an ASSIGN statement that's trying to override a property\n  // on a superclass.\n  JSDocInfo overridingInfo = parent.getJSDocInfo();\n  Visibility overridingVisibility = overridingInfo == null ?\n      Visibility.INHERITED : overridingInfo.getVisibility();\n\n  // Check that (a) the property *can* be overridden, and\n  // (b) that the visibility of the override is the same as the\n  // visibility of the original property.\n  if (visibility == Visibility.PRIVATE && !sameInput) {\n    compiler.report(\n        t.makeError(getprop, PRIVATE_OVERRIDE,\n            objectType.toString()));\n  } else if (overridingVisibility != Visibility.INHERITED &&\n      overridingVisibility != visibility) {\n    compiler.report(\n        t.makeError(getprop, VISIBILITY_MISMATCH,\n            visibility.name(), objectType.toString(),\n            overridingVisibility.name()));\n  }\n} else {\n  if (sameInput) {\n    // private access is always allowed in the same file.\n    return;\n  } else if (visibility == Visibility.PRIVATE &&\n      (currentClass == null || ownerType.differsFrom(currentClass))) {\n    if (docInfo.isConstructor() &&\n        isValidPrivateConstructorAccess(parent)) {\n      return;\n    }\n\n    // private access is not allowed outside the file from a different\n    // enclosing class.\n    compiler.report(\n        t.makeError(getprop,\n            BAD_PRIVATE_PROPERTY_ACCESS,\n            propertyName,\n            validator.getReadableJSTypeName(\n                getprop.getFirstChild(), true)));\n  } else if (visibility == Visibility.PROTECTED) {\n    // There are 3 types of legal accesses of a protected property:\n    // 1) Accesses in the same file\n    // 2) Overriding the property in a subclass\n    // 3) Accessing the property from inside a subclass\n    // The first two have already been checked for.\n    if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n      compiler.report(\n          t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n              propertyName,\n              validator.getReadableJSTypeName(\n                  getprop.getFirstChild(), true)));\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}