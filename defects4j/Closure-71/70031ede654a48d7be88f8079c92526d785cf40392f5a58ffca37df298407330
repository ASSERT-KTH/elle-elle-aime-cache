{
    "generation": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n        // This checks if we're in a constructor context\n        boolean inConstructor = parent.isFromExterns() && parent.getParent() != null &&\n                                parent.getParent().isFunction() &&\n                                parent.getParent().hasOneChild() &&\n                                parent.getGrandparent() != null &&\n                                parent.getGrandparent().isMemberFunctionDef();\n\n        // Is this a normal property access, or are we trying to override an existing property?\n        boolean isOverride = !inConstructor && t.inGlobalScope() &&\n                               parent.getType() == Token.ASSIGN &&\n                               parent.getFirstChild() == getprop;\n\n        // Find the lowest property defined on a class with visibility information.\n        if (isOverride) {\n            objectType = objectType.getImplicitPrototype();\n        }\n        JSDocInfo docInfo = null;\n        for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n            docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n            if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n                break;\n            }\n        }\n\n        if (objectType == null) {\n            // We couldn't find a visibility modifier; assume it's public.\n            return;\n        }\n\n        boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n        Visibility visibility = docInfo.getVisibility();\n        JSType ownerType = normalizeClassType(objectType);\n        if (isOverride && !inConstructor) {\n            // Check an ASSIGN statement that's trying to override a property on a superclass.\n            JSDocInfo overridingInfo = parent.getJSDocInfo();\n            Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();\n\n            // Check that the property can be overridden, and that the visibility of the override is the same as the visibility of the original property.\n            if (visibility == Visibility.PRIVATE && !sameInput) {\n                compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n            } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {\n                compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n            }\n        }\n        // Rest of the function remains unchanged...\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}