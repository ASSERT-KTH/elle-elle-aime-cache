{
    "generation": "/**\n * Determines whether the given property is visible in the current context.\n * @param t The current traversal.\n * @param getprop The getprop node.\n */\nprivate void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n  ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n\n  if (objectType != null) {\n    boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;\n    ObjectType originalType = objectType;\n\n    // Find the lowest property defined on a class with visibility information.\n    JSDocInfo docInfo = null;\n    while (objectType != null) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n      objectType = objectType.getImplicitPrototype();\n    }\n\n    if (docInfo == null) {\n      // We couldn't find a visibility modifier; assume it's public.\n      return;\n    }\n\n    boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(originalType);\n\n    if (isOverride) {\n      // Check an ASSIGN statement that's trying to override a property on a superclass.\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();\n\n      // Check that (a) the property can be overridden, and (b) that the visibility of the override is the same as the visibility of the original property.\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, originalType.toString()));\n      } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {\n        compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), originalType.toString(), overridingVisibility.name()));\n      }\n    } else {\n      if (sameInput) {\n        // private access is allowed in the same file.\n        return;\n      }\n      if (visibility == Visibility.PRIVATE && (currentClass == null || ownerType.differsFrom(currentClass))) {\n        // private access is not allowed outside the file from a different enclosing class.\n        compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        // Protected access is allowed in subclasses of the owner class.\n        if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n          compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}