{
    "generation": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n        // Is this a normal property access, or are we trying to override\n        // an existing property?\n        boolean isOverride = t.inGlobalScope() &&\n                parent.getType() == Token.ASSIGN &&\n                parent.getFirstChild() == getprop;\n\n        // Find the lowest property defined on a class with visibility\n        // information.\n        if (isOverride) {\n            objectType = objectType.getImplicitPrototype();\n        }\n        JSDocInfo docInfo = null;\n        for (; objectType != null;\n             objectType = objectType.getImplicitPrototype()) {\n            docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n            if (docInfo != null &&\n                docInfo.getVisibility() != Visibility.INHERITED) {\n                break;\n            }\n        }\n\n        if (objectType == null) {\n            // We couldn't find a visibility modifier; assume it's public.\n            return;\n        }\n\n        boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n        Visibility visibility = docInfo.getVisibility();\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = overridingInfo == null ?\n                Visibility.INHERITED : overridingInfo.getVisibility();\n\n        if (isOverride) {\n            // Check an ASSIGN statement that's trying to override a property\n            // on a superclass.\n            if (visibility == Visibility.PRIVATE && !sameInput) {\n                compiler.report(\n                        t.makeError(getprop, PRIVATE_OVERRIDE,\n                                objectType.toString()));\n            } else if (overridingVisibility != Visibility.INHERITED &&\n                    overridingVisibility != visibility) {\n                compiler.report(\n                        t.makeError(getprop, VISIBILITY_MISMATCH,\n                                visibility.name(), objectType.toString(),\n                                overridingVisibility.name()));\n            }\n        } else {\n            JSDocInfo currentDocInfo = getprop.getJSDocInfo();\n            Visibility currentVisibility = currentDocInfo == null ?\n                    Visibility.INHERITED : currentDocInfo.getVisibility();\n\n            if (sameInput && visibility == Visibility.PRIVATE) {\n                // Private access is always allowed in the same file.\n                return;\n            } else if (visibility == Visibility.PRIVATE &&\n                    !sameInput && currentVisibility != visibility) {\n                compiler.report(\n                        t.makeError(getprop,\n                                BAD_PRIVATE_PROPERTY_ACCESS,\n                                propertyName,\n                                validator.getReadableJSTypeName(\n                                        getprop.getFirstChild(), true)));\n            } else if (visibility == Visibility.PROTECTED &&\n                    !sameInput && currentVisibility != visibility) {\n                compiler.report(\n                        t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                                propertyName,\n                                validator.getReadableJSTypeName(\n                                        getprop.getFirstChild(), true)));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}