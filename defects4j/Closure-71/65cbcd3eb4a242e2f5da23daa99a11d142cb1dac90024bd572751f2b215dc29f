{
    "generation": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n        // Is this a normal property access, or are we trying to override an existing property?\n        boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;\n\n        // Find the lowest property defined on a class with visibility information.\n        ObjectType tempObjectType = objectType;\n        if (isOverride) {\n            tempObjectType = objectType.getImplicitPrototype();\n        }\n        JSDocInfo docInfo = null;\n        for (; tempObjectType != null; tempObjectType = tempObjectType.getImplicitPrototype()) {\n            docInfo = tempObjectType.getOwnPropertyJSDocInfo(propertyName);\n            if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n                break;\n            }\n        }\n\n        if (tempObjectType == null) {\n            // We couldn't find a visibility modifier; assume it's public.\n            return;\n        }\n\n        boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n        Visibility visibility = docInfo.getVisibility();\n        JSType ownerType = normalizeClassType(tempObjectType);\n        if (isOverride) {\n            // Check an ASSIGN statement that's trying to override a property on a superclass.\n            if (visibility == Visibility.PRIVATE && !sameInput) {\n                compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n                return; // Add this line to prevent further checks for private override.\n            }\n        } else if (visibility == Visibility.PRIVATE && !sameInput) {\n            // Check for private property access in a different file.\n            compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n        }\n\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();\n        if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {\n            compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n        }\n\n        if (visibility == Visibility.PROTECTED && currentClass != null && !currentClass.isSubtype(ownerType)) {\n            compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}