{
    "generation": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n        // Is this a normal property access, or are we trying to override an existing property?\n        boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;\n\n        // If this is an override operation, get the type of the immediate superclass. Otherwise, keep the original type.\n        ObjectType originalType = objectType;\n        if (isOverride) {\n            objectType = objectType.getImplicitPrototype();\n        }\n\n        JSDocInfo docInfo = null;\n        // Find the lowest property defined on a class with visibility information.\n        for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n            docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n            if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n                break;\n            }\n        }\n\n        if (objectType == null) {\n            // We couldn't find a visibility modifier; assume it's public.\n            return;\n        }\n\n        boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n        Visibility visibility = docInfo.getVisibility();\n        JSType ownerType = normalizeClassType(objectType);\n\n        if (visibility == Visibility.PRIVATE) {\n            if (isOverride) {\n                // Check an ASSIGN statement that's trying to override a private property\n                // on a superclass.\n                JSDocInfo overridingInfo = parent.getJSDocInfo();\n                Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();\n\n                if (!sameInput && overridingVisibility != Visibility.PRIVATE) {\n                    compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, originalType.toString()));\n                }\n            } else if (!sameInput && (currentClass == null || !ownerType.differsFrom(currentClass))) {\n                // private access is not allowed outside the file from a different enclosing class.\n                compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n            }\n        } else if (visibility == Visibility.PROTECTED) {\n            // There are 3 types of legal accesses of a protected property:\n            // 1) Accesses in the same file\n            // 2) Overriding the property in a subclass\n            // 3) Accessing the property from inside a subclass\n            // The first two have already been checked for.\n            if (!sameInput && (currentClass == null || !currentClass.isSubtype(ownerType))) {\n                compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}