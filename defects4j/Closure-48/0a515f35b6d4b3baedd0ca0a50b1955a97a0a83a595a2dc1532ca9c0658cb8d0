{
    "generation": "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n    Node n, Node parent, Node rhsValue) {\n  Node ownerNode = n.getFirstChild();\n  String ownerName = ownerNode.getQualifiedName();\n  String qName = n.getQualifiedName();\n  String propName = n.getLastChild().getString();\n  Preconditions.checkArgument(qName != null && ownerName != null);\n\n  // Determining type for #1 + #2 + #3 + #4\n  JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);\n  if (valueType == null && rhsValue != null) {\n    // Determining type for #5\n    valueType = rhsValue.getJSType();\n  }\n\n  // Function prototypes are special.\n  if (\"prototype\".equals(propName)) {\n    Var qVar = scope.getVar(qName);\n    if (qVar != null) {\n      ObjectType qVarType = ObjectType.cast(qVar.getType());\n      if (qVarType != null &&\n          rhsValue != null &&\n          rhsValue.isObjectLit()) {\n        typeRegistry.resetImplicitPrototype(\n            rhsValue.getJSType(), qVarType.getImplicitPrototype());\n      }\n\n      if (qVar.getScope() == scope) {\n        scope.undeclare(qVar);\n      }\n    }\n  }\n\n  if (valueType == null) {\n    if (parent.isExprResult()) {\n      stubDeclarations.add(new StubDeclaration(\n          n,\n          t.getInput() != null && t.getInput().isExtern(),\n          ownerName));\n    }\n\n    return;\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    // Determining declaration for #1 + #3 + #4\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (info.isConstant() && valueType != null\n            && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n\n  if (inferred) {\n    // Determining declaration for #2\n    if (rhsValue != null &&\n        rhsValue.isFunction() &&\n        (info != null || !scope.isDeclared(qName, false))) {\n      if (\"prototype\".equals(propName)) {\n        inferred = checkIfPrototypeFunction(info, rhsValue);\n      } else {\n        inferred = checkIfInstanceFunction(info, rhsValue);\n      }\n    }\n  }\n\n  // Continue with the flow of the original code...\n}\n\nprivate boolean checkIfPrototypeFunction(JSDocInfo info, Node rhsValue) {\n  Node fnNameNode = rhsValue.getFirstChild();\n  return !(fnNameNode != null &&\n      fnNameNode.isName() &&\n      fnNameNode.getString().equals(\"fn\"));\n}\n\nprivate boolean checkIfInstanceFunction(JSDocInfo info, Node rhsValue) {\n  return !(info != null || !scope.isDeclared(rhsValue.getQualifiedName(), false));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}