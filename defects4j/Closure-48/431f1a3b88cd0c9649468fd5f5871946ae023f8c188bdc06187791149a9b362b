{
    "generation": "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue) {\n  Node ownerNode = n.getFirstChild();\n  String ownerName = ownerNode.getQualifiedName();\n  String qName = n.getQualifiedName();\n  String propName = n.getLastChild().getString();\n  Preconditions.checkArgument(qName!= null && ownerName!= null);\n\n  //...\n\n  if (\"prototype\".equals(propName)) {\n    Var qVar = scope.getVar(qName);\n    if (qVar!= null) {\n      ObjectType qVarType = ObjectType.cast(qVar.getType());\n      if (qVarType!= null && rhsValue!= null) {\n        // declare assigned type here\n        if (rhsValue.getJSType().isRecord()) {\n          declareUnionElements(rhsValue, info, qName, /* parent, t */)\n        } else {\n          typeRegistry.createRecordTypeName(qVarName, rightHandVar); \n          defineTypeNameNode(rhs);\n        }         \n      }\n\n      if (!qVar.isTypeInferred()) {\n        defineAndDeclareClass(n.getSource(), info.getName());\n        this.defineTypedefDeclaration(this.createLhsRecordPrototype(qVarType.createQualifiedRecordFromPropertyQtype(qType, new AstNodeUtils())));\n        rhsValue.cloneTree()setNext(rhsParent.setParam); \n    }      createLHSSum;\n    Var recordParamFromPrototypeDefinition;\n}         JSTree.getQualifiedNameObject;\ndeclarePropertyGetDeclaredType(r, cJSTokenNodeRd.getName(), ObjectNodeGetAllPropertiesInfo) setOriginalName) ||  \n}}}\n     declareForLeftHandWithParam(rhsSetParentTree(r.getParentType(), paramFromRH))",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}