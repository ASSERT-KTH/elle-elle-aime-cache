{
    "generation": "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n                               Node n, Node parent, Node rhsValue) {\n  Node ownerNode = n.getFirstChild();\n  String ownerName = ownerNode.getQualifiedName();\n  String qName = n.getQualifiedName();\n  String propName = n.getLastChild().getString();\n  Preconditions.checkArgument(qName != null && ownerName != null);\n\n  // Determine the type of the value being assigned\n  JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);\n  if (valueType == null && rhsValue != null) {\n    valueType = rhsValue.getJSType();\n  }\n\n  // Handle special case for prototype assignments\n  if (\"prototype\".equals(propName)) {\n    Var qVar = scope.getVar(qName);\n    if (qVar != null) {\n      ObjectType qVarType = ObjectType.cast(qVar.getType());\n      if (qVarType != null && rhsValue != null && rhsValue.isObjectLit()) {\n        typeRegistry.resetImplicitPrototype(\n            rhsValue.getJSType(), qVarType.getImplicitPrototype());\n      } else if (!qVar.isTypeInferred()) {\n        return;\n      }\n      if (qVar.getScope() == scope) {\n        scope.undeclare(qVar);\n      }\n    }\n  }\n\n  if (valueType == null) {\n    if (parent.isExprResult()) {\n      stubDeclarations.add(new StubDeclaration(\n          n,\n          t.getInput() != null && t.getInput().isExtern(),\n          ownerName));\n    }\n    return;\n  }\n\n  // Determine if this is a declaration or an assignment\n  boolean isDeclaration = false;\n  if (info != null) {\n    isDeclaration = info.hasType() ||\n                    info.hasEnumParameterType() ||\n                    (info.isConstant() && valueType != null && !valueType.isUnknownType()) ||\n                    FunctionTypeBuilder.isFunctionTypeDeclaration(info);\n  }\n\n  if (!isDeclaration && rhsValue != null && rhsValue.isFunction()) {\n    isDeclaration = info != null || !scope.isDeclared(qName, false);\n  }\n\n  if (isDeclaration) {\n    ObjectType ownerType = getObjectSlot(ownerName);\n    if (ownerType != null) {\n      boolean isExtern = t.getInput() != null && t.getInput().isExtern();\n      if ((!ownerType.hasOwnProperty(propName) ||\n           ownerType.isPropertyTypeInferred(propName)) &&\n          ((isExtern && !ownerType.isNativeObjectType()) ||\n           !ownerType.isInstanceType())) {\n        ownerType.defineDeclaredProperty(propName, valueType, n);\n      }\n    }\n    defineSlot(n, parent, valueType, /* inferred */ false);\n  } else {\n    // Handle assignment case\n    // If the property is already declared, update its type\n    Var existingVar = scope.getVar(qName);\n    if (existingVar != null) {\n      existingVar.setType(valueType);\n    } else {\n      // If not declared, declare it as inferred\n      defineSlot(n, parent, valueType, /* inferred */ true);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}