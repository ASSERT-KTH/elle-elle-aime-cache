{
    "generation": "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n    Node n, Node parent, Node rhsValue) {\n  Node ownerNode = n.getFirstChild();\n  String ownerName = ownerNode.getQualifiedName();\n  String qName = n.getQualifiedName();\n  String propName = n.getLastChild().getString();\n  Preconditions.checkArgument(qName != null && ownerName != null);\n\n  // Check for special case of function prototype reassignment\n  if (\"prototype\".equals(propName) && rhsValue != null && rhsValue.isObjectLit()\n      && !scope.isDeclared(qName, false)) {\n    // If the function has not been declared before and its prototype is being\n    // assigned to an object literal, then consider it a declaration.\n    defineSlot(n, parent, rhsValue.getJSType(), /*inferred*/ false);\n    return;\n  }\n\n  // The original type resolution logic\n  JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);\n  if (valueType == null && rhsValue != null) {\n    valueType = rhsValue.getJSType();\n  }\n\n  // Function prototypes handling\n  if (\"prototype\".equals(propName)) {\n    Var qVar = scope.getVar(qName);\n    // Rest of the original code for prototype handling\n  }\n\n  // The rest of the original code\n  // ...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}