{
    "generation": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\")) {\n      // Fold String(a) to '' + (a) on immutable literals,\n      // which allows further optimizations\n      //\n      // We can't do this in the general case, because String(a) has\n      // slightly different semantics than '' + (a). See\n      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n      Node value = callTarget.getNext();\n      // Ensure that there is no additional argument for String, only one is allowed\n      if (value != null && value.getNext() == null && \n          (isLiteralValue(value) || value.isString())) {\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            value.detachFromParent());\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n    return n;\n  }\n\n  private boolean isLiteralValue(Node node) {\n    // Helper method to check if the node represents an immutable literal\n    return node.isNumber() || node.isString() || node.isBoolean() || node.isNull();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}