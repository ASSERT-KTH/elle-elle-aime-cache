{
    "generation": "/**\n * Attempts to fold a simple function call to `String(a)` into `'' + (a)`.\n * This optimization is only applied when `a` is an immutable literal.\n *\n * @param n the Node to attempt folding on\n * @return the folded Node, or the original Node if folding was not possible\n */\nprivate Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget!= null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\")) {\n      // Fold String(a) to '' + (a) on immutable literals,\n      // which allows further optimizations\n      //\n      // We can't do this in the general case, because String(a) has\n      // slightly different semantics than '' + (a). See\n      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n      Node value = callTarget.getNext();\n      if (value!= null && isImmutableLiteral(value)) {\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            value.detachFromParent());\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n    return n;\n}\n\n// Helper function to check if a node represents an immutable literal\nprivate boolean isImmutableLiteral(Node node) {\n    return node.isNumber() || node.isString() || node.isNull() || node.isBoolean();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}