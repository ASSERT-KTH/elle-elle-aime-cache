{
    "generation": "private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n        return false;\n    }\n\n    // Try to infer the template types\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(fnType, n);\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    Node callTarget = n.getFirstChild();\n\n    FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();\n    Preconditions.checkNotNull(replacementFnType);\n\n    callTarget.setJSType(replacementFnType);\n    \n    // Check if the return type is a template type and replace it if necessary\n    JSType returnType = replacementFnType.getReturnType();\n    if (returnType.isTemplateType()) {\n        JSType replacedReturnType = replacer.replacement.getOrDefault(\n            (TemplateType) returnType, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n        n.setJSType(replacedReturnType);\n    } else {\n        n.setJSType(returnType);\n    }\n\n    return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}