{
    "generation": "  private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(fnType, n);\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    Node callTarget = n.getFirstChild();\n\n    FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();\n    \n    // Check that replacementFnType is not null\n    if (replacementFnType != null) {\n      callTarget.setJSType(replacementFnType);\n      JSType returnType = replacementFnType.getReturnType();\n      \n      // Set JSType to UNKNOWN if returnType is null\n      if (returnType != null) {\n        n.setJSType(returnType);\n      } else {\n        n.setJSType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n    } else {\n      callTarget.setJSType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      n.setJSType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n    }\n\n    return replacer.madeChanges;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}