{
    "generation": "  private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(fnType, n);\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    Node callTarget = n.getFirstChild();\n\n    FunctionType newFnType = fnType;\n    for (TemplateType key : keys) {\n      JSType inferredType = inferred.get(key);\n      if (inferredType != null) {\n        newFnType = newFnType.replaceTemplateType(key, inferredType);\n      }\n    }\n\n    callTarget.setJSType(newFnType);\n    n.setJSType(newFnType.getReturnType());\n\n    return !fnType.equals(newFnType);\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}