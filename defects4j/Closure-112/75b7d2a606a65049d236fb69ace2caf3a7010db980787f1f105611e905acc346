{
    "generation": "  /**\n   * For functions with function(this: T, ...) and T as parameters, type\n   * inference will set the type of this on a function literal argument to the\n   * actual type of T.\n   */\n  private boolean inferTemplatedTypesForCall(\n      Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(fnType, n);\n\n    if (inferred.isEmpty()) {\n      // If no types were inferred but template keys exist,\n      // ensure that all template types are replaced with UNKNOWN\n      for (TemplateType key : keys) {\n        inferred.put(key, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n    }\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    Node callTarget = n.getFirstChild();\n\n    JSType replacedType = fnType.visit(replacer);\n    FunctionType replacementFnType = replacedType == null \n        ? null \n        : replacedType.toMaybeFunctionType();\n\n    Preconditions.checkNotNull(replacementFnType, \"Replacement function type cannot be null.\");\n\n    callTarget.setJSType(replacementFnType);\n    n.setJSType(replacementFnType.getReturnType());\n\n    return replacer.madeChanges;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}