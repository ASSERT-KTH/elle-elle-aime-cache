{
    "generation": "/**\n * For functions with function(this: T,...) and T as parameters, type\n * inference will set the type of this on a function literal argument to the\n * the actual type of T.\n */\nprivate boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n  final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n     .getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types\n  Map<TemplateType, JSType> inferred =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // If inference was unsuccessful for any template type, \n  // do not attempt to replace template types to avoid incorrect replacements\n  if (inferred.values().stream().anyMatch(t -> t ==.registry.getUnknownType())) {\n    return false;\n  }\n\n  // Replace all template types. \n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n      registry, inferred);\n  Node callTarget = n.getFirstChild();\n\n  FunctionType replacementFnType = fnType.visit(replacer)\n     .toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType);\n\n  callTarget.setJSType(replacementFnType);\n  n.setJSType(replacementFnType.getReturnType());\n\n  return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}