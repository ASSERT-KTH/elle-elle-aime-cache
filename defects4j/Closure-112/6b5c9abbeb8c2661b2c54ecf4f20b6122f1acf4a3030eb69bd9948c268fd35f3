{
    "generation": "private boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n      return false;\n    }\n\n    // Try to infer the template types\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(fnType, n);\n\n    if (inferred == null) {\n      return false;\n    }\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // return false.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    Node callTarget = n.getFirstChild();\n\n    JSType replacementJSType = fnType.visit(replacer);\n\n    if (!(replacementJSType instanceof FunctionType)) {\n      return false;\n    }\n\n    FunctionType replacementFnType = (FunctionType) replacementJSType;\n\n    // Validate if the replacementFnType corresponds to the function call node's child\n    if (!replacementFnType.isSubtype(callTarget.getJSType().toMaybeFunctionType())) {\n      return false;\n    }\n\n    callTarget.setJSType(replacementFnType);\n    n.setJSType(replacementFnType.getReturnType());\n\n    return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}