{
    "generation": "/**\n * For functions with function(this: T, ...) and T as parameters, type\n * inference will set the type of this on a function literal argument to the\n * actual type of T.\n */\nprivate boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n        .getTemplateKeys();\n    if (keys.isEmpty()) {\n        return false;\n    }\n\n    // Try to infer the template types\n    Map<TemplateType, JSType> inferred =\n        inferTemplateTypesFromParameters(fnType, n);\n\n    // If no types were inferred, we cannot proceed with replacement\n    if (inferred.isEmpty()) {\n        return false;\n    }\n\n    // Replace all template types. If we couldn't find a replacement, we\n    // replace it with UNKNOWN.\n    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);\n    Node callTarget = n.getFirstChild();\n\n    FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();\n    Preconditions.checkNotNull(replacementFnType);\n\n    callTarget.setJSType(replacementFnType);\n    JSType returnType = replacementFnType.getReturnType();\n\n    // Ensure that the return type is set correctly on the call node\n    n.setJSType(returnType);\n\n    return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}