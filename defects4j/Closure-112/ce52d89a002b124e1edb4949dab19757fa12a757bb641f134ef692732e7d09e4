{
    "generation": "/**\n * For functions with function(this: T, ...) and T as parameters, type\n * inference will set the type of this on a function literal argument to the\n * the actual type of T.\n */\nprivate boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n  final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n      .getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types\n  Map<TemplateType, JSType> inferred =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // If no inferences were made, try to infer from the return type as well\n  if (inferred.isEmpty()) {\n    inferred = inferTemplateTypesFromReturnType(fnType, n);\n  }\n\n  // Replace all template types. If we couldn't find a replacement, we\n  // replace it with UNKNOWN.\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n      registry, inferred);\n  Node callTarget = n.getFirstChild();\n\n  FunctionType replacementFnType = fnType.visit(replacer)\n      .toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType);\n\n  callTarget.setJSType(replacementFnType);\n  n.setJSType(replacementFnType.getReturnType());\n\n  return replacer.madeChanges;\n}\n\nprivate Map<TemplateType, JSType> inferTemplateTypesFromReturnType(\n    FunctionType fnType, Node callNode) {\n  Map<TemplateType, JSType> inferredTypes = new HashMap<>();\n  JSType returnType = fnType.getReturnType();\n  JSType actualReturnType = callNode.getJSType();\n\n  if (returnType != null && actualReturnType != null) {\n    TemplateTypeMapper mapper = new TemplateTypeMapper(registry, returnType, actualReturnType);\n    inferredTypes.putAll(mapper.getInferredTemplateTypes());\n  }\n\n  return inferredTypes;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}