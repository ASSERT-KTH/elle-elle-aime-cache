{
    "generation": "/**\n * For functions with function(this: T, ...) and T as parameters, type\n * inference will set the type of this on a function literal argument to the\n * the actual type of T.\n */\nprivate boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n  final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n      .getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types\n  Map<TemplateType, JSType> inferred =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // Replace all template types. If we couldn't find a replacement, we\n  // replace it with UNKNOWN.\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n      registry, inferred);\n  Node callTarget = n.getFirstChild();\n\n  // Create a new FunctionType with the inferred types\n  FunctionType replacementFnType = fnType.visit(replacer)\n      .toMaybeFunctionType();\n  if (replacementFnType == null) {\n    // If we can't create a new FunctionType, use the original one\n    replacementFnType = fnType;\n  }\n\n  callTarget.setJSType(replacementFnType);\n\n  // Set the return type of the node\n  JSType returnType = replacementFnType.getReturnType();\n  if (returnType == null || returnType.isUnknownType()) {\n    // If we can't determine the return type, use the original one\n    returnType = fnType.getReturnType();\n  }\n  n.setJSType(returnType);\n\n  return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}