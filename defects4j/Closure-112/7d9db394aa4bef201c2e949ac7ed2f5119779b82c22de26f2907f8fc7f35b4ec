{
    "generation": "private boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n  final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n      .getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types\n  Map<TemplateType, JSType> inferred =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // If we couldn't infer all template types, try to use the return type or other context clues\n  if (inferred.size() < keys.size()) {\n    inferTemplateTypesFromReturnType(n, fnType, inferred);\n  }\n\n  // Replace all template types. If we couldn't find a replacement, we\n  // replace it with UNKNOWN.\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n      registry, inferred);\n  Node callTarget = n.getFirstChild();\n\n  FunctionType replacementFnType = fnType.visit(replacer)\n      .toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType);\n\n  callTarget.setJSType(replacementFnType);\n  n.setJSType(replacementFnType.getReturnType());\n\n  return replacer.madeChanges;\n}\n\nprivate void inferTemplateTypesFromReturnType(Node callNode, FunctionType functionType, Map<TemplateType, JSType> inferred) {\n  Node callTarget = callNode.getFirstChild();\n  JSType returnType = callNode.getJSType();\n  if (returnType != null) {\n    for (TemplateType key : functionType.getTemplateTypeMap().getTemplateKeys()) {\n      if (!inferred.containsKey(key)) {\n        JSType inferredType = key.getBound().isUnknownType() ? returnType : key.getBound();\n        inferred.put(key, inferredType);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}