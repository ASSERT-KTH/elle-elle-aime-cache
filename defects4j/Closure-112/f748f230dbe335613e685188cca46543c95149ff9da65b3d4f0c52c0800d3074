{
    "generation": "/**\n * For functions with function(this: T, ...) and T as parameters, type\n * inference will set the type of this on a function literal argument to the\n * the actual type of T.\n */\nprivate boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n  final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n      .getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types\n  Map<TemplateType, JSType> inferred =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // Create a replacer that will replace all template types. If we couldn't \n  // find a replacement, we replace it with UNKNOWN.\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n      registry, inferred);\n\n  // Visit the function type with the replacer\n  FunctionType replacementFnType = fnType.visit(replacer)\n      .toMaybeFunctionType();\n  \n  // If replacementFnType is null, it means that the template type inference \n  // failed completely. In this case, we should not modify the call target \n  // or return type.\n  if (replacementFnType == null) {\n    return replacer.madeChanges;\n  }\n\n  Node callTarget = n.getFirstChild();\n  callTarget.setJSType(replacementFnType);\n\n  // Set the return type of the call node\n  JSType returnType = replacementFnType.getReturnType();\n  if (returnType == null) {\n    returnType = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n  n.setJSType(returnType);\n\n  return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}