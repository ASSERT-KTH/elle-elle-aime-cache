{
    "generation": "/**\n * For functions with function(this: T, ...) and T as parameters, type\n * inference will set the type of this on a function literal argument to the\n * the actual type of T.\n */\nprivate boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n  final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n      .getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types\n  Map<TemplateType, JSType> inferred =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // If inference from parameters did not provide all template types, try inferring from the return type\n  if (inferred.size() < keys.size()) {\n    Node callTarget = n.getFirstChild();\n    JSType callTargetType = callTarget.getJSType();\n    if (callTargetType != null && callTargetType.isFunctionType()) {\n      FunctionType callTargetFunctionType = callTargetType.toMaybeFunctionType();\n      if (callTargetFunctionType != null) {\n        inferred.putAll(inferTemplateTypesFromReturnType(fnType, callTargetFunctionType));\n      }\n    }\n  }\n\n  // Replace all template types. If we couldn't find a replacement, we\n  // replace it with UNKNOWN.\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n      registry, inferred);\n  Node callTarget = n.getFirstChild();\n\n  FunctionType replacementFnType = fnType.visit(replacer)\n      .toMaybeFunctionType();\n  Preconditions.checkNotNull(replacementFnType);\n\n  callTarget.setJSType(replacementFnType);\n  n.setJSType(replacementFnType.getReturnType());\n\n  return replacer.madeChanges;\n}\n\nprivate Map<TemplateType, JSType> inferTemplateTypesFromReturnType(FunctionType fnType, FunctionType callTargetFunctionType) {\n  Map<TemplateType, JSType> inferred = Maps.newHashMap();\n  ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();\n  for (TemplateType key : keys) {\n    // Placeholder logic to infer template types from return type\n    // This should be replaced with actual logic based on how return types are structured\n    if (callTargetFunctionType.getReturnType() != null) {\n      inferred.put(key, callTargetFunctionType.getReturnType());\n    }\n  }\n  return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}