{
    "generation": "/**\n * For functions with function(this: T, ...) and T as parameters, type\n * inference will set the type of this on a function literal argument to the\n * the actual type of T.\n */\nprivate boolean inferTemplatedTypesForCall(\n    Node n, FunctionType fnType) {\n  final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()\n      .getTemplateKeys();\n  if (keys.isEmpty()) {\n    return false;\n  }\n\n  // Try to infer the template types\n  Map<TemplateType, JSType> inferred =\n      inferTemplateTypesFromParameters(fnType, n);\n\n  // Replace all template types. If we couldn't find a replacement, we\n  // replace it with UNKNOWN.\n  TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n      registry, inferred);\n  Node callTarget = n.getFirstChild();\n\n  FunctionType replacementFnType = fnType.visit(replacer)\n      .toMaybeFunctionType();\n  if (replacementFnType == null) {\n    // If the replacement failed, use the original function type\n    replacementFnType = fnType;\n  }\n\n  // Handle nested template types\n  for (TemplateType key : keys) {\n    JSType inferredType = inferred.get(key);\n    if (inferredType != null && inferredType.isTemplateType()) {\n      TemplateType nestedKey = (TemplateType) inferredType;\n      JSType nestedInferred = inferred.get(nestedKey);\n      if (nestedInferred != null) {\n        inferred.put(key, nestedInferred);\n      }\n    }\n  }\n\n  // Create a new replacer with the updated inferred types\n  replacer = new TemplateTypeReplacer(registry, inferred);\n  replacementFnType = replacementFnType.visit(replacer)\n      .toMaybeFunctionType();\n  if (replacementFnType == null) {\n    replacementFnType = fnType;\n  }\n\n  callTarget.setJSType(replacementFnType);\n  n.setJSType(replacementFnType.getReturnType());\n\n  return replacer.madeChanges;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}