{
    "generation": "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n\n  // Check if we need to insert a space when printing a negative number shortly after a '-' sign\n  if (x < 0 && prev == '-' && x != -0.0) { // I added a condition to prevent a space from being added before '-0.0'\n    add(\" \");\n  } else if (x == 0 && Double.doubleToRawLongBits(x) < 0) { // This ensures a space is added when printing '-0'\n    add(\" -0\");\n    return; // We can return as we have already added the number to the output\n  }\n\n  if ((long) x == x && !negativeZero) {\n    long value = (long) x;\n    long mantissa = value;\n    int exp = 0;\n    if (Math.abs(x) >= 100) {\n      while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n        mantissa /= 10;\n        exp++;\n      }\n    }\n    if (exp > 2) {\n      add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n    } else {\n      add(Long.toString(value));\n    }\n  } else {\n    add(String.valueOf(x));\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}