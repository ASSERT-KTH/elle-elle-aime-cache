{
    "generation": "/**\n * Returns true iff they are equal as defined by\n * {@link #equals(double,double,int) equals(x, y, 1)}.\n *\n * @param x first value\n * @param y second value\n * @return {@code true} if the values are equal.\n */\npublic static boolean equals(double x, double y) {\n    return equals(x, y, 1);\n}\n\n/**\n * Returns true iff they are equal taking into account a specified tolerance.\n *\n * @param x first value\n * @param y second value\n * @param maxUlps maximum ulps (units in the last place)\n * @return {@code true} if the values are equal according to the specified tolerance\n */\nprivate static boolean equals(double x, double y, int maxUlps) {\n    // Handle NaN cases\n    if (Double.isNaN(x) && Double.isNaN(y)) {\n        return true;\n    }\n    \n    // Handle infinities\n    if (Double.isInfinite(x) || Double.isInfinite(y)) {\n        return x == y;\n    }\n    \n    // Calculate the difference in ulps\n    long xBits = Double.doubleToLongBits(x);\n    long yBits = Double.doubleToLongBits(y);\n    \n    // Handle zero cases specially\n    if (x == 0 || y == 0) {\n        if (x == y) { // Both zeros have the same sign\n            return true;\n        } else if (Math.abs(x - y) < Double.MIN_NORMAL) {\n            // Both are subnormal or one is subnormal and the other is zero\n            return Math.abs(xBits - yBits) <= maxUlps;\n        }\n    }\n    \n    // Compare the absolute difference in ulps\n    return Math.abs(xBits - yBits) <= maxUlps;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}