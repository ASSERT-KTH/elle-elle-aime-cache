{
    "generation": "    /**\n     * Returns true iff they are equal. Two arrays are considered equal if both arrays contain the\n     * same number of elements and all corresponding pairs of elements in the two arrays are equal\n     * as defined by {@link #equals(double,double,int) equals(x, y, 1)}.\n     *\n     * This method handles {@code null} input gracefully. {@code null} arrays are equal to {@code null}\n     * arrays. {@code null} arrays are not equal to empty arrays or arrays of differing length.\n     * {@code null} elements are equal to {@code null} elements.\n     * {@code Double.NaN} elements are considered unequal to every other {@code Double.NaN} element\n     * and unequal to {@code null}\n     *\n     * @param actual first value\n     * @param expected second value\n     * @return {@code true} if the values are equal.\n     */\n    public static boolean equals(double[] actual, double[] expected) {\n        if(actual == null || expected == null) {\n            return actual == expected;\n        }\n\n        if(actual.length != expected.length) {\n            return false;\n        }\n\n        for(int i=0; i<actual.length; i++) {\n            if(Double.isNaN(actual[i]) && Double.isNaN(expected[i])) {\n                return false;\n            }\n            if(actual[i] != expected[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}