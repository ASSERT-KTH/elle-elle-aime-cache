{
    "generation": "@Override\npublic CollectionDeserializer createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException\n{\n    // May need to resolve types for delegate-based creators:\n    JsonDeserializer<Object> delegateDeser = null;\n    if (_valueInstantiator!= null) {\n        if (_valueInstantiator.canCreateUsingDelegate()) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                        +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                        +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n            }\n            delegateDeser = findDeserializer(ctxt, delegateType, property);\n        }\n    }\n    // [databind#1043]: allow per-property allow-wrapping of single overrides:\n    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n    //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    // also, often value deserializer is resolved here:\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n\n    // May have a content converter\n    valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n    final JavaType vt = _collectionType.getContentType();\n    if (valueDeser == null) {\n        valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n    } else { // if directly assigned, probably not yet contextual, so:\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n    }\n    // and finally, type deserializer needs context as well\n    TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n    if (valueTypeDeser!= null) {\n        valueTypeDeser = valueTypeDeser.forProperty(property);\n    }\n    \n    // Fix: handle unmodifiable collections\n    if (_collectionType.isReferenceType() && _collectionType.getContentType().getRawClass() == Object.class) {\n        return new CollectionDeserializer(_collectionType, _valueInstantiator, delegateDeser, valueDeser, valueTypeDeser) {\n            @Override\n            public Collection<Object> deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n                Collection<Object> result = super.deserialize(p, ctxt);\n                return Collections.unmodifiableCollection(result);\n            }\n\n            @Override\n            public Collection<Object> deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n                Collection<Object> result = super.deserializeWithType(p, ctxt, typeDeserializer);\n                return Collections.unmodifiableCollection(result);\n            }\n        };\n    }\n\n    return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}