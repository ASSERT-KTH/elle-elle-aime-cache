{
    "generation": "@Override\npublic CollectionDeserializer createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException\n{\n    // May need to resolve types for delegate-based creators:\n    JsonDeserializer<Object> delegateDeser = null;\n    if (_valueInstantiator != null) {\n        if (_valueInstantiator.canCreateUsingDelegate()) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _collectionType\n                        + \": value instantiator (\" + _valueInstantiator.getClass().getName()\n                        + \") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n            }\n            delegateDeser = findDeserializer(ctxt, delegateType, property);\n        }\n    }\n    // [databind#1043]: allow per-property allow-wrapping of single overrides:\n    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n    //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    // also, often value deserializer is resolved here:\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n\n    // May have a content converter\n    valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n    final JavaType vt = _collectionType.getContentType();\n    if (valueDeser == null) {\n        valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n    } else { // if directly assigned, probably not yet contextual, so:\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n    }\n    // and finally, type deserializer needs context as well\n    TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n    if (valueTypeDeser != null) {\n        valueTypeDeser = valueTypeDeser.forProperty(property);\n    }\n\n    // Check if the collection type is an unmodifiable collection and handle it accordingly\n    if (isUnmodifiableCollection(_collectionType)) {\n        // Use a custom value instantiator for unmodifiable collections\n        ValueInstantiator customInstantiator = createCustomInstantiator(ctxt, _collectionType);\n        return withResolved(customInstantiator, delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n    }\n\n    return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n}\n\n// Helper method to check if the type is an unmodifiable collection\nprivate boolean isUnmodifiableCollection(JavaType collectionType) {\n    Class<?> rawClass = collectionType.getRawClass();\n    return rawClass.getName().startsWith(\"java.util.Collections$Unmodifiable\");\n}\n\n// Helper method to create a custom value instantiator for unmodifiable collections\nprivate ValueInstantiator createCustomInstantiator(DeserializationContext ctxt, JavaType collectionType) {\n    // Implement a custom value instantiator here\n    // For example, using a builder or factory method to create instances of unmodifiable collections\n    // This is a placeholder for the actual implementation\n    return new CustomValueInstantiator(ctxt.getConfig(), collectionType);\n}\n\n// Custom value instantiator class\nclass CustomValueInstantiator extends ValueInstantiatorBase {\n    public CustomValueInstantiator(DeserializationConfig config, JavaType collectionType) {\n        super(config, collectionType);\n    }\n\n    @Override\n    public boolean canCreateUsingDefaultCreator() {\n        return false; // Unmodifiable collections do not have default constructors\n    }\n\n    @Override\n    public boolean canCreateUsingDelegateCreator() {\n        return true; // Use delegate creator to wrap a modifiable collection\n    }\n\n    @Override\n    public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) {\n        // Wrap the delegate (modifiable collection) in an unmodifiable collection\n        if (delegate instanceof Set) {\n            return Collections.unmodifiableSet((Set<?>) delegate);\n        } else if (delegate instanceof List) {\n            return Collections.unmodifiableList((List<?>) delegate);\n        } else if (delegate instanceof Collection) {\n            return Collections.unmodifiableCollection((Collection<?>) delegate);\n        }\n        throw new IllegalArgumentException(\"Unsupported collection type: \" + delegate.getClass());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}