{
    "generation": "    /**\n     * Method called to finalize setup of this deserializer,\n     * when it is known for which property deserializer is needed\n     * for.\n     */\n    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // May need to resolve types for delegate-based creators:\n        JsonDeserializer<Object> delegateDeser = null;\n        if (_valueInstantiator != null) {\n            if (_valueInstantiator.canCreateUsingDelegate()) {\n                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n                if (delegateType == null) {\n                    throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                            +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n                }\n                delegateDeser = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n        // [databind#1043]: allow per-property allow-wrapping of single overrides:\n        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n        //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        // also, often value deserializer is resolved here:\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        \n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n        // and finally, type deserializer needs context as well\n        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n        if (valueTypeDeser != null) {\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n\n        // Handle unmodifiable collections\n        if (_valueInstantiator == null && isUnmodifiableCollection(_collectionType)) {\n            // Use a special deserializer for unmodifiable collections\n            valueDeser = new UnmodifiableCollectionDeserializer(valueDeser, vt);\n        }\n\n        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n    }\n\n    // Helper method to check if a type is an unmodifiable collection\n    protected boolean isUnmodifiableCollection(JavaType type) {\n        Class<?> rawClass = type.getRawClass();\n        return rawClass.getName().startsWith(\"java.util.Collections$Unmodifiable\");\n    }\n\n    // Inner class to handle deserialization of unmodifiable collections\n    protected static class UnmodifiableCollectionDeserializer extends JsonDeserializer<Object> {\n        protected final JsonDeserializer<?> delegate;\n        protected final JavaType contentType;\n\n        public UnmodifiableCollectionDeserializer(JsonDeserializer<?> delegate, JavaType contentType) {\n            this.delegate = delegate;\n            this.contentType = contentType;\n        }\n\n        @Override\n        public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n            Collection<Object> result = new ArrayList<>();\n            if (p.isExpectedStartArrayToken()) {\n                while (p.nextToken() != JsonToken.END_ARRAY) {\n                    Object value = delegate.deserialize(p, ctxt);\n                    result.add(value);\n                }\n            } else {\n                Object value = delegate.deserialize(p, ctxt);\n                if (value != null) {\n                    result.add(value);\n                }\n            }\n            return Collections.unmodifiableCollection(result);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}