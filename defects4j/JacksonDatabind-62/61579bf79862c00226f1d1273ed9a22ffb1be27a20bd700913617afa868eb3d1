{
    "generation": "    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        JsonDeserializer<Object> delegateDeser = null;\n        ValueInstantiator valueInstantiator = _valueInstantiator;\n        \n        // Check if the collection type is unmodifiable\n        if (_collectionType.getRawClass().getName().startsWith(\"java.util.Collections$Unmodifiable\")) {\n            // Use a custom ValueInstantiator for unmodifiable collections\n            valueInstantiator = new UnmodifiableCollectionValueInstantiator(_collectionType);\n        } else if (valueInstantiator != null && valueInstantiator.canCreateUsingDelegate()) {\n            JavaType delegateType = valueInstantiator.getDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _collectionType\n                        + \": value instantiator (\" + valueInstantiator.getClass().getName()\n                        + \") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n            }\n            delegateDeser = findDeserializer(ctxt, delegateType, property);\n        }\n\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        \n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else {\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n        \n        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n        if (valueTypeDeser != null) {\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n        \n        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle, valueInstantiator);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}