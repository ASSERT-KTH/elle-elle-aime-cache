{
    "generation": "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n        return;\n    }\n\n    if (!r.isEmpty()) {\n        char c = r.consume();\n        if (t.isAppropriateEndTagToken()) {\n            switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.dataBuffer.append(c);\n                    anythingElse(t, r);\n                    break;\n            }\n        } else if (t.getTokeniserState() == HtmlParser.TokeniserState.WithinScriptData) {\n            r.unconsume(); // unconsume the character as it might be a part of a comment\n            anythingElse(t, r);\n        } else {\n            r.unconsume(); // unconsume the character if it's none of the above\n            anythingElse(t, r);\n        }\n    } else {\n        anythingElse(t, r);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}