{
    "generation": "void read(Tokeniser t, CharacterReader r) {\n    if (t.getState() == CharacterReadState.TagOpen) {\n        if (r.matchesLetter() && r.matchesIgnoreCase(\"script\")) {\n            // Handle script tag\n            t.transition(CharacterReadState.ScriptData);\n            return;\n        }\n        // other tag handling...\n    } else if (t.getState() == CharacterReadState.ScriptData) {\n        if (r.matches(\"<!--\")) {\n            // Handle script comment\n            t.addMarker(new CommentMarker());\n            r.advance(); // consume '<'\n            r.advance(); // consume '!'\n            r.advance(); // consume '-'\n            r.advance(); // consume '-'\n            t.transition(CharacterReadState.ScriptDataComment);\n        } else if (r.matches(\"<'\")) {\n            // Handle single quote in script\n            t.dataBuffer.append(r.consume());\n        } else if (r.matches(\"</\") && r.matchesIgnoreCase(\"script\")) {\n            // Handle end of script tag\n            t.emitTagPending();\n            r.advance(); // consume '<'\n            r.advance(); // consume '/'\n            // consume script tag name\n            while (r.matchesLetter()) r.advance();\n            t.transition(CharacterReadState.Data);\n        } else {\n            // Process script data\n            t.dataBuffer.append(r.consume());\n        }\n    } else if (t.getState() == CharacterReadState.ScriptDataComment) {\n        if (r.matches(\"-->\")) {\n            // Handle end of comment\n            r.advance(); // consume '-'\n            r.advance(); // consume '-'\n            r.advance(); // consume '>'\n            t.removeMarker();\n            t.transition(CharacterReadState.ScriptData);\n        } else {\n            // Process comment data\n            t.dataBuffer.append(r.consume());\n        }\n    } else {\n        // Handle other states...\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}