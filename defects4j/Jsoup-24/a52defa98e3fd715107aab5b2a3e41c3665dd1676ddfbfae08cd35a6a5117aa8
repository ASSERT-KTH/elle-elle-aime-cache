{
    "generation": "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n        r.advance();\n        return;\n    }\n\n    if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {\n        char c = r.consume();\n        switch (c) {\n            case '\\t':\n            case '\\n':\n            case '\\f':\n            case ' ':\n                t.transition(BeforeAttributeName);\n                break;\n            case '/':\n                t.transition(SelfClosingStartTag);\n                break;\n            case '>':\n                // Fix: Check for script tag to handle quotes in comments correctly\n                if (t.tagPending.tagName().equals(\"script\")) {\n                    handleScriptTag(t, r);\n                } else {\n                    t.emitTagPending();\n                    t.transition(Data);\n                }\n                break;\n            default:\n                t.dataBuffer.append(c);\n                anythingElse(t, r);\n                break;\n        }\n    } else {\n        anythingElse(t, r);\n    }\n}\n\n// New method to handle script tags\nvoid handleScriptTag(Tokeniser t, CharacterReader r) {\n    StringBuilder scriptContent = new StringBuilder();\n    while (!r.isEmpty()) {\n        char c = r.consume();\n        if (c == '<') {\n            if (r.matches(\"/script>\")) {\n                r.consume(8); // Consume \"/script>\"\n                break;\n            } else {\n                scriptContent.append(c);\n            }\n        } else {\n            scriptContent.append(c);\n        }\n    }\n    t.dataBuffer.append(scriptContent.toString());\n    t.emitTagPending();\n    t.transition(Data);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}