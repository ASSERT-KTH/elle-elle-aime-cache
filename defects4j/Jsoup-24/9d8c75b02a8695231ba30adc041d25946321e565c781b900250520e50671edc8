{
    "generation": "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n        r.advance();\n        return;\n    }\n\n    if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n        char c = r.consume();\n        switch (c) {\n            case '\\t':\n            case '\\n':\n            case '\\f':\n            case ' ':\n                t.transition(BeforeAttributeName);\n                break;\n            case '/':\n                t.transition(SelfClosingStartTag);\n                break;\n            case '>':\n                t.emitTagPending();\n                t.transition(Data);\n                break;\n            default:\n                t.dataBuffer.append(c);\n                anythingElse(t, r);\n                break;\n        }\n    } else {\n        // Ensure that we correctly handle characters within script tags\n        if (t.current.isScriptType()) {\n            t.dataBuffer.append(r.consumeToAny('<', '&', '\\0'));\n            if (!r.isEmpty()) {\n                char next = r.current();\n                if (next == '<') {\n                    t.transition(BeforeAttributeName);\n                } else if (next == '&') {\n                    t.transition(CharacterReferenceInData);\n                }\n            }\n        } else {\n            anythingElse(t, r);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}