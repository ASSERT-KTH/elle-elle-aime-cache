{
    "generation": "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n        r.advance();\n        return;\n    }\n\n    if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {\n        char c = r.consume();\n        switch (c) {\n            case '\\t':\n            case '\\n':\n            case '\\f':\n            case ' ':\n                t.transition(BeforeAttributeName);\n                break;\n            case '/':\n                t.transition(SelfClosingStartTag);\n                break;\n            case '>':\n                // Fix: Handle quoted strings in script tags more accurately\n                if (t.tagPending.tagName().equals(\"script\")) {\n                    int idx = t.dataBuffer.toString().indexOf(\"document.write\");\n                    if (idx!= -1) {\n                        int quoteIdx = t.dataBuffer.toString().indexOf(\"</scr\");\n                        if (quoteIdx!= -1 && t.dataBuffer.toString().charAt(quoteIdx + 5) == '\\'') {\n                            t.dataBuffer.setLength(quoteIdx + 5);\n                            t.dataBuffer.append('\\\"');\n                        }\n                    }\n                }\n                t.emitTagPending();\n                t.transition(Data);\n                break;\n            default:\n                t.dataBuffer.append(c);\n                anythingElse(t, r);\n                break;\n        }\n    } else {\n        anythingElse(t, r);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}