{
    "generation": "        void read(Tokeniser t, CharacterReader r) {\n            if (r.matchesLetter()) {\n                String name = r.consumeLetterSequence();\n                t.tagPending.appendTagName(name.toLowerCase());\n                t.dataBuffer.append(name);\n                r.advance();\n                return;\n            }\n\n            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n                char c = r.consume();\n                switch (c) {\n                    case '\\t':\n                    case '\\n':\n                    case '\\f':\n                    case ' ':\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case '/':\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case '>':\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                        break;\n                }\n            } else {\n                char c = r.consume();\n                switch (c) {\n                    case '-':\n                        if (r.matches('-')) {\n                            t.emitComment(r.consumeTo(\"--\"));\n                            r.matchConsume(\"--\");\n                            t.transition(Data);\n                            return;\n                        }\n                        break;\n                    case '<':\n                        if (r.matches(\"/script\") || r.matches(\"/SCRIPT\")) {\n                            r.consumeTagName();\n                            t.transition(AfterScriptData);\n                            return;\n                        }\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                        break;\n                }\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}