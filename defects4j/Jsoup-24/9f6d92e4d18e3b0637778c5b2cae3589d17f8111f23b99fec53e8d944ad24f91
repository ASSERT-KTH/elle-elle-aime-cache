{
    "generation": "void read(Tokeniser t, CharacterReader r) {\n    if (t.getState() == TagOpen) {\n        if (r.matchesLetter()) {\n            String name = r.consumeLetterSequence();\n            t.tagPending.appendTagName(name.toLowerCase());\n            t.dataBuffer.append(name);\n            return;\n        }\n        if (r.matches(\"!--\")) {\n            t.transition(MarkupDeclarationOpen);\n            r.advance(\"!--\".length());\n            return;\n        }\n        if (r.matches(\"/script\")) {\n            t.transition(EndTagOpen);\n            t.appendTagPending().append(\"script\");\n            r.advance(\"/script\".length());\n            return;\n        }\n        // parse script content separately\n        else if (t.tagPending.toString().equals(\"script\")) {\n            t.transition(RawText); // Assuming this is the correct state for script content.\n            return;\n        }\n    }\n\n    // Previous conditions not met, continue as normal...\n    if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n        char c = r.consume();\n        switch (c) {\n            case '\\t':\n            case '\\n':\n            case '\\f':\n            case ' ':\n                t.transition(BeforeAttributeName);\n                break;\n            case '/':\n                t.transition(SelfClosingStartTag);\n                break;\n            case '>':\n                t.emitTagPending();\n                t.transition(Data);\n                break;\n            default:\n                t.dataBuffer.append(c);\n                anythingElse(t, r);\n                break;\n        }\n    } else {\n        anythingElse(t, r);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}