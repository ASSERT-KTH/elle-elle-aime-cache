{
    "generation": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    renameArgumentsIfNecessary(root); // Fix added to handle re-declaration of arguments\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }\n\n  private void renameArgumentsIfNecessary(Node root) {\n    NodeTraversal.traverse(compiler, root, new NodeTraversal.AbstractPostOrderCallback() {\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isVar() && n.hasOneChild() && \"arguments\".equals(n.getFirstChild().getString())) {\n          n.getFirstChild().setString(\"arguments$\");\n          compiler.reportCodeChange();\n        }\n      }\n    });\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}