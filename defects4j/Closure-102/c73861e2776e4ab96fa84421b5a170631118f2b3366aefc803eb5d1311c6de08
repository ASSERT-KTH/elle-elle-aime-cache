{
    "generation": "@Override\npublic void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n        NodeTraversal t = new NodeTraversal(compiler, renamer);\n        t.traverseRoots(externs, root);\n    }\n    // Preserve var declarations for 'arguments' to prevent unexpected behavior\n    preserveArgumentsVarDeclaration(root);\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n}\n\n// Helper method to preserve var declarations for 'arguments'\nprivate void preserveArgumentsVarDeclaration(Node root) {\n    NodeTraversal.traverse(compiler, root, new NodeTraversal.AbstractPostOrderCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isVar() && n.hasOneChild() && n.getFirstChild().getString().equals(\"arguments\")) {\n                n.getFirstChild().putBooleanProp(Node.IS_CONSTANT_VAR, true);\n            }\n        }\n    });\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}