{
    "generation": "public void process(Node externs, Node root) {\n  NodeTraversal.traverse(compiler, root, this);\n  if (MAKE_LOCAL_NAMES_UNIQUE) {\n    MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n    NodeTraversal t = new NodeTraversal(compiler, renamer);\n    t.traverseRoots(externs, root);\n  }\n  NodeTraversal.traverse(compiler, root, new NodeVisitor() {\n    @Override\n    public void visit(Node node) {\n      if (node.isVar() && node.getFirstChild().getString().equals(\"arguments\")) {\n        Node argumentsVarNode = node.getFirstChild();\n        String uniqueName = getUniqueName(argumentsVarNode.getString());  // Method getUniqueName() should be defined to avoid name collision\n        argumentsVarNode.setString(uniqueName);\n      }\n      // Other needed handling for the node\n    }\n  });\n  removeDuplicateDeclarations(root);\n  new PropogateConstantAnnotations(compiler, assertOnChange)\n      .process(externs, root);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}