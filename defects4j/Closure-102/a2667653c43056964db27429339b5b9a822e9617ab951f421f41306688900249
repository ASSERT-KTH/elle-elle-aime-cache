{
    "generation": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n\n    // Additional step to ensure 'arguments' is correctly handled within function scopes\n    processFunctionScopes(root);\n  }\n\n  private void processFunctionScopes(Node root) {\n    NodeTraversal.traverse(compiler, root,\n        new NodeTraversal.AbstractNodeVisitor() {\n          @Override\n          public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isFunction()) {\n              Node functionBody = n.getLastChild();\n              handleArgumentsVariable(functionBody);\n            }\n          }\n    });\n  }\n\n  private void handleArgumentsVariable(Node functionBody) {\n    if (functionBody != null) {\n      NodeTraversal.traverse(compiler, functionBody,\n          new NodeTraversal.AbstractNodeVisitor() {\n            boolean argumentsDeclared = false;\n\n            @Override\n            public void visit(NodeTraversal t, Node n, Node parent) {\n              if (n.isName() && \"arguments\".equals(n.getString())) {\n                if (parent != null && parent.isVar()) {\n                  argumentsDeclared = true;\n                } else if (!argumentsDeclared) {\n                  compiler.report(JSError.make(n, VarCheck.VAR_MULTIPLY_DECLARED_ERROR));\n                }\n              }\n            }\n      });\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}