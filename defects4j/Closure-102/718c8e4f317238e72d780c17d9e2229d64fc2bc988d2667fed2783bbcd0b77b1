{
    "generation": "@Override\npublic void process(Node externs, Node root) {\n  NodeTraversal.traverse(compiler, root, this);\n  if (MAKE_LOCAL_NAMES_UNIQUE) {\n    MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n    NodeTraversal t = new NodeTraversal(compiler, renamer);\n    t.traverseRoots(externs, root);\n  }\n  removeDuplicateDeclarations(root);\n  new PropogateConstantAnnotations(compiler, assertOnChange)\n      .process(externs, root);\n  // Check for special 'arguments' declarations and revert them\n  NodeTraversal.traverse(compiler, root, new NodeTraversal.Callback() {\n    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n      if (n.isVar() && n.getFirstChild().getString().equals(\"arguments\")) {\n        n.removeChild(n.getFirstChild());\n        if (!n.hasChildren()) {\n          n.detach();\n        }\n      }\n      return true;\n    }\n  });\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}