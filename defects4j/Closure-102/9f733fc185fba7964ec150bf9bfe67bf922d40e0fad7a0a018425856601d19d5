{
    "generation": "@Override\npublic void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n        NodeTraversal t = new NodeTraversal(compiler, renamer);\n        t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n    \n    // Additional logic to handle 'arguments' object\n    NodeTraversal.traverse(compiler, root, new AbstractPostOrderCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isVar() && n.getFirstChild().isName() && \n                \"arguments\".equals(n.getFirstChild().getString())) {\n                Node nameNode = n.getFirstChild();\n                Node exprNode = IR.exprResult(IR.assign(nameNode.cloneNode(), nameNode.removeFirstChild()));\n                parent.replaceChild(n, exprNode);\n                compiler.reportChangeToEnclosingScope(exprNode);\n            }\n        }\n    });\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}