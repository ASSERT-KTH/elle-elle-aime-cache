{
    "generation": "/**\n * Fixed version of the _parseIndex function to handle scientific notation\n * and other non-integer numeric strings.\n */\nprivate final static int _parseIndex(String str) {\n    final int len = str.length();\n    // [Issue#133]: beware of super long indexes; assume we never\n    // have arrays over 2 billion entries so ints are fine.\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    try {\n        // Attempt to parse as an integer directly\n        return NumberInput.parseInt(str);\n    } catch (NumberFormatException e) {\n        // If parsing as integer fails, check if it's a numeric string in scientific notation or similar\n        try {\n            double d = Double.parseDouble(str);\n            // Check if the double value is within integer range\n            if (d >= Integer.MIN_VALUE && d <= Integer.MAX_VALUE && d == Math.floor(d)) {\n                return (int) d;\n            }\n        } catch (NumberFormatException ex) {\n            // Ignore and continue to return -1\n        }\n        return -1; // Input string is not a valid integer (or integerish) value\n    }\n    // Additional length check for 10-char strings remains unnecessary with this approach\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}