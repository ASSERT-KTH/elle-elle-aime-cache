{
    "generation": "/**\n * Returns the number of characters between the current position and the next instance of the input sequence\n *\n * @param seq scan target\n * @return offset between current position and next instance of target. -1 if not found.\n */\nint nextIndexOf(CharSequence seq) {\n    if (seq.length() == 0) {\n        return 0; // empty sequence is always found at current position\n    }\n\n    char startChar = seq.charAt(0);\n    int seqLen = seq.length();\n    int inputLen = length;\n    for (int offset = pos; offset <= inputLen - seqLen; offset++) {\n        // Find the next occurrence of the starting character\n        while (offset < inputLen && input[offset] != startChar) {\n            offset++;\n        }\n        if (offset >= inputLen) {\n            break; // no more starting characters\n        }\n        // Check if the sequence matches starting at this offset\n        int i;\n        for (i = 0; i < seqLen; i++) {\n            if (offset + i >= inputLen || input[offset + i] != seq.charAt(i)) {\n                break;\n            }\n        }\n        if (i == seqLen) {\n            return offset - pos;\n        }\n        offset++; // move past the current starting character\n    }\n    return -1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}