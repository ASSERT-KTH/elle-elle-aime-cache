{
    "generation": "/**\n * Returns the number of characters between the current position and the next instance of the input sequence\n *\n * @param seq scan target\n * @return offset between current position and next instance of target. -1 if not found.\n */\nint nextIndexOf(CharSequence seq) {\n    // doesn't handle scanning for surrogates\n    char startChar = seq.charAt(0);\n    int seqLen = seq.length(); // Cache sequence length for performance\n    for (int offset = pos; offset < length; ) {\n        // Scan to the first instance of startChar:\n        if (startChar != input[offset]) {\n            while (++offset < length && startChar != input[offset]);\n        }\n        // Check if there are enough characters left for the sequence\n        if (offset + seqLen > length) {\n            break; // Not enough characters left, exit loop\n        }\n        // Check if the sequence matches starting at offset\n        int i = offset + 1;\n        int j = 1;\n        int last = i + seqLen - 1;\n        for (; i < last && j < seqLen; i++, j++) {\n            if (seq.charAt(j) != input[i]) {\n                break;\n            }\n        }\n        if (i == last) { // Found the full sequence\n            return offset - pos;\n        }\n        offset++; // Move past the current starting character\n    }\n    return -1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}