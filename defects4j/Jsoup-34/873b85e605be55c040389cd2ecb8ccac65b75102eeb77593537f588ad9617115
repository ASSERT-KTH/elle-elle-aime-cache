{
    "generation": "/**\n * Returns the number of characters between the current position and the next instance of the input sequence\n *\n * @param seq scan target\n * @return offset between current position and next instance of target. -1 if not found.\n */\nint nextIndexOf(CharSequence seq) {\n    int start = pos;\n    int seqLen = seq.length();\n    if (seqLen == 0) return 0; // Empty sequence is always found at the start\n\n    char startChar = seq.charAt(0);\n    outer:\n    for (int offset = pos; offset < length; offset++) {\n        // Scan to first instance of startChar:\n        while (offset < length && startChar != input[offset]) {\n            offset++;\n        }\n        if (offset >= length) break; // Not found\n\n        int i = offset + 1;\n        int last = i + seqLen - 1;\n        if (last > length) continue; // Not enough characters left to match\n\n        for (int j = 1; j < seqLen; j++, i++) {\n            if (i >= length || seq.charAt(j) != input[i]) {\n                continue outer; //Mismatch, continue searching\n            }\n        }\n        // Found full sequence\n        return offset - start;\n    }\n    return -1; // Not found\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}