{
    "generation": "/**\n * Returns the number of characters between the current position and the next instance of the input sequence\n *\n * @param seq scan target\n * @return offset between current position and next instance of target. -1 if not found.\n */\nint nextIndexOf(CharSequence seq) {\n    if (seq.length() == 0) {\n        return 0; // or handle as needed, depending on requirements\n    }\n\n    char startChar = seq.charAt(0);\n    int targetLen = seq.length();\n\n    for (int offset = pos; offset <= length - targetLen; offset++) {\n        // Find the first occurrence of the start character\n        while (offset < length && input[offset] != startChar) {\n            offset++;\n        }\n\n        if (offset >= length) {\n            return -1; // Start character not found\n        }\n\n        // Check if the remaining input is long enough to contain the sequence\n        if (length - offset < targetLen) {\n            return -1;\n        }\n\n        // Check if the sequence matches starting from this offset\n        int i = 0;\n        for (i = 0; i < targetLen; i++) {\n            if (input[offset + i] != seq.charAt(i)) {\n                break;\n            }\n        }\n\n        if (i == targetLen) {\n            return offset - pos;\n        }\n\n        // Sequence not found, move to the next character\n        offset++;\n    }\n\n    return -1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}