{
    "generation": "private Node tryMinimizeIf(Node n) {\n    Node parent = n.getParent();\n    Node cond = n.getFirstChild();\n\n    if (NodeUtil.isLiteralValue(cond, true)) {\n      return n;\n    }\n\n    Node thenBranch = cond.getNext();\n    Node elseBranch = thenBranch.getNext();\n\n    if (elseBranch == null) {\n      return handleSingleBranch(n, cond, thenBranch);\n    }\n\n    tryRemoveRepeatedStatements(n);\n\n    return handleDoubleBranch(n, cond, thenBranch, elseBranch);\n}\n\nprivate Node handleSingleBranch(Node n, Node cond, Node thenBranch) {\n    if (isFoldableExpressBlock(thenBranch)) {\n        // ... handle single branch if-else logic\n    } else {\n        // ... handle other single branch if logic\n    }\n    return n;\n}\n\nprivate Node handleDoubleBranch(Node n, Node cond, Node thenBranch, Node elseBranch) {\n    // if(!x)foo();else bar(); -> if(x)bar();else foo();\n    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {\n        // ... handle cond.isNot() logic\n    }\n\n    // if(x)return 1;else return 2; -> return x?1:2;\n    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {\n        // ... handle return expressions logic\n    }\n\n    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);\n    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);\n\n    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n        // ... handle expression blocks logic\n    }\n\n    boolean thenBranchIsVar = isVarBlock(thenBranch);\n    boolean elseBranchIsVar = isVarBlock(elseBranch);\n\n    // if(x)var y=1;else y=2  ->  var y=x?1:2\n    if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n        getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n        // ... handle var blocks logic\n    }\n\n    return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}