{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    // Guard against infinite recursion caused by self-referential types\n    if (classType == null || !(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    // Guard against null or non-Class raw type\n    if (parameterizedType.getRawType() == null || !(parameterizedType.getRawType() instanceof Class)) {\n        return;\n    }\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    // Guard against mismatched arrays\n    if (typeParameters == null || actualTypeArguments == null || typeParameters.length != actualTypeArguments.length) {\n        return;\n    }\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        \n        // Skip self-referential type to prevent infinite recursion\n        if (actualTypeArgument == classType) {\n            continue;\n        }\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}