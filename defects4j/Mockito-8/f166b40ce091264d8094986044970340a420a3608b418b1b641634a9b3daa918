{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        // Fix: Avoid self-referential infinite loop\n        if (actualTypeArgument instanceof TypeVariable) {\n            TypeVariable actualTypeVariable = (TypeVariable) actualTypeArgument;\n            if (actualTypeVariable.getGenericDeclaration() == parameterizedType.getRawType()) {\n                // Self-type reference, put the type parameter itself as the actual type argument\n                contextualActualTypeParameters.put(typeParameter, typeParameter);\n            } else {\n                // Recursively resolve the actual type argument if it's a type variable from another type\n                registerTypeVariablesOn(actualTypeVariable);\n                contextualActualTypeParameters.put(typeParameter, contextualActualTypeParameters.get(actualTypeVariable));\n            }\n        } else if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}