{
    "generation": "    protected void registerTypeVariablesOn(Type classType) {\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        Type rawType = parameterizedType.getRawType();\n        TypeVariable[] typeParameters;\n\n        // Fix for StackOverflowError: Recursive generics might cause stack overflow\n        if (rawType instanceof ParameterizedType) {\n            typeParameters = ((Class<?>) ((ParameterizedType) rawType).getRawType()).getTypeParameters();\n        } else {\n            typeParameters = ((Class<?>) rawType).getTypeParameters();\n        }\n\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else if (!(actualTypeArguments[i] instanceof TypeVariable)) {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            } else {\n                Type enclosingType = ((TypeVariable) actualTypeArgument).getGenericDeclaration();\n                if (enclosingType instanceof Class) {\n                    contextualActualTypeParameters.put(typeParameter, boundsOf((TypeVariable) actualTypeArgument));\n                }\n            }\n            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}