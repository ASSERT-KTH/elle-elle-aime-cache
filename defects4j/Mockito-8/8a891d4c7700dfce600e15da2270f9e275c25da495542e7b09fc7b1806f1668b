{
    "generation": "    protected void registerTypeVariablesOn(Type classType) {\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        \n        // Check for self-referential types to avoid recursion\n        Set<TypeVariable> processedTypes = new HashSet<>();\n        \n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            if (processedTypes.contains(typeParameter)) {\n                continue; // Skip already processed self-referential types\n            }\n            \n            processedTypes.add(typeParameter);\n\n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else if (actualTypeArgument instanceof TypeVariable) {\n                // Handle self-referential types\n                TypeVariable selfRefType = (TypeVariable) actualTypeArgument;\n                if (processedTypes.contains(selfRefType)) {\n                    contextualActualTypeParameters.put(typeParameter, selfRefType);\n                } else {\n                    contextualActualTypeParameters.put(typeParameter, selfRefType);\n                    // Recursively process self-referential types\n                    registerTypeVariablesOn(selfRefType);\n                }\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}