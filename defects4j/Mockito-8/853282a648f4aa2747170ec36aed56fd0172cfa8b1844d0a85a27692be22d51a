{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    Type rawType = parameterizedType.getRawType();\n    if (! (rawType instanceof Class<?>)) {\n        return;\n    }\n    Class<?> rawClass = (Class<?>) rawType;\n    if (rawClass == parameterizedType) {\n        // Handle self-referencing type to prevent infinite recursion\n        // Bind the type variable to itself\n        TypeVariable typeParameter = rawClass.getTypeParameters()[0];\n        contextualActualTypeParameters.put(typeParameter, typeParameter);\n        return;\n    }\n    TypeVariable[] typeParameters = rawClass.getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            registerTypeVariablesOn(boundsOf((WildcardType) actualTypeArgument));\n        } else if (actualTypeArgument instanceof ParameterizedType) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n        contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}