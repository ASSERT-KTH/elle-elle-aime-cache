{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    Set<Type> seenTypes = new HashSet<>();\n    internalRegisterTypeVariablesOn(classType, seenTypes);\n}\n\nprivate void internalRegisterTypeVariablesOn(Type classType, Set<Type> seenTypes) {\n    if (seenTypes.add(classType)) {\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n            \n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else if (actualTypeArgument instanceof ParameterizedType) {\n                internalRegisterTypeVariablesOn(actualTypeArgument, seenTypes);\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}