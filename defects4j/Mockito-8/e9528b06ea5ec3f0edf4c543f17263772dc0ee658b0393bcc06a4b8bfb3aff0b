{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = contextualActualResolvedTypeParameters.getOrDefault(typeParameter, actualTypeArguments[i]);\n\n        if (actualTypeArgument instanceof WildcardType) {\n            Type resolvedType = boundsOf((WildcardType) actualTypeArgument);\n            contextualActualResolvedTypeParameters.put(typeParameter, resolvedType);\n            contextualActualTypeParameters.put(typeParameter, resolvedType);\n        } else if (actualTypeArgument instanceof ParameterizedType) {\n            registerTypeVariablesOn(actualTypeArgument);\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}