{
    "generation": "/**\n * Registers type variables with their actual type arguments for the given class type.\n * \n * @param classType the class type to register type variables for\n */\nprotected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    Type rawType = parameterizedType.getRawType();\n    \n    // Check if the raw type is the same as the classType to prevent infinite recursion\n    if (rawType.equals(classType)) {\n        return; // or throw an exception, depending on the desired behavior\n    }\n    \n    TypeVariable[] typeParameters = ((Class<?>) rawType).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n        // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n    }\n    // Recursively register type variables for the raw type (if not already the same as classType)\n    registerTypeVariablesOn(rawType);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}