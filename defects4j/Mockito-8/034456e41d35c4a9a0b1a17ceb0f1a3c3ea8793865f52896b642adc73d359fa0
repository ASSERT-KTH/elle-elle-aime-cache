{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    \n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        if (i >= typeParameters.length) {\n            // This is a safeguard to prevent out-of-bounds access\n            break;\n        }\n        TypeVariable<?> typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else if (actualTypeArgument instanceof Class<?> || actualTypeArgument instanceof ParameterizedType) {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        } else if (actualTypeArgument instanceof TypeVariable<?>) {\n            // If the actual type argument is a type variable, we should resolve it if possible\n            TypeVariable<?> actualTypeVar = (TypeVariable<?>) actualTypeArgument;\n            Type resolvedType = contextualActualTypeParameters.get(actualTypeVar);\n            if (resolvedType != null) {\n                contextualActualTypeParameters.put(typeParameter, resolvedType);\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n        }\n        // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}