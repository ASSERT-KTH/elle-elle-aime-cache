{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof ParameterizedType) {\n            // If a type variable is parameterized with itself, this will create an infinite loop of nested parameterized types.\n            // To avoid the infinite loop, add a check to see if the actual type argument is the same as the raw type of the parameterized type.\n            if (((ParameterizedType) actualTypeArgument).getRawType().equals(parameterizedType.getRawType())) {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            } else {\n                // Recursively register type variables for nested parameterized types\n                registerTypeVariablesOn(actualTypeArgument);\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n        } else if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}