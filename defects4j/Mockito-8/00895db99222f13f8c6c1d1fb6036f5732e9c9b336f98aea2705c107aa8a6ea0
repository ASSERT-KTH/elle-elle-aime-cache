{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        // Fix: Avoid infinite recursion by ignoring self-referential type arguments\n        if (isSelfReferentialTypeArgument(parameterizedType, actualTypeArgument)) {\n            continue;\n        }\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}\n\n// Helper method to detect self-referential type arguments\nprivate boolean isSelfReferentialTypeArgument(ParameterizedType parameterizedType, Type actualTypeArgument) {\n    return actualTypeArgument instanceof Class<?> \n           && ((Class<?>) actualTypeArgument).isAssignableFrom((Class<?>) parameterizedType.getRawType());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}