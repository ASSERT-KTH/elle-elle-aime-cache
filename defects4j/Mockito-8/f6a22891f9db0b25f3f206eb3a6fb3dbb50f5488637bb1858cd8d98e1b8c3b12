{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    \n    // Wrap in a set to detect circular references (e.g., self-type references)\n    Set<Type> visitedTypes = new HashSet<>();\n    \n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        \n        if (visitedTypes.contains(actualTypeArgument)) {\n            // Circular reference detected, skip to prevent StackOverflowError\n            continue;\n        }\n        visitedTypes.add(actualTypeArgument);\n        \n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else if (actualTypeArgument instanceof ParameterizedType) {\n            // Recursively register type variables for nested parameterized types\n            registerTypeVariablesOn(actualTypeArgument);\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n        // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}