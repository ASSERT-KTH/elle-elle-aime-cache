{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable<?> typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            WildcardType wildcard = (WildcardType) actualTypeArgument;\n            Type[] bounds = boundsOf(wildcard);\n            // Assuming boundsOf returns an array of types representing the bounds\n            // of the wildcard. We need to handle these bounds appropriately.\n            // For now, let's assume we're putting the bounds into the map.\n            contextualActualTypeParameters.put(typeParameter, bounds);\n        } else {\n            // Direct type argument, put it directly into the map\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n        // Optionally, log the mapping for debugging purposes\n        // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}