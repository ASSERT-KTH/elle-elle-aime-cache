{
    "generation": "import java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.util.HashSet;\nimport java.util.Set;\n\nprotected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\n    // Keep track of the types we have already processed to avoid recursion\n    Set<Type> processedTypes = new HashSet<>();\n    processedTypes.add(classType);\n\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable<?> typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (processedTypes.contains(actualTypeArgument)) {\n            continue; // Skip if we have already processed this type\n        }\n\n        if (actualTypeArgument instanceof ParameterizedType) {\n            registerTypeVariablesOn(actualTypeArgument); // Recursive call\n        }\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n\n        processedTypes.add(actualTypeArgument);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}