{
    "generation": "protected void registerTypeVariablesOn(Type type) {\n    if (!(type instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) type;\n    Type ownerType = parameterizedType.getOwnerType();\n    if (ownerType != null) {\n        registerTypeVariablesOn(ownerType);\n    }\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    Type rawType = parameterizedType.getRawType();\n    if (!(rawType instanceof Class<?>)) {\n        return;\n    }\n    TypeVariable<?>[] typeParameters = ((Class<?>) rawType).getTypeParameters();\n    if (actualTypeArguments.length != typeParameters.length) {\n        return;\n    }\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable<?> typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else if (actualTypeArgument instanceof ParameterizedType) {\n            registerTypeVariablesOn(actualTypeArgument);\n        } else if (actualTypeArgument instanceof TypeVariable) {\n            contextualActualTypeParameters.put(typeParameter, (Type) contextualActualTypeParameters.get(actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}