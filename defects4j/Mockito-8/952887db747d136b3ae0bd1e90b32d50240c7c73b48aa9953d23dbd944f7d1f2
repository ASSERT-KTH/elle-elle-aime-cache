{
    "generation": "protected void registerTypeVariablesOn(Type classType, Set<Type> visitedTypes) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    if (visitedTypes.contains(classType)) {\n        return; // Prevent infinite recursion\n    }\n    visitedTypes.add(classType);\n\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable<?> typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n\n        // Recursively register type variables if actualTypeArgument is a ParameterizedType\n        if (actualTypeArgument instanceof ParameterizedType) {\n            registerTypeVariablesOn(actualTypeArgument, visitedTypes);\n        }\n    }\n    visitedTypes.remove(classType); // Clean up visited set\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}