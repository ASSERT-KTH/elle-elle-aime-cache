{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    \n    // Set to keep track of processed type variables to prevent infinite recursion\n    Set<TypeVariable<?>> processedTypeVariables = new HashSet<>();\n\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        // Check if the type parameter has already been processed\n        if (processedTypeVariables.contains(typeParameter)) {\n            continue;\n        }\n        processedTypeVariables.add(typeParameter);\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else if (actualTypeArgument instanceof TypeVariable) {\n            // Handle nested type variables\n            TypeVariable nestedTypeVar = (TypeVariable) actualTypeArgument;\n            if (contextualActualTypeParameters.containsKey(nestedTypeVar)) {\n                contextualActualTypeParameters.put(typeParameter, contextualActualTypeParameters.get(nestedTypeVar));\n            } else {\n                contextualActualTypeParameters.put(typeParameter, nestedTypeVar);\n            }\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n        // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}