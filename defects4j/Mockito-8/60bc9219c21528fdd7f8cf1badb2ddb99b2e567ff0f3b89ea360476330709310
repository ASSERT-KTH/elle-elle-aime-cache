{
    "generation": "import java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.WildcardType;\nimport java.lang.reflect.Class;\n\nprotected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    Set<TypeVariable> visited = new HashSet<>();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n        // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n        \n        if (actualTypeArgument instanceof ParameterizedType && typeParameter instanceof TypeVariable) {\n            TypeVariable tv = (TypeVariable) typeParameter;\n            if (visited.add(tv)) {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}