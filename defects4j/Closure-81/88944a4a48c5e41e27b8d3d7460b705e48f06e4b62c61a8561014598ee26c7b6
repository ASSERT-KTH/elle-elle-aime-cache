{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  if (name == null) {\n    // If there's no name and it's a function declaration (not an expression),\n    // it should result in an error, as unnamed function statements aren't allowed.\n    if (functionNode.isStatement()) {\n      throw new IllegalArgumentException(\"unnamed function statement\");\n    }\n    // If it's an expression, we treat it as an unnamed function and continue.\n    name = new Name();\n    name.setIdentifier(\"\");\n  }\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n\n  node.addChildToBack(newName);\n  Node lp = newNode(Token.LP);\n  // The left paren's complicated because it's not represented by an\n  // AstNode, so there's nothing that has the actual line number that it\n  // appeared on.  We know the paren has to appear on the same line as the\n  // function name (or else a semicolon will be inserted.)  If there's no\n  // function name, assume the paren was on the same line as the function.\n  // TODO: Mark line number of paren correctly.\n  Name fnName = functionNode.getFunctionName();\n  if (fnName != null) {\n    lp.setLineno(fnName.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n  int lparenCharno = functionNode.getLp() +\n      functionNode.getAbsolutePosition();\n\n  lp.setCharno(position2charno(lparenCharno));\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}