{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  boolean isUnnamedFunction = (name == null);\n  if (isUnnamedFunction) {\n    name = new Name();\n    name.setIdentifier(\"\");\n  }\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n\n  if (isUnnamedFunction) {\n    // Use the function's line number for unnamed functions\n    newName.setLineno(functionNode.getLineno());\n    newName.setCharno(0); // Set charno to 0 for unnamed functions\n  } else {\n    // For named functions, use the name's position\n    newName.setLineno(name.getLineno());\n    newName.setCharno(name.getCharno());\n  }\n\n  node.addChildToBack(newName);\n\n  Node lp = newNode(Token.LP);\n  lp.setLineno(functionNode.getLineno());\n  \n  // Calculate the charno for the left parenthesis\n  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n  lp.setCharno(position2charno(lparenCharno));\n\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n\n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}