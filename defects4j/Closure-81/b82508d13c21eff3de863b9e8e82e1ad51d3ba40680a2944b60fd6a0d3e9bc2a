{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  boolean isUnnamedFunctionExpression = false;\n  boolean isUnnamedFunctionStatement = name == null;\n\n  if (isUnnamedFunctionStatement) {\n    // Check if the unnamed function is at a statement level which is not allowed.\n    if (!functionNode.isExpressionClosure() && \n        (functionNode.getParent() == null || !(functionNode.getParent() instanceof AstNode))) {\n      throw new IllegalStateException(\"unnamed function statement\");\n    } else {\n      name = new Name();\n      name.setIdentifier(\"\");\n      isUnnamedFunctionExpression = true;\n    }\n  }\n\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n\n  if (isUnnamedFunctionExpression) {\n    newName.setLineno(functionNode.getLineno());\n    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n    newName.setCharno(position2charno(lpColumn));\n  }\n\n  node.addChildToBack(newName);\n  Node lp = newNode(Token.LP);\n\n  Name fnName = functionNode.getFunctionName();\n  if (fnName != null) {\n    lp.setLineno(fnName.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n\n  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n  lp.setCharno(position2charno(lparenCharno));\n\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n  \n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}