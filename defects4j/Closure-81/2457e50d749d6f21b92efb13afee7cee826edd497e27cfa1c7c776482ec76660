{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  Boolean isUnnamedFunction = false;\n  if (name == null) {\n    name = new Name();\n    name.setIdentifier(\"\");\n    isUnnamedFunction = true;\n\n    // Add this block to set the line number and character number for unnamed functions\n    String sourceName = functionNode.getSourceFileName();\n    Node errNode = new Node(Token.ERROR);\n    errNode.setError(\"name\", \"unnamed function statement\", sourceName, functionNode.getLineno(),\n        functionNode.getCharno());\n    this.tree.addChildToBack(errNode);\n    // End of added block\n  }\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n  if (isUnnamedFunction) {\n    newName.setLineno(functionNode.getLineno());\n    int lpColumn = functionNode.getAbsolutePosition() +\n        functionNode.getLp();\n    newName.setCharno(position2charno(lpColumn));\n  }\n\n  node.addChildToBack(newName);\n  Node lp = newNode(Token.LP);\n  if (name != null) {\n    lp.setLineno(name.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n  int lparenCharno = functionNode.getLp() +\n      functionNode.getAbsolutePosition();\n\n  lp.setCharno(position2charno(lparenCharno));\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}