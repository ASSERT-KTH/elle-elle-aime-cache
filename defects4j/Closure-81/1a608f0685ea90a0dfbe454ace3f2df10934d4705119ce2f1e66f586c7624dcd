{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    if (name == null || name.getIdentifier().isEmpty()) {\n        // If the function is unnamed, throw an error to handle unnamed function statements.\n        throw new IllegalArgumentException(\"unnamed function statement\");\n    }\n\n    Node node = newNode(Token.FUNCTION);\n    Node newName = transform(name);\n    node.addChildToBack(newName);\n\n    Node lp = newNode(Token.LP);\n    Name fnName = functionNode.getFunctionName();\n    if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n    } else {\n        lp.setLineno(functionNode.getLineno());\n    }\n    int lparenCharno = functionNode.getLp() +\n        functionNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}