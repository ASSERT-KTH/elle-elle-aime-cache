{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  \n  // If the function is unnamed, throw an error (since unnamed function statements are not allowed)\n  if (name == null) {\n    // Normally this error would be handled at an earlier parsing stage \n    // Here we assume an error handling mechanism\n    throw new IllegalStateException(\"Unnamed function statement\");\n  }\n\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n\n  node.addChildToBack(newName);\n  Node lp = newNode(Token.LP);\n\n  // Set line number and character number correctly for the left paren\n  lp.setLineno(name.getLineno());\n  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n  lp.setCharno(position2charno(lparenCharno));\n\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}