{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  boolean isUnnamedFunction = (name == null);\n  if (isUnnamedFunction) {\n    // If the function is unnamed, reject it as per the requirements.\n    throw new IllegalArgumentException(\"Error: unnamed function statement\");\n  }\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n  node.addChildToBack(newName);\n\n  Node lp = newNode(Token.LP);\n  // The left paren's line and charno assignment logic\n  if (name != null) {\n    lp.setLineno(name.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n  int lparenCharno = functionNode.getLp() +\n      functionNode.getAbsolutePosition();\n\n  lp.setCharno(position2charno(lparenCharno));\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}