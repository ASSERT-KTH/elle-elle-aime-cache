{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  Node node = newNode(Token.FUNCTION);\n  Node newName = new Node(Token.NAME);\n  newName.setString(\"\");\n  newName.setQuotedString(\"\");\n\n  // For unnamed function expressions, remove the FUNCTION token and use an empty NAME\n  if (name == null && functionNode.getParent() instanceof AstExprResult) {\n    node = newName;  // Use empty NAME directly\n  } else {\n    node.addChildToBack(newName);  // Still add the empty NAME as a child of FUNCTION node for unnamed function statements\n  }\n\n  if (name == null) {\n    // For all unnamed cases, set the line number based on functionNode's getLineno()\n    newName.setLineno(functionNode.getLineno());\n    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n    newName.setCharno(position2charno(lparenCharno));\n  } else {\n    // For named functions, transform the name node as before\n    newName = transform(name);\n    node.addChildToBack(newName);\n  }\n\n  Node lp = newNode(Token.LP);\n  lp.setLineno(name != null ? name.getLineno() : functionNode.getLineno());\n  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n  lp.setCharno(position2charno(lparenCharno));\n\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n\n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}