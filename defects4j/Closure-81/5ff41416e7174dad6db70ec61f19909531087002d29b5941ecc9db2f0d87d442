{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  Node node = newNode(Token.FUNCTION);\n  Node newName;\n\n  if (name != null) {\n    newName = transform(name);\n  } else {\n    // Handle unnamed function\n    if (isFunctionStatement(functionNode)) {\n      // Raise error for unnamed function statement\n      throw new RuntimeException(\"unnamed function statement\");\n    } else {\n      // Create an empty name node for unnamed function expression\n      name = new Name();\n      name.setIdentifier(\"\");\n      newName = transform(name);\n      // Set line number and char number as before\n      int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n      newName.setLineno(functionNode.getLineno());\n      newName.setCharno(position2charno(lpColumn));\n    }\n  }\n\n  node.addChildToBack(newName);\n  Node lp = newNode(Token.LP);\n  // Set line number for left paren as before\n  Name fnName = functionNode.getFunctionName();\n  if (fnName != null) {\n    lp.setLineno(fnName.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n  lp.setCharno(position2charno(lparenCharno));\n\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n\n  return node;\n}\n\nprivate boolean isFunctionStatement(FunctionNode functionNode) {\n  AstNode parent = functionNode.getParent();\n  // Assume that function statements are direct children of ScriptNode or BlockNode\n  return parent instanceof ScriptNode || parent instanceof BlockNode;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}