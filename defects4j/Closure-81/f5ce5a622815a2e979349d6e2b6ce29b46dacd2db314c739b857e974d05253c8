{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  boolean isUnnamedFunction = name == null;\n  if (isUnnamedFunction) {\n    // Create an empty name for unnamed functions\n    name = new Name();\n    name.setIdentifier(\"\");\n  }\n  \n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n  node.addChildToBack(newName);\n\n  Node lp = newNode(Token.LP);\n  // Set line number for the left parenthesis\n  if (!isUnnamedFunction) {\n    lp.setLineno(name.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n  lp.setCharno(position2charno(lparenCharno));\n\n  // Add parameters\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  // Process function body\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n\n  // If the function is unnamed and used as a statement, it should be illegal.\n  // However, as an expression, it is valid.\n  if (isUnnamedFunction && functionNode.isFunctionStatement()) {\n    throw new IllegalStateException(\"Unnamed function statement is not allowed\");\n  }\n\n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}