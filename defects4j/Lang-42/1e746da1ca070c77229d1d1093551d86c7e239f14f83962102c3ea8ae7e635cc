{
    "generation": "/**\n * <p>\n * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n * passed.\n * </p>\n * \n * @param writer\n *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n * @param str\n *            The <code>String</code> to escape. Assumed to be a non-null value.\n * @throws IOException\n *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n *             methods.\n * \n * @see #escape(String)\n * @see Writer\n */\npublic void escape(Writer writer, String str) throws IOException {\n    int len = str.length();\n    int offset = 0;\n    while (offset < len) {\n        int codePoint = str.codePointAt(offset);\n        if (Character.isSupplementaryCodePoint(codePoint)) {\n            offset += 2;\n        } else {\n            offset += 1;\n        }\n        String entityName = this.entityName((char) codePoint);\n        if (entityName == null) {\n            if (codePoint > 0x7F) {\n                writer.write(\"&#\");\n                writer.write(Integer.toString(codePoint, 10));\n                writer.write(';');\n            } else {\n                writer.write((char) codePoint);\n            }\n        } else {\n            writer.write('&');\n            writer.write(entityName);\n            writer.write(';');\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}