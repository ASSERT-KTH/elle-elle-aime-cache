{
    "generation": "private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n        return;\n    }\n\n    ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType != null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                    }\n                    objType.defineInferredProperty(prop, typeToInfer, null);\n                }\n            }\n        }\n    } else if (constraintObj != null) {\n        // Handle cases where constraint is not a record type\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType != null) {\n            for (String prop : objType.getOwnPropertyNames()) {\n                JSType propType = objType.getPropertyType(prop);\n                JSType constraintPropType = constraint.getPropertyType(prop);\n                if (constraintPropType != null && !propType.isSubtype(constraintPropType)) {\n                    JSType widenedType = propType.getLeastSupertype(constraintPropType);\n                    objType.defineInferredProperty(prop, widenedType, null);\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}