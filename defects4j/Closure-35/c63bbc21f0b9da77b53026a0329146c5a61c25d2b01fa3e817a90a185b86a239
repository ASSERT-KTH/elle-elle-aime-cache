{
    "generation": "private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            // Use the union type of VOID_TYPE and propType to handle undefined cases.\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          // Define the inferred property with the appropriate type.\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        } else {\n          // If the property is already declared, ensure its type is compatible with the constraint.\n          JSType existingType = objType.getPropertyType(prop);\n          JSType widenedType = existingType.getLeastSupertype(propType);\n          objType.setROPERTY(prop, widenedType, null);\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}