{
    "generation": "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            // Use UNKNOWN_TYPE instead of VOID_TYPE to represent an unknown property.\n            typeToInfer = getNativeType(UNKNOWN_TYPE).getLeastSupertype(propType);\n          } else {\n            // If the property exists but isn't declared, get its current inferred type\n            // and merge it with the constraint type.\n            JSType existingType = objType.getInferredPropertyType(prop);\n            typeToInfer = existingType.getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        } else {\n          // If the property is already declared, ensure its type is compatible with the constraint.\n          JSType declaredType = objType.getPropertyType(prop);\n          JSType newType = declaredType.getLeastSupertype(propType);\n          objType.properties.put(prop, newType);\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}