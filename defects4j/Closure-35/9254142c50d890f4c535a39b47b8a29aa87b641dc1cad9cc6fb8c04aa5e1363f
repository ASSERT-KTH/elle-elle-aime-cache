{
    "generation": "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          } else {\n            // If the property exists but its type is not declared,\n            // we need to widen it to match the constraint.\n            JSType existingType = objType.getPropertyType(prop);\n            typeToInfer = existingType.getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    } else if (type.isObjectType()) {\n      // If objType is null, but type is still an ObjectType,\n      // we need to create a new ObjectType with inferred properties.\n      ObjectType newObjType = registry.createObjectType(type);\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        newObjType.defineInferredProperty(prop, typeToInfer, null);\n      }\n      // Replace the original type with the new one with inferred properties\n      type.replaceType(newObjType);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}