{
    "generation": "  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              // Widen the type to include the possibility of undefined if prop does not exist\n              typeToInfer =\n                  propType.getLeastSupertype(getNativeType(VOID_TYPE));\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          } else {\n            // If the property exists and is declared, we may want to widen it to include the new inferred type\n            JSType currentPropType = objType.getPropertyType(prop);\n            JSType widenedType = currentPropType.getLeastSupertype(propType);\n            objType.defineInferredProperty(prop, widenedType, null);\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}