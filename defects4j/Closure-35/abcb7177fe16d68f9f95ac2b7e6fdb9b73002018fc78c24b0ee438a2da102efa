{
    "generation": "private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n        return;\n    }\n\n    ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType != null) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                JSType propType = constraintObj.getPropertyType(prop);\n                if (!objType.isPropertyTypeDeclared(prop)) {\n                    JSType typeToInfer = propType;\n                    if (!objType.hasProperty(prop)) {\n                        typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n                    }\n                    objType.defineInferredProperty(prop, typeToInfer, null);\n                }\n            }\n        }\n    }\n\n    // Additional logic to handle cases where properties are assigned later\n    if (type.isUnionType()) {\n        UnionType unionType = (UnionType) type;\n        for (JSType alt : unionType.getAlternates()) {\n            ObjectType altObj = ObjectType.cast(alt.restrictByNotNullOrUndefined());\n            if (altObj != null) {\n                for (String prop : altObj.getOwnPropertyNames()) {\n                    if (!altObj.isPropertyTypeDeclared(prop)) {\n                        JSType propType = altObj.getPropertyType(prop);\n                        altObj.defineInferredProperty(prop, propType, null);\n                    }\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}