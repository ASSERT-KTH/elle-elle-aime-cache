{
    "generation": "/**\n * Suppose X is an object with inferred properties.\n * Suppose also that X is used in a way where it would only type-check\n * correctly if some of those properties are widened.\n * Then we should be polite and automatically widen X's properties for him.\n *\n * For a concrete example, consider:\n * param x {{prop: (number|undefined)}}\n * function f(x) {}\n * f({});\n *\n * If we give the anonymous object an inferred property of (number|undefined),\n * then this code will type-check appropriately.\n */\nprivate void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj!= null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (propType.isUnion() || propType.isNoObject()) {\n          continue; // Don't let nullable types pollute results of type inference.\n        }\n\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          } else {\n            typeToInfer = type.getGreatestSubtype(getJSType(prop), null);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        } else {\n          JSType inferredType = null;\n\n          if (objType instanceof RecordType) {\n            inferredType = \n              ((RecordType)objType).getInvertedRestrictedPropertyType(prop).loosen();\n          }\n        \n          if (null!= inferredType) \n              objType.defineOverrideFromConstraint(prop, inferredType.getLeastSupertype(inferredType), null, -1);\n        }\n\n       /* \n        * Remove or comment out the whole objType.hasPropertyInDirectSuperclass(prop)).\n         * \n         */}\n  ",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}