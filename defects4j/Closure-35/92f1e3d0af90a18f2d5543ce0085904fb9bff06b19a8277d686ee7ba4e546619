{
    "generation": "/**\n * Suppose X is an object with inferred properties.\n * Suppose also that X is used in a way where it would only type-check\n * correctly if some of those properties are widened.\n * Then we should be polite and automatically widen X's properties for him.\n *\n * For a concrete example, consider:\n * param x {{prop: (number|undefined)}}\n * function f(x) {}\n * f({});\n *\n * If we give the anonymous object an inferred property of (number|undefined),\n * then this code will type-check appropriately.\n */\nprivate void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj!= null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            // If objType does not have prop, we should infer the least supertype\n            // of propType and the general type of the object's values\n            JSType valueType = getGeneralTypeOfObjectValues(objType);\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType, valueType);\n          } else {\n            // If objType has prop, we should infer the least supertype of propType\n            // and the current type of prop in objType\n            JSType currentPropType = objType.getPropertyType(prop);\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType, currentPropType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}\n\n// Assuming this function returns the general type of the object's values\nprivate JSType getGeneralTypeOfObjectValues(ObjectType objType) {\n  // Implementation depends on the specific logic of your system\n  // For simplicity, let's assume it returns Object\n  return getNativeType(Object.class);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}