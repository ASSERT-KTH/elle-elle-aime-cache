{
    "generation": "  private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj!= null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType!= null) {\n        Collection<String> propertyNames = new HashSet<>();\n        propertyNames.addAll(constraintObj.getOwnPropertyNames());\n        if (type instanceof FunctionType) {\n          propertyNames.addAll(constraintObj.getOwnPropertyNamesOfType(null));\n        }\n        \n        for (String prop : propertyNames) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (propType!= null) {\n            if (!objType.isPropertyTypeDeclared(prop)) {\n              JSType typeToInfer = propType;\n              if (!objType.hasProperty(prop)) {\n                typeToInfer = propType;\n              } else {\n                typeToInfer = objType.getPropertyType(prop).leastSupertype(propType);  // Infer type including non-record types\n              }\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            }\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}