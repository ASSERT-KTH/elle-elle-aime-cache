{
    "generation": "private static <T extends Clusterable<T>> List<Cluster<T>>\nchooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        double sum = 0;\n        int iMax = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            sum += d * d;\n            dx2[i] = sum;\n            if (d * d > dx2[iMax]) {\n                iMax = i;\n            }\n        }\n\n        // Add one new data point as a center.\n        // Always add the point with the farthest distance from existing centers\n        // to ensure that the loop always makes progress.\n        final T p = pointSet.remove(iMax);\n        resultSet.add(new Cluster<>(p));\n\n        // If there are still more centers to choose, adjust the squared distances for the remaining points.\n        if (resultSet.size() < k) {\n            final double removedDistance = dx2[iMax];\n            for (int i = iMax; i < dx2.length; i++) {\n                dx2[i] -= removedDistance;\n            }\n        }\n    }\n\n    return resultSet;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}