{
    "generation": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<>(firstPoint));\n\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double sum = 0.0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            final double d2 = d * d;\n            dx2[i] = d2;\n            sum += d2;\n        }\n\n        // Normalize the probabilities to avoid numerical issues with very small distances\n        if (sum == 0.0) {\n            // All points have zero distance to existing centers; select uniformly\n            int index = random.nextInt(pointSet.size());\n            final T p = pointSet.remove(index);\n            resultSet.add(new Cluster<>(p));\n            continue;\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)^2\n        final double r = random.nextDouble() * sum;\n        double cumulativeProbability = 0.0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            cumulativeProbability += dx2[i];\n            if (cumulativeProbability >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}