{
    "generation": "/**\n * Use K-means++ to choose the initial centers.\n *\n * @param <T> type of the points to cluster\n * @param points the points to choose the initial centers from\n * @param k the number of centers to choose\n * @param random random generator to use\n * @return the initial centers\n */\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        double[] probabilities = new double[pointSet.size()];\n        double sumSquaredDistances = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            final double squaredDistance = d * d;\n            sumSquaredDistances += squaredDistance;\n            probabilities[i] = squaredDistance;\n        }\n\n        // Normalize probabilities to ensure proper random selection\n        for (int i = 0; i < probabilities.length; i++) {\n            probabilities[i] /= sumSquaredDistances;\n        }\n\n        // Accumulate probabilities for weighted random selection\n        for (int i = 1; i < probabilities.length; i++) {\n            probabilities[i] += probabilities[i - 1];\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)2\n        final double r = random.nextDouble();\n        for (int i = 0; i < probabilities.length; i++) {\n            if (probabilities[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n        // If the last point(s) were identical and thus removed in a previous step,\n        // ensure the loop doesn't get stuck\n        if (pointSet.isEmpty() && resultSet.size() < k) {\n            throw new IllegalStateException(\"Insufficient distinct points to select \" + k + \" centers\");\n        }\n    }\n\n    return resultSet;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}