{
    "generation": "/**\n * Use K-means++ to choose the initial centers.\n *\n * @param <T> type of the points to cluster\n * @param points the points to choose the initial centers from\n * @param k the number of centers to choose\n * @param random random generator to use\n * @return the initial centers\n */\nprivate static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n\n    double totalDistance = 0.0;\n    final double[] distances = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n        double maxDistance = 0.0;\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = squaredDistance(p, nearest.getCenter());\n            totalDistance += d;\n            distances[i] = Math.max(distances[i], d);\n            maxDistance = Math.max(maxDistance, distances[i]);\n        }\n\n        // Add one new data point as a center. Each point x is chosen with\n        // probability proportional to D(x)^2\n        final double r = random.nextDouble() * totalDistance;\n        for (int i = 0; i < distances.length; i++) {\n            if (r <= distances[i]) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n\n    return resultSet;\n}\n\n// Calculate squared Euclidean distance between two points\nprivate static <T extends Clusterable<T>> double squaredDistance(final T p, final T center) {\n    return p.distanceFrom(center) * p.distanceFrom(center);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}