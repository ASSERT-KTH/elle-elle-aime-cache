{
    "generation": "protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n{\n    TypeFactory tf = ctxt.getTypeFactory();\n    if (id.indexOf('<') > 0) {\n        JavaType t = tf.constructFromCanonical(id);\n        if (!t.isTypeOrSubTypeOf(_baseType)) {\n            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get\n            //  DeserializationContext, just playing it safe\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                // First: we may have problem handlers that can deal with it?\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"not subtype of\");\n            }\n            // ... meaning that we really should never get here.\n            throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): Type is not subtype of \" + _baseType);\n        }\n        return t;\n    }\n    Class<?> cls;\n    try {\n        cls = tf.findClass(id);\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n    }\n    JavaType type = tf.constructSpecializedType(_baseType, cls);\n    if (!type.isTypeOrSubTypeOf(_baseType)) {\n        // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get\n        //  DeserializationContext, just playing it safe\n        if (ctxt instanceof DeserializationContext) {\n            DeserializationContext dctxt = (DeserializationContext) ctxt;\n            // First: we may have problem handlers that can deal with it?\n            return dctxt.handleUnknownTypeId(_baseType, id, this, \"not subtype of\");\n        }\n        // ... meaning that we really should never get here.\n        throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): Type is not subtype of \" + _baseType);\n    }\n    return type;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}