{
    "generation": "    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n    {\n        TypeFactory tf = ctxt.getTypeFactory();\n        if (id.indexOf('<') > 0) {\n            JavaType t = tf.constructFromCanonical(id);\n            // Ensure compatibility with the base type\n            if (!_baseType.isTypeOrSuperTypeOf(t.getRawClass())) {\n                throw new IllegalArgumentException(String.format(\n                    \"Invalid type id '%s': not a subtype of base type '%s'\", id, _baseType));\n            }\n            return t;\n        }\n        Class<?> cls;\n        try {\n            cls = tf.findClass(id);\n        } catch (ClassNotFoundException e) {\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n            }\n            return null;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid type id '\" + id + \"' (for id type 'Id.class'): \" + e.getMessage(), e);\n        }\n        // Ensure compatibility with the base type\n        JavaType specializedType = tf.constructSpecializedType(_baseType, cls);\n        if (!_baseType.isTypeOrSuperTypeOf(specializedType.getRawClass())) {\n            throw new IllegalArgumentException(String.format(\n                \"Invalid type id '%s': not a subtype of base type '%s'\", id, _baseType));\n        }\n        return specializedType;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}