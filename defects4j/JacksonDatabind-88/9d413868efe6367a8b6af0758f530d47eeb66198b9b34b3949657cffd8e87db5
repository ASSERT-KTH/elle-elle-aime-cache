{
    "generation": "protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException {\n    TypeFactory tf = ctxt.getTypeFactory();\n    if (id.indexOf('<') > 0) {\n        // Construct the type from the canonical id\n        JavaType t = tf.constructFromCanonical(id);\n        // Ensure that the constructed type is a subtype of the base type\n        if (!t.isSubtypeOf(_baseType)) {\n            throw new JsonMappingException(\"Type '\" + t + \"' is not a subtype of '\" + _baseType + \"'\");\n        }\n        return t;\n    } else {\n        try {\n            Class<?> cls = tf.findClass(id);\n            // Construct a specialized type based on the base type and the found class\n            JavaType specializedType = tf.constructSpecializedType(_baseType, cls);\n            // Ensure that the specialized type is a subtype of the base type\n            if (!specializedType.isSubtypeOf(_baseType)) {\n                throw new JsonMappingException(\"Type '\" + specializedType + \"' is not a subtype of '\" + _baseType + \"'\");\n            }\n            return specializedType;\n        } catch (ClassNotFoundException e) {\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n            }\n            return null;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid type id '\" + id + \"' (for id type 'Id.class'): \" + e.getMessage(), e);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}