{
    "generation": "protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException {\n    /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first\n     *    check if any generics info is added; and only then ask factory\n     *    to do translation when necessary\n     */\n    TypeFactory tf = ctxt.getTypeFactory();\n    if (id.indexOf('<') > 0) {\n        // Construct type from canonical representation\n        JavaType t = tf.constructFromCanonical(id);\n        // Check if the constructed type is assignable to the base type\n        if (!t.isAssignableFrom(_baseType)) {\n            // Use problem handler to handle unknown type ID\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"type '\" + id + \"' is not a subtype of \" + _baseType);\n            } else {\n                // If no problem handler is available, throw an exception\n                throw new IllegalArgumentException(\"Type '\" + id + \"' is not a subtype of \" + _baseType);\n            }\n        }\n        return t;\n    }\n    Class<?> cls;\n    try {\n        cls = tf.findClass(id);\n    } catch (ClassNotFoundException e) {\n        // Handle class not found exception\n        if (ctxt instanceof DeserializationContext) {\n            DeserializationContext dctxt = (DeserializationContext) ctxt;\n            return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n        }\n        // Fallback\n        return null;\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid type id '\" + id + \"' (for id type 'Id.class'): \" + e.getMessage(), e);\n    }\n    return tf.constructSpecializedType(_baseType, cls);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}