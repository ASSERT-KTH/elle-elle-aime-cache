{
    "generation": "protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException {\n    /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first\n     *   check if any generics info is added; and only then ask factory\n     *   to do translation when necessary\n     */\n    TypeFactory tf = ctxt.getTypeFactory();\n    if (id.indexOf('<') > 0) {\n        // Check the assignment compatibility\n        JavaType t = tf.constructFromCanonical(id);\n        if (!t.isTypeOrSubTypeOf(_baseType)) {\n            // If the type is not compatible, throw an exception\n            throw new JsonMappingException(r(\"Can not instantiate polymorphic type '%s' (from id '%s')\", _baseType, id), _currentLocation);\n        }\n        return t;\n    }\n    Class<?> cls;\n    try {\n        cls =  tf.findClass(id);\n    } catch (ClassNotFoundException e) {\n        // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get\n        // DeserializationContext, just playing it safe\n        if (ctxt instanceof DeserializationContext) {\n            DeserializationContext dctxt = (DeserializationContext) ctxt;\n            // First: we may have problem handlers that can deal with it?\n            return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n        }\n        // ... meaning that we really should never get here.\n        return null;\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n    }\n    // Construct the specialized type, check the assignment compatibility, and then return it\n    JavaType specializedType = tf.constructSpecializedType(_baseType, cls);\n    if (!specializedType.isTypeOrSubTypeOf(_baseType)) {\n        throw new JsonMappingException(r(\"Type '%s' constructed from class '%s' is not subtype of '%s'\", specializedType, cls, _baseType), _currentLocation);\n    }\n    return specializedType;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}