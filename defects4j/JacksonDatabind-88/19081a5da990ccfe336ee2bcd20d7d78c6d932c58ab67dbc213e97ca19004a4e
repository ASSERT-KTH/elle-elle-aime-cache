{
    "generation": "protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n{\n    TypeFactory tf = ctxt.getTypeFactory();\n    JavaType t;\n    if (id.indexOf('<') > 0) {\n        t = tf.constructFromCanonical(id);\n    } else {\n        Class<?> cls;\n        try {\n            cls = tf.findClass(id);\n        } catch (ClassNotFoundException e) {\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n            }\n            return null;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid type id '\" + id + \"' (for id type 'Id.class'): \" + e.getMessage(), e);\n        }\n        t = tf.constructSpecializedType(_baseType, cls);\n    }\n    // Check if the resulting type is compatible with the base type\n    if (!_baseType.isAssignableFrom(t)) {\n        throw new IllegalArgumentException(\"Type id '\"+id+\"' not subtype of base type '\"+_baseType+\"'\");\n    }\n    return t;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}