{
    "generation": "protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException {\n    TypeFactory tf = ctxt.getTypeFactory();\n    if (id.indexOf('<') > 0) {\n        // Construct type from canonical form, which handles generics\n        JavaType t = tf.constructFromCanonical(id);\n        // Ensure that the constructed type is assignable to the base type\n        if (!tf.isSubType(t, _baseType)) {\n            throw new JsonMappingException(ctxt.getParser(), \"Type '\" + t + \"' is not a subtype of '\" + _baseType + \"'\");\n        }\n        return t;\n    }\n    Class<?> cls;\n    try {\n        cls = tf.findClass(id);\n    } catch (ClassNotFoundException e) {\n        if (ctxt instanceof DeserializationContext) {\n            DeserializationContext dctxt = (DeserializationContext) ctxt;\n            return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\");\n        }\n        return null;\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid type id '\" + id + \"' (for id type 'Id.class'): \" + e.getMessage(), e);\n    }\n    // Construct specialized type based on base type and found class\n    JavaType specializedType = tf.constructSpecializedType(_baseType, cls);\n    // Verify assignment compatibility\n    if (!tf.isSubType(specializedType, _baseType)) {\n        throw new JsonMappingException(ctxt.getParser(), \"Specialized type '\" + specializedType + \"' is not a subtype of '\" + _baseType + \"'\");\n    }\n    return specializedType;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}