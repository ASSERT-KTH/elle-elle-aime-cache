{
    "generation": "    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException\n    {\n        TypeFactory tf = ctxt.getTypeFactory();\n        JavaType baseType = _baseType; // Ensure base type is always checked\n        if (id.indexOf('<') > 0) {\n            JavaType t = tf.constructFromCanonical(id);\n            // Ensure assignment compatibility\n            if (!baseType.isAssignableFrom(t)) {\n                throw new IllegalArgumentException(\"Type not subtype of base type: \" + t);\n            }\n            return t;\n        }\n        Class<?> cls;\n        try {\n            cls =  tf.findClass(id);\n        } catch (ClassNotFoundException e) {\n            if (ctxt instanceof DeserializationContext) {\n                DeserializationContext dctxt = (DeserializationContext) ctxt;\n                return dctxt.handleUnknownTypeId(baseType, id, this, \"no such class found\");\n            }\n            return null;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e);\n        }\n\n        JavaType specializedType = tf.constructSpecializedType(baseType, cls);\n        // Ensure assignment compatibility\n        if (!baseType.isAssignableFrom(specializedType)) {\n            throw new IllegalArgumentException(\"Type not subtype of base type: \" + specializedType);\n        }\n        return specializedType;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}