{
    "generation": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter oldFilter = ((Factory) mock).getCallback(0);\n    if (oldFilter!= null) {\n        InvocationListeners invocationListeners = oldFilter.getInvocationListeners();\n        InvocationListener[] listeners = invocationListeners.getInvocationListeners();\n        if (listeners!= null && listeners.length > 0) {\n            MockSettingsImpl newSettings = (MockSettingsImpl) org.mockito.Mockito.withSettings()\n                   .invocationListeners(listeners)\n                   .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n            MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, newSettings);\n            ((Factory) mock).setCallback(0, newFilter);\n        } else {\n            MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n            ((Factory) mock).setCallback(0, newFilter);\n        }\n    } else {\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        ((Factory) mock).setCallback(0, newFilter);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}