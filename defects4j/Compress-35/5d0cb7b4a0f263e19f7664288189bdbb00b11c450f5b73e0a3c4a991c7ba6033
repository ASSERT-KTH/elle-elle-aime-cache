{
    "generation": "public static boolean verifyCheckSum(byte[] header) {\n    // Define the expected header length based on TAR specification\n    final int HEADER_LENGTH = 512; // Standard TAR header block size\n    if (header.length != HEADER_LENGTH) {\n        throw new IllegalArgumentException(\"Invalid header length: expected \" + HEADER_LENGTH + \", got \" + header.length);\n    }\n\n    // Define the offset and length for the checksum field\n    final int CHKSUM_OFFSET = 148; // Position of checksum in the header\n    final int CHKSUMLEN = 8; // Length of the checksum field\n\n    long storedSum = 0;\n    long unsignedSum = 0;\n    long signedSum = 0;\n\n    int digits = 0;\n    for (int i = 0; i < HEADER_LENGTH; i++) {\n        byte b = header[i];\n        if (i >= CHKSUM_OFFSET && i < CHKSUM_OFFSET + CHKSUMLEN) {\n            if ('0' <= b && b <= '7' && digits < 6) {\n                storedSum = storedSum * 8 + (b - '0');\n                digits++;\n            } else if (digits > 0) {\n                // Stop collecting digits if a non-octal character is encountered after some digits\n                digits = 6;\n            }\n            // Replace checksum bytes with space for sum calculation\n            b = ' ';\n        }\n        unsignedSum += 0xff & b;\n        signedSum += b;\n    }\n\n    // Also consider the possibility that the stored sum is in signed format\n    return storedSum == unsignedSum || storedSum == signedSum;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}