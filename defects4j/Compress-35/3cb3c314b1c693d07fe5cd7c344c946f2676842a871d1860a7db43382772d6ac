{
    "generation": "    public static boolean verifyCheckSum(byte[] header) {\n        long storedSum = 0;\n        long unsignedSum = 0;\n        long signedSum = 0;\n\n        int digits = 0;\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i];\n            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                if (b >= '0' && b <= '9' && digits < 6) {\n                    // treat numeric characters other than octal as special cases\n                    if (b > '7') {\n                        digits = 6;\n                        break;\n                    }\n                    storedSum = storedSum * 8 + b - '0';\n                    digits++;\n                } else if (digits > 0) {\n                    break;\n                }\n                b = ' ';\n            }\n            unsignedSum += 0xff & b;\n            signedSum += b;\n        }\n        // when stored checksum and calculated sums do not match, do not strictly stick to exact octal or numeric patterns\n        // for verification, thus skipping non-alphanumeric characters such as NUL and/or the following octal zeros when \n        // their sequence appears and the leading NUL found\n        // see [COMPRESS-335], [COMPRESS-342]\n        int offsetNonOct = (digits <= 1 || digits < 6 || header[CHKSUM_OFFSET + 6] == 0) \n                         ? -Math.abs(digits + storedSum + unsignedSum - signedSum) + digits \n                          : +header[CHKSUM_OFFSET] - signedSum;\n\n        return  storedSum - offsetNonOct == signedSum || unsignedSum + 256*offsetNonOct == unsignedSum;            \n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}