{
    "generation": "\npublic static boolean verifyCheckSum(byte[] header) {\n\n    final int CHKSUM_OFFSET = 148;\n\n    final int CHKSUMLEN = 8;\n\n    // Extract checksum field\n\n    byte[] checksumField = Arrays.copyOfRange(header, CHKSUM_OFFSET, CHKSUM_OFFSET + CHKSUMLEN);\n\n    // Treat as string and trim whitespace\n\n    String checksumStr = new String(checksumField, StandardCharsets.US_ASCII).trim();\n\n    // Parse first six octal digits\n\n    long storedSum = 0;\n\n    int digits = 0;\n\n    for (char c : checksumStr.toCharArray()) {\n\n        if (digits >= 6) break;\n\n        if (c >= '0' && c <= '7') {\n\n            storedSum = storedSum * 8 + (c - '0');\n\n            digits++;\n\n        }\n\n    }\n\n    // Compute unsigned and signed sums with checksum bytes as spaces\n\n    byte[] headerWithSpaces = Arrays.copyOf(header, header.length);\n\n    Arrays.fill(headerWithSpaces, CHKSUM_OFFSET, CHKSUM_OFFSET + CHKSUMLEN, (byte) ' ');\n\n    long unsignedSum = 0;\n\n    long signedSum = 0;\n\n    for (byte b : headerWithSpaces) {\n\n        unsignedSum += 0xff & b;\n\n        signedSum += b;\n\n    }\n\n    // Check if storedSum matches either unsigned or signed sum\n\n    return storedSum == unsignedSum || storedSum == signedSum;\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}