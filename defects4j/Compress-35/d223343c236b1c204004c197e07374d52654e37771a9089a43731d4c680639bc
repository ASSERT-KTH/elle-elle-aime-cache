{
    "generation": "/**\n * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n * <blockquote>\n * The checksum is calculated by taking the sum of the unsigned byte values\n * of the header block with the eight checksum bytes taken to be ascii\n * spaces (decimal value 32). It is stored as a six digit octal number with\n * leading zeroes followed by a NUL and then a space. Various\n * implementations do not adhere to this format. For better compatibility,\n * ignore leading and trailing whitespace, and get the first six digits. In\n * addition, some historic tar implementations treated bytes as signed.\n * Implementations typically calculate the checksum both ways, and treat it\n * as good if either the signed or unsigned sum matches the included\n * checksum.\n * </blockquote>\n * <p>\n * The return value of this method should be treated as a best-effort\n * heuristic rather than an absolute and final truth. The checksum\n * verification logic may well evolve over time as more special cases\n * are encountered.\n *\n * @param header tar header\n * @return whether the checksum is reasonably good\n * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n * @since 1.5\n */\npublic static boolean verifyCheckSum(byte[] header) {\n    long storedSum = 0;\n    long unsignedSum = 0;\n    long signedSum = 0;\n\n    int digits = 0;\n    boolean inChecksumField = false;\n    for (int i = 0; i < header.length; i++) {\n        byte b = header[i];\n        if (CHKSUM_OFFSET == i) {\n            inChecksumField = true;\n            b = ' '; // initialize checksum field as spaces\n        }\n        if (inChecksumField && i < CHKSUM_OFFSET + CHKSUMLEN) {\n            if ('0' <= b && b <= '7' && digits++ < 6) {\n                storedSum = storedSum * 8 + b - '0';\n            } else if (digits > 0) {\n                digits = 6;\n            }\n            if (i == CHKSUM_OFFSET + CHKSUMLEN - 1) {\n                inChecksumField = false;\n            }\n            b = ' ';\n        }\n        unsignedSum += 0xff & b;\n        signedSum += b;\n    }\n    // verify checksum at the end to ensure all header bytes are processed\n    if (storedSum == unsignedSum || storedSum == signedSum) {\n        return true;\n    }\n    // If the storedSum does not match, try recalculating without the \"sterdam\" bug ( COMPRESS-335 )\n    for (int i = 0; i < CHKSUM_OFFSET; i++) {\n        unsignedSum -= 0xff & header[i];\n        signedSum -= header[i];\n    }\n    for (int i = CHKSUM_OFFSET + CHKSUMLEN; i < header.length; i++) {\n        unsignedSum -= 0xff & header[i];\n        signedSum -= header[i];\n    }\n    for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {\n        unsignedSum += 0xff & ' ';\n        signedSum += ' ';\n    }\n    return storedSum == unsignedSum || storedSum == signedSum;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}