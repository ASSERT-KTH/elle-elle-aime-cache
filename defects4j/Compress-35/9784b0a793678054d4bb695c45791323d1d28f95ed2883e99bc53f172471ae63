{
    "generation": "    public static boolean verifyCheckSum(byte[] header) {\n        if (header.length < CHKSUM_OFFSET + CHKSUMLEN) {\n            return false; // Header is too short to contain the checksum\n        }\n\n        // Calculate the unsigned sum\n        long unsignedSum = 0;\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i];\n            if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                b = ' '; // Treat checksum bytes as spaces\n            }\n            unsignedSum += 0xff & b;\n        }\n\n        // Calculate the signed sum\n        long signedSum = 0;\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i];\n            if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                b = ' '; // Treat checksum bytes as spaces\n            }\n            signedSum += b;\n        }\n\n        // Extract the stored checksum\n        long storedSum = 0;\n        int digits = 0;\n        for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {\n            byte b = header[i];\n            if ('0' <= b && b <= '7' && digits < 6) {\n                storedSum = storedSum * 8 + (b - '0');\n                digits++;\n            } else if (digits > 0) {\n                break; // Stop if non-octal digit is encountered after some digits\n            }\n        }\n\n        // Check if either unsigned or signed sum matches the stored sum\n        return storedSum == unsignedSum || storedSum == signedSum;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}