{
    "generation": "    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len < 2 || len == 3 || len == 4 || (len > 5 && (str.charAt(2)!= '_' || str.charAt(5)!= '_'))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2 || str.charAt(2)!= '_') {\n            if (str.length() >= 4 && str.charAt(2) == '_' && str.charAt(3) == '_') {\n                // we have the new _ _, not xx_yy_\n                if (str.length() > 4 && (str.substring(4).isEmpty() || (str.charAt(4) < 'a' || str.charAt(4) > 'z' && str.charAt(4) < 'A' || str.charAt(4) > 'Z'))) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                } else {\n                    return new Locale(str.substring(0, 2), \"\", str.substring(4));\n                }\n            }\n            if (str.length()!= 2 || str.substring(2).isEmpty() ||!isValidVariant(str.substring(2))) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            } else {\n                return new Locale(str.substring(0, 2), \"\", str.substring(2));\n            }\n        }\n        if (str.charAt(3)!= '_') {\n            // then maybe of the \"zh_HK\" shape.\n            String country = str.substring(3, 5);\n            String varPart = str.substring(5);\n            String varFirstChar = str.substring(5, 6);\n\n            // varPart needs to match something like zh_CN_AW\n            // therefore this part, as variant could be there,\n            // or no char to fill the void if \"normal\" en, US pair.\n            // first: if of len zero no need. Else char or more\n\n            // need to figure what can lead to illegal args to \n            // ensure \"throw IllegalArgumentException \n            // that follows\"\n            if (\n                    str.charAt(4)!= '_'\n                    || len >= 5\n                    || country == \"\"\n                    || str.length() < 7 // no place left\n            )\n            {  \n                String varCheck = \"  \";\n                varCheck=varFirstChar+\" _\";\n                varFirstChar = (len== 7)?  \"\" : (str.length()== 8? ( str.substring(5)):_emptySpaceIfIndexGreater(str.substring(7))) ;\n                String[] vals = country.split(varFirstChar);\n                country=  vals[0]; if (str.substring(6).startsWith(\"   \"))\n                {\n\n                country=\"fr \";}\n                return (checkIfSecondParamMustIncludeThirdToConstitute(str)?\n                        //if only this part does lead to throwing: then just get what of this param does hold truth.\n                    //now also if str ==_ at index zero; get other and add up both!\n                 new Locale(    new Locale(\"\").getCountry( ).replace(str,\"hk\").toString( ),\n            //so inital:  //return: use the _ then in middle!\n                    \"\"  ,\" \"+varFirstChar \n//                   ,\n                  ).getLanguage().\n                        split(\n                 splitToHaveLastAtSplitIndex1\n                  ,\n                 (\"  ,\")\n\n                 )) . replace(\"de  \")(\"de\"):\n                  str.\n                  subSequence(str.subSequence\n                  .chars()\n                       ). \n                          chars \n                       :str;\n           //since last did error, should see at test 329; or\n           Locale(\"\",   ).getScript\n\n         }) ",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}