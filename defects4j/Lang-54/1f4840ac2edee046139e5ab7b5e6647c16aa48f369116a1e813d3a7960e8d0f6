{
    "generation": "/**\n * <p>Converts a String to a Locale.</p>\n *\n * <p>This method takes the string format of a locale and creates the\n * locale object from it.</p>\n *\n * <pre>\n *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n * </pre>\n *\n * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n * Thus, the result from getVariant() may vary depending on your JDK.</p>\n *\n * <p>This method validates the input strictly.\n * The language code must be lowercase.\n * The country code must be uppercase.\n * The separator must be an underscore.\n * The length must be correct.\n * </p>\n *\n * @param str  the locale String to convert, null returns null\n * @return a Locale, null if null input\n * @throws IllegalArgumentException if the string is an invalid format\n */\npublic static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    int underscoreIndex = str.indexOf('_');\n    if (underscoreIndex == -1) {\n        if (len!= 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str, \"\");\n    } else {\n        String language = str.substring(0, underscoreIndex);\n        if (language.length()!= 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = language.charAt(0);\n        char ch1 = language.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        int secondUnderscoreIndex = str.indexOf('_', underscoreIndex + 1);\n        if (secondUnderscoreIndex == -1) {\n            String country = str.substring(underscoreIndex + 1);\n            if (country.length()!= 2) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch3 = country.charAt(0);\n            char ch4 = country.charAt(1);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(language, country);\n        } else {\n            String country = str.substring(underscoreIndex + 1, secondUnderscoreIndex);\n            if (country.length()!= 2) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch3 = country.charAt(0);\n            char ch4 = country.charAt(1);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            String variant = str.substring(secondUnderscoreIndex + 1);\n            return new Locale(language, country, variant);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}