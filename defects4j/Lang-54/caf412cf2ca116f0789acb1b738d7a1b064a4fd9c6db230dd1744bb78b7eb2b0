{
    "generation": "/**\n * Converts a String to a Locale.\n *\n * This method takes the string format of a locale and creates the locale object from it.\n *\n * @param str  the locale String to convert, null returns null\n * @return a Locale, null if null input\n * @throws IllegalArgumentException if the string is an invalid format\n */\npublic static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    if (len < 2 || len > 8 || (len == 5 && str.charAt(2) != '_') || (len > 5 && str.charAt(5) != '_')) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    char ch0 = str.charAt(0);\n    char ch1 = str.charAt(1);\n    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 2) {\n        return new Locale(str, \"\");\n    } else {\n        if (str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 3) {\n            return new Locale(str.substring(0, 2), \"\", str.substring(3));\n        }\n        char ch3 = str.charAt(3);\n        if (ch3 != '_' && (ch3 < 'A' || ch3 > 'Z')) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 5) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        } else if (len == 6) {\n            return new Locale(str.substring(0, 2), str.substring(3, 5), \"\");\n        } else {\n            char ch4 = str.charAt(4);\n            if (ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}