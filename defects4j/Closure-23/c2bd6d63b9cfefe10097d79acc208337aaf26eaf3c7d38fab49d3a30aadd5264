{
    "generation": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (!left.isArrayLit()) {\n      // Ensure that the left side is an array literal.\n      return n;\n    }\n\n    JsArray<Node> elements = left.getElements();\n    if (intIndex >= elements.length()) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = elements.get(intIndex);\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem.cloneTree());\n    reportCodeChange();\n    return elem;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}