{
    "generation": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target, the array literal is\n    // acting as a temporary, we can't fold it here: \"[][0] += 1\"\n    if (parent.isAssign() || parent.isIncDecOp()) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node arrayLiteral = left;\n    if (!arrayLiteral.isObjectLit()) {\n      return n;\n    }\n\n    Node elem = null;\n    for (Node child = arrayLiteral.getFirstChild(); child != null && intIndex >= 0; child = child.getNext()) {\n      if (child.isStringKey() || child.isEmpty()) {\n        intIndex--;\n      }\n      if (intIndex == 0) {\n        elem = child;\n        break;\n      }\n    }\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node value = elem.getLastChild();\n    if (value == null) {\n      value = NodeUtil.newUndefinedNode(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, value);\n    reportCodeChange();\n    return value;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}