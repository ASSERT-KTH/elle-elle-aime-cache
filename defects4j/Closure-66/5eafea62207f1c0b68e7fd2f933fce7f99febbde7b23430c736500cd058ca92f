{
    "generation": "  /**\n   * This is the meat of the type checking.  It is basically one big switch,\n   * with each case representing one type of parse tree node.  The individual\n   * cases are usually pretty straightforward.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of the node n.\n   */\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    JSType childType;\n    JSType leftType, rightType;\n    Node left, right;\n    // To be explicitly set to false if the node is not typeable.\n    boolean typeable = true;\n\n    switch (n.getType()) {\n      //...\n\n      case Token.OBJECTLIT:\n        if (n.getJSType()!= null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        for (Node key : n.children()) {\n          visitObjLitKey(t, key, n);\n          // Count the type of the key node separately\n          doPercentTypedAccounting(t, key);\n        }\n        // Don't count the OBJECTLIT node itself to avoid double counting\n        typeable = false;\n        break;\n\n      //...\n    }\n\n    // Don't count externs since the user's code may not even use that part.\n    typeable = typeable &&!inExterns;\n\n    if (typeable) {\n      doPercentTypedAccounting(t, n);\n    }\n\n    checkNoTypeCheckSection(n, false);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}