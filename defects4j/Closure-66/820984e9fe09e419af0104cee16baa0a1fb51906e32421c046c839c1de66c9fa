{
    "generation": "public void visit(NodeTraversal t, Node n, Node parent) {\n    JSType childType;\n    JSType leftType, rightType;\n    Node left, right;\n    // To be explicitly set to false if the node is not typeable.\n    boolean typeable = true;\n\n    switch (n.getType()) {\n        // ... [other cases remain unchanged]\n\n        case Token.EXPR_RESULT:\n            // For expression statements, check if the expression is typeable.\n            Node expr = n.getFirstChild();\n            if (expr != null) {\n                visit(t, expr, n);\n                // If the expression is typeable, mark the EXPR_RESULT as typeable.\n                typeable = expr.getBooleanProp(Node.HAS_TYPE);\n            } else {\n                typeable = false;\n            }\n            break;\n\n        // For object literals, ensure they are typed.\n        case Token.OBJECTLIT:\n            ensureTyped(t, n);\n            for (Node key : n.children()) {\n                visitObjLitKey(t, key, n);\n            }\n            // Object literals are typeable if they have a type assigned.\n            typeable = n.getJSType() != null;\n            break;\n\n        // ... [other cases remain unchanged]\n\n        default:\n            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n            ensureTyped(t, n);\n            break;\n    }\n\n    // Don't count externs since the user's code may not even use that part.\n    typeable = typeable && !inExterns;\n\n    if (typeable) {\n        doPercentTypedAccounting(t, n);\n    }\n\n    checkNoTypeCheckSection(n, false);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}