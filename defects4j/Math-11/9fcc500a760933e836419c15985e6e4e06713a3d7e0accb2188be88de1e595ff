{
    "generation": "    /** {@inheritDoc} */\n    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals.length != dim) {\n            throw new DimensionMismatchException(vals.length, dim);\n        }\n\n        final double[] diff = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            diff[i] = vals[i] - getMeans()[i];\n        }\n\n        final double[][] sigma = getCovariances();\n        final double[][] sigmaInv = new double[dim][dim];\n        final CholeskyDecomposition chol = new CholeskyDecomposition(new BlockRealMatrix(sigma));\n        final RealMatrix sigmaInvMatrix = chol.getSolver().getInverse();\n        for (int i = 0; i < dim; i++) {\n            for (int j = 0; j < dim; j++) {\n                sigmaInv[i][j] = sigmaInvMatrix.getEntry(i, j);\n            }\n        }\n\n        double exponentTerm = 0.0;\n        for (int i = 0; i < dim; i++) {\n            for (int j = 0; j < dim; j++) {\n                exponentTerm += diff[i] * sigmaInv[i][j] * diff[j];\n            }\n        }\n\n        return FastMath.pow(2 * FastMath.PI, -dim / 2.0) *\n               FastMath.pow(getCovarianceMatrixDeterminant(), -0.5) *\n               FastMath.exp(-0.5 * exponentTerm);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}