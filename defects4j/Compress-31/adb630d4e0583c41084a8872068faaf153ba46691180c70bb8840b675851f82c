{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // Skip leading NULs and treat them as leading spaces\n    while (start < end && buffer[start] == 0) {\n        start++;\n    }\n\n    // Check if the buffer is all NULs or spaces, return 0\n    if (start == end) {\n        return 0L;\n    }\n\n    // Trim trailing spaces and NULs\n    while (start < end && (buffer[end - 1] == ' ' || buffer[end - 1] == 0)) {\n        end--;\n    }\n\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte == 0) {\n            // Embedded NUL detected, throw exception\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}