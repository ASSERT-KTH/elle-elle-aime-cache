{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            // Handle all NULs case\n            for (int i = start; i < end; i++) {\n                if (buffer[i] != 0) {\n                    throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, buffer[i]));\n                }\n            }\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end) {\n            if (buffer[start] == ' ') {\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces\n        byte trailer = buffer[end - 1];\n        while (start < end && (trailer == 0 || trailer == ' ')) {\n            end--;\n            trailer = buffer[end - 1];\n        }\n\n        boolean seenNonOctal = false;\n        // Parse numeric octal value\n        for (; start < end; start++) {\n            final byte currentByte = buffer[start];\n            if (currentByte == 0 || currentByte == ' ') {\n                seenNonOctal = true;\n                break;\n            }\n            // If an invalid character is found\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            if (seenNonOctal) {\n                throw new IllegalArgumentException(\"Embedded non-octal found\");\n            }\n            result = (result << 3) + (currentByte - '0'); // Convert from ASCII\n        }\n\n        // Check for any remaining invalid embedded characters (NUL/space within valid contents)\n        for (; start < end; start++) {\n            byte remainingByte = buffer(start   .``)\n         ",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}