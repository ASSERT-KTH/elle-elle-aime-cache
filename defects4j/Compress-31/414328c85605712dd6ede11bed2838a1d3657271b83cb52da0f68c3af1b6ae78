{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long result = 0;\n        int end = offset + length;\n        int start = offset;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end) {\n            if (buffer[start] == ' ') {\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces.\n        byte trailer = buffer[end - 1];\n        while (start < end && (trailer == 0 || trailer == ' ')) {\n            end--;\n            trailer = buffer[end - 1];\n        }\n\n        // Validate for embedded spaces or invalid trailing spaces/NULs\n        boolean foundNonZeroOrSpace = false;\n        for (int i = start; i < end; i++) {\n            byte currentByte = buffer[i];\n\n            // Check for embedded NUL\n            if (currentByte == 0) {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n\n            // Check for embedded spaces in the middle of the non-zero digits\n            if (currentByte == ' ') {\n                if (foundNonZeroOrSpace) {\n                    throw new IllegalArgumentException(\"Invalid embedded space\");\n                }\n            } else {\n                foundNonZeroOrSpace = true;\n            }\n        }\n\n        for (; start < end; start++) {\n            final byte currentByte = buffer[start];\n\n            // Check if the character is a valid octal digit\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}