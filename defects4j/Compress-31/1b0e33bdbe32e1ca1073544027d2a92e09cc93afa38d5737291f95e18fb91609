{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Find the end of the octal digits\n    int current = start;\n    while (current < end) {\n        byte b = buffer[current];\n        if (b == 0 || b == ' ') {\n            break;\n        }\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, current, b));\n        }\n        current++;\n    }\n    int octalEnd = current;\n\n    // Trim trailing spaces and NULs\n    while (octalEnd > start && (buffer[octalEnd - 1] == 0 || buffer[octalEnd - 1] == ' ')) {\n        octalEnd--;\n    }\n\n    // Ensure there's at least one octal digit\n    if (octalEnd == start) {\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n\n    // Parse the octal digits\n    for (int i = start; i < octalEnd; i++) {\n        byte b = buffer[i];\n        if (b == 0) {\n            throw new IllegalArgumentException(\"Embedded NUL in octal digits\");\n        }\n        result = (result << 3) + (b - '0');\n    }\n\n    // Ensure the byte after the octal digits is space or NUL\n    if (octalEnd < end) {\n        byte trailer = buffer[octalEnd];\n        if (trailer != 0 && trailer != ' ') {\n            throw new IllegalArgumentException(\"Trailing character is not space or NUL\");\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}