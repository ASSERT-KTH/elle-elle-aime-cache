{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Find the end of the octal digits by looking for the trailing space or NUL\n    int octalEnd = end;\n    byte trailer = buffer[octalEnd - 1];\n    while (octalEnd > start && (trailer == 0 || trailer == ' ')) {\n        octalEnd--;\n        if (octalEnd > start) {\n            trailer = buffer[octalEnd - 1];\n        } else {\n            break;\n        }\n    }\n\n    // Check for embedded NULs or spaces within the octal digits\n    for (int i = start; i < octalEnd; i++) {\n        byte currentByte = buffer[i];\n        if (currentByte == 0 || currentByte == ' ') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n    }\n\n    // Parse the octal digits\n    for (int i = start; i < octalEnd; i++) {\n        byte currentByte = buffer[i];\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}