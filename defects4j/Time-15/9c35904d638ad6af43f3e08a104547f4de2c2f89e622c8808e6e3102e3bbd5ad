{
    "generation": "/**\n * Multiply two values throwing an exception if overflow occurs.\n * \n * @param val1  the first value\n * @param val2  the second value\n * @return the new total\n * @throws ArithmeticException if the value is too big or too small\n * @since 1.2\n */\npublic static long safeMultiply(long val1, int val2) {\n    long total = val1 * (long) val2; // Cast val2 to long to avoid integer overflow\n    if ((val2 == -1 && val1 == Long.MIN_VALUE) || \n        (val2 == 1 && val1 == Long.MAX_VALUE && val1 > 0) || \n        ((val1 > 0)!= (total > 0)) || // Check for overflow\n        (val1!= 0 && total / val1!= val2)) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}