{
    "generation": "/**\n * Multiply two values throwing an exception if overflow occurs.\n * \n * @param val1  the first value\n * @param val2  the second value\n * @return the new total\n * @throws ArithmeticException if the value is too big or too small\n * @since 1.2\n */\npublic static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n        case -1:\n            return -val1;\n    }\n    \n    if (val2 == Integer.MIN_VALUE) {\n        if (val1 != 0 && val1 != -1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return val1 == 1 ? Long.MIN_VALUE : (val1 == -1 ? Long.MAX_VALUE + 1 : 0);\n    }\n    \n    if (val1 == Long.MIN_VALUE) {\n        if (val2 < -1 || val2 > 1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return val2 == -1 ? Long.MIN_VALUE : 0;\n    }\n    \n    long total = val1 * val2;\n    if ((val2 > 0 && total / val2 != val1) || (val2 < 0 && total / val2 != val1)) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}