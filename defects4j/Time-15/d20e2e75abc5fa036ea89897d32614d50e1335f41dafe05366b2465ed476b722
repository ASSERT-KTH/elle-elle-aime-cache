{
    "generation": "/**\n * Multiply two values throwing an exception if overflow occurs.\n * \n * @param val1  the first value\n * @param val2  the second value\n * @return the new total\n * @throws ArithmeticException if the value is too big or too small\n * @since 1.2\n */\npublic static long safeMultiply(long val1, int val2) {\n    try {\n        // Check for overflow using BigInteger\n        BigInteger bigVal1 = BigInteger.valueOf(val1);\n        BigInteger total = bigVal1.multiply(BigInteger.valueOf(val2));\n        if (total.bitLength() > 63) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total.longValue();\n    } catch (ArithmeticException e) {\n        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}