{
    "generation": "    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n\n        // Note: Integer.MIN_VALUE is a special case because -Integer.MIN_VALUE overflows and becomes Integer.MIN_VALUE again.\n        if (val2 == Integer.MIN_VALUE && val1 != 0) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n\n        long total = val1 * (long) val2;\n        if (total / (long) val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}