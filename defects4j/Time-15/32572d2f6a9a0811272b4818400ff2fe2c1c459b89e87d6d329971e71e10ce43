{
    "generation": "    public static long safeMultiply(long val1, int val2) {\n        if (val1 > 0) {\n            if (val2 > 0) {\n                if (val1 > Long.MAX_VALUE / val2) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n            } else {\n                if (val2 < Long.MIN_VALUE / val1) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n            }\n        } else if (val1 < 0) {\n            if (val2 > 0) {\n                if (val1 < Long.MIN_VALUE / val2) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n            } else {\n                if (val1 != 0 && val2 < Long.MAX_VALUE / val1) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n            }\n        }\n\n        // Special case for Long.MIN_VALUE when multiplied by -1, as it overflows\n        if (val1 == Long.MIN_VALUE && val2 == -1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n\n        return val1 * val2;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}