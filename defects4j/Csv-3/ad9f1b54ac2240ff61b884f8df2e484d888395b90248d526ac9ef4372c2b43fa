{
    "generation": "/**\n * Handle an escape sequence.\n * The current character must be the escape character.\n * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n * on the input stream.\n *\n * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid.\n * @throws IOException if there is a problem reading the stream or the end of stream is detected:\n * the escape character is not allowed at end of stream\n */\nint readEscape() throws IOException {\n    // the escape char has just been read (normally a backslash)\n    final int c = in.read();\n    switch (c) {\n    case 'r':\n        return CR;\n    case 'n':\n        return LF;\n    case 't':\n        return TAB;\n    case 'b':\n        return BACKSPACE;\n    case 'f':\n        return FF;\n    case CR:\n    case LF:\n    case FF:\n    case TAB: // Allow these characters to be escaped\n    case BACKSPACE:\n        return c;\n    case END_OF_STREAM:\n        throw new IOException(\"EOF whilst processing escape sequence\");\n    default:\n        // Now handle escaped special sequences\n        if (c == 'N' && in.read() == '\\\\') {\n            // Continue to the next character after handling the special sequence\n            return in.read();\n        }\n        // For any other character, return the character itself\n        return c;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}