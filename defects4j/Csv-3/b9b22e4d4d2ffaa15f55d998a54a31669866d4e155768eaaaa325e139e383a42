{
    "generation": "/**\n * Handle an escape sequence.\n * The current character must be the escape character.\n * On return, the next character is available by calling {@link ExtendedBufferedReader#read()}\n * on the input stream.\n *\n * @return the unescaped character (as an int) or {@code END_OF_STREAM} if char following the escape is invalid.\n * @throws IOException if there is a problem reading the stream or the end of stream is detected.\n */\nint readEscape() throws IOException {\n    // the escape char has just been read (normally a backslash)\n    final int c = in.read();\n    switch (c) {\n        case 'r':\n            return '\\r';\n        case 'n':\n            return '\\n';\n        case 't':\n            return '\\t';\n        case '\"':\n            return '\\\"';\n        case '\\'':\n            return '\\'';\n        case '\\\\':\n            return '\\\\';\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            return c; // return the escaped character as is\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}