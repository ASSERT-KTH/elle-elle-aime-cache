{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException\n{\n    //... (rest of the code remains the same until the switch statement)\n\n    switch (t.id()) {\n    //... (rest of the cases remain the same)\n\n    case ID_END_ARRAY:\n    case ID_END_OBJECT:\n        {\n            boolean returnEnd = _headContext.isStartHandled();\n            f = _headContext.getFilter();\n            if ((f!= null) && (f!= TokenFilter.INCLUDE_ALL)) {\n                f.filterFinishArray();\n            }\n            _headContext = _headContext.getParent();\n            _itemFilter = _headContext.getFilter();\n            if (returnEnd) {\n                if (_exposedContext!= null) {\n                    _exposedContext = null;\n                }\n                return (_currToken = t);\n            }\n        }\n        break;\n\n    //... (rest of the cases remain the same)\n\n    default: // scalar value\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            return (_currToken = t);\n        }\n        if (f!= null) {\n            f = _headContext.checkValue(f);\n            if ((f == TokenFilter.INCLUDE_ALL)\n                    || ((f!= null) && f.includeValue(delegate))) {\n                return (_currToken = t);\n            }\n        }\n        // Otherwise not included (leaves must be explicitly included)\n        break;\n    }\n\n    // We get here if token was not yet found; offlined handling\n    return _nextToken2();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}