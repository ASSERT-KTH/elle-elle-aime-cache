{
    "generation": "    @Override\n    public JsonToken nextToken() throws IOException\n    {\n        // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all\n        //    conditionals; and it seems odd to return `null` but NOT considering input\n        //    as closed... would love a rewrite to simplify/clear up logic here.\n        \n        // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken\n        // check for no buffered context _exposedContext - null\n        // If all the conditions matches then check for scalar / non-scalar property\n        if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n            //if not scalar and ended successfully, and !includePath, then return null\n                if (_currToken.isStructEnd()) {\n                    if (_headContext.isStartHandled()) {\n                        _currToken = null;\n                        return null;\n                    }\n                } else if (_currToken.isScalarValue()) {\n                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n                    // then return null \n                    if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n                        _currToken = null;\n                        return null;\n                    }\n            }\n        }\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        // We finished array, need to get to the closing bracket, to avoid returning it twice.\n                        // Related to [core#330]\n                        JsonToken closeBracket = delegate.nextToken();\n                        if(closeBracket == JsonToken.END_ARRAY) {\n                            t = delegate.getCurrentToken();\n                            _currToken = t;\n                            return t;\n                        } else {\n                            throw new IllegalStateException(\"Unexpected token following end of array: \"+closeBracket);\n                        }\n                    } else {\n                       break; \n                    }\n                    \n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            _currToken = t;\n            return t;\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n        case ID_START_OBJECT:\n        case ID_FIELD_NAME:\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n        default: // scalar value\n            // Rest of the code remains the same as the original version.\n        // ... (rest of the switch statement and the code afterwards remains unchanged)\n        }\n        return _nextToken2();\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}