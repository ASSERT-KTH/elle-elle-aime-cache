{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException {\n    // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken\n    // check for no buffered context _exposedContext - null\n    // If all the conditions match, then check for scalar/non-scalar property\n    if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n        if (_currToken.isStructEnd()) {\n            if (_headContext.isStartHandled()) {\n                return (_currToken = null);\n            }\n        } else if (_currToken.isScalarValue()) {\n            if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n                return (_currToken = null);\n            }\n        }\n    }\n\n    // Check if there's any buffered context (_exposedContext)\n    TokenFilterContext ctxt = _exposedContext;\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                if (ctxt.inArray()) {\n                    JsonToken t2 = delegate.getCurrentToken();\n                    _currToken = t2;\n                    return t2;\n                }\n                break;\n            }\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) {\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n        }\n    }\n\n    // Read more tokens if buffered context is not available\n    JsonToken t = delegate.nextToken();\n    if (t == null) { // End of input\n        _currToken = null;\n        return null;\n    }\n\n    // Process the next token or decision tree\n    TokenFilter f;\n    switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            _headContext = _headContext.createChildArrayContext(f, f == TokenFilter.INCLUDE_ALL);\n            if (_includePath) {\n                JsonToken buffered = _nextTokenWithBuffering(_headContext);\n                if (buffered != null) {\n                    _currToken = buffered;\n                    return buffered;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            _headContext = _headContext.createChildObjectContext(f, f == TokenFilter.INCLUDE_ALL);\n            if (_includePath) {\n                JsonToken buffered = _nextTokenWithBuffering(_headContext);\n                if (buffered != null) {\n                    _currToken = buffered;\n                    return buffered;\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            String name = delegate.getCurrentName();\n            f = _headContext.setFieldName(name);\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _itemFilter = f;\n                if (!_includePath) {\n                    if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                        JsonToken parentToken = _headContext.nextTokenToRead();\n                        _exposedContext = _headContext;\n                        return (_currToken = parentToken);\n                    }\n                }\n                return (_currToken = t);\n            }\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            f = f.includeProperty(name);\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                if (_includePath) {\n                    return (_currToken = t);\n                }\n            }\n            if (_includePath) {\n                JsonToken buffered = _nextTokenWithBuffering(_headContext);\n                if (buffered != null) {\n                    _currToken = buffered;\n                    return buffered;\n                }\n            }\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            boolean returnEnd = _headContext.isStartHandled();\n            f = _headContext.getFilter();\n            if (f != null && f != TokenFilter.INCLUDE_ALL) {\n                f.filterFinishArray();\n            }\n            _headContext = _headContext.getParent();\n            _itemFilter = _headContext.getFilter();\n            if (returnEnd) {\n                return (_currToken = t);\n            }\n            break;\n\n        default: // Scalar values\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n    }\n\n    // Fallback to next token in delegation if nothing matches\n    return _nextToken2();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}