{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException {\n    if (!_allowMultipleMatches && _currToken != null && _exposedContext == null) {\n        if (_currToken.isStructEnd()) {\n            if (_headContext.isStartHandled())\n                return _currToken = null;\n        } else if (_currToken.isScalarValue()) {\n            if (!_headContext.isStartHandled() && _itemFilter == TokenFilter.INCLUDE_ALL)\n                return _currToken = null;\n        }\n    }\n\n    TokenFilterContext ctxt = _exposedContext;\n    if (ctxt != null) {\n        JsonToken t = ctxt.nextTokenToRead();\n        if (t != null)\n            return _currToken = t;\n        if (ctxt != _headContext) {\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) {\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n            return _currToken = ctxt.nextTokenToRead();\n        }\n        _exposedContext = null;\n    }\n\n    JsonToken t = delegate.nextToken();\n    if (t == null)\n        return _currToken = t;\n\n    _currToken = t;\n    TokenFilter f;\n\n    switch (t.id()) {\n        case ID_START_ARRAY:\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL)\n                break;\n            if (f == null) {\n                delegate.skipChildren();\n                return null;\n            }\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                if (t.id() == ID_START_ARRAY)\n                    f = f.filterStartArray();\n                else\n                    f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            if (!_headContext.isStartHandled()) {\n                f = _headContext.getFilter();\n                if (f != null && f != TokenFilter.INCLUDE_ALL) {\n                    if (t.id() == ID_END_ARRAY)\n                        f.filterFinishArray();\n                    else\n                        f.filterFinishObject();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            String name = delegate.getCurrentName();\n            f = _headContext.setFieldName(name);\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _itemFilter = f;\n                if (!_includePath && _includeImmediateParent && !_headContext.isStartHandled()) {\n                    t = _headContext.nextTokenToRead();\n                    _exposedContext = _headContext;\n                    return _currToken = t;\n                }\n            } else if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                return null;\n            } else {\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    return null;\n                }\n            }\n            _itemFilter = f;\n            break;\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL)\n                break;\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if (f == TokenFilter.INCLUDE_ALL || (f != null && f.includeValue(delegate)))\n                    break;\n            }\n            return null;\n    }\n\n    if (_includePath) {\n        JsonToken t2 = _nextTokenWithBuffering(_headContext);\n        if (t2 != null)\n            return _currToken = t2;\n    }\n    return _currToken;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}