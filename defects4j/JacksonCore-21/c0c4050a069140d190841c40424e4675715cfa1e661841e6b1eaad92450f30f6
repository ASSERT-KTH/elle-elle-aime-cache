{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException {\n    // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken\n    // check for no buffered context _exposedContext - null\n    // If all the conditions match, then check for scalar/non-scalar property\n    if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {\n        // if not scalar and ended successfully, and !includePath, then return null\n        if (_currToken.isStructEnd()) {\n            if (_headContext.isStartHandled()) {\n                return (_currToken = null);\n            }\n        } else if (_currToken.isScalarValue()) {\n            // else if scalar and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n            // then return null \n            if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {\n                return (_currToken = null);\n            }\n        }\n    }\n\n    // Anything buffered?\n    TokenFilterContext ctxt = _exposedContext;\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n            // All done with buffered stuff?\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                if (ctxt.inArray()) {\n                    t = delegate.getCurrentToken();\n                    _currToken = t;\n                    return t;\n                }\n                break;\n            }\n            // If not, traverse down the context chain\n            ctxt = _headContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { // should never occur\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n        }\n    }\n\n    // If not, need to read more. If we got any:\n    JsonToken t = delegate.nextToken();\n    if (t == null) {\n        // No strict need to close, since we have no state here\n        _currToken = t;\n        return t;\n    }\n\n    TokenFilter f;\n\n    switch (t.id()) {\n    case ID_START_ARRAY:\n    case ID_START_OBJECT:\n        f = _itemFilter;\n\n        if (f == null) {\n            delegate.skipChildren();\n            return (_currToken = null);\n        }\n\n        f = _headContext.checkValue(f);\n\n        if (f == null) {\n            delegate.skipChildren();\n            return (_currToken = null);\n        }\n\n        if (t.id() == ID_START_ARRAY) {\n            _headContext = _headContext.createChildArrayContext(f, f == TokenFilter.INCLUDE_ALL);\n        } else {\n            _headContext = _headContext.createChildObjectContext(f, f == TokenFilter.INCLUDE_ALL);\n        }\n\n        if (f == TokenFilter.INCLUDE_ALL) {\n            return (_currToken = t);\n        }\n\n        // Need to buffer if parent path is to be included\n        if (_includePath) {\n            JsonToken bufferedToken = _nextTokenWithBuffering(_headContext);\n            if (bufferedToken != null) {\n                _currToken = bufferedToken;\n                return bufferedToken;\n            }\n        }\n        return (_currToken = null);\n\n    case ID_END_ARRAY:\n    case ID_END_OBJECT:\n        boolean returnEnd = _headContext.isStartHandled();\n        f = _headContext.getFilter();\n\n        if (f != null && f != TokenFilter.INCLUDE_ALL) {\n            f.filterFinishArray();\n        }\n\n        _headContext = _headContext.getParent();\n        _itemFilter = _headContext.getFilter();\n\n        if (returnEnd) {\n            return (_currToken = t);\n        }\n        return (_currToken = null);\n\n    case ID_FIELD_NAME:\n        String name = delegate.getCurrentName();\n        f = _headContext.setFieldName(name);\n\n        if (f == TokenFilter.INCLUDE_ALL) {\n            _itemFilter = f;\n            if (!_includePath && _includeImmediateParent && !_headContext.isStartHandled()) {\n                t = _headContext.nextTokenToRead(); // Returns START_OBJECT, marks it handled\n                _exposedContext = _headContext;\n            }\n            return (_currToken = t);\n        }\n\n        if (f == null) {\n            delegate.nextToken();\n            delegate.skipChildren();\n            return (_currToken = null);\n        }\n\n        f = f.includeProperty(name);\n        if (f == null) {\n            delegate.nextToken();\n            delegate.skipChildren();\n            return (_currToken = null);\n        }\n\n        _itemFilter = f;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            if (_includePath) {\n                return (_currToken = t);\n            }\n        }\n\n        if (_includePath) {\n            t = _nextTokenWithBuffering(_headContext);\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n        }\n        return (_currToken = null);\n\n    default: // Scalar value\n        f = _itemFilter;\n        if (f == TokenFilter.INCLUDE_ALL) {\n            return (_currToken = t);\n        }\n\n        if (f != null) {\n            f = _headContext.checkValue(f);\n            if ((f == TokenFilter.INCLUDE_ALL) || (f != null && f.includeValue(delegate))) {\n                return (_currToken = t);\n            }\n        }\n\n        return (_currToken = null);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}