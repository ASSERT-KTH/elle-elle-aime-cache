{
    "generation": "@Override\npublic JsonToken nextToken() throws IOException {\n    // Check if multiple matches are allowed and handle the current token accordingly\n    if (!_allowMultipleMatches && _currToken != null && _exposedContext == null) {\n        if (_currToken.isStructEnd() && _headContext.isStartHandled()) {\n            return (_currToken = null);\n        } else if (_currToken.isScalarValue() && !_headContext.isStartHandled() && _itemFilter == TokenFilter.INCLUDE_ALL) {\n            return (_currToken = null);\n        }\n    }\n\n    // Check if there are any buffered tokens\n    TokenFilterContext ctxt = _exposedContext;\n    if (ctxt != null) {\n        while (true) {\n            JsonToken t = ctxt.nextTokenToRead();\n            if (t != null) {\n                _currToken = t;\n                return t;\n            }\n            if (ctxt == _headContext) {\n                _exposedContext = null;\n                JsonToken t2 = delegate.getCurrentToken();\n                if (t2 != null) {\n                    _currToken = t2;\n                    return t2;\n                }\n                break;\n            }\n            ctxt = _headContext.findChildOf(ctxt);\n            if (ctxt == null) {\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n            _exposedContext = ctxt;\n        }\n    }\n\n    // Read the next token from the delegate\n    JsonToken t = delegate.nextToken();\n    if (t == null) {\n        _currToken = null;\n        return null;\n    }\n\n    // Determine if the token should be included based on the filter\n    TokenFilter f;\n    switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                _currToken = t;\n                return t;\n            }\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                _currToken = t;\n                return t;\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            if (_includePath) {\n                JsonToken bufferedToken = _nextTokenWithBuffering(_headContext);\n                if (bufferedToken != null) {\n                    _currToken = bufferedToken;\n                    return bufferedToken;\n                }\n            }\n            break;\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                _currToken = t;\n                return t;\n            }\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                _currToken = t;\n                return t;\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            if (_includePath) {\n                JsonToken bufferedToken = _nextTokenWithBuffering(_headContext);\n                if (bufferedToken != null) {\n                    _currToken = bufferedToken;\n                    return bufferedToken;\n                }\n            }\n            break;\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            boolean returnEnd = _headContext.isStartHandled();\n            f = _headContext.getFilter();\n            if (f != null && f != TokenFilter.INCLUDE_ALL) {\n                if (t == JsonToken.END_ARRAY) {\n                    f.filterFinishArray();\n                } else if (t == JsonToken.END_OBJECT) {\n                    f.filterFinishObject();\n                }\n            }\n            _headContext = _headContext.getParent();\n            _itemFilter = _headContext.getFilter();\n            if (returnEnd) {\n                _currToken = t;\n                return t;\n            }\n            break;\n        case ID_FIELD_NAME:\n            String name = delegate.getCurrentName();\n            f = _headContext.setFieldName(name);\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _itemFilter = f;\n                if (!_includePath) {\n                    if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                        JsonToken startToken = _headContext.nextTokenToRead();\n                        if (startToken != null) {\n                            _exposedContext = _headContext;\n                            _currToken = startToken;\n                            return startToken;\n                        }\n                    }\n                }\n                _currToken = t;\n                return t;\n            }\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            f = f.includeProperty(name);\n            if (f == null) {\n                delegate.nextToken();\n                delegate.skipChildren();\n                break;\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                if (_includePath) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            if (_includePath) {\n                JsonToken bufferedToken = _nextTokenWithBuffering(_headContext);\n                if (bufferedToken != null) {\n                    _currToken = bufferedToken;\n                    return bufferedToken;\n                }\n            }\n            break;\n        default:\n            // Scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _currToken = t;\n                return t;\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if (f == TokenFilter.INCLUDE_ALL || (f != null && f.includeValue(delegate))) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n    }\n\n    // If token was not included, try to find the next one\n    return _nextToken2();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}