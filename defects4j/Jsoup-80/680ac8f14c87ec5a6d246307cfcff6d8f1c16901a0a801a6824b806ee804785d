{
    "generation": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment;\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n            String data = comment.getData();\n            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                String elementData = data.substring(1, data.length() - 1).trim();\n                // Prevent parsing if the elementData is malformed or empty\n                if (!elementData.isEmpty() && isValidXmlDeclaration(elementData)) {\n                    Document doc = Jsoup.parse(\"<\" + elementData + \">\", baseUri, Parser.xmlParser());\n                    if (!doc.children().isEmpty()) {\n                        Element el = doc.child(0);\n                        insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                        insert.attributes().addAll(el.attributes());\n                    }\n                }\n            }\n        }\n        insertNode(insert);\n    }\n\n    private boolean isValidXmlDeclaration(String data) {\n        // Simple validation to check if the XML declaration is likely to be valid\n        return data.matches(\"[a-zA-Z_:][a-zA-Z0-9\\\\-_.:]*.*\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}