{
    "generation": "/**\n * Sets the values of Options using the values in <code>properties</code>.\n *\n * @param properties The value properties to be processed.\n */\nprotected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n\n            // get the value from the properties instance\n            String value = properties.getProperty(option);\n\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                        // if we cannot add the value don't worry about it\n                    }\n                }\n            }\n            else if ((\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n                // add option only if the value is yes, true or 1\n                cmd.addOption(opt);\n                continue;\n            }\n\n            if (opt.hasOptionalArg()) {\n                // assume the option was given with optional arg = value\n                // will not add it by breaking, as no check that opt was really on CL\n                // no use for opt.addValueForProcessing() as not wanted optional argument\n                try\n                {\n                    // here to keep original parser addOption behavior with an arbitrary arg\n                    // we would not get cmd by the opt directly for parsing and processing of remaining in line CL arguments \n                    new Parser().processOption(opt.getOpt(), opt.getLongOpt().trim(), value);       \n                }\n                catch (ParseException exp)\n                {\n                }\n            }\n            if (opt.getOptionalArg()!= null && \"\".equalsIgnoreCase(value)) {\n                opt.addValueForProcessing(\"\");\n                cmd.addOption(opt);    \n            }\n            cmd.addOption(opt);                    \n        }\n    }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}