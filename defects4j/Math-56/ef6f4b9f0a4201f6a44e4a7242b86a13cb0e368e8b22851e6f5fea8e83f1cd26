{
    "generation": "/**\n * Convert to multidimensional counter.\n *\n * @param index Index in unidimensional counter.\n * @return the multidimensional counts.\n * @throws OutOfRangeException if {@code index} is not between\n * {@code 0} and the value returned by {@link #getSize()} (excluded).\n */\npublic int[] getCounts(int index) {\n    if (index < 0 || index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n\n    final int[] indices = new int[dimension];\n\n    int count = 0;\n    for (int i = 0; i < dimension; i++) {\n        final int offset = uniCounterOffset[i];\n        int idx = 0;\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n        index -= idx * offset;\n    }\n\n    return indices;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}