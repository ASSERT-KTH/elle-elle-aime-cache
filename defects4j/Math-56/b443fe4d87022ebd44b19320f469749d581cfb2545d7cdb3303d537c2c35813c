{
    "generation": "/**\n * Convert to multidimensional counter.\n *\n * @param index Index in unidimensional counter.\n * @return the multidimensional counts.\n * @throws OutOfRangeException if {@code index} is not between\n * {@code 0} and the value returned by {@link #getSize()} (excluded).\n */\npublic int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n\n    final int[] indices = new int[dimension];\n\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count + offset <= index) { // Fix: changed count <= index to count + offset <= index\n            count += offset;\n            ++idx;\n        }\n        indices[i] = idx; // Fix: removed --idx and count -= offset\n    }\n\n    int remaining = index - count;\n    indices[last] = remaining; // Fix: directly assign the remaining count to the last index\n\n    return indices;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}