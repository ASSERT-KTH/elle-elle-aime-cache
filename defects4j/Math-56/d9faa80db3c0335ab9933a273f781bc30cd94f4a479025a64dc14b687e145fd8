{
    "generation": "/**\n * Convert to multidimensional counter.\n *\n * @param index Index in unidimensional counter.\n * @return the multidimensional counts.\n * @throws OutOfRangeException if {@code index} is not between\n * {@code 0} and the value returned by {@link #getSize()} (excluded).\n */\npublic int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n\n    final int[] indices = new int[dimension];\n\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            if (count + offset <= index) {\n                count += offset;\n                ++idx;\n            } else {\n                break;\n            }\n        }\n        count -= offset * idx;\n        indices[i] = idx;\n    }\n\n    int remaining = index - count + 1;\n    for (int i = indices[last - 1] + 1; count < index; i++, count += remaining) {\n        indices[last] = remaining - 1;\n    }\n\n    return indices;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}