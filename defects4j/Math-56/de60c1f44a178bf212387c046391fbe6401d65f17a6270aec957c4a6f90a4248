{
    "generation": "/**\n * Convert to multidimensional counter.\n *\n * @param index Index in unidimensional counter.\n * @return the multidimensional counts.\n * @throws OutOfRangeException if {@code index} is not between\n * {@code 0} and the value returned by {@link #getSize()} (excluded).\n */\npublic int[] getCounts(int index) {\n    if (index < 0 || index >= getSize()) {\n        throw new OutOfRangeException(index, 0, getSize());\n    }\n\n    final int[] indices = new int[dimension];\n\n    int count = index;\n    for (int i = 0; i < dimension; i++) {\n        final int offset = i == 0 ? 1 : uniCounterOffset[i - 1];\n        while (count >= offset) {\n            indices[i]++;\n            count -= offset;\n        }\n    }\n\n    return indices;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}