{
    "generation": "@SuppressWarnings(\"unchecked\")\n@Override\npublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n    String text = p.getValueAsString();\n    if (text != null) { // has String representation\n        if (text.length() == 0 || (text = text.trim()).length() == 0) {\n            // 04-Feb-2013, tatu: Should return deserialized value from empty string, and not null\n            return _deserializeFromEmptyString(ctxt);\n        }\n        try {\n            // 19-May-2017, tatu: Allowed to return `null` as value.\n            return _deserialize(text, ctxt);\n        } catch (IllegalArgumentException iae) {\n            throwQuietly(ctxt, iae, text, _valueClass, iae.getMessage());\n        } catch (MalformedURLException me) {\n            throwQuietly(ctxt, me, text, _valueClass, me.getMessage());\n        }\n        throwWeirdStringException(ctxt, text, _valueClass, \"not a valid textual representation\");\n    }\n    // ... rest of the function ...\n}\n\nprivate void throwQuietly(DeserializationContext ctxt, Throwable cause, String text,\n                          Class<?> valueClass, String message) throws IOException {\n    String msg = \"not a valid textual representation\";\n    if (message != null) {\n        msg = msg + \", problem: \"+message;\n    }\n    JsonMappingException e = ctxt.weirdStringException(text, valueClass, msg);\n    e.initCause(cause);\n    throw e;\n}\n\nprivate void throwWeirdStringException(DeserializationContext ctxt, String text,\n                                       Class<?> valueClass, String message) throws IOException {\n    JsonMappingException e = ctxt.weirdStringException(text, valueClass, message);\n    throw e;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}