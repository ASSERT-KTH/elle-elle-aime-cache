{
    "generation": "@Override\npublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    String text = p.getValueAsString();\n    if (text != null) {\n        if (text.length() == 0 || (text = text.trim()).length() == 0) {\n            return _deserializeFromEmptyString();\n        }\n        Exception cause = null;\n        try {\n            if (_valueClass.equals(UUID.class) && !isValidUUID(text)) {\n                return null;\n            }\n            T value = _deserialize(text, ctxt);\n            if (value != null) {\n                return value;\n            }\n        } catch (IllegalArgumentException iae) {\n            cause = iae;\n        } catch (MalformedURLException me) {\n            cause = me;\n        }\n        String msg = \"not a valid textual representation\";\n        if (cause != null) {\n            String m2 = cause.getMessage();\n            if (m2 != null) {\n                msg = msg + \", problem: \" + m2;\n            }\n        }\n        JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);\n        if (cause != null) {\n            e.initCause(cause);\n        }\n        throw e;\n    }\n    JsonToken t = p.getCurrentToken();\n    // ... rest of the code...\n}\n\nprivate boolean isValidUUID(String text) {\n    try {\n        UUID.fromString(text);\n        return true;\n    } catch (IllegalArgumentException e) {\n        return false;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}