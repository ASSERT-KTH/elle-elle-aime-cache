{
    "generation": "@SuppressWarnings(\"unchecked\")\n@Override\npublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    String text = p.getValueAsString();\n    if (text != null) { \n        if (text.length() == 0 || (text = text.trim()).length() == 0) {\n            return _deserializeFromEmptyString();\n        }\n        try {\n            T result = _deserialize(text, ctxt);\n            if (result != null) {\n                return result;\n            }\n        } catch (IllegalArgumentException iae) {\n            // Handle the exception appropriately\n        } catch (MalformedURLException me) {\n            // Handle the exception appropriately\n        }\n        String msg = \"not a valid textual representation\";\n        JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);\n        throw e;\n    }\n    JsonToken t = p.getCurrentToken();\n    if (t == JsonToken.START_ARRAY) {\n        return _deserializeFromArray(p, ctxt);\n    }\n    if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n        Object ob = p.getEmbeddedObject();\n        if (ob == null) {\n            return null;\n        }\n        if (_valueClass.isAssignableFrom(ob.getClass())) {\n            return (T) ob;\n        }\n        return _deserializeEmbedded(ob, ctxt);\n    }\n    return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}