{
    "generation": "@SuppressWarnings(\"unchecked\")\n@Override\npublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    // Use new method for 2.1, may force coercion:\n    String text = p.getValueAsString();\n    if (text != null) { // has String representation\n        if (text.length() == 0 || (text = text.trim()).length() == 0) {\n            // Usually should become null; but not always\n            return _deserializeFromEmptyString();\n        }\n        try {\n            // Attempt deserialization\n            T value = _deserialize(text, ctxt);\n            if (value != null) {\n                return value;\n            }\n        } catch (IllegalArgumentException | MalformedURLException e) {\n            // If deserialization fails, handle it via ProblemHandler\n            DeserializationProblemHandler handler = ctxt.getProblemHandler();\n            if (handler != null) {\n                return handler.handleWeirdStringValue(_valueClass, text, ctxt);\n            }\n            // If no handler, throw an exception\n            String msg = \"not a valid textual representation: \" + text;\n            throw new JsonMappingException(p, msg, e);\n        }\n    }\n    JsonToken t = p.getCurrentToken();\n    if (t == JsonToken.START_ARRAY) {\n        return _deserializeFromArray(p, ctxt);\n    }\n    if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n        Object ob = p.getEmbeddedObject();\n        if (ob == null) {\n            return null;\n        }\n        if (_valueClass.isAssignableFrom(ob.getClass())) {\n            return (T) ob;\n        }\n        return _deserializeEmbedded(ob, ctxt);\n    }\n    return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}