{
    "generation": "@SuppressWarnings(\"unchecked\")\n@Override\npublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    String text = p.getValueAsString();\n    if (text != null) {\n        text = text.trim();\n        return _handleWeirdString(text, ctxt);\n    }\n    JsonToken t = p.getCurrentToken();\n    if (t == JsonToken.START_ARRAY) {\n        return _deserializeFromArray(p, ctxt);\n    }\n    if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n        Object ob = p.getEmbeddedObject();\n        if (_valueClass.isAssignableFrom(ob.getClass())) {\n            return (T) ob;\n        }\n        return _handleWeirdString(ob.toString(), ctxt);\n    }\n    return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n}\n\nprivate T _handleWeirdString(String text, DeserializationContext ctxt) throws IOException {\n    Exception cause = null;\n    try {\n        if (_deserialize(text, ctxt) != null) {\n            return _deserialize(text, ctxt);\n        }\n    } catch (IllegalArgumentException iae) {\n        cause = iae;\n    } catch (MalformedURLException me) {\n        cause = me;\n    }\n    String msg = \"not a valid textual representation\";\n    if (cause != null) {\n        String m2 = cause.getMessage();\n        if (m2 != null) {\n            msg = msg + \", problem: \" + m2;\n        }\n    }\n    JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);\n    if (cause != null) {\n        e.initCause(cause);\n    }\n    Object weirdResult = ctxt.handleWeirdStringValue(_valueClass, text, null, e);\n    if (weirdResult == null) {\n        throw e;\n    }\n    return (T) weirdResult;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}