{
    "generation": "@SuppressWarnings(\"unchecked\")\n@Override\npublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n    String text = p.getValueAsString();\n    if (text!= null) { // has String representation\n        if (text.length() == 0 || (text = text.trim()).length() == 0) {\n            // 04-Feb-2013, tatu: Usually should become null; but not always\n            return _deserializeFromEmptyString();\n        }\n        try {\n            // Attempt to deserialize directly\n            T result = _deserialize(text, ctxt);\n            if (result!= null) {\n                return result;\n            }\n            // If deserialization fails, check for a registered problem handler\n            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, \"not a valid textual representation\");\n            return ctxt.handleWeirdStringValue(_valueClass, text, e);\n        } catch (IllegalArgumentException | MalformedURLException e) {\n            // Re-throw as a JsonMappingException with additional context\n            String msg = \"not a valid textual representation, problem: \" + e.getMessage();\n            JsonMappingException me = ctxt.weirdStringException(text, _valueClass, msg);\n            me.initCause(e);\n            throw me;\n        }\n    }\n    JsonToken t = p.getCurrentToken();\n    // [databind#381]\n    if (t == JsonToken.START_ARRAY) {\n        return _deserializeFromArray(p, ctxt);\n    }\n    if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n        // Trivial cases; null to null, instance of type itself returned as is\n        Object ob = p.getEmbeddedObject();\n        if (ob == null) {\n            return null;\n        }\n        if (_valueClass.isAssignableFrom(ob.getClass())) {\n            return (T) ob;\n        }\n        return _deserializeEmbedded(ob, ctxt);\n    }\n    return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}