{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // If parent is a call to dojo.declare that includes a @lends annotation,\n      // we need to traverse the function.\n      if (parent.getType() == Token.CALL) {\n        Node caller = parent.getFirstChild();\n        if (caller.getType() == Token.GETPROP &&\n            caller.getFirstChild().getString().equals(\"dojo\") &&\n            caller.getLastChild().getString().equals(\"declare\")) {\n\n          int childrenCount = parent.getChildCount();\n          // There should be at least 3 children in a call to dojo.declare\n          // The first is 'dojo.declare', the second is the function to declare,\n          // and the third should be the object containing the @lends annotation.\n          if (childrenCount >= 3) {\n            Node lendsObject = parent.getChildAtIndex(2);\n            // If the @lends annotation is present and refers to the prototype of the function,\n            // we need to traverse the function.\n            if (lendsObject.getType() == Token.OBJECTLIT) {\n              for (Node child : lendsObject.children()) {\n                if (child.getType() == Token.STRING && child.getFirstChild().getString().contains(\"prototype\")) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}