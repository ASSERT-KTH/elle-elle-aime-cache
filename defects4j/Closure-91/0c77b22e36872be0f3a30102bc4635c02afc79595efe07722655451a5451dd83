{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n  if (n.getType() == Token.FUNCTION) {\n    // Parts of the function remain same\n\n    // Don't traverse functions that are getting assigned to a prototype property.\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Parts of the function remain same\n      } else {\n        if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node grandParent = parent.getParent();\n        if (grandParent != null && grandParent.getType() == Token.ASSIGN && NodeUtil.isGet(grandParent.getFirstChild()) && grandParent.getFirstChild().getType() == Token.GETPROP && grandParent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n\n    // Rest of the function remains the same\n\n  }\n\n  // Rest of the function remains the same\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}