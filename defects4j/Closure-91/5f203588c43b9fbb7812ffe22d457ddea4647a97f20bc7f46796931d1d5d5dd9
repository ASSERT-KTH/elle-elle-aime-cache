{
    "generation": "// Fixed version of the buggy function\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n             jsDoc.isInterface() ||\n             jsDoc.hasThisType() ||\n             jsDoc.isOverride())) {\n            return false;\n        }\n\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME ||\n              pType == Token.ASSIGN ||\n              pType == Token.STRING ||\n              pType == Token.NUMBER)) {\n            return false;\n        }\n\n        // Added check for @lends annotation\n        if (parent != null && parent.getType() == Token.CALL &&\n            parent.getFirstChild().getType() == Token.NAME &&\n            parent.getFirstChild().getString().equals(\"dojo.declare\")) {\n            Node thirdArg = parent.getChildAtIndex(2);\n            if (thirdArg.getType() == Token.OBJECTLIT) {\n                for (Node keyNode = thirdArg.getFirstChild();\n                    keyNode != null;\n                    keyNode = keyNode.getNext()) {\n                    JSDocInfo propInfo = getFieldJsDocInfo(keyNode);\n                    if (propInfo != null && propInfo.hasLendsType() &&\n                        propInfo.getLendsType().endsWith(\".prototype\")) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            if (NodeUtil.isGet(lhs)) {\n                if (lhs.getType() == Token.GETPROP &&\n                    lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n                Node llhs = lhs.getFirstChild();\n                if (llhs.getType() == Token.GETPROP &&\n                    llhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}