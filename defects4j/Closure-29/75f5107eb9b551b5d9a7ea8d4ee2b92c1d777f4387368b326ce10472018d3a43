{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore indirect references, like x.y (except x.y(), since\n    // the function referenced by y might reference 'this').\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // A call target maybe using the object as a 'this' value.\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n      // Check if the property is defined on the object literal\n      if (!isDefinedInObjectLiteral(ref, refs)) {\n        return false;\n      }\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // A var with no assignment.\n      continue;\n    }\n\n    // We're looking for object literal assignments only.\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    // Check for self-referential assignments and ES5 getters/setters\n    if (hasSelfReferenceOrGetterSetter(val, refs)) {\n      return false;\n    }\n\n    // We have found an acceptable object literal assignment. As\n    // long as there are no other assignments that mess things up,\n    // we can inline.\n    ret = true;\n  }\n  return ret;\n}\n\nprivate boolean isDefinedInObjectLiteral(Reference ref, List<Reference> allRefs) {\n  Node prop = ref.getParent();\n  String propName = prop.getString();\n  for (Reference otherRef : allRefs) {\n    Node val = otherRef.getAssignedValue();\n    if (val != null && val.isObjectLit()) {\n      for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n        if (key.getString().equals(propName)) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean hasSelfReferenceOrGetterSetter(Node objectLit, List<Reference> refs) {\n  for (Node child = objectLit.getFirstChild(); child != null; child = child.getNext()) {\n    if (child.isGetterDef() || child.isSetterDef()) {\n      return true;\n    }\n    Node childVal = child.getFirstChild();\n    for (Reference t : refs) {\n      Node refNode = t.getParent();\n      while (!NodeUtil.isStatementBlock(refNode)) {\n        if (refNode == childVal) {\n          return true;\n        }\n        refNode = refNode.getParent();\n      }\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}