{
    "generation": "/**\n * Counts the number of direct (full) references to an object.\n * Specifically we check for references of the following type:\n * <pre>\n *   x;\n *   x.fn();\n * </pre>\n */\nprivate boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<Node> assignedValues = new HashSet<>();\n  boolean hasSelfReference = false;\n\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    if (parent.isGetProp()) {\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        // A call target using the object as a 'this' value.\n        return false;\n      }\n      continue;\n    }\n\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      continue;\n    }\n\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    // Check for self-referential assignments\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        return false;\n      }\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getNode();\n        while (refNode != null) {\n          if (refNode == childVal) {\n            hasSelfReference = true;\n            break;\n          }\n          refNode = refNode.getParent();\n        }\n        if (hasSelfReference) {\n          break;\n        }\n      }\n      if (hasSelfReference) {\n        break;\n      }\n    }\n\n    if (hasSelfReference) {\n      return false;\n    }\n\n    // Check if the value has been assigned before\n    if (assignedValues.contains(val)) {\n      return false;\n    }\n    assignedValues.add(val);\n\n    // Ensure that there are no other assignments that mess things up\n    ret = true;\n  }\n\n  return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}