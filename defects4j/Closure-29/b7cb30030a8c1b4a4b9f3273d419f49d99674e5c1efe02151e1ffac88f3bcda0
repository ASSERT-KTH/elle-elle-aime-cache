{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          \n          // A call target may be using the object as a 'this' value.\n          if (gramps != null && gramps.isCall() && gramps.getFirstChild() == parent) {\n            return false;\n          }\n          continue;\n        }\n\n        // Only rewrite variable declarations or simple assignment statements.\n        if (!isVarOrAssignExprLhs(name)) {\n          return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Make sure that the value is not self-referential, i.e.,\n        // disallow assignments like x = {b: x.a}.\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n          if (child.isGetterDef() || child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n          Node childVal = child.getFirstChild();\n          if (childVal != null) {\n            for (Reference t : refs) {\n              Node refNode = t.getParent();\n              while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {\n                if (refNode == childVal) {\n                  // There's a self-referential assignment.\n                  return false;\n                }\n                refNode = refNode.getParent();\n              }\n            }\n          }\n        }\n\n        // Ensure there are no unexpected modifications to the object properties.\n        for (Reference t : refs) {\n          if (t != ref) {\n            Node otherParent = t.getParent();\n            if (otherParent.isAssign() && otherParent.getFirstChild() == t.getNode()) {\n              return false;\n            }\n          }\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n      return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}