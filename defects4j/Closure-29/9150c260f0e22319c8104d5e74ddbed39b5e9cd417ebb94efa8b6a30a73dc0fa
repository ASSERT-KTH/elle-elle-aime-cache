{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n\n      Node val = parent.getLastChild();\n      if (val.hasChildren()) {\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (refs.contains(new Reference(child, parent))) {\n            return false;\n          }\n        }\n      }\n      continue;\n    }\n\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      continue;\n    }\n\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    for (Node child = val.getFirstChild(); child != null;\n         child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        return false;\n      }\n\n      Node childVal = child.getFirstChild();\n      for (Node refNode = childVal; refNode != null; refNode = refNode.getParent()) {\n        if (NodeUtil.isStatementBlock(refNode)) {\n          break;\n        }\n\n        if (refs.contains(new Reference(refNode, refNode.getParent()))) {\n          return false;\n        }\n      }\n    }\n\n    ret = true;\n  }\n  return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}