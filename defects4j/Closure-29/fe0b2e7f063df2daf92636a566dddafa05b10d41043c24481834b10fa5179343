{
    "generation": "    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = true; // Set it to true initially, since we are checking compatibility\n\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          if (gramps.isCall() && gramps.getFirstChild() == parent) {\n            return false;\n          }\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n          return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null || !val.isObjectLit()) {  // Not an object literal assignment, not acceptable\n          continue;\n        }\n\n        // Check for self-referential assignments and ES5 getters/setters\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n          if (child.isGetterDef() || child.isSetterDef()) { // ES5 get/set not supported\n            return false;\n          }\n\n          Node childVal = child.getLastChild();\n          if (referenceListContains(refs, childVal)) { // Check if childVal is the parent of any of the passed in references\n            return false;\n          }\n        }\n\n        // If we've reached this point, that means we've checked all properties\n        // and have found them acceptable. We can can keep ret as true.\n      }\n      return ret;\n    }\n\n    private boolean referenceListContains(List<Reference> refs, Node childVal) {\n      for (Reference ref : refs) {\n        Node refNode = ref.getParent();\n        while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            return true;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}