{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n    boolean ret = false;\n\n    HashSet<Node> objectLiterals = new HashSet<>();\n\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        if (parent.isGetProp()) {\n            Preconditions.checkState(parent.getFirstChild() == name);\n            if (gramps.isCall() && gramps.getFirstChild() == parent) {\n                return false;\n            }\n            continue;\n        }\n\n        if (!isVarOrAssignExprLhs(name)) {\n            return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n            continue;\n        }\n\n        if (!val.isObjectLit()) {\n            return false;\n        }\n\n        objectLiterals.add(val);\n\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n            if (child.isGetterDef() || child.isSetterDef()) {\n                return false;\n            }\n\n            Node childVal = child.getFirstChild();\n            for (Node o : objectLiterals) {\n                if (includesSelfReference(o, childVal)) {\n                    return false;\n                }\n            }\n        }\n\n        ret = true;\n    }\n    return ret;\n}\n\nprivate boolean includesSelfReference(Node val, Node childVal) {\n    return val == childVal ||\n        (childVal.isGetProp() && includesSelfReference(val, childVal.getFirstChild()));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}