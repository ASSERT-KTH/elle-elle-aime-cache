{
    "generation": "/**\n * Counts the number of direct (full) references to an object.\n * Specifically we check for references of the following type:\n * <pre>\n *   x;\n *   x.fn();\n * </pre>\n */\nprivate boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  boolean hasMultipleAssignments = false;\n  boolean hasNonObjectLiteralAssignment = false;\n  Set<String> propertyNames = new HashSet<>();\n\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore indirect references, like x.y (except x.y(), since\n    // the function referenced by y might reference 'this').\n    //\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // A call target maybe using the object as a 'this' value.\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      }\n\n      // NOTE(nicksantos): This pass's object-splitting algorithm has\n      // a blind spot. It assumes that if a property isn't defined on an\n      // object, then the value is undefined. This is not true, because\n      // Object.prototype can have arbitrary properties on it.\n      //\n      // We short-circuit this problem by bailing out if we see a reference\n      // to a property that isn't defined on the object literal. This\n      // isn't a perfect algorithm, but it should catch most cases.\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(name)) {\n       return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // A var with no assignment.\n      continue;\n    }\n\n    // We're looking for object literal assignments only.\n    if (!val.isObjectLit()) {\n      hasNonObjectLiteralAssignment = true;\n      break;\n    }\n\n    // Track property names\n    for (Node child = val.getFirstChild(); child!= null;\n         child = child.getNext()) {\n      if (child.isGetterDef() ||\n          child.isSetterDef()) {\n        // ES5 get/set not supported.\n        return false;\n      }\n      propertyNames.add(child.getKey());\n    }\n\n    // Check for multiple assignments to the same variable\n    if (hasMultipleAssignments) {\n      // If we've already seen an assignment and now we're seeing another,\n      // and the property names don't match, we can't inline.\n      if (!propertyNames.equals(getPropertyNamesFromPreviousAssignment(refs, ref))) {\n        return false;\n      }\n    } else {\n      hasMultipleAssignments = true;\n    }\n\n    // Make sure that the value is not self-refential. IOW,\n    // disallow things like x = {b: x.a}.\n    //\n    // TODO: Only exclude unorderable self-referential\n    // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n    // but x = {a: 1, b: x.a} is.\n    //\n    for (Node child = val.getFirstChild(); child!= null;\n         child = child.getNext()) {\n      Node childVal = child.getFirstChild();\n      // Check if childVal is the parent of any of the passed in\n      // references, as that is how self-referential assignments\n      // will happen.\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            // There's a self-referential assignment\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n\n    ret = true;\n  }\n  return ret &&!hasNonObjectLiteralAssignment;\n}\n\n// Helper method to get property names from a previous assignment\nprivate Set<String> getPropertyNamesFromPreviousAssignment(List<Reference> refs, Reference currentRef) {\n  Set<String> propertyNames = new HashSet<>();\n  for (Reference ref : refs) {\n    if (ref == currentRef) {\n      break;\n    }\n    Node val = ref.getAssignedValue();\n    if (val!= null && val.isObjectLit()) {\n      for (Node child = val.getFirstChild(); child!= null;\n           child = child.getNext()) {\n        propertyNames.add(child.getKey());\n      }\n    }\n  }\n  return propertyNames;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}