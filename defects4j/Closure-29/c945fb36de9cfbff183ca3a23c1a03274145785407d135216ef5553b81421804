{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  // Track assignments to ensure only one object literal assignment\n  boolean hasSingleAssignment = true;\n  Node firstAssignment = null;\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node grandparent = ref.getGrandparent();\n\n    // Ignore indirect references, like x.y, except for calls like x.y()\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (grandparent.isCall() && grandparent.getFirstChild() == parent) {\n        return false; // Method calls involving 'this' are not inlineable\n      }\n      continue; // Skip indirect references\n    }\n\n    // Only consider VAR declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(name)) {\n      return false; // Invalid assignment context\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      continue; // Var with no assignment\n    }\n\n    // Must be assigned an object literal\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    // Check for self-referential assignments\n    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        return false; // ES5 get/set not supported\n      }\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            // Self-referential assignment detected\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n\n    // Ensure only one assignment with an object literal\n    if (firstAssignment == null) {\n      firstAssignment = val;\n    } else if (!firstAssignment.equals(val)) {\n      hasSingleAssignment = false;\n      break;\n    }\n  }\n\n  // If there are multiple assignments, ensure they are all to the same object literal\n  return hasSingleAssignment;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}