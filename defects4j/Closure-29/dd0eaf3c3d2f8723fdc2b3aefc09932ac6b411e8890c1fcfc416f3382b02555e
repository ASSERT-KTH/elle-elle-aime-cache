{
    "generation": "    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      Map<String, Node> inlineCandidates = new HashMap<>();\n      \n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target maybe using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            return false;\n          }\n          continue;\n        }\n\n        // Allow more types of assignments\n        if (!isVarOrAssignExprLhs(name) && !NodeUtil.isNameDeclaration(name)) {\n          return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment or reassignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          if (ret) {\n            return false; // If we've already found an inline candidate, this is not inlinable\n          }\n          continue;\n        }\n\n        // Check for self-referential assignments\n        boolean selfReferential = false;\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n          if (child.isGetterDef() || child.isSetterDef()) {\n            return false; // ES5 get/set not supported\n          }\n\n          Node childVal = child.getFirstChild();\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                selfReferential = true;\n                break;\n              }\n              refNode = refNode.getParent();\n            }\n            if (selfReferential) break;\n          }\n          if (selfReferential) break;\n        }\n\n        if (selfReferential) {\n          if (ret) {\n            return false; // If we've already found an inline candidate, this is not inlinable\n          }\n          continue;\n        }\n\n        // Check if this object literal can be inlined\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n          String key = child.getString();\n          if (inlineCandidates.containsKey(key)) {\n            return false; // Duplicate key, cannot inline\n          }\n          inlineCandidates.put(key, child.getFirstChild());\n        }\n\n        // We have found an acceptable object literal assignment\n        ret = true;\n      }\n      \n      return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}