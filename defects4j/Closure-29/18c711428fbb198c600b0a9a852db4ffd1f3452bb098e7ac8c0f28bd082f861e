{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore indirect references, like x.y or x.y().\n    if (parent.isGetProp()) {\n      if (parent.getFirstChild() == name) {\n        if (gramps.isCall() && gramps.getFirstChild() == parent) {\n          return false;\n        }\n\n        // Check for indirect references via past references or a prototype.\n        if (isIndirectReference(ref, refs)) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    // Check for object literal assignments\n    Node val = ref.getAssignedValue();\n    if (val == null || !val.isObjectLit()) {\n      return false;\n    }\n\n    // Make sure that the value is not self-referential (exclude unorderable self-referential assignments).\n    if (!isValueSelfReferential(val, refs)) {\n      ret = true;\n    } else {\n      return false;\n    }\n  }\n  return ret;\n}\n\n// Check if the childValue is an indirect reference (past reference or a prototype).\nprivate boolean isIndirectReference(Reference ref, List<Reference> refs) {\n  Node parent = ref.getParent();\n  Node childValue = parent.getLastChild();\n  for (Reference t : refs) {\n    Node refNode = t.getParent();\n    while (!NodeUtil.isStatementBlock(refNode)) {\n      if (refNode == childValue && refNode != ref.getNode()) {\n        return true;\n      }\n      refNode = refNode.getParent();\n    }\n  }\n  return false;\n}\n\n// Check if the value is self-referential by using a depth-first search.\nprivate boolean isValueSelfReferential(Node value, List<Reference> refs, Set<Node> visited) {\n  if (visited.contains(value)) {\n    return false;\n  }\n  visited.add(value);\n\n  for (Node child = value.getFirstChild(); child != null; child = child.getNext()) {\n    if (child.isGetterDef() || child.isSetterDef()) {\n      return false;\n    }\n\n    Node childVal = child.getFirstChild();\n    for (Reference t : refs) {\n      Node refNode = t.getParent();\n      if (refNode == childVal && isAncestorOfCircularReference(t, value)) {\n        return true;\n      }\n    }\n\n    if (isValueSelfReferential(childVal, refs, visited)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// Check if the node is an ancestor of a circular reference.\nprivate boolean isAncestorOfCircularReference(Reference ref, Node value) {\n  Node refNode = ref.getParent();\n  while (refNode != null) {\n    if (refNode == value) {\n      return true;\n    }\n    refNode = refNode.getParent();\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}