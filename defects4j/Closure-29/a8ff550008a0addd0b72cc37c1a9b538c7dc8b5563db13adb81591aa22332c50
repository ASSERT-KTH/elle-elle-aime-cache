{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n    boolean ret = true;\n    Set<Node> assignedNodes = new HashSet<>();\n    Set<String> assignedNames = new HashSet<>();\n\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        if (parent.isGetProp()) {\n            Preconditions.checkState(parent.getFirstChild() == name);\n            // A call target maybe using the object as a 'this' value.\n            if (gramps.isCall() && gramps.getFirstChild() == parent) {\n                return false;\n            }\n            continue;\n        }\n\n        // Only consider VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n            return false;\n        }\n\n        String nameString = name.getString();\n        if (assignedNames.contains(nameString)) {\n            // If the variable is assigned more than once, we cannot inline it.\n            return false;\n        }\n        assignedNames.add(nameString);\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n            // A var with no assignment.\n            continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n            return false;\n        }\n\n        // Make sure that the value is not self-refential. IOW,\n        // disallow things like x = {b: x.a}.\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n            if (child.isGetterDef() || child.isSetterDef()) {\n                // ES5 get/set not supported.\n                return false;\n            }\n\n            Node childVal = child.getSecondChild();\n            // Check if childVal is the parent of any of the passed in\n            // references, as that is how self-referential assignments\n            // will happen.\n            for (Reference t : refs) {\n                Node refNode = t.getParent();\n                while (!NodeUtil.isStatementBlock(refNode)) {\n                    if (refNode == childVal) {\n                        // There's a self-referential assignment\n                        return false;\n                    }\n                    refNode = refNode.getParent();\n                }\n            }\n        }\n\n        assignedNodes.add(val);\n    }\n\n    // We have found an acceptable object literal assignment. As\n    // long as there are no other assignments that mess things up,\n    // we can inline.\n    return ret && assignedNodes.size() == 1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}