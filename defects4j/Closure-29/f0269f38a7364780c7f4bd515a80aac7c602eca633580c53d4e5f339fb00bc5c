{
    "generation": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore indirect references, like x.y (except x.y(), since\n    // the function referenced by y might reference 'this').\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // A call target maybe using the object as a 'this' value.\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n      // Check if the property is defined on the object literal\n      if (!isDefinedInObjectLit(name.getString(), ref.getAssignedValue())) {\n        return false;\n      }\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // A var with no assignment.\n      continue;\n    }\n\n    // We're looking for object literal assignments only.\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    // Check for self-referential assignments\n    if (isSelfReferential(val, refs)) {\n      return false;\n    }\n\n    // We have found an acceptable object literal assignment. As\n    // long as there are no other assignments that mess things up,\n    // we can inline.\n    ret = true;\n  }\n  return ret;\n}\n\nprivate boolean isDefinedInObjectLit(String prop, Node objectLit) {\n  if (objectLit == null || !objectLit.isObjectLit()) {\n    return false;\n  }\n  for (Node key = objectLit.getFirstChild(); key != null; key = key.getNext()) {\n    if (key.getString().equals(prop)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nprivate boolean isSelfReferential(Node val, List<Reference> refs) {\n  for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n    if (child.isGetterDef() || child.isSetterDef()) {\n      // ES5 get/set not supported.\n      return true;\n    }\n    Node childVal = child.getFirstChild();\n    for (Reference t : refs) {\n      Node refNode = t.getParent();\n      while (!NodeUtil.isStatementBlock(refNode)) {\n        if (refNode == childVal) {\n          // There's a self-referential assignment\n          return true;\n        }\n        refNode = refNode.getParent();\n      }\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}