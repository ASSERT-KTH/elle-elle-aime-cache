{
    "generation": "private boolean isInlinableObject(List<Reference> refs, Node objectLiteral) {\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        if (parent.isGetProp()) {\n            Preconditions.checkState(parent.getFirstChild() == name);\n\n            if (gramps.isCall() && gramps.getFirstChild() == parent) {\n                return false;\n            }\n\n            if (!hasOwnPropertyBarringConstructors(objectLiteral, name)) {\n                return false;\n            }\n            continue;\n        }\n\n        if (!isVarOrAssignExprLhs(name)) {\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n            continue;\n        }\n\n        if (!val.isObjectLit()) {\n            return false;\n        }\n\n        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n            if (child.isGetterDef() || child.isSetterDef()) {\n                return false;\n            }\n\n            Node childVal = child.getFirstChild();\n            for (Reference t : refs) {\n                Node refNode = t.getParent();\n                while (!NodeUtil.isStatementBlock(refNode)) {\n                    if (refNode == childVal) {\n                        return false;\n                    }\n                    refNode = refNode.getParent();\n                }\n            }\n        }\n    }\n    return true;\n}\n\nprivate boolean hasOwnPropertyBarringConstructors(Node obj, Node property) {\n    if (obj.hasChildren()) {\n        for (Node child = obj.getFirstChild(); child != null; child = child.getNext()) {\n            if (child.isStringKey() && child.getString().equals(property.getString())) {\n                return true;\n            }\n        }\n    }\n\n    return hasOwnPrototypeProperty(obj, property);\n}\n\nprivate boolean hasOwnPrototypeProperty(Node obj, Node property) {\n    Node prototype = Node.newString(\"prototype\");\n\n    if (obj.isGetProp() && obj.getFirstChild().isName() && obj.getFirstChild().getString().equals(\"Object\")) {\n        return referenceHasPrototypeProperty(property);\n    }\n\n    Node parentObject = obj.getParent();\n    if (!parentObject.isGetProp() || parentObject.getLastChild() != obj) {\n        return false;\n    }\n\n    Node parentObjectName = parentObject.getFirstChild();\n    if (parentObjectName.isName() && parentObjectName.getString().equals(\"Object\")) {\n        return referenceHasPrototypeProperty(property);\n    }\n\n    return hasOwnPrototypeProperty(parentObject, prototype) && hasOwnPropertyBarringConstructors(parentObjectName, property);\n}\n\nprivate boolean referenceHasPrototypeProperty(Node property) {\n    // Check if the property is defined on Object.prototype\n    // To prevent code explosion, assume all properties are defined if the referenced name is not a simple name.\n    if (property.isName()) {\n        String propName = property.getString();\n        try {\n            Object.class.getField(propName);\n        } catch (NoSuchFieldException e) {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}