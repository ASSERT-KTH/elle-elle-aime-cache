{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n\n            // Check for special handling first; shape, pattern, timezone or locale\n            final String pattern = format.hasPattern()\n                   ? format.getPattern()\n                    : (format.getShape() == JsonFormat.Shape.STRING?\n                            StdDateFormat.DATE_FORMAT_STR_ISO8601 :\n                            null);\n            if (pattern!= null\n                    || format.getTimeZone()!= null\n                    || format.hasLocale())\n            {\n                TimeZone tz = format.getTimeZone();\n                final Locale loc = format.hasLocale()\n                       ? format.getLocale()\n                        : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n            // Simple case; shape explicitly set as NUMERIC or STRING?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING) {\n                // Will default to using date default pattern (ISO-8601), timezone of owner\n                return withFormat(Boolean.FALSE, new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601,\n                        serializers.getLocale()));\n            }\n        }\n        // If we get this far, it means shape = JsonFormat.Shape.ANY; hence\n        return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n               ? withFormat(Boolean.TRUE, null)\n                : new StdDateFormat();\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}