{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property != null) {\n            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n            if (format != null) {\n\n                // Simple case first: serialize as numeric timestamp?\n                JsonFormat.Shape shape = format.getShape();\n                if (shape == JsonFormat.Shape.NUMBER || shape == JsonFormat.Shape.NUMBER_INT || shape == JsonFormat.Shape.NUMBER_FLOAT) {\n                    return withFormat(Boolean.TRUE, null);\n                }\n\n                // Handle STRING shape or ANY shape with pattern, locale, or timezone\n                if (shape == JsonFormat.Shape.STRING || \n                    (shape == JsonFormat.Shape.ANY && (format.hasPattern() || format.hasLocale() || format.hasTimeZone()))) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc = format.hasLocale()\n                                    ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                }\n            }\n        }\n\n        // If no format was found or no specific shape was set, use the global configuration\n        boolean useTimestamp = serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        return withFormat(useTimestamp, null);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}