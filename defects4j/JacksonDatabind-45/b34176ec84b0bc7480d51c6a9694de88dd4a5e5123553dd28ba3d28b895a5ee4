{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape!= JsonFormat.Shape.ANY) { // Check for explicit shape\n                if (shape.isNumeric()) {\n                    return withFormat(Boolean.TRUE, null);\n                } else if (shape == JsonFormat.Shape.STRING) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                   ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc = format.hasLocale()\n                                   ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                }\n            } else { // JsonFormat.Shape.ANY, infer shape from other properties or use default\n                if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                   ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                    final Locale loc = format.hasLocale()\n                                   ? format.getLocale()\n                                    : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n                        tz = serializers.getTimeZone();\n                    }\n                    df.setTimeZone(tz);\n                    return withFormat(Boolean.FALSE, df);\n                } else { // Fall back to default shape based on SerializationFeature.WRITE_DATES_AS_TIMESTAMPS\n                    return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n                           ? withFormat(Boolean.TRUE, null)\n                            : withFormat(Boolean.FALSE, new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, serializers.getLocale()));\n                }\n            }\n        } else { // No @JsonFormat, use default shape based on SerializationFeature.WRITE_DATES_AS_TIMESTAMPS\n            return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n                   ? withFormat(Boolean.TRUE, null)\n                    : withFormat(Boolean.FALSE, new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, serializers.getLocale()));\n        }\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}