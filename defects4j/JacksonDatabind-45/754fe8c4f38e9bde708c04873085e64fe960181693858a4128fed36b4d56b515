{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format != null) {\n            // Check if shape is explicitly set, pattern or locale or timezone is set.\n            if (format.hasShape() && format.getShape().isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            } else if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {\n                // If shape is not explicitly set and either pattern or locale or timezone is set, set shape to STRING.\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern()\n                                ? format.getPattern()\n                                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale()\n                                ? format.getLocale()\n                                : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n            // If shape is not explicitly set and neither pattern nor locale nor timezone is set, use user's configuration.\n            else {\n                return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n                        ? withFormat(Boolean.TRUE, null)\n                        : withFormat(Boolean.FALSE, new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, serializers.getLocale()));\n            }\n        }\n    }\n    // If format is null, use user's configuration.\n    return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n            ? withFormat(Boolean.TRUE, null)\n            : withFormat(Boolean.FALSE, new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, serializers.getLocale()));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}