{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n                                          BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat(property.getMember());\n        if (format != null) {\n            JsonFormat.Shape shape = format.getShape();\n            // Determine if serialization should be as a numeric timestamp\n            if (shape == JsonFormat.Shape.NUMBER || shape == JsonFormat.Shape.NUMBER_FLOAT || shape == JsonFormat.Shape.NUMBER_INT) {\n                return withFormat(Boolean.TRUE, null);\n            } else if (shape == JsonFormat.Shape.STRING) {\n                TimeZone tz = format.getTimeZone();\n                String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    // Fallback to user config if no explicit format is provided\n    boolean asTimestamp = serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n    if (asTimestamp) {\n        return withFormat(Boolean.TRUE, null);\n    } else {\n        SimpleDateFormat df = new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, serializers.getLocale());\n        df.setTimeZone(serializers.getTimeZone());\n        return withFormat(Boolean.FALSE, df);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}