{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING || shape == JsonFormat.Shape.ANY) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern()\n                               ? format.getPattern()\n                                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale()\n                               ? format.getLocale()\n                                : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n            // If no shape or pattern specified, check settings\n            if (!format.hasPattern() && (format.getShape() == JsonFormat.Shape.ANY || format.getShape() == null)) {\n                if (serializers.getActiveView() == null ||!serializers.getConfig().isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n                    final Locale loc = format.hasLocale()\n                                   ? format.getLocale()\n                                    : serializers.getLocale();\n                    return withFormat(Boolean.FALSE, new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, loc));\n                }\n            }\n        } else {\n            // Not explicitly specified, use \"default\" behavior: return numeric if feature enabled otherwise return string\n            return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)?\n                    withFormat(Boolean.TRUE, null) :\n                    withFormat(Boolean.FALSE, new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, serializers.getLocale()));\n        }\n    }\n    // No format, or if no property given\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}