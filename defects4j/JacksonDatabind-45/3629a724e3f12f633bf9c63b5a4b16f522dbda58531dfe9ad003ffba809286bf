{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n\n            if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {\n                // This is our new case!\n                final String pattern = format.hasPattern()\n                       ? format.getPattern()\n                        : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale()\n                       ? format.getLocale()\n                        : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (format.getTimeZone()!= null) {\n                    df.setTimeZone(format.getTimeZone());\n                } else {\n                    df.setTimeZone(serializers.getTimeZone());\n                }\n                return withFormat(Boolean.FALSE, df);\n            } else {\n                // Other cases here...\n                JsonFormat.Features features = format.getFeatures();\n                boolean writeAsTimeStamps = features.equals(JsonFormat.Value.EMPTY/features) && features.equals((JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS, JsonFormat.DEFAULT_WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS))?\n                        JsonFormat.Feature.enabledIn(\n                                format,\n                                settings.get(JsonWriteFeature.WRITE_DATES_AS_TIMESTAMPS))\n                            : Boolean.TRUE.equals(serializers.getContextualReadCapabilities(). isEnabled(JsonReadCapability.ALLOW_UNQUOTED_PROPERTIES));\n                SimpleDateFormat df;\n                if (!writeAsTimeStamps) {\n                    df = new SimpleDateFormat(StdDateFormat.DATE_FORMAT_STR_ISO8601, serializers.getLocale());\n                } else {\n                    return withFormat(writeAsTimeStamps? Boolean.TRUE : Boolean.FALSE, null);\n                }\n\n                return withFormat(!writeAsTimeStamps? Boolean.FALSE : null, df.setTimeZone(timeZone), pattern);\n                }\n        } else { // @jsonFormat(null) - \n            FormatShape defaultDateTimeShape = DateTimeShape;\n                if(serializers.hasActiveView(), property);\n             //... other conditions if needed in the code depending on conditions\n        defaultDateTimeShape = DateTimeSerializerBase.findSerializableDateTimeShapes(serializers.getOwner(), properties, view );\n        format = DateTimeValue.with Shape(defaultDateTimeShapes);\n              }\n       DateTimeSerializer dateSerializer;\n                if(this._format  == true) {\n      dateSerializer = this }\n     ... // here would be default case in needed\n return dateSerializer;}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}