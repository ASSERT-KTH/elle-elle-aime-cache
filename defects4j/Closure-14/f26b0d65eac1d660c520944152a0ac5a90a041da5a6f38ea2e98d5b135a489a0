{
    "generation": "private static Node computeFollowNode(\n    Node fromNode, Node node, ControlFlowAnalysis cfa) {\n  Node parent = node.getParent();\n  if (parent == null || parent.isFunction() ||\n      (cfa != null && node == cfa.root)) {\n    return null;\n  }\n\n  switch (parent.getType()) {\n    case Token.IF:\n      return computeFollowNode(fromNode, parent, cfa);\n\n    case Token.CASE:\n    case Token.DEFAULT_CASE:\n      if (parent.getNext() != null) {\n        if (parent.getNext().isCase()) {\n          return parent.getNext().getFirstChild().getNext();\n        } else if (parent.getNext().isDefaultCase()) {\n          return parent.getNext().getFirstChild();\n        } else {\n          Preconditions.checkState(false, \"Not reachable\");\n        }\n      } else {\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n      break;\n\n    case Token.FOR:\n      if (NodeUtil.isForIn(parent)) {\n        return parent;\n      } else {\n        return parent.getFirstChild().getNext().getNext();\n      }\n\n    case Token.WHILE:\n    case Token.DO:\n      return parent;\n\n    case Token.TRY:\n      if (parent.getFirstChild() == node) { // Coming out of TRY block\n        if (NodeUtil.hasFinally(parent)) {\n          Node finallyBlock = parent.getLastChild();\n          connectToFinally(fromNode, cfa, finallyBlock);\n          return computeFallThrough(finallyBlock);\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      } else if (NodeUtil.getCatchBlock(parent) == node) { // Coming out of CATCH block\n        if (NodeUtil.hasFinally(parent)) {\n          Node finallyBlock = parent.getLastChild();\n          connectToFinally(fromNode, cfa, finallyBlock);\n          return computeFallThrough(finallyBlock);\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      } else if (parent.getLastChild() == node) { // Coming out of FINALLY block\n        connectToFinally(fromNode, cfa, parent);\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n  }\n\n  // Handle siblings\n  Node nextSibling = node.getNext();\n  while (nextSibling != null && nextSibling.isFunction()) {\n    nextSibling = nextSibling.getNext();\n  }\n\n  if (nextSibling != null) {\n    return computeFallThrough(nextSibling);\n  } else {\n    return computeFollowNode(fromNode, parent, cfa);\n  }\n}\n\nprivate static void connectToFinally(Node fromNode, ControlFlowAnalysis cfa, Node tryNode) {\n  if (cfa != null) {\n    for (Node finallyNode : cfa.finallyMap.get(tryNode)) {\n      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}