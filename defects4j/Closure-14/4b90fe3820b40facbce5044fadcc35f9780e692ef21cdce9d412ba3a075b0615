{
    "generation": "/**\n * Computes the follow() node of a given node and its parent. There is a side effect when calling this function. If this\n * function computed an edge that exists a FINALLY, it'll attempt to connect the fromNode to the outer FINALLY according\n * to the finallyMap.\n *\n * @param fromNode The original source node since {@code node} is changed during recursion.\n * @param node The node that follow() should compute.\n */\nprivate static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    Node parent = node.getParent();\n    if (parent == null || (node == cfa.root && !node.isFunction())) {\n        return null;\n    }\n\n    switch (parent.getType()) {\n        case Token.IF:\n        case Token.CASE:\n        case Token.DEFAULT_CASE:\n        case Token.WHILE:\n        case Token.DO:\n            return computeFollowNode(fromNode, parent, cfa);\n        case Token.FOR:\n            if (NodeUtil.isForIn(parent)) {\n                return parent;\n            } else {\n                return parent.getFirstChild().getNext().getNext();\n            }\n        case Token.TRY:\n            if (parent.getFirstChild() == node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    addFinallyEdge(fromNode, parent, cfa);\n                }\n                return computeFollowNode(fromNode, parent, cfa);\n            } else if (NodeUtil.getCatchBlock(parent) == node) {\n                if (NodeUtil.hasFinally(parent)) {\n                    addFinallyEdge(fromNode, node.getNext(), cfa);\n                }\n                return computeFollowNode(fromNode, parent, cfa);\n            } else if (parent.getLastChild() == node) {\n                return computeFollowNode(fromNode, parent, cfa);\n            }\n            break;\n    }\n\n    Node nextSibling = node.getNext();\n    while (nextSibling != null && nextSibling.isFunction()) {\n        nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n        return computeFallThrough(nextSibling);\n    } else {\n        return computeFollowNode(fromNode, parent, cfa);\n    }\n}\n\nprivate static void addFinallyEdge(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    if (cfa != null) {\n        for (Node finallyNode : cfa.finallyMap.get(node)) {\n            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}