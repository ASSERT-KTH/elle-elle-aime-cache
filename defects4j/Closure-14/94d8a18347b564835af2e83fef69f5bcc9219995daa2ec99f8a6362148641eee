{
    "generation": "  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() ||\n        (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    switch (parent.getToken()) { // Updated to getToken() since getType() is deprecated\n      case IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case CASE:\n      case DEFAULT_CASE:\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase() || parent.getNext().isDefaultCase()) {\n            return computeFallThrough(parent.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      case FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          return parent.getSecondChild().getNext(); // get the third child directly\n        }\n      case WHILE:\n      case DO:\n        return parent;\n      case TRY:\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) {\n            return computeFallThrough(parent.getLastChild());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        } else if (NodeUtil.getCatchBlock(parent) == node) {\n          if (NodeUtil.hasFinally(parent)) {\n            return computeFallThrough(node.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        } else if (parent.getLastChild() == node) {\n          if (cfa != null && cfa.finallyMap.containsKey(parent)) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n    }\n\n    Node nextSibling = node.getNext();\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      return computeFallThrough(nextSibling);\n    } else {\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}