{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP) {\n    // We want to exclude the assignment itself from the usage list\n    boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;\n\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        Node ancestor = n.getFirstChild();\n\n        // Check for alias chain\n        while (ancestor.getType() == Token.GETPROP) {\n          if (ancestor.getFirstChild().getNext().getType() == Token.STRING &&\n              ancestor.getFirstChild().getNext().getString().equals(\"prototype\")) {\n            return true;\n          }\n          ancestor = ancestor.getFirstChild();\n        }\n      }\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}