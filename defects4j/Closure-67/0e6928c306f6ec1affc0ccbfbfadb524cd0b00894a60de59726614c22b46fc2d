{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {\n    if (n.getType() == Token.GETPROP) {\n      // We want to exclude the assignment itself from the usage list\n      boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;\n\n      if (isChainedProperty) {\n        Node child = n.getFirstChild().getFirstChild().getNext();\n\n        if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) {\n          return true;\n        }\n      }\n    } else if (n.getType() == Token.GETELEM && n.getFirstChild().getType() == Token.GETPROP) {\n      // To account for the test environment: `e.prototype['alias1'] = ...`\n      Node grandchild = n.getFirstChild().getFirstChild().getNext();\n\n      if (grandchild.getType() == Token.STRING && grandchild.getString().equals(\"prototype\")) {\n        return true;\n      }\n     }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}