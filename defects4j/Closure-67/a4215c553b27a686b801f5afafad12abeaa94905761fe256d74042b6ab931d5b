{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP) {\n    // We want to exclude the assignment itself from the usage list\n    boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;\n\n    if (isChainedProperty) {\n      Node base = n.getFirstChild();\n      Node property = base.getFirstChild().getNext();\n\n      if (property.getType() == Token.STRING && property.getString().equals(\"prototype\")) {\n        return true;\n      }\n\n      // Check for string key assignments to prototype\n      Node key = n.getLastChild();\n      if (key.getType() == Token.STRING && base.getLastChild().getType() == Token.STRING\n          && base.getLastChild().getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}