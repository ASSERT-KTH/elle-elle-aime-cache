{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP) {\n    // We want to exclude the assignment itself from the usage list\n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    } else {\n      Node parent = n.getFirstChild();\n      if (parent.getType() == Token.NAME) {\n        Node grandparent = assign.getParent();\n        if (grandparent.getType() == Token.ASSIGN) {\n          Node rhs = grandparent.getLastChild();\n          if (rhs.getType() == Token.GETPROP) {\n            Node rhsParent = rhs.getFirstChild();\n            if (rhsParent.getType() == Token.NAME &&\n                rhsParent.getString().equals(parent.getString())) {\n              Node rhsGrandparent = rhsParent.getParent();\n              if (rhsGrandparent.getType() == Token.GETPROP) {\n                Node rhsGreatGrandparent = rhsGrandparent.getParent();\n                if (rhsGreatGrandparent.getType() == Token.ASSIGN) {\n                  Node rhsGGGParent = rhsGreatGrandparent.getParent();\n                  if (rhsGGGParent.getType() == Token.EXPR_RESULT) {\n                    Node rhsGGGGParent = rhsGGGParent.getParent();\n                    if (rhsGGGGParent.getType() == Token.BLOCK) {\n                      Node stringNode = rhsGrandparent.getLastChild();\n                      if (stringNode.getType() == Token.STRING &&\n                          stringNode.getString().equals(\"prototype\")) {\n                        return true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}