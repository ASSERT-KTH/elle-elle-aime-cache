{
    "generation": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node lhs = assign.getFirstChild();\n  if (lhs != null && NodeUtil.isVarOrSimpleAssignLhs(lhs, assign) && lhs.getType() == Token.GETPROP) {\n    // We want to exclude the assignment itself from the usage list\n    boolean isChainedProperty = lhs.getFirstChild().getType() == Token.GETPROP;\n\n    if (isChainedProperty) {\n      Node propNode = lhs.getFirstChild().getFirstChild().getNext();\n      if (propNode.getType() == Token.STRING && propNode.getString().equals(\"prototype\")) {\n        return true;\n      }\n    } else {\n      // Check for aliased assignments\n      Node current = lhs;\n      while (current != null && current.getType() == Token.GETPROP) {\n        Node propNode = current.getFirstChild().getNext();\n        if (propNode.getType() == Token.STRING && propNode.getString().equals(\"prototype\")) {\n          return true;\n        }\n        current = current.getNext();\n      }\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}