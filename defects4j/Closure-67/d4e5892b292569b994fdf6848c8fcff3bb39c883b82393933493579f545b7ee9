{
    "generation": "/**\n * Checks if the assignment is to a property of a prototype object.\n * \n * @param assign the assignment node to check\n * @return true if the assignment is to a prototype property, false otherwise\n */\nprivate boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP) {\n    // Traverse up the GETPROP chain to find the root object\n    Node root = n;\n    while (root.getFirstChild()!= null && root.getFirstChild().getType() == Token.GETPROP) {\n      root = root.getFirstChild();\n    }\n    \n    // Check if the root object is 'prototype'\n    if (root.getFirstChild().getString().equals(\"prototype\")) {\n      return true;\n    }\n    \n    // If not, check if any intermediate property in the chain is 'prototype'\n    Node current = n;\n    while (current.getType() == Token.GETPROP) {\n      if (current.getString().equals(\"prototype\")) {\n        return true;\n      }\n      current = current.getFirstChild();\n    }\n  }\n  \n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}