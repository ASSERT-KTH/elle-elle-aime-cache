{
    "generation": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP\n          ) {\n        // We want to exclude the assignment itself from the usage list\n        Node firstChild = n.getFirstChild();\n        \n        // Handle direct prototype property\n        if (firstChild.getType() == Token.GETPROP) {\n          Node child = firstChild.getFirstChild().getNext();\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n        \n        // Handle array-style prototype property\n        Node lastChild = n.getLastChild();\n        if (firstChild.getType() == Token.NAME && \n            lastChild.getType() == Token.STRING &&\n            lastChild.getString().equals(\"prototype\")) {\n          return true;\n        }\n      }\n\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}