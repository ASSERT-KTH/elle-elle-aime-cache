{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    }\n\n    // Create a default representation\n    String defaultRepr = forAnnotations ? \"?\" : \"{}\";\n\n    // If we're pretty printing and not recursively\n    if (prettyPrint) {\n        prettyPrint = false;\n\n        // Get property names in a sorted set\n        Set<String> propertyNames = Sets.newTreeSet();\n        Set<ObjectType> visited = new HashSet<>();\n        for (ObjectType current = this;\n             current != null && !current.isNativeObjectType() && !visited.contains(current);\n             current = current.getImplicitPrototype()) {\n            visited.add(current);\n            propertyNames.addAll(current.getOwnPropertyNames());\n            if (propertyNames.size() >= MAX_PRETTY_PRINTED_PROPERTIES) {\n                break;\n            }\n        }\n\n        // Build the string representation\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n\n        int i = 0;\n        for (String property : propertyNames) {\n            if (i > 0) {\n                sb.append(\", \");\n            }\n\n            sb.append(property);\n            sb.append(\": \");\n\n            JSType propertyType = getPropertyType(property);\n            if (propertyType.equals(this)) {\n                sb.append(defaultRepr);\n            } else {\n                sb.append(propertyType.toStringHelper(forAnnotations));\n            }\n\n            ++i;\n            if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n                sb.append(\", ...\");\n                break;\n            }\n        }\n\n        sb.append(\"}\");\n\n        prettyPrint = true;\n        return sb.toString();\n    } else {\n        return defaultRepr;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}