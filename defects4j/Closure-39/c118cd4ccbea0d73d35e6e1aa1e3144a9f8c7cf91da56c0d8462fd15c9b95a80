{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n    boolean originalPrettyPrint = prettyPrint;\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else if (prettyPrint && !reentrantPrettyPrint) {\n        // Don't pretty print recursively.\n        reentrantPrettyPrint = true;\n        // Use a tree set so that the properties are sorted.\n        Set<String> propertyNames = new TreeSet<>();\n        for (ObjectType current = this;\n             current != null && !current.isNativeObjectType() &&\n             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n             current = current.getImplicitPrototype()) {\n            propertyNames.addAll(current.getOwnPropertyNames());\n        }\n\n        prettyPrint = false;\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        int i = 0;\n        for (String property : propertyNames) {\n            if (i > 0) {\n                sb.append(\", \");\n            }\n            sb.append(property);\n            sb.append(\": \");\n            sb.append(forAnnotations\n                      ? getPropertyType(property).toAnnotationString()\n                      : getPropertyType(property).toString());\n            ++i;\n            if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n                sb.append(\", ...\");\n                break;\n            }\n        }\n        sb.append(\"}\");\n        reentrantPrettyPrint = false;\n        prettyPrint = originalPrettyPrint;\n        return sb.toString();\n    } else {\n        return forAnnotations ? \"{...}\" : \"Object\";\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}