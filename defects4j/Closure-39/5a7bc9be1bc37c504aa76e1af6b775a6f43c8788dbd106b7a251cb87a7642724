{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else if (prettyPrint) {\n        // Don't pretty print recursively.\n        prettyPrint = false;\n\n        // Use a tree set so that the properties are sorted.\n        Set<String> propertyNames = Sets.newTreeSet();\n        for (ObjectType current = this;\n             current != null && !current.isNativeObjectType();\n             current = current.getImplicitPrototype()) {\n            propertyNames.addAll(current.getOwnPropertyNames());\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n\n        int i = 0;\n        for (String property : propertyNames) {\n            if (!forAnnotations && i >= MAX_PRETTY_PRINTED_PROPERTIES) {\n                sb.append(\", ...\");\n                break;\n            }\n\n            if (i > 0) {\n                sb.append(\", \");\n            }\n\n            sb.append(property);\n            sb.append(\": \");\n            if (!forAnnotations && isPropertyTypeRecursive(property)) {\n                sb.append(\"{...}\");\n            } else {\n                sb.append(getPropertyType(property).toString(forAnnotations));\n            }\n\n            ++i;\n        }\n\n        sb.append(\"}\");\n\n        prettyPrint = true;\n        return sb.toString();\n    } else {\n        return \"{...}\";\n    }\n}\n\n/**\n * Helper method to determine if a property's type is recursive.\n */\nprivate boolean isPropertyTypeRecursive(String property) {\n    JSType propertyType = getPropertyType(property);\n    return propertyType != null && propertyType.isEquivalentTo(this);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}