{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else if (prettyPrint) {\n        // Don't pretty print recursively.\n        prettyPrint = false;\n\n        // Use a tree set so that the properties are sorted.\n        Set<String> propertyNames = Sets.newTreeSet();\n        for (ObjectType current = this;\n             current!= null &&!current.isNativeObjectType() &&\n                 propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n             current = current.getImplicitPrototype()) {\n            propertyNames.addAll(current.getOwnPropertyNames());\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n\n        int i = 0;\n        List<String> sortedProperties = new ArrayList<>(propertyNames);\n        for (String property : sortedProperties) {\n            if (i > 0) {\n                sb.append(\", \");\n            }\n\n            sb.append(property);\n            sb.append(\": \");\n            sb.append(getPropertyType(property).toString());\n\n            ++i;\n            if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n                StringBuilder restProperties = new StringBuilder(\"[\");\n                int j = 0;\n                for (String remainingProperty : sortedProperties.subList(i, sortedProperties.size())) {\n                    if (j > 0) {\n                        restProperties.append(\", \");\n                    }\n                    restProperties.append(remainingProperty);\n                    ++j;\n                }\n                restProperties.append(\"]\");\n                sb.append(\",...\").append(restProperties);\n                break;\n            }\n        }\n\n        sb.append(\"}\");\n\n        prettyPrint = true;\n        return sb.toString();\n    } else {\n        return \"{...}\";\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}