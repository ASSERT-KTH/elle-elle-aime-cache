{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    // Don't pretty print recursively.\n    prettyPrint = false;\n\n    // Use a tree set so that the properties are sorted.\n    Set<String> propertyNames = Sets.newTreeSet();\n    Set<JSType> visitedTypes = Sets.newHashSet(); // Track visited types to handle recursion\n    collectPropertyNames(this, propertyNames, visitedTypes, MAX_PRETTY_PRINTED_PROPERTIES);\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n\n      sb.append(property);\n      sb.append(\": \");\n      sb.append(getPropertyType(property).toString());\n\n      ++i;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\",...\");\n        break;\n      }\n    }\n\n    sb.append(\"}\");\n\n    prettyPrint = true;\n    return sb.toString();\n  } else {\n    return \"{...}\";\n  }\n}\n\n// New helper method to collect property names while handling recursion\nprivate void collectPropertyNames(\n    ObjectType current, \n    Set<String> propertyNames, \n    Set<JSType> visitedTypes, \n    int maxProperties) {\n  if (current == null || current.isNativeObjectType() || visitedTypes.contains(current)) {\n    return;\n  }\n  visitedTypes.add(current);\n\n  for (String propertyName : current.getOwnPropertyNames()) {\n    propertyNames.add(propertyName);\n    if (propertyNames.size() == maxProperties) {\n      break;\n    }\n  }\n\n  if (propertyNames.size() < maxProperties) {\n    collectPropertyNames(current.getImplicitPrototype(), propertyNames, visitedTypes, maxProperties);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}