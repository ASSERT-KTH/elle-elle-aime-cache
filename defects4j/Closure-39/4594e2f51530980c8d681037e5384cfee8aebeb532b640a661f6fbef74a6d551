{
    "generation": "import java.util.Set;\nimport java.util.TreeSet;\nimport java.util.IdentityHashMap;\nimport java.util.concurrent.ThreadLocal;\n\nclass JSType {\n  // Dummy JSType class for context\n}\n\nclass ObjectType extends JSType {\n  // Dummy ObjectType class for context\n  public ObjectType getImplicitPrototype() {\n    return null;\n  }\n\n  public Set<String> getOwnPropertyNames() {\n    return Set.of();\n  }\n\n  public JSType getPropertyType(String property) {\n    return new JSType();\n  }\n\n  public boolean hasReferenceName() {\n    return false;\n  }\n\n  public String getReferenceName() {\n    return \"\";\n  }\n}\n\nclass RecordType extends ObjectType {\n  private boolean prettyPrint;\n  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;\n  private static final ThreadLocal<Set<JSType>> printingTypes =\n      new ThreadLocal<Set<JSType>>() {\n        @Override\n        protected Set<JSType> initialValue() {\n          return new IdentityHashMap<>();\n        }\n      };\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      Set<JSType> currentPrinting = printingTypes.get();\n      if (currentPrinting.contains(this)) {\n        return \"{...}\";\n      }\n      currentPrinting.add(this);\n      try {\n        // Use a tree set so that the properties are sorted.\n        Set<String> propertyNames = new TreeSet<>();\n        int maxProperties = forAnnotations ? Integer.MAX_VALUE : MAX_PRETTY_PRINTED_PROPERTIES;\n\n        for (ObjectType current = this;\n             current != null && !current.isNativeObjectType() && propertyNames.size() < maxProperties;\n             current = current.getImplicitPrototype()) {\n          propertyNames.addAll(current.getOwnPropertyNames());\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n\n        int i = 0;\n        for (String property : propertyNames) {\n          if (i > 0) {\n            sb.append(\", \");\n          }\n\n          sb.append(property);\n          sb.append(\": \");\n          JSType propertyType = getPropertyType(property);\n          if (propertyType == this) {\n            sb.append(\"{...}\");\n          } else {\n            sb.append(propertyType.toStringHelper(forAnnotations));\n          }\n\n          ++i;\n          if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n            sb.append(\", ...\");\n            break;\n          }\n        }\n\n        sb.append(\"}\");\n\n        return sb.toString();\n      } finally {\n        currentPrinting.remove(this);\n        prettyPrint = true;\n      }\n    } else {\n      return \"{...}\";\n    }\n  }\n\n  public boolean isNativeObjectType() {\n    return false;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}