{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else {\n    // Use a tree set so that the properties are sorted.\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType() &&\n             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      if (current == this && !forAnnotations) {\n        continue; // Skip self reference for non-annotation output\n      }\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n\n      sb.append(property);\n      sb.append(\": \");\n      JSType type = getPropertyType(property);\n      sb.append(type.isEquivalentTo(this) ? (forAnnotations ? \"?\" : \"{...}\") : type.toString());\n\n      ++i;\n      if (forAnnotations || i < MAX_PRETTY_PRINTED_PROPERTIES) {\n        continue;\n      } else {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n\n    sb.append(\"}\");\n\n    return sb.toString();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}