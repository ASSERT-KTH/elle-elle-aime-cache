{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      StringBuilder truncatedProperties = new StringBuilder(); // <--- NEW\n      int propertyCount = 0;\n      for (ObjectType current = this;\n           current!= null &&!current.isNativeObjectType();\n           current = current.getImplicitPrototype()) {\n        for (String property : current.getOwnPropertyNames()) {\n          if (!propertyNames.add(property)) {\n            continue; // already added\n          }\n          if (propertyCount < MAX_PRETTY_PRINTED_PROPERTIES) {\n            propertyCount++;\n          } else {\n            truncatedProperties.append(\", \").append(property); // <--- NEW\n            break; // stop adding to truncatedProperties after first excess\n          }\n        }\n        if (propertyCount >= MAX_PRETTY_PRINTED_PROPERTIES) {\n          break;\n        }\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(getPropertyType(property).toString());\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          if (truncatedProperties.length() > 0) { // <--- NEW\n            sb.append(\", \").append(truncatedProperties).append(\"]\");\n          } else {\n            sb.append(\",...\");\n          }\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}