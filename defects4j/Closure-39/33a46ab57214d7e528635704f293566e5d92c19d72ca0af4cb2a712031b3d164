{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current!= null &&!current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        \n        // FIX: handle recursive types and show additional properties for annotation strings\n        JSType propertyType = getPropertyType(property);\n        if (propertyType.equals(this) && forAnnotations) {\n          sb.append(\"?\"); // indicate recursive type for annotations\n        } else if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES && i == MAX_PRETTY_PRINTED_PROPERTIES - 1) {\n          sb.append(\"...\");\n          for (String additionalProperty : getPropertyNamesNotIn(propertyNames, MAX_PRETTY_PRINTED_PROPERTIES)) {\n            sb.append(\", \").append(additionalProperty).append(\": \").append(getPropertyType(additionalProperty).toString());\n          }\n        } else {\n          sb.append(propertyType.toString());\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n}\n\n// Helper function to get additional properties not in the initial set\nprivate Set<String> getPropertyNamesNotIn(Set<String> initialSet, int maxInitialSize) {\n    Set<String> allPropertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current!= null &&!current.isNativeObjectType();\n         current = current.getImplicitPrototype()) {\n      allPropertyNames.addAll(current.getOwnPropertyNames());\n    }\n    allPropertyNames.removeAll(initialSet);\n    return Sets.newTreeSet CollectionsUtils.limit(allPropertyNames, maxInitialSize));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}