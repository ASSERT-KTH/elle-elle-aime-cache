{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    // Don't pretty print recursively.\n    prettyPrint = false;\n\n    // Use a tree set so that the properties are sorted.\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current!= null &&!current.isNativeObjectType() &&\n             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n\n      JSType propertyType = getPropertyType(property);\n      if (propertyType instanceof ObjectType && ((ObjectType) propertyType).hasReferenceName()) {\n        // If the property type has a reference name, use its annotation string to avoid recursion\n        sb.append(property).append(\": \").append(((ObjectType) propertyType).toAnnotationString());\n      } else {\n        sb.append(property).append(\": \").append(propertyType.toString());\n      }\n\n      ++i;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        int remaining = propertyNames.size() - i;\n        if (remaining == 1) {\n          // If there's only one remaining property, print it\n          String remainingProperty = propertyNames.iterator().next();\n          sb.append(\", \").append(remainingProperty).append(\": \").append(getPropertyType(remainingProperty).toString());\n        } else {\n          sb.append(\",... (\").append(remaining).append(\" more)\");\n        }\n        break;\n      }\n    }\n\n    sb.append(\"}\");\n\n    prettyPrint = true;\n    return sb.toString();\n  } else {\n    return \"{...}\";\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}