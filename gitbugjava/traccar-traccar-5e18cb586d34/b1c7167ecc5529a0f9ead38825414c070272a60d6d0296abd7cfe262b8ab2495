{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n    long reportMask = Long.parseLong(values[index++], 16);\n    long reportMaskExt = 0;\n\n    if (BitUtil.check(reportMask, 0)) {\n        position.set(Position.KEY_VIN, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 1)) {\n        position.set(Position.KEY_IGNITION, parseBooleanValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 2)) {\n        position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 3) && !values[index].isEmpty()) {\n        position.set(Position.KEY_FUEL_USED, parseDoubleValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 5) && !values[index].isEmpty()) {\n        position.set(Position.KEY_RPM, parseIntValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 4) && !values[index].isEmpty()) {\n        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(parseIntValue(values[index++])));\n    }\n    if (BitUtil.check(reportMask, 6) && !values[index].isEmpty()) {\n        position.set(Position.KEY_COOLANT_TEMP, parseIntValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 7) && !values[index].isEmpty()) {\n        position.set(Position.KEY_FUEL_CONSUMPTION, parseDoubleValue(values[index++].substring(1)));\n    }\n    if (BitUtil.check(reportMask, 8) && !values[index].isEmpty()) {\n        position.set(Position.KEY_FUEL_LEVEL, parseDoubleValue(values[index++].substring(1)));\n    }\n    if (BitUtil.check(reportMask, 9) && !values[index].isEmpty()) {\n        position.set(\"range\", parseLongValue(values[index++]) * 100);\n    }\n    if (BitUtil.check(reportMask, 10) && !values[index].isEmpty()) {\n        position.set(Position.KEY_THROTTLE, parseIntValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 11) && !values[index].isEmpty()) {\n        position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(parseDoubleValue(values[index++])));\n    }\n    if (BitUtil.check(reportMask, 12)) {\n        position.set(Position.KEY_DRIVING_TIME, parseDoubleValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 13)) {\n        position.set(\"idleHours\", parseDoubleValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 14) && !values[index].isEmpty()) {\n        position.set(\"idleFuelConsumption\", parseDoubleValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 15) && !values[index].isEmpty()) {\n        position.set(Position.KEY_AXLE_WEIGHT, parseIntValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 16) && !values[index].isEmpty()) {\n        position.set(\"tachographInfo\", parseHexValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 17) && !values[index].isEmpty()) {\n        position.set(\"indicators\", parseHexValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 18) && !values[index].isEmpty()) {\n        position.set(\"lights\", parseHexValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 19) && !values[index].isEmpty()) {\n        position.set(\"doors\", parseHexValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 20) && !values[index].isEmpty()) {\n        position.set(\"vehicleOverspeed\", parseDoubleValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 21) && !values[index].isEmpty()) {\n        position.set(\"engineOverspeed\", parseDoubleValue(values[index++]));\n    }\n    if (BitUtil.check(reportMask, 29)) {\n        reportMaskExt = parseHexValue(values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 0) && !values[index].isEmpty()) {\n        position.set(\"adBlueLevel\", parseIntValue(values[index++]));\n    }\n    if (BitUtil.check(reportMaskExt, 1) && !values[index].isEmpty()) {\n        position.set(\"axleWeight1\", parseIntValue(values[index++]));\n    }\n    if (BitUtil.check(reportMaskExt, 2) && !values[index].isEmpty()) {\n        position.set(\"axleWeight3\", parseIntValue(values[index++]));\n    }\n    if (BitUtil.check(reportMaskExt, 3) && !values[index].isEmpty()) {\n        position.set(\"axleWeight4\", parseIntValue(values[index++]));\n    }\n    if (BitUtil.check(reportMaskExt, 4)) {\n        index += 1; // tachograph overspeed\n    }\n    if (BitUtil.check(reportMaskExt, 5)) {\n        index += 1; // tachograph motion\n    }\n    if (BitUtil.check(reportMaskExt, 6)) {\n        index += 1; // tachograph direction\n    }\n    if (BitUtil.check(reportMaskExt, 7) && !values[index].isEmpty()) {\n        position.set(Position.PREFIX_ADC + 1, parseDoubleValue(values[index++]) * 0.001);\n    }\n    if (BitUtil.check(reportMaskExt, 8)) {\n        index += 1; // pedal breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 9)) {\n        index += 1; // engine breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 10)) {\n        index += 1; // total accelerator kick-downs\n    }\n    if (BitUtil.check(reportMaskExt, 11)) {\n        index += 1; // total effective engine speed\n    }\n    if (BitUtil.check(reportMaskExt, 12)) {\n        index += 1; // total cruise control time\n    }\n    if (BitUtil.check(reportMaskExt, 13)) {\n        index += 1; // total accelerator kick-down time\n    }\n    if (BitUtil.check(reportMaskExt, 14)) {\n        index += 1; // total brake application\n    }\n    if (BitUtil.check(reportMaskExt, 15) && !values[index].isEmpty()) {\n        position.set(\"driver1Card\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 16) && !values[index].isEmpty()) {\n        position.set(\"driver2Card\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 17) && !values[index].isEmpty()) {\n        position.set(\"driver1Name\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 18) && !values[index].isEmpty()) {\n        position.set(\"driver2Name\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 19) && !values[index].isEmpty()) {\n        position.set(\"registration\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 20)) {\n        index += 1; // expansion information\n    }\n    if (BitUtil.check(reportMaskExt, 21)) {\n        index += 1; // rapid brakings\n    }\n    if (BitUtil.check(reportMaskExt, 22)) {\n        index += 1; // rapid accelerations\n    }\n    if (BitUtil.check(reportMaskExt, 23)) {\n        index += 1; // engine torque\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask, 30)) {\n        while (index < values.length && values[index].isEmpty()) {\n            index += 1;\n        }\n        if (index < values.length) {\n            position.setValid(parseIntValue(values[index++]) > 0);\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(parseDoubleValue(values[index++])));\n                position.setCourse(parseIntValue(values[index++]));\n                position.setAltitude(parseDoubleValue(values[index++]));\n                position.setLongitude(parseDoubleValue(values[index++]));\n                position.setLatitude(parseDoubleValue(values[index++]));\n                if (index < values.length) {\n                    position.setTime(dateFormat.parse(values[index++]));\n                }\n            } else {\n                index += 6; // no location\n                getLastLocation(position, null);\n            }\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell\n        index += 1; // reserved\n    }\n\n    if (ignoreFixTime) {\n        position.setTime(dateFormat.parse(values[index]));\n    } else {\n        position.setDeviceTime(dateFormat.parse(values[index]));\n    }\n\n    return position;\n}\n\n// Helper methods to parse values safely\nprivate static boolean parseBooleanValue(String value) {\n    return parseIntValue(value) > 0;\n}\n\nprivate static int parseIntValue(String value) {\n    return value.isEmpty() ? 0 : Integer.parseInt(value);\n}\n\nprivate static long parseLongValue(String value) {\n    return value.isEmpty() ? 0L : Long.parseLong(value);\n}\n\nprivate static double parseDoubleValue(String value) {\n    return value.isEmpty() ? 0.0 : Double.parseDouble(value);\n}\n\nprivate static int parseHexValue(String value) {\n    return value.isEmpty() ? 0 : Integer.parseInt(value, 16);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}