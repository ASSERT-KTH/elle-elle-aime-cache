{
    "generation": "    private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n        Position position = new Position(getProtocolName());\n\n        int index = 0;\n        String[] values = sentence.split(\",\");\n\n        index += 1; // header\n        index += 1; // protocol version\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        index += 1; // device name\n        index += 1; // report type\n        index += 1; // canbus state\n        long reportMask = Long.parseLong(values[index++], 16);\n        long reportMaskExt = 0;\n\n        if (BitUtil.check(reportMask, 0)) {\n            position.set(Position.KEY_VIN, values[index++]);\n        }\n        if (BitUtil.check(reportMask, 1)) {\n            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);\n        }\n        if (BitUtil.check(reportMask, 2)) {\n            position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n        }\n        if (BitUtil.check(reportMask, 3)) {\n            index += 1; // fuel used\n        }\n        if (BitUtil.check(reportMask, 5)) {\n            index += 1; // rpm\n        }\n        if (BitUtil.check(reportMask, 4)) {\n            index += 1; // obd speed\n        }\n        if (BitUtil.check(reportMask, 6)) {\n            index += 1; // coolant temp\n        }\n        if (BitUtil.check(reportMask, 7)) {\n            index += 1; // fuel consumption\n        }\n        if (BitUtil.check(reportMask, 8)) {\n            index += 1; // fuel level\n        }\n        if (BitUtil.check(reportMask, 9)) {\n            index += 1; // range\n        }\n        if (BitUtil.check(reportMask, 10)) {\n            index += 1; // throttle\n        }\n        if (BitUtil.check(reportMask, 11)) {\n            index += 1; // hours\n        }\n        if (BitUtil.check(reportMask, 12)) {\n            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));\n        }\n        if (BitUtil.check(reportMask, 13)) {\n            position.set(\"idleHours\", Double.parseDouble(values[index++]));\n        }\n        if (BitUtil.check(reportMask, 14)) {\n            index += 1; // idle fuel consumption\n        }\n        if (BitUtil.check(reportMask, 15)) {\n            index += 1; // axle weight\n        }\n        if (BitUtil.check(reportMask, 16)) {\n            index += 1; // tachograph info\n        }\n        if (BitUtil.check(reportMask, 17)) {\n            index += 1; // indicators\n        }\n        if (BitUtil.check(reportMask, 18)) {\n            index += 1; // lights\n        }\n        if (BitUtil.check(reportMask, 19)) {\n            index += 1; // doors\n        }\n        if (BitUtil.check(reportMask, 20)) {\n            index += 1; // vehicle overspeed\n        }\n        if (BitUtil.check(reportMask, 21)) {\n            index += 1; // engine overspeed\n        }\n        if (BitUtil.check(reportMask, 29)) {\n            reportMaskExt = Long.parseLong(values[index++], 16);\n        }\n        if (BitUtil.check(reportMaskExt, 0)) {\n            index += 1; // adblue level\n        }\n        if (BitUtil.check(reportMaskExt, 1)) {\n            index += 1; // axle weight 1\n        }\n        if (BitUtil.check(reportMaskExt, 2)) {\n            index += 1; // axle weight 3\n        }\n        if (BitUtil.check(reportMaskExt, 3)) {\n            index += 1; // axle weight 4\n        }\n        if (BitUtil.check(reportMaskExt, 4)) {\n            index += 1; // tachograph overspeed\n        }\n        if (BitUtil.check(reportMaskExt, 5)) {\n            index += 1; // tachograph motion\n        }\n        if (BitUtil.check(reportMaskExt, 6)) {\n            index += 1; // tachograph direction\n        }\n        if (BitUtil.check(reportMaskExt, 7)) {\n            index += 1; // adc 1\n        }\n        if (BitUtil.check(reportMaskExt, 8)) {\n            index += 1; // pedal breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 9)) {\n            index += 1; // engine breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 10)) {\n            index += 1; // total accelerator kick-downs\n        }\n        if (BitUtil.check(reportMaskExt, 11)) {\n            index += 1; // total effective engine speed\n        }\n        if (BitUtil.check(reportMaskExt, 12)) {\n            index += 1; // total cruise control time\n        }\n        if (BitUtil.check(reportMaskExt, 13)) {\n            index += 1; // total accelerator kick-down time\n        }\n        if (BitUtil.check(reportMaskExt, 14)) {\n            index += 1; // total brake application\n        }\n        if (BitUtil.check(reportMaskExt, 15)) {\n            index += 1; // driver 1 card\n        }\n        if (BitUtil.check(reportMaskExt, 16)) {\n            index += 1; // driver 2 card\n        }\n        if (BitUtil.check(reportMaskExt, 17)) {\n            index += 1; // driver 1 name\n        }\n        if (BitUtil.check(reportMaskExt, 18)) {\n            index += 1; // driver 2 name\n        }\n        if (BitUtil.check(reportMaskExt, 19)) {\n            index += 1; // registration\n        }\n        if (BitUtil.check(reportMaskExt, 20)) {\n            index += 1; // expansion information\n        }\n        if (BitUtil.check(reportMaskExt, 21)) {\n            index += 1; // rapid brakings\n        }\n        if (BitUtil.check(reportMaskExt, 22)) {\n            index += 1; // rapid accelerations\n        }\n        if (BitUtil.check(reportMaskExt, 23)) {\n            index += 1; // engine torque\n        }\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n        if (BitUtil.check(reportMask, 30)) {\n            while (values[index].isEmpty()) {\n                index += 1;\n            }\n            position.setValid(Integer.parseInt(values[index++]) > 0);\n            if (!values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n                position.setCourse(Integer.parseInt(values[index++]));\n                position.setAltitude(Double.parseDouble(values[index++]));\n                position.setLongitude(Double.parseDouble(values[index++]));\n                position.setLatitude(Double.parseDouble(values[index++]));\n                position.setTime(dateFormat.parse(values[index++]));\n            } else {\n                index += 6; // no location\n                getLastLocation(position, null);\n            }\n        } else {\n            getLastLocation(position, null);\n        }\n\n        if (BitUtil.check(reportMask, 31)) {\n            index += 4; // cell\n            index += 1; // reserved\n        }\n\n        if (ignoreFixTime) {\n            position.setTime(dateFormat.parse(values[index]));\n        } else {\n            position.setDeviceTime(dateFormat.parse(values[index]));\n        }\n\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}