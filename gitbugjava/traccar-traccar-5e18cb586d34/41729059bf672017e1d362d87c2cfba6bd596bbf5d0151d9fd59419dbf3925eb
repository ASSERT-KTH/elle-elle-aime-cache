{
    "generation": "    private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n        Position position = new Position(getProtocolName());\n\n        int index = 0;\n        String[] values = sentence.split(\",\");\n\n        index += 1; // header\n        index += 1; // protocol version\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        index += 1; // device name\n        index += 1; // report type\n        index += 1; // canbus state\n        long reportMask = Long.parseLong(values[index++], 16);\n        long reportMaskExt = 0;\n\n        if (BitUtil.check(reportMask, 0)) {\n            position.set(Position.KEY_VIN, values[index++]);\n        }\n        if (BitUtil.check(reportMask, 1)) {\n            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);\n        }\n        if (BitUtil.check(reportMask, 2)) {\n            position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n        }\n        if (BitUtil.check(reportMask, 3)) {\n            if (!values[index].isEmpty()) {\n                position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index]));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 5)) {\n            if (!values[index].isEmpty()) {\n                position.set(Position.KEY_RPM, Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 4)) {\n            if (!values[index].isEmpty()) {\n                position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 6)) {\n            if (!values[index].isEmpty()) {\n                position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 7)) {\n            if (!values[index].isEmpty()) {\n                position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index].substring(1)));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 8)) {\n            if (!values[index].isEmpty()) {\n                position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index].substring(1)));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 9)) {\n            if (!values[index].isEmpty()) {\n                position.set(\"range\", Long.parseLong(values[index]) * 100);\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 10)) {\n            if (!values[index].isEmpty()) {\n                position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index]));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 11)) {\n            if (!values[index].isEmpty()) {\n                position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index])));\n            }\n            index++;\n        }\n        if (BitUtil.check(reportMask, 12)) {\n            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));\n        }\n        if (BitUtil.check(reportMask, 13)) {\n            position.set(\"idleHours\", Double.parseDouble(values[index++]));\n        }\n        if (BitUtil.check(reportMask, 14)) {\n            if (!values[index].isEmpty()) {\n                position.set(\"idleFuelConsumption\", Double.parseDouble(values[index]));\n            }\n            index++;\n        }\n        // ... (rest of the code remains unchanged)\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}