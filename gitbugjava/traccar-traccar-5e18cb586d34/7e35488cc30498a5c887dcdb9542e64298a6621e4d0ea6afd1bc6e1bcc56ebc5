{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n    long reportMask = Long.parseLong(values[index++], 16);\n    long reportMaskExt = 0;\n\n    if (BitUtil.check(reportMask, 0)) {\n        position.set(Position.KEY_VIN, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 1)) {\n        setIfValidBoolean(position, Position.KEY_IGNITION, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 2)) {\n        position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 3)) {\n        setIfValidDouble(position, Position.KEY_FUEL_USED, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 5)) {\n        setIfValidInt(position, Position.KEY_RPM, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 4)) {\n        setIfValidDouble(position, Position.KEY_OBD_SPEED, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 6)) {\n        setIfValidInt(position, \"coolantTemp\", values[index++]);\n    }\n    if (BitUtil.check(reportMask, 7)) {\n        setIfValidDouble(position, \"fuelConsumption\", values[index++].substring(1));\n    }\n    if (BitUtil.check(reportMask, 8)) {\n        setIfValidDouble(position, Position.KEY_FUEL_LEVEL, values[index++].substring(1));\n    }\n    if (BitUtil.check(reportMask, 9)) {\n        setIfValidLong(position, \"range\", values[index++]);\n    }\n    if (BitUtil.check(reportMask, 10)) {\n        setIfValidInt(position, Position.KEY_THROTTLE, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 11)) {\n        setIfValidDouble(position, \"hours\", values[index++]);\n    }\n    if (BitUtil.check(reportMask, 12)) {\n        setIfValidDouble(position, \"drivingTime\", values[index++]);\n    }\n    if (BitUtil.check(reportMask, 13)) {\n        setIfValidDouble(position, \"idleHours\", values[index++]);\n    }\n    if (BitUtil.check(reportMask, 14)) {\n        setIfValidDouble(position, \"idleFuelConsumption\", values[index++]);\n    }\n    if (BitUtil.check(reportMask, 15)) {\n        setIfValidInt(position, Position.KEY_AXLE_WEIGHT, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 16)) {\n        setIfValidInt(position, \"tachographInfo\", values[index++], 16);\n    }\n    if (BitUtil.check(reportMask, 17)) {\n        setIfValidInt(position, \"indicators\", values[index++], 16);\n    }\n    if (BitUtil.check(reportMask, 18)) {\n        setIfValidInt(position, \"lights\", values[index++], 16);\n    }\n    if (BitUtil.check(reportMask, 19)) {\n        setIfValidInt(position, \"doors\", values[index++], 16);\n    }\n    if (BitUtil.check(reportMask, 20)) {\n        setIfValidDouble(position, \"vehicleOverspeed\", values[index++]);\n    }\n    if (BitUtil.check(reportMask, 21)) {\n        setIfValidDouble(position, \"engineOverspeed\", values[index++]);\n    }\n    if (BitUtil.check(reportMask, 29)) {\n        reportMaskExt = Long.parseLong(values[index++], 16);\n    }\n    if (BitUtil.check(reportMaskExt, 0)) {\n        setIfValidInt(position, \"adBlueLevel\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 1)) {\n        setIfValidInt(position, \"axleWeight1\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 2)) {\n        setIfValidInt(position, \"axleWeight3\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 3)) {\n        setIfValidInt(position, \"axleWeight4\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 4)) {\n        index += 1; // tachograph overspeed\n    }\n    if (BitUtil.check(reportMaskExt, 5)) {\n        index += 1; // tachograph motion\n    }\n    if (BitUtil.check(reportMaskExt, 6)) {\n        index += 1; // tachograph direction\n    }\n    if (BitUtil.check(reportMaskExt, 7)) {\n        setIfValidDouble(position, Position.PREFIX_ADC + 1, values[index++], 1e-3);\n    }\n    if (BitUtil.check(reportMaskExt, 8)) {\n        index += 1; // pedal breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 9)) {\n        index += 1; // engine breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 10)) {\n        index += 1; // total accelerator kick-downs\n    }\n    if (BitUtil.check(reportMaskExt, 11)) {\n        index += 1; // total effective engine speed\n    }\n    if (BitUtil.check(reportMaskExt, 12)) {\n        index += 1; // total cruise control time\n    }\n    if (BitUtil.check(reportMaskExt, 13)) {\n        index += 1; // total accelerator kick-down time\n    }\n    if (BitUtil.check(reportMaskExt, 14)) {\n        index += 1; // total brake application\n    }\n    if (BitUtil.check(reportMaskExt, 15)) {\n        position.set(\"driver1Card\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 16)) {\n        position.set(\"driver2Card\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 17)) {\n        position.set(\"driver1Name\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 18)) {\n        position.set(\"driver2Name\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 19)) {\n        position.set(\"registration\", values[index++]);\n    }\n    if (BitUtil.check(reportMaskExt, 20)) {\n        index += 1; // expansion information\n    }\n    if (BitUtil.check(reportMaskExt, 21)) {\n        index += 1; // rapid brakings\n    }\n    if (BitUtil.check(reportMaskExt, 22)) {\n        index += 1; // rapid accelerations\n    }\n    if (BitUtil.check(reportMaskExt, 23)) {\n        index += 1; // engine torque\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask, 30)) {\n        while (values[index].isEmpty()) {\n            index += 1;\n        }\n        position.setValid(Integer.parseInt(values[index++]) > 0);\n        if (!values[index].isEmpty()) {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Integer.parseInt(values[index++]));\n            position.setAltitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setTime(dateFormat.parse(values[index++]));\n        } else {\n            index += 6; // no location\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell\n        index += 1; // reserved\n    }\n\n    if (ignoreFixTime) {\n        position.setTime(dateFormat.parse(values[index]));\n    } else {\n        position.setDeviceTime(dateFormat.parse(values[index]));\n    }\n\n    return position;\n}\n\nprivate void setIfValidBoolean(Position position, String key, String value) {\n    if (value != null && !value.trim().isEmpty()) {\n        try {\n            int intValue = Integer.parseInt(value);\n            position.set(key, intValue > 0);\n        } catch (NumberFormatException e) {\n            LOG.warning(\"Invalid boolean value for key \" + key + \": \" + value);\n        }\n    }\n}\n\nprivate void setIfValidInt(Position position, String key, String value) {\n    setIfValidInt(position, key, value, 10);\n}\n\nprivate void setIfValidInt(Position position, String key, String value, int radix) {\n    if (value != null && !value.trim().isEmpty()) {\n        try {\n            int intValue = Integer.parseInt(value, radix);\n            position.set(key, intValue);\n        } catch (NumberFormatException e) {\n            LOG.warning(\"Invalid integer value for key \" + key + \": \" + value);\n        }\n    }\n}\n\nprivate void setIfValidDouble(Position position, String key, String value) {\n    setIfValidDouble(position, key, value, 1.0);\n}\n\nprivate void setIfValidDouble(Position position, String key, String value, double multiplier) {\n    if (value != null && !value.trim().isEmpty()) {\n        try {\n            double doubleValue = Double.parseDouble(value) * multiplier;\n            position.set(key, doubleValue);\n        } catch (NumberFormatException e) {\n            LOG.warning(\"Invalid double value for key \" + key + \": \" + value);\n        }\n    }\n}\n\nprivate void setIfValidLong(Position position, String key, String value) {\n    if (value != null && !value.trim().isEmpty()) {\n        try {\n            long longValue = Long.parseLong(value);\n            position.set(key, longValue);\n        } catch (NumberFormatException e) {\n            LOG.warning(\"Invalid long value for key \" + key + \": \" + value);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}