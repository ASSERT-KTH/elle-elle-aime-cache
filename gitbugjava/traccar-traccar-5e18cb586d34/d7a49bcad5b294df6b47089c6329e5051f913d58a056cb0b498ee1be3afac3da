{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n    long reportMask = Long.parseLong(values[index++], 16);\n    long reportMaskExt = 0;\n\n    if (BitUtil.check(reportMask, 0)) {\n        position.set(Position.KEY_VIN, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 1)) {\n        String ignitionStr = values[index++];\n        if (!ignitionStr.isEmpty()) {\n            position.set(Position.KEY_IGNITION, Integer.parseInt(ignitionStr) > 0);\n        }\n    }\n    if (BitUtil.check(reportMask, 2)) {\n        position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 3)) {\n        String fuelUsedStr = values[index++];\n        if (!fuelUsedStr.isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(fuelUsedStr));\n        }\n    }\n    if (BitUtil.check(reportMask, 5)) {\n        String rpmStr = values[index++];\n        if (!rpmStr.isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(rpmStr));\n        }\n    }\n    if (BitUtil.check(reportMask, 4)) {\n        String obdSpeedStr = values[index++];\n        if (!obdSpeedStr.isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(obdSpeedStr)));\n        }\n    }\n    if (BitUtil.check(reportMask, 6)) {\n        String coolantTempStr = values[index++];\n        if (!coolantTempStr.isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(coolantTempStr));\n        }\n    }\n    if (BitUtil.check(reportMask, 7)) {\n        String fuelConsumptionStr = values[index++];\n        if (!fuelConsumptionStr.isEmpty()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(fuelConsumptionStr.substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 8)) {\n        String fuelLevelStr = values[index++];\n        if (!fuelLevelStr.isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(fuelLevelStr.substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 9)) {\n        String rangeStr = values[index++];\n        if (!rangeStr.isEmpty()) {\n            position.set(\"range\", Long.parseLong(rangeStr) * 100);\n        }\n    }\n    if (BitUtil.check(reportMask, 10)) {\n        String throttleStr = values[index++];\n        if (!throttleStr.isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(throttleStr));\n        }\n    }\n    if (BitUtil.check(reportMask, 11)) {\n        String hoursStr = values[index++];\n        if (!hoursStr.isEmpty()) {\n            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(hoursStr)));\n        }\n    }\n    if (BitUtil.check(reportMask, 12)) {\n        String drivingTimeStr = values[index++];\n        if (!drivingTimeStr.isEmpty()) {\n            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(drivingTimeStr));\n        }\n    }\n    if (BitUtil.check(reportMask, 13)) {\n        String idleHoursStr = values[index++];\n        if (!idleHoursStr.isEmpty()) {\n            position.set(\"idleHours\", Double.parseDouble(idleHoursStr));\n        }\n    }\n    if (BitUtil.check(reportMask, 14)) {\n        String idleFuelConsumptionStr = values[index++];\n        if (!idleFuelConsumptionStr.isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(idleFuelConsumptionStr));\n        }\n    }\n    if (BitUtil.check(reportMask, 15)) {\n        String axleWeightStr = values[index++];\n        if (!axleWeightStr.isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(axleWeightStr));\n        }\n    }\n    if (BitUtil.check(reportMask, 16)) {\n        String tachographInfoStr = values[index++];\n        if (!tachographInfoStr.isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(tachographInfoStr, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 17)) {\n        String indicatorsStr = values[index++];\n        if (!indicatorsStr.isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(indicatorsStr, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 18)) {\n        String lightsStr = values[index++];\n        if (!lightsStr.isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(lightsStr, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 19)) {\n        String doorsStr = values[index++];\n        if (!doorsStr.isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(doorsStr, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 20)) {\n        String vehicleOverspeedStr = values[index++];\n        if (!vehicleOverspeedStr.isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(vehicleOverspeedStr));\n        }\n    }\n    if (BitUtil.check(reportMask, 21)) {\n        String engineOverspeedStr = values[index++];\n        if (!engineOverspeedStr.isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(engineOverspeedStr));\n        }\n    }\n    if (BitUtil.check(reportMask, 29)) {\n        reportMaskExt = Long.parseLong(values[index++], 16);\n    }\n    if (BitUtil.check(reportMaskExt, 0)) {\n        String adeBlueLevelStr = values[index++];\n        if (!adeBlueLevelStr.isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(adeBlueLevelStr));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 1)) {\n        String axleWeight1Str = values[index++];\n        if (!axleWeight1Str.isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(axleWeight1Str));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 2)) {\n        String axleWeight3Str = values[index++];\n        if (!axleWeight3Str.isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(axleWeight3Str));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 3)) {\n        String axleWeight4Str = values[index++];\n        if (!axleWeight4Str.isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(axleWeight4Str));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 4)) {\n        index += 1; // tachograph overspeed\n    }\n    if (BitUtil.check(reportMaskExt, 5)) {\n        index += 1; // tachograph motion\n    }\n    if (BitUtil.check(reportMaskExt, 6)) {\n        index += 1; // tachograph direction\n    }\n    if (BitUtil.check(reportMaskExt, 7)) {\n        String adc1Str = values[index++];\n        if (!adc1Str.isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(adc1Str) * 0.001);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 8)) {\n        index += 1; // pedal breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 9)) {\n        index += 1; // engine breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 10)) {\n        index += 1; // total accelerator kick-downs\n    }\n    if (BitUtil.check(reportMaskExt, 11)) {\n        index += 1; // total effective engine speed\n    }\n    if (BitUtil.check(reportMaskExt, 12)) {\n        index += 1; // total cruise control time\n    }\n    if (BitUtil.check(reportMaskExt, 13)) {\n        index += 1; // total accelerator kick-down time\n    }\n    if (BitUtil.check(reportMaskExt, 14)) {\n        index += 1; // total brake application\n    }\n    if (BitUtil.check(reportMaskExt, 15)) {\n        String driver1CardStr = values[index++];\n        if (!driver1CardStr.isEmpty()) {\n            position.set(\"driver1Card\", driver1CardStr);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 16)) {\n        String driver2CardStr = values[index++];\n        if (!driver2CardStr.isEmpty()) {\n            position.set(\"driver2Card\", driver2CardStr);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 17)) {\n        String driver1NameStr = values[index++];\n        if (!driver1NameStr.isEmpty()) {\n            position.set(\"driver1Name\", driver1NameStr);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 18)) {\n        String driver2NameStr = values[index++];\n        if (!driver2NameStr.isEmpty()) {\n            position.set(\"driver2Name\", driver2NameStr);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 19)) {\n        String registrationStr = values[index++];\n        if (!registrationStr.isEmpty()) {\n            position.set(\"registration\", registrationStr);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 20)) {\n        index += 1; // expansion information\n    }\n    if (BitUtil.check(reportMaskExt, 21)) {\n        index += 1; // rapid brakings\n    }\n    if (BitUtil.check(reportMaskExt, 22)) {\n        index += 1; // rapid accelerations\n    }\n    if (BitUtil.check(reportMaskExt, 23)) {\n        index += 1; // engine torque\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask, 30)) {\n        while (values[index].isEmpty()) {\n            index += 1;\n        }\n        position.setValid(Integer.parseInt(values[index++]) > 0);\n        if (!values[index].isEmpty()) {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Integer.parseInt(values[index++]));\n            position.setAltitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setTime(dateFormat.parse(values[index++]));\n        } else {\n            index += 6; // no location\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell\n        index += 1; // reserved\n    }\n\n    if (ignoreFixTime) {\n        position.setTime(dateFormat.parse(values[index]));\n    } else {\n        position.setDeviceTime(dateFormat.parse(values[index]));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}