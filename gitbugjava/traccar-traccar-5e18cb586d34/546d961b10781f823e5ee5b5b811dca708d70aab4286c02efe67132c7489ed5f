{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n    long reportMask = Long.parseLong(values[index++], 16);\n    long reportMaskExt = 0;\n\n    if (BitUtil.check(reportMask, 0)) {\n        position.set(Position.KEY_VIN, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 1)) {\n        String ignitionValue = values[index++];\n        position.set(Position.KEY_IGNITION, !ignitionValue.isEmpty() && Integer.parseInt(ignitionValue) > 0);\n    }\n    if (BitUtil.check(reportMask, 2)) {\n        position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 3)) {\n        String fuelUsedValue = values[index++];\n        position.set(Position.KEY_FUEL_USED, !fuelUsedValue.isEmpty() ? Double.parseDouble(fuelUsedValue) : null);\n    }\n    if (BitUtil.check(reportMask, 5)) {\n        String rpmValue = values[index++];\n        position.set(Position.KEY_RPM, !rpmValue.isEmpty() ? Integer.parseInt(rpmValue) : null);\n    }\n    if (BitUtil.check(reportMask, 4)) {\n        String speedValue = values[index++];\n        position.set(Position.KEY_OBD_SPEED, !speedValue.isEmpty() ? UnitsConverter.knotsFromKph(Integer.parseInt(speedValue)) : null);\n    }\n    if (BitUtil.check(reportMask, 6)) {\n        String coolantTempValue = values[index++];\n        position.set(Position.KEY_COOLANT_TEMP, !coolantTempValue.isEmpty() ? Integer.parseInt(coolantTempValue) : null);\n    }\n    if (BitUtil.check(reportMask, 7)) {\n        String fuelConsumptionValue = values[index++];\n        position.set(Position.KEY_FUEL_CONSUMPTION, !fuelConsumptionValue.isEmpty() ? Double.parseDouble(fuelConsumptionValue.substring(1)) : null);\n    }\n    if (BitUtil.check(reportMask, 8)) {\n        String fuelLevelValue = values[index++];\n        position.set(Position.KEY_FUEL_LEVEL, !fuelLevelValue.isEmpty() ? Double.parseDouble(fuelLevelValue.substring(1)) : null);\n    }\n    if (BitUtil.check(reportMask, 9)) {\n        String rangeValue = values[index++];\n        position.set(\"range\", !rangeValue.isEmpty() ? Long.parseLong(rangeValue) * 100 : null);\n    }\n    if (BitUtil.check(reportMask, 10)) {\n        String throttleValue = values[index++];\n        position.set(Position.KEY_THROTTLE, !throttleValue.isEmpty() ? Integer.parseInt(throttleValue) : null);\n    }\n    if (BitUtil.check(reportMask, 11)) {\n        String hoursValue = values[index++];\n        position.set(Position.KEY_HOURS, !hoursValue.isEmpty() ? UnitsConverter.msFromHours(Double.parseDouble(hoursValue)) : null);\n    }\n    if (BitUtil.check(reportMask, 12)) {\n        String drivingTimeValue = values[index++];\n        position.set(Position.KEY_DRIVING_TIME, !drivingTimeValue.isEmpty() ? Double.parseDouble(drivingTimeValue) : null);\n    }\n    if (BitUtil.check(reportMask, 13)) {\n        String idleHoursValue = values[index++];\n        position.set(\"idleHours\", !idleHoursValue.isEmpty() ? Double.parseDouble(idleHoursValue) : null);\n    }\n    if (BitUtil.check(reportMask, 14)) {\n        String idleFuelConsumptionValue = values[index++];\n        position.set(\"idleFuelConsumption\", !idleFuelConsumptionValue.isEmpty() ? Double.parseDouble(idleFuelConsumptionValue) : null);\n    }\n    if (BitUtil.check(reportMask, 15)) {\n        String axleWeightValue = values[index++];\n        position.set(Position.KEY_AXLE_WEIGHT, !axleWeightValue.isEmpty() ? Integer.parseInt(axleWeightValue) : null);\n    }\n    if (BitUtil.check(reportMask, 16)) {\n        String tachographInfoValue = values[index++];\n        position.set(\"tachographInfo\", !tachographInfoValue.isEmpty() ? Integer.parseInt(tachographInfoValue, 16) : null);\n    }\n    if (BitUtil.check(reportMask, 17)) {\n        String indicatorsValue = values[index++];\n        position.set(\"indicators\", !indicatorsValue.isEmpty() ? Integer.parseInt(indicatorsValue, 16) : null);\n    }\n    if (BitUtil.check(reportMask, 18)) {\n        String lightsValue = values[index++];\n        position.set(\"lights\", !lightsValue.isEmpty() ? Integer.parseInt(lightsValue, 16) : null);\n    }\n    if (BitUtil.check(reportMask, 19)) {\n        String doorsValue = values[index++];\n        position.set(\"doors\", !doorsValue.isEmpty() ? Integer.parseInt(doorsValue, 16) : null);\n    }\n    if (BitUtil.check(reportMask, 20)) {\n        String vehicleOverspeedValue = values[index++];\n        position.set(\"vehicleOverspeed\", !vehicleOverspeedValue.isEmpty() ? Double.parseDouble(vehicleOverspeedValue) : null);\n    }\n    if (BitUtil.check(reportMask, 21)) {\n        String engineOverspeedValue = values[index++];\n        position.set(\"engineOverspeed\", !engineOverspeedValue.isEmpty() ? Double.parseDouble(engineOverspeedValue) : null);\n    }\n    if (BitUtil.check(reportMask, 29)) {\n        reportMaskExt = Long.parseLong(values[index++], 16);\n    }\n    if (BitUtil.check(reportMaskExt, 0)) {\n        String adBlueLevelValue = values[index++];\n        position.set(\"adBlueLevel\", !adBlueLevelValue.isEmpty() ? Integer.parseInt(adBlueLevelValue) : null);\n    }\n    if (BitUtil.check(reportMaskExt, 1)) {\n        String axleWeight1Value = values[index++];\n        position.set(\"axleWeight1\", !axleWeight1Value.isEmpty() ? Integer.parseInt(axleWeight1Value) : null);\n    }\n    if (BitUtil.check(reportMaskExt, 2)) {\n        String axleWeight3Value = values[index++];\n        position.set(\"axleWeight3\", !axleWeight3Value.isEmpty() ? Integer.parseInt(axleWeight3Value) : null);\n    }\n    if (BitUtil.check(reportMaskExt, 3)) {\n        String axleWeight4Value = values[index++];\n        position.set(\"axleWeight4\", !axleWeight4Value.isEmpty() ? Integer.parseInt(axleWeight4Value) : null);\n    }\n    if (BitUtil.check(reportMaskExt, 4)) {\n        index += 1; // tachograph overspeed\n    }\n    if (BitUtil.check(reportMaskExt, 5)) {\n        index += 1; // tachograph motion\n    }\n    if (BitUtil.check(reportMaskExt, 6)) {\n        index += 1; // tachograph direction\n    }\n    if (BitUtil.check(reportMaskExt, 7)) {\n        String adc1Value = values[index++];\n        position.set(Position.PREFIX_ADC + 1, !adc1Value.isEmpty() ? Integer.parseInt(adc1Value) * 0.001 : null);\n    }\n    if (BitUtil.check(reportMaskExt, 8)) {\n        index += 1; // pedal breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 9)) {\n        index += 1; // engine breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 10)) {\n        index += 1; // total accelerator kick-downs\n    }\n    if (BitUtil.check(reportMaskExt, 11)) {\n        index += 1; // total effective engine speed\n    }\n    if (BitUtil.check(reportMaskExt, 12)) {\n        index += 1; // total cruise control time\n    }\n    if (BitUtil.check(reportMaskExt, 13)) {\n        index += 1; // total accelerator kick-down time\n    }\n    if (BitUtil.check(reportMaskExt, 14)) {\n        index += 1; // total brake application\n    }\n    if (BitUtil.check(reportMaskExt, 15)) {\n        String driver1CardValue = values[index++];\n        position.set(\"driver1Card\", !driver1CardValue.isEmpty() ? driver1CardValue : null);\n    }\n    if (BitUtil.check(reportMaskExt, 16)) {\n        String driver2CardValue = values[index++];\n        position.set(\"driver2Card\", !driver2CardValue.isEmpty() ? driver2CardValue : null);\n    }\n    if (BitUtil.check(reportMaskExt, 17)) {\n        String driver1NameValue = values[index++];\n        position.set(\"driver1Name\", !driver1NameValue.isEmpty() ? driver1NameValue : null);\n    }\n    if (BitUtil.check(reportMaskExt, 18)) {\n        String driver2NameValue = values[index++];\n        position.set(\"driver2Name\", !driver2NameValue.isEmpty() ? driver2NameValue : null);\n    }\n    if (BitUtil.check(reportMaskExt, 19)) {\n        String registrationValue = values[index++];\n        position.set(\"registration\", !registrationValue.isEmpty() ? registrationValue : null);\n    }\n    if (BitUtil.check(reportMaskExt, 20)) {\n        index += 1; // expansion information\n    }\n    if (BitUtil.check(reportMaskExt, 21)) {\n        index += 1; // rapid brakings\n    }\n    if (BitUtil.check(reportMaskExt, 22)) {\n        index += 1; // rapid accelerations\n    }\n    if (BitUtil.check(reportMaskExt, 23)) {\n        index += 1; // engine torque\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask, 30)) {\n        while (values[index].isEmpty()) {\n            index += 1;\n        }\n        position.setValid(!values[index].isEmpty() && Integer.parseInt(values[index++]) > 0);\n        if (!values[index].isEmpty()) {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(!values[index].isEmpty() ? Integer.parseInt(values[index++]) : null);\n            position.setAltitude(!values[index].isEmpty() ? Double.parseDouble(values[index++]) : null);\n            position.setLongitude(!values[index].isEmpty() ? Double.parseDouble(values[index++]) : null);\n            position.setLatitude(!values[index].isEmpty() ? Double.parseDouble(values[index++]) : null);\n            position.setTime(dateFormat.parse(values[index++]));\n        } else {\n            index += 6; // no location\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell\n        index += 1; // reserved\n    }\n\n    if (ignoreFixTime) {\n        position.setTime(dateFormat.parse(values[index]));\n    } else {\n        position.setDeviceTime(dateFormat.parse(values[index]));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}