{
    "generation": "    private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n        Position position = new Position(getProtocolName());\n        int index = 0;\n        String[] values = sentence.split(\",\");\n        index += 1; // header\n        index += 1; // protocol version\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        position.setDeviceId(deviceSession.getDeviceId());\n       position.set(Position.KEY_VERSION_FW, values[index++]);\n        position.set(Position.KEY_VERSION_HW, values[index++]);\n        int reportMask = Integer.parseInt(values[index++], 16);\n        int reportMaskExt = Integer.parseInt(values[index++], 16);\n        if (BitUtil.check(reportMask, 0) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_ODOMETER, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 1) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 2) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 1, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 2, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 3, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 4, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 5, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 6, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 7, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 8, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 9, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 10, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 12) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 11, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 13) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 12, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 13, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 14, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 15, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 16, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 17, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 18, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 19, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 20, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 22) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 21, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 23) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_TEMP + 22, Integer.parseInt(values[index - 1]));\n        }\n        }\n        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 4)) {\n            index += 1; // tachograph overspeed\n        }\n        if (BitUtil.check(reportMaskExt, 5)) {\n            index += 1; // tachograph motion\n        }\n        if (BitUtil.check(reportMaskExt, 6)) {\n            index += 1; // tachograph direction\n        }\n        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);\n        }\n        if (BitUtil.check(reportMaskExt, 8)) {\n            index += 1; // pedal breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 9)) {\n            index += 1; // engine breaking factor\n        }\n        if (BitUtil.check(reportMaskExt, 10)) {\n            index += 1; // total accelerator kick-downs\n        }\n        if (BitUtil.check(reportMaskExt, 11)) {\n            index += 1; // total effective engine speed\n        }\n        if (BitUtil.check(reportMaskExt, 12)) {\n            index += 1; // total cruise control time\n        }\n        if (BitUtil.check(reportMaskExt, 13)) {\n            index += 1; // total accelerator kick-down time\n        }\n        if (BitUtil.check(reportMaskExt, 14)) {\n            index += 1; // total brake application\n        }\n        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {\n            position.set(\"driver1Card\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {\n            position.set(\"driver2Card\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {\n            position.set(\"driver1Name\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {\n            position.set(\"driver2Name\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {\n            position.set(\"registration\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 20)) {\n            index += 1; // expansion information\n        }\n        if (BitUtil.check(reportMaskExt, 21)) {\n            index += 1; // rapid brakings\n        }\n        if (BitUtil.check(reportMaskExt, 22)) {\n            index += 1; // rapid accelerations\n        }\n        if (BitUtil.check(reportMaskExt, 23)) {\n            index += 1; // engine torque\n        }\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        if (BitUtil.check(reportMask, 30)) {\n            while (values[index].isEmpty()) {\n                index += 1;\n            }\n            position.setValid(Integer.parseInt(values[index++]) > 0);\n            if (!values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n                position.setCourse(Integer.parseInt(values[index++]));\n                position.setAltitude(Double.parseDouble(values[index++]));\n                position.setLongitude(Double.parseDouble(values[index++]));\n                position.setLatitude(Double.parseDouble(values[index++]));\n                position.setTime(dateFormat.parse(values[index++]));\n            } else {\n                index += 6; // no location\n                getLastLocation(position, null);\n            }\n        } else {\n            getLastLocation(position, null);\n        }\n        if (BitUtil.check(reportMask, 31)) {\n            index += 4; // cell\n            index += 1; // reserved\n        }\n        if (ignoreFixTime) {\n            position.setTime(dateFormat.parse(values[index]));\n        } else {\n            position.setDeviceTime(dateFormat.parse(values[index]));\n        }\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}