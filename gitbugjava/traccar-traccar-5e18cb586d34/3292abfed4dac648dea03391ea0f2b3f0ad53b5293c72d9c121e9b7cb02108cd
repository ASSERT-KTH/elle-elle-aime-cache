{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n    long reportMask = Long.parseLong(values[index++], 16);\n    long reportMaskExt = 0;\n\n    index = decodeReportMask(values, index, reportMask, position);\n    reportMaskExt = decodeReportMaskExtIfPresent(values, index, reportMask);\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    index = decodeLocation(values, index, reportMask, position, dateFormat);\n\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell\n        index += 1; // reserved\n    }\n\n    if (ignoreFixTime) {\n        position.setTime(dateFormat.parse(values[index]));\n    } else {\n        position.setDeviceTime(dateFormat.parse(values[index]));\n    }\n\n    return position;\n}\n\nprivate int decodeReportMask(String[] values, int index, long reportMask, Position position) {\n    if (BitUtil.check(reportMask, 0)) {\n        position.set(Position.KEY_VIN, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 1)) {\n        position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);\n    }\n    if (BitUtil.check(reportMask, 2)) {\n        position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n    }\n    if (BitUtil.check(reportMask, 3) && !isStringEmpty(values[index])) {\n        position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index++]));\n    } else {\n        index++;\n    }\n    if (BitUtil.check(reportMask, 5) && !isStringEmpty(values[index])) {\n        position.set(Position.KEY_RPM, Integer.parseInt(values[index++]));\n    } else {\n        index++;\n    }\n    if (BitUtil.check(reportMask, 4) && !isStringEmpty(values[index])) {\n        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index++])));\n    } else {\n        index++;\n    }\n    // Add more if-checks as required...\n    return index;\n}\n\nprivate long decodeReportMaskExtIfPresent(String[] values, int index, long reportMask) {\n    if (BitUtil.check(reportMask, 29)) {\n        return Long.parseLong(values[index++], 16);\n    }\n    return 0;\n}\n\nprivate int decodeLocation(String[] values, int index, long reportMask, Position position, DateFormat dateFormat) throws ParseException {\n    if (BitUtil.check(reportMask, 30)) {\n        while (isEmpty(values[index])) {\n            index += 1;\n        }\n        position.setValid(Integer.parseInt(values[index++]) > 0);\n        if (!isEmpty(values[index])) {\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Integer.parseInt(values[index++]));\n            position.setAltitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setTime(dateFormat.parse(values[index++]));\n        } else {\n            index += 6; // no location\n            getLastLocation(position, null);\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n    return index;\n}\n\nprivate boolean isStringEmpty(String str) {\n    return str == null || str.isEmpty();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}