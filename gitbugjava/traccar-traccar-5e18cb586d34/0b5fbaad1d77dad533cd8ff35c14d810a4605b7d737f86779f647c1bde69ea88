{
    "generation": "private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n    Position position = new Position(getProtocolName());\n\n    int index = 0;\n    String[] values = sentence.split(\",\");\n\n    index += 1; // header\n    index += 1; // protocol version\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    index += 1; // device name\n    index += 1; // report type\n    index += 1; // canbus state\n    long reportMask = Long.parseLong(values[index++], 16);\n    long reportMaskExt = 0;\n\n    if (BitUtil.check(reportMask, 0)) {\n        String vin = values[index++];\n        if (!vin.isEmpty()) {\n            position.set(Position.KEY_VIN, vin);\n        }\n    }\n    if (BitUtil.check(reportMask, 1)) {\n        String ignition = values[index++];\n        if (!ignition.isEmpty()) {\n            position.set(Position.KEY_IGNITION, Integer.parseInt(ignition) > 0);\n        }\n    }\n    if (BitUtil.check(reportMask, 2)) {\n        String odometer = values[index++];\n        if (!odometer.isEmpty()) {\n            position.set(Position.KEY_OBD_ODOMETER, odometer);\n        }\n    }\n    if (BitUtil.check(reportMask, 3) && index < values.length && !values[index].isEmpty()) {\n        String fuelUsed = values[index++];\n        if (!fuelUsed.isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(fuelUsed));\n        }\n    }\n    if (BitUtil.check(reportMask, 5) && index < values.length && !values[index].isEmpty()) {\n        String rpm = values[index++];\n        if (!rpm.isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(rpm));\n        }\n    }\n    if (BitUtil.check(reportMask, 4) && index < values.length && !values[index].isEmpty()) {\n        String speed = values[index++];\n        if (!speed.isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(speed)));\n        }\n    }\n    if (BitUtil.check(reportMask, 6) && index < values.length && !values[index].isEmpty()) {\n        String coolantTemp = values[index++];\n        if (!coolantTemp.isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(coolantTemp));\n        }\n    }\n    if (BitUtil.check(reportMask, 7) && index < values.length && !values[index].isEmpty()) {\n        String fuelConsumption = values[index++];\n        if (!fuelConsumption.isEmpty() && fuelConsumption.length() > 1) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(fuelConsumption.substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 8) && index < values.length && !values[index].isEmpty()) {\n        String fuelLevel = values[index++];\n        if (!fuelLevel.isEmpty() && fuelLevel.length() > 1) {\n            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(fuelLevel.substring(1)));\n        }\n    }\n    if (BitUtil.check(reportMask, 9) && index < values.length && !values[index].isEmpty()) {\n        String range = values[index++];\n        if (!range.isEmpty()) {\n            position.set(\"range\", Long.parseLong(range) * 100);\n        }\n    }\n    if (BitUtil.check(reportMask, 10) && index < values.length && !values[index].isEmpty()) {\n        String throttle = values[index++];\n        if (!throttle.isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(throttle));\n        }\n    }\n    if (BitUtil.check(reportMask, 11) && index < values.length && !values[index].isEmpty()) {\n        String hours = values[index++];\n        if (!hours.isEmpty()) {\n            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(hours)));\n        }\n    }\n    if (BitUtil.check(reportMask, 12) && index < values.length) {\n        String drivingTime = values[index++];\n        if (!drivingTime.isEmpty()) {\n            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(drivingTime));\n        }\n    }\n    if (BitUtil.check(reportMask, 13) && index < values.length) {\n        String idleHours = values[index++];\n        if (!idleHours.isEmpty()) {\n            position.set(\"idleHours\", Double.parseDouble(idleHours));\n        }\n    }\n    if (BitUtil.check(reportMask, 14) && index < values.length && !values[index].isEmpty()) {\n        String idleFuelConsumption = values[index++];\n        if (!idleFuelConsumption.isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(idleFuelConsumption));\n        }\n    }\n    if (BitUtil.check(reportMask, 15) && index < values.length && !values[index].isEmpty()) {\n        String axleWeight = values[index++];\n        if (!axleWeight.isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(axleWeight));\n        }\n    }\n    if (BitUtil.check(reportMask, 16) && index < values.length && !values[index].isEmpty()) {\n        String tachographInfo = values[index++];\n        if (!tachographInfo.isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(tachographInfo, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 17) && index < values.length && !values[index].isEmpty()) {\n        String indicators = values[index++];\n        if (!indicators.isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(indicators, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 18) && index < values.length && !values[index].isEmpty()) {\n        String lights = values[index++];\n        if (!lights.isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(lights, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 19) && index < values.length && !values[index].isEmpty()) {\n        String doors = values[index++];\n        if (!doors.isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(doors, 16));\n        }\n    }\n    if (BitUtil.check(reportMask, 20) && index < values.length && !values[index].isEmpty()) {\n        String vehicleOverspeed = values[index++];\n        if (!vehicleOverspeed.isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(vehicleOverspeed));\n        }\n    }\n    if (BitUtil.check(reportMask, 21) && index < values.length && !values[index].isEmpty()) {\n        String engineOverspeed = values[index++];\n        if (!engineOverspeed.isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(engineOverspeed));\n        }\n    }\n    if (BitUtil.check(reportMask, 29) && index < values.length) {\n        String reportMaskExtString = values[index++];\n        if (!reportMaskExtString.isEmpty()) {\n            reportMaskExt = Long.parseLong(reportMaskExtString, 16);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 0) && index < values.length && !values[index].isEmpty()) {\n        String adBlueLevel = values[index++];\n        if (!adBlueLevel.isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(adBlueLevel));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 1) && index < values.length && !values[index].isEmpty()) {\n        String axleWeight1 = values[index++];\n        if (!axleWeight1.isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(axleWeight1));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 2) && index < values.length && !values[index].isEmpty()) {\n        String axleWeight3 = values[index++];\n        if (!axleWeight3.isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(axleWeight3));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 3) && index < values.length && !values[index].isEmpty()) {\n        String axleWeight4 = values[index++];\n        if (!axleWeight4.isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(axleWeight4));\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 4) && index < values.length) {\n        index += 1; // tachograph overspeed\n    }\n    if (BitUtil.check(reportMaskExt, 5) && index < values.length) {\n        index += 1; // tachograph motion\n    }\n    if (BitUtil.check(reportMaskExt, 6) && index < values.length) {\n        index += 1; // tachograph direction\n    }\n    if (BitUtil.check(reportMaskExt, 7) && index < values.length && !values[index].isEmpty()) {\n        String adc1 = values[index++];\n        if (!adc1.isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(adc1) * 0.001);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 8) && index < values.length) {\n        index += 1; // pedal breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 9) && index < values.length) {\n        index += 1; // engine breaking factor\n    }\n    if (BitUtil.check(reportMaskExt, 10) && index < values.length) {\n        index += 1; // total accelerator kick-downs\n    }\n    if (BitUtil.check(reportMaskExt, 11) && index < values.length) {\n        index += 1; // total effective engine speed\n    }\n    if (BitUtil.check(reportMaskExt, 12) && index < values.length) {\n        index += 1; // total cruise control time\n    }\n    if (BitUtil.check(reportMaskExt, 13) && index < values.length) {\n        index += 1; // total accelerator kick-down time\n    }\n    if (BitUtil.check(reportMaskExt, 14) && index < values.length) {\n        index += 1; // total brake application\n    }\n    if (BitUtil.check(reportMaskExt, 15) && index < values.length && !values[index].isEmpty()) {\n        String driver1Card = values[index++];\n        if (!driver1Card.isEmpty()) {\n            position.set(\"driver1Card\", driver1Card);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 16) && index < values.length && !values[index].isEmpty()) {\n        String driver2Card = values[index++];\n        if (!driver2Card.isEmpty()) {\n            position.set(\"driver2Card\", driver2Card);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 17) && index < values.length && !values[index].isEmpty()) {\n        String driver1Name = values[index++];\n        if (!driver1Name.isEmpty()) {\n            position.set(\"driver1Name\", driver1Name);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 18) && index < values.length && !values[index].isEmpty()) {\n        String driver2Name = values[index++];\n        if (!driver2Name.isEmpty()) {\n            position.set(\"driver2Name\", driver2Name);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 19) && index < values.length && !values[index].isEmpty()) {\n        String registration = values[index++];\n        if (!registration.isEmpty()) {\n            position.set(\"registration\", registration);\n        }\n    }\n    if (BitUtil.check(reportMaskExt, 20) && index < values.length) {\n        index += 1; // expansion information\n    }\n    if (BitUtil.check(reportMaskExt, 21) && index < values.length) {\n        index += 1; // rapid brakings\n    }\n    if (BitUtil.check(reportMaskExt, 22) && index < values.length) {\n        index += 1; // rapid accelerations\n    }\n    if (BitUtil.check(reportMaskExt, 23) && index < values.length) {\n        index += 1; // engine torque\n    }\n\n    DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    if (BitUtil.check(reportMask, 30)) {\n        while (index < values.length && values[index].isEmpty()) {\n            index += 1;\n        }\n        if (index < values.length) {\n            String valid = values[index++];\n            if (!valid.isEmpty()) {\n                position.setValid(Integer.parseInt(valid) > 0);\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String speed = values[index++];\n                if (!speed.isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speed)));\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    String course = values[index++];\n                    if (!course.isEmpty()) {\n                        position.setCourse(Integer.parseInt(course));\n                    }\n                    if (index < values.length && !values[index].isEmpty()) {\n                        String altitude = values[index++];\n                        if (!altitude.isEmpty()) {\n                            position.setAltitude(Double.parseDouble(altitude));\n                        }\n                        if (index < values.length && !values[index].isEmpty()) {\n                            String longitude = values[index++];\n                            if (!longitude.isEmpty()) {\n                                position.setLongitude(Double.parseDouble(longitude));\n                            }\n                            if (index < values.length && !values[index].isEmpty()) {\n                                String latitude = values[index++];\n                                if (!latitude.isEmpty()) {\n                                    position.setLatitude(Double.parseDouble(latitude));\n                                }\n                                if (index < values.length && !values[index].isEmpty()) {\n                                    String time = values[index++];\n                                    if (!time.isEmpty()) {\n                                        position.setTime(dateFormat.parse(time));\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                index += 6; // no location\n                getLastLocation(position, null);\n            }\n        }\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (BitUtil.check(reportMask, 31)) {\n        index += 4; // cell\n        index += 1; // reserved\n    }\n\n    if (ignoreFixTime && index < values.length && !values[index].isEmpty()) {\n        position.setTime(dateFormat.parse(values[index]));\n    } else if (index < values.length && !values[index].isEmpty()) {\n        position.setDeviceTime(dateFormat.parse(values[index]));\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}