{
    "generation": "@Override\nprotected Object encodeCommand(Command command) {\n\n    ByteBuf content = Unpooled.buffer();\n\n    switch (command.getType()) {\n        case Command.TYPE_POSITION_SINGLE:\n            return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_REQUEST, content);\n        case Command.TYPE_ENGINE_STOP:\n            return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_CLOSE_THE_OIL_DUCT, content);\n        case Command.TYPE_ENGINE_RESUME:\n            return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_RESTORES_THE_OIL_DUCT, content);\n        case Command.TYPE_SET_SPEED_LIMIT:\n            content.writeByte(command.getInteger(Command.KEY_DATA));\n            return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_SPEED_LIMIT, content);\n        case Command.TYPE_SET_ODOMETER:\n            content.writeShort(command.getInteger(Command.KEY_DATA));\n            return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_ODOMETER, content);\n        case Command.TYPE_POSITION_PERIODIC:\n            String[] data = command.getString(Command.KEY_FREQUENCY).split(\";\");\n            ByteBuf periodicContent = Unpooled.buffer(6); // Pre-allocate buffer with capacity for three shorts (6 bytes)\n            periodicContent.writeShort(Integer.valueOf(data[0]));\n            periodicContent.writeShort(Integer.valueOf(data[1]));\n            periodicContent.writeShort(Integer.valueOf(data[2]));\n            // Ensure exactly 6 bytes are written\n            assert periodicContent.readableBytes() == 6 : \"Content buffer should be exactly 6 bytes\";\n            return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_PERIODIC, periodicContent);\n        default:\n            return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}