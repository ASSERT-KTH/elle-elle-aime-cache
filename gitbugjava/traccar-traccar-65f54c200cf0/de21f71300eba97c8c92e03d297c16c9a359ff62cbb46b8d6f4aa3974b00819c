{
    "generation": "// Read X byte data\nif (codec == CODEC_8_EXT) {\n    int cnt = buf.readUnsignedShort();\n    for (int j = 0; j < cnt; j++) {\n        int id = buf.readUnsignedShort();\n        int length = buf.readUnsignedShort();\n        if (id == 256) {\n            position.set(Position.KEY_VIN,\n                    buf.readSlice(length).toString(StandardCharsets.US_ASCII));\n        } else if (id == 281) {\n            position.set(Position.KEY_DTCS,\n                    buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));\n        } else if (id == 385) {\n            ByteBuf data = buf.readSlice(length);\n            data.readUnsignedByte(); // data part\n            int index = 1;\n            while (data.isReadable()) {\n                int flags = data.readUnsignedByte();\n                if (BitUtil.from(flags, 4) > 0) {\n                    position.set(\"beacon\" + index + \"Uuid\", ByteBufUtil.hexDump(data.readSlice(16)));\n                    position.set(\"beacon\" + index + \"Major\", data.readUnsignedShort());\n                    position.set(\"beacon\" + index + \"Minor\", data.readUnsignedShort());\n                } else {\n                    position.set(\"beacon\" + index + \"Namespace\", ByteBufUtil.hexDump(data.readSlice(10)));\n                    position.set(\"beacon\" + index + \"Instance\", ByteBufUtil.hexDump(data.readSlice(6)));\n                }\n                position.set(\"beacon\" + index + \"Rssi\", (int) data.readByte());\n                if (BitUtil.check(flags, 1)) {\n                    position.set(\"beacon\" + index + \"Battery\", data.readUnsignedShort() * 0.01);\n                }\n                if (BitUtil.check(flags, 2)) {\n                    position.set(\"beacon\" + index + \"Temp\", data.readUnsignedShort());\n                }\n                index += 1;\n            }\n        } else {\n            position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}