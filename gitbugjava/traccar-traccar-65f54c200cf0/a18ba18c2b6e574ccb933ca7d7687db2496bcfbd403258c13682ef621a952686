{
    "generation": "private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {\n\n    int globalMask = 0x0f;\n\n    if (codec == CODEC_GH3000) {\n\n        // existing code...\n\n    } else {\n\n        position.setTime(new Date(buf.readLong()));\n\n        position.set(\"priority\", buf.readUnsignedByte());\n\n        position.setLongitude(buf.readInt() / 10000000.0);\n        position.setLatitude(buf.readInt() / 10000000.0);\n        position.setAltitude(buf.readShort());\n        position.setCourse(buf.readUnsignedShort());\n\n        int satellites = buf.readUnsignedByte();\n        position.set(Position.KEY_SATELLITES, satellites);\n\n        position.setValid(satellites != 0);\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n\n        position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));\n        if (codec == CODEC_16) {\n            buf.readUnsignedByte(); // generation type\n        }\n\n        readExtByte(buf, codec, CODEC_8_EXT); // total IO data records\n\n    }\n\n    // Read 1 byte data\n    if (BitUtil.check(globalMask, 1)) {\n        int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n        for (int j = 0; j < cnt; j++) {\n            decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);\n        }\n    }\n\n    // Read 2 byte data\n    if (BitUtil.check(globalMask, 2)) {\n        int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n        for (int j = 0; j < cnt; j++) {\n            decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);\n        }\n    }\n\n    // Read 4 byte data\n    if (BitUtil.check(globalMask, 3)) {\n        int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n        for (int j = 0; j < cnt; j++) {\n            decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);\n        }\n    }\n\n    // Read 8 byte data\n    if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {\n        int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n        for (int j = 0; j < cnt; j++) {\n            decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);\n        }\n    }\n\n    // Read 16 byte data\n    if (extended) {\n        int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n        for (int j = 0; j < cnt; j++) {\n            int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);\n            position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));\n        }\n    }\n\n    // Read X byte data\n    if (codec == CODEC_8_EXT) {\n        int cnt = buf.readUnsignedShort();\n        for (int j = 0; j < cnt; j++) {\n            int id = buf.readUnsignedShort();\n            int length = buf.readUnsignedShort();\n            if (id == 256) {\n                position.set(Position.KEY_VIN,\n                        buf.readSlice(length).toString(StandardCharsets.US_ASCII));\n            } else if (id == 281) {\n                position.set(Position.KEY_DTCS,\n                        buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));\n            } else if (id == 385) {\n                ByteBuf data = buf.readSlice(length);\n                data.readUnsignedByte(); // data part\n                int index = 1;\n                while (data.isReadable()) {\n                    int flags = data.readUnsignedByte();\n                    if (BitUtil.from(flags, 4) > 0) {\n                        position.set(\"beacon\" + index + \"Uuid\", ByteBufUtil.hexDump(data.readSlice(16)));\n                        position.set(\"beacon\" + index + \"Major\", data.readUnsignedShort());\n                        position.set(\"beacon\" + index + \"Minor\", data.readUnsignedShort());\n                    } else {\n                        position.set(\"beacon\" + index + \"Namespace\", ByteBufUtil.hexDump(data.readSlice(10)));\n                        position.set(\"beacon\" + index + \"Instance\", ByteBufUtil.hexDump(data.readSlice(6)));\n                    }\n                    position.set(\"beacon\" + index + \"Rssi\", (int) data.readByte());\n                    if (BitUtil.check(flags, 1)) {\n                        position.set(\"beacon\" + index + \"Battery\", data.readUnsignedShort() * 0.01);\n                    }\n                    if (BitUtil.check(flags, 2)) {\n                        position.set(\"beacon\" + index + \"Temp\", data.readUnsignedShort());\n                    }\n                    index += 1;\n                }\n            } else if (id == 397) {\n                ByteBuf data = buf.readSlice(length);\n                int index = 1;\n                while (data.isReadable()) {\n                    String mac = ByteBufUtil.hexDump(data.readSlice(6));\n                    int rssi = data.readByte();\n                    int flags = data.readUnsignedShort();\n                    if (BitUtil.check(flags, 0)) {\n                        double temperature = data.readShort() / 100.0;\n                        position.set(\"tag\" + index + \"Temperature\", temperature);\n                    }\n                    if (BitUtil.check(flags, 1)) {\n                        double humidity = data.readUnsignedShort() / 100.0;\n                        position.set(\"tag\" + index + \"Humidity\", humidity);\n                    }\n                    if (BitUtil.check(flags, 2)) {\n                        int battery = data.readUnsignedShort();\n                        position.set(\"tag\" + index + \"Battery\", battery);\n                    }\n                    // Other sensor data can be added here\n                    index++;\n                }\n            } else {\n                position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));\n            }\n        }\n    }\n\n    decodeNetwork(position, model);\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}