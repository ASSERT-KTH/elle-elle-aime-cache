{
    "generation": " private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {\n        int globalMask = 0x0f;\n        long time;\n\n        if (codec == CODEC_GH3000) {\n            time = buf.readUnsignedInt() & 0x3fffffff;\n            time += 1167609600; // 2007-01-01 00:00:00\n            globalMask = buf.readUnsignedByte();\n        } else {\n            time = buf.readLong();\n        }\n\n        if (BitUtil.check(globalMask, 0)) {\n            position.setTime(new Date(time * 1000));\n            int locationMask = buf.readUnsignedByte();\n            decodeParameters(position, buf, locationMask, codec, model);\n        } else {\n            getLastLocation(position, new Date(time * 1000));\n        }\n\n        // Read 1 byte data\n        if (BitUtil.check(globalMask, 1)) {\n            decodeData(position, buf, 1, codec, model);\n        }\n\n        // Read 2 byte data\n        if (BitUtil.check(globalMask, 2)) {\n            decodeData(position, buf, 2, codec, model);\n        }\n\n        // Read 4 byte data\n        if (BitUtil.check(globalMask, 3)) {\n            decodeData(position, buf, 4, codec, model);\n        }\n\n        // Read 8 byte data\n        if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {\n            decodeData(position, buf, 8, codec, model);\n        }\n\n        // Read X byte data\n        if (codec == CODEC_8_EXT) {\n            decodeXByteData(position, buf, codec, model);\n        }\n\n        decodeNetwork(position, model);\n    }\n\n    private void decodeParameters(Position position, ByteBuf buf, int mask, int codec, String model) {\n        if (BitUtil.check(mask, 0)) {\n            position.setLatitude(buf.readFloat());\n            position.setLongitude(buf.readFloat());\n        }\n\n        if (BitUtil.check(mask, 1)) {\n            position.setAltitude(buf.readUnsignedShort());\n        }\n\n        if (BitUtil.check(mask, 2)) {\n            position.setCourse(buf.readUnsignedByte() * 360.0 / 256);\n        }\n\n        if (BitUtil.check(mask, 3)) {\n            position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\n        }\n\n        if (BitUtil.check(mask, 4)) {\n            position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n        }\n\n        if (BitUtil.check(mask, 5)) {\n            CellTower cellTower = CellTower.fromLacCid(getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());\n            decodeSignalAndOperator(cellTower, buf, mask, position);\n\n            position.setNetwork(new Network(cellTower));\n\n        } else {\n            decodeSignalAndOperator(null, buf, mask, position);\n        }\n    }\n\n    private void decodeSignalAndOperator(CellTower cellTower, ByteBuf buf, int mask, Position position) {\n        if (BitUtil.check(mask, 6)) {\n            if (cellTower != null) {\n                cellTower.setSignalStrength(buf.readUnsignedByte());\n            } else {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n        }\n\n        if (BitUtil.check(mask, 7)) {\n            if (cellTower != null) {\n                cellTower.setOperator(buf.readUnsignedInt());\n            } else {\n                position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());\n            }\n        }\n    }\n\n    private void decodeData(Position position, ByteBuf buf, int size, int codec, String model) {\n        int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n        for (int j = 0; j < cnt; j++) {\n            decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, size, codec, model);\n        }\n    }\n\n    private void decodeXByteData(Position position, ByteBuf buf, int codec, String model) {\n        int cnt = buf.readUnsignedShort();\n        for (int j = 0; j < cnt; j++) {\n            int id = buf.readUnsignedShort();\n            int length = buf.readUnsignedShort();\n            if (id == 256) {\n                position.set(Position.KEY_VIN, buf.readSlice(length).toString(StandardCharsets.US_ASCII));\n            } else if (id == 281) {\n                position.set(Position.KEY_DTCS, buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));\n            } else if (id == 385) {\n                decodeBeaconData(position, buf, length);\n            } else {\n                position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));\n            }\n        }\n    }\n\n    private void decodeBeaconData(Position position, ByteBuf buf, int length) {\n        ByteBuf data = buf.readSlice(length);\n        data.readUnsignedByte(); // data part\n        int index = 1;\n        while (data.isReadable()) {\n            int flags = data.readUnsignedByte();\n            if (BitUtil.from(flags, 4) > 0) {\n                position.set(\"beacon\" + index + \"Uuid\", ByteBufUtil.hexDump(data.readSlice(16)));\n                position.set(\"beacon\" + index + \"Major\", data.readUnsignedShort());\n                position.set(\"beacon\" + index + \"Minor\", data.readUnsignedShort());\n            } else {\n                position.set(\"beacon\" + index + \"Namespace\", ByteBufUtil.hexDump(data.readSlice(10)));\n                position.set(\"beacon\" + index + \"Instance\", ByteBufUtil.hexDump(data.readSlice(6)));\n            }\n            position.set(\"beacon\" + index + \"Rssi\", (int) data.readByte());\n            if (BitUtil.check(flags, 1)) {\n                position.set(\"beacon\" + index + \"Battery\", data.readUnsignedShort() * 0.01);\n            }\n            if (BitUtil.check(flags, 2)) {\n                position.set(\"beacon\" + index + \"Temp\", data.readUnsignedShort());\n            }\n            index += 1;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}