{
    "generation": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedIntLE(); // remaining cache\n        int count = buf.readUnsignedShortLE();\n\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            buf.readUnsignedShortLE(); // length\n            buf.readUnsignedShortLE(); // index\n\n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.readableBytes() > 0 && buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        if (buf.readableBytes() > 0) {\n                            position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        }\n                        break;\n                    case 0x05:\n                        if (buf.readableBytes() > 0) {\n                            position.setValid(buf.readUnsignedByte() > 0);\n                        }\n                        break;\n                    case 0x06:\n                        if (buf.readableBytes() > 0) {\n                            position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        }\n                        break;\n                    case 0x07:\n                        if (buf.readableBytes() > 0) {\n                            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        }\n                        break;\n                    case 0x14:\n                        if (buf.readableBytes() > 0) {\n                            position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        }\n                        break;\n                    case 0x15:\n                        if (buf.readableBytes() > 0) {\n                            position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        }\n                        break;\n                    case 0x47:\n                        if (buf.readableBytes() > 0) {\n                            int lockState = buf.readUnsignedByte();\n                            if (lockState > 0) {\n                                position.set(Position.KEY_LOCK, lockState == 2);\n                            }\n                        }\n                        break;\n                    case 0x97:\n                        if (buf.readableBytes() > 0) {\n                            position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        }\n                        break;\n                    case 0x9D:\n                        if (buf.readableBytes() > 0) {\n                            position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        }\n                        break;\n                    case 0xFE69:\n                        if (buf.readableBytes() > 0) {\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        }\n                        break;\n                    default:\n                        if (buf.readableBytes() > 0) {\n                            buf.readUnsignedByte();\n                        }\n                        break;\n                }\n            }\n\n            // ... (rest of the function remains unchanged)\n        }\n\n        return positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}