{
    "generation": "private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    List<Position> positions = new LinkedList<>();\n\n    // Check if there's enough data to proceed\n    if (buf.readableBytes() < 26) { // 15 (imei) + 1 (comma) + 3 (skip) + 1 (skip) + 4 (remaining cache) + 2 (count)\n        return null;\n    }\n\n    buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n    if (buf.readableBytes() < 15) { // imei length\n        return null;\n    }\n    String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1 + 3 + 1);\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    if (buf.readableBytes() < 6) { // remaining cache (4) + count (2)\n        return null;\n    }\n    buf.readUnsignedIntLE(); // remaining cache\n    int count = buf.readUnsignedShortLE();\n\n    for (int i = 0; i < count; i++) {\n        if (buf.readableBytes() < 4) { // length (2) + index (2)\n            break;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedShortLE(); // index\n\n        int paramCount;\n        while ((paramCount = buf.readUnsignedByte()) > 0) {\n            for (int j = 0; j < paramCount; j++) {\n                if (buf.readableBytes() < 1) { // id\n                    break;\n                }\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id;\n                if (extension) {\n                    if (buf.readableBytes() < 2) { // id (2)\n                        break;\n                    }\n                    buf.readByte(); // skip 0xFE\n                    id = buf.readUnsignedShort();\n                } else {\n                    id = buf.readUnsignedByte();\n                }\n                switch (id) {\n                    case 0x01:\n                        if (buf.readableBytes() < 1) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        if (buf.readableBytes() < 1) { // value\n                            break;\n                        }\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        if (buf.readableBytes() < 1) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        if (buf.readableBytes() < 1) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        if (buf.readableBytes() < 1) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        if (buf.readableBytes() < 1) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        if (buf.readableBytes() < 1) { // value\n                            break;\n                        }\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        if (buf.readableBytes() < 1) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        if (buf.readableBytes() < 1) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        if (buf.readableBytes() < 1) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        if (buf.readableBytes() < 1) { // skip value\n                            break;\n                        }\n                        buf.readUnsignedByte();\n                        break;\n                }\n            }\n\n            // Additional parameters with 2-byte ids\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                if (buf.readableBytes() < 1) { // id\n                    break;\n                }\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id;\n                if (extension) {\n                    if (buf.readableBytes() < 2) { // id (2)\n                        break;\n                    }\n                    buf.readByte(); // skip 0xFE\n                    id = buf.readUnsignedShort();\n                } else {\n                    id = buf.readUnsignedByte();\n                }\n                switch (id) {\n                    case 0x08:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        if (buf.readableBytes() < 2) { // value\n                            break;\n                        }\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                        break;\n                    default:\n                        if (buf.readableBytes() < 2) { // skip value\n                            break;\n                        }\n                        buf.readUnsignedShortLE();\n                        break;\n                }\n            }\n\n            // Additional parameters with 4-byte ids\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                if (buf.readableBytes() < 1) { // id\n                    break;\n                }\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id;\n                if (extension) {\n                    if (buf.readableBytes() < 2) { // id (2)\n                        break;\n                    }\n                    buf.readByte(); // skip 0xFE\n                    id = buf.readUnsignedShort();\n                } else {\n                    id = buf.readUnsignedByte();\n                }\n                if (buf.readableBytes() < 1) { // length\n                    break;\n                }\n                int length = buf.readUnsignedByte();\n                switch (id) {\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        if (buf.readableBytes() < length) { // label and value\n                            break;\n                        }\n                        buf.readUnsignedByte(); // label\n                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                        buf.skipBytes(length - 3); // skip remaining data\n                        break;\n                    case 0xFE31:\n                        if (buf.readableBytes() < length) { // alarm protocol, alarm type, and remaining data\n                            break;\n                        }\n                        buf.readUnsignedByte(); // alarm protocol\n                        buf.readUnsignedByte(); // alarm type\n                        buf.skipBytes(length - 2);\n                        break;\n                    case 0xFEA8:\n                        if (buf.readableBytes() < length) { // battery status, battery level, and battery alert\n                            break;\n                        }\n                        buf.readUnsignedByte(); // battery status\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        buf.readUnsignedByte(); // battery alert\n                        buf.skipBytes(length - 3); // skip remaining data\n                        break;\n                    default:\n                        if (buf.readableBytes() < length) { // skip data\n                            break;\n                        }\n                        buf.skipBytes(length);\n                        break;\n                }\n            }\n\n            positions.add(position);\n        }\n\n    return positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}