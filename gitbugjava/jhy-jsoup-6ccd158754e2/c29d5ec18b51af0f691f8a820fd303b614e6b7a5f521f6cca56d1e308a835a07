{
    "generation": "private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) {\n    for (int i = 0; i < s.length(); ) {\n        int c = s.codePointAt(i);\n        if (c == ' ') {\n            sb.append(spaceAsPlus ? '+' : \"%20\");\n        } else if (c > 127) {\n            appendPercentEncodedUtf8(c, sb);\n        } else {\n            sb.append((char) c);\n        }\n        i += Character.charCount(c);\n    }\n}\n\nprivate static void appendPercentEncodedUtf8(int codePoint, StringBuilder sb) {\n    if (codePoint <= 0x7F) {\n        appendPercentEncodedByte((byte) codePoint, sb);\n    } else if (codePoint <= 0x7FF) {\n        byte b1 = (byte) (0xC0 | (codePoint >> 6));\n        byte b2 = (byte) (0x80 | (codePoint & 0x3F));\n        appendPercentEncodedByte(b1, sb);\n        appendPercentEncodedByte(b2, sb);\n    } else if (codePoint <= 0xFFFF) {\n        byte b1 = (byte) (0xE0 | (codePoint >> 12));\n        byte b2 = (byte) (0x80 | ((codePoint >> 6) & 0x3F));\n        byte b3 = (byte) (0x80 | (codePoint & 0x3F));\n        appendPercentEncodedByte(b1, sb);\n        appendPercentEncodedByte(b2, sb);\n        appendPercentEncodedByte(b3, sb);\n    } else if (codePoint <= 0x10FFFF) {\n        byte b1 = (byte) (0xF0 | (codePoint >> 18));\n        byte b2 = (byte) (0x80 | ((codePoint >> 12) & 0x3F));\n        byte b3 = (byte) (0x80 | ((codePoint >> 6) & 0x3F));\n        byte b4 = (byte) (0x80 | (codePoint & 0x3F));\n        appendPercentEncodedByte(b1, sb);\n        appendPercentEncodedByte(b2, sb);\n        appendPercentEncodedByte(b3, sb);\n        appendPercentEncodedByte(b4, sb);\n    } else {\n        throw new IllegalArgumentException(\"Invalid code point: \" + codePoint);\n    }\n}\n\nprivate static void appendPercentEncodedByte(byte b, StringBuilder sb) {\n    sb.append('%')\n      .append(Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)))\n      .append(Character.toUpperCase(Character.forDigit(b & 0xF, 16)));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}