{
    "generation": "/**\n * Appends the given string to the provided string builder as ASCII, with space normalization.\n * \n * @param s the string to append\n * @param spaceAsPlus whether to encode spaces as '+' (e.g., for query params)\n * @param sb the string builder to append to\n * @throws UnsupportedEncodingException if the encoding fails\n */\nprivate static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {\n    // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.\n    for (int i = 0; i < s.length(); i++) {\n        int c = s.codePointAt(i);\n        if (c == ' ') {\n            sb.append(spaceAsPlus? '+' : \"%20\");\n        } else if (c > 127) { // out of ascii range\n            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());\n            sb.append(encoded.replace(\"%3F\", \"\"));\n            // ^^ is a bit heavy-handed - if perf critical, we could optimize\n        } else {\n            sb.append((char) c);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}