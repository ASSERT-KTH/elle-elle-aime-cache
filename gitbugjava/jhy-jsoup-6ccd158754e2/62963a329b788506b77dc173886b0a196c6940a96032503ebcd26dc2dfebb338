{
    "generation": "/**\n * Appends a string to a StringBuilder, performing minimal Unicode to ASCII normalization and URL encoding for non-ASCII characters.\n * \n * @param s              the input string\n * @param spaceAsPlus    whether to replace spaces with '+' or \"%20\"\n * @param sb             the StringBuilder to append to\n * @throws UnsupportedEncodingException if the UTF-8 charset is not supported (should never occur)\n */\nprivate static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {\n    for (int i = 0; i < s.length(); i++) {\n        int c = s.codePointAt(i);\n        if (c == ' ') {\n            sb.append(spaceAsPlus? '+' : \"%20\");\n        } else if (c > 127) { // out of ascii range\n            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());\n            // Remove the trailing '%' from supplementary character encodings (e.g., %F0%9F%92%A9%3F -> %F0%9F%92%A9)\n            if (encoded.length() > 3 && encoded.endsWith(\"%3F\")) {\n                sb.append(encoded.substring(0, encoded.length() - 3));\n            } else {\n                sb.append(encoded);\n            }\n        } else {\n            sb.append((char) c);\n        }\n        // Advance the index to account for supplementary characters (which occupy 2 code units)\n        if (Character.charCount(c) == 2) {\n            i++;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}