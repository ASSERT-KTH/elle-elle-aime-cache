{
    "generation": "private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    int length = buf.readUnsignedByte();\n    int dataLength = length - 5;\n    int type = buf.readUnsignedByte();\n\n    Position position = new Position(getProtocolName());\n    DeviceSession deviceSession = null;\n    if (type!= MSG_LOGIN) {\n        deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n    }\n\n    //...\n\n    else if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n        position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n    }\n\n    //...\n\n    if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n        return null; // multi-lbs message\n    }\n\n    if (hasGps(type)) {\n        decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n    } else {\n        getLastLocation(position, null);\n    }\n\n    if (hasLbs(type) && buf.readableBytes() > 6) {\n        boolean hasLength = hasStatus(type)\n                && type!= MSG_LBS_STATUS\n                && type!= MSG_LBS_ALARM\n                && (type!= MSG_GPS_LBS_STATUS_1 || variant!= Variant.VXT01);\n        decodeLbs(position, buf, type, hasLength);\n    }\n\n    if (hasStatus(type)) {\n        decodeStatus(position, buf);\n        if (variant == Variant.OBD6) {\n            int signal = buf.readUnsignedShort();\n            int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n            position.set(Position.KEY_SATELLITES, satellites);\n            position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n            position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n            buf.readUnsignedByte(); // language\n            // Change here, was: position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10); \n            buf.readUnsignedByte(); // working mode\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n        } \n        //...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}