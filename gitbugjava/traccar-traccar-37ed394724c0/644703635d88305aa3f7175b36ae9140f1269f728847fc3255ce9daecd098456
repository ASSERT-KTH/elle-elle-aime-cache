{
    "generation": "private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    // existing code...\n\n    if (type == MSG_STATUS && buf.readableBytes() == 22) {\n        // existing code...\n\n        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n\n        // existing code...\n    }\n\n    // existing code...\n\n    if (isSupported(type)) {\n        // existing code...\n\n        if (hasStatus(type)) {\n            decodeStatus(position, buf);\n            if (variant == Variant.OBD6) {\n                int signal = buf.readUnsignedShort();\n                int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                position.set(Position.KEY_SATELLITES, satellites);\n                position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                buf.readUnsignedByte(); // language\n                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n            } else {\n                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                short alarmExtension = buf.readUnsignedByte();\n                if (variant != Variant.VXT01) {\n                    position.set(Position.KEY_ALARM, decodeAlarm(alarmExtension));\n                }\n            }\n        }\n\n        // existing code...\n    }\n\n    // existing code...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}