{
    "generation": "@Test\npublic void testExpression() throws Exception {\n    AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(TestConfiguration.class);\n    ExpressionService service = context.getBean(ExpressionService.class);\n    service.service1();\n    assertThat(service.getCount()).isEqualTo(3);\n    assertThatExceptionOfType(Exception.class).isThrownBy(() -> service.service2());\n    assertThat(service.getCount()).isEqualTo(4);\n    service.service3();\n    assertThat(service.getCount()).isEqualTo(9);\n    RetryConfiguration config = context.getBean(RetryConfiguration.class);\n    AnnotationAwareRetryOperationsInterceptor advice = (AnnotationAwareRetryOperationsInterceptor) new DirectFieldAccessor(\n            config).getPropertyValue(\"advice\");\n    @SuppressWarnings(\"unchecked\")\n    Map<Object, Map<Method, MethodInterceptor>> delegates = (Map<Object, Map<Method, MethodInterceptor>>) new DirectFieldAccessor(\n            advice).getPropertyValue(\"delegates\");\n    MethodInterceptor interceptor = delegates.get(target(service))\n            .get(ExpressionService.class.getDeclaredMethod(\"service3\"));\n    RetryTemplate template = (RetryTemplate) new DirectFieldAccessor(interceptor)\n            .getPropertyValue(\"retryOperations\");\n    DirectFieldAccessor templateAccessor = new DirectFieldAccessor(template);\n    ExponentialBackOffPolicy backOff = (ExponentialBackOffPolicy) templateAccessor\n            .getPropertyValue(\"backOffPolicy\");\n    assertThat(backOff.getInitialInterval().toMillis()).isEqualTo(1L);\n    assertThat(backOff.getMaxInterval().toMillis()).isEqualTo(5L);\n    assertThat(backOff.getMultiplier()).isEqualTo(1.1);\n    SimpleRetryPolicy retryPolicy = (SimpleRetryPolicy) templateAccessor.getPropertyValue(\"retryPolicy\");\n    assertThat(retryPolicy.getMaxAttempts()).isEqualTo(5);\n    service.service4();\n    assertThat(service.getCount()).isEqualTo(11);\n    interceptor = delegates.get(target(service)).get(ExpressionService.class.getDeclaredMethod(\"service4\"));\n    template = (RetryTemplate) new DirectFieldAccessor(interceptor).getPropertyValue(\"retryOperations\");\n    templateAccessor = new DirectFieldAccessor(template);\n    FixedBackOffPolicy fbp = (FixedBackOffPolicy) templateAccessor.getPropertyValue(\"backOffPolicy\");\n    assertThat(fbp.getBackOffPeriod()).isEqualTo(5000L);\n    service.service5();\n    assertThat(service.getCount()).isEqualTo(12);\n    context.close();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}