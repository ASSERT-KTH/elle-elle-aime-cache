{
    "generation": "public BackOffPolicy build() {\n    if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {\n        ExponentialBackOffPolicy policy;\n        if (Boolean.TRUE.equals(this.random)) {\n            policy = new ExponentialRandomBackOffPolicy();\n        } else {\n            policy = new ExponentialBackOffPolicy();\n        }\n        if (this.delay != null) {\n            if (this.delay instanceof String) {\n                policy.setInitialInterval(Long.parseLong((String) this.delay));\n            } else {\n                policy.setInitialInterval((Long) this.delay);\n            }\n        }\n        if (this.delaySupplier != null) {\n            policy.initialIntervalSupplier(this.delaySupplier);\n        }\n        if (this.multiplier != null) {\n            if (this.multiplier instanceof String) {\n                policy.setMultiplier(Double.parseDouble((String) this.multiplier));\n            } else {\n                policy.setMultiplier((Double) this.multiplier);\n            }\n        }\n        if (this.multiplierSupplier != null) {\n            policy.multiplierSupplier(this.multiplierSupplier);\n        }\n        if (this.maxDelay != null && this.delay != null) {\n            if (this.maxDelay instanceof String) {\n                long maxDelayValue = Long.parseLong((String) this.maxDelay);\n                policy.setMaxInterval(maxDelayValue > ((Long) this.delay) ? maxDelayValue : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);\n            } else {\n                policy.setMaxInterval((Long) this.maxDelay > (Long) this.delay ? (Long) this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);\n            }\n        }\n        if (this.maxDelaySupplier != null) {\n            policy.maxIntervalSupplier(this.maxDelaySupplier);\n        }\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    }\n    if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n        UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n        if (this.delay != null) {\n            if (this.delay instanceof String) {\n                policy.setMinBackOffPeriod(Long.parseLong((String) this.delay));\n            } else {\n                policy.setMinBackOffPeriod((Long) this.delay);\n            }\n        }\n        if (this.delaySupplier != null) {\n            policy.minBackOffPeriodSupplier(this.delaySupplier);\n        }\n        if (this.maxDelay != null) {\n            if (this.maxDelay instanceof String) {\n                policy.setMaxBackOffPeriod(Long.parseLong((String) this.maxDelay));\n            } else {\n                policy.setMaxBackOffPeriod((Long) this.maxDelay);\n            }\n        }\n        if (this.maxDelaySupplier != null) {\n            policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n        }\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    }\n    FixedBackOffPolicy policy = new FixedBackOffPolicy();\n    if (this.delay != null) {\n        if (this.delay instanceof String) {\n            policy.setBackOffPeriod(Long.parseLong((String) this.delay));\n        } else {\n            policy.setBackOffPeriod((Long) this.delay);\n        }\n    }\n    if (this.sleeper != null) {\n        policy.setSleeper(this.sleeper);\n    }\n    return policy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}