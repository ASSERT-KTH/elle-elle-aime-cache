{
    "generation": "public BackOffPolicy build() {\n    // Check if multiplier is set (either through a fixed value or a supplier)\n    if ((this.multiplier != null && this.multiplier > 0) || this.multiplierSupplier != null) {\n        ExponentialBackOffPolicy policy;\n        // Decide between random and non-random exponential backoff\n        if (Boolean.TRUE.equals(this.random)) {\n            policy = new ExponentialRandomBackOffPolicy();\n        } else {\n            policy = new ExponentialBackOffPolicy();\n        }\n        // Set initial interval if provided\n        if (this.delay != null) {\n            policy.setInitialInterval(this.delay);\n        }\n        // Set initial interval supplier if provided\n        if (this.delaySupplier != null) {\n            policy.initialIntervalSupplier(this.delaySupplier);\n        }\n        // Set multiplier if provided\n        if (this.multiplier != null) {\n            policy.setMultiplier(this.multiplier);\n        }\n        // Set multiplier supplier if provided\n        if (this.multiplierSupplier != null) {\n            policy.multiplierSupplier(this.multiplierSupplier);\n        }\n        // Set max interval if both delay and maxDelay are provided and delay is not greater than maxDelay\n        if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n            policy.setMaxInterval(this.maxDelay);\n        } else if (this.maxDelay != null) {\n            // If maxDelay is provided but not greater than delay, set it directly\n            policy.setMaxInterval(this.maxDelay);\n        } else {\n            // Otherwise, use the default max interval\n            policy.setMaxInterval(ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);\n        }\n        // Set max interval supplier if provided\n        if (this.maxDelaySupplier != null) {\n            policy.maxIntervalSupplier(this.maxDelaySupplier);\n        }\n        // Set sleeper if provided\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    } else if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n        // Create uniform random backoff policy if maxDelay > delay and no multiplier is set\n        UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n        if (this.delay != null) {\n            policy.setMinBackOffPeriod(this.delay);\n        }\n        if (this.delaySupplier != null) {\n            policy.minBackOffPeriodSupplier(this.delaySupplier);\n        }\n        if (this.maxDelay != null) {\n            policy.setMaxBackOffPeriod(this.maxDelay);\n        }\n        if (this.maxDelaySupplier != null) {\n            policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n        }\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    } else {\n        // Fallback to fixed backoff policy\n        FixedBackOffPolicy policy = new FixedBackOffPolicy();\n        if (this.delay != null) {\n            policy.setBackOffPeriod(this.delay);\n        }\n        if (this.sleeper != null) {\n            policy.setSleeper(this.sleeper);\n        }\n        return policy;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}