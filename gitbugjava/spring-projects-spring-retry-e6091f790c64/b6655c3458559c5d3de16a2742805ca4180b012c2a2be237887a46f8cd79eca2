{
    "generation": "/**\n * Builds the {@link BackOffPolicy} with the given parameters.\n * @return the {@link BackOffPolicy} instance\n */\npublic BackOffPolicy build() {\n    BackOffPolicy policy;\n    if ((this.multiplier != null && this.multiplier > 0) || this.multiplierSupplier != null) {\n        if (Boolean.TRUE.equals(this.random)) {\n            policy = new ExponentialRandomBackOffPolicy();\n        }\n        else {\n            policy = new ExponentialBackOffPolicy();\n        }\n        if (this.delay != null) {\n            policy.setInitialInterval(this.delay);\n        }\n        if (this.delaySupplier != null) {\n            if (policy instanceof ExponentialBackOffPolicy) {\n                ((ExponentialBackOffPolicy) policy).initialIntervalSupplier(this.delaySupplier);\n            } else {\n                // Handle for ExponentialRandomBackOffPolicy if it's supposed to be supported\n            }\n        }\n        if (this.multiplier != null) {\n            ((ExponentialBackOffPolicy) policy).setMultiplier(this.multiplier);\n        }\n        if (this.multiplierSupplier != null) {\n            ((ExponentialBackOffPolicy) policy).multiplierSupplier(this.multiplierSupplier);\n        }\n        if (this.maxDelay != null && this.delay != null) {\n            ((ExponentialBackOffPolicy) policy).setMaxInterval(\n                    this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);\n        }\n        if (this.maxDelaySupplier != null) {\n            if (policy instanceof ExponentialBackOffPolicy) {\n                ((ExponentialBackOffPolicy) policy).maxIntervalSupplier(this.maxDelaySupplier);\n            } else {\n                // Handle for ExponentialRandomBackOffPolicy if it's supposed to be supported\n            }\n        }\n    } else if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n        policy = new UniformRandomBackOffPolicy();\n        if (this.delay != null) {\n            ((UniformRandomBackOffPolicy) policy).setMinBackOffPeriod(this.delay);\n        }\n        if (this.delaySupplier != null) {\n            ((UniformRandomBackOffPolicy) policy).minBackOffPeriodSupplier(this.delaySupplier);\n        }\n        if (this.maxDelay != null) {\n            ((UniformRandomBackOffPolicy) policy).setMaxBackOffPeriod(this.maxDelay);\n        }\n        if (this.maxDelaySupplier != null) {\n            ((UniformRandomBackOffPolicy) policy).maxBackOffPeriodSupplier(this.maxDelaySupplier);\n        }\n    } else {\n        policy = new FixedBackOffPolicy();\n        if (this.delay != null) {\n            ((FixedBackOffPolicy) policy).setBackOffPeriod(this.delay);\n        }\n    }\n    if (this.sleeper != null) {\n        policy.setSleeper(this.sleeper);\n    }\n    return policy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}