{
    "generation": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n        decodeCoordinates(position, buf);\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n        if (buf.readableBytes() == 20) {\n            buf.skipBytes(4); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); \n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); \n            return position;\n        }\n        while (buf.readableBytes() > 2) {\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                // ...\n                case 0xD4:\n                    position.set(\"value\", buf.readUnsignedByte());\n                    break;\n                // ...\n            }\n            buf.readerIndex(endIndex);\n        }\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}