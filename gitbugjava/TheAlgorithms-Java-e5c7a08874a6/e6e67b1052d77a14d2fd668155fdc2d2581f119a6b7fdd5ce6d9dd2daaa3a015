{
    "generation": "/**\n * Evaluates the given postfix expression string and returns the result.\n * \n * @param exp the postfix expression as a string\n * @return the result of the evaluated expression\n * @throws IllegalArgumentException if the expression is invalid (unknown operation or improper postfix notation)\n * @throws ArithmeticException if division by zero occurs\n */\npublic static int postfixEvaluate(final String exp) {\n    Stack<Integer> s = new Stack<Integer>();\n    Scanner tokens = new Scanner(exp);\n\n    while (tokens.hasNext()) {\n        if (tokens.hasNextInt()) {\n            s.push(tokens.nextInt()); // If int then push to stack\n        } else { // else pop top two values and perform the operation\n            if (s.size() < 2) { // Check if stack has at least two elements\n                throw new IllegalArgumentException(\"exp is not a proper postfix expression (too few arguments).\");\n            }\n            int num2 = s.pop();\n            int num1 = s.pop();\n            String op = tokens.next();\n\n            switch (op) {\n                case \"+\" -> s.push(num1 + num2);\n                case \"-\" -> s.push(num1 - num2);\n                case \"*\" -> s.push(num1 * num2);\n                case \"/\" -> {\n                    if (num2 == 0) {\n                        throw new ArithmeticException(\"Division by zero in exp.\");\n                    }\n                    s.push(num1 / num2);\n                }\n                default -> throw new IllegalArgumentException(\"exp contains an unknown operation.\");\n            }\n        }\n    }\n    tokens.close();\n    if (s.size()!= 1) {\n        throw new IllegalArgumentException(\"exp is not a proper postfix expression (too many arguments).\");\n    }\n    return s.pop();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}