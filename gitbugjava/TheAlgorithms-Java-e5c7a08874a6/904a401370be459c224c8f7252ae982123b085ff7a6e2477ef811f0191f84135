{
    "generation": "import java.util.Stack;\nimport java.util.Scanner;\n\npublic class StackPostfixNotation {\n\n    // Evaluates the given postfix expression string and returns the result.\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<>();\n        try (Scanner tokens = new Scanner(exp)) {\n            while (tokens.hasNext()) {\n                if (tokens.hasNextInt()) {\n                    s.push(tokens.nextInt()); // If int then push to stack\n                } else { // else pop top two values and perform the operation\n                    String op = tokens.next();\n                    if (s.size() < 2) {\n                        throw new IllegalArgumentException(\"Too few arguments for operator: \" + op);\n                    }\n                    int num2 = s.pop();\n                    int num1 = s.pop();\n\n                    switch (op) {\n                        case \"+\" -> s.push(num1 + num2);\n                        case \"-\" -> s.push(num1 - num2);\n                        case \"*\" -> s.push(num1 * num2);\n                        case \"/\" -> {\n                            if (num2 == 0) {\n                                throw new IllegalArgumentException(\"Division by zero.\");\n                            }\n                            s.push(num1 / num2);\n                        }\n                        default -> throw new IllegalArgumentException(\"exp contains an unknown operation.\");\n                    }\n                }\n            }\n        }\n\n        if (s.size() != 1) {\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n        }\n        return s.pop();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}