{
    "generation": "import java.util.Stack;\n\npublic class StackPostfixNotation {\n\n    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<>();\n        String[] tokens = exp.split(\" \");\n\n        for (String token : tokens) {\n            if (token.matches(\"-?\\\\d+\")) { // Check if it's an integer (including negative numbers)\n                s.push(Integer.parseInt(token));\n            } else { // Assume it's an operator\n                if (s.size() < 2) {\n                    throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n                }\n                int num2 = s.pop();\n                int num1 = s.pop();\n                switch (token) {\n                    case \"+\":\n                        s.push(num1 + num2);\n                        break;\n                    case \"-\":\n                        s.push(num1 - num2);\n                        break;\n                    case \"*\":\n                        s.push(num1 * num2);\n                        break;\n                    case \"/\":\n                        s.push(num1 / num2);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"exp contains an unknown operation.\");\n                }\n            }\n        }\n        if (s.size() != 1) {\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n        }\n        return s.pop();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}