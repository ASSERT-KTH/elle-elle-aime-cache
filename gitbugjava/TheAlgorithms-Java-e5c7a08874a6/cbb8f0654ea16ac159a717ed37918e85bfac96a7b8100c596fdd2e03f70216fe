{
    "generation": "public static int postfixEvaluate(final String exp) {\n    Stack<Integer> s = new Stack<Integer>();\n    Scanner tokens = new Scanner(exp);\n\n    while (tokens.hasNext()) {\n        if (tokens.hasNextInt()) { // If int then push to stack\n            s.push(tokens.nextInt());\n        } else { // else pop top two values and perform the operation\n            if (s.size() < 2) { // check if there are at least two operands in the stack\n                throw new IllegalArgumentException(\"exp is not a proper postfix expression as there are not enough operands.\");\n            }\n            int num2 = s.pop();\n            int num1 = s.pop();\n            String op = tokens.next();\n\n            switch (op) {\n                case \"+\" -> s.push(num1 + num2);\n                case \"-\" -> s.push(num1 - num2);\n                case \"*\" -> s.push(num1 * num2);\n                case \"/\" -> {\n                    if (num2 == 0) {\n                        throw new IllegalArgumentException(\"Division by zero is not allowed.\");\n                    }\n                    s.push(num1 / num2);\n                }\n                default -> throw new IllegalArgumentException(\"exp contains an unknown operation.\");\n            }\n        }\n    }\n    tokens.close();\n    if (s.size() != 1) { // check if there is exactly one operand left in the stack after processing all tokens\n        throw new IllegalArgumentException(\"exp is not a proper postfix expression as there are too many operands.\");\n    }\n    return s.pop();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}