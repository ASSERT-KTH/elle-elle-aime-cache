{
    "generation": "public JacksonJsonTransformer() {\n    ObjectMapper cleanObjectMapper = new ObjectMapper()\n        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n\n    // Register modules for handling enums and other custom deserializers\n    SimpleModule enumModule = new SimpleModule()\n        .addSerializer(Enum.class, new EnumSerializer())\n        .addDeserializer(Enum.class, new EnumDeserializer());\n\n    SimpleModule customModule = new SimpleModule()\n        .addDeserializer(CrowdinApiException.class, new CrowdinApiExceptionDeserializer(cleanObjectMapper))\n        .addDeserializer(Project.class, new ProjectDeserializer(cleanObjectMapper.copy()\n            .registerModule(enumModule)))\n        .addDeserializer(FileInfo.class, new FileInfoDeserializer(cleanObjectMapper.copy()\n            .registerModule(enumModule)\n            .registerModule(new SimpleModule()\n                .addDeserializer(ImportOptions.class, new FileImportOptionsDeserializer(cleanObjectMapper))\n                .addDeserializer(ExportOptions.class, new FileExportOptionsDeserializer(cleanObjectMapper)))))\n        .addDeserializer(LanguageTranslations.class, new LanguageTranslationsDeserializer(cleanObjectMapper));\n\n    // Configure ObjectMapper to use java.time classes for date handling\n    cleanObjectMapper.registerModule(new JavaTimeModule());\n    cleanObjectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n\n    // Set visibility for serialization\n    cleanObjectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL)\n        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)\n        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);\n\n    // Register custom module\n    cleanObjectMapper.registerModule(customModule);\n\n    this.objectMapper = cleanObjectMapper;\n    this.errorObjectMapper = cleanObjectMapper;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}