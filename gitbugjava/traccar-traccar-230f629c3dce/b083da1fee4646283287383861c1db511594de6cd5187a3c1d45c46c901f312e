{
    "generation": "if (type == MSG_RECORDS || type == MSG_EXTENDED_RECORDS) {\n    // ... existing code ...\n\n    for (int i = 0; i < count; i++) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        position.setTime(new Date(buf.readUnsignedInt() * 1000));\n        buf.readUnsignedByte(); // timestamp extension\n\n        if (type == MSG_EXTENDED_RECORDS) {\n            int recordExtension = buf.readUnsignedByte();\n            int mergeRecordCount = BitUtil.from(recordExtension, 4);\n            int currentRecord = BitUtil.to(recordExtension, 4);\n\n            if (currentRecord > 0 && currentRecord <= mergeRecordCount) {\n                position = positions.remove(positions.size() - 1);\n            }\n        }\n\n        buf.readUnsignedByte(); // priority (reserved)\n\n        position.setValid(true);\n\n        // Normalize longitude\n        double longitude = buf.readInt() / 10000000.0;\n        longitude = (longitude + 180) % 360;\n        if (longitude < 0) {\n            longitude += 360;\n        }\n        longitude -= 180;\n        position.setLongitude(longitude);\n\n        // Clip latitude\n        double latitude = buf.readInt() / 10000000.0;\n        latitude = Math.max(-90, Math.min(90, latitude));\n        position.setLatitude(latitude);\n\n        position.setAltitude(buf.readUnsignedShort() / 10.0);\n        position.setCourse(buf.readUnsignedShort() / 100.0);\n\n        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n\n        position.set(Position.KEY_HDOP, buf.readUnsignedByte() / 10.0);\n\n        if (type == MSG_EXTENDED_RECORDS) {\n            position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n        } else {\n            position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n        }\n\n        // ... existing code ...\n\n    }\n\n    // ... existing code ...\n\n} else if (type == MSG_DTCS) {\n\n    List<Position> positions = new LinkedList<>();\n\n    int count = buf.readUnsignedByte();\n\n    for (int i = 0; i < count; i++) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedByte(); // reserved\n\n        position.setTime(new Date(buf.readUnsignedInt() * 1000));\n\n        position.setValid(true);\n\n        // Normalize longitude\n        double longitude = buf.readInt() / 10000000.0;\n        longitude = (longitude + 180) % 360;\n        if (longitude < 0) {\n            longitude += 360;\n        }\n        longitude -= 180;\n        position.setLongitude(longitude);\n\n        // Clip latitude\n        double latitude = buf.readInt() / 10000000.0;\n        latitude = Math.max(-90, Math.min(90, latitude));\n        position.setLatitude(latitude);\n\n        if (buf.readUnsignedByte() == 2) {\n            position.set(Position.KEY_ARCHIVE, true);\n        }\n\n        position.set(Position.KEY_DTCS, buf.readSlice(5).toString(StandardCharsets.US_ASCII));\n\n        positions.add(position);\n    }\n\n    if (channel != null) {\n        channel.writeAndFlush(new NetworkMessage(\n                Unpooled.wrappedBuffer(DataConverter.parseHex(\"00026d01c4a4\")), remoteAddress));\n    }\n\n    return positions;\n\n// ... rest of the existing code ...",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}