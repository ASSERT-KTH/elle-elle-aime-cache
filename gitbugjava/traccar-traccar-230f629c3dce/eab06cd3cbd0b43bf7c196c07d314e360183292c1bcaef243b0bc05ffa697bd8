{
    "generation": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedShort(); // data length\n\n        String imei = String.format(\"%015d\", buf.readLong());\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        int type = buf.readUnsignedByte();\n\n        if (type == MSG_RECORDS || type == MSG_EXTENDED_RECORDS) {\n\n            // ... (previous code remains unchanged)\n\n            for (int i = 0; i < count; i++) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                buf.readUnsignedByte(); // timestamp extension\n\n                if (type == MSG_EXTENDED_RECORDS) {\n                    // ... (code for extended records remains unchanged)\n                }\n\n                buf.readUnsignedByte(); // priority (reserved)\n\n                position.setValid(true);\n\n                // Modify longitude calculation\n                long longitudeValue = buf.readInt();\n                double longitude = (double) longitudeValue / 10000000.0;\n                longitude = constrainLongitude(longitude); // New method to constrain longitude\n                position.setLongitude(longitude);\n\n                // Modify latitude calculation\n                long latitudeValue = buf.readInt();\n                double latitude = (double) latitudeValue / 10000000.0;\n                latitude = constrainLatitude(latitude); // New method to constrain latitude\n                position.setLatitude(latitude);\n\n                position.setAltitude(buf.readUnsignedShort() / 10.0);\n                position.setCourse(buf.readUnsignedShort() / 100.0);\n\n                // ... (rest of the code remains unchanged)\n\n            }\n\n            // ... (rest of the code remains unchanged)\n\n        } else if (type == MSG_DTCS) {\n\n            // ... (code for MSG_DTCS remains unchanged)\n\n        } else if (type == MSG_FILES) {\n\n            // ... (code for MSG_FILES remains unchanged)\n\n        } else if (type == MSG_IDENTIFICATION) {\n\n            // ... (code for MSG_IDENTIFICATION remains unchanged)\n\n        } else {\n\n            // ... (code for other message types remains unchanged)\n\n        }\n    }\n\n    // Helper method to constrain longitude within the valid range\n    private double constrainLongitude(double longitude) {\n        while (longitude > 180) {\n            longitude -= 360;\n        }\n        while (longitude < -180) {\n            longitude += 360;\n        }\n        return longitude;\n    }\n\n    // Helper method to constrain latitude within the valid range\n    private double constrainLatitude(double latitude) {\n        return Math.max(-90, Math.min(90, latitude));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}