{
    "generation": "/**\n * Registers the call context with the provided call context provider for the given ARI command.\n * \n * @param callContextProvider the provider to register the call context with\n * @param callContext the call context to register\n * @param ariCommand the ARI command to check for registration necessity\n * @return a Try containing Done on success, or a RuntimeException if resource ID extraction fails\n */\npublic static Try<Done> registerCallContext(\n      final ActorRef<CallContextProviderMessage> callContextProvider,\n      final String callContext,\n      final AriCommand ariCommand) {\n\n    // Check if the command is a creation command and not a deletion command\n    if (!ariCommand.extractCommandType().isCreationCommand() || ariCommand.getMethod().equals(\"DELETE\")) {\n      return Try.success(Done.done());\n    }\n\n    final Option<AriResource> maybeResource =\n        ariCommand\n           .extractResourceRelations()\n           .find(AriResourceRelation::isCreated)\n           .map(AriResourceRelation::getResource);\n\n    if (maybeResource.isEmpty()) {\n      return Try.failure(\n          new RuntimeException(\n              String.format(\n                  \"Failed to extract resourceId from command '%s'\", ariCommand.toString())));\n    }\n\n    final AriResource resource = maybeResource.get();\n\n    callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));\n    return Try.success(Done.done());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}