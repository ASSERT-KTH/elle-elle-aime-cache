{
    "generation": "/**\n * Registers a call context for the given ARI command if it's a creation command.\n *\n * @param callContextProvider provider for call context registration\n * @param callContext        call context to be registered\n * @param ariCommand         ARI command to be processed\n * @return Try with Done if successful, or a RuntimeException if resource ID extraction fails\n */\npublic static Try<Done> registerCallContext(\n    final ActorRef<CallContextProviderMessage> callContextProvider,\n    final String callContext,\n    final AriCommand ariCommand) {\n\n    if (ariCommand.extractCommandType().isDeletionCommand() ||!ariCommand.extractCommandType().isCreationCommand()) {\n        return Try.success(Done.done());\n    }\n\n    final Option<AriResource> maybeResource =\n        ariCommand\n           .extractResourceRelations()\n           .find(AriResourceRelation::isCreated)\n           .map(AriResourceRelation::getResource);\n\n    if (maybeResource.isEmpty()) {\n        return Try.failure(\n            new RuntimeException(\n                String.format(\n                    \"Failed to extract resourceId from command '%s'\", ariCommand.toString())));\n    }\n\n    final AriResource resource = maybeResource.get();\n\n    callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));\n    return Try.success(Done.done());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}