{
    "generation": "/**\n * Registers a call context with the provided callContextProvider if the ariCommand is a creation command\n * and a created resource can be extracted from it.\n *\n * @param callContextProvider the provider to register the call context with\n * @param callContext the call context to register\n * @param ariCommand the ARI command to evaluate\n * @return a Try containing Done.done() if the operation was successful, or a failure if not\n */\npublic static Try<Done> registerCallContext(\n    final ActorRef<CallContextProviderMessage> callContextProvider,\n    final String callContext,\n    final AriCommand ariCommand) {\n\n    // Check if the ARI command is not a creation command or a deletion command\n    if (!ariCommand.extractCommandType().isCreationCommand() || ariCommand.getMethod().equals(\"DELETE\")) {\n        return Try.success(Done.done());\n    }\n\n    final Option<AriResource> maybeResource =\n        ariCommand\n           .extractResourceRelations()\n           .find(AriResourceRelation::isCreated)\n           .map(AriResourceRelation::getResource);\n\n    if (maybeResource.isEmpty()) {\n        return Try.failure(\n            new RuntimeException(\n                String.format(\n                    \"Failed to extract resourceId from command '%s'\", ariCommand.toString())));\n    }\n\n    final AriResource resource = maybeResource.get();\n\n    callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));\n    return Try.success(Done.done());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}