{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    Element parent = parentNode instanceof Element ? (Element) parentNode : null;\n    final boolean normaliseWhite = prettyPrint && !(parentNode instanceof Document) && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        trimLeading = (siblingIndex == 0 && parent != null && Element.Format.block == parent.format()) ||\n                parentNode instanceof Document;\n        trimTrailing = nextSibling() == null && parent != null && Element.Format.block == parent.format();\n\n        Node next = nextSibling();\n        boolean isBlank = isBlank();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) ||\n                (next instanceof TextNode && (((TextNode) next).isBlank()));\n        if (couldSkip && isBlank) return;\n\n        Node prev = previousSibling();\n        if (\n                (siblingIndex == 0 && parent != null && parent.format() == Element.Format.block && !isBlank) ||\n                (out.outline() && siblingIndex > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).nodeName().equals(\"br\"))\n        ) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}