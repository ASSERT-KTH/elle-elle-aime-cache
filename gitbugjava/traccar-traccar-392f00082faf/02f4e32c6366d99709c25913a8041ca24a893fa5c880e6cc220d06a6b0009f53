{
    "generation": "\nprivate List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    List<Position> positions = new LinkedList<>();\n\n    buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n\n    String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n\n    buf.skipBytes(1 + 3 + 1);\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n\n    if (deviceSession == null) {\n\n        return null;\n\n    }\n\n    buf.readUnsignedIntLE(); // remaining cache\n\n    int count = buf.readUnsignedShortLE();\n\n    for (int i = 0; i < count; i++) {\n\n        Position position = new Position(getProtocolName());\n\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedShortLE(); // length\n\n        buf.readUnsignedShortLE(); // index\n\n        int paramCount = buf.readUnsignedByte();\n\n        for (int j = 0; j < paramCount; j++) {\n\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n\n            switch (id) {\n\n                case 0x01:\n\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n\n                    break;\n\n                case 0x05:\n\n                    position.setValid(buf.readUnsignedByte() > 0);\n\n                    break;\n\n                case 0x06:\n\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n\n                    break;\n\n                case 0x07:\n\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n\n                    break;\n\n                case 0x14:\n\n                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n\n                    break;\n\n                case 0x15:\n\n                    position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n\n                    break;\n\n                case 0x97:\n\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n\n                    break;\n\n                case 0x9D:\n\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n\n                    break;\n\n                case 0xFE69:\n\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n\n                    break;\n\n                default:\n\n                    buf.readUnsignedByte();\n\n                    break;\n\n            }\n\n        }\n\n        paramCount = buf.readUnsignedByte();\n\n        for (int j = 0; j < paramCount; j++) {\n\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n\n            switch (id) {\n\n                case 0x08:\n\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n\n                    break;\n\n                case 0x09:\n\n                    position.setCourse(buf.readUnsignedShortLE());\n\n                    break;\n\n                case 0x0A:\n\n                    position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n\n                    break;\n\n                case 0x0B:\n\n                    position.setAltitude(buf.readShortLE());\n\n                    break;\n\n                case 0x16:\n\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n\n                    break;\n\n                case 0x19:\n\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n\n                    break;\n\n                case 0x1A:\n\n                    position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n\n                    break;\n\n                case 0x40:\n\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n\n                    break;\n\n                case 0x91:\n\n                case 0x92:\n\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n\n                    break;\n\n                case 0x98:\n\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n\n                    break;\n\n                case 0x99:\n\n                    position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n\n                    break;\n\n                case 0x9C:\n\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n\n                    break;\n\n                case 0x9F:\n\n                    position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n\n                    break;\n\n                case 0xC9:\n\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n\n                    break;\n\n                default:\n\n                    buf.readUnsignedShortLE();\n\n                    break;\n\n            }\n\n        }\n\n        paramCount = buf.readUnsignedByte();\n\n        for (int j = 0; j < paramCount; j++) {\n\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n\n            switch (id) {\n\n                case 0x02:\n\n                    position.setLatitude(buf.readIntLE() * 0.000001);\n\n                    break;\n\n                case 0x03:\n\n                    position.setLongitude(buf.readIntLE() * 0.000001);\n\n                    break;\n\n                case 0x04:\n\n                    position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01\n\n                    break;\n\n                case 0x0C:\n\n                case 0x9B:\n\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n\n                    break;\n\n                case 0x0D:\n\n                    position.set(\"runtime\", buf.readUnsignedIntLE());\n\n                    break;\n\n                case 0x25:\n\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n\n                    break;\n\n                case 0xA0:\n\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n\n                    break;\n\n                case 0xA2:\n\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n\n                    break;\n\n                default:\n\n                    buf.readUnsignedIntLE();\n\n                    break;\n\n            }\n\n        }\n\n        paramCount = buf.readUnsignedByte();\n\n        for (int j = 0; j < paramCount; j++) {\n\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n\n            int length = buf.readUnsignedByte();\n\n            switch (id) {\n\n                case 0x2A:\n\n                case 0x2B:\n\n                case 0x2C:\n\n                case 0x2D:\n\n                case 0x2E:\n\n                case 0x2F:\n\n                case 0x30:\n\n                case 0x31:\n\n                    buf.readUnsignedByte(); // label\n\n                    position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n\n                    break;\n\n                case 0xFE31:\n\n                    buf.readUnsignedByte(); // alarm protocol\n\n                    buf.readUnsignedByte(); // alarm type\n\n                    buf.skipBytes(length - 2);\n\n                    break;\n\n                default:\n\n                    buf.skipBytes(length);\n\n                    break;\n\n            }\n\n        }\n\n        // Set lock attribute based on input value\n\n        int input = position.getInteger(Position.KEY_INPUT);\n\n        if (input > 0) {\n\n            position.set(Position.KEY_LOCK, true);\n\n        } else {\n\n            position.set(Position.KEY_LOCK, false);\n\n        }\n\n        positions.add(position);\n\n    }\n\n    return positions;\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}