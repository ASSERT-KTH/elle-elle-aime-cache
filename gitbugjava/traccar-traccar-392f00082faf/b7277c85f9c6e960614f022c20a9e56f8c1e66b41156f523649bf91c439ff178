{
    "generation": "private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    List<Position> positions = new LinkedList<>();\n\n    int imeiStartIndex = buf.readerIndex();\n    int imeiEndIndex = buf.indexOf(imeiStartIndex, buf.writerIndex(), (byte) ',');\n    if (imeiEndIndex == -1 || imeiEndIndex - imeiStartIndex < 15) {\n        return null; // Handle invalid IMEI or missing data gracefully\n    }\n\n    String imei = buf.readSlice(imeiEndIndex - imeiStartIndex).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // Skip the ',' delimiter\n    buf.skipBytes(3 + 1); // Skip the protocol header bytes\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.readUnsignedIntLE(); // Skip remaining cache length\n    int count = buf.readUnsignedShortLE();\n\n    for (int i = 0; i < count; i++) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedShortLE(); // Discard message length\n        buf.readUnsignedShortLE(); // Discard packet sequence index\n\n        int paramCount = buf.readUnsignedByte();\n        for (int j = 0; j < paramCount; j++) {\n            boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n            int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            switch (id) {\n                case 0x01:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                    break;\n                case 0x05:\n                    position.setValid(buf.readUnsignedByte() > 0);\n                    break;\n                case 0x06:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x07:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x14:\n                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                    break;\n                case 0x15:\n                    position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                    break;\n                case 0x97:\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                    break;\n                case 0x9D:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xFE69:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                default:\n                    buf.readByte(); // Skip data for unknown param\n                    break;\n            }\n        }\n\n        // Handle additional parameters (speed, position, etc.)\n        while (buf.isReadable()) {\n            int id = buf.readUnsignedByte();\n            switch (id) {\n                case 0x02:\n                    position.setLatitude(buf.readIntLE() * 0.000001);\n                    break;\n                case 0x03:\n                    position.setLongitude(buf.readIntLE() * 0.000001);\n                    break;\n                case 0x04:\n                    position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000));\n                    break;\n                case 0x08:\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    break;\n                case 0x0A:\n                    position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                    break;\n                case 0x0B:\n                    position.setAltitude(buf.readShortLE());\n                    break;\n                case 0x40:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                    break;\n                default:\n                    buf.skipBytes(buf.readableBytes()); // Skip unknown/remaining data\n                    break;\n            }\n        }\n\n        positions.add(position);\n    }\n\n    return positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}