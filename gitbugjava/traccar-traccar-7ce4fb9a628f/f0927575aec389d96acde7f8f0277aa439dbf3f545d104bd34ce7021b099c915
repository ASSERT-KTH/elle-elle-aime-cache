{
    "generation": "    protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {\n\n        Parser parser = new Parser(PATTERN_POSITION, content);\n        if (!parser.matches()) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        int event = (int) parser.nextLong();\n        String eventData = parser.next();\n        position.set(Position.KEY_EVENT, event);\n        if (event == 53) {\n            position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);\n        } else {\n            position.set(Position.KEY_ALARM, decodeAlarm(event));\n        }\n\n        position.setTime(parser.nextDateTime());\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n\n        position.set(Position.KEY_SATELLITES, (int) parser.nextLong());\n        position.set(Position.KEY_HDOP, parser.nextDouble());\n\n        position.setSpeed(UnitsConverter.knotsFromKph((int) parser.nextLong()));\n        position.setCourse((int) parser.nextLong());\n        position.setAltitude((int) parser.nextLong());\n\n        position.set(Position.KEY_ODOMETER, (int) parser.nextLong());\n\n        position.setNetwork(new Network(CellTower.from(\n                (int) parser.nextLong(), (int) parser.nextLong(), (int) parser.nextHexLong(), (int) parser.nextHexLong(), (int) parser.nextLong())));\n\n        position.set(Position.KEY_STATUS, (int) parser.nextHexLong());\n\n        int input = (int) parser.nextHexLong();\n        int output = (int) parser.nextHexLong();\n        position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));\n        position.set(Position.KEY_DOOR, BitUtil.check(input, 2));\n        position.set(Position.KEY_INPUT, input);\n        position.set(Position.KEY_OUTPUT, output);\n\n        position.set(Position.KEY_POWER, (int) parser.nextHexLong() * 0.01);\n        position.set(Position.KEY_BATTERY, (int) parser.nextHexLong() * 0.01);\n\n        if (parser.hasNext()) {\n            String[] adc = parser.next().split(\"\\\\|\");\n            for (int i = 1; i < adc.length; i++) {\n                position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);\n            }\n        }\n\n        if (parser.hasNext()) {\n            String[] fuels = parser.next().split(\"\\\\|\");\n            for (String fuel : fuels) {\n                int index = Integer.parseInt(fuel.substring(0, 2));\n                int value = Integer.parseInt(fuel.substring(2), 16);\n                position.set(\"fuel\" + index, value * 0.1);\n            }\n        }\n\n        if (parser.hasNext()) {\n            String[] temperatures = parser.next().split(\"\\\\|\");\n            for (String temperature : temperatures) {\n                int index = Integer.parseInt(temperature.substring(0, 2));\n                int value = Integer.parseInt(temperature.substring(2), 16);\n                double convertedValue = BitUtil.to(value, 15);\n                if (BitUtil.check(value, 15)) {\n                    convertedValue = -convertedValue;\n                }\n                position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);\n            }\n        }\n\n        if (parser.hasNextAny(9)) {\n            position.set(Position.KEY_RPM, (int) parser.nextLong());\n            position.set(Position.KEY_ENGINE_LOAD, (int) parser.nextLong());\n            position.set(\"airFlow\", (int) parser.nextLong());\n            position.set(\"airPressure\", (int) parser.nextLong());\n            if (parser.hasNext()) {\n                position.set(\"airTemp\", (int) parser.nextLong() - 40);\n            }\n            position.set(Position.KEY_THROTTLE, (int) parser.nextLong());\n            if (parser.hasNext()) {\n                position.set(Position.KEY_COOLANT_TEMP, (int) parser.nextLong() - 40);\n            }\n            if (parser.hasNext()) {\n                position.set(Position.KEY_FUEL_CONSUMPTION, (int) parser.nextLong() * 0.1);\n            }\n            position.set(Position.KEY_FUEL_LEVEL, (int) parser.nextLong());\n        }\n\n        if (parser.hasNext()) {\n            position.set(Position.KEY_HOURS, (int) parser.nextLong() * 1000L);\n        }\n\n        return position;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}