{
    "generation": "private Object decodePosition(\n        Channel channel, SocketAddress remoteAddress, String sentence, String id) {\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    List<Position> positions = new LinkedList<>();\n    Position position = null;\n    DateBuilder dateBuilder = null;\n\n    for (String pair : sentence.split(\",\")) {\n        String[] data;\n        if (pair.contains(\"=\")) {\n            data = pair.split(\"=\");\n        } else {\n            data = pair.split(\":\");\n        }\n        int key;\n        try {\n            key = Integer.parseInt(data[0], 16);\n            // Handle special case for 82 key, as the value might not be a parsable integer\n            if (key == 0x82) {\n                continue;\n            }\n        } catch (NumberFormatException e) {\n            continue;\n        }\n        String value = data[1];\n        if (key == 0x0) {\n            if (position != null) {\n                position.setTime(dateBuilder.getDate());\n                positions.add(position);\n            }\n            position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            dateBuilder = new DateBuilder(new Date());\n        } else if (position != null) {\n            switch (key) {\n                case 0x11:\n                    value = (\"000000\" + value).substring(value.length());\n                    dateBuilder.setDateReverse(\n                            Integer.parseInt(value.substring(0, 2)),\n                            Integer.parseInt(value.substring(2, 4)),\n                            Integer.parseInt(value.substring(4)));\n                    break;\n                case 0x10:\n                    value = (\"00000000\" + value).substring(value.length());\n                    dateBuilder.setTime(\n                            Integer.parseInt(value.substring(0, 2)),\n                            Integer.parseInt(value.substring(2, 4)),\n                            Integer.parseInt(value.substring(4, 6)),\n                            Integer.parseInt(value.substring(6)) * 10);\n                    break;\n                case 0xA:\n                case 0xB:\n                    position.setValid(true);\n                // no break here, so it will update latitude and then longitude\n                case 0xC:\n                    position.setAltitude(Double.parseDouble(value));\n                    break;\n                case 0xD:\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));\n                    break;\n                case 0xE:\n                    position.setCourse(Integer.parseInt(value));\n                    break;\n                case 0xF:\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                    break;\n                case 0x12:\n                    position.set(Position.KEY_HDOP, Integer.parseInt(value));\n                    break;\n                case 0x20:\n                    position.set(Position.KEY_ACCELERATION, value);\n                    break;\n                case 0x24:\n                    position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);\n                    break;\n                case 0x81:\n                    position.set(Position.KEY_RSSI, Integer.parseInt(value));\n                    break;\n                // Although marked for parsing as integer, the actual value might not be parsable\n                // Therefore, leave the processing of this key empty to avoid exception\n                case 0x82:\n                    break;\n                case 0x104:\n                    position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));\n                    break;\n                case 0x105:\n                    position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));\n                    break;\n                case 0x10c:\n                    position.set(Position.KEY_RPM, Integer.parseInt(value));\n                    break;\n                case 0x10d:\n                    position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                    break;\n                case 0x111:\n                    position.set(Position.KEY_THROTTLE, Integer.parseInt(value));\n                    break;\n                default:\n                    position.set(Position.PREFIX_IO + key, value);\n                    break;\n            }\n        }\n    }\n\n    if (position != null) {\n        if (!position.getValid()) {\n            getLastLocation(position, null);\n        }\n        position.setTime(dateBuilder.getDate());\n        positions.add(position);\n    }\n\n    return positions.isEmpty() ? null : positions;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}