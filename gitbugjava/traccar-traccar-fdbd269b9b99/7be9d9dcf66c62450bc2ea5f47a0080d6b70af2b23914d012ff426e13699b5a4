{
    "generation": "private Object decodePosition(\n            Channel channel, SocketAddress remoteAddress, String sentence, String id) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        List<Position> positions = new LinkedList<>();\n        Position position = null;\n        DateBuilder dateBuilder = null;\n\n        for (String pair : sentence.split(\",\")) {\n            String[] data = pair.split(\"[=:]\");\n            int key;\n            try {\n                key = Integer.parseInt(data[0], 16);\n            } catch (NumberFormatException e) {\n                continue;\n            }\n            String value = data[1];\n            if (key == 0x0) {\n                if (position!= null) {\n                    position.setTime(dateBuilder.getDate());\n                    positions.add(position);\n                }\n                position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                dateBuilder = new DateBuilder(new Date());\n            } else if (position!= null) {\n                switch (key) {\n                    case 0x11:\n                        value = (\"000000\" + value).substring(value.length());\n                        dateBuilder.setDateReverse(\n                                Integer.parseInt(value.substring(0, 2)),\n                                Integer.parseInt(value.substring(2, 4)),\n                                Integer.parseInt(value.substring(4)));\n                        break;\n                    case 0x10:\n                        value = (\"00000000\" + value).substring(value.length());\n                        dateBuilder.setTime(\n                                Integer.parseInt(value.substring(0, 2)),\n                                Integer.parseInt(value.substring(2, 4)),\n                                Integer.parseInt(value.substring(4, 6)),\n                                Integer.parseInt(value.substring(6)) * 10);\n                        break;\n                    case 0xA:\n                        position.setValid(true);\n                        // handle potential NumberFormatException\n                        try {\n                            position.setLatitude(Double.parseDouble(value));\n                        } catch (NumberFormatException e) {\n                            // skip invalid latitude value\n                            position.setValid(false);\n                        }\n                        break;\n                    case 0xB:\n                        position.setValid(true);\n                        // handle potential NumberFormatException\n                        try {\n                            position.setLongitude(Double.parseDouble(value));\n                        } catch (NumberFormatException e) {\n                            // skip invalid longitude value\n                            position.setValid(false);\n                        }\n                        break;\n                    case 0xC:\n                        // handle potential NumberFormatException\n                        try {\n                            position.setAltitude(Double.parseDouble(value));\n                        } catch (NumberFormatException e) {\n                            // skip invalid altitude value\n                        }\n                        break;\n                    case 0xD:\n                        // handle potential NumberFormatException\n                        try {\n                            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));\n                        } catch (NumberFormatException e) {\n                            // skip invalid speed value\n                        }\n                        break;\n                    case 0xE:\n                        // handle potential NumberFormatException\n                        try {\n                            position.setCourse(Integer.parseInt(value));\n                        } catch (NumberFormatException e) {\n                            // skip invalid course value\n                        }\n                        break;\n                    case 0xF:\n                        // handle potential NumberFormatException\n                        try {\n                            position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                        } catch (NumberFormatException e) {\n                            // skip invalid satellites value\n                        }\n                        break;\n                    case 0x12:\n                        // handle potential NumberFormatException\n                        try {\n                            position.set(Position.KEY_HDOP, Integer.parseInt(value));\n                        } catch (NumberFormatException e) {\n                            // skip invalid hdop value\n                        }\n                        break;\n                    case 0x20:\n                        position.set(Position.KEY_ACCELERATION, value);\n                        break;\n                    case 0x24:\n                        // handle potential NumberFormatException\n                        try {\n                            position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);\n                        } catch (NumberFormatException e) {\n                            // skip invalid battery value\n                        }\n                        break;\n                    case 0x81:\n                        // handle potential NumberFormatException\n                        try {\n                            position.set(Position.KEY_RSSI, Integer.parseInt(value));\n                        } catch (NumberFormatException e) {\n                            // skip invalid rssi value\n                        }\n                        break;\n                    case 0x82:\n                        // handle potential NumberFormatException\n                        try {\n                            position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);\n                        } catch (NumberFormatException e) {\n                            // skip invalid device temperature value\n                        }\n                        break;\n                    case 0x104:\n                        // handle potential NumberFormatException\n                        try {\n                            position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));\n                        } catch (NumberFormatException e) {\n                            // skip invalid engine load value\n                        }\n                        break;\n                    case 0x105:\n                        // handle potential NumberFormatException\n                        try {\n                            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));\n                        } catch (NumberFormatException e) {\n                            // skip invalid coolant temperature value\n                        }\n                        break;\n                    case 0x10c:\n                        // handle potential NumberFormatException\n                        try {\n                            position.set(Position.KEY_RPM, Integer.parseInt(value));\n                        } catch (NumberFormatException e) {\n                            // skip invalid rpm value\n                        }\n                        break;\n                    case 0x10d:\n                        // handle potential NumberFormatException\n                        try {\n                            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                        } catch (NumberFormatException e) {\n                            // skip invalid obd speed value\n                        }\n                        break;\n                    case 0x111:\n                        // handle potential NumberFormatException\n                        try {\n                            position.set(Position.KEY_THROTTLE, Integer.parseInt(value));\n                        } catch (NumberFormatException e) {\n                            // skip invalid throttle value\n                        }\n                        break;\n                    default:\n                        position.set(Position.PREFIX_IO + key, value);\n                        break;\n                }\n            }\n        }\n\n        if (position!= null) {\n            if (!position.getValid()) {\n                getLastLocation(position, null);\n            }\n            position.setTime(dateBuilder.getDate());\n            positions.add(position);\n        }\n\n        return positions.isEmpty()? null : positions;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}