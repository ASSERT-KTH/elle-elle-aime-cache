{
    "generation": "private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n\n    decodeCoordinates(position, buf);\n\n    position.setAltitude(buf.readShort());\n    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n    position.setCourse(buf.readUnsignedShort());\n    position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n\n    if (buf.readableBytes() == 20) {\n\n        buf.skipBytes(4); // remaining battery and mileage\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n        buf.readUnsignedInt(); // area id\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        buf.skipBytes(3); // reserved\n\n        return position;\n\n    }\n\n    while (buf.readableBytes() > 1) { // Adjusted condition to avoid underflow\n\n        int subtype = buf.readUnsignedByte();\n        if (buf.readableBytes() < 1) { // Ensure enough bytes for length\n            break;\n        }\n        int length = buf.readUnsignedByte();\n\n        if (buf.readableBytes() < length) { // Validate enough bytes available for this segment\n            break;\n        }\n\n        int endIndex = buf.readerIndex() + length;\n        switch (subtype) {\n            case 0x01:\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                break;\n            case 0x02:\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                break;\n            case 0x2b:\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                break;\n            case 0x30:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                break;\n            case 0x31:\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                break;\n            case 0x33:\n                String sentence = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                if (sentence.startsWith(\"*M00\") && sentence.length() >= 15) { // Ensure sentence is long enough\n                    String lockStatus = sentence.substring(8, 8 + 7);\n                    try {\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    } catch (NumberFormatException e) {\n                        position.set(Position.KEY_BATTERY, null); // Handle malformed number gracefully\n                    }\n                }\n                break;\n            case 0x80:\n                if (length > 2) { // Validate length to prevent invalid decoding\n                    buf.readUnsignedByte(); // content\n                    endIndex = buf.writerIndex() - 2;\n                    decodeExtension(position, buf, endIndex);\n                }\n                break;\n            case 0x91:\n                if (length >= 15) { // Ensure enough data for this case\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort(); // Skip unused\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort(); // Skip unused\n                    buf.readUnsignedInt(); // Skip unused\n                    buf.readUnsignedShort(); // Skip unused\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                }\n                break;\n            case 0x94:\n                if (length > 0) {\n                    position.set(\n                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                }\n                break;\n            default:\n                buf.skipBytes(length); // Skip unhandled subtypes safely\n                break;\n        }\n\n        buf.readerIndex(endIndex); // Move reader index to the end of the current block\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}