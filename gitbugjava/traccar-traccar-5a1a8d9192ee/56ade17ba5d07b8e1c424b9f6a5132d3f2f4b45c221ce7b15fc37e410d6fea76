{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    buf.readUnsignedByte(); // protocol revision\n    buf.readUnsignedShort(); // length\n    buf.readUnsignedByte(); // header indicator\n    buf.readUnsignedShort(); // header length\n    buf.readUnsignedInt(); // reference\n\n    String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.readUnsignedByte(); // session status\n    buf.readUnsignedShort(); // originator index\n    buf.readUnsignedShort(); // transfer index\n    buf.readUnsignedInt(); // session time\n    buf.readUnsignedByte(); // payload indicator\n    buf.readUnsignedShort(); // payload length\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    List<Integer> parameters = getParameters(deviceSession.getDeviceId());\n\n    TimeZone tz = deviceSession.getProperties().getTimeZone();\n    if (tz == null) {\n        tz = TimeZone.getTimeZone(\"Etc/UTC\");\n    }\n\n    for (int parameter : parameters) {\n        switch (parameter) {\n            case 0x01:\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                break;\n            case 0x02:\n                position.setLatitude(buf.readIntLE() / 1000000.0);\n                break;\n            case 0x03:\n                position.setLongitude(buf.readIntLE() / 1000000.0);\n                break;\n            case 0x04:\n                long ntpTime = buf.readUnsignedIntLE();\n                Calendar calendar = Calendar.getInstance(tz);\n                ntpTime -= calendar.getFirstDayOfWeek();\n                DateTimeZone dtz = org.joda.time.DateTimeZone.UTC;\n                if (hasTimeZone(deviceSession.getCustomerId())) {\n                    dtz = DateTimeZone.forOffSetMillis(calendar.getTime(), calendar.getTimeZone().RAW_OFFSET);\n                }\n                position.setTime(new Date(Millis.fromSecondOfDay(date(ntpTime, seconds(ntpTime), \"UTC\").getTime()).offset(getMillis())) ));\n\t\t\tCalendar toCalendar = new GregorianCalender(tz.getId());\n\t\t\t\tposition.setTime(sun.util.CalendarUtil.parseDate(calendar));\n                GregorianCalender calendar_ = new Calendar();\n_calende(7l0,7);\n                cale.set_(7s,7);\n\n                Position.set(position.time(calendar_), calendar.getTime().getTimeOffset());\n                Calendar calendarSet = calendar; calendar\n\n                break;\n            [...]",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}