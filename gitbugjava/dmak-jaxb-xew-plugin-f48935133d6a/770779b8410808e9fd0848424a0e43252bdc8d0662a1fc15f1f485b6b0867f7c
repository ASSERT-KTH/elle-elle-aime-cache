{
    "generation": "/**\n * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Modify the container so it now refers the class. Container can be a class or package.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n\n    Map<String, JDefinedClass> classes;\n\n    if (grandParent.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                // Assuming methods areStatic(), isAnonymous(), and setAnonymous() exist ...\n                if (classOutline.target.isStatic() && classOutline.target.isAnonymous()) {\n                    classOutline.target.setAnonymous(false);\n                    break;\n                }\n            }\n        }\n    }\n\n    String newClassName = clazz.name();\n    int i = 0;\n    while (classes.containsKey(newClassName)) {\n        newClassName = parent.name() + clazz.name() + \"_\" + i;\n        i++;\n    }\n\n    if (!newClassName.equals(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newClassName);\n        setPrivateField(clazz, \"name\", newClassName);\n    }\n\n    classes.put(newClassName, clazz);\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}