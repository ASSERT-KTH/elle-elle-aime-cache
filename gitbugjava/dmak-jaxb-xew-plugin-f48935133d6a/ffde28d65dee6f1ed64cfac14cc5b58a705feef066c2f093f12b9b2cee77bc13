{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Ensure that the clazz is indeed an inner class\n    if (!clazz.isNested()) {\n        throw new IllegalArgumentException(\"The provided class is not an inner class.\");\n    }\n\n    // Modify the container so it now refers to the class. Container can be a class or package.\n    JClass parent = clazz.containingClass();\n    if (parent == null) {\n        throw new IllegalStateException(\"The parent class of \" + clazz.fullName() + \" is null.\");\n    }\n    JClassContainer grandParent = parent.containingPackage();\n    if (grandParent == null) {\n        throw new IllegalStateException(\"The grandparent of \" + clazz.fullName() + \" is null.\");\n    }\n\n    // Allows to track class name collisions:\n    Map<String, JDefinedClass> classes;\n\n    // FIXME: Pending https://java.net/jira/browse/JAXB-957\n    if (grandParent instanceof JDefinedClass) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n        // Attempt to access private field \"classes\" in grandParentClass\n        try {\n            Field classesField = JDefinedClass.class.getDeclaredField(\"classes\");\n            classesField.setAccessible(true);\n            classes = (Map<String, JDefinedClass>) classesField.get(grandParentClass);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            throw new RuntimeException(\"Failed to access 'classes' field in JDefinedClass\", e);\n        }\n    } else if (grandParent instanceof JPackage) {\n        JPackage grandParentPackage = (JPackage) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n        // Attempt to access private field \"classes\" in grandParentPackage\n        try {\n            Field classesField = JPackage.class.getDeclaredField(\"classes\");\n            classesField.setAccessible(true);\n            classes = (Map<String, JDefinedClass>) classesField.get(grandParentPackage);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            throw new RuntimeException(\"Failed to access 'classes' field in JPackage\", e);\n        }\n\n        // In this scenario, the class should have its \"static\" modifier reset otherwise it won't compile:\n        clazz.mods().setStatic(false);\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n\n                // FIXME: Inner class is always a local declaration.\n                assert sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal();\n\n                try {\n                    Field anonymousField = XSDeclaration.class.getDeclaredField(\"anonymous\");\n                    anonymousField.setAccessible(true);\n                    anonymousField.setBoolean(sc, false);\n                } catch (NoSuchFieldException | IllegalAccessException e) {\n                    throw new RuntimeException(\"Failed to set 'anonymous' field in XSDeclaration\", e);\n                }\n                break;\n            }\n        }\n    } else {\n        throw new IllegalArgumentException(\"Unexpected grandparent type: \" + grandParent.getClass().getName());\n    }\n\n    // Check for name collisions and rename if necessary\n    if (classes.containsKey(clazz.name())) {\n        String newName = parent.name() + clazz.name();\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to \" + newName);\n        clazz.setName(newName);\n    }\n\n    // Add the class to the grandparent's classes map\n    classes.put(clazz.name(), clazz);\n\n    // Finally, update the class's outer reference to the grandparent\n    try {\n        Field outerField = JDefinedClass.class.getDeclaredField(\"outer\");\n        outerField.setAccessible(true);\n        outerField.set(clazz, grandParent);\n    } catch (NoSuchFieldException | IllegalAccessException e) {\n        throw new RuntimeException(\"Failed to set 'outer' field in JDefinedClass\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}