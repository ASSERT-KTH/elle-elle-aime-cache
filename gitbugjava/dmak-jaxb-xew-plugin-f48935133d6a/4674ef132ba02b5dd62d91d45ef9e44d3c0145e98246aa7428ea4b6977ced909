{
    "generation": "private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Ensure the class is an inner class\n    if (!clazz.isNested()) {\n        throw new IllegalArgumentException(\"The class must be an inner class.\");\n    }\n\n    // Get the current parent and grandparent containers\n    JClassContainer parent = clazz.owner();\n    JClassContainer grandParent = parent.owner();\n\n    // Determine the new container for the class\n    JClassContainer newContainer = grandParent;\n\n    // Prepare to handle name collisions\n    Map<String, JDefinedClass> classes;\n    if (grandParent.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        classes = getPrivateField(grandParentClass, \"classes\");\n        // Set outer to the grandparent class\n        setPrivateField(clazz, \"outer\", grandParentClass);\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n        classes = getPrivateField(grandParentPackage, \"classes\");\n        // Set outer to null when moving to a package\n        setPrivateField(clazz, \"outer\", null);\n        // Ensure the class is not static when moved to a package\n        int mods = clazz.mods().getValue() & ~JMod.STATIC;\n        setPrivateField(clazz.mods(), \"mods\", mods);\n    }\n\n    // Handle name collisions\n    String originalName = clazz.name();\n    String newName = originalName;\n    int counter = 1;\n    while (classes.containsKey(newName)) {\n        newName = originalName + \"_\" + counter++;\n    }\n    if (!newName.equals(originalName)) {\n        writeSummary(String.format(\"\\tRenaming class %s to %s\", clazz.fullName(), newName));\n        setPrivateField(clazz, \"name\", newName);\n    }\n\n    // Remove the class from the old container's classes map\n    Map<String, JDefinedClass> oldClasses = getPrivateField(parent, \"classes\");\n    oldClasses.remove(originalName);\n\n    // Add the class to the new container's classes map\n    classes.put(newName, clazz);\n\n    // Update the class's container reference\n    setPrivateField(clazz, \"container\", newContainer);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}