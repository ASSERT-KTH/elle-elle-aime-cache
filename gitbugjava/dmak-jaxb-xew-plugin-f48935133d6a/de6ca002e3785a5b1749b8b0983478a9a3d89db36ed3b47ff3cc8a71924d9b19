{
    "generation": "private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Modify the container so it now refers to the class. Container can be a class or package.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n    // Allows to track class name collisions:\n    Map<String, JDefinedClass> classes;\n\n    if (grandParent.isClass()) {\n        // Element class should be added as its container child:\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n        int mods = clazz.mods().getValue();\n        if ((mods & JMod.STATIC) != 0) {\n            setPrivateField(clazz.mods(), \"mods\", mods & ~JMod.STATIC);\n        }\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n\n                // Ensure safety when casting and check `isLocal` only on appropriate types.\n                if (sc instanceof XSDeclaration) {\n                    XSDeclaration xsDeclaration = (XSDeclaration) sc;\n                    if (xsDeclaration.isLocal()) {\n                        setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                    }\n                }\n\n                break;\n            }\n        }\n    }\n\n    if (classes.containsKey(clazz.name())) {\n        String newName = parent.name() + clazz.name();\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newName);\n        setPrivateField(clazz, \"name\", newName);\n    }\n\n    classes.put(clazz.name(), clazz);\n\n    // Finally modify the class so that it refers back to the container:\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}