{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Modify the container so it now refers the class. Container can be a class or package.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n    // Allows to track class name collisions:\n    Map<String, JDefinedClass> classes;\n\n    // FIXME: Pending https://java.net/jira/browse/JAXB-957\n    if (grandParent.isClass()) {\n        // Element class should be added as its container child:\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n        classes = grandParentClass.classes(); // Assuming there's a public method to get classes\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n        classes = grandParentPackage.classes(); // Assuming there's a public method to get classes\n\n        // In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n        clazz.mods().setStatic(false);\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n\n                // FIXME: Inner class is always a local declaration.\n                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {\n                    ((XSDeclaration) sc).setAnonymous(false);\n                } else {\n                    // Handle unexpected schema component type\n                    throw new IllegalArgumentException(\"Unexpected schema component type: \" + sc.getClass().getName());\n                }\n                break;\n            }\n        }\n    }\n\n    String desiredName = clazz.name();\n    String newName = desiredName;\n    int counter = 1;\n    while (classes.containsKey(newName)) {\n        // Handle name collision by appending a unique suffix\n        newName = desiredName + \"_\" + counter++;\n    }\n    if (!newName.equals(desiredName)) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to \" + newName);\n        clazz.setName(newName);\n    }\n\n    classes.put(newName, clazz);\n\n    // Finally modify the class so that it refers back the container:\n    clazz.setContainer(grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}