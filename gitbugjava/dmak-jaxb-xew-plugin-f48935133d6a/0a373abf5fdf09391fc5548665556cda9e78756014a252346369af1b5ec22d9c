{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Modify the container so it now refers the class. Container can be a class or package.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n    // Allows to track class name collisions:\n    Map<String, JDefinedClass> classes;\n\n    // Pending https://java.net/jira/browse/JAXB-957\n    if (grandParent.isClass()) {\n        // Element class should be added as its container child:\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // Use public API to remove the \"static\" modifier\n        clazz.mods().setStatic(false);\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n\n                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {\n                    // Attempt to set the 'anonymous' field via reflection\n                    try {\n                        Field anonymousField = sc.getClass().getDeclaredField(\"anonymous\");\n                        anonymousField.setAccessible(true);\n                        anonymousField.set(sc, Boolean.FALSE);\n                    } catch (NoSuchFieldException | IllegalAccessException e) {\n                        // Handle exceptions appropriately\n                        e.printStackTrace();\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n        // Use public API to set the class name\n        clazz.name(parent.name() + clazz.name());\n    }\n\n    classes.put(clazz.name(), clazz);\n\n    // Modify the class so that it refers back to the grandparent container\n    try {\n        Field outerField = clazz.getClass().getDeclaredField(\"outer\");\n        outerField.setAccessible(true);\n        outerField.set(clazz, grandParent);\n    } catch (NoSuchFieldException | IllegalAccessException e) {\n        // Handle exceptions appropriately\n        e.printStackTrace();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}