{
    "generation": "/**\n * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Get the parent and grandparent containers\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n    Map<String, JDefinedClass> classes;\n\n    // Remove the class from the old container's classes map\n    Map<String, JDefinedClass> oldClasses = getPrivateField(parent, \"classes\");\n    oldClasses.remove(clazz.name());\n\n    if (grandParent.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // Reset 'static' modifier when moving to a package\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        // Update schema component's 'anonymous' field\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {\n                    setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                }\n                break;\n            }\n        }\n    }\n\n    // Generate a unique name if there's a name collision\n    String desiredName = clazz.name();\n    if (classes.containsKey(desiredName)) {\n        String uniqueName = getUniqueName(desiredName, classes);\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to \" + uniqueName);\n        setPrivateField(clazz, \"name\", uniqueName);\n    }\n\n    // Add the class to the new container's classes map\n    classes.put(clazz.name(), clazz);\n\n    // Update the class's outer container\n    setPrivateField(clazz, \"outer\", grandParent);\n}\n\nprivate String getUniqueName(String baseName, Map<String, JDefinedClass> classes) {\n    String name = baseName;\n    int counter = 2;\n    while (classes.containsKey(name)) {\n        name = baseName + \"_\" + counter++;\n    }\n    return name;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}