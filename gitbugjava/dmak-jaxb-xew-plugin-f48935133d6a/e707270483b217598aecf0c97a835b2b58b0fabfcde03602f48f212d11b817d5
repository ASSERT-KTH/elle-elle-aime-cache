{
    "generation": "private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Ensure the clazz is an inner class.\n    if (!clazz.isNested()) {\n        throw new IllegalArgumentException(\"The class must be an inner class.\");\n    }\n\n    // Get the parent and grandparent containers.\n    JClass parent = clazz.container();\n    JClassContainer grandParent = parent.container();\n\n    // Determine the target container and handle accordingly.\n    if (grandParent.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        // Logic for moving to a class container.\n        // Ensure the class is nested properly.\n        setPrivateField(clazz, \"outer\", grandParentClass);\n        // Possibly set as non-static if needed.\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        // Logic for moving to a package.\n        // Ensure the class name is unique in the package.\n        String baseName = clazz.name();\n        String newName = baseName;\n        int suffixNumber = 1;\n        Map<String, JDefinedClass> classes = getPrivateField(grandParentPackage, \"classes\");\n        while (classes.containsKey(newName)) {\n            newName = baseName + suffixNumber++;\n        }\n        if (!newName.equals(baseName)) {\n            writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to \" + newName);\n            setPrivateField(clazz, \"name\", newName);\n        }\n        // Remove static modifier if necessary.\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n        // Update schema component if needed.\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {\n                    setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                }\n                break;\n            }\n        }\n    }\n\n    // Update the class's container reference.\n    setPrivateField(clazz, \"outer\", grandParent);\n\n    // Add the class to the grandparent's classes map.\n    Map<String, JDefinedClass> classes = getPrivateField(grandParent, \"classes\");\n    classes.put(clazz.name(), clazz);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}