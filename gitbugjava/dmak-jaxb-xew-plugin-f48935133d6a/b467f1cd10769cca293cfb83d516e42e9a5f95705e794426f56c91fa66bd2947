{
    "generation": "private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n    Map<String, JDefinedClass> grandParentClasses;\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n\n    if (grandParent.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        grandParentClasses = getPrivateField(grandParentClass, \"classes\");\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n        grandParentClasses = getPrivateField(grandParentPackage, \"classes\");\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\n                break;\n            }\n        }\n    }\n\n    if (grandParentClasses.containsKey(clazz.name())) {\n        String newName = parent.name() + clazz.name();\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newName);\n        setPrivateField(clazz, \"name\", newName);\n    }\n\n    grandParentClasses.put(clazz.name(), clazz);\n    parentClasses.remove(clazz.name());\n\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}