{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Modify the container so it now refers to the class. Container can be a class or package.\n    JClassContainer parentContainer = clazz.parentContainer();\n    if (parentContainer == null) {\n        writeSummary(\"\\tCannot move class \" + clazz.fullName() + \" up, no parent container.\");\n        return;\n    }\n    JClassContainer grandParentContainer = null;\n    // Allows to track class name collisions:\n    Map<String, JDefinedClass> classes;\n\n    if (parentContainer.isClass()) {\n        JDefinedClass parentClass = (JDefinedClass) parentContainer;\n        grandParentContainer = parentClass.parentContainer();\n    } else if (parentContainer.isPackage()) {\n        JPackage parentPackage = (JPackage) parentContainer;\n        grandParentContainer = parentPackage.parent();\n    } else {\n        writeSummary(\"\\tCannot move class \" + clazz.fullName() + \" up, unknown parent container type.\");\n        return;\n    }\n\n    if (grandParentContainer == null) {\n        writeSummary(\"\\tCannot move class \" + clazz.fullName() + \" up, no grandparent container.\");\n        return;\n    }\n\n    if (grandParentContainer.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParentContainer;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else if (grandParentContainer.isPackage()) {\n        JPackage grandParentPackage = (JPackage) grandParentContainer;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n\n                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {\n                    setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                }\n\n                break;\n            }\n        }\n    } else {\n        writeSummary(\"\\tCannot move class \" + clazz.fullName() + \" up, unknown grandparent container type.\");\n        return;\n    }\n\n    if (classes.containsKey(clazz.name())) {\n        String parentName;\n        if (parentContainer.isClass()) {\n            parentName = ((JDefinedClass) parentContainer).name();\n        } else if (parentContainer.isPackage()) {\n            parentName = ((JPackage) parentContainer).name();\n        } else {\n            parentName = \"\";\n        }\n\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parentName + clazz.name());\n        setPrivateField(clazz, \"name\", parentName + clazz.name());\n    }\n\n    classes.put(clazz.name(), clazz);\n\n    // Finally modify the class so that it refers back the container:\n    setPrivateField(clazz, \"outer\", grandParentContainer);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}