{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Modify the container so it now refers to the class. Container can be a class or package.\n    JClassContainer parentContainer = clazz.parentContainer();\n\n    if (!parentContainer.isClass()) {\n        // Parent is not a class, cannot move up\n        writeSummary(\"\\tClass \" + clazz.fullName() + \" does not have a parent class to move up from.\");\n        return;\n    }\n\n    JDefinedClass parent = (JDefinedClass) parentContainer;\n    JClassContainer grandParentContainer = parent.parentContainer();\n\n    // Allows tracking of class name collisions:\n    Map<String, JDefinedClass> classes;\n\n    if (grandParentContainer.isClass()) {\n        // Element class should be added as its container's child:\n        JDefinedClass grandParentClass = (JDefinedClass) grandParentContainer;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else if (grandParentContainer.isPackage()) {\n        JPackage grandParentPackage = (JPackage) grandParentContainer;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // In this scenario, the class should have the \"static\" modifier removed; otherwise, it won't compile:\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n\n                // FIXME: Inner class is always a local declaration.\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\n                break;\n            }\n        }\n    } else {\n        throw new IllegalArgumentException(\"Unknown grandparent container type\");\n    }\n\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n        setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n    }\n\n    classes.put(clazz.name(), clazz);\n\n    // Finally, modify the class so that it refers back to the container:\n    setPrivateField(clazz, \"outer\", grandParentContainer);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}