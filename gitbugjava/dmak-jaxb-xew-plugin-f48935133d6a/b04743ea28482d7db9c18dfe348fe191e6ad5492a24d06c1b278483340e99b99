{
    "generation": "/**\n * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Modify the container so it now refers the class. Container can be a class or package.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n    // Allows to track class name collisions:\n    Map<String, JDefinedClass> classes;\n\n    // FIXME: Pending https://java.net/jira/browse/JAXB-957\n    if (grandParent.isClass()) {\n        // Element class should be added as its container child:\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n        writeSummary(String.format(\"\\tMoving inner class %s to class %s. Original modifiers: 0x%x\",\n                clazz.fullName(), grandParentClass.fullName(), clazz.mods().getValue()));\n\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n\n        writeSummary(String.format(\"\\tMoving inner class %s to package %s. Original modifiers: 0x%x\",\n                clazz.fullName(), grandParentPackage.name(), clazz.mods().getValue()));\n\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n        int originalMods = clazz.mods().getValue();\n        if ((originalMods & JMod.STATIC) != 0) {\n            setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(originalMods & ~JMod.STATIC));\n        }\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {\n                    setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                } else {\n                    writeSummary(\"\\tSchema component is not a local declaration. Skipping modification.\");\n                }\n                break;\n            }\n        }\n    }\n\n    if (classes.containsKey(clazz.name())) {\n        String uniqueName = generateUniqueName(clazz, classes);\n        writeSummary(String.format(\"\\tRenaming class %s to %s\", clazz.fullName(), uniqueName));\n        setPrivateField(clazz, \"name\", uniqueName);\n    }\n\n    classes.put(clazz.name(), clazz);\n\n    // Finally modify the class so that it refers back the container:\n    setPrivateField(clazz, \"outer\", grandParent);\n}\n\nprivate String generateUniqueName(JDefinedClass clazz, Map<String, JDefinedClass> classes) {\n    String baseName = clazz.name();\n    String newName = baseName;\n    int counter = 1;\n    while (classes.containsKey(newName)) {\n        newName = baseName + counter++;\n    }\n    return newName;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}