{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Modify the container so it now refers to the class. The container can be a class or package.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n    \n    // Allows to track class name collisions:\n    Map<String, JDefinedClass> classes;\n\n    // FIXME: Pending https://java.net/jira/browse/JAXB-957\n    if (grandParent.isClass()) {\n        // Element class should be added as its container child:\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // In this scenario, class should have \"static\" modifier removed if present, otherwise it won't compile:\n        JMods mods = clazz.mods();\n        int newModsValue = mods.getValue() & ~JMod.STATIC;\n        setPrivateField(mods, \"mods\", Integer.valueOf(newModsValue));\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n\n                // FIXME: Inner class is always a local declaration.\n                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {\n                    setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                }\n\n                break;\n            }\n        }\n    }\n\n    String newName = clazz.name();\n    if (classes.containsKey(newName)) {\n        // Generate a unique name to avoid collisions\n        int counter = 1;\n        while (classes.containsKey(newName + counter)) {\n            counter++;\n        }\n        newName = newName + counter;\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newName);\n        setPrivateField(clazz, \"name\", newName);\n    }\n\n    classes.put(newName, clazz);\n\n    // Finally, modify the class so that it refers back to the container:\n    setPrivateField(clazz, \"outer\", grandParent);\n\n    // Update the parent to remove the class\n    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, \"classes\");\n    parentClasses.remove(clazz.name());\n\n    // If the parent class is now empty, remove it\n    if (parentClasses.isEmpty() && parent.parentContainer() instanceof JDefinedClass) {\n        JDefinedClass grandGrandParent = (JDefinedClass) parent.parentContainer();\n        Map<String, JDefinedClass> grandGrandParentClasses = getPrivateField(grandGrandParent, \"classes\");\n        grandGrandParentClasses.remove(parent.name());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}