{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t// Modify the container so it now refers to the class. Container can be a class or package.\n\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\tJClassContainer grandParent = parent.parentContainer();\n\t// Allows tracking class name collisions:\n\tMap<String, JDefinedClass> classes;\n\n\tif (grandParent.isClass()) {\n\t\t// Element class should be added as its container child:\n\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n\t\tclasses = getPrivateField(grandParentClass, \"classes\");\n\t} else {\n\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\n\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n\t\tclasses = getPrivateField(grandParentPackage, \"classes\");\n\n\t\t// Ensure the \"static\" modifier is reset; otherwise, it won't compile.\n\t\tif ((clazz.mods().getValue() & JMod.STATIC) != 0) {\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", clazz.mods().getValue() & ~JMod.STATIC);\n\t\t}\n\n\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\n\t\t\t\t// Inner class is always a local declaration. Adjust the corresponding property.\n\t\t\t\tif (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {\n\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handle name collisions if the class with the same name already exists at the destination.\n\tif (classes.containsKey(clazz.name())) {\n\t\tString newName = parent.name() + clazz.name();\n\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to \" + newName);\n\t\tsetPrivateField(clazz, \"name\", newName);\n\t}\n\n\tclasses.put(clazz.name(), clazz);\n\n\t// Finally, modify the class so it refers to the updated container:\n\tsetPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}