{
    "generation": "private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    JClassContainer parent = clazz.parentContainer();\n    if (!(parent instanceof JDefinedClass)) {\n        throw new IllegalArgumentException(\"The given class must be an inner class.\");\n    }\n    JClassContainer grandParent = parent.parentContainer();\n    Map<String, JDefinedClass> classes;\n\n    if (grandParent instanceof JDefinedClass) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else if (grandParent instanceof JPackage) {\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n\n        // Remove static modifier when moving to package level\n        clazz.mods().setStatic(false);\n\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {\n                    setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                }\n                break;\n            }\n        }\n    } else {\n        throw new IllegalStateException(\"Unexpected grandparent type: \" + grandParent.getClass().getName());\n    }\n\n    String newName = clazz.name();\n    if (classes.containsKey(newName)) {\n        newName = ((JDefinedClass) parent).name() + clazz.name();\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newName);\n        setPrivateField(clazz, \"name\", newName);\n    }\n\n    classes.put(newName, clazz);\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}