{
    "generation": "/**\n * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Modify the container so it now refers the class. Container can be a class or package.\n    JDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n    JClassContainer grandParent = parent.parentContainer();\n    // Allows to track class name collisions:\n    Map<String, JDefinedClass> classes;\n\n    // Check for null to prevent NPE\n    if (grandParent!= null) {\n        if (grandParent.isClass()) {\n            // Element class should be added as its container child:\n            JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\n            writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\n            classes = getPrivateField(grandParentClass, \"classes\");\n        } else if (grandParent.isPackage()) {\n            JPackage grandParentPackage = (JPackage) grandParent;\n\n            writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\n            classes = getPrivateField(grandParentPackage, \"classes\");\n\n            // In this scenario class should have \"static\" modifier reset otherwise it won't compile:\n            setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\n            for (ClassOutline classOutline : outline.getClasses()) {\n                if (classOutline.implClass == clazz) {\n                    XSComponent sc = classOutline.target.getSchemaComponent();\n\n                    // Inner class is always a local declaration.\n                    if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {\n                        setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                    } else {\n                        // Handle the case when the assumption is not met\n                        writeSummary(\"Warning: Inner class \" + clazz.fullName() + \" is not a local declaration.\");\n                    }\n                    break;\n                }\n            }\n        } else {\n            // Handle the case when grandParent is neither a class nor a package\n            writeSummary(\"Error: Unable to move inner class \" + clazz.fullName() + \" to unknown container type.\");\n            return;\n        }\n\n        if (classes.containsKey(clazz.name())) {\n            writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n            setPrivateField(clazz, \"name\", parent.name() + clazz.name());\n        }\n\n        classes.put(clazz.name(), clazz);\n\n        // Finally modify the class so that it refers back the container:\n        setPrivateField(clazz, \"outer\", grandParent);\n    } else {\n        // Handle the case when grandParent is null\n        writeSummary(\"Error: Unable to move inner class \" + clazz.fullName() + \" due to null grandparent.\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}