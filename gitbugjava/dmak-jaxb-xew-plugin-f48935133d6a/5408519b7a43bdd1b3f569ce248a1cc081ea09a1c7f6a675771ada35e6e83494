{
    "generation": "/**\n * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.\n */\nprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n    // Get the original parent and grandparent containers\n    JClassContainer originalParent = clazz.container();\n    JClassContainer grandParent = originalParent.parentContainer();\n    \n    // Remove the class from the original parent's classes map\n    Map<String, JDefinedClass> originalClasses = getPrivateField(originalParent, \"classes\");\n    originalClasses.remove(clazz.name());\n\n    // Determine the new container and handle naming collisions\n    Map<String, JDefinedClass> classes;\n    if (grandParent.isClass()) {\n        JDefinedClass grandParentClass = (JDefinedClass) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n        classes = getPrivateField(grandParentClass, \"classes\");\n    } else {\n        JPackage grandParentPackage = (JPackage) grandParent;\n        writeSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n        classes = getPrivateField(grandParentPackage, \"classes\");\n        \n        // For packages, ensure the class is not static\n        setPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n        \n        // Update schema component\n        for (ClassOutline classOutline : outline.getClasses()) {\n            if (classOutline.implClass == clazz) {\n                XSComponent sc = classOutline.target.getSchemaComponent();\n                setPrivateField(sc, \"anonymous\", Boolean.FALSE);\n                break;\n            }\n        }\n    }\n\n    // Handle name collisions\n    if (classes.containsKey(clazz.name())) {\n        writeSummary(\"\\tRenaming class \" + clazz.fullName() + \" to \" + originalParent.name() + clazz.name());\n        String newName = originalParent.name() + clazz.name();\n        setPrivateField(clazz, \"name\", newName);\n        clazz = (JDefinedClass) getPrivateField(clazz, \"outer\").def().classNEW(newName);\n    }\n\n    // Add the class to the new container's classes map\n    classes.put(clazz.name(), clazz);\n\n    // Update the class's outer reference to the new container\n    setPrivateField(clazz, \"outer\", grandParent);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}