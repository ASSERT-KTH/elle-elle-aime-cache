{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = this.parentNode instanceof Element ? (Element) this.parentNode : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        trimLeading = (this.siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n            parentNode instanceof Document;\n        trimTrailing = this.nextSibling() == null && parent != null && parent.tag().isBlock();\n\n        // if this text is just whitespace, and the next node will cause an indent, skip this text:\n        Node next = this.nextSibling();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n            || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n        if (couldSkip && this.isBlank()) return;\n\n        if (this.nodeName().equals(\"br\") && next != null && next instanceof TextNode) {\n            accum.append('\\n');\n        }\n\n        if ((this.siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !this.isBlank()) ||\n                (out.outline() && this.siblingNodes().size() > 0 && !this.isBlank()))\n            indent(accum, depth, out);\n    }\n\n    if (this.nodeName().equals(\"br\") && prettyPrint) {\n        accum.append(\"\\n\");\n    }\n\n    Entities.escape(accum, this.coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}