{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        // Always preserve leading and trailing whitespace to maintain formatting\n        trimLeading = false;\n        trimTrailing = false;\n\n        Node next = this.nextSibling();\n        if (next instanceof Element && ((Element) next).shouldIndent(out)) {\n            if (isBlank()) {\n                // Append a newline if the current text is blank and next is an indenting element\n                accum.append(\"\\n\");\n            }\n        } else if (next instanceof TextNode && (((TextNode) next).isBlank())) {\n            // Do nothing or append a space if needed\n        }\n\n        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||\n            (out.outline() && siblingNodes().size() > 0 && !isBlank())) {\n            indent(accum, depth, out);\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}