{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                      parentNode instanceof Document;\n        trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n        // Check if the previous sibling is a <br> tag, and adjust trimLeading accordingly\n        if (siblingIndex > 0) {\n            List<Node> siblings = siblingNodes();\n            if (siblings != null && siblingIndex > 0) {\n                Node prev = siblings.get(siblingIndex - 1);\n                if (prev instanceof Element && \"br\".equals(((Element) prev).tagName())) {\n                    trimLeading = false; // Prevent trimming leading whitespace after <br>\n                }\n            }\n        }\n\n        // Skip blank text nodes if the next node is an element that should indent or another blank text node\n        Node next = this.nextSibling();\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) ||\n                            (next instanceof TextNode && (((TextNode) next).isBlank()));\n        if (couldSkip && isBlank()) return;\n\n        // Indent if this is the first non-blank sibling or in outline mode with multiple siblings\n        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||\n            (out.outline() && siblingNodes().size() > 0 && !isBlank()))\n            indent(accum, depth, out);\n    }\n\n    // Escape and append the text value with normalization and trimming flags\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}