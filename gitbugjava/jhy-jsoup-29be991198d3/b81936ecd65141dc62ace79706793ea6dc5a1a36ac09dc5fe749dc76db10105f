{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        // Adjust leading trim condition\n        trimLeading = (siblingIndex == 0 && parent != null && (parent.tag().isBlock() || parent.tag().isSelfClosing())) ||\n                parentNode instanceof Document;\n        // Adjust trailing trim condition\n        trimTrailing = nextSibling() == null && parent != null && (parent.tag().isBlock() || parent.tag().isSelfClosing());\n\n        // Handle <br> specifically\n        Node next = this.nextSibling();\n        if (next instanceof Element && ((Element) next).tagName().equals(\"br\")) {\n            trimTrailing = true;\n        }\n        Node prev = this.previousSibling();\n        if (prev instanceof Element && ((Element) prev).tagName().equals(\"br\")) {\n            trimLeading = true;\n        }\n\n        // if this text is just whitespace, and the next node will cause an indent, skip this text:\n        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) ||\n                (next instanceof TextNode && ((TextNode) next).isBlank()); // next is blank text, from re-parenting\n        if (couldSkip && isBlank()) return;\n\n        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank()))\n            indent(accum, depth, out);\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}