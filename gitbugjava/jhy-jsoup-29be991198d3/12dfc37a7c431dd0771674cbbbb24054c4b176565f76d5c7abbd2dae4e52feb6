{
    "generation": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    final boolean prettyPrint = out.prettyPrint();\n    final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n    final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n\n    boolean trimLeading = false;\n    boolean trimTrailing = false;\n    if (normaliseWhite) {\n        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n            parentNode instanceof Document;\n        trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n\n        Node next = this.nextSibling();\n        boolean couldSkipNextIndent = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent\n            || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting\n\n        // If this text is just whitespace, and the next node will cause an indent, remove this text:\n        if (couldSkipNextIndent && isBlank()) {\n            childNodesCopy().forEach(TextNode::remove);\n            return;\n        }\n\n        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||\n            (out.outline() && siblingNodes().size() > 0 && !isBlank())) {\n            final Element sibling = nextSibling() instanceof Element ? (Element)nextSibling() : null;\n            // If the next sibling is a BR tag, don't indent this text to align with it.\n            if (!(sibling != null && sibling.tag().isSelfClosing())) {\n              indent(accum, depth, out);\n            }\n        }\n    }\n\n    Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}