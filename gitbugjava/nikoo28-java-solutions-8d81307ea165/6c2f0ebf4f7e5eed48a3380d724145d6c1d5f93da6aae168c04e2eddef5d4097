{
    "generation": "/**\n * Calculates the span of the stock's price for each day.\n * The span of the stock's price on a given day is the minimum number of consecutive days \n * (including the current day) for which the price of the stock is less than or equal to its price on the current day.\n * \n * @param prices an array of daily stock prices\n * @return an array of spans, one for each day\n */\npublic int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      while (!indexStack.isEmpty() \n          && prices[indexStack.peek()] <= prices[i]) {\n        indexStack.pop();\n      }\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than or equal to all previous values\n      if (indexStack.isEmpty()) {\n        spans[i] = i + 1;\n      } else {\n        // If the current price is equal to the price at the top of the stack,\n        // we need to consider all consecutive equal prices\n        while (!indexStack.isEmpty() \n            && prices[indexStack.peek()] == prices[i]) {\n          indexStack.pop();\n        }\n        // Update the span\n        spans[i] = indexStack.isEmpty()? i + 1 : i - indexStack.peek();\n      }\n\n      indexStack.push(i);\n    }\n\n    return spans;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}