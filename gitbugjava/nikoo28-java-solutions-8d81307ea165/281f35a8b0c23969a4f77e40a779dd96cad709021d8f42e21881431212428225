{
    "generation": "public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n        int span = 1; // Initialize span to 1 for the current element\n        while (!indexStack.isEmpty() && prices[indexStack.peek()] <= prices[i]) {\n            span += spans[indexStack.pop()] - 1; // Add the span of the popped element minus 1\n        }\n\n        // If index stack is empty, the price at index 'i'\n        // is greater than all previous values\n        if (indexStack.isEmpty())\n            spans[i] = span;\n        else\n            spans[i] = span;\n\n        indexStack.push(i);\n    }\n\n    return spans;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}