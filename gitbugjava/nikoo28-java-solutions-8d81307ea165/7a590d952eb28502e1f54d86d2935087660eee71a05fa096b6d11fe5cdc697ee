{
    "generation": "/**\n * Calculates the span of each price in the given array.\n * The span of a price at index 'i' is the number of consecutive days \n * (including the current day) where the price is less than or equal to \n * the price at index 'i'.\n * \n * @param prices Array of stock prices\n * @return Array of spans for each price\n */\npublic int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i])\n        indexStack.pop();\n\n      // If index stack is empty, the price at index 'i'\n      // is greater than all previous values\n      if (indexStack.isEmpty())\n        spans[i] = i + 1;\n      else\n        spans[i] = i - indexStack.peek();\n\n      indexStack.push(i);\n    }\n\n    return spans;\n}",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}