{
    "generation": "  public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] <= prices[i])\n        indexStack.pop();\n\n      // If the stack is empty, the span of this element is equal to its index plus one\n      // because it's greater than all previous elements.\n      // Otherwise, the span of this element is the difference between its index and the index of the previous element\n      // that is greater than the current price (the one at the top of the stack).\n      spans[i] = indexStack.isEmpty() ? i + 1 : i - indexStack.peek();\n\n      // Push the index of the current element onto the stack\n      indexStack.push(i);\n    }\n\n    return spans;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}