{
    "generation": "public int[] calculateSpans(int[] prices) {\n\n    int[] spans = new int[prices.length];\n    spans[0] = 1; // Span of first element is always 1\n\n    Stack<Integer> indexStack = new Stack<>();\n\n    // Push the index of first element\n    indexStack.push(0);\n\n    for (int i = 1; i < prices.length; i++) {\n        // Pop elements from stack while stack is not empty and the current price\n        // is greater than or equal to the price at the index at the top of the stack\n        while (!indexStack.isEmpty() && prices[indexStack.peek()] <= prices[i])\n            indexStack.pop();\n\n        // If the index stack is empty, the price at index 'i' is greater than or equal to\n        // all previous values, otherwise the span is the difference between the current index\n        // and the index at the top of the stack (which represents the previous greater element)\n        spans[i] = indexStack.isEmpty() ? i + 1 : i - indexStack.peek();\n\n        // Push the current index onto the stack\n        indexStack.push(i);\n    }\n\n    return spans;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}