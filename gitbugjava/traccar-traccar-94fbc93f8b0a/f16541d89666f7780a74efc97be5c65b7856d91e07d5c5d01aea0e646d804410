{
    "generation": "private void readBinaryCustomData(Position position, ByteBuf buf, String form) {\n    CellTower cellTower = new CellTower();\n    String[] keys = form.substring(1).split(\"%\");\n    for (String key : keys) {\n        switch (key) {\n            case \"SA\":\n                if (buf.isReadable(1)) {\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                } else {\n                    logger.warn(\"Not enough data for key SA\");\n                }\n                break;\n            case \"MV\":\n                if (buf.isReadable(2)) {\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                } else {\n                    logger.warn(\"Not enough data for key MV\");\n                }\n                break;\n            case \"BV\":\n                if (buf.isReadable(2)) {\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                } else {\n                    logger.warn(\"Not enough data for key BV\");\n                }\n                break;\n            case \"GQ\":\n                if (buf.isReadable(1)) {\n                    cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                } else {\n                    logger.warn(\"Not enough data for key GQ\");\n                }\n                break;\n            case \"CE\":\n                if (buf.isReadable(4)) {\n                    cellTower.setCellId(buf.readUnsignedInt());\n                } else {\n                    logger.warn(\"Not enough data for key CE\");\n                }\n                break;\n            case \"LC\":\n                if (buf.isReadable(2)) {\n                    cellTower.setLocationAreaCode(buf.readUnsignedShort());\n                } else {\n                    logger.warn(\"Not enough data for key LC\");\n                }\n                break;\n            case \"CN\":\n                if (buf.isReadable(4)) {\n                    int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn\n                    cellTower.setMobileCountryCode(combinedMobileCodes / 100);\n                    cellTower.setMobileNetworkCode(combinedMobileCodes % 100);\n                } else {\n                    logger.warn(\"Not enough data for key CN\");\n                }\n                break;\n            case \"RL\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // rxlev\n                } else {\n                    logger.warn(\"Not enough data for key RL\");\n                }\n                break;\n            case \"PC\":\n                if (buf.isReadable(4)) {\n                    position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());\n                } else {\n                    logger.warn(\"Not enough data for key PC\");\n                }\n                break;\n            case \"AT\":\n                if (buf.isReadable(4)) {\n                    position.setAltitude(buf.readUnsignedInt());\n                } else {\n                    logger.warn(\"Not enough data for key AT\");\n                }\n                break;\n            case \"RP\":\n                if (buf.isReadable(2)) {\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                } else {\n                    logger.warn(\"Not enough data for key RP\");\n                }\n                break;\n            case \"GS\":\n                if (buf.isReadable(1)) {\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                } else {\n                    logger.warn(\"Not enough data for key GS\");\n                }\n                break;\n            case \"DT\":\n                if (buf.isReadable(1)) {\n                    position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);\n                } else {\n                    logger.warn(\"Not enough data for key DT\");\n                }\n                break;\n            case \"VN\":\n                if (buf.isReadable()) {\n                    position.set(Position.KEY_VIN, readString(buf));\n                } else {\n                    logger.warn(\"Not enough data for key VN\");\n                }\n                break;\n            case \"MF\":\n                if (buf.isReadable(2)) {\n                    buf.readUnsignedShort(); // mass air flow rate\n                } else {\n                    logger.warn(\"Not enough data for key MF\");\n                }\n                break;\n            case \"EL\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // engine load\n                } else {\n                    logger.warn(\"Not enough data for key EL\");\n                }\n                break;\n            case \"TR\":\n                if (buf.isReadable(1)) {\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                } else {\n                    logger.warn(\"Not enough data for key TR\");\n                }\n                break;\n            case \"ET\":\n                if (buf.isReadable(2)) {\n                    position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());\n                } else {\n                    logger.warn(\"Not enough data for key ET\");\n                }\n                break;\n            case \"FL\":\n                if (buf.isReadable(1)) {\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                } else {\n                    logger.warn(\"Not enough data for key FL\");\n                }\n                break;\n            case \"ML\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // mil status\n                } else {\n                    logger.warn(\"Not enough data for key ML\");\n                }\n                break;\n            case \"FC\":\n                if (buf.isReadable(4)) {\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                } else {\n                    logger.warn(\"Not enough data for key FC\");\n                }\n                break;\n            case \"CI\":\n                if (buf.isReadable()) {\n                    readString(buf); // format string\n                } else {\n                    logger.warn(\"Not enough data for key CI\");\n                }\n                break;\n            case \"AV1\":\n                if (buf.isReadable(2)) {\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                } else {\n                    logger.warn(\"Not enough data for key AV1\");\n                }\n                break;\n            case \"NC\":\n                if (buf.isReadable()) {\n                    readString(buf); // gsm neighbor cell info\n                } else {\n                    logger.warn(\"Not enough data for key NC\");\n                }\n                break;\n            case \"SM\":\n                if (buf.isReadable(2)) {\n                    buf.readUnsignedShort(); // max speed between reports\n                } else {\n                    logger.warn(\"Not enough data for key SM\");\n                }\n                break;\n            case \"GL\":\n                if (buf.isReadable()) {\n                    readString(buf); // google link\n                } else {\n                    logger.warn(\"Not enough data for key GL\");\n                }\n                break;\n            case \"MA\":\n                if (buf.isReadable()) {\n                    readString(buf); // mac address\n                } else {\n                    logger.warn(\"Not enough data for key MA\");\n                }\n                break;\n            case \"PD\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // pending code status\n                } else {\n                    logger.warn(\"Not enough data for key PD\");\n                }\n                break;\n            case \"CD\":\n                if (buf.isReadable()) {\n                    position.set(Position.KEY_ICCID, readString(buf));\n                } else {\n                    logger.warn(\"Not enough data for key CD\");\n                }\n                break;\n            case \"CM\":\n                if (buf.isReadable(8)) {\n                    buf.readLong(); // imsi\n                } else {\n                    logger.warn(\"Not enough data for key CM\");\n                }\n                break;\n            case \"GN\":\n                if (buf.isReadable(60)) {\n                    buf.skipBytes(60); // g sensor data\n                } else {\n                    logger.warn(\"Not enough data for key GN\");\n                }\n                break;\n            case \"GV\":\n                if (buf.isReadable(6)) {\n                    buf.skipBytes(6); // maximum g force\n                } else {\n                    logger.warn(\"Not enough data for key GV\");\n                }\n                break;\n            case \"ME\":\n                if (buf.isReadable(8)) {\n                    buf.readLong(); // imei\n                } else {\n                    logger.warn(\"Not enough data for key ME\");\n                }\n                break;\n            case \"IA\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // intake air temperature\n                } else {\n                    logger.warn(\"Not enough data for key IA\");\n                }\n                break;\n            case \"MP\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // manifold absolute pressure\n                } else {\n                    logger.warn(\"Not enough data for key MP\");\n                }\n                break;\n            case \"EO\":\n                if (buf.isReadable(4)) {\n                    position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedInt()));\n                } else {\n                    logger.warn(\"Not enough data for key EO\");\n                }\n                break;\n            case \"EH\":\n                if (buf.isReadable(4)) {\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000);\n                } else {\n                    logger.warn(\"Not enough data for key EH\");\n                }\n                break;\n            case \"ZO1\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // brake stroke status\n                } else {\n                    logger.warn(\"Not enough data for key ZO1\");\n                }\n                break;\n            case \"ZO2\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // warning indicator status\n                } else {\n                    logger.warn(\"Not enough data for key ZO2\");\n                }\n                break;\n            case \"ZO3\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // abs control status\n                } else {\n                    logger.warn(\"Not enough data for key ZO3\");\n                }\n                break;\n            case \"ZO4\":\n                if (buf.isReadable(1)) {\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 0.4);\n                } else {\n                    logger.warn(\"Not enough data for key ZO4\");\n                }\n                break;\n            case \"ZO5\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // parking brake status\n                } else {\n                    logger.warn(\"Not enough data for key ZO5\");\n                }\n                break;\n            case \"ZO6\":\n                if (buf.isReadable(1)) {\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte() * 0.805);\n                } else {\n                    logger.warn(\"Not enough data for key ZO6\");\n                }\n                break;\n            case \"ZO7\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // cruise control status\n                } else {\n                    logger.warn(\"Not enough data for key ZO7\");\n                }\n                break;\n            case \"ZO8\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // accelector pedal position\n                } else {\n                    logger.warn(\"Not enough data for key ZO8\");\n                }\n                break;\n            case \"ZO9\":\n                if (buf.isReadable(1)) {\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 0.5);\n                } else {\n                    logger.warn(\"Not enough data for key ZO9\");\n                }\n                break;\n            case \"ZO10\":\n                if (buf.isReadable(1)) {\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.5);\n                } else {\n                    logger.warn(\"Not enough data for key ZO10\");\n                }\n                break;\n            case \"ZO11\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // engine oil pressure\n                } else {\n                    logger.warn(\"Not enough data for key ZO11\");\n                }\n                break;\n            case \"ZO12\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // boost pressure\n                } else {\n                    logger.warn(\"Not enough data for key ZO12\");\n                }\n                break;\n            case \"ZO13\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // intake temperature\n                } else {\n                    logger.warn(\"Not enough data for key ZO13\");\n                }\n                break;\n            case \"ZO14\":\n                if (buf.isReadable(1)) {\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte());\n                } else {\n                    logger.warn(\"Not enough data for key ZO14\");\n                }\n                break;\n            case \"ZO15\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // brake application pressure\n                } else {\n                    logger.warn(\"Not enough data for key ZO15\");\n                }\n                break;\n            case \"ZO16\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // brake primary pressure\n                } else {\n                    logger.warn(\"Not enough data for key ZO16\");\n                }\n                break;\n            case \"ZH1\":\n                if (buf.isReadable(2)) {\n                    buf.readUnsignedShort(); // cargo weight\n                } else {\n                    logger.warn(\"Not enough data for key ZH1\");\n                }\n                break;\n            case \"ZH2\":\n                if (buf.isReadable(2)) {\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 16.428 / 3600);\n                } else {\n                    logger.warn(\"Not enough data for key ZH2\");\n                }\n                break;\n            case \"ZH3\":\n                if (buf.isReadable(2)) {\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.25);\n                } else {\n                    logger.warn(\"Not enough data for key ZH3\");\n                }\n                break;\n            case \"ZL1\":\n                if (buf.isReadable(4)) {\n                    buf.readUnsignedInt(); // fuel used (natural gas)\n                } else {\n                    logger.warn(\"Not enough data for key ZL1\");\n                }\n                break;\n            case \"ZL2\":\n                if (buf.isReadable(4)) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161);\n                } else {\n                    logger.warn(\"Not enough data for key ZL2\");\n                }\n                break;\n            case \"ZL3\":\n                if (buf.isReadable(4)) {\n                    buf.readUnsignedInt(); // vehicle hours\n                } else {\n                    logger.warn(\"Not enough data for key ZL3\");\n                }\n                break;\n            case \"ZL4\":\n                if (buf.isReadable(4)) {\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);\n                } else {\n                    logger.warn(\"Not enough data for key ZL4\");\n                }\n                break;\n            case \"ZS1\":\n                if (buf.isReadable()) {\n                    position.set(Position.KEY_VIN, readString(buf));\n                } else {\n                    logger.warn(\"Not enough data for key ZS1\");\n                }\n                break;\n            case \"JO1\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // pedals\n                } else {\n                    logger.warn(\"Not enough data for key JO1\");\n                }\n                break;\n            case \"JO2\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // power takeoff device\n                } else {\n                    logger.warn(\"Not enough data for key JO2\");\n                }\n                break;\n            case \"JO3\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // accelector pedal position\n                } else {\n                    logger.warn(\"Not enough data for key JO3\");\n                }\n                break;\n            case \"JO4\":\n                if (buf.isReadable(1)) {\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte());\n                } else {\n                    logger.warn(\"Not enough data for key JO4\");\n                }\n                break;\n            case \"JO5\":\n                if (buf.isReadable(1)) {\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                } else {\n                    logger.warn(\"Not enough data for key JO5\");\n                }\n                break;\n            case \"JO6\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // fms vehicle interface\n                } else {\n                    logger.warn(\"Not enough data for key JO6\");\n                }\n                break;\n            case \"JO7\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // driver 2\n                } else {\n                    logger.warn(\"Not enough data for key JO7\");\n                }\n                break;\n            case \"JO8\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // driver 1\n                } else {\n                    logger.warn(\"Not enough data for key JO8\");\n                }\n                break;\n            case \"JO9\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // drivers\n                } else {\n                    logger.warn(\"Not enough data for key JO9\");\n                }\n                break;\n            case \"JO10\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // system information\n                } else {\n                    logger.warn(\"Not enough data for key JO10\");\n                }\n                break;\n            case \"JO11\":\n                if (buf.isReadable(1)) {\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                } else {\n                    logger.warn(\"Not enough data for key JO11\");\n                }\n                break;\n            case \"JO12\":\n                if (buf.isReadable(1)) {\n                    buf.readUnsignedByte(); // pto engaged\n                } else {\n                    logger.warn(\"Not enough data for key JO12\");\n                }\n                break;\n            case \"JH1\":\n                if (buf.isReadable(2)) {\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() / 256.0);\n                } else {\n                    logger.warn(\"Not enough data for key JH1\");\n                }\n                break;\n            case \"JH2\":\n                if (buf.isReadable(2)) {\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.125);\n                } else {\n                    logger.warn(\"Not enough data for key JH2\");\n                }\n                break;\n            case \"JH3\":\n            case \"JH4\":\n            case \"JH5\":\n            case \"JH6\":\n            case \"JH7\":\n                if (buf.isReadable(2)) {\n                    int index = Integer.parseInt(key.substring(2)) - 2;\n                    position.set(\"axleWeight\" + index, buf.readUnsignedShort() * 0.5);\n                } else {\n                    logger.warn(\"Not enough data for key \" + key);\n                }\n                break;\n            case \"JH8\":\n                if (buf.isReadable(2)) {\n                    position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5);\n                } else {\n                    logger.warn(\"Not enough data for key JH8\");\n                }\n                break;\n            case \"JH9\":\n                if (buf.isReadable(2)) {\n                    buf.readUnsignedShort(); // ambient air temperature\n                } else {\n                    logger.warn(\"Not enough data for key JH9\");\n                }\n                break;\n            case \"JH10\":\n                if (buf.isReadable(2)) {\n                    buf.readUnsignedShort(); // tachograph speed\n                } else {\n                    logger.warn(\"Not enough data for key JH10\");\n                }\n                break;\n            case \"JH11\":\n                if (buf.isReadable(2)) {\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.05);\n                } else {\n                    logger.warn(\"Not enough data for key JH11\");\n                }\n                break;\n            case \"JH12\":\n                if (buf.isReadable(2)) {\n                    buf.readUnsignedShort(); // fuel economy\n                } else {\n                    logger.warn(\"Not enough data for key JH12\");\n                }\n                break;\n            case \"JL1\":\n                if (buf.isReadable(4)) {\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.5);\n                } else {\n                    logger.warn(\"Not enough data for key JL1\");\n                }\n                break;\n            case \"JL2\":\n                if (buf.isReadable(4)) {\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);\n                } else {\n                    logger.warn(\"Not enough data for key JL2\");\n                }\n                break;\n            case \"JL3\":\n                if (buf.isReadable(4)) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n                } else {\n                    logger.warn(\"Not enough data for key JL3\");\n                }\n                break;\n            case \"JL4\":\n                if (buf.isReadable(4)) {\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);\n                } else {\n                    logger.warn(\"Not enough data for key JL4\");\n                }\n                break;\n            case \"JS1\":\n                if (buf.isReadable()) {\n                    position.set(Position.KEY_VIN, readString(buf));\n                } else {\n                    logger.warn(\"Not enough data for key JS1\");\n                }\n                break;\n            case \"JS2\":\n                if (buf.isReadable()) {\n                    readString(buf); // fms version supported\n                } else {\n                    logger.warn(\"Not enough data for key JS2\");\n                }\n                break;\n            case \"JS3\":\n                if (buf.isReadable()) {\n                    position.set(\"driver1\", readString(buf));\n                } else {\n                    logger.warn(\"Not enough data for key JS3\");\n                }\n                break;\n            case \"JS4\":\n                if (buf.isReadable()) {\n                    position.set(\"driver2\", readString(buf));\n                } else {\n                    logger.warn(\"Not enough data for key JS4\");\n                }\n                break;\n            case \"JN1\":\n                if (buf.isReadable(4)) {\n                    buf.readUnsignedInt(); // cruise control distance\n                } else {\n                    logger.warn(\"Not enough data for key JN1\");\n                }\n                break;\n            case \"JN2\":\n                if (buf.isReadable(4)) {\n                    buf.readUnsignedInt(); // excessive idling time\n                } else {\n                    logger.warn(\"Not enough data for key JN2\");\n                }\n                break;\n            case \"JN3\":\n                if (buf.isReadable(4)) {\n                    buf.readUnsignedInt(); // excessive idling fuel\n                } else {\n                    logger.warn(\"Not enough data for key JN3\");\n                }\n                break;\n            case \"JN4\":\n                if (buf.isReadable(4)) {\n                    buf.readUnsignedInt(); // pto time\n                } else {\n                    logger.warn(\"Not enough data for key JN4\");\n                }\n                break;\n            case \"JN5\":\n                if (buf.isReadable(4)) {\n                    buf.readUnsignedInt(); // pto fuel\n                } else {\n                    logger.warn(\"Not enough data for key JN5\");\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    if (cellTower.getMobileCountryCode() != null\n            && cellTower.getMobileNetworkCode() != null\n            && cellTower.getCellId() != null && cellTower.getCellId() != 0\n            && cellTower.getLocationAreaCode() != null) {\n        position.setNetwork(new Network(cellTower));\n    } else if (cellTower.getSignalStrength() != null) {\n        position.set(Position.KEY_RSSI, cellTower.getSignalStrength());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}