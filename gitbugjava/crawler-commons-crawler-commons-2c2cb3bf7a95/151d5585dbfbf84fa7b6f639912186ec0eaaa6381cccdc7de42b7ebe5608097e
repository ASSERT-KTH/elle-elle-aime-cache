{
    "generation": "import java.net.URL;\nimport java.net.URLDecoder;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class SimpleRobotRulesParser {\n\n    // ... (other existing code)\n\n    private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {\n\n        // Determine charset from content type\n        Charset charsetFromHeader = getCharsetFromContentType(contentType);\n\n        // If there's nothing there, treat it like we have no restrictions.\n        if ((content == null) || (content.length == 0)) {\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n        }\n\n        int bytesLen = content.length;\n        int offset = 0;\n        Charset encoding;\n\n        // Check for a UTF-8 BOM at the beginning (EF BB BF)\n        if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {\n            offset = 3;\n            bytesLen -= 3;\n            encoding = StandardCharsets.UTF_8;\n        }\n        // Check for UTF-16LE BOM at the beginning (FF FE)\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16LE;\n        }\n        // Check for UTF-16BE BOM at the beginning (FE FF)\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16BE;\n        }\n        // If charset is specified in content type, use that\n        else if (charsetFromHeader != null) {\n            encoding = charsetFromHeader;\n        }\n        // Default to UTF-8 if no BOM and no charset specified\n        else {\n            encoding = StandardCharsets.UTF_8;\n        }\n\n        String contentAsStr = new String(content, offset, bytesLen, encoding);\n\n        // Decide if we need to do special HTML processing.\n        boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith(\"text/html\"));\n\n        // If it looks like it contains HTML, but doesn't have a user agent\n        // field, then assume somebody messed up and returned back to us a random HTML page\n        // instead of a robots.txt file.\n        boolean hasHTML = false;\n        if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {\n            if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {\n                LOGGER.trace(\"Found non-robots.txt HTML file: \" + url);\n                return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n            } else {\n                // We'll try to strip out HTML tags below.\n                if (isHtmlType) {\n                    LOGGER.debug(\"HTML content type returned for robots.txt file: \" + url);\n                } else {\n                    LOGGER.debug(\"Found HTML in robots.txt file: \" + url);\n                }\n\n                hasHTML = true;\n            }\n        }\n\n        // Break on anything that might be used as a line ending. Since\n        // tokenizer doesn't return empty tokens, a \\r\\n sequence still\n        // works since it looks like an empty string between the \\r and \\n.\n        StringTokenizer lineParser = new StringTokenizer(contentAsStr, \"\\n\\r\\u0085\\u2028\\u2029\");\n        ParseState parseState = new ParseState(url, robotNames);\n\n        while (lineParser.hasMoreTokens()) {\n            String line = lineParser.nextToken();\n\n            // Get rid of HTML markup, in case some brain-dead webmaster has\n            // created an HTML page for robots.txt. \n            if (hasHTML) {\n                line = line.replaceAll(\"<[^>]+>\", \"\");\n            }\n\n            // trim out comments and whitespace\n            int hashPos = line.indexOf(\"#\");\n            if (hashPos >= 0) {\n                line = line.substring(0, hashPos);\n            }\n\n            line = line.trim();\n            if (line.length() == 0) {\n                continue;\n            }\n\n            RobotToken token = tokenize(line);\n            switch (token.getDirective()) {\n                case USER_AGENT:\n                    handleUserAgent(parseState, token);\n                    break;\n\n                case DISALLOW:\n                    parseState.setFinishedAgentFields(true);\n                    handleDisallow(parseState, token);\n                    break;\n\n                case ALLOW:\n                    parseState.setFinishedAgentFields(true);\n                    handleAllow(parseState, token);\n                    break;\n\n                case CRAWL_DELAY:\n                    parseState.setFinishedAgentFields(true);\n                    handleCrawlDelay(parseState, token);\n                    break;\n\n                case SITEMAP:\n                    parseState.setFinishedAgentFields(true);\n                    handleSitemap(parseState, token);\n                    break;\n\n                case HTTP:\n                    parseState.setFinishedAgentFields(true);\n                    handleHttp(parseState, token);\n                    break;\n\n                case UNKNOWN:\n                    reportWarning(parseState, \"Unknown directive in robots.txt file: {}\", line);\n                    parseState.setFinishedAgentFields(true);\n                    break;\n\n                case MISSING:\n                    reportWarning(parseState, \"Unknown line in robots.txt file (size {}): {}\", content.length, line);\n                    parseState.setFinishedAgentFields(true);\n                    break;\n\n                default:\n                    // All others we just ignore\n                    // TODO KKr - which of these should be setting\n                    // finishedAgentFields to true?\n                    // TODO KKr - handle no-index\n                    // TODO KKr - handle request-rate and visit-time\n                    break;\n            }\n        }\n\n        this._numWarningsDuringLastParse.set(parseState._numWarnings);\n        SimpleRobotRules result = parseState.getRobotRules();\n        if (result.getCrawlDelay() > _maxCrawlDelay) {\n            // Some evil sites use a value like 3600 (seconds) for the crawl\n            // delay, which would cause lots of problems for us.\n            LOGGER.debug(\"Crawl delay exceeds max value - so disallowing all URLs: {}\", url);\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);\n        } else {\n            result.sortRules();\n            return result;\n        }\n    }\n\n    private Charset getCharsetFromContentType(String contentType) {\n        if (contentType == null) {\n            return null;\n        }\n        String[] parts = contentType.split(\";\");\n        for (String part : parts) {\n            part = part.trim();\n            if (part.toLowerCase().startsWith(\"charset=\")) {\n                String charset = part.substring(\"charset=\".length()).trim();\n                try {\n                    return Charset.forName(charset);\n                } catch (IllegalArgumentException e) {\n                    // Ignore invalid charset names\n                }\n            }\n        }\n        return null;\n    }\n\n    // ... (other existing methods)\n\n    public class SimpleRobotRules {\n\n        private final List<String> disallowPaths;\n\n        // ... (other existing fields and constructors)\n\n        public boolean isAllowed(String url) throws MalformedURLException {\n            URL urlObj = new URL(url);\n            String path = urlObj.getPath();\n            String decodedUrlPath;\n            try {\n                decodedUrlPath = URLDecoder.decode(path, StandardCharsets.UTF_8.name()).toLowerCase();\n            } catch (java.io.UnsupportedEncodingException e) {\n                // Fallback to platform's default encoding if UTF-8 is not supported\n                decodedUrlPath = URLDecoder.decode(path).toLowerCase();\n            }\n            for (String disallow : disallowPaths) {\n                String lowerDisallow = disallow.toLowerCase();\n                if (decodedUrlPath.startsWith(lowerDisallow)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        // ... (other existing methods)\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}