{
    "generation": "private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {\n\n    // If there's nothing there, treat it like we have no restrictions.\n    if ((content == null) || (content.length == 0)) {\n        return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n    }\n\n    int bytesLen = content.length;\n    int offset = 0;\n\n    // Determine the charset from contentType or default to UTF-8\n    Charset encoding;\n    String charsetFromContentType = null;\n\n    if (contentType != null) {\n        String[] parts = contentType.split(\";\");\n        for (String part : parts) {\n            part = part.trim();\n            if (part.startsWith(\"charset=\")) {\n                charsetFromContentType = part.substring(\"charset=\".length()).trim();\n                break;\n            }\n        }\n    }\n\n    if (charsetFromContentType != null) {\n        try {\n            encoding = Charset.forName(charsetFromContentType);\n            contentAsStr = new String(content, 0, content.length, encoding);\n        } catch (IllegalArgumentException e) {\n            // Invalid charset specified, fall back to default\n            encoding = StandardCharsets.UTF_8;\n            contentAsStr = new String(content, 0, content.length, encoding);\n        }\n    } else {\n        encoding = StandardCharsets.UTF_8;\n\n        // Check for a UTF-8 BOM at the beginning (EF BB BF)\n        if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {\n            offset = 3;\n            bytesLen -= 3;\n        }\n        // Check for UTF-16LE BOM at the beginning (FF FE)\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16LE;\n        }\n        // Check for UTF-16BE BOM at the beginning (FE FF)\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16BE;\n        }\n\n        contentAsStr = new String(content, offset, bytesLen, encoding);\n    }\n\n    // Rest of the method remains unchanged...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}