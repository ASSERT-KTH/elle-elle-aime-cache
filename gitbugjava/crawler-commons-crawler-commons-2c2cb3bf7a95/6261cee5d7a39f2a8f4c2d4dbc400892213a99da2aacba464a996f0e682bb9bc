{
    "generation": "private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {\n\n    //... rest of the function remains unchanged ...\n\n    //... code for parsing robots.txt file ...\n\n    while (lineParser.hasMoreTokens()) {\n        String line = lineParser.nextToken();\n\n        //... code for handling HTML and comments ...\n\n        RobotToken token = tokenize(line);\n        switch (token.getDirective()) {\n\n            //... handle other directives ...\n            case DISALLOW:\n            parseState.setFinishedAgentFields(true);\n            handleDisallow(parseState, urlPathEncode(token));\n                break;\n            case ALLOW:\n            parseState.setFinishedAgentFields(true);\n            handleAllow(parseState, urlPathEncode(token));\n                break;\n\n            //... handle other directives ...\n        }\n    }\n\n    //... rest of the function remains unchanged ...\n}\n\nprivate RobotToken urlPathEncode(RobotToken token) {\n    if (token.getValue() != null) {\n        String encodedValue = urlPathEncode(token.getValue());\n        return new RobotToken(token.getDirective(), encodedValue);\n    }\n    return token;\n}\n\nprivate String urlPathEncode(String path) {\n    StringBuilder encodedPath = new StringBuilder();\n    for (char c : path.toCharArray()) {\n        if (c <= 0x7F) {\n            encodedPath.append(c);\n        } else {\n            encodedPath.append(\"%\");\n            encodedPath.append(String.format(\"%02X\", (int) c));\n        }\n    }\n    return encodedPath.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}