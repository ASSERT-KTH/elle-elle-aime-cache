{
    "generation": "\nprivate Position decodePosition(\n\nChannel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n\nDeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n\nif (deviceSession == null) {\n\nreturn null;\n\n}\n\nPosition position = new Position(getProtocolName());\n\nposition.setDeviceId(deviceSession.getDeviceId());\n\nint status = buf.readUnsignedShort();\n\nposition.setValid(BitUtil.check(status, 15));\n\nposition.set(Position.KEY_STATUS, status);\n\nposition.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n\nint event = buf.readUnsignedShort();\n\nposition.set(Position.KEY_ALARM, decodeAlarm(event));\n\nposition.set(Position.KEY_EVENT, event);\n\nString time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n\nDateBuilder dateBuilder = new DateBuilder()\n\n.setYear(Integer.parseInt(time.substring(0, 2)))\n\n.setMonth(Integer.parseInt(time.substring(2, 4)))\n\n.setDay(Integer.parseInt(time.substring(4, 6)))\n\n.setHour(Integer.parseInt(time.substring(6, 8)))\n\n.setMinute(Integer.parseInt(time.substring(8, 10)))\n\n.setSecond(Integer.parseInt(time.substring(10, 12)));\n\nposition.setTime(dateBuilder.getDate());\n\nposition.setLongitude(buf.readInt() * 0.00001);\n\nposition.setLatitude(buf.readInt() * 0.00001);\n\nposition.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n\nposition.setCourse(buf.readUnsignedShort());\n\nposition.setAltitude(buf.readUnsignedShort());\n\nposition.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n\nNetwork network = new Network();\n\nwhile (buf.readableBytes() > 4) {\n\nint subtype = buf.readUnsignedShort();\n\nint length = buf.readUnsignedShort() - 4;\n\nif (buf.readableBytes() < length) {\n\n// Invalid length, ignore remaining data\n\nbreak;\n\n}\n\nint endIndex = buf.readerIndex() + length;\n\nswitch (subtype) {\n\ncase 0x0001:\n\nint coolantTemperature = buf.readUnsignedByte() - 40;\n\nif (coolantTemperature <= 215) {\n\nposition.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n\n}\n\nint rpm = buf.readUnsignedShort();\n\nif (rpm <= 65535) {\n\nposition.set(Position.KEY_RPM, rpm);\n\n}\n\nposition.set(\"averageSpeed\", buf.readUnsignedByte());\n\nbuf.readUnsignedShort(); // interval fuel consumption\n\nposition.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n\nposition.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n\nposition.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n\nposition.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n\nbuf.readUnsignedInt(); // trip id\n\nif (buf.readerIndex() < endIndex) {\n\nposition.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n\n}\n\nbreak;\n\ncase 0x0005:\n\nposition.set(Position.KEY_RSSI, buf.readUnsignedByte());\n\nposition.set(Position.KEY_HDOP, buf.readUnsignedByte());\n\nbuf.readUnsignedInt(); // run time\n\nbreak;\n\ncase 0x0009:\n\nposition.set(Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n\nbreak;\n\ncase 0x0011:\n\nposition.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n\nbreak;\n\ncase 0x0014:\n\nposition.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n\nposition.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n\nposition.set(\"airTemp\", buf.readUnsignedByte() - 40);\n\nposition.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n\nposition.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n\nbreak;\n\ncase 0x0020:\n\nString[] cells = buf.readCharSequence(\n\nlength, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n\nfor (String cell : cells) {\n\nString[] values = cell.split(\"@\");\n\nnetwork.addCellTower(CellTower.from(\n\nInteger.parseInt(values[0]), Integer.parseInt(values[1]),\n\nInteger.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));\n\n}\n\nbreak;\n\ncase 0x0021:\n\nString[] points = buf.readCharSequence(\n\nlength, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n\nfor (String point : points) {\n\nString[] values = point.split(\"@\");\n\nnetwork.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n\n}\n\nbreak;\n\ndefault:\n\nbuf.skipBytes(length);\n\nbreak;\n\n}\n\nbuf.readerIndex(endIndex);\n\n}\n\nif (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n\nposition.setNetwork(network);\n\n}\n\nsendResponse(channel, MSG_POSITION_RSP, index, null);\n\nreturn position;\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}