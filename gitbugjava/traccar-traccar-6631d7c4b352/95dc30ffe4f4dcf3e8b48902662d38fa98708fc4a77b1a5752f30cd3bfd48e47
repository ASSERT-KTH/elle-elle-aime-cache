{
    "generation": "@Override\nprotected Object decode(\n        ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n\n    int endIndex = -1;\n    for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {\n        if (buf.getByte(i) == ']') {\n            endIndex = i + 1;\n            break;\n        }\n    }\n\n    if (endIndex > 0) {\n        ByteBuf frame = buf.slice(buf.readerIndex(), endIndex - buf.readerIndex());\n        buf.readerIndex(endIndex);\n\n        // decode escape sequences\n        ByteBuf decodedFrame = Unpooled.buffer();\n        while (frame.isReadable()) {\n            byte b1 = frame.readByte();\n            if (b1 == '}') {\n                byte b2 = frame.readByte();\n                switch (b2) {\n                    case 0x01:\n                        decodedFrame.writeByte('}');\n                        break;\n                    case 0x02:\n                        decodedFrame.writeByte('[');\n                        break;\n                    case 0x03:\n                        decodedFrame.writeByte(']');\n                        break;\n                    case 0x04:\n                        decodedFrame.writeByte(',');\n                        break;\n                    case 0x05:\n                        decodedFrame.writeByte('*');\n                        break;\n                    default:\n                        throw new IllegalArgumentException(String.format(\n                                \"unexpected byte at %d: 0x%02x\", frame.readerIndex() - 1, b2));\n                }\n            } else {\n                decodedFrame.writeByte(b1);\n            }\n        }\n        return decodedFrame;\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}