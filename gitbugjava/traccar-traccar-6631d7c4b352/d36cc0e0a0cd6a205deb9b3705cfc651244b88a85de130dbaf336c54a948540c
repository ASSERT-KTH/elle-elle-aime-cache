{
    "generation": "@Override\nprotected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n    int initialReaderIndex = buf.readerIndex();\n    int bytesRead = 0;\n    ByteBuf frame = Unpooled.buffer();\n    int bracketCount = 0;\n    boolean isEscaped = false;\n\n    while (buf.isReadable()) {\n        byte b = buf.readByte();\n        bytesRead++;\n        \n        if (isEscaped) {\n            isEscaped = false;\n            switch (b) {\n                case 0x01:\n                    frame.writeByte('}');\n                    break;\n                case 0x02:\n                    frame.writeByte('[');\n                    break;\n                case 0x03:\n                    frame.writeByte(']');\n                    break;\n                case 0x04:\n                    frame.writeByte(',');\n                    break;\n                case 0x05:\n                    frame.writeByte('*');\n                    break;\n                default:\n                    throw new IllegalArgumentException(String.format(\"unexpected byte at %d: 0x%02x\", buf.readerIndex() - 1, b));\n            }\n        } else {\n            if (b == '}') {\n                isEscaped = true;\n                continue;\n            } else if (b == '[') {\n                bracketCount++;\n                frame.writeByte('[');\n            } else if (b == ']') {\n                if (bracketCount > 0) {\n                    bracketCount--;\n                    frame.writeByte(']');\n                    if (bracketCount == 0) {\n                        break;\n                    }\n                } else {\n                    frame.writeByte(']');\n                }\n            } else {\n                frame.writeByte(b);\n            }\n        }\n    }\n\n    if (bracketCount == 0) {\n        buf.readerIndex(initialReaderIndex + bytesRead);\n        return frame;\n    } else {\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}