{
    "generation": "@Override\nprotected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n    int endIndex = -1;\n    boolean escaped = false;\n    for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {\n        byte b = buf.getByte(i);\n        if (escaped) {\n            escaped = false;\n            continue;\n        } else if (b == '}') {\n            escaped = true;\n        } else if (b == ']') {\n            endIndex = i + 1;\n            break;\n        }\n    }\n    if (endIndex > 0) {\n        ByteBuf frameBuf = buf.readRetainedSlice(endIndex - buf.readerIndex());\n        try {\n            ByteBuf decodedFrame = decodeFrame(frameBuf);\n            return decodedFrame;\n        } finally {\n            frameBuf.release();\n        }\n    }\n    return null;\n}\n\nprivate ByteBuf decodeFrame(ByteBuf frameBuf) {\n    ByteBuf decodedFrame = Unpooled.buffer();\n    boolean escaped = false;\n    for (int i = frameBuf.readerIndex(); i < frameBuf.writerIndex(); i++) {\n        byte b = frameBuf.getByte(i);\n        if (escaped) {\n            switch (b) {\n                case 0x01:\n                    decodedFrame.writeByte('}');\n                    break;\n                case 0x02:\n                    decodedFrame.writeByte('[');\n                    break;\n                case 0x03:\n                    decodedFrame.writeByte(']');\n                    break;\n                case 0x04:\n                    decodedFrame.writeByte(',');\n                    break;\n                case 0x05:\n                    decodedFrame.writeByte('*');\n                    break;\n                default:\n                    throw new IllegalArgumentException(String.format(\n                            \"unexpected byte at %d: 0x%02x\", i, b));\n            }\n            escaped = false;\n        } else {\n            if (b == '}') {\n                escaped = true;\n            } else {\n                decodedFrame.writeByte(b);\n            }\n        }\n    }\n    return decodedFrame;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}