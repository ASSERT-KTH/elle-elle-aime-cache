{
    "generation": "@Override\nprotected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n    ByteBuf frame = Unpooled.buffer();\n    boolean previousWasEscape = false;\n    int index = buf.readerIndex();\n\n    for (; index < buf.writerIndex(); index++) {\n        byte b = buf.getByte(index);\n        if (previousWasEscape) {\n            switch (b) {\n                case 0x01:\n                    frame.writeByte('}');\n                    break;\n                case 0x02:\n                    frame.writeByte('[');\n                    break;\n                case 0x03:\n                    frame.writeByte(']');\n                    break;\n                case 0x04:\n                    frame.writeByte(',');\n                    break;\n                case 0x05:\n                    frame.writeByte('*');\n                    break;\n                default:\n                    throw new IllegalArgumentException(String.format(\n                            \"Invalid escape sequence at %d: 0x%02x\", index, b));\n            }\n            previousWasEscape = false;\n        } else {\n            if (b == '}') {\n                previousWasEscape = true;\n            } else if (b == ']') {\n                frame.writeByte(']');\n                index++; // include the ']'\n                break;\n            } else {\n                frame.writeByte(b);\n            }\n        }\n    }\n\n    if (previousWasEscape) {\n        throw new IllegalArgumentException(\"Incomplete escape sequence\");\n    }\n\n    if (index < buf.writerIndex()) {\n        // More data in the buffer, adjust readerIndex to start of the next frame\n        buf.readerIndex(index);\n    } else {\n        buf.readerIndex(index);\n    }\n\n    return frame;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}