{
    "generation": "@Override\nprotected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n    int endIndex = -1;\n    for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {\n        if (buf.getByte(i) == ']') {\n            endIndex = i + 1;\n            break;\n        }\n    }\n\n    if (endIndex > 0) {\n        ByteBuf frame = Unpooled.buffer();\n        int startIdx = buf.readerIndex();\n        int endIdx = endIndex;\n        int readerIndex = startIdx;\n        while (readerIndex < endIdx) {\n            byte b = buf.getByte(readerIndex++);\n            if (b == '}') {\n                if (readerIndex < endIdx) {\n                    byte nextByte = buf.getByte(readerIndex++);\n                    switch (nextByte) {\n                        case 0x01:\n                            frame.writeByte('}');\n                            break;\n                        case 0x02:\n                            frame.writeByte('[');\n                            break;\n                        case 0x03:\n                            frame.writeByte(']');\n                            break;\n                        case 0x04:\n                            frame.writeByte(',');\n                            break;\n                        case 0x05:\n                            frame.writeByte('*');\n                            break;\n                        default:\n                            throw new IllegalArgumentException(String.format(\n                                    \"unexpected byte at %d: 0x%02x\", readerIndex - 1, nextByte));\n                    }\n                } else {\n                    throw new IllegalArgumentException(\"Incomplete escape sequence at end of buffer.\");\n                }\n            } else {\n                frame.writeByte(b);\n            }\n        }\n        buf.readerIndex(endIndex);\n        return frame;\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}