{
    "generation": "@Override\nprotected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n    List<Object> frames = new ArrayList<>();\n    while (true) {\n        int startIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), '[');\n        if (startIndex == -1) {\n            break; // No more frames\n        }\n        int endIndex = buf.indexOf(startIndex, buf.writerIndex(), ']');\n        if (endIndex == -1) {\n            break; // Incomplete frame\n        }\n        ByteBuf frame = buf.slice(startIndex, endIndex - startIndex + 1);\n        ByteBuf unescapedFrame = unescapeFrame(frame);\n        frames.add(unescapedFrame);\n        buf.readerIndex(endIndex + 1);\n    }\n    if (!frames.isEmpty()) {\n        return frames;\n    } else {\n        return null;\n    }\n}\n\nprivate ByteBuf unescapeFrame(ByteBuf frame) {\n    ByteBuf output = Unpooled.buffer();\n    for (int readerIndex = frame.readerIndex(); readerIndex < frame.writerIndex(); ) {\n        byte b = frame.getByte(readerIndex);\n        if (b == '}') {\n            if (readerIndex + 1 >= frame.writerIndex()) {\n                throw new IllegalArgumentException(\"Incomplete escape sequence at end of frame\");\n            }\n            byte next = frame.getByte(readerIndex + 1);\n            switch (next) {\n                case 0x01:\n                    output.writeByte('}');\n                    break;\n                case 0x02:\n                    output.writeByte('[');\n                    break;\n                case 0x03:\n                    output.writeByte(']');\n                    break;\n                case 0x04:\n                    output.writeByte(',');\n                    break;\n                case 0x05:\n                    output.writeByte('*');\n                    break;\n                default:\n                    throw new IllegalArgumentException(String.format(\"unexpected byte at %d: 0x%02x\", readerIndex + 1, next));\n            }\n            readerIndex += 2;\n        } else {\n            output.writeByte(b);\n            readerIndex++;\n        }\n    }\n    return output;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}