{
    "generation": "private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    buf.readUnsignedShortLE(); // length\n\n    buf.skipBytes(3); // identification header\n    buf.readUnsignedIntLE(); // index\n\n    DeviceSession deviceSession = getDeviceSession(\n            channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    buf.readUnsignedByte(); // session status\n    buf.skipBytes(4); // reserved\n\n    // Read the date and time, but do not assign it directly to position.setTime()\n    long timeValue = buf.readUnsignedIntLE();\n    Date dateTime = new Date(timeValue * 1000); // Convert seconds to milliseconds\n\n    // Check if the date is within a reasonable range (e.g., 25 hours from now)\n    long currentTime = System.currentTimeMillis();\n    if (dateTime.getTime() > currentTime + 25L * 60 * 60 * 1000) {\n        // Adjust the time to be within the acceptable range\n        dateTime = new Date(currentTime);\n    }\n\n    position.setTime(dateTime);\n\n    buf.skipBytes(23); // coordinates block\n\n    buf.skipBytes(3); // data tag header\n    decodeMinimalDataSet(position, buf);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}