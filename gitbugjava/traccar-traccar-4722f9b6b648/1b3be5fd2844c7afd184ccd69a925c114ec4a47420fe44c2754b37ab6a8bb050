{
    "generation": "private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    buf.readUnsignedShortLE(); // length\n\n    buf.skipBytes(3); // identification header\n    long index = buf.readUnsignedIntLE(); // index\n\n    DeviceSession deviceSession = getDeviceSession(\n            channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    int sessionStatus = buf.readUnsignedByte(); // session status\n    buf.skipBytes(4); // reserved\n    long dateTime = buf.readUnsignedIntLE(); // date and time\n\n    buf.skipBytes(23); // coordinates block\n\n    buf.skipBytes(3); // data tag header\n    decodeMinimalDataSet(position, buf);\n\n    // Validate the date and time\n    if (dateTime > 0) {\n        DateBuilder dateBuilder = new DateBuilder()\n                .setDate((int) (dateTime / 1000000), (int) ((dateTime / 10000) % 100), (int) ((dateTime / 100000) % 100))\n                .setTime((int) (dateTime % 10000) / 100, (int) (dateTime % 100), 0);\n        position.setTime(dateBuilder.getDate());\n    } else {\n        // Use the current time if the date and time is not valid\n        position.setTime(new Date());\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}