{
    "generation": "/**\n * Decodes Iridium position from the provided buffer.\n * \n * @param channel Channel\n * @param remoteAddress Remote address\n * @param buf Byte buffer\n * @return Position, or null if decoding fails\n */\nprivate Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    buf.readUnsignedShortLE(); // length\n\n    buf.skipBytes(3); // identification header\n    buf.readUnsignedIntLE(); // index\n\n    DeviceSession deviceSession = getDeviceSession(\n            channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    buf.readUnsignedByte(); // session status\n    buf.skipBytes(4); // reserved\n    long datetime = buf.readUnsignedIntLE(); // date and time (seconds since Jan 1, 2000, 00:00:00 UTC)\n    \n    // Fix the datetime to be relative to the Unix epoch (Jan 1, 1970, 00:00:00 UTC)\n    // Iridium epoch is 30 years after Unix epoch, so add the difference in seconds\n    long unixEpochOffset = 30L * 365L * 24L * 60L * 60L; // approximate, ignoring leap seconds\n    datetime += unixEpochOffset;\n    \n    // Validate the datetime to be within the allowed range (< +25 hours from now)\n    long now = System.currentTimeMillis() / 1000; // current time in seconds\n    if (datetime < now - unixEpochOffset || datetime > now + 25 * 60 * 60) {\n        return null; // invalid or out-of-range datetime\n    }\n\n    position.setFixTime(datetime * 1000); // convert to milliseconds\n\n    buf.skipBytes(23); // coordinates block\n\n    buf.skipBytes(3); // data tag header\n    decodeMinimalDataSet(position, buf);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}