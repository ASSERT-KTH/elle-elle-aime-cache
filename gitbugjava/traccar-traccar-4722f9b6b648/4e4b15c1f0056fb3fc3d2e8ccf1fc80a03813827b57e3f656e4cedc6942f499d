{
    "generation": "import java.nio.charset.StandardCharsets;\nimport java.time.Instant;\nimport java.time.temporal.ChronoUnit;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.Channel;\nimport java.net.SocketAddress;\n\nprivate Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    buf.readUnsignedShortLE(); // length\n\n    buf.skipBytes(3); // identification header\n    buf.readUnsignedIntLE(); // index\n\n    DeviceSession deviceSession = getDeviceSession(\n            channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    buf.readUnsignedByte(); // session status\n    buf.skipBytes(4); // reserved\n\n    // Read GPS week and time of week (TOW)\n    long gpsWeek = buf.readUnsignedIntLE();\n    int gpsTow = buf.readUnsignedIntLE();\n\n    // Convert GPS time to UTC time\n    Instant gpsEpoch = Instant.parse(\"1980-01-06T00:00:00Z\");\n    long secondsSinceGpsEpoch = (gpsWeek * 604800L) + gpsTow;\n    Instant dateTime = gpsEpoch.plus(secondsSinceGpsEpoch, ChronoUnit.SECONDS);\n\n    position.setTime(dateTime);\n\n    buf.skipBytes(23); // coordinates block\n\n    buf.skipBytes(3); // data tag header\n    decodeMinimalDataSet(position, buf);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}