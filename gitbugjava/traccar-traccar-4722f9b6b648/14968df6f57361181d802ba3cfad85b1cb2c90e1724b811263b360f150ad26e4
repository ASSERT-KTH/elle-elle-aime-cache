{
    "generation": "private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    buf.readUnsignedShortLE(); // length\n\n    buf.skipBytes(3); // identification header\n    buf.readUnsignedIntLE(); // index\n\n    DeviceSession deviceSession = getDeviceSession(\n            channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    buf.readUnsignedByte(); // session status\n    buf.skipBytes(4); // reserved\n\n    // Correctly decode date and time\n    Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n    calendar.set(Calendar.YEAR, buf.readUnsignedByte() + 2000); // year\n    calendar.set(Calendar.MONTH, buf.readUnsignedByte() - 1); // month\n    calendar.set(Calendar.DAY_OF_MONTH, buf.readUnsignedByte()); // day\n    calendar.set(Calendar.HOUR_OF_DAY, buf.readUnsignedByte()); // hour\n    calendar.set(Calendar.MINUTE, buf.readUnsignedByte()); // minute\n    calendar.set(Calendar.SECOND, buf.readUnsignedByte()); // second\n    position.setTime(calendar.getTime());\n\n    buf.skipBytes(23); // coordinates block\n\n    buf.skipBytes(3); // data tag header\n    decodeMinimalDataSet(position, buf);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}