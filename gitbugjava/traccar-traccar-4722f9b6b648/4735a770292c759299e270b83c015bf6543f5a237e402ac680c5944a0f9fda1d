{
    "generation": "private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    buf.readUnsignedShortLE(); // length\n\n    buf.skipBytes(3); // identification header\n    buf.readUnsignedIntLE(); // index\n\n    String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(\n            channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    buf.readUnsignedByte(); // session status\n    buf.skipBytes(4); // reserved\n\n    long timestamp = buf.readUnsignedIntLE();\n    position.setTime(new Date(timestamp * 1000));\n\n    // Read coordinates block\n    double latitude = buf.readFloatLE();\n    double longitude = buf.readFloatLE();\n    double altitude = buf.readFloatLE();\n\n    buf.readUnsignedByte(); // data quality\n\n    double speed = buf.readUnsignedShortLE() * 0.194384; // convert to knots\n    double course = buf.readUnsignedShortLE();\n\n    position.setLatitude(latitude);\n    position.setLongitude(longitude);\n    position.setAltitude(altitude);\n\n    position.setSpeed(speed);\n    position.setCourse(course);\n\n    buf.skipBytes(3); // data tag header\n    decodeMinimalDataSet(position, buf);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}