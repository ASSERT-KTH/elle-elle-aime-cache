{
    "generation": "private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    buf.readUnsignedShortLE(); // length\n\n    buf.skipBytes(3); // identification header\n    buf.readUnsignedIntLE(); // index\n\n    DeviceSession deviceSession = getDeviceSession(\n            channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    buf.readUnsignedByte(); // session status\n    buf.skipBytes(4); // reserved\n    long dateTime = buf.readUnsignedIntLE(); // date and time\n\n    // Ensure the date and time value is within a reasonable range\n    if (dateTime > 25 * 60 * 60) {\n        dateTime = 0; // Reset to zero or handle as needed\n    }\n\n    DateFormat formatter = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    try {\n        position.setTime(formatter.parse(String.format(\"%08d%06d\", dateTime / 1000000, dateTime % 1000000)));\n    } catch (ParseException e) {\n        throw new RuntimeException(\"Failed to parse date\", e);\n    }\n\n    buf.skipBytes(23); // coordinates block\n\n    buf.skipBytes(3); // data tag header\n    decodeMinimalDataSet(position, buf);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}