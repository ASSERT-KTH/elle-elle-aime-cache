{
    "generation": "/**\n * Decodes Iridium position from a given ByteBuf.\n * \n * @param channel       channel\n * @param remoteAddress remote address\n * @param buf           byte buffer\n * @return position, or null if invalid\n */\nprivate Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    buf.readUnsignedShortLE(); // length\n\n    buf.skipBytes(3); // identification header\n    buf.readUnsignedIntLE(); // index\n\n    DeviceSession deviceSession = getDeviceSession(\n            channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    buf.readUnsignedByte(); // session status\n    buf.skipBytes(4); // reserved\n\n    // Fix: Handle date and time correctly to avoid time offset issues\n    long dateTime = buf.readUnsignedIntLE(); // date and time in Iridium format (ystate, yday, hour, minute, second)\n    Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n    calendar.clear();\n    calendar.set(Calendar.YEAR, 2000 + (dateTime >> 26)); // yyear (6 bits)\n    calendar.set(Calendar.DAY_OF_YEAR, (dateTime >> 20) & 0x1FF); // yday (9 bits)\n    calendar.set(Calendar.HOUR_OF_DAY, (dateTime >> 14) & 0x3F); // hour (6 bits)\n    calendar.set(Calendar.MINUTE, (dateTime >> 8) & 0x3F); // minute (6 bits)\n    calendar.set(Calendar.SECOND, dateTime & 0xFF); // second (8 bits)\n    position.setTime(calendar.getTimeInMillis());\n\n    buf.skipBytes(23); // coordinates block\n\n    buf.skipBytes(3); // data tag header\n    decodeMinimalDataSet(position, buf);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}