{
    "generation": "private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    buf.readUnsignedShortLE(); // length\n\n    buf.skipBytes(3); // identification header\n    buf.readUnsignedIntLE(); // index\n\n    DeviceSession deviceSession = getDeviceSession(\n            channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n    if (deviceSession == null) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    buf.readUnsignedByte(); // session status\n    buf.skipBytes(4); // reserved\n\n    long timestamp = buf.readUnsignedIntLE(); // date and time\n    position.setTime(new DateBuilder().setUnixTime(timestamp).getDate());\n\n    // Read Coordinates Block (23 bytes)\n    int validity = buf.readUnsignedByte();\n\n    double latitude = buf.readIntLE() / 10000000.0;\n    double longitude = buf.readIntLE() / 10000000.0;\n\n    position.setValid(validity != 0);\n    position.setLatitude(latitude);\n    position.setLongitude(longitude);\n\n    int altitude = buf.readShortLE();\n    position.setAltitude((double) altitude);\n\n    int speed = buf.readUnsignedShortLE();\n    position.setSpeed(UnitsConverter.knotsFromKph(speed * 0.1));\n\n    int course = buf.readUnsignedShortLE();\n    position.setCourse(course * 0.1);\n\n    int satellites = buf.readUnsignedByte();\n    position.set(Position.KEY_SATELLITES, satellites);\n\n    buf.skipBytes(23 - (1 + 4 + 4 + 2 + 2 + 2 + 1)); // skip remaining bytes in coordinate block\n\n    buf.skipBytes(3); // data tag header\n    decodeMinimalDataSet(position, buf);\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}