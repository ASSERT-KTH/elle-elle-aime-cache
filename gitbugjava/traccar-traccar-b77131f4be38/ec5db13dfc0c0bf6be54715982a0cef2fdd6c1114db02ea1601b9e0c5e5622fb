{
    "generation": "@Override\nprotected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    ByteBuf buf = (ByteBuf) msg;\n\n    buf.skipBytes(1); // '[' header\n    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1); // '*' delimiter\n\n    int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (idIndex == -1) {\n        throw new IllegalArgumentException(\"Delimiter '*' not found for id\");\n    }\n\n    String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    buf.skipBytes(1); // '*' delimiter\n\n    String index = null;\n    int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n    if (contentIndex == -1) {\n        throw new IllegalArgumentException(\"Delimiter '*' not found for payload content\");\n    }\n\n    boolean hasIndex = false;\n    if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'\n            && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches(\"\\\\p{XDigit}+\")) {\n        int indexLength = contentIndex - buf.readerIndex();\n        hasIndex = true;\n        index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1); // '*' delimiter\n    }\n\n    buf.skipBytes(4); // length\n    buf.skipBytes(1); // '*' delimiter\n\n    buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending\n\n    int typeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n    if (typeIndex < 0) {\n        typeIndex = buf.writerIndex();\n    }\n\n    String type = buf.readSlice(typeIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n\n    if (typeIndex < buf.writerIndex()) {\n        buf.readerIndex(typeIndex + 1);\n    }\n\n    switch (type) {\n        case \"INIT\":\n            sendResponse(channel, id, index, \"INIT,1\");\n            break;\n\n        case \"LK\":\n            sendResponse(channel, id, index, \"LK\");\n            if (buf.isReadable()) {\n                String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n                if (values.length >= 3) {\n                    Position position = new Position(getProtocolName());\n                    position.setDeviceId(deviceSession.getDeviceId());\n\n                    getLastLocation(position, null);\n\n                    position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n                    position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n\n                    return position;\n                }\n            }\n            break;\n\n        case \"TK\":\n            if (buf.readableBytes() == 1) {\n                return null;\n            }\n\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            getLastLocation(position, null);\n\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n\n            return position;\n\n        case \"TKQ\":\n        case \"TKQ2\":\n            sendResponse(channel, id, index, type);\n            break;\n\n        default:\n            if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n                Position pos = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n\n                if (type.startsWith(\"AL\") && pos != null) {\n                    pos.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                    sendResponse(channel, id, index, \"AL\");\n                }\n                return pos;\n            } else if (type.equalsIgnoreCase(\"PULSE\")\n                    || type.equalsIgnoreCase(\"HEART\")\n                    || type.equalsIgnoreCase(\"BLOOD\")\n                    || type.equalsIgnoreCase(\"BPHRT\")\n                    || type.equalsIgnoreCase(\"btemp2\")) {\n\n                if (buf.isReadable()) {\n                    Position healthPosition = new Position(getProtocolName());\n                    healthPosition.setDeviceId(deviceSession.getDeviceId());\n\n                    getLastLocation(healthPosition, new Date());\n\n                    String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n                    int valueIndex = 0;\n\n                    if (type.equalsIgnoreCase(\"btemp2\")) {\n                        if (Integer.parseInt(values[valueIndex++]) > 0) {\n                            healthPosition.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));\n                        }\n                    } else {\n                        if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                            if (values.length > valueIndex + 1) {\n                                healthPosition.set(\"pressureHigh\", values[valueIndex++]);\n                                healthPosition.set(\"pressureLow\", values[valueIndex++]);\n                            }\n                        }\n                        if (valueIndex < values.length) {\n                            healthPosition.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));\n                        }\n                    }\n                    return healthPosition;\n                }\n\n            } else if (type.equals(\"img\")) {\n                Position imagePosition = new Position(getProtocolName());\n                imagePosition.setDeviceId(deviceSession.getDeviceId());\n\n                getLastLocation(imagePosition, null);\n\n                int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n                buf.readerIndex(timeIndex + 12 + 2);\n                imagePosition.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n\n                return imagePosition;\n            } else if (type.equals(\"JXTK\")) {\n                int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n                String[] values = buf.readCharSequence(dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII)\n                        .toString()\n                        .split(\",\");\n\n                int current = Integer.parseInt(values[2]);\n                int total = Integer.parseInt(values[3]);\n\n                if (audio == null) {\n                    audio = Unpooled.buffer();\n                }\n\n                audio.writeBytes(buf);\n                sendResponse(channel, id, index, \"JXTKR,1\");\n\n                if (current < total) {\n                    return null;\n                } else {\n                    Position audioPosition = new Position(getProtocolName());\n                    audioPosition.setDeviceId(deviceSession.getDeviceId());\n\n                    getLastLocation(audioPosition, null);\n                    audioPosition.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n                    audio.release();\n                    audio = null;\n                    return audioPosition;\n                }\n            }\n            break;\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}