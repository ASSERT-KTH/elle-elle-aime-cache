{
    "generation": "    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull String... commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(Arrays.asList(commentLines)));\n       comments.put(path, Collections.unmodifiableList(new ArrayList<>(Arrays.asList(commentLines))));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull List<String> commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(commentLines));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull Collection<String> commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull Iterable<String> commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull Iterator<String> commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull Spliterator<String> commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull Stream<String> commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull IntStream commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull LongStream commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull DoubleStream commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull FloatStream commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull CharStream commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull BooleanStream commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull ByteStream commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull ShortStream commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull IntStreamSupplier commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull LongStreamSupplier commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull DoubleStreamSupplier commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull FloatStreamSupplier commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull CharStreamSupplier commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull BooleanStreamSupplier commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull ByteStreamSupplier commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull ShortStreamSupplier commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n    }\n\n    /**\n     * Sets the given lines for the provided path, overriding any previously existing comments for the path.\n     * An entry that is a sole new-line (i.e. \"\\n\") will result in an empty line without any comment marker.\n     *\n     * @param path the path to register the comment lines for\n     * @param commentLines the comment lines to set for the path\n     */\n    public void setComment(@NotNull String path, @NotNull Stream<String> commentLines) {\n// buggy code\n//        comments.put(path, Collections.unmodifiableList(new ArrayList<>(commentLines)));\n        comments.put(path, Collections.unmodifiableList(new ArrayList<>(comment\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}