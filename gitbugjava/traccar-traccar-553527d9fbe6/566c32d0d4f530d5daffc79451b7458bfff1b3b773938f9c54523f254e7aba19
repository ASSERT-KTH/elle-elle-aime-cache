{
    "generation": "private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // ...\n\n    while (buf.readableBytes() > 2) {\n        int subtype = buf.readUnsignedByte();\n        int length = buf.readUnsignedByte();\n        int endIndex = buf.readerIndex() + length;\n\n        // ...\n\n        switch (subtype) {\n            // ...\n            case 0xFE:\n                if (length == 1) {\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                } else {\n                    int mark = buf.readUnsignedByte();\n                    if (mark == 0x7C) {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedType = buf.readUnsignedByte();\n                            int extendedLength = buf.readUnsignedByte();\n\n                            // Skip these extended types if they're not for alarm, battery level, and analog inputs\n                            if (extendedType != 0x01 && extendedType != 0x04 &&\n                                    extendedType < 0x09 && extendedType > 0x0E) {\n                                buf.skipBytes(extendedLength);\n                            } else {\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        }\n                                        // ... more alarm cases here\n                                        break;\n                                    case 0x04: // Battery level\n                                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                        break;\n                                    // ... more extended cases here as needed\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                    } else {\n                        position.set(Position.KEY_BATTERY_LEVEL, mark);\n                    }\n                }\n                break;\n            // ...\n        }\n        buf.readerIndex(endIndex);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}