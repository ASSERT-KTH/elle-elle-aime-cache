{
    "generation": "private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n    List<Position> positions = new LinkedList<>();\n\n    // Skip initial comma and read IMEI\n    buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n    String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n    buf.skipBytes(1 + 3 + 1);\n\n    // Retrieve or create device session\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    // Read remaining cache and count\n    buf.readUnsignedIntLE(); // remaining cache\n    int count = buf.readUnsignedShortLE();\n\n    for (int i = 0; i < count; i++) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        // Read position data\n        readPositionData(buf, position);\n\n        positions.add(position);\n    }\n\n    return positions;\n}\n\nprivate void readPositionData(ByteBuf buf, Position position) {\n    // Read lengths and indexes\n    buf.readUnsignedShortLE(); // length\n    buf.readUnsignedShortLE(); // index\n\n    // Read first set of parameters\n    readParameterSet(buf, position, 1);\n\n    // Read second set of parameters\n    readParameterSet(buf, position, 2);\n\n    // Read third set of parameters\n    readParameterSet(buf, position, 3);\n\n    // Read fourth set of parameters\n    readParameterSet(buf, position, 4);\n}\n\nprivate void readParameterSet(ByteBuf buf, Position position, int setNumber) {\n    int paramCount = buf.readUnsignedByte();\n    for (int j = 0; j < paramCount; j++) {\n        boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n        int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n        switch (id) {\n            case 0x01:\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                break;\n            case 0x05:\n                position.setValid(buf.readUnsignedByte() > 0);\n                break;\n            case 0x06:\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                break;\n            case 0x07:\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                break;\n            case 0x14:\n                position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                break;\n            case 0x15:\n                position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                break;\n            case 0x47:\n                int lockState = buf.readUnsignedByte();\n                if (lockState > 0) {\n                    position.set(Position.KEY_LOCK, lockState == 2);\n                }\n                break;\n            case 0x97:\n                position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                break;\n            case 0x9D:\n                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                break;\n            case 0xFE69:\n                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                break;\n            default:\n                // Skip unknown parameter based on set number\n                switch (setNumber) {\n                    case 1:\n                        buf.readUnsignedByte();\n                        break;\n                    case 2:\n                        buf.readUnsignedShortLE();\n                        break;\n                    case 3:\n                        buf.readUnsignedIntLE();\n                        break;\n                    case 4:\n                        int length = buf.readUnsignedByte();\n                        buf.skipBytes(length);\n                        break;\n                }\n                break;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}