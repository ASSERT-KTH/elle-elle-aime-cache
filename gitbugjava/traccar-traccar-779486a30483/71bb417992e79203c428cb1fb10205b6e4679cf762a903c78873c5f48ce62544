{
    "generation": "protected Object decodeAvrmc(String sentence, Channel channel, SocketAddress remoteAddress) {\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    Position position = new Position(getProtocolName());\n\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // Parse date and time\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n\n    // Parse status\n    String status = parser.next();\n    String upperCaseStatus = status.toUpperCase();\n    position.setValid(upperCaseStatus.equals(\"A\") || upperCaseStatus.equals(\"R\") || upperCaseStatus.equals(\"P\"));\n    position.set(Position.KEY_STATUS, status);\n\n    // Parse coordinates with validation\n    double latitude = parser.nextCoordinate();\n    if (latitude < -90 || latitude > 90) {\n        return null;\n    }\n    position.setLatitude(latitude);\n\n    double longitude = parser.nextCoordinate();\n    if (longitude < -180 || longitude > 180) {\n        return null;\n    }\n    position.setLongitude(longitude);\n\n    // Parse speed with validation\n    double speed = parser.nextDouble(0);\n    if (speed < 0) {\n        return null;\n    }\n    position.setSpeed(speed);\n\n    // Parse course with validation\n    double course = parser.nextDouble(0);\n    if (course < 0) {\n        return null;\n    }\n    position.setCourse(course);\n\n    // Set date\n    dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n    position.setTime(dateBuilder.getDate());\n\n    // Parse event\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n\n    // Parse battery level with enhanced handling\n    String batteryStr = parser.next();\n    batteryStr = batteryStr.replace(',', '.');\n    try {\n        double battery = Double.parseDouble(batteryStr) * 0.001;\n        if (battery < 0 || battery > 10) {\n            return null;\n        }\n        position.set(Position.KEY_BATTERY, battery);\n    } catch (NumberFormatException e) {\n        return null;\n    }\n\n    // Parse odometer with validation\n    double odometer = parser.nextDouble() * 1000;\n    if (odometer < 0) {\n        return null;\n    }\n    position.set(Position.KEY_ODOMETER, odometer);\n\n    // Parse GPS status\n    position.set(Position.KEY_GPS, parser.nextInt());\n\n    // Parse ADC values\n    position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);\n\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);\n    }\n\n    // Parse cellular network data\n    Integer lac = parser.nextHexInt();\n    Integer cid = parser.nextHexInt();\n    Integer mcc = parser.nextInt();\n    Integer mnc = parser.nextInt();\n    if (lac != null && cid != null && mcc != null && mnc != null) {\n        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n    }\n\n    // Consume unused field\n    parser.next();\n\n    // Parse checksum\n    String checksum = parser.next();\n\n    if (channel != null) {\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}