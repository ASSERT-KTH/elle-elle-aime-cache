{
    "generation": "protected Object decodeAvrmc(\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    DeviceSession deviceSession =\n        getDeviceSession(channel, remoteAddress, parser.next());\n    if (deviceSession == null) {\n        return null;\n    }\n\n    String deviceModel = null;\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n    if (device != null) {\n        deviceModel = device.getModel();\n    }\n\n    Position position = new Position(getProtocolName());\n\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // Parse time (hour, minute, second)\n    int hour = parser.nextInt(0);\n    int minute = parser.nextInt(0);\n    int second = parser.nextInt(0);\n\n    // Parse status\n    String status = parser.next();\n    String upperCaseStatus = status.toUpperCase();\n    position.setValid(upperCaseStatus.equals(\"A\") || upperCaseStatus.equals(\"R\") || upperCaseStatus.equals(\"P\"));\n    position.set(Position.KEY_STATUS, status);\n\n    // Parse coordinates\n    position.setLatitude(parser.nextCoordinate());\n    position.setLongitude(parser.nextCoordinate());\n    position.setSpeed(parser.nextDouble(0));\n    position.setCourse(parser.nextDouble(0));\n\n    // Parse date (day, month, year)\n    int day = parser.nextInt(0);\n    int month = parser.nextInt(0);\n    int year = parser.nextInt(0);\n\n    // Build date\n    DateBuilder dateBuilder = new DateBuilder()\n            .setTime(hour, minute, second)\n            .setDateReverse(day, month, year);\n    position.setTime(dateBuilder.getDate());\n\n    // Parse event\n    String event = parser.next();\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n\n    // Parse battery level\n    String batteryStr = parser.next().replaceAll(\"\\\\.\", \"\");\n    double battery = Double.parseDouble(batteryStr) * 0.001;\n    position.set(Position.KEY_BATTERY, battery);\n\n    // Parse odometer\n    double odometer = parser.nextDouble() * 1000;\n    position.set(Position.KEY_ODOMETER, odometer);\n\n    // Parse GPS fix\n    int gpsFix = parser.nextInt();\n    position.set(Position.KEY_GPS, gpsFix);\n\n    // Parse additional ADC value\n    double adc1 = parser.nextDouble() * 0.001;\n    position.set(Position.PREFIX_ADC + 1, adc1);\n\n    // Handle device model specific parsing\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n        double adc2 = parser.nextDouble() * 0.001;\n        position.set(Position.PREFIX_ADC + 2, adc2);\n    }\n\n    // Parse cellular network information\n    Integer lac = parser.nextHexInt();\n    Integer cid = parser.nextHexInt();\n    Integer mcc = parser.nextInt();\n    Integer mnc = parser.nextInt();\n    if (lac != null && cid != null && mcc != null && mnc != null) {\n        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n    }\n\n    // Skip unused field\n    parser.next();\n\n    // Parse checksum\n    String checksum = parser.next();\n\n    // Send acknowledgments and responses if channel is present\n    if (channel != null) {\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n        String devicePassword = AttributeUtil.getDevicePassword(\n                getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}