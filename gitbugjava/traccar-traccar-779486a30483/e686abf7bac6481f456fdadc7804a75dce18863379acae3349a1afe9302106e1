{
    "generation": "\nprotected Object decodeAvrmc(\n\n        String sentence, Channel channel, SocketAddress remoteAddress) {\n\n    Parser parser = new Parser(PATTERN_AVRMC, sentence);\n\n    if (!parser.matches()) {\n\n        return null;\n\n    }\n\n    DeviceSession deviceSession =\n\n        getDeviceSession(channel, remoteAddress, parser.next());\n\n    if (deviceSession == null) {\n\n        return null;\n\n    }\n\n    String deviceModel = null;\n\n    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n\n    if (device != null) {\n\n        deviceModel = device.getModel();\n\n    }\n\n    Position position = new Position(getProtocolName());\n\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    // Use SimpleDateFormat for date parsing\n\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"ddMMyy HHmmss\");\n\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n    try {\n\n        String timeStr = parser.next() + \" \" + parser.next();\n\n        Date date = dateFormat.parse(timeStr);\n\n        position.setTime(date);\n\n    } catch (ParseException e) {\n\n        log.warn(\"Invalid date format: \" + sentence);\n\n        return null;\n\n    }\n\n    String status = parser.next();\n\n    String upperCaseStatus = status.toUpperCase();\n\n    position.setValid(upperCaseStatus.equals(\"A\") || upperCaseStatus.equals(\"R\") || upperCaseStatus.equals(\"P\"));\n\n    position.set(Position.KEY_STATUS, status);\n\n    double latitude = parser.nextCoordinate();\n\n    double longitude = parser.nextCoordinate();\n\n    if (latitude < -90 || latitude > 90 || longitude < -180 || longitude > 180) {\n\n        log.warn(\"Invalid coordinates: \" + latitude + \", \" + longitude);\n\n        return null;\n\n    }\n\n    position.setLatitude(latitude);\n\n    position.setLongitude(longitude);\n\n    double speed = parser.nextDouble(0);\n\n    double course = parser.nextDouble(0);\n\n    if (speed < 0 || course < 0) {\n\n        log.warn(\"Invalid speed or course: \" + speed + \", \" + course);\n\n        return null;\n\n    }\n\n    position.setSpeed(speed);\n\n    position.setCourse(course);\n\n    String event = parser.next();\n\n    position.set(Position.KEY_ALARM, decodeAlarm(event));\n\n    position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n\n    try {\n\n        String batteryStr = parser.next();\n\n        batteryStr = batteryStr.replaceAll(\"\\\\.\", \"\");\n\n        double battery = Double.parseDouble(batteryStr) * 0.001;\n\n        position.set(Position.KEY_BATTERY, battery);\n\n    } catch (NumberFormatException e) {\n\n        log.warn(\"Invalid battery value: \" + batteryStr);\n\n    }\n\n    position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n\n    position.set(Position.KEY_GPS, parser.nextInt());\n\n    position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);\n\n    if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n\n        position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);\n\n    }\n\n    Integer lac = parser.nextHexInt();\n\n    Integer cid = parser.nextHexInt();\n\n    Integer mcc = parser.nextInt();\n\n    Integer mnc = parser.nextInt();\n\n    if (lac != null && cid != null && mcc != null && mnc != null) {\n\n        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n\n    }\n\n    parser.next(); // unused\n\n    String checksum = parser.next();\n\n    if (channel != null) {\n\n        sendAcknowledge(status, event, checksum, channel, remoteAddress);\n\n        String devicePassword = AttributeUtil.getDevicePassword(\n\n                getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n\n        sendEventResponse(event, devicePassword, channel, remoteAddress);\n\n    }\n\n    return position;\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}