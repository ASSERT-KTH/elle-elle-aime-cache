{
    "generation": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Safelist {\n    private Set<TagName> tagNames = new HashSet<>();\n\n    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n\n        Set<String> supportedTags = Stream.of(TagName.values())\n                                           .map(Enum::name)\n                                           .collect(Collectors.toSet());\n\n        List<String> invalidTags = new ArrayList<>();\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName);\n            if (!supportedTags.contains(tagName.toUpperCase())) {\n                invalidTags.add(tagName);\n            }\n        }\n\n        if (!invalidTags.isEmpty()) {\n            throw new ValidationException(\"Unsupported tags: \" + String.join(\", \", invalidTags));\n        }\n\n        for (String tagName : tags) {\n            tagNames.add(TagName.valueOf(tagName.toUpperCase()));\n        }\n        return this;\n    }\n}\n\n enum TagName {\n    P, DIV, A, H1, H2, H3, SPAN, STRONG, EM, UL, OL, LI, BR, HR, IMG, TABLE, TH, TD, TR, VIDEO, AUDIO, IFRAME, BUTTON, FORM, INPUT, SELECT, OPTION, TEXTAREA\n}\n\n class Validate {\n    public static void notNull(Object object) {\n        if (object == null) {\n            throw new ValidationException(\"Object cannot be null\");\n        }\n    }\n\n    public static void notEmpty(String string) {\n        if (string == null || string.isEmpty()) {\n            throw new ValidationException(\"String cannot be empty\");\n        }\n    }\n}\n\n class ValidationException extends RuntimeException {\n    public ValidationException(String message) {\n        super(message);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}