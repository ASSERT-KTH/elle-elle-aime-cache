{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    String sentence = (String) msg;\n\n    if (sentence.startsWith(\"!1,\")) {\n        int index = sentence.indexOf(',', 3);\n        if (index < 0) {\n            index = sentence.length();\n        }\n        getDeviceSession(channel, remoteAddress, sentence.substring(3, index));\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null || !sentence.matches(\"![35A-D],.*\")) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    String type = sentence.substring(1, 2);\n    position.set(Position.KEY_TYPE, type);\n\n    if (type.equals(\"3\")) {\n        getLastLocation(position, null);\n        position.set(Position.KEY_RESULT, sentence.substring(3));\n        return position;\n    } else if (type.equals(\"5\")) {\n        String[] values = sentence.split(\",\");\n        getLastLocation(position, null);\n        position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));\n        if (values.length >= 4) {\n            position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));\n        }\n        return position;\n    } else if (type.equals(\"B\") || type.equals(\"D\")) {\n        return parseBDMessage(sentence, position);\n    } else if (type.equals(\"C\")) {\n        Parser parser = new Parser(PATTERN_C, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        decodeFix(position, parser);\n        decodeState(position, parser);\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));\n        position.set(Position.KEY_HDOP, parser.nextDouble(0));\n        return position;\n    } else if (type.equals(\"A\")) {\n        Parser parser = new Parser(PATTERN_A, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        decodeFix(position, parser);\n        return position;\n    }\n\n    return null;\n}\n\nprivate Object parseBDMessage(String sentence, Position position) {\n    String[] values = sentence.split(\",\");\n    if (values.length < 13) {\n        return null; // Incomplete message\n    }\n\n    try {\n        String dateStr = values[1];\n        String timeStr = values[2];\n        double latitude = Double.parseDouble(values[3]);\n        double longitude = Double.parseDouble(values[4]);\n        int course = Integer.parseInt(values[5]);\n        int speed = Integer.parseInt(values[6]);\n        String identifier = values[7];\n        double altitude = Double.parseDouble(values[8]);\n        int satellites = Integer.parseInt(values[9]);\n        double hdop = Double.parseDouble(values[10]);\n        int field11 = Integer.parseInt(values[11]);\n        double battery = Double.parseDouble(values[12]);\n\n        position.setValid(true);\n        position.setLongitude(longitude);\n        position.setLatitude(latitude);\n        position.setSpeed(speed);\n        position.setCourse(course);\n        position.setAltitude(altitude);\n        position.setTime(DateUtil.parseDate(dateStr + \" \" + timeStr, \"dd/MM/yy HH:mm:ss\"));\n        position.set(Position.KEY_SATELLITES, satellites);\n        position.set(Position.KEY_HDOP, hdop);\n        position.set(Position.KEY_BATTERY, battery);\n\n        return position;\n    } catch (NumberFormatException e) {\n        return null; // Invalid data format\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}