{
    "generation": "    private Position decode4(\n            Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n        int index = 0;\n\n        String id = values[index++];\n        String type;\n\n        if (id.length() >= 3 && (id.endsWith(\"STT\") || id.endsWith(\"ALT\"))) {\n            type = id.substring(id.length() - 3);\n        } else {\n            return null;\n        }\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_TYPE, type);\n\n        position.set(Position.KEY_VERSION_FW, values[index++]);\n        index += 1; // model\n\n        Network network = new Network();\n\n        for (int i = 0; i < 7; i++) {\n            if (index + 6 <= values.length) {\n                int cid = Integer.parseInt(values[index++]);\n                int mcc = Integer.parseInt(values[index++]);\n                int mnc = Integer.parseInt(values[index++]);\n                int lac, rssi;\n                if (i == 0) {\n                    rssi = Integer.parseInt(values[index++]);\n                    lac = Integer.parseInt(values[index++]);\n                } else {\n                    lac = Integer.parseInt(values[index++]);\n                    rssi = Integer.parseInt(values[index++]);\n                }\n                index += 1; // timing advance\n                if (cid > 0) {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n                }\n            } else {\n                break;\n            }\n        }\n\n        position.setNetwork(network);\n\n        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n        position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n        position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n\n        if (index < values.length && values[index].length() == 3) {\n            index += 1; // collaborative network\n        }\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n        if (index + 1 < values.length) {\n            String dateStr = values[index++] + values[index++];\n            if (!dateStr.isEmpty()) {\n                position.setTime(dateFormat.parse(dateStr));\n            }\n        }\n\n        if (index + 4 <= values.length) {\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Double.parseDouble(values[index++]));\n        }\n\n        if (index < values.length) {\n            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n        }\n\n        if (index < values.length) {\n            position.setValid(values[index++].equals(\"1\"));\n        }\n\n        return position;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}