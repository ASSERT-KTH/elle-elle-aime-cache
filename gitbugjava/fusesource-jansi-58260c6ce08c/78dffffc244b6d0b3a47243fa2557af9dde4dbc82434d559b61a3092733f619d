{
    "generation": "\npublic static Appendable render(final String input, Appendable target) throws IOException {\n\n    int i = 0;\n\n    int firstBegin = input.indexOf(BEGIN_TOKEN);\n\n    int firstEnd = input.indexOf(END_TOKEN);\n\n    if (firstEnd != -1 && (firstBegin == -1 || firstEnd < firstBegin)) {\n\n        throw new IllegalArgumentException(\"END_TOKEN found before BEGIN_TOKEN\");\n\n    }\n\n    while (true) {\n\n        int j = input.indexOf(BEGIN_TOKEN, i);\n\n        if (j == -1) {\n\n            // No more BEGIN_TOKEN, append the rest and return\n\n            target.append(input.substring(i));\n\n            return target;\n\n        }\n\n        // Append text before BEGIN_TOKEN\n\n        target.append(input.substring(i, j));\n\n        // Find corresponding END_TOKEN\n\n        int k = input.indexOf(END_TOKEN, j);\n\n        if (k == -1) {\n\n            throw new IllegalArgumentException(\"Unmatched BEGIN_TOKEN, no END_TOKEN found\");\n\n        }\n\n        // Extract specification\n\n        int specStart = j + BEGIN_TOKEN_LEN;\n\n        String spec = input.substring(specStart, k);\n\n        // Split specification\n\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n\n        if (items.length != 2) {\n\n            throw new IllegalArgumentException(\"Invalid specification: \" + spec);\n\n        }\n\n        // Render and append replacement\n\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n        target.append(replacement);\n\n        // Move index past END_TOKEN\n\n        i = k + END_TOKEN_LEN;\n\n    }\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}