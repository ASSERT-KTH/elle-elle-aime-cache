{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int counter = 0;\n    int validateI = 0;\n    String BEGIN_TOKEN = \"@|\"; // Define BEGIN_TOKEN\n    String END_TOKEN = \"|@\";   // Define END_TOKEN\n    int BEGIN_TOKEN_LEN = BEGIN_TOKEN.length();\n    int END_TOKEN_LEN = END_TOKEN.length();\n\n    while (validateI < input.length()) {\n        int beginIndex = input.indexOf(BEGIN_TOKEN, validateI);\n        int endIndex = input.indexOf(END_TOKEN, validateI);\n\n        if (beginIndex == -1 && endIndex == -1) {\n            break;\n        }\n\n        if (beginIndex != -1 && (endIndex == -1 || beginIndex < endIndex)) {\n            // Begin token found before end token\n            counter++;\n            validateI = beginIndex + BEGIN_TOKEN_LEN;\n        } else {\n            // End token found before begin token\n            if (counter == 0) {\n                throw new IllegalArgumentException(\"End token found before start token\");\n            }\n            counter--;\n            validateI = endIndex + END_TOKEN_LEN;\n        }\n    }\n\n    if (counter != 0) {\n        throw new IllegalArgumentException(\"Unmatched begin tokens\");\n    }\n\n    // Existing processing logic\n    int i = 0;\n    while (true) {\n        int j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            if (i == 0) {\n                target.append(input);\n                return target;\n            }\n            target.append(input.substring(i));\n            return target;\n        }\n        target.append(input.substring(i, j));\n        int k = input.indexOf(END_TOKEN, j);\n        if (k == -1) {\n            target.append(input);\n            return target;\n        }\n        j += BEGIN_TOKEN_LEN;\n        String spec = input.substring(j, k);\n        String[] items = spec.split(\",\", 2); // Define CODE_TEXT_SEPARATOR\n        if (items.length == 1) {\n            target.append(input);\n            return target;\n        }\n        String replacement = render(items[1], items[0].split(\"[;]\")); // Define CODE_LIST_SEPARATOR\n        target.append(replacement);\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}