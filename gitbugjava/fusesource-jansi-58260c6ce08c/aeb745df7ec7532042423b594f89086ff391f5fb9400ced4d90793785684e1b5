{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     * @throws IllegalArgumentException\n     *             If the input contains invalid formatting\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException, IllegalArgumentException {\n\n        int i = 0;\n        int j, k;\n\n        while (i < input.length()) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                target.append(input.substring(i));\n                return target;\n            }\n            target.append(input.substring(i, j));\n            k = input.indexOf(END_TOKEN, j);\n\n            if (k == -1) {\n                throw new IllegalArgumentException(\"Unmatched start token: \" + input.substring(j));\n            }\n            if (k < j + BEGIN_TOKEN_LEN) {\n                throw new IllegalArgumentException(\"End token before start token: \" + input.substring(j, k + END_TOKEN_LEN));\n            }\n            j += BEGIN_TOKEN_LEN;\n            String spec = input.substring(j, k);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                throw new IllegalArgumentException(\"Invalid spec format: \" + spec);\n            }\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            i = k + END_TOKEN_LEN;\n        }\n        return target;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}