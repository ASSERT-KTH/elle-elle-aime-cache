{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    int j, k;\n\n    while (true) {\n        j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            // No more begin tokens, append the rest of the input\n            if (i < input.length()) {\n                target.append(input.substring(i));\n            }\n            return target;\n        }\n        \n        // Append text before the begin token\n        target.append(input.substring(i, j));\n        \n        // Look for the end token after the begin token\n        k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);\n        if (k == -1) {\n            // End token not found, throw exception\n            throw new IllegalArgumentException(\"Missing end token\");\n        }\n        \n        // Extract the specification between begin and end tokens\n        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);\n        \n        // Split the specification into code and text parts\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length != 2) {\n            // Invalid specification, throw exception\n            throw new IllegalArgumentException(\"Invalid specification format\");\n        }\n        \n        // Render the replacement text\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        \n        // Append the rendered replacement\n        target.append(replacement);\n        \n        // Move past the end token for the next iteration\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}