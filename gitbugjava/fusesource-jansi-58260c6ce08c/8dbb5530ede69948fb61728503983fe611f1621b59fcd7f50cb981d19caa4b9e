{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    int j, k;\n\n    while (true) {\n        // Find the next positions of BEGIN_TOKEN and END_TOKEN\n        int beginIndex = input.indexOf(BEGIN_TOKEN, i);\n        int endIndex = input.indexOf(END_TOKEN, i);\n\n        // Check for invalid END_TOKEN before BEGIN_TOKEN\n        if (endIndex != -1 && (beginIndex == -1 || endIndex < beginIndex)) {\n            throw new IllegalArgumentException(\"Invalid use of end token before start token\");\n        }\n\n        // If no BEGIN_TOKEN found, append the remaining text and return\n        if (beginIndex == -1) {\n            target.append(input.substring(i));\n            return target;\n        }\n\n        // Append text before BEGIN_TOKEN\n        target.append(input.substring(i, beginIndex));\n\n        // Find the corresponding END_TOKEN\n        k = input.indexOf(END_TOKEN, beginIndex + BEGIN_TOKEN_LEN);\n        if (k == -1) {\n            throw new IllegalArgumentException(\"Missing end token for begin token at index \" + beginIndex);\n        }\n\n        // Extract and process the specification\n        j = beginIndex + BEGIN_TOKEN_LEN;\n        String spec = input.substring(j, k);\n\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length != 2) {\n            throw new IllegalArgumentException(\"Invalid specification: \" + spec);\n        }\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n\n        // Update index to continue after the END_TOKEN\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}