{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n\n    int firstBegin = input.indexOf(BEGIN_TOKEN);\n    int firstEnd = input.indexOf(END_TOKEN);\n\n    if (firstEnd != -1 && (firstBegin == -1 || firstEnd < firstBegin)) {\n        throw new IllegalArgumentException(\"END_TOKEN found before BEGIN_TOKEN\");\n    }\n\n    while (true) {\n        int j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            if (i == 0) {\n                target.append(input);\n                return target;\n            }\n            target.append(input.substring(i));\n            return target;\n        }\n        target.append(input.substring(i, j));\n        int k = input.indexOf(END_TOKEN, j);\n        if (k == -1) {\n            throw new IllegalArgumentException(\"Unmatched BEGIN_TOKEN, no END_TOKEN found\");\n        }\n        int specStart = j + BEGIN_TOKEN_LEN;\n        String spec = input.substring(specStart, k);\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length != 2) {\n            throw new IllegalArgumentException(\"Invalid specification: \" + spec);\n        }\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n        target.append(replacement);\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}