{
    "generation": "public static Appendable render(final String input, Appendable target) throws IOException {\n    final String BEGIN_TOKEN = \"@|\";\n    final String END_TOKEN = \"|@\";\n    final int BEGIN_TOKEN_LEN = BEGIN_TOKEN.length();\n    final int END_TOKEN_LEN = END_TOKEN.length();\n    final String CODE_TEXT_SEPARATOR = \":\";\n    final String CODE_LIST_SEPARATOR = \",\";\n\n    int i = 0;\n    int j, k;\n\n    while (true) {\n        j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            // No more start tokens found, append the rest of the string and return\n            if (i < input.length()) {\n                target.append(input.substring(i));\n            }\n            return target;\n        }\n\n        // Append the substring before the start token\n        target.append(input.substring(i, j));\n\n        // Find the corresponding end token\n        k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);\n        if (k == -1) {\n            throw new IllegalArgumentException(\"Unmatched start token: \" + BEGIN_TOKEN);\n        }\n\n        // Check for end token appearing before start token\n        if (k < j) {\n            throw new IllegalArgumentException(\"End token appears before start token\");\n        }\n\n        // Extract the spec between start and end tokens\n        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);\n\n        // Split the spec into code and text parts\n        String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n        if (items.length != 2) {\n            throw new IllegalArgumentException(\"Invalid spec format: \" + spec);\n        }\n\n        // Render the replacement string\n        String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n        // Append the replacement to the target\n        target.append(replacement);\n\n        // Move the index past the end token\n        i = k + END_TOKEN_LEN;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}