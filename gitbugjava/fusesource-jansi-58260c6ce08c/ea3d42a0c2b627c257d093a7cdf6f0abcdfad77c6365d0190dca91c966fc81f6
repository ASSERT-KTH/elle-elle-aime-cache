{
    "generation": "/**\n * Renders the given input to the target Appendable.\n *\n * @param input source to render\n * @param target render onto this target Appendable.\n * @return the given Appendable\n * @throws IOException If an I/O error occurs\n */\npublic static Appendable render(final String input, Appendable target) throws IOException {\n    int i = 0;\n    int j, k;\n    int counter = 0; // Counter to track the balance of begin and end tokens\n\n    while (true) {\n        j = input.indexOf(BEGIN_TOKEN, i);\n        if (j == -1) {\n            // No more begin tokens\n            // Check if there are any end tokens after this point\n            k = input.indexOf(END_TOKEN, i);\n            if (k != -1) {\n                // There's an end token after no begin tokens, which is invalid\n                throw new IllegalArgumentException(\"Invalid formatting: end token before begin token\");\n            } else {\n                // Append the remaining part of the input\n                target.append(input.substring(i));\n                return target;\n            }\n        } else {\n            // Begin token found, increment counter\n            counter++;\n            k = input.indexOf(END_TOKEN, j);\n            if (k == -1) {\n                // No end token found after this begin token\n                // Append the whole input and return\n                target.append(input);\n                return target;\n            } else {\n                // End token found, decrement counter\n                counter--;\n                if (counter < 0) {\n                    // End token before begin token\n                    throw new IllegalArgumentException(\"Invalid formatting: end token before begin token\");\n                }\n                // Extract specification and process it\n                j += BEGIN_TOKEN_LEN;\n                String spec = input.substring(j, k);\n\n                String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n                if (items.length == 1) {\n                    target.append(input);\n                    return target;\n                }\n                String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n                target.append(replacement);\n\n                i = k + END_TOKEN_LEN;\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}