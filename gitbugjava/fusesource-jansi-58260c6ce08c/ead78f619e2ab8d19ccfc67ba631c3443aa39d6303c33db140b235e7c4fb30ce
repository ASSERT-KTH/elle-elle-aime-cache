{
    "generation": "    /**\n     * Renders the given input to the target Appendable.\n     *\n     * @param input\n     *            source to render\n     * @param target\n     *            render onto this target Appendable.\n     * @return the given Appendable\n     * @throws IOException\n     *             If an I/O error occurs\n     * @throws IllegalArgumentException\n     *             If the input contains an end token before a start token\n     */\n    public static Appendable render(final String input, Appendable target) throws IOException {\n        final String BEGIN_TOKEN = \"@|\";\n        final String END_TOKEN = \"|@\";\n        final int BEGIN_TOKEN_LEN = BEGIN_TOKEN.length();\n        final int END_TOKEN_LEN = END_TOKEN.length();\n        final String CODE_TEXT_SEPARATOR = \",\";\n        final String CODE_LIST_SEPARATOR = \";\";\n\n        int i = 0;\n        int j, k;\n\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                if (i == 0) {\n                    target.append(input);\n                    return target;\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n            target.append(input.substring(i, j));\n            k = input.indexOf(END_TOKEN, j);\n\n            // Check if there is an end token before a start token\n            int nextStart = input.indexOf(BEGIN_TOKEN, j + BEGIN_TOKEN_LEN);\n            if (nextStart != -1 && nextStart < k) {\n                throw new IllegalArgumentException(\"End token found before a start token\");\n            }\n\n            if (k == -1) {\n                throw new IllegalArgumentException(\"Unmatched start token\");\n            }\n            j += BEGIN_TOKEN_LEN;\n            String spec = input.substring(j, k);\n\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                throw new IllegalArgumentException(\"Invalid specification format\");\n            }\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n\n            target.append(replacement);\n\n            i = k + END_TOKEN_LEN;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}