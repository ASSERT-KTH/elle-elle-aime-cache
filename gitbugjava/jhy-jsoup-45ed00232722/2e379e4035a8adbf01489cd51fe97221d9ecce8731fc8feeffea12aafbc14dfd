{
    "generation": "import java.io.UnsupportedEncodingException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLEncoder;\n\npublic class HttpConnection {\n    static URL encodeUrl(URL u) {\n        u = punyUrl(u);\n        try {\n            String protocol = u.getProtocol();\n            String host = u.getHost();\n            String path = u.getPath();\n            String query = u.getQuery();\n            String ref = u.getRef();\n\n            // Encode path segments\n            String[] pathSegments = path.split(\"/\");\n            for (int i = 0; i < pathSegments.length; i++) {\n                pathSegments[i] = URLEncoder.encode(pathSegments[i], \"UTF-8\");\n            }\n            String encodedPath = String.join(\"/\", pathSegments);\n\n            // Encode query parameters\n            if (query != null) {\n                String[] queryParams = query.split(\"&\");\n                for (int i = 0; i < queryParams.length; i++) {\n                    queryParams[i] = URLEncoder.encode(queryParams[i], \"UTF-8\");\n                }\n                String encodedQuery = String.join(\"&\", queryParams);\n                // Reconstruct the URL string with encoded path and query\n                String urlStr = protocol + \"://\" + host + \"/\" + encodedPath + \"?\" + encodedQuery;\n                if (ref != null) {\n                    urlStr += \"#\" + ref;\n                }\n                return new URL(urlStr);\n            } else {\n                // If no query, just encode the path\n                String urlStr = protocol + \"://\" + host + \"/\" + encodedPath;\n                if (ref != null) {\n                    urlStr += \"#\" + ref;\n                }\n                return new URL(urlStr);\n            }\n        } catch (MalformedURLException e) {\n            // Give up and return the original input\n            return u;\n        } catch (UnsupportedEncodingException e) {\n            // UTF-8 is always supported, so this should never happen\n            throw new AssertionError(e);\n        }\n    }\n\n    // Assuming punyUrl is a method that converts international domain names to ASCII\n    private static URL punyUrl(URL u) {\n        // Implementation not shown, assume it's correct\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}