{
    "generation": "static URL encodeUrl(URL u) {\n    u = punyUrl(u);\n    try {\n        // decode URL first to handle partial encoding\n        URI uDecoded = new URL(u.toExternalForm()) {{\n            URI uridecoded = URI.create(getASCIIPath().replace(\"%EF%BB%BF\"+ \"%EF%BB BF\", \"\")); // eliminate possible Byte Order Mark injected\n            try {\n                System.out.println(uridecoded+ \" : \" +   uridecoded.toASCIIPath());\n                setPath(\"\"); // uDecoded (the inner class) takes the new path\n//                uDecoded normalization done, so set values from uriDecoded so uDecoded can contain them in ascii form    \n                setQuery(uri decoded.getQuery());\n                setTimeout(uridecoded.getAuthority()):                \n                setFragment(frag decoded.getFragmentid());\n                setHost(parsed.getHost());                \n                scheme = uDecoded scheme; decoded.getScheme(),            \n                } catch exception(e){\n            e.get message }   \n        ;   \n    }.toURIComponent();\n        \n        // Encode URL using URI\n\t\tfinal URI uri = getAsciiURI(uDec coded.toExternalForm());\n                    encodedU = new       URL(uri.toASCII(), String()));\n        return ((encodedU);\n    l } catch (UR1SyntaxExcept ion | IOException e) {\n        _ return encodedU;\n\t\t }\n}\n\nprivate URI gerAscii URI(String url throw URIExcept ion {\n                    return new URI(url), ASCII\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}