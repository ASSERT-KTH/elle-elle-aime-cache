{
    "generation": "import java.io.*;\nimport java.net.*;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class HttpConnection {\n    static URL encodeUrl(URL u) {\n        u = punyUrl(u);\n        try {\n            URI uri = u.toURI();\n            String scheme = uri.getScheme();\n            String authority = uri.getAuthority();\n            String path = uri.getPath();\n            String query = uri.getQuery();\n            String fragment = uri.getFragment();\n\n            // Encode path segments\n            String[] segments = path.split(\"/\");\n            List<String> encodedSegments = new ArrayList<>();\n            for (String segment : segments) {\n                if (segment != null && !segment.isEmpty()) {\n                    String encoded = URLEncoder.encode(segment, StandardCharsets.UTF_8).replace(\"+\", \"%20\");\n                    encodedSegments.add(encoded);\n                }\n            }\n            StringBuilder encodedPathBuilder = new StringBuilder();\n            for (String segment : encodedSegments) {\n                encodedPathBuilder.append(\"/\").append(segment);\n            }\n            String encodedPath = encodedPathBuilder.toString();\n\n            // Encode query\n            if (query != null) {\n                query = URLEncoder.encode(query, StandardCharsets.UTF_8).replace(\"+\", \"%20\");\n            }\n\n            // Encode fragment\n            if (fragment != null) {\n                fragment = URLEncoder.encode(fragment, StandardCharsets.UTF_8).replace(\"+\", \"%20\");\n            }\n\n            // Reconstruct URI and URL\n            URI encodedUri = new URI(scheme, authority, encodedPath, query, fragment);\n            return encodedUri.toURL();\n        } catch (URISyntaxException | MalformedURLException e) {\n            // Handle exceptions by returning the original URL\n            return u;\n        }\n    }\n\n    // Placeholder for punyUrl function\n    private static URL punyUrl(URL u) {\n        // Implementation for converting international domain names to punycode\n        // Assuming it's correctly implemented elsewhere\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}