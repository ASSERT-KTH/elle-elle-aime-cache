{
    "generation": "import java.io.UnsupportedEncodingException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URISyntaxException;\nimport java.net.URI;\n\npublic class HttpConnection {\n    static URL encodeUrl(URL u) {\n        u = punyUrl(u);\n        try {\n            URI uri = new URI(u.toString());\n            String scheme = uri.getScheme();\n            String authority = uri.getAuthority();\n            String path = uri.getPath();\n            String query = uri.getQuery();\n            String fragment = uri.getFragment();\n\n            // Encode path and query\n            String encodedPath = percentEncodePath(path);\n            String encodedQuery = percentEncodeQuery(query);\n\n            // Reconstruct URI\n            URI encodedUri = new URI(scheme, authority, encodedPath, encodedQuery, fragment);\n            return encodedUri.toURL();\n        } catch (URISyntaxException | MalformedURLException e) {\n            return u;\n        }\n    }\n\n    private static String percentEncodePath(String path) throws UnsupportedEncodingException {\n        if (path == null) {\n            return null;\n        }\n        StringBuilder encoded = new StringBuilder();\n        for (char c : path.toCharArray()) {\n            if (isAllowedInPath(c)) {\n                encoded.append(c);\n            } else {\n                encoded.append('%');\n                String hex = Integer.toHexString(c);\n                encoded.append(hex.substring(hex.length() - 4).toUpperCase());\n            }\n        }\n        return encoded.toString();\n    }\n\n    private static boolean isAllowedInPath(char c) {\n        if (Character.isLetterOrDigit(c)) {\n            return true;\n        }\n        switch (c) {\n            case '-':\n            case '.':\n            case '_':\n            case '~':\n            case '@':\n            case ':':\n            case '/':\n            case ';':\n            case '?':\n            case '#':\n            case '[':\n            case ']':\n            case ',':\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    private static String percentEncodeQuery(String query) throws UnsupportedEncodingException {\n        if (query == null) {\n            return null;\n        }\n        // Encode each key-value pair separately\n        StringBuilder encoded = new StringBuilder();\n        String[] pairs = query.split(\"&\");\n        for (String pair : pairs) {\n            int eqIndex = pair.indexOf('=');\n            if (eqIndex >= 0) {\n                String key = pair.substring(0, eqIndex);\n                String value = pair.substring(eqIndex + 1);\n                encoded.append(percentEncode(key));\n                encoded.append(\"=\");\n                encoded.append(percentEncode(value));\n            } else {\n                encoded.append(percentEncode(pair));\n            }\n            encoded.append(\"&\");\n        }\n        if (encoded.length() > 0) {\n            encoded.setLength(encoded.length() - 1); // Remove trailing '&'\n        }\n        return encoded.toString();\n    }\n\n    private static String percentEncode(String s) throws UnsupportedEncodingException {\n        byte[] bytes = s.getBytes(\"UTF-8\");\n        StringBuilder encoded = new StringBuilder();\n        for (byte b : bytes) {\n            if (Character.isLetterOrDigit((char) b)) {\n                encoded.append((char) b);\n            } else {\n                encoded.append('%');\n                String hex = Integer.toHexString(b & 0xFF);\n                if (hex.length() == 1) {\n                    hex = '0' + hex;\n                }\n                encoded.append(hex.toUpperCase());\n            }\n        }\n        return encoded.toString();\n    }\n\n    // Placeholder for punyUrl method\n    private static URL punyUrl(URL u) {\n        // Implementation for handling internationalized domain names\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}