{
    "generation": "static URL encodeUrl(URL u) {\n    u = punyUrl(u);\n    try {\n        //  odd way to encode urls, but it works!\n        String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)\n        \n        // Split the URL into its components to properly encode each part\n        String scheme = u.getProtocol();\n        String authority = u.getAuthority();\n        String path = u.getPath();\n        String query = u.getQuery();\n        String fragment = u.getRef();\n        \n        // Encode the path and query parameters\n        path = URLEncoder.encode(path, \"UTF-8\").replace(\"+\", \"%20\");\n        if (query != null) {\n            query = URLEncoder.encode(query, \"UTF-8\").replace(\"+\", \"%20\");\n        }\n        \n        // Reconstruct the URL\n        String encodedUrl = scheme + \"://\" + authority + path;\n        if (query != null) {\n            encodedUrl += \"?\" + query;\n        }\n        if (fragment != null) {\n            encodedUrl += \"#\" + fragment;\n        }\n        \n        final URI uri = new URI(encodedUrl);\n        return new URL(uri.toASCIIString());\n    } catch (URISyntaxException | MalformedURLException | UnsupportedEncodingException e) {\n        // give up and return the original input\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}