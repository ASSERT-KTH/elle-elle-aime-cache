{
    "generation": "import java.io.UnsupportedEncodingException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.net.URI;\nimport java.nio.charset.StandardCharsets;\n\npublic class HttpConnection {\n\n    static URL encodeUrl(URL u) {\n        u = punyUrl(u);\n        try {\n            URI uri = new URI(u.getProtocol(), u.getAuthority(), null, null, null);\n            String encodedPath = encodePath(u.getPath());\n            String encodedQuery = encodeQuery(u.getQuery());\n            URI encodedUri = new URI(uri.getScheme(), uri.getAuthority(), encodedPath, encodedQuery, u.getFragment());\n            return encodedUri.toURL();\n        } catch (URISyntaxException | MalformedURLException e) {\n            // give up and return the original input\n            return u;\n        }\n    }\n\n    private static String encodePath(String path) throws UnsupportedEncodingException {\n        return URLEncoder.encode(path, StandardCharsets.UTF_8.name()).replace(\"+\", \"%20\");\n    }\n\n    private static String encodeQuery(String query) throws UnsupportedEncodingException {\n        if (query == null) return null;\n        return URLEncoder.encode(query, StandardCharsets.UTF_8.name()).replace(\"+\", \"%20\");\n    }\n\n    private static URL punyUrl(URL u) {\n        // Implementation of punyUrl assuming it converts internationalized domain names to ASCII\n        // This is a placeholder for the actual implementation\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}