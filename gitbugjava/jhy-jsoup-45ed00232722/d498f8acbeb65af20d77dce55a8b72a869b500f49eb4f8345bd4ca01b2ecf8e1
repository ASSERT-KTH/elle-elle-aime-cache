{
    "generation": "static URL encodeUrl(URL u) {\n    u = punyUrl(u);\n    try {\n        // Need to encode the query part separately to handle spaces within the query parameter values\n        String urlS = u.toExternalForm();\n        urlS = urlS.replace(\" \", \"%20\");\n\n        URI uri = new URI(urlS);\n        String query = uri.getQuery();\n\n        if (query != null) {\n            StringBuilder sb = new StringBuilder();\n            String[] queryParams = query.split(\"&\");\n            for (String param : queryParams) {\n                String[] keyValue = param.split(\"=\");\n                if (keyValue.length == 2) {\n                    sb.append(keyValue[0]).append(\"=\").append(encodeValue(keyValue[1])).append(\"&\");\n                } else {\n                    sb.append(encodeValue(keyValue[0])).append(\"&\");\n                }\n            }\n            // Remove the trailing '&' if present\n            if (sb.length() > 0 && sb.charAt(sb.length() - 1) == '&') {\n                sb.setLength(sb.length() - 1);\n            }\n            query = sb.toString();\n\n            // Reconstruct the URI with the encoded query\n            uri = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), query, uri.getFragment());\n        }\n\n        return new URL(uri.toASCIIString());\n    } catch (URISyntaxException | MalformedURLException e) {\n        // give up and return the original input\n        return u;\n    }\n}\n\nprivate static String encodeValue(String value) {\n    try {\n        return URLEncoder.encode(value, \"UTF-8\").replace(\"+\", \"%20\");\n    } catch (UnsupportedEncodingException e) {\n        // This should never happen since UTF-8 is guaranteed to be supported\n        throw new RuntimeException(e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}