{
    "generation": "import java.io.UnsupportedEncodingException;\nimport java.net.URL;\nimport java.net.URISyntaxException;\nimport java.net.URI;\nimport java.net.URLEncoder;\n\npublic class HttpConnection {\n    static URL encodeUrl(URL u) {\n        u = punyUrl(u);\n        try {\n            URI uri = new URI(u.toExternalForm());\n            String encodedPath = encodePath(uri.getPath());\n            String encodedQuery = encodeQuery(uri.getQuery());\n            URI encodedUri = new URI(uri.getScheme(), uri.getAuthority(), encodedPath, encodedQuery, uri.getFragment());\n            return new URL(encodedUri.toASCIIString());\n        } catch (URISyntaxException | MalformedURLException e) {\n            return u;\n        }\n    }\n\n    private static String encodePath(String path) {\n        if (path == null) {\n            return null;\n        }\n        try {\n            return URLEncoder.encode(path, \"UTF-8\").replace(\"%2F\", \"/\");\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(\"UTF-8 encoding not supported\", e);\n        }\n    }\n\n    private static String encodeQuery(String query) {\n        if (query == null) {\n            return null;\n        }\n        try {\n            return URLEncoder.encode(query, \"UTF-8\").replace(\"+\", \"%20\");\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(\"UTF-8 encoding not supported\", e);\n        }\n    }\n\n    // Assuming punyUrl is a method that handles international domain names.\n    private static URL punyUrl(URL u) {\n        // Implementation not provided; assumed to handle domain encoding.\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}