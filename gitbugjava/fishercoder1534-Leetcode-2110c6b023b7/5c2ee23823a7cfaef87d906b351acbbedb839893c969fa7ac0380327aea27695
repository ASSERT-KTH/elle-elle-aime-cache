{
    "generation": "/**\n * Finds the lowest common ancestor of two nodes in a binary search tree.\n * \n * @param root The root of the binary search tree.\n * @param p    The first node.\n * @param q    The second node.\n * @return The lowest common ancestor of p and q.\n */\npublic TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    if (root == null || root == p || root == q) {\n        return root;\n    }\n    // Determine the relative positions of p and q with respect to root\n    if (p.val < root.val && q.val < root.val) {\n        // Both p and q are in the left subtree\n        return lowestCommonAncestor(root.left, p, q);\n    } else if (p.val > root.val && q.val > root.val) {\n        // Both p and q are in the right subtree\n        return lowestCommonAncestor(root.right, p, q);\n    } else {\n        // p and q are in different subtrees, so root is the LCA\n        return root;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}