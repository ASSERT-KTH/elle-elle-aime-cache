{
    "generation": "/**\n * Fixed function to find the Lowest Common Ancestor of two nodes in a Binary Search Tree.\n * \n * @param root The root of the Binary Search Tree.\n * @param p    The first node.\n * @param q    The second node.\n * @return The Lowest Common Ancestor of p and q.\n */\npublic TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    // If both p and q are less than root, move to the left subtree\n    if (p.val < root.val && q.val < root.val) {\n        return lowestCommonAncestor(root.left, p, q);\n    }\n    // If both p and q are greater than root, move to the right subtree\n    if (p.val > root.val && q.val > root.val) {\n        return lowestCommonAncestor(root.right, p, q);\n    }\n    // Otherwise, the current root is the Lowest Common Ancestor\n    return root;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}