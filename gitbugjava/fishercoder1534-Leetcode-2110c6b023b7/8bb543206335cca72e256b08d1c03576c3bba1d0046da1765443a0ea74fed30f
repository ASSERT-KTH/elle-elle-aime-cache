{
    "generation": "/**\n * Fixed function to find the lowest common ancestor of two nodes in a binary search tree.\n * \n * @param root The root of the binary search tree.\n * @param p    The first node.\n * @param q    The second node.\n * @return The lowest common ancestor of p and q.\n */\npublic TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    // If the root is null, or if the root is one of the target nodes, return the root\n    if (root == null || root == p || root == q) {\n        return root;\n    }\n    \n    // If p and q are on opposite sides of the root, the root is the LCA\n    if ((root.val - p.val) * (root.val - q.val) <= 0) {\n        return root;\n    }\n    \n    // If both p and q are less than the root, they must be in the left subtree\n    if (root.val > p.val && root.val > q.val) {\n        return lowestCommonAncestor(root.left, p, q);\n    }\n    \n    // If both p and q are greater than the root, they must be in the right subtree\n    return lowestCommonAncestor(root.right, p, q);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}