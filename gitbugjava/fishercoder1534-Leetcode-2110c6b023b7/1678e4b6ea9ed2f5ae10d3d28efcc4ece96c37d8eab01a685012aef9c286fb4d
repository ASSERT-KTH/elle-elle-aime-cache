{
    "generation": "public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    if (root == null) {\n        return null;\n    }\n    // If the current node is one of p or q, it could be a potential LCA\n    if (root == p || root == q) {\n        return root;\n    }\n    // Recurse into the left and right subtrees\n    TreeNode left = lowestCommonAncestor(root.left, p, q);\n    TreeNode right = lowestCommonAncestor(root.right, p, q);\n    \n    // If both left and right recursions return non-null, it means p and q are on different sides of the current root\n    if (left != null && right != null) {\n        return root;\n    }\n    // If only one of the recursions returns non-null, the LCA is in that subtree\n    return left != null ? left : right;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}