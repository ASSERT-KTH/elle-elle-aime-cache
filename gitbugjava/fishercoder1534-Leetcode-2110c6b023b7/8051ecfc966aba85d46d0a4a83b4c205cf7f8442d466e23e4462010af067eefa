{
    "generation": "public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    if (root == null || p == root || q == root) {\n        return root;\n    }\n    // Check if p and q are on different sides of root\n    if ((p.val < root.val && q.val > root.val) || (p.val > root.val && q.val < root.val)) {\n        return root;\n    }\n    // If both p and q are smaller than root, LCA is on the left side\n    if (p.val < root.val && q.val < root.val) {\n        return lowestCommonAncestor(root.left, p, q);\n    }\n    // If both p and q are greater than root, LCA is on the right side\n    if (p.val > root.val && q.val > root.val) {\n        return lowestCommonAncestor(root.right, p, q);\n    }\n    return root;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}