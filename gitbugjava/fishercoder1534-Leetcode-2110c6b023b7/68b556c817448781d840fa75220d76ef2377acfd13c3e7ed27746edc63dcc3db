{
    "generation": "public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    if (root == null || p == root || q == root) {\n        return root;\n    }\n    long pq = (long) p.val * q.val; // avoid integer overflow\n    if ((root.val - p.val) * (root.val - q.val) > 0) {\n        if (pq > 0) { // if both p and q are on the same side of root\n            if (root.val - p.val > 0) {\n                return lowestCommonAncestor(root.left, p, q);\n            }\n            return lowestCommonAncestor(root.right, p, q);\n        } else { // if p and q are on different sides of root\n            return root;\n        }\n    }\n    return root;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}