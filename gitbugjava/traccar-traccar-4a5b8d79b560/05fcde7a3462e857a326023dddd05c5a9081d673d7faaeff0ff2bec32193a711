{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    String sentence = (String) msg;\n    sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));\n\n    Position position = new Position();\n    position.setProtocol(getProtocolName());\n\n    String[] entries = sentence.split(\",\");\n    Map<String, String> data = new HashMap<>();\n    for (String entry : entries) {\n        int delimiter = entry.indexOf('=');\n        if (delimiter != -1) {\n            String key = entry.substring(0, delimiter);\n            String value = entry.substring(delimiter + 1);\n            data.put(key, value);\n        }\n    }\n\n    parsePosition(position, data);\n\n    return position;\n}\n\nprivate void parsePosition(Position position, Map<String, String> data) throws ParseException {\n    for (Map.Entry<String, String> entry : data.entrySet()) {\n        switch (entry.getKey()) {\n            case \"unit\":\n                DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, entry.getValue());\n                if (deviceSession != null) {\n                    position.setDeviceId(deviceSession.getDeviceId());\n                }\n                break;\n            case \"gps_valid\":\n                position.setValid(Integer.parseInt(entry.getValue()) != 0);\n                break;\n            case \"datetime_actual\":\n                position.setTime(new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").parse(entry.getValue()));\n                break;\n            case \"latitude\":\n                position.setLatitude(Double.parseDouble(entry.getValue()));\n                break;\n            case \"longitude\":\n                position.setLongitude(Double.parseDouble(entry.getValue()));\n                break;\n            case \"altitude\":\n                position.setAltitude(Double.parseDouble(entry.getValue()));\n                break;\n            case \"velocity\":\n                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(entry.getValue())));\n                break;\n            case \"heading\":\n                position.setCourse(Integer.parseInt(entry.getValue()));\n                break;\n            case \"eventid\":\n                position.set(Position.KEY_EVENT, Integer.parseInt(entry.getValue()));\n                break;\n            case \"mileage\":\n                position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(entry.getValue()) * 1000));\n                break;\n            case \"satellites\":\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(entry.getValue()));\n                break;\n            case \"ignition\":\n                position.set(Position.KEY_IGNITION, Integer.parseInt(entry.getValue()) != 0);\n                break;\n            case \"door\":\n                position.set(Position.KEY_DOOR, Integer.parseInt(entry.getValue()) != 0);\n                break;\n            case \"arm\":\n                position.set(Position.KEY_ARMED, Integer.parseInt(entry.getValue()) != 0);\n                break;\n            case \"fuel\":\n                position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(entry.getValue()));\n                break;\n            case \"rpm\":\n                position.set(Position.KEY_RPM, Integer.parseInt(entry.getValue()));\n                break;\n            case \"main_voltage\":\n                position.set(Position.KEY_POWER, Double.parseDouble(entry.getValue()));\n                break;\n            case \"backup_voltage\":\n                position.set(Position.KEY_BATTERY, Double.parseDouble(entry.getValue()));\n                break;\n            case \"analog1\":\n            case \"analog2\":\n            case \"analog3\":\n                position.set(Position.PREFIX_ADC + (entry.getKey().charAt(entry.getKey().length() - 1) - '0'), Double.parseDouble(entry.getValue()));\n                break;\n            default:\n                position.set(entry.getKey(), entry.getValue());\n                break;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}