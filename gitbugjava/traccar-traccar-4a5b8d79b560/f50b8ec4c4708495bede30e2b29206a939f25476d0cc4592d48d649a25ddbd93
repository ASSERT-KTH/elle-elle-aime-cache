{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    String sentence = (String) msg;\n    sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));\n\n    Position position = new Position();\n    position.setProtocol(getProtocolName());\n\n    Map<String, String> values = new HashMap<>();\n\n    for (String entry : sentence.split(\",\")) {\n        int delimiter = entry.indexOf('=');\n        if (delimiter != -1) {\n            String key = entry.substring(0, delimiter);\n            String value = entry.substring(delimiter + 1);\n            values.put(key, value);\n        }\n    }\n\n    if (!values.containsKey(\"unit\")) {\n        return null;\n    }\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values.get(\"unit\"));\n    if (deviceSession == null) {\n        return null;\n    }\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    if (values.containsKey(\"gps_valid\")) {\n        position.setValid(Integer.parseInt(values.get(\"gps_valid\")) != 0);\n    }\n\n    if (values.containsKey(\"datetime_actual\")) {\n        position.setTime(new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").parse(values.get(\"datetime_actual\")));\n    }\n\n    if (values.containsKey(\"latitude\")) {\n        position.setLatitude(Double.parseDouble(values.get(\"latitude\")));\n    }\n\n    if (values.containsKey(\"longitude\")) {\n        position.setLongitude(Double.parseDouble(values.get(\"longitude\")));\n    }\n\n    if (values.containsKey(\"altitude\")) {\n        position.setAltitude(Double.parseDouble(values.get(\"altitude\")));\n    }\n\n    if (values.containsKey(\"velocity\")) {\n        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values.get(\"velocity\"))));\n    }\n\n    if (values.containsKey(\"heading\")) {\n        position.setCourse(Integer.parseInt(values.get(\"heading\")));\n    }\n\n    if (values.containsKey(\"eventid\")) {\n        position.set(Position.KEY_EVENT, Integer.parseInt(values.get(\"eventid\")));\n    }\n\n    if (values.containsKey(\"mileage\")) {\n        position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(values.get(\"mileage\")) * 1000));\n    }\n\n    if (values.containsKey(\"satellites\")) {\n        position.set(Position.KEY_SATELLITES, Integer.parseInt(values.get(\"satellites\")));\n    }\n\n    if (values.containsKey(\"ignition\")) {\n        position.set(Position.KEY_IGNITION, Integer.parseInt(values.get(\"ignition\")) != 0);\n    }\n\n    if (values.containsKey(\"door\")) {\n        position.set(Position.KEY_DOOR, Integer.parseInt(values.get(\"door\")) != 0);\n    }\n\n    if (values.containsKey(\"arm\")) {\n        position.set(Position.KEY_ARMED, Integer.parseInt(values.get(\"arm\")) != 0);\n    }\n\n    if (values.containsKey(\"fuel\")) {\n        position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values.get(\"fuel\")));\n    }\n\n    if (values.containsKey(\"rpm\")) {\n        position.set(Position.KEY_RPM, Integer.parseInt(values.get(\"rpm\")));\n    }\n\n    if (values.containsKey(\"main_voltage\")) {\n        position.set(Position.KEY_POWER, Double.parseDouble(values.get(\"main_voltage\")));\n    }\n\n    if (values.containsKey(\"backup_voltage\")) {\n        position.set(Position.KEY_BATTERY, Double.parseDouble(values.get(\"backup_voltage\")));\n    }\n\n    for (String key : values.keySet()) {\n        String value = values.get(key);\n        switch (key) {\n            case \"analog1\":\n            case \"analog2\":\n            case \"analog3\":\n                int index = key.charAt(key.length() - 1) - '0';\n                position.set(Position.PREFIX_ADC + index, Double.parseDouble(value));\n                break;\n            case \"extra1\":\n            case \"extra2\":\n            case \"extra3\":\n            default:\n                position.set(key, value);\n                break;\n        }\n    }\n\n    return position;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}