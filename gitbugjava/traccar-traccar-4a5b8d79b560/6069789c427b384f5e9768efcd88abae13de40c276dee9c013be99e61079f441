{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    String sentence = (String) msg;\n    sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));\n\n    Position position = new Position();\n    position.setProtocol(getProtocolName());\n\n    for (String entry : sentence.split(\",\")) {\n        int delimiter = entry.indexOf('=');\n        if (delimiter == -1) {\n            continue; // Skip entries without '='\n        }\n        String key = entry.substring(0, delimiter);\n        String value = entry.substring(delimiter + 1);\n        switch (key) {\n            case \"unit\":\n                DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);\n                if (deviceSession != null) {\n                    position.setDeviceId(deviceSession.getDeviceId());\n                }\n                break;\n            case \"gps_valid\":\n                position.setValid(parseBoolean(value));\n                break;\n            case \"datetime_actual\":\n                position.setTime(parseDate(value));\n                break;\n            case \"latitude\":\n                position.setLatitude(parseDouble(value));\n                break;\n            case \"longitude\":\n                position.setLongitude(parseDouble(value));\n                break;\n            case \"altitude\":\n                position.setAltitude(parseDouble(value));\n                break;\n            case \"velocity\":\n                position.setSpeed(UnitsConverter.knotsFromKph(parseInteger(value)));\n                break;\n            case \"heading\":\n                position.setCourse(parseInteger(value));\n                break;\n            case \"eventid\":\n                position.set(Position.KEY_EVENT, parseInteger(value));\n                break;\n            case \"mileage\":\n                position.set(Position.KEY_ODOMETER, (long) (parseDouble(value) * 1000));\n                break;\n            case \"satellites\":\n                position.set(Position.KEY_SATELLITES, parseInteger(value));\n                break;\n            case \"ignition\":\n                position.set(Position.KEY_IGNITION, parseBoolean(value));\n                break;\n            case \"door\":\n                position.set(Position.KEY_DOOR, parseBoolean(value));\n                break;\n            case \"arm\":\n                position.set(Position.KEY_ARMED, parseBoolean(value));\n                break;\n            case \"fuel\":\n                position.set(Position.KEY_FUEL_LEVEL, parseInteger(value));\n                break;\n            case \"rpm\":\n                position.set(Position.KEY_RPM, parseInteger(value));\n                break;\n            case \"main_voltage\":\n                position.set(Position.KEY_POWER, parseDouble(value));\n                break;\n            case \"backup_voltage\":\n                position.set(Position.KEY_BATTERY, parseDouble(value));\n                break;\n            case \"analog1\":\n            case \"analog2\":\n            case \"analog3\":\n                position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), parseDouble(value));\n                break;\n            case \"extra1\":\n            case \"extra2\":\n            case \"extra3\":\n            default:\n                position.set(key, value);\n                break;\n        }\n    }\n\n    return position;\n}\n\nprivate boolean parseBoolean(String value) {\n    try {\n        return Integer.parseInt(value) != 0;\n    } catch (NumberFormatException e) {\n        LOG.warning(\"Invalid boolean value: \" + value);\n        return false;\n    }\n}\n\nprivate int parseInteger(String value) {\n    try {\n        return Integer.parseInt(value);\n    } catch (NumberFormatException e) {\n        LOG.warning(\"Invalid integer value: \" + value);\n        return 0;\n    }\n}\n\nprivate double parseDouble(String value) {\n    try {\n        return Double.parseDouble(value);\n    } catch (NumberFormatException e) {\n        LOG.warning(\"Invalid double value: \" + value);\n        return 0.0;\n    }\n}\n\nprivate Date parseDate(String value) {\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n    try {\n        return dateFormat.parse(value);\n    } catch (ParseException e) {\n        LOG.warning(\"Invalid date value: \" + value);\n        return new Date(0);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}