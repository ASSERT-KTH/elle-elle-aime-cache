{
    "generation": "@Override\nprotected Object decode(\n        Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n    String sentence = (String) msg;\n    sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));\n\n    Position position = new Position();\n    position.setProtocol(getProtocolName());\n\n    for (String entry : sentence.split(\",\")) {\n        int delimiter = entry.indexOf('=');\n        if (delimiter == -1) {\n            continue; // Skip entries without '='\n        }\n        String key = entry.substring(0, delimiter);\n        String value = entry.substring(delimiter + 1);\n        try {\n            switch (key) {\n                case \"unit\":\n                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);\n                    if (deviceSession != null) {\n                        position.setDeviceId(deviceSession.getDeviceId());\n                    }\n                    break;\n                case \"gps_valid\":\n                    position.setValid(\"1\".equals(value));\n                    break;\n                case \"datetime_actual\":\n                    position.setTime(parseDate(value));\n                    break;\n                case \"latitude\":\n                    position.setLatitude(Double.parseDouble(value));\n                    break;\n                case \"longitude\":\n                    position.setLongitude(Double.parseDouble(value));\n                    break;\n                case \"altitude\":\n                    position.setAltitude(Double.parseDouble(value));\n                    break;\n                case \"velocity\":\n                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));\n                    break;\n                case \"heading\":\n                    position.setCourse(Integer.parseInt(value));\n                    break;\n                case \"eventid\":\n                    position.set(Position.KEY_EVENT, Integer.parseInt(value));\n                    break;\n                case \"mileage\":\n                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));\n                    break;\n                case \"satellites\":\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                    break;\n                case \"ignition\":\n                    position.set(Position.KEY_IGNITION, \"1\".equals(value));\n                    break;\n                case \"door\":\n                    position.set(Position.KEY_DOOR, \"1\".equals(value));\n                    break;\n                case \"arm\":\n                    position.set(Position.KEY_ARMED, \"1\".equals(value));\n                    break;\n                case \"fuel\":\n                    position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));\n                    break;\n                case \"rpm\":\n                    position.set(Position.KEY_RPM, Integer.parseInt(value));\n                    break;\n                case \"main_voltage\":\n                    position.set(Position.KEY_POWER, Double.parseDouble(value));\n                    break;\n                case \"backup_voltage\":\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(value));\n                    break;\n                case \"analog1\":\n                case \"analog2\":\n                case \"analog3\":\n                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));\n                    break;\n                case \"extra1\":\n                case \"extra2\":\n                case \"extra3\":\n                default:\n                    position.set(key, value);\n                    break;\n            }\n        } catch (NumberFormatException e) {\n            LOG.warn(\"Invalid number format for key {}: {}\", key, value);\n        } catch (ParseException e) {\n            LOG.warn(\"Invalid date format for key {}: {}\", key, value);\n        }\n    }\n\n    return position;\n}\n\nprivate Date parseDate(String dateStr) throws ParseException {\n    // Try multiple date formats to handle variations\n    String[] formats = {\"yyyy/MM/dd HH:mm:ss\", \"yyyy-MM-dd HH:mm:ss\", \"dd/MM/yyyy HH:mm:ss\"};\n    for (String format : formats) {\n        try {\n            SimpleDateFormat sdf = new SimpleDateFormat(format);\n            return sdf.parse(dateStr);\n        } catch (ParseException e) {\n            // Try next format\n        }\n    }\n    throw new ParseException(\"Date format not recognized: \" + dateStr, 0);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}