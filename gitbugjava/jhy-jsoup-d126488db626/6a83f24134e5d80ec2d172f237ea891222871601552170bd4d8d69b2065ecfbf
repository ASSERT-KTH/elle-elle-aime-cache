{
    "generation": "    private String consumeSubQuery() {\n        StringBuilder sq = StringUtil.borrowBuilder();\n        while (!tq.isEmpty()) {\n            if (tq.matches(\"(\")) {\n                sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n            } else if (tq.matches(\"[\")) {\n                sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n            } else if (tq.matchesAny(Combinators)) {\n                if (sq.length() > 0) // Only break if there's existing content in the subquery\n                    break;\n                else\n                    break; // Stop processing further to prevent incorrect concatenation\n            } else {\n                sq.append(tq.consume());\n            }\n        }\n        return StringUtil.releaseBuilder(sq);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}