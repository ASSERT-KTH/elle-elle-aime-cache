{
    "generation": "/**\n * Consumes a sub-query from the query string, handling balanced parentheses and brackets.\n * \n * @return the consumed sub-query string\n */\nprivate String consumeSubQuery() {\n    StringBuilder sq = StringUtil.borrowBuilder();\n    int initialSize = tq.size(); // track initial query string size\n    while (!tq.isEmpty()) {\n        if (tq.matches(\"(\"))\n            sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n        else if (tq.matches(\"[\"))\n            sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n        else if (tq.matchesAny(Combinators))\n            if (sq.length() > 0)\n                break;\n            else\n                tq.consume();\n        else\n            sq.append(tq.consume());\n        \n        // Break if we've consumed beyond the initial sub-query\n        if (initialSize - tq.size() > sq.length()) {\n            break;\n        }\n    }\n    return StringUtil.releaseBuilder(sq);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}