{
    "generation": "private String consumeSubQuery() {\n    StringBuilder sq = StringUtil.borrowBuilder();\n    while (!tq.isEmpty()) {\n        if (tq.matches(\"(\"))\n            sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n        else if (tq.matches(\"[\"))\n            sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n        else if (tq.matchesAny(Combinators)) {\n            if (sq.length() > 0) {\n                // If we've already accumulated some query and encounter a combinator, \n                // it indicates the start of a new sub-query, so break out.\n                break;\n            } else {\n                // If the sub-query is empty and we encounter a combinator, \n                // consume it to maintain correct query structure.\n                tq.consume();\n            }\n        } else if (tq.matches(\",\")) {\n            // Consume commas to correctly split sub-queries.\n            tq.consume();\n            break;\n        } else {\n            sq.append(tq.consume());\n        }\n    }\n    return StringUtil.releaseBuilder(sq);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}