{
    "generation": "/**\n * Consume a sub-query (i.e., a query enclosed in parentheses or brackets), \n * handling combinators correctly to avoid premature termination.\n * \n * @return The consumed sub-query as a string.\n */\nprivate String consumeSubQuery() {\n    StringBuilder sq = StringUtil.borrowBuilder();\n    int nestingLevel = 0; // Track nesting level for balanced termination\n    char enclosure = '\\0'; // Store the enclosure character for correct balancing\n    \n    while (!tq.isEmpty()) {\n        char c = tq.peek();\n        \n        // Check for enclosure characters and update nesting level accordingly\n        if (nestingLevel == 0) {\n            if (c == '(' || c == '[') {\n                enclosure = c;\n                sq.append(c);\n                tq.consume();\n                nestingLevel++;\n            } else if (tq.matchesAny(Combinators)) {\n                if (sq.length() > 0)\n                    break;\n                else\n                    tq.consume();\n            } else {\n                sq.append(tq.consume());\n            }\n        } else { // Within an enclosure\n            if ((enclosure == '(' && c == ')') || (enclosure == '[' && c == ']')) {\n                nestingLevel--;\n                sq.append(tq.consume());\n                if (nestingLevel == 0) break; // Exit loop when fully balanced\n            } else {\n                sq.append(tq.consume());\n                if (c == '(' || c == '[') nestingLevel++;\n                if (c == ')' || c == ']') nestingLevel--;\n            }\n        }\n    }\n    if (nestingLevel!= 0) {\n        // Handle potential error case: unbalanced enclosure\n        throw new RuntimeException(\"Unbalanced enclosure in sub-query\");\n    }\n    return StringUtil.releaseBuilder(sq);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}