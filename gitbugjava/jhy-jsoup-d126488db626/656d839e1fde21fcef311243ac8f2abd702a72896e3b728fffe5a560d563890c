{
    "generation": "/**\n * Consume a sub-query from the token queue, handling nested queries and combinators.\n * \n * @return the consumed sub-query as a string\n */\nprivate String consumeSubQuery() {\n    StringBuilder sq = StringUtil.borrowBuilder();\n    int initialSize = tq.size(); // track initial queue size\n    boolean combinatorEncountered = false; // flag to track if a combinator is encountered at the start\n\n    while (!tq.isEmpty() && sq.length() > 0 || initialSize!= tq.size()) {\n        if (tq.matches(\"(\"))\n            sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n        else if (tq.matches(\"[\"))\n            sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n        else if (tq.matchesAny(Combinators)) {\n            if (sq.length() > 0) {\n                if (!combinatorEncountered) { // only break if not the first token\n                    break;\n                }\n            } else {\n                combinatorEncountered = true; // mark as encountered if at the start\n                tq.consume();\n            }\n        } else\n            sq.append(tq.consume());\n    }\n    return StringUtil.releaseBuilder(sq);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}