{
    "generation": "private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {\n\n    int length = 0;\n    if (hasLength) {\n        length = buf.readUnsignedByte();\n        if (length == 0) {\n            boolean zeroedData = true;\n            for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {\n                if (buf.getByte(i) != 0) {\n                    zeroedData = false;\n                    break;\n                }\n            }\n            if (zeroedData) {\n                buf.skipBytes(Math.min(buf.readableBytes(), 45));\n            }\n            return false;\n        }\n    }\n\n    if (buf.readableBytes() < 2) {\n        return false;\n    }\n    int mcc = buf.readUnsignedShort();\n\n    int mncSize;\n    if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {\n        mncSize = 2;\n    } else {\n        mncSize = 1;\n    }\n\n    int lacSize = (type == MSG_LBS_ALARM) ? 4 : 2;\n\n    int cidSize;\n    if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n        cidSize = 8;\n    } else if (type == MSG_GPS_LBS_6) {\n        cidSize = 4;\n    } else {\n        cidSize = 3;\n    }\n\n    int totalRequiredBytes = mncSize + lacSize + cidSize;\n\n    if (buf.readableBytes() < totalRequiredBytes) {\n        return false;\n    }\n\n    int mnc;\n    if (mncSize == 2) {\n        mnc = buf.readUnsignedShort();\n    } else {\n        mnc = buf.readUnsignedByte();\n    }\n\n    int lac;\n    if (lacSize == 4) {\n        lac = buf.readInt();\n    } else {\n        lac = buf.readUnsignedShort();\n    }\n\n    long cid;\n    if (cidSize == 8) {\n        cid = buf.readLong();\n    } else if (cidSize == 4) {\n        cid = buf.readUnsignedInt();\n    } else {\n        cid = buf.readUnsignedMedium();\n    }\n\n    position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));\n\n    int skip = length - (2 + mncSize + lacSize + cidSize);\n    if (skip > 0) {\n        buf.skipBytes(skip);\n    } else if (skip < 0) {\n        return false;\n    }\n\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}