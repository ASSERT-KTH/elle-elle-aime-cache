{
    "generation": "private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n        deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    buf.readUnsignedShort(); // length\n    int type = buf.readUnsignedByte();\n\n    switch (type) {\n        case MSG_STRING_INFO:\n            buf.readUnsignedInt(); // server flag\n            String data;\n            if (buf.readUnsignedByte() == 1) {\n                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.US_ASCII);\n            } else {\n                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.UTF_16BE);\n            }\n\n            Parser parser = new Parser(PATTERN_LOCATION, data);\n\n            if (parser.matches()) {\n                position.setValid(true);\n                position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n                position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n                position.setCourse(parser.nextDouble());\n                position.setSpeed(parser.nextDouble());\n                position.setTime(parser.nextDateTime(Parser.DateTimeFormat.YMD_HMS));\n            } else {\n                getLastLocation(position, null);\n                position.set(Position.KEY_RESULT, data);\n            }\n\n            return position;\n\n        case MSG_INFO:\n            int subType = buf.readUnsignedByte();\n            getLastLocation(position, null);\n\n            switch (subType) {\n                case 0x00:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.01);\n                    return position;\n\n                case 0x05:\n                    if (buf.readableBytes() >= 6 + 1 + 6) {\n                        DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                                .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                                .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                        position.setDeviceTime(dateBuilder.getDate());\n                    }\n\n                    int flags = buf.readUnsignedByte();\n                    position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));\n                    position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));\n                    return position;\n\n                case 0x0a:\n                    buf.skipBytes(8); // imei\n                    buf.skipBytes(8); // imsi\n                    position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll(\"f\", \"\"));\n                    return position;\n\n                case 0x0d:\n                    if (buf.getByte(buf.readerIndex()) != '!') {\n                        buf.skipBytes(6);\n                    }\n\n                    parser = new Parser(PATTERN_FUEL, buf.toString(\n                            buf.readerIndex(), buf.readableBytes() - 4 - 2, StandardCharsets.US_ASCII));\n                    if (!parser.matches()) {\n                        return null;\n                    }\n\n                    position.set(Position.PREFIX_TEMP + 1, parser.nextDouble(0));\n                    position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble(0));\n                    return position;\n\n                case 0x1b:\n                    if (Character.isLetter(buf.getUnsignedByte(buf.readerIndex()))) {\n                        String serialData = buf.readCharSequence(buf.readableBytes() - 6, StandardCharsets.US_ASCII).toString();\n                        position.set(\"serial\", serialData.trim());\n                    } else {\n                        buf.readUnsignedByte(); // header\n                        buf.readUnsignedByte(); // type\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, ByteBufUtil.hexDump(buf.readSlice(4)));\n                        buf.readUnsignedByte(); // checksum\n                        buf.readUnsignedByte(); // footer\n                    }\n                    return position;\n\n                default:\n                    return null;\n            }\n\n        case MSG_X1_PHOTO_DATA:\n            int pictureId = buf.readInt();\n            ByteBuf photo = photos.get(pictureId);\n            buf.readUnsignedInt(); // offset\n            buf.readBytes(photo, buf.readUnsignedShort());\n\n            if (photo.writableBytes() > 0) {\n                sendPhotoRequest(channel, pictureId);\n            } else {\n                position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                photos.remove(pictureId).release();\n            }\n\n            return position;\n\n        case MSG_AZ735_GPS:\n        case MSG_AZ735_ALARM:\n            if (!decodeGps(position, buf, true, deviceSession.get(DeviceSession.KEY_TIMEZONE))) {\n                getLastLocation(position, position.getDeviceTime());\n            }\n\n            if (decodeLbs(position, buf, type, true)) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n\n            buf.skipBytes(buf.readUnsignedByte()); // additional cell towers\n            buf.skipBytes(buf.readUnsignedByte()); // wifi access points\n\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_STATUS, status);\n\n            if (type == MSG_AZ735_ALARM) {\n                switch (status) {\n                    case 0xA0:\n                        position.set(Position.KEY_ARMED, true);\n                        break;\n                    case 0xA1:\n                        position.set(Position.KEY_ARMED, false);\n                        break;\n                    case 0xA2:\n                    case 0xA3:\n                        position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                        break;\n                    case 0xA4:\n                        position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                        break;\n                    case 0xA5:\n                        position.set(Position.KEY_ALARM, Position.ALARM_DOOR);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            buf.skipBytes(buf.readUnsignedByte()); // reserved extension\n            sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n\n        case MSG_OBD:\n            DateBuilder obdDateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n\n            getLastLocation(position, obdDateBuilder.getDate());\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n\n            String obdData = buf.readCharSequence(buf.readableBytes() - 18, StandardCharsets.US_ASCII).toString();\n            for (String pair : obdData.split(\",\")) {\n                String[] values = pair.split(\"=\");\n                if (values.length >= 2) {\n                    try {\n                        int key = Integer.parseInt(values[0].substring(0, 2), 16);\n                        switch (key) {\n                            case 0x28:\n                                position.set(Position.KEY_ODOMETER, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 0x2B:\n                                position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 0x2D:\n                                position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 0x35:\n                                position.set(Position.KEY_OBD_SPEED, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 0x36:\n                                position.set(Position.KEY_RPM, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 0x47:\n                                position.set(Position.KEY_FUEL_USED, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 0x49:\n                                position.set(Position.KEY_HOURS, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 0x4A:\n                                position.set(Position.KEY_VIN, values[1]);\n                                break;\n                            default:\n                                break;\n                        }\n                    } catch (NumberFormatException e) {\n                        // Skip invalid data\n                    }\n                }\n            }\n            return position;\n\n        // Add more case handlers for other message types as needed ...\n\n        default:\n            return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}