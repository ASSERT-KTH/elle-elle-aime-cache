{
    "generation": "private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n    if (deviceSession == null) {\n        return null;\n    }\n\n    if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n        deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    buf.readUnsignedShort(); // length\n    int type = buf.readUnsignedByte();\n\n    if (type == MSG_STRING_INFO) {\n\n        buf.readUnsignedInt(); // server flag\n        String data;\n        if (buf.readUnsignedByte() == 1) {\n            data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.US_ASCII);\n        } else {\n            data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.UTF_16BE);\n        }\n\n        Parser parser = new Parser(PATTERN_LOCATION, data);\n\n        if (parser.matches()) {\n            position.setValid(true);\n            position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n            position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n            position.setCourse(parser.nextDouble());\n            position.setSpeed(parser.nextDouble());\n            position.setTime(parser.nextDateTime(Parser.DateTimeFormat.YMD_HMS));\n        } else {\n            getLastLocation(position, null);\n            position.set(Position.KEY_RESULT, data);\n        }\n\n        return position;\n\n    } else if (type == MSG_INFO) {\n\n        int subType = buf.readUnsignedByte();\n\n        getLastLocation(position, null);\n\n        if (subType == 0x00) {\n\n            position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.01);\n            return position;\n\n        } else if (subType == 0x05) {\n\n            if (buf.readableBytes() >= 6 + 1 + 6) {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                position.setDeviceTime(dateBuilder.getDate());\n            }\n\n            if (buf.readableBytes() > 0) {\n                int flags = buf.readUnsignedByte();\n                position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));\n                position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));\n            }\n            return position;\n\n        } else if (subType == 0x0a) {\n\n            buf.skipBytes(8); // imei\n            buf.skipBytes(8); // imsi\n            if (buf.readableBytes() >= 10) {\n                position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll(\"f\", \"\"));\n            }\n            return position;\n\n        } else if (subType == 0x0d) {\n\n            if (buf.getByte(buf.readerIndex()) != '!') {\n                buf.skipBytes(6);\n            } else {\n                buf.skipBytes(1); // skip '!' character if it exists\n            }\n\n            int length = buf.readableBytes() - 4 - 2;\n            if (length > 0) {\n                Parser parser = new Parser(PATTERN_FUEL, buf.toString(0, length, StandardCharsets.US_ASCII));\n                if (parser.matches()) {\n                    position.set(Position.PREFIX_TEMP + 1, parser.nextDouble(0));\n                    position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble(0));\n                    return position;\n                }\n            }\n\n            return null;\n\n        } else if (subType == 0x1b) {\n\n            if (buf.readableBytes() > 0 && Character.isLetter(buf.getUnsignedByte(buf.readerIndex()))) {\n                String data = buf.readCharSequence(buf.readableBytes() - 6, StandardCharsets.US_ASCII).toString();\n                position.set(\"serial\", data.trim());\n            } else if (buf.readableBytes() > 5) {\n                buf.readUnsignedByte(); // header\n                buf.readUnsignedByte(); // type\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, ByteBufUtil.hexDump(buf.readSlice(4)));\n                buf.readUnsignedByte(); // checksum\n                buf.readUnsignedByte(); // footer\n            }\n            return position;\n\n        }\n\n    } else if (type == MSG_X1_PHOTO_DATA) {\n\n        int pictureId = buf.readInt();\n\n        ByteBuf photo = photos.get(pictureId);\n\n        buf.readUnsignedInt(); // offset\n\n        if (buf.readableBytes() > 2 && photo != null) {\n            buf.readBytes(photo, buf.readUnsignedShort());\n        }\n\n        if (photo != null && photo.writableBytes() > 0) {\n            sendPhotoRequest(channel, pictureId);\n        } else {\n            if (photo != null) {\n                position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                photos.remove(pictureId).release();\n            }\n        }\n\n    } else if (type == MSG_AZ735_GPS || type == MSG_AZ735_ALARM) {\n\n        if (!decodeGps(position, buf, true, deviceSession.get(DeviceSession.KEY_TIMEZONE))) {\n            getLastLocation(position, position.getDeviceTime());\n        }\n\n        if (decodeLbs(position, buf, type, true)) {\n            if (buf.readableBytes() > 0) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n        }\n\n        buf.skipBytes(buf.readableBytes() >= 1 ? buf.readUnsignedByte() : 0); // additional cell towers\n        buf.skipBytes(buf.readableBytes() >= 1 ? buf.readUnsignedByte() : 0); // wifi access point\n\n        if (buf.readableBytes() > 0) {\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_STATUS, status);\n\n            if (type == MSG_AZ735_ALARM) {\n                switch (status) {\n                    case 0xA0:\n                        position.set(Position.KEY_ARMED, true);\n                        break;\n                    case 0xA1:\n                        position.set(Position.KEY_ARMED, false);\n                        break;\n                    case 0xA2:\n                    case 0xA3:\n                        position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                        break;\n                    case 0xA4:\n                        position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                        break;\n                    case 0xA5:\n                        position.set(Position.KEY_ALARM, Position.ALARM_DOOR);\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n\n        if (buf.readableBytes() > 0) {\n            buf.skipBytes(buf.readUnsignedByte()); // reserved extension\n        }\n\n        sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);\n\n        return position;\n\n    } else if (type == MSG_OBD) {\n\n        DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n\n        getLastLocation(position, dateBuilder.getDate());\n\n        if (buf.readableBytes() > 0) {\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n        }\n\n        int remainingBytes = buf.readableBytes() - 18;\n        String data = remainingBytes > 0 ? buf.readCharSequence(remainingBytes, StandardCharsets.US_ASCII).toString() : null;\n        if (data != null) {\n            for (String pair : data.split(\",\")) {\n                String[] values = pair.split(\"=\");\n                if (values.length >= 2) {\n                    try {\n                        switch (Integer.parseInt(values[0].substring(0, 2), 16)) {\n                            case 40:\n                                position.set(Position.KEY_ODOMETER, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 43:\n                                position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 45:\n                                position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 53:\n                                position.set(Position.KEY_OBD_SPEED, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 54:\n                                position.set(Position.KEY_RPM, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 71:\n                                position.set(Position.KEY_FUEL_USED, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 73:\n                                position.set(Position.KEY_HOURS, Integer.parseInt(values[1], 16) * 0.01);\n                                break;\n                            case 74:\n                                position.set(Position.KEY_VIN, values[1]);\n                                break;\n                            default:\n                                break;\n                        }\n                    } catch (NumberFormatException e) {\n                        // Handle potential parse exception\n                    }\n                }\n            }\n        }\n\n        return position;\n\n    } else if (type == MSG_GPS_MODULAR) {\n\n        while (buf.readableBytes() > 6) {\n            int moduleType = buf.readUnsignedShort();\n            int moduleLength = buf.readUnsignedShort();\n\n            switch (moduleType) {\n                case 0x03:\n\t\t\t\t\tif (buf.readableBytes() >= 10) {\n\t\t\t\t\t\tposition.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)));\n\t\t\t\t\t}\n                    break;\n                case 0x09:\n\t\t\t\t\tif (buf.readableBytes() > 0) {\n\t\t\t\t\t\tposition.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n\t\t\t\t\t}\n                    break;\n                case 0x0a:\n\t\t\t\t\tif (buf.readableBytes() > 0) {\n\t\t\t\t\t\tposition.set(Position.KEY_SATELLITES_VISIBLE, buf.readUnsignedByte());\n\t\t\t\t\t}\n                    break;\n                case 0x11:\n\t\t\t\t\tif (buf.readableBytes() >= 9) {\n\t\t\t\t\t\tCellTower cellTower = CellTower.from(\n\t\t\t\t\t\t\t\tbuf.readUnsignedShort(),\n\t\t\t\t\t\t\t\tbuf.readUnsignedShort(),\n\t\t\t\t\t\t\t\tbuf.readUnsignedShort(),\n\t\t\t\t\t\t\t\tbuf.readUnsignedMedium(),\n\t\t\t\t\t\t\t\tbuf.readUnsignedByte());\n\t\t\t\t\t\tif (cellTower.getCellId() > 0) {\n\t\t\t\t\t\t\tposition.setNetwork(new Network(cellTower));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n                    break;\n                case 0x18:\n\t\t\t\t\tif (buf.readableBytes() >= 2) {\n\t\t\t\t\t\tposition.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n\t\t\t\t\t}\n                    break;\n                case 0x28:\n\t\t\t\t\tif (buf.readableBytes() > 0) {\n\t\t\t\t\t\tposition.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);\n\t\t\t\t\t}\n                    break;\n                case 0x29:\n\t\t\t\t\tif (buf.readableBytes() >= 4) {\n\t\t\t\t\t\tposition.set(Position.KEY_INDEX, buf.readUnsignedInt());\n\t\t\t\t\t}\n                    break;\n                case 0x2a:\n\t\t\t\t\tif (buf.readableBytes() > 0) {\n\t\t\t\t\t\tint input = buf.readUnsignedByte();\n\t\t\t\t\t\tposition.set(Position.KEY_DOOR, BitUtil.to(input, 4) > 0);\n\t\t\t\t\t\tposition.set(\"tamper\", BitUtil.from(input, 4) > 0);\n\t\t\t\t\t}\n                    break;\n                case 0x2b:\n\t\t\t\t\tif (buf.readableBytes() > 0) {\n\t\t\t\t\t\tint event = buf.readUnsignedByte();\n\t\t\t\t\t\tswitch (event) {\n\t\t\t\t\t\t\tcase 0x11:\n\t\t\t\t\t\t\t\tposition.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 0x12:\n\t\t\t\t\t\t\t\tposition.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 0x13:\n\t\t\t\t\t\t\t\tposition.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 0x14:\n\t\t\t\t\t\t\t\tposition.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tposition.set(Position.KEY_EVENT, event);\n\t\t\t\t\t}\n                    break;\n                case 0x2e:\n\t\t\t\t\tif (buf.readableBytes() >= 4) {\n\t\t\t\t\t\tposition.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n\t\t\t\t\t}\n                    break;\n                case 0x33:\n\t\t\t\t\tif (buf.readableBytes() >= 20) {\n\t\t\t\t\t\tposition.setTime(new Date(buf.readUnsignedInt() * 1000));\n\t\t\t\t\t\tposition.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n\t\t\t\t\t\tposition.setAltitude(buf.readShort());\n\n\t\t\t\t\t\tdouble latitude = buf.readUnsignedInt() / 60.0 / 30000.0;\n\t\t\t\t\t\tdouble longitude = buf.readUnsignedInt() / 60.0 / 30000.0;\n\t\t\t\t\t\tposition.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\n\n\t\t\t\t\t\tint flags = buf.readUnsignedShort();\n\t\t\t\t\t\tposition.setCourse(BitUtil.to(flags, 10));\n\t\t\t\t\t\tposition.setValid(BitUtil.check(flags, 12));\n\n\t\t\t\t\t\tif (!BitUtil.check(flags, 10)) {\n\t\t\t\t\t\t\tlatitude = -latitude;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (BitUtil.check(flags, 11)) {\n\t\t\t\t\t\t\tlongitude = -longitude;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tposition.setLatitude(latitude);\n\t\t\t\t\t\tposition.setLongitude(longitude);\n\t\t\t\t\t}\n                    break;\n                case 0x34:\n\t\t\t\t\tif (buf.readableBytes() > 0) {\n\t\t\t\t\t\tposition.set(Position.KEY_EVENT, buf.readUnsignedByte());\n\t\t\t\t\t\tbuf.skipBytes(buf.readableBytes() >= 4 ? 4 : 0); // time\n\t\t\t\t\t\tbuf.skipBytes(buf.readableBytes() > 0 ? buf.readUnsignedByte() : 0); // content\n\t\t\t\t\t}\n                    break;\n                default:\n\t\t\t\t\tif (buf.readableBytes() >= moduleLength) {\n\t\t\t\t\t\tbuf.skipBytes(moduleLength);\n\t\t\t\t\t}\n                    break;\n            }\n        }\n\n        if (position.getFixTime() == null) {\n            getLastLocation(position, null);\n        }\n\n        sendResponse(channel, false, MSG_GPS_MODULAR, buf.readableBytes() > 1 ? buf.readUnsignedShort() : 0, null);\n\n        return position;\n\n    } else if (type == MSG_MULTIMEDIA) {\n\n        buf.skipBytes(8); // serial number\n        long timestamp = buf.readUnsignedInt() * 1000;\n        buf.skipBytes(4 + 4 + 2 + 1 + 1 + 2); // gps\n        buf.skipBytes(2 + 2 + 2 + 2); // cell\n\n        int mediaId = buf.readInt();\n        int mediaLength = buf.readInt();\n        int mediaType = buf.readUnsignedByte();\n        int mediaFormat = buf.readUnsignedByte();\n\n        if (mediaType == 0 && mediaFormat == 0) {\n\n            buf.readUnsignedByte(); // event\n\n            ByteBuf photo;\n            if (buf.readUnsignedShort() == 0) {\n                photo = Unpooled.buffer(mediaLength);\n                ByteBuf oldPhoto = photos.put(mediaId, photo);\n                if (oldPhoto != null) {\n                    oldPhoto.release();\n                }\n            } else {\n                photo = photos.get(mediaId);\n            }\n\n            if (photo != null) {\n                buf.readBytes(photo, Math.min(buf.readableBytes() - 6, photo.writableBytes()));\n                if (!photo.isWritable()) {\n                    position = new Position(getProtocolName());\n                    position.setDeviceId(deviceSession.getDeviceId());\n                    getLastLocation(position, new Date(timestamp));\n                    position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                    photos.remove(mediaId).release();\n                }\n            }\n\n        }\n\n        sendResponse(channel, true, type, buf.readableBytes() >= 6 ? buf.getShort(buf.writerIndex() - 6) : 0, null);\n\n        return position;\n\n    } else if (type == MSG_SERIAL) {\n\n        position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n\n        if (buf.readableBytes() > 0) {\n            buf.readUnsignedByte(); // external device type code\n            int length = buf.readableBytes() - 9; // line break + checksum + index + checksum + footer\n\n            if (length <= 0) {\n                return null;\n            } else if (length < 8) {\n                position.set(\n                        Position.PREFIX_TEMP + 1,\n                        Double.parseDouble(buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString()));\n            } else {\n                buf.readUnsignedByte(); // card type\n                position.set(\n                        Position.KEY_DRIVER_UNIQUE_ID,\n                        buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString());\n            }\n        }\n\n        return position;\n\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}