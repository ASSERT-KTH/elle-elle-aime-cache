{
    "generation": "    private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedShort(); // length\n        int type = buf.readUnsignedByte();\n\n        if (type == MSG_STRING_INFO) {\n            buf.readUnsignedInt(); // server flag\n            String data;\n            if (buf.readableBytes() > 0 && buf.readUnsignedByte() == 1) {\n                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.US_ASCII);\n            } else {\n                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.UTF_16BE);\n            }\n\n            Parser parser = new Parser(PATTERN_LOCATION, data);\n\n            if (parser.matches()) {\n                position.setValid(true);\n                position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n                position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n                position.setCourse(parser.nextDouble());\n                position.setSpeed(parser.nextDouble());\n                position.setTime(parser.nextDateTime(Parser.DateTimeFormat.YMD_HMS));\n            } else {\n                getLastLocation(position, null);\n                position.set(\"result\", data);\n            }\n\n            return position;\n\n        } else if (type == MSG_INFO || type == MSG_GPS_MODULAR || type == MSG_MULTIMEDIA) {\n            if (buf.readableBytes() > 0) {\n                int subType = buf.readUnsignedByte();\n\n                getLastLocation(position, null);\n\n                if (type == MSG_INFO) {\n                    if (subType == 0x00) {\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.01);\n                    } else if (subType == 0x05) {\n                        if (buf.readableBytes() >= 6 + 1 + 6) {\n                            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                            position.setDeviceTime(dateBuilder.getDate());\n                        }\n\n                        int flags = buf.readUnsignedByte();\n                        position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));\n                        position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));\n                    } else if (subType == 0x0a) {\n                        buf.skipBytes(8); // imei\n                        buf.skipBytes(8); // imsi\n                        position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll(\"f\", \"\"));\n                    } else if (subType == 0x0d) {\n                        if (buf.getByte(buf.readerIndex()) != '!') {\n                            buf.skipBytes(6);\n                        }\n\n                        Parser parser = new Parser(PATTERN_FUEL, buf.toString(\n                                buf.readerIndex(), buf.readableBytes() - 4 - 2, StandardCharsets.US_ASCII));\n                        if (!parser.matches()) {\n                            return null;\n                        }\n\n                        position.set(Position.PREFIX_TEMP + 1, parser.nextDouble(0));\n                        position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble(0));\n                    } else if (subType == 0x1b) {\n                        if (Character.isLetter(buf.getUnsignedByte(buf.readerIndex()))) {\n                            String data = buf.readCharSequence(buf.readableBytes() - 6, StandardCharsets.US_ASCII).toString();\n                            position.set(\"serial\", data.trim());\n                        } else {\n                            buf.readUnsignedByte(); // header\n                            buf.readUnsignedByte(); // type\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, ByteBufUtil.hexDump(buf.readSlice(4)));\n                            buf.readUnsignedByte(); // checksum\n                            buf.readUnsignedByte(); // footer\n                        }\n                    }\n                } else if (type == MSG_GPS_MODULAR) {\n                    while (buf.readableBytes() > 6) {\n                        int moduleType = buf.readUnsignedShort();\n                        int moduleLength = buf.readUnsignedShort();\n\n                        switch (moduleType) {\n                            case 0x03:\n                                position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)));\n                                break;\n                            case 0x09:\n                                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                                break;\n                            case 0x0a:\n                                position.set(Position.KEY_SATELLITES_VISIBLE, buf.readUnsignedByte());\n                                break;\n                            case 0x11:\n                                CellTower cellTower = CellTower.from(\n                                        buf.readUnsignedShort(),\n                                        buf.readUnsignedShort(),\n                                        buf.readUnsignedShort(),\n                                        buf.readUnsignedMedium(),\n                                        buf.readUnsignedByte());\n                                if (cellTower.getCellId() > 0) {\n                                    position.setNetwork(new Network(cellTower));\n                                }\n                                break;\n                            case 0x18:\n                                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                                break;\n                            case 0x28:\n                                position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);\n                                break;\n                            case 0x29:\n                                position.set(Position.KEY_INDEX, buf.readUnsignedInt());\n                                break;\n                            case 0x2a:\n                                int input = buf.readUnsignedByte();\n                                position.set(Position.KEY_DOOR, BitUtil.to(input, 4) > 0);\n                                position.set(\"tamper\", BitUtil.from(input, 4) > 0);\n                                break;\n                            case 0x2b:\n                                int event = buf.readUnsignedByte();\n                                switch (event) {\n                                    case 0x11:\n                                        position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                                        break;\n                                    case 0x12:\n                                        position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n                                        break;\n                                    case 0x13:\n                                        position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);\n                                        break;\n                                    case 0x14:\n                                        position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n                                        break;\n                                    default:\n                                        break;\n                                }\n                                position.set(Position.KEY_EVENT, event);\n                                break;\n                            case 0x2e:\n                                position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                                break;\n                            case 0x33:\n                                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                                position.setAltitude(buf.readShort());\n\n                                double latitude = buf.readUnsignedInt() / 60.0 / 30000.0;\n                                double longitude = buf.readUnsignedInt() / 60.0 / 30000.0;\n                                position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\n\n                                int flags = buf.readUnsignedShort();\n                                position.setCourse(BitUtil.to(flags, 10));\n                                position.setValid(BitUtil.check(flags, 12));\n\n                                if (!BitUtil.check(flags, 10)) {\n                                    latitude = -latitude;\n                                }\n                                if (BitUtil.check(flags, 11)) {\n                                    longitude = -longitude;\n                                }\n\n                                position.setLatitude(latitude);\n                                position.setLongitude(longitude);\n                                break;\n                            case 0x34:\n                                position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                                buf.readUnsignedIntLE(); // time\n                                buf.skipBytes(buf.readUnsignedByte()); // content\n                                break;\n                            default:\n                                buf.skipBytes(moduleLength);\n                                break;\n                        }\n                    }\n\n                    if (position.getFixTime() == null) {\n                        getLastLocation(position, null);\n                    }\n\n                    sendResponse(channel, false, MSG_GPS_MODULAR, buf.readUnsignedShort(), null);\n                } else if (type == MSG_MULTIMEDIA) {\n                    buf.skipBytes(8); // serial number\n                    long timestamp = buf.readUnsignedInt() * 1000;\n                    buf.skipBytes(4 + 4 + 2 + 1 + 1 + 2); // gps\n                    buf.skipBytes(2 + 2 + 2 + 2); // cell\n\n                    int mediaId = buf.readInt();\n                    int mediaLength = buf.readInt();\n                    int mediaType = buf.readUnsignedByte();\n                    int mediaFormat = buf.readUnsignedByte();\n\n                    if (mediaType == 0 && mediaFormat == 0) {\n                        buf.readUnsignedByte(); // event\n\n                        ByteBuf photo;\n                        if (buf.readUnsignedShort() == 0) {\n                            photo = Unpooled.buffer(mediaLength);\n                            if (photos.containsKey(mediaId)) {\n                                photos.remove(mediaId).release();\n                            }\n                            photos.put(mediaId, photo);\n                        } else {\n                            photo = photos.get(mediaId);\n                        }\n\n                        if (photo != null) {\n                            buf.readBytes(photo, buf.readableBytes() - 3 * 2);\n                            if (!photo.isWritable()) {\n                                position = new Position(getProtocolName());\n                                position.setDeviceId(deviceSession.getDeviceId());\n                                getLastLocation(position, new Date(timestamp));\n                                position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                                photos.remove(mediaId).release();\n                            }\n                        }\n                    }\n\n                    sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);\n                }\n\n                return position;\n            }\n        }\n\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}