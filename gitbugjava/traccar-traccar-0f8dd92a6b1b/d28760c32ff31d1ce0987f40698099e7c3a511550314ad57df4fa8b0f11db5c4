{
    "generation": "private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    //... (rest of the function remains the same)\n\n    if (type == MSG_GPS_MODULAR) {\n\n        while (buf.readableBytes() > 6) {\n            int moduleType = buf.readUnsignedShort();\n            int moduleLength = buf.readUnsignedShort();\n\n            switch (moduleType) {\n                //... (other cases remain the same)\n                case 0x18:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    break;\n                //... (other cases remain the same)\n            }\n        }\n\n        if (position.getFixTime() == null) {\n            getLastLocation(position, null);\n        }\n\n        sendResponse(channel, false, MSG_GPS_MODULAR, buf.readUnsignedShort(), null);\n\n        return position;\n\n    } else if (type == MSG_MULTIMEDIA) {\n\n        //... (rest of the function remains the same)\n\n    } else if (type == MSG_SERIAL) {\n\n        position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        getLastLocation(position, null);\n\n        buf.readUnsignedByte(); // external device type code\n        int length = buf.readableBytes() - 9; // line break + checksum + index + checksum + footer\n\n        if (length <= 0) {\n            return null;\n        } else if (length < 8) {\n            position.set(\n                    Position.PREFIX_TEMP + 1,\n                    Double.parseDouble(buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString()));\n        } else {\n            buf.readUnsignedByte(); // card type\n            position.set(\n                    Position.KEY_DRIVER_UNIQUE_ID,\n                    buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString());\n        }\n\n        return position;\n\n    }\n\n    //... (rest of the function remains the same)\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}