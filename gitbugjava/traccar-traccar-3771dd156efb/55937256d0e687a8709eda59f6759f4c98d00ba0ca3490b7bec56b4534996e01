{
    "generation": "private Position decodePosition(DeviceSession deviceSession, String data) {\n\n    Parser parser = new Parser(PATTERN_POSITION, data);\n    if (!parser.matches()) {\n        return null;\n    }\n\n    Position position = new Position(getProtocolName());\n    position.setDeviceId(deviceSession.getDeviceId());\n\n    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n\n    position.setValid(parser.next().equals(\"A\"));\n    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n    position.setCourse(parser.nextDouble(0));\n    position.setAltitude(parser.nextDouble(0));\n\n    position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n    position.set(Position.KEY_RSSI, parser.nextInt(0));\n    position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n\n    position.set(Position.KEY_STEPS, parser.nextInt(0));\n\n    int status = parser.nextHexInt(0);\n    position.set(Position.KEY_ALARM, decodeAlarm(status));\n    if (BitUtil.check(status, 4)) {\n        position.set(Position.KEY_MOTION, true);\n    }\n\n    String[] values = parser.next().split(\",\");\n    int index = 0;\n\n    Network network = new Network();\n\n    int cellCount = parseInteger(values[index++], 0);\n    if (cellCount > 0) {\n        index += 1; // timing advance\n        int mcc = !values[index].isEmpty() ? parseInteger(values[index++], 0) : 0;\n        int mnc = !values[index].isEmpty() ? parseInteger(values[index++], 0) : 0;\n\n        for (int i = 0; i < cellCount; i++) {\n            int lac = parseInteger(values[index++], 0);\n            int cid = parseInteger(values[index++], 0);\n            String rssi = values[index++];\n            if (!rssi.isEmpty()) {\n                int rssiValue = parseInteger(rssi, 0);\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssiValue));\n            } else {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n            }\n        }\n    }\n\n    if (index < values.length && !values[index].isEmpty()) {\n        int wifiCount = parseInteger(values[index++], 0);\n\n        for (int i = 0; i < wifiCount; i++) {\n            index += 1; // wifi name\n            String macAddress = values[index++];\n            String rssi = values[index++];\n            if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                int rssiValue = parseInteger(rssi, 0);\n                network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, rssiValue));\n            }\n        }\n    }\n\n    if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n        position.setNetwork(network);\n    }\n\n    return position;\n}\n\nprivate int parseInteger(String value, int defaultValue) {\n    if (\"FFFF\".equals(value)) {\n        return defaultValue;\n    }\n    try {\n        return Integer.parseInt(value);\n    } catch (NumberFormatException e) {\n        return defaultValue;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}