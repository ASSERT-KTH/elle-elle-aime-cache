{
    "generation": "@Override\nprotected String doFormat(final String code, final LineEnding ending) throws IOException {\n    final var source = new InputSource(new StringReader(code));\n    final var parser = new CSSOMParser(new SACParserCSS3());\n    final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n    var formattedCode = sheet.getCssText(this.formatter);\n\n    // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n    formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n    // Preserve original line endings\n    if (ending == LineEnding.CRLF) {\n        formattedCode = formattedCode.replace(\"\\n\", \"\\r\\n\");\n    }\n\n    // Preserve whitespace at the beginning and end of the file\n    formattedCode = preserveOuterWhitespace(code, formattedCode);\n\n    if (code.equals(formattedCode)) {\n        return null;\n    }\n    return formattedCode;\n}\n\nprivate String preserveOuterWhitespace(String original, String formatted) {\n    String prefix = \"\";\n    String suffix = \"\";\n\n    // Preserve leading whitespace\n    int startIndex = 0;\n    while (startIndex < original.length() && Character.isWhitespace(original.charAt(startIndex))) {\n        prefix += original.charAt(startIndex);\n        startIndex++;\n    }\n\n    // Preserve trailing whitespace\n    int endIndex = original.length() - 1;\n    while (endIndex >= 0 && Character.isWhitespace(original.charAt(endIndex))) {\n        suffix = original.charAt(endIndex) + suffix;\n        endIndex--;\n    }\n\n    return prefix + formatted.trim() + suffix;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}