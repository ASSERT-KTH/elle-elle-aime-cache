{
    "generation": "@Override\nprotected String doFormat(final String code, final LineEnding ending) throws IOException {\n    final var source = new InputSource(new StringReader(code));\n    final var parser = new CSSOMParser(new SACParserCSS3());\n    final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n    var formattedCode = sheet.getCssText(this.formatter);\n\n    // Patch converted 'tab' back to '\\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.\n    formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n\n    // Ensure consistent line endings\n    formattedCode = formattedCode.replace(\"\\r\\n\", \"\\n\").replace(\"\\r\", \"\\n\");\n    if (ending == LineEnding.CRLF) {\n        formattedCode = formattedCode.replace(\"\\n\", \"\\r\\n\");\n    }\n\n    // Trim trailing whitespace from each line\n    formattedCode = Arrays.stream(formattedCode.split(\"\\n\"))\n            .map(String::trim)\n            .collect(Collectors.joining(\"\\n\"));\n\n    // Remove empty lines\n    formattedCode = formattedCode.replaceAll(\"(?m)^\\\\s*$\\n\", \"\");\n\n    // Ensure a single newline at the end of the file\n    formattedCode = formattedCode.trim() + ending.getChars();\n\n    if (code.equals(formattedCode)) {\n        return null;\n    }\n    return formattedCode;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}