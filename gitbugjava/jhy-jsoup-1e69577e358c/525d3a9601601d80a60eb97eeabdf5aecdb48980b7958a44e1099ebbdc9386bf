{
    "generation": "URL build() {\n    try {\n        // use the URI class to encode non-ascii in path\n        URI uri = new URI(\n            u.getProtocol(),\n            u.getUserInfo(),\n            IDN.toASCII(decodePart(u.getHost())), // puny-code\n            u.getPort(),\n            decodePart(u.getPath()),\n            null, null // query and fragment appended later so as not to encode\n        );\n\n        String normUrl = uri.toASCIIString();\n        if (q!= null || u.getRef()!= null) {\n            StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n            if (q!= null) {\n                sb.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n            }\n            if (u.getRef()!= null) {\n                sb.append('#');\n                appendToAscii(u.getRef(), false, sb);\n            }\n            normUrl = StringUtil.releaseBuilder(sb);\n        }\n        // decode the URL path before creating a new URL object\n        URL url = new URL(normUrl);\n        String path = url.getPath();\n        // re-encode path segments that were double-decoded\n        String[] pathSegments = path.split(\"/\");\n        StringBuilder sb = new StringBuilder();\n        for (String segment : pathSegments) {\n            if (segment.contains(\"%\")) {\n                sb.append(URLEncoder.encode(segment, StandardCharsets.UTF_8.toString())).append(\"/\");\n            } else {\n                sb.append(segment).append(\"/\");\n            }\n        }\n        if (sb.length() > 0) {\n            sb.deleteCharAt(sb.length() - 1); // remove trailing /\n        }\n        url = new URL(url.getProtocol(), url.getHost(), url.getPort(), url.getFile().replaceAll(url.getPath(), sb.toString()));\n        u = url;\n        return u;\n    } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n        // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n        // the remote end will be able to handle it, so in prod we just pass the original URL.\n        // The UnsupportedEncodingException would never happen as always UTF8\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}