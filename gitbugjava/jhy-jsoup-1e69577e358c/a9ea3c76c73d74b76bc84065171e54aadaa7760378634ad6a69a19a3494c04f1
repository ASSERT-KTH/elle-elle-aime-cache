{
    "generation": "    URL build() {\n        try {\n            // use the URI class to encode non-ascii in path\n            String protocol = u.getProtocol();\n            String userInfo = u.getUserInfo();\n            String host = IDN.toASCII(decodePart(u.getHost())); // puny-code\n            int port = u.getPort();\n            String path = u.getPath(); // Don't decode the path\n            String query = null; // query and fragment appended later so as not to encode\n            String ref = null;\n\n            URI uri = new URI(protocol, userInfo, host, port, path, query, ref);\n\n            String normUrl = uri.toASCIIString();\n            if (q != null || u.getRef() != null) {\n                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n                if (q != null) {\n                    sb.append('?');\n                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n                }\n                if (u.getRef() != null) {\n                    sb.append('#');\n                    appendToAscii(u.getRef(), false, sb);\n                }\n                normUrl = StringUtil.releaseBuilder(sb);\n            }\n            u =  new URL(normUrl);\n            return u;\n        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n            // the remote end will be able to handle it, so in prod we just pass the original URL.\n            // The UnsupportedEncodingException would never happen as always UTF8\n            assert Validate.assertFail(e.toString());\n            return u;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}