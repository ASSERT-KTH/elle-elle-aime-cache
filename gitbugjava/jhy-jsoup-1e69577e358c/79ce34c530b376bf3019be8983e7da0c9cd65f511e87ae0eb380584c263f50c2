{
    "generation": "URL build() {\n    try {\n        // encode non-ascii in path with URLEncoder\n        String encodedPath = URLEncoder.encode(u.getPath(), StandardCharsets.UTF_8.name());\n\n        URI uri = new URI(\n            u.getProtocol(),\n            u.getUserInfo(),\n            IDN.toASCII(decodePart(u.getHost())), // puny-code\n            u.getPort(),\n            encodedPath, // use the encoded path\n            null, null // query and fragment appended later so as not to encode\n        );\n\n        String normUrl = uri.toASCIIString();\n        if (q != null || u.getRef() != null) {\n            StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n            if (q != null) {\n                sb.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n            }\n            if (u.getRef() != null) {\n                sb.append('#');\n                appendToAscii(u.getRef(), false, sb);\n            }\n            normUrl = StringUtil.releaseBuilder(sb);\n        }\n        u =  new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | URISyntaxException e) {\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}