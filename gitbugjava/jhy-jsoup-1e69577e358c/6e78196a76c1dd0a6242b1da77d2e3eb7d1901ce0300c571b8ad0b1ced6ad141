{
    "generation": "URL build() {\n    try {\n        // use the URI class to encode non-ascii in path\n        URI initialUri = new URI(u.toString());\n        URI uri = new URI(\n            initialUri.getScheme(),\n            initialUri.getUserInfo(),\n            IDN.toASCII(initialUri.getHost()), // puny-code\n            initialUri.getPort(),\n            initialUri.getRawPath(),\n            null, null // query and fragment appended later so as not to encode\n        );\n\n        String normUrl = uri.toASCIIString();\n        if (q != null || u.getRef() != null) {\n            StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n            if (q != null) {\n                sb.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n            }\n            if (u.getRef() != null) {\n                sb.append('#');\n                appendToAscii(u.getRef(), false, sb);\n            }\n            normUrl = StringUtil.releaseBuilder(sb);\n        }\n        u =  new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n        // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n        // the remote end will be able to handle it, so in prod we just pass the original URL.\n        // The UnsupportedEncodingException would never happen as always UTF8\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}