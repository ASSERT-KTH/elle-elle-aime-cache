{
    "generation": "/**\n * Builds a normalized URL, preserving encoded path segments.\n * \n * @return the normalized URL\n */\nURL build() {\n    try {\n        // Split the URL into its components\n        String protocol = u.getProtocol();\n        String userInfo = u.getUserInfo();\n        String host = IDN.toASCII(decodePart(u.getHost())); // puny-code\n        int port = u.getPort();\n        String path = u.getPath();\n        String query = u.getQuery();\n        String ref = u.getRef();\n\n        // Only decode the path if it's not already encoded (i.e., doesn't contain a '%')\n        String decodedPath = path.contains(\"%\")? path : decodePart(path);\n\n        // Re-encode the path to preserve any previously encoded segments\n        String encodedPath = encodePart(decodedPath);\n\n        // Reconstruct the URL with the re-encoded path\n        URI uri = new URI(protocol, userInfo, host, port, encodedPath, query, ref);\n\n        String normUrl = uri.toASCIIString();\n        \n        if (this.q!= null || ref!= null) {\n            StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n            if (this.q!= null) {\n                sb.append('?');\n                appendToAscii(StringUtil.releaseBuilder(this.q), true, sb);\n            }\n            if (ref!= null) {\n                sb.append('#');\n                appendToAscii(ref, false, sb);\n            }\n            normUrl = StringUtil.releaseBuilder(sb);\n        }\n        u =  new URL(normUrl);\n        return u;\n    } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n        // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n        // the remote end will be able to handle it, so in prod we just pass the original URL.\n        // The UnsupportedEncodingException would never happen as always UTF8\n        assert Validate.assertFail(e.toString());\n        return u;\n    }\n}\n\n// Assuming the following utility methods exist:\n// - `decodePart(String part)`: Decodes a URL part (e.g., path, host)\n// - `encodePart(String part)`: Encodes a URL part (e.g., path) while preserving existing '%xx' sequences\n// - `StringUtil.borrowBuilder()`: Returns a temporary `StringBuilder` instance\n// - `StringUtil.releaseBuilder(StringBuilder sb)`: Returns the string content of the builder and releases it for reuse\n// - `StringUtil.releaseBuilder(CharSequence cs)`: Returns the string content of the iterable character sequence\n// - `appendToAscii(CharSequence cs, boolean isQuery, StringBuilder sb)`: Appends the character sequence to the builder, encoding as necessary for ASCII output",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}