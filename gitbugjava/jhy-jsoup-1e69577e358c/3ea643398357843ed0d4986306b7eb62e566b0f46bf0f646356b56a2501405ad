{
    "generation": "    URL build() {\n        try {\n            // use the URI class to encode non-ascii in path\n            String host = u.getHost();\n            String protocol = u.getProtocol();\n            int port = u.getPort();\n            String path = u.getPath();\n            String userInfo = u.getUserInfo();\n            String query = u.getQuery();\n            String ref = u.getRef();\n\n\n            StringBuilder urlBuilder = new StringBuilder();\n            urlBuilder.append(protocol).append(\"://\");\n\n            if (userInfo != null) {\n                urlBuilder.append(userInfo).append('@');\n            }\n\n            if (host != null) {\n                urlBuilder.append(IDN.toASCII(host));\n            }\n            if (port != -1) {\n                urlBuilder.append(':').append(port);\n            }\n            if (path != null) {\n\n                // Keep encoded reserved characters in the path\n                urlBuilder.append(path);\n            }\n           \n            if (query != null) {\n                urlBuilder.append('?').append(query);\n            }\n            if (ref != null) {\n                urlBuilder.append('#').append(ref);\n            }\n\n\n            u = new URL(urlBuilder.toString());\n            return u;\n        } catch (MalformedURLException | UnsupportedEncodingException e) {\n            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,\n            // the remote end will be able to handle it, so in prod we just pass the original URL.\n            // The UnsupportedEncodingException would never happen as always UTF8\n            assert Validate.assertFail(e.toString());\n            return u;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}