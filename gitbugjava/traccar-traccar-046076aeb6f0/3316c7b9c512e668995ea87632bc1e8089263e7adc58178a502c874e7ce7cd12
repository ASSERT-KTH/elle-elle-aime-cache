{
    "generation": "private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    int length = buf.readUnsignedByte();\n    int dataLength = length - 5;\n    if (dataLength < 0 || buf.readableBytes() < dataLength) {\n        return null; // Guard against invalid or incomplete data\n    }\n    int type = buf.readUnsignedByte();\n\n    Position position = new Position(getProtocolName());\n    DeviceSession deviceSession = null;\n    if (type != MSG_LOGIN) {\n        deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n    }\n\n    switch (type) {\n        case MSG_LOGIN: {\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); // Skip type\n\n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n\n            if (dataLength > 10 && buf.readableBytes() >= 2) {\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    if (timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    }\n                }\n            }\n\n            if (deviceSession != null) {\n                if (buf.writerIndex() >= 6) {\n                    sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n                }\n            }\n            return null;\n        }\n        case MSG_HEARTBEAT: {\n            getLastLocation(position, null);\n\n            if (buf.readableBytes() >= 1) {\n                int status = buf.readUnsignedByte();\n                position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n                position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n                position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n            }\n\n            if (buf.readableBytes() >= 2 + 6) {\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n            if (buf.readableBytes() >= 1 + 6) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n\n            if (buf.writerIndex() >= 6) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n\n            return position;\n        }\n        case MSG_ADDRESS_REQUEST: {\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n\n            return null;\n        }\n        case MSG_TIME_REQUEST: {\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n\n            return null;\n        }\n        case MSG_X1_GPS: {\n            if (buf.readableBytes() < 4) {\n                return null; // Insufficient data\n            }\n            buf.readUnsignedInt(); // Skip data and alarm\n\n            decodeGps(position, buf, false, deviceSession != null ? deviceSession.get(DeviceSession.KEY_TIMEZONE) : null);\n\n            if (buf.readableBytes() >= 2) buf.readUnsignedShort(); // Skip terminal info\n\n            if (buf.readableBytes() >= 4) position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n\n            if (buf.readableBytes() >= 20) {\n                position.setNetwork(new Network(CellTower.from(\n                        buf.readUnsignedShort(), buf.readUnsignedByte(),\n                        buf.readUnsignedShort(), buf.readUnsignedInt())));\n\n                long driverId = buf.readUnsignedInt();\n                if (driverId > 0) {\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n                }\n\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n\n                long portInfo = buf.readUnsignedInt();\n                position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n\n                for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n                    position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n                }\n            }\n\n            return position;\n        }\n        default: {\n            if (dataLength > 0 && buf.readableBytes() >= dataLength) {\n                buf.skipBytes(dataLength);\n            }\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                if (buf.writerIndex() >= 6) {\n                    sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n                }\n            }\n            return null;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}