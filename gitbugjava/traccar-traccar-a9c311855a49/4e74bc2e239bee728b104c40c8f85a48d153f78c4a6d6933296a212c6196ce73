{
    "generation": "    @Override\n    protected Object decode(DeviceSession deviceSession, MqttPublishMessage message) throws Exception {\n\n        JsonObject json;\n        try (ByteBufferInputStream inputStream = new ByteBufferInputStream(message.payload().nioBuffer())) {\n            json = Json.createReader(inputStream).readObject();\n        }\n\n        String type = json.getString(\"rpt\");\n        switch (type) {\n            case \"hf\":\n            case \"loc\":\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                position.setValid(true);\n\n                if (json.containsKey(\"ts\")) {\n                    DateFormat dateFormat = new SimpleDateFormat(json.getString(\"ts\").indexOf('-') > 0 ? \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\" : \"yyyyMMdd'T'HHmmss.SSS'Z'\");\n                    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n                    position.setTime(dateFormat.parse(json.getString(\"ts\")));\n                }\n\n\n                JsonObject location = json.getJsonObject(\"location\");\n                position.setLatitude(location.getJsonNumber(\"lat\").doubleValue());\n                position.setLongitude(location.getJsonNumber(\"lon\").doubleValue());\n\n                if (json.containsKey(\"bear\")) {\n                    position.setCourse(json.getInt(\"bear\"));\n                }\n                if (json.containsKey(\"spd\")) {\n                    position.setSpeed(UnitsConverter.knotsFromCps(json.getInt(\"spd\")));\n                }\n\n                if (json.containsKey(\"ign\")) {\n                    position.set(Position.KEY_IGNITION, json.getString(\"ign\").equals(\"on\"));\n                }\n\n                return position;\n\n            default:\n                return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}