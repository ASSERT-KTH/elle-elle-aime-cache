{
    "generation": "@Override\nprotected Object decode(DeviceSession deviceSession, MqttPublishMessage message) throws Exception {\n\n    JsonObject json;\n    try (ByteBufferInputStream inputStream = new ByteBufferInputStream(message.payload().nioBuffer())) {\n        json = Json.createReader(inputStream).readObject();\n    }\n\n    String type = json.getString(\"rpt\");\n    switch (type) {\n        case \"hf\":\n        case \"loc\":\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            position.setValid(true);\n\n            // \u4fee\u6539\u65e5\u671f\u683c\u5f0f\u4ee5\u5339\u914d\u8f93\u5165\u5b57\u7b26\u4e32\n            DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", Locale.US);\n            position.setTime(dateFormat.parse(json.getString(\"ts\")));\n\n            JsonObject location = json.getJsonObject(\"location\");\n            position.setLatitude(location.getJsonNumber(\"lat\").doubleValue());\n            position.setLongitude(location.getJsonNumber(\"lon\").doubleValue());\n\n            position.setCourse(json.getInt(\"bear\"));\n            position.setSpeed(UnitsConverter.knotsFromCps(json.getInt(\"spd\")));\n\n            position.set(Position.KEY_IGNITION, json.getString(\"ign\").equals(\"on\"));\n\n            return position;\n\n        default:\n            return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}