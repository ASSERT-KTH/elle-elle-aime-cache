{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(values[index++].equals(\"A\"));\n            position.set(Position.KEY_SATELLITES, parseSafeInt(values[index++]));\n            position.setLatitude(parseSafeDouble(values[index].substring(1)));\n            if (values[index++).charAt(0) == 'S') {\n                position.setLatitude(-position.getLatitude());\n            }\n            position.setLongitude(parseSafeDouble(values[index].substring(1)));\n            if (values[index++].charAt(0) == 'W') {\n                position.setLongitude(-position.getLongitude());\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(parseSafeInt(values[index])));\n                index++;\n            }\n            position.setCourse(parseSafeInt(values[index++]));\n            if (index < values.length) {\n                position.setAltitude(parseSafeInt(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_HDOP, parseSafeDouble(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_VDOP, parseSafeDouble(values[index++]));\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            position.setNetwork(new Network(CellTower.from(\n                    parseSafeInt(values[index++]), parseSafeInt(values[index++]),\n                    parseSafeInt(values[index++], 16), parseSafeInt(values[index++], 16),\n                    parseSafeInt(values[index++]))));\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, parseSafeLong(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int totalSeconds = 0;\n                if (hours.length > 0 && !hours[0].isEmpty()) {\n                    totalSeconds += Integer.parseInt(hours[0]) * 3600;\n                }\n                if (hours.length > 1 && !hours[1].isEmpty()) {\n                    totalSeconds += Integer.parseInt(hours[1]) * 60;\n                }\n                if (hours.length > 2 && !hours[2].isEmpty()) {\n                    totalSeconds += Integer.parseInt(hours[2]);\n                }\n                position.set(Position.KEY_HOURS, totalSeconds * 1000);\n                index++;\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, parseSafeDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, parseSafeDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, parseSafeDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, parseSafeDouble(values[index++]));\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, parseSafeInt(values[index++], 16));\n            }\n            if (index < values.length && !values[index - 1].isEmpty()) {\n                int io = parseSafeInt(values[index - 1], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty() && !values[index + 1].isEmpty()) {\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n            } else {\n                index += 2;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventStatus\", values[index++]);\n            } else {\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                if (!values[index].isEmpty()) {\n                    int sensorIndex = parseSafeInt(values[index++]);\n                    if (index < values.length && !values[index].isEmpty()) {\n                        int dataType = parseSafeInt(values[index++]);\n                        if (dataType == 0 && index < values.length && !values[index].isEmpty()) {\n                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                        } else if (dataType == 1 && index < values.length + 2 && !values[index].isEmpty() && !values[index + 1].isEmpty()) {\n                            index += 1; // temperature sensor serial number\n                            position.set(Position.PREFIX_TEMP + sensorIndex, parseSafeDouble(values[index++]));\n                        } else {\n                            index += 2; // Skip the next two values if they are not needed\n                        }\n                    } else {\n                        index++; // Skip the next value if it's empty\n                    }\n                } else {\n                    index++; // Move to the next value if it's empty\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}\n\n// Helper methods to safely parse numeric values\nprivate int parseSafeInt(String value, int radix) {\n    return value.isEmpty() ? 0 : Integer.parseInt(value, radix);\n}\n\nprivate int parseSafeInt(String value) {\n    return value.isEmpty() ? 0 : Integer.parseInt(value);\n}\n\nprivate long parseSafeLong(String value) {\n    return value.isEmpty() ? 0L : Long.parseLong(value);\n}\n\nprivate double parseSafeDouble(String value) {\n    return value.isEmpty() ? 0.0 : Double.parseDouble(value);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}