{
    "generation": "private void decodeFragment(Position position, String fragment) {\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            if (values.length < 7) {\n                break; // Not enough values for GPS\n            }\n            position.setValid(\"A\".equals(values[index]));\n            position.set(Position.KEY_SATELLITES, parseInteger(values[index + 1]));\n            position.setLatitude(parseDouble(values[index + 2].substring(1)));\n            String hemisphere = values[index + 3];\n            if (\"S\".equals(hemisphere.charAt(0))) {\n                position.setLatitude(-position.getLatitude());\n            }\n            position.setLongitude(parseDouble(values[index + 4].substring(1)));\n            hemisphere = values[index + 5];\n            if (\"W\".equals(hemisphere.charAt(0))) {\n                position.setLongitude(-position.getLongitude());\n            }\n            String speedStr = values[index + 6];\n            if (!speedStr.isEmpty()) {\n                Integer speed = parseInteger(speedStr);\n                if (speed != null) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(speed));\n                }\n            }\n            index += 7;\n            // Additional values: course, altitude, hdop, vdop\n            if (index < values.length) {\n                position.setCourse(parseInteger(values[index++]));\n            }\n            if (index < values.length) {\n                position.setAltitude(parseInteger(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_HDOP, parseDouble(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_VDOP, parseDouble(values[index++]));\n            }\n            break;\n        case \"GSM\":\n            if (values.length < 5) {\n                break; // Not enough values for GSM\n            }\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (index + 5 <= values.length) {\n                position.setNetwork(new Network(CellTower.from(\n                        parseInteger(values[index++]),\n                        parseInteger(values[index++]),\n                        parseInteger(values[index++], 16),\n                        parseInteger(values[index++], 16),\n                        parseInteger(values[index++])\n                )));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length) {\n                position.set(Position.KEY_ODOMETER, parseLong(values[index++]));\n            }\n            if (index < values.length) {\n                String[] hours = values[index].split(\"-\");\n                int h = 0, m = 0, s = 0;\n                switch (hours.length) {\n                    case 3:\n                        s = Integer.parseInt(hours[2]);\n                        // fall through\n                    case 2:\n                        m = Integer.parseInt(hours[1]);\n                        // fall through\n                    case 1:\n                        h = Integer.parseInt(hours[0]);\n                        // fall through\n                    default:\n                        break;\n                }\n                position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);\n                index++;\n            }\n            break;\n        case \"ADC\":\n            position.set(Position.KEY_POWER, parseDouble(values[index++]));\n            if (index < values.length) {\n                position.set(Position.KEY_BATTERY, parseDouble(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.PREFIX_ADC + 1, parseDouble(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.PREFIX_ADC + 2, parseDouble(values[index++]));\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length) {\n                position.set(Position.KEY_STATUS, parseInteger(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = parseInteger(values[index], 16);\n                if (io != null) {\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n                index++;\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                int sensorIndex = parseInteger(values[index++]);\n                int dataType = parseInteger(values[index++]);\n                if (dataType == 0) {\n                    if (index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    if (index < values.length) {\n                        index += 1; // temperature sensor serial number\n                        if (index < values.length) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, parseDouble(values[index++]));\n                        }\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}\n\nprivate static Integer parseInteger(String s) {\n    try {\n        return Integer.parseInt(s);\n    } catch (NumberFormatException e) {\n        return null;\n    }\n}\n\nprivate static Double parseDouble(String s) {\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return null;\n    }\n}\n\nprivate static Long parseLong(String s) {\n    try {\n        return Long.parseLong(s);\n    } catch (NumberFormatException e) {\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}