{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            if (values.length > 0) {\n                position.setValid(values[index++].equals(\"A\"));\n                if (index < values.length) {\n                    position.set(Position.KEY_SATELLITES, parseIntSafe(values, index++));\n                }\n                if (index < values.length) {\n                    position.setLatitude(parseDoubleSafe(values[index], 1));\n                    if (values[index++].charAt(0) == 'S') {\n                        position.setLatitude(-position.getLatitude());\n                    }\n                }\n                if (index < values.length) {\n                    position.setLongitude(parseDoubleSafe(values[index], 1));\n                    if (values[index++].charAt(0) == 'W') {\n                        position.setLongitude(-position.getLongitude());\n                    }\n                }\n                if (index < values.length && !values[index].isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(parseIntSafe(values, index++)));\n                }\n                if (index < values.length) {\n                    position.setCourse(parseIntSafe(values, index++));\n                }\n                if (index < values.length) {\n                    position.setAltitude(parseIntSafe(values, index++));\n                }\n                if (index < values.length) {\n                    position.set(Position.KEY_HDOP, parseDoubleSafe(values, index++));\n                }\n                if (index < values.length) {\n                    position.set(Position.KEY_VDOP, parseDoubleSafe(values, index++));\n                }\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (index + 5 <= values.length) {\n                position.setNetwork(new Network(CellTower.from(\n                        parseIntSafe(values, index++), parseIntSafe(values, index++),\n                        parseIntSafe(values, index++, 16), parseIntSafe(values, index++, 16),\n                        parseIntSafe(values, index++))));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length) {\n                position.set(Position.KEY_ODOMETER, parseLongSafe(values, index++));\n            }\n            if (index < values.length) {\n                String[] hours = values[index].split(\"-\");\n                position.set(Position.KEY_HOURS, (parseIntSafe(hours, 0) * 3600\n                        + (hours.length > 1 ? parseIntSafe(hours, 1) * 60 : 0)\n                        + (hours.length > 2 ? parseIntSafe(hours, 2) : 0)) * 1000);\n            }\n            break;\n        case \"ADC\":\n            if (index < values.length) {\n                position.set(Position.KEY_POWER, parseDoubleSafe(values, index++));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_BATTERY, parseDoubleSafe(values, index++));\n            }\n            if (index < values.length) {\n                position.set(Position.PREFIX_ADC + 1, parseDoubleSafe(values, index++));\n            }\n            if (index < values.length) {\n                position.set(Position.PREFIX_ADC + 2, parseDoubleSafe(values, index++));\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length) {\n                position.set(Position.KEY_STATUS, parseIntSafe(values, index++, 16));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = parseIntSafe(values, index++, 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            if (index + 2 <= values.length) {\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                int sensorIndex = parseIntSafe(values, index++);\n                int dataType = parseIntSafe(values, index++);\n                if (dataType == 0) {\n                    if (index < values.length) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    }\n                } else if (dataType == 1) {\n                    index += 1; // temperature sensor serial number\n                    if (index < values.length) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, parseDoubleSafe(values, index++));\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}\n\nprivate int parseIntSafe(String[] values, int index) {\n    return parseIntSafe(values, index, 10);\n}\n\nprivate int parseIntSafe(String[] values, int index, int radix) {\n    try {\n        return Integer.parseInt(values[index], radix);\n    } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {\n        return 0; // or another appropriate default value\n    }\n}\n\nprivate long parseLongSafe(String[] values, int index) {\n    try {\n        return Long.parseLong(values[index]);\n    } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {\n        return 0L; // or another appropriate default value\n    }\n}\n\nprivate double parseDoubleSafe(String[] values, int index) {\n    return parseDoubleSafe(values, index, 0);\n}\n\nprivate double parseDoubleSafe(String[] values, int index, int substringStart) {\n    try {\n        return Double.parseDouble(values[index].substring(substringStart));\n    } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {\n        return 0.0; // or another appropriate default value\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}