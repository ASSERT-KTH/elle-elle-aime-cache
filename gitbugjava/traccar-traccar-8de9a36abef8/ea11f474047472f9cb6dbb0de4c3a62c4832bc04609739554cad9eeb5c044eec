{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(values.length > index && \"A\".equals(values[index++]));\n            position.set(Position.KEY_SATELLITES, parseInteger(values, index++));\n            position.setLatitude(parseDouble(values, index++, 0.0));\n            if (values.length > index && values[index].length() > 0 && values[index].charAt(0) == 'S') {\n                position.setLatitude(-position.getLatitude());\n            }\n            position.setLongitude(parseDouble(values, index++, 0.0));\n            if (values.length > index && values[index].length() > 0 && values[index].charAt(0) == 'W') {\n                position.setLongitude(-position.getLongitude());\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(parseInteger(values, index++)));\n            }\n            position.setCourse(parseInteger(values, index++));\n            if (index < values.length) {\n                position.setAltitude(parseInteger(values, index++));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_HDOP, parseDouble(values, index++, 0.0));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_VDOP, parseDouble(values, index++, 0.0));\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (values.length >= index + 5) {\n                position.setNetwork(new Network(CellTower.from(\n                        parseInteger(values, index++),\n                        parseInteger(values, index++),\n                        parseInteger(values, index++, 16),\n                        parseInteger(values, index++, 16),\n                        parseInteger(values, index++))\n                ));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, parseLong(values, index++));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                long hoursValue = 0;\n                if (hours.length > 0) {\n                    hoursValue += Integer.parseInt(hours[0]) * 3600;\n                }\n                if (hours.length > 1) {\n                    hoursValue += Integer.parseInt(hours[1]) * 60;\n                }\n                if (hours.length > 2) {\n                    hoursValue += Integer.parseInt(hours[2]);\n                }\n                position.set(Position.KEY_HOURS, hoursValue * 1000);\n            }\n            break;\n        case \"ADC\":\n            position.set(Position.KEY_POWER, parseDouble(values, index++, 0.0));\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, parseDouble(values, index++));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, parseDouble(values, index++));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, parseDouble(values, index++));\n            }\n            break;\n        case \"DTT\":\n            position.set(Position.KEY_STATUS, parseInteger(values, index++));\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = parseInteger(values, index++, 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            position.set(Position.KEY_GEOFENCE, values.length > index ? values[index++] : \"\");\n            position.set(\"packetType\", values.length > index ? values[index++] : \"\");\n            break;\n        case \"ETD\":\n            position.set(\"eventData\", values.length > index ? values[index++] : \"\");\n            break;\n        case \"OBD\":\n            position.set(\"obd\", values.length > index ? values[index++] : \"\");\n            break;\n        case \"TAG\":\n            position.set(\"tagData\", values.length > index ? values[index++] : \"\");\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                int sensorIndex = parseInteger(values, index++);\n                int dataType = parseInteger(values, index++);\n                if (dataType == 0) {\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values.length > index ? values[index++] : \"\");\n                } else if (dataType == 1) {\n                    index += 1; // temperature sensor serial number\n                    position.set(Position.PREFIX_TEMP + sensorIndex, parseDouble(values, index++, 0.0));\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}\n\n// Helper methods to parse values with default checks\nprivate static int parseInteger(String[] values, int index) {\n    return parseInteger(values, index, 10);\n}\n\nprivate static int parseInteger(String[] values, int index, int radix) {\n    if (index < values.length && !values[index].isEmpty()) {\n        return Integer.parseInt(values[index], radix);\n    }\n    return 0;\n}\n\nprivate static double parseDouble(String[] values, int index, double defaultValue) {\n    if (index < values.length && !values[index].isEmpty()) {\n        return Double.parseDouble(values[index]);\n    }\n    return defaultValue;\n}\n\nprivate static long parseLong(String[] values, int index) {\n    if (index < values.length && !values[index].isEmpty()) {\n        return Long.parseLong(values[index]);\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}