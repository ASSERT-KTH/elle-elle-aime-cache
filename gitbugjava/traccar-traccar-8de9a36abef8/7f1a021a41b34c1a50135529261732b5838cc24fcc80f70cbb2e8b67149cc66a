{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(\"A\".equals(values[index++]));\n            if (!values[index].isEmpty()) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            } else {\n                index++; // Skip empty satellites value\n            }\n            if (!values[index].isEmpty() && values[index].length() > 1 && \"NSEW\".indexOf(values[index].charAt(0)) != -1) {\n                position.setLatitude(parseLatitude(values[index++]));\n            } else {\n                index++; // Skip empty or invalid latitude\n            }\n            if (!values[index].isEmpty() && values[index].length() > 1 && \"NSEW\".indexOf(values[index].charAt(0)) != -1) {\n                position.setLongitude(parseLongitude(values[index++]));\n            } else {\n                index++; // Skip empty or invalid longitude\n            }\n            if (!values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index++])));\n            } else {\n                index++; // Skip empty speed\n            }\n            if (!values[index].isEmpty()) {\n                position.setCourse(Integer.parseInt(values[index++]));\n            } else {\n                index++; // Skip empty course\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setAltitude(Integer.parseInt(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (index < values.length && !values[index].isEmpty()) {\n                int mcc = Integer.parseInt(values[index++]);\n                int mnc = Integer.parseInt(values[index++]);\n                int lac = Integer.parseInt(values[index++], 16);\n                int cellId = Integer.parseInt(values[index++], 16);\n                int age = Integer.parseInt(values[index++]);\n                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cellId, age)));\n            } else {\n                // Skip setting network if values are missing or empty\n                while (index < values.length && values[index].isEmpty()) {\n                    index++;\n                }\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n            } else {\n                index++; // Skip empty odometer\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                position.set(Position.KEY_HOURS, calculateHours(hours));\n            } else {\n                index++; // Skip empty hours\n            }\n            break;\n        case \"ADC\":\n            if (!values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            } else {\n                index++; // Skip empty power\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            } else {\n                index++; // Skip empty battery\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            } else {\n                index++; // Skip empty ADC1\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            } else {\n                index++; // Skip empty ADC2\n            }\n            break;\n        case \"DTT\":\n            if (!values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n            } else {\n                index++; // Skip empty status\n            }\n            if (!values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index++], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            } else {\n                index++; // Skip empty IO status\n            }\n            position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n            position.set(\"eventStatus\", values[index++]);\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            position.set(\"eventData\", values[index++]);\n            break;\n        case \"OBD\":\n            position.set(\"obd\", values[index++]);\n            break;\n        case \"TAG\":\n            position.set(\"tagData\", values[index++]);\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                if (values[index].isEmpty()) {\n                    index++; // Skip empty sensor index\n                    continue;\n                }\n                int sensorIndex = Integer.parseInt(values[index++]);\n                int dataType = Integer.parseInt(values[index++]);\n                if (dataType == 0) {\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                } else if (dataType == 1) {\n                    index += 1; // temperature sensor serial number\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                    } else {\n                        index++; // Skip empty temperature value\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}\n\n// Helper methods\nprivate double parseLatitude(String value) {\n    char hemisphere = value.charAt(0);\n    double lat = Double.parseDouble(value.substring(1));\n    return hemisphere == 'S' ? -lat : lat;\n}\n\nprivate double parseLongitude(String value) {\n    char hemisphere = value.charAt(0);\n    double lon = Double.parseDouble(value.substring(1));\n    return hemisphere == 'W' ? -lon : lon;\n}\n\nprivate long calculateHours(String[] hours) {\n    int h = Integer.parseInt(hours[0]);\n    int m = hours.length > 1 ? Integer.parseInt(hours[1]) : 0;\n    int s = hours.length > 2 ? Integer.parseInt(hours[2]) : 0;\n    return (h * 3600 + m * 60 + s) * 1000;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}