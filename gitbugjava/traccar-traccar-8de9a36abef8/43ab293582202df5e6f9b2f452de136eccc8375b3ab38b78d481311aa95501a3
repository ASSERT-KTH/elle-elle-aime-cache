{
    "generation": "private void decodeFragment(Position position, String fragment) {\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (dataIndex == -1 || dataIndex == fragment.length() - 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(values.length > 0 && values[index++].equals(\"A\"));\n            position.set(Position.KEY_SATELLITES, values.length > index ? Integer.parseInt(values[index++]) : 0);\n            position.setLatitude(values.length > index ? Double.parseDouble(values[index].substring(1)) : 0.0);\n            if (values.length > index && values[index++].charAt(0) == 'S') {\n                position.setLatitude(-position.getLatitude());\n            }\n            position.setLongitude(values.length > index ? Double.parseDouble(values[index].substring(1)) : 0.0);\n            if (values.length > index && values[index++].charAt(0) == 'W') {\n                position.setLongitude(-position.getLongitude());\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index++])));\n            }\n            position.setCourse(values.length > index ? Integer.parseInt(values[index++]) : 0);\n            if (values.length > index) {\n                position.setAltitude(Integer.parseInt(values[index++]));\n            }\n            if (values.length > index) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n            }\n            if (values.length > index) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"GSM\":\n            if (values.length > 0) {\n                index += 1; // registration status\n            }\n            if (values.length > 1) {\n                index += 1; // signal strength\n            }\n            if (values.length > 5) {\n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++]))));\n            }\n            break;\n        case \"COT\":\n            if (values.length > index) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n            }\n            if (values.length > index) {\n                String[] hours = values[index].split(\"-\");\n                int totalSeconds = 0;\n                for (int i = 0; i < hours.length; i++) {\n                    totalSeconds = totalSeconds * 60 + Integer.parseInt(hours[i]);\n                }\n                position.set(Position.KEY_HOURS, totalSeconds * 1000);\n                index++;\n            }\n            break;\n        case \"ADC\":\n            if (values.length > index) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            }\n            if (values.length > index) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            }\n            for (int i = 1; i <= 2 && values.length > index; i++) {\n                position.set(Position.PREFIX_ADC + i, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"DTT\":\n            if (values.length > index) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n            }\n            if (values.length > index && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index++], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                for (int i = 1; i <= 4; i++) {\n                    position.set(Position.PREFIX_IN + i, BitUtil.check(io, i));\n                }\n                for (int i = 1; i <= 3; i++) {\n                    position.set(Position.PREFIX_OUT + i, BitUtil.check(io, i + 4));\n                }\n            }\n            if (values.length > index + 1) {\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n            }\n            if (values.length > index) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (values.length > index) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (values.length > index) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (values.length > index) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (values.length > index) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (values.length > index + 1) {\n                int sensorIndex = Integer.parseInt(values[index++]);\n                int dataType = Integer.parseInt(values[index++]);\n                if (dataType == 0) {\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                } else if (dataType == 1) {\n                    index += 1; // temperature sensor serial number\n                    position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}