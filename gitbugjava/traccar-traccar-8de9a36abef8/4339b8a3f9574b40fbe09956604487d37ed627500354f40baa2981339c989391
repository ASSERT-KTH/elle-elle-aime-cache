{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(values[index++].equals(\"A\"));\n            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            position.setLatitude(Double.parseDouble(values[index].substring(1)));\n            if (values[index].charAt(0) == 'S') {\n                position.setLatitude(-position.getLatitude());\n            }\n            index++;\n            position.setLongitude(Double.parseDouble(values[index].substring(1)));\n            if (values[index].charAt(0) == 'W') {\n                position.setLongitude(-position.getLongitude());\n            }\n            index++;\n            if (!values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n            }\n            index++;\n            position.setCourse(Integer.parseInt(values[index++]));\n            if (index < values.length) {\n                position.setAltitude(Integer.parseInt(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            position.setNetwork(new Network(CellTower.from(\n                    Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                    Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                    Integer.parseInt(values[index++]))));\n            break;\n        case \"COT\":\n            if (index < values.length) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n            }\n            if (index < values.length) {\n                String[] hours = values[index].split(\"-\");\n                position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600\n                        + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)\n                        + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);\n            }\n            break;\n        case \"ADC\":\n            position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            if (index < values.length) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"DTT\":\n            position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n            if (!values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index++]);\n            }\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}