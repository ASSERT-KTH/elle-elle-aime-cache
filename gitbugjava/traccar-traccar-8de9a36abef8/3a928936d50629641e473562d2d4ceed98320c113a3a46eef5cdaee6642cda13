{
    "generation": "\nprivate void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n\n    int index = 0;\n\n    String[] values;\n\n    if (fragment.length() == dataIndex + 1) {\n\n        values = new String[0];\n\n    } else {\n\n        values = fragment.substring(dataIndex + 1).split(\";\");\n\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n\n        case \"GPS\":\n\n            position.setValid(\"A\".equals(values[index++]));\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n\n            } else {\n\n                index++;\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n\n                if (values[index++].charAt(0) == 'S') {\n\n                    position.setLatitude(-position.getLatitude());\n\n                }\n\n            } else {\n\n                index += 2; // Skip latitude and its hemisphere\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n\n                if (values[index++].charAt(0) == 'W') {\n\n                    position.setLongitude(-position.getLongitude());\n\n                }\n\n            } else {\n\n                index += 2; // Skip longitude and its hemisphere\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n\n                index++;\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.setCourse(Integer.parseInt(values[index++]));\n\n            } else {\n\n                index++;\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.setAltitude(Integer.parseInt(values[index++]));\n\n            } else {\n\n                index++;\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n\n            } else {\n\n                index++;\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n\n            } else {\n\n                index++;\n\n            }\n\n            break;\n\n        case \"GSM\":\n\n            index += 1; // registration status\n\n            index += 1; // signal strength\n\n            if (index + 5 <= values.length) {\n\n                position.setNetwork(new Network(CellTower.from(\n\n                        Integer.parseInt(values[index++]),\n\n                        Integer.parseInt(values[index++]),\n\n                        Integer.parseInt(values[index++], 16),\n\n                        Integer.parseInt(values[index++], 16),\n\n                        Integer.parseInt(values[index++])\n\n                )));\n\n            } else {\n\n                index += 5;\n\n            }\n\n            break;\n\n        case \"COT\":\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n\n            } else {\n\n                index++;\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                String[] hours = values[index].split(\"-\");\n\n                position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600\n\n                        + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)\n\n                        + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);\n\n            }\n\n            break;\n\n        case \"ADC\":\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n\n            } else {\n\n                index++;\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n\n            } else {\n\n                index++;\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n\n            } else {\n\n                index++;\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n\n            } else {\n\n                index++;\n\n            }\n\n            break;\n\n        case \"DTT\":\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n\n            } else {\n\n                index++;\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                int io = Integer.parseInt(values[index], 16);\n\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n\n            } else {\n\n                index += 2;\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(\"eventStatus\", values[index++]);\n\n            } else {\n\n                index++;\n\n            }\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(\"packetType\", values[index++]);\n\n            } else {\n\n                index++;\n\n            }\n\n            break;\n\n        case \"ETD\":\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(\"eventData\", values[index++]);\n\n            } else {\n\n                index++;\n\n            }\n\n            break;\n\n        case \"OBD\":\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(\"obd\", values[index++]);\n\n            } else {\n\n                index++;\n\n            }\n\n            break;\n\n        case \"TAG\":\n\n            if (index < values.length && !values[index].isEmpty()) {\n\n                position.set(\"tagData\", values[index++]);\n\n            } else {\n\n                index++;\n\n            }\n\n            break;\n\n        case \"IWD\":\n\n            while (index < values.length) {\n\n                int sensorIndex = Integer.parseInt(values[index++]);\n\n                int dataType = Integer.parseInt(values[index++]);\n\n                if (dataType == 0) {\n\n                    if (index < values.length && !values[index].isEmpty()) {\n\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n\n                    } else {\n\n                        index++;\n\n                    }\n\n                } else if (dataType == 1) {\n\n                    if (index < values.length && !values[index].isEmpty()) {\n\n                        index += 1; // temperature sensor serial number\n\n                        if (index < values.length && !values[index].isEmpty()) {\n\n                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n\n                        } else {\n\n                            index++;\n\n                        }\n\n                    } else {\n\n                        index += 2;\n\n                    }\n\n                }\n\n            }\n\n            break;\n\n        default:\n\n            break;\n\n    }\n\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}