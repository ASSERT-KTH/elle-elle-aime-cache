{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            if (!values[index].isEmpty()) {\n                position.setValid(values[index].equals(\"A\"));\n            }\n            index++;\n            Integer satellites = parseInteger(values[index]);\n            if (satellites != null) {\n                position.set(Position.KEY_SATELLITES, satellites);\n            }\n            index++;\n            String latStr = values[index];\n            if (!latStr.isEmpty()) {\n                double latitude = Double.parseDouble(latStr.substring(1));\n                position.setLatitude(latitude);\n                if (latStr.charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            }\n            index++;\n            String lonStr = values[index];\n            if (!lonStr.isEmpty()) {\n                double longitude = Double.parseDouble(lonStr.substring(1));\n                position.setLongitude(longitude);\n                if (lonStr.charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n                if (!values[index].isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(parseInteger(values[index])));\n                }\n                index++;\n                Integer course = parseInteger(values[index]);\n                if (course != null) {\n                    position.setCourse(course);\n                }\n                index++;\n                if (index < values.length) {\n                    Integer altitude = parseInteger(values[index]);\n                    if (altitude != null) {\n                        position.setAltitude(altitude);\n                    }\n                    index++;\n                }\n                if (index < values.length) {\n                    Double hdop = parseDouble(values[index]);\n                    if (hdop != null) {\n                        position.set(Position.KEY_HDOP, hdop);\n                    }\n                    index++;\n                }\n                if (index < values.length) {\n                    Double vdop = parseDouble(values[index]);\n                    if (vdop != null) {\n                        position.set(Position.KEY_VDOP, vdop);\n                    }\n                    index++;\n                }\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            Integer mcc = parseInteger(values[index++]);\n            Integer mnc = parseInteger(values[index++]);\n            Integer lac = parseInteger(values[index++], 16);\n            Integer cellId = parseInteger(values[index++], 16);\n            Integer signal = parseInteger(values[index++]);\n            if (mcc != null && mnc != null && lac != null && cellId != null && signal != null) {\n                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cellId, signal)));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, parseLong(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                if (hours.length > 0) {\n                    int hourParts = Integer.parseInt(hours[0]);\n                    int minute = hours.length > 1 ? Integer.parseInt(hours[1]) : 0;\n                    int second = hours.length > 2 ? Integer.parseInt(hours[2]) : 0;\n                    position.set(Position.KEY_HOURS, (hourParts * 3600 + minute * 60 + second) * 1000);\n                }\n                index++;\n            }\n            break;\n        case \"ADC\":\n            Double power = parseDouble(values[index]);\n            if (power != null) {\n                position.set(Position.KEY_POWER, power);\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                Double battery = parseDouble(values[index]);\n                if (battery != null) {\n                    position.set(Position.KEY_BATTERY, battery);\n                }\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                Double adc1 = parseDouble(values[index]);\n                if (adc1 != null) {\n                    position.set(Position.PREFIX_ADC + 1, adc1);\n                }\n                index++;\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                Double adc2 = parseDouble(values[index]);\n                if (adc2 != null) {\n                    position.set(Position.PREFIX_ADC + 2, adc2);\n                }\n                index++;\n            }\n            break;\n        case \"DTT\":\n            Integer status = parseInteger(values[index]);\n            if (status != null) {\n                position.set(Position.KEY_STATUS, status);\n            }\n            index++;\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                index++;\n            }\n            if (index < values.length) {\n                position.set(Position.KEY_GEOFENCE, values[index] + values[index + 1]);\n                index += 2;\n            }\n            if (index < values.length) {\n                position.set(\"eventStatus\", values[index++]);\n            }\n            if (index < values.length) {\n                position.set(\"packetType\", values[index++]);\n            }\n            break;\n        case \"ETD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventData\", values[index++]);\n            }\n            break;\n        case \"OBD\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"obd\", values[index++]);\n            }\n            break;\n        case \"TAG\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"tagData\", values[index++]);\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                Integer sensorIndex = parseInteger(values[index++]);\n                Integer dataType = parseInteger(values[index++]);\n                if (sensorIndex != null && dataType != null) {\n                    if (dataType == 0) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else if (dataType == 1) {\n                        index += 1; // temperature sensor serial number\n                        Double temp = parseDouble(values[index++]);\n                        if (temp != null) {\n                            position.set(Position.PREFIX_TEMP + sensorIndex, temp);\n                        }\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}\n\nprivate Integer parseInteger(String value) {\n    return value.isEmpty() ? null : Integer.parseInt(value);\n}\n\nprivate Integer parseInteger(String value, int radix) {\n    return value.isEmpty() ? null : Integer.parseInt(value, radix);\n}\n\nprivate Double parseDouble(String value) {\n    return value.isEmpty() ? null : Double.parseDouble(value);\n}\n\nprivate Long parseLong(String value) {\n    return value.isEmpty() ? null : Long.parseLong(value);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}