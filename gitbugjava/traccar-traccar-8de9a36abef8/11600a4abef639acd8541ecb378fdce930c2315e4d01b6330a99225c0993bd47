{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            if (index < values.length) position.setValid(values[index++].equals(\"A\"));\n            if (index < values.length) position.set(Position.KEY_SATELLITES, parseInt(values[index++]));\n            if (index < values.length) position.setLatitude(parseLatitude(values[index++]));\n            if (index < values.length) position.setLongitude(parseLongitude(values[index++]));\n            if (index < values.length) position.setSpeed(parseSpeed(values[index++]));\n            if (index < values.length) position.setCourse(parseInt(values[index++]));\n            if (index < values.length) position.setAltitude(parseInt(values[index++]));\n            if (index < values.length) position.set(Position.KEY_HDOP, parseDouble(values[index++]));\n            if (index < values.length) position.set(Position.KEY_VDOP, parseDouble(values[index++]));\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (index < values.length) position.setNetwork(new Network(CellTower.from(\n                    parseInt(values[index++]), parseInt(values[index++]),\n                    parseInt(values[index++], 16), parseInt(values[index++], 16),\n                    parseInt(values[index++]))));\n            break;\n        case \"COT\":\n            if (index < values.length) position.set(Position.KEY_ODOMETER, parseLong(values[index++]));\n            if (index < values.length) position.set(Position.KEY_HOURS, parseHours(values[index++]));\n            break;\n        case \"ADC\":\n            if (index < values.length) position.set(Position.KEY_POWER, parseDouble(values[index++]));\n            if (index < values.length) position.set(Position.KEY_BATTERY, parseDouble(values[index++]));\n            if (index < values.length) position.set(Position.PREFIX_ADC + 1, parseDouble(values[index++]));\n            if (index < values.length) position.set(Position.PREFIX_ADC + 2, parseDouble(values[index++]));\n            break;\n        case \"DTT\":\n            if (index < values.length) position.set(Position.KEY_STATUS, parseInt(values[index++], 16));\n            if (index < values.length) {\n                int io = parseInt(values[index++], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n            }\n            if (index < values.length) position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n            if (index < values.length) position.set(\"eventStatus\", values[index++]);\n            if (index < values.length) position.set(\"packetType\", values[index++]);\n            break;\n        case \"ETD\":\n            if (index < values.length) position.set(\"eventData\", values[index++]);\n            break;\n        case \"OBD\":\n            if (index < values.length) position.set(\"obd\", values[index++]);\n            break;\n        case \"TAG\":\n            if (index < values.length) position.set(\"tagData\", values[index++]);\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                int sensorIndex = parseInt(values[index++]);\n                int dataType = parseInt(values[index++]);\n                if (dataType == 0) {\n                    if (index < values.length) position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                } else if (dataType == 1) {\n                    index += 1; // temperature sensor serial number\n                    if (index < values.length) position.set(Position.PREFIX_TEMP + sensorIndex, parseDouble(values[index++]));\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}\n\nprivate int parseInt(String s) {\n    return s.isEmpty() ? 0 : Integer.parseInt(s);\n}\n\nprivate long parseLong(String s) {\n    return s.isEmpty() ? 0 : Long.parseLong(s);\n}\n\nprivate double parseDouble(String s) {\n    return s.isEmpty() ? 0.0 : Double.parseDouble(s);\n}\n\nprivate double parseLatitude(String s) {\n    if (s.isEmpty() || s.length() < 2) return 0.0;\n    double latitude = Double.parseDouble(s.substring(1));\n    if (s.charAt(0) == 'S') latitude = -latitude;\n    return latitude;\n}\n\nprivate double parseLongitude(String s) {\n    if (s.isEmpty() || s.length() < 2) return 0.0;\n    double longitude = Double.parseDouble(s.substring(1));\n    if (s.charAt(0) == 'W') longitude = -longitude;\n    return longitude;\n}\n\nprivate double parseSpeed(String s) {\n    return s.isEmpty() ? 0.0 : UnitsConverter.knotsFromKph(Integer.parseInt(s));\n}\n\nprivate long parseHours(String s) {\n    String[] hours = s.split(\"-\");\n    long totalSeconds = 0;\n    if (hours.length > 0) totalSeconds += Integer.parseInt(hours[0]) * 3600;\n    if (hours.length > 1) totalSeconds += Integer.parseInt(hours[1]) * 60;\n    if (hours.length > 2) totalSeconds += Integer.parseInt(hours[2]);\n    return totalSeconds * 1000;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}