{
    "generation": "private void decodeFragment(Position position, String fragment) {\n\n    int dataIndex = fragment.indexOf(':');\n    int index = 0;\n    String[] values;\n    if (fragment.length() == dataIndex + 1) {\n        values = new String[0];\n    } else {\n        values = fragment.substring(dataIndex + 1).split(\";\");\n    }\n\n    switch (fragment.substring(0, dataIndex)) {\n        case \"GPS\":\n            position.setValid(values[index++].equals(\"A\"));\n            if (!values[index].isEmpty()) {\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            } else {\n                index++; // skip empty value\n            }\n            if (!values[index].isEmpty()) {\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n            } else {\n                index += 2; // skip latitude and hemisphere\n            }\n            if (!values[index].isEmpty()) {\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n            } else {\n                index += 2; // skip longitude and hemisphere\n            }\n            if (!values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));\n                index++; // move to next value\n            } else {\n                index++; // skip speed\n            }\n            if (!values[index].isEmpty()) {\n                position.setCourse(Integer.parseInt(values[index++]));\n            } else {\n                index++; // skip course\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.setAltitude(Integer.parseInt(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n            }\n            break;\n        case \"GSM\":\n            index += 1; // registration status\n            index += 1; // signal strength\n            if (index + 5 <= values.length) {\n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++])\n                )));\n            }\n            break;\n        case \"COT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n            } else {\n                index++; // skip odometer\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                String[] hours = values[index].split(\"-\");\n                int h = Integer.parseInt(hours[0]);\n                int m = hours.length > 1 ? Integer.parseInt(hours[1]) : 0;\n                int s = hours.length > 2 ? Integer.parseInt(hours[2]) : 0;\n                position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);\n                index++; // move to next value\n            } else {\n                index++; // skip hours\n            }\n            break;\n        case \"ADC\":\n            if (!values[index].isEmpty()) {\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n            } else {\n                index++; // skip power\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n            } else {\n                index++; // skip battery\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n            } else {\n                index++; // skip ADC1\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n            } else {\n                index++; // skip ADC2\n            }\n            break;\n        case \"DTT\":\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n            } else {\n                index++; // skip status\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                int io = Integer.parseInt(values[index], 16);\n                position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                index++; // move to next value\n            } else {\n                index++; // skip IO\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n            } else {\n                index += 2; // skip geofence\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"eventStatus\", values[index++]);\n            } else {\n                index++; // skip event status\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                position.set(\"packetType\", values[index++]);\n            } else {\n                index++; // skip packet type\n            }\n            break;\n        case \"ETD\":\n            if (!values[index].isEmpty()) {\n                position.set(\"eventData\", values[index++]);\n            } else {\n                index++; // skip event data\n            }\n            break;\n        case \"OBD\":\n            if (!values[index].isEmpty()) {\n                position.set(\"obd\", values[index++]);\n            } else {\n                index++; // skip OBD data\n            }\n            break;\n        case \"TAG\":\n            if (!values[index].isEmpty()) {\n                position.set(\"tagData\", values[index++]);\n            } else {\n                index++; // skip tag data\n            }\n            break;\n        case \"IWD\":\n            while (index < values.length) {\n                String sensorIndexStr = values[index++];\n                String dataTypeStr = values[index++];\n                if (sensorIndexStr.isEmpty() || dataTypeStr.isEmpty()) {\n                    continue; // skip this sensor if index or data type is empty\n                }\n                int sensorIndex = Integer.parseInt(sensorIndexStr);\n                int dataType = Integer.parseInt(dataTypeStr);\n                if (dataType == 0) {\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                } else if (dataType == 1) {\n                    index += 1; // temperature sensor serial number\n                    if (!values[index].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                    } else {\n                        index++; // skip temperature value\n                    }\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": true
}