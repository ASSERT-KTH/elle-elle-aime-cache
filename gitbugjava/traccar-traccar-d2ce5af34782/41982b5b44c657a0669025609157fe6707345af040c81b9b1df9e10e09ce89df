{
    "generation": "private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n    int length = buf.readUnsignedByte();\n    int dataLength = length - 5;\n    int type = buf.readUnsignedByte();\n\n    Position position = new Position(getProtocolName());\n    DeviceSession deviceSession = null;\n    if (type != MSG_LOGIN) {\n        deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        position.setDeviceId(deviceSession.getDeviceId());\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n    }\n\n    if (type == MSG_ALARM) {\n\n        boolean extendedAlarm = dataLength > 7;\n        if (extendedAlarm) {\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n        } else {\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n            getLastLocation(position, dateBuilder.getDate());\n        }\n        short alarmType = buf.readUnsignedByte();\n        switch (alarmType) {\n            case 0x01:\n                position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                break;\n            case 0x02:\n                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                break;\n            case 0x03:\n                position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                break;\n            case 0x04:\n                position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                break;\n            case 0x05:\n                position.set(Position.KEY_ALARM, Position.ALARM_MOVEMENT);\n                break;\n            case 0x06:\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                break;\n            case 0x07:\n                position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);\n                break;\n            case 0x08:\n                position.set(Position.KEY_ALARM, Position.ALARM_GEOFENCE);\n                break;\n            case 0x09:\n                position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                break;\n            case 0x0A:\n                position.set(Position.KEY_ALARM, Position.ALARM_DOOR);\n                break;\n            default:\n                position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                break;\n        }\n\n        return position;\n\n    } else if (type == MSG_HEARTBEAT) {\n\n        getLastLocation(position, null);\n\n        int status = buf.readUnsignedByte();\n        position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n        position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n\n        if (buf.readableBytes() >= 2 + 6) {\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n        }\n        if (buf.readableBytes() >= 1 + 6) {\n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        }\n\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n\n        return position;\n\n    } \n\n    // Additional message type handling here or fall through to the default behavior below\n\n    if (dataLength > 0) {\n        buf.skipBytes(dataLength);\n    }\n    if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}