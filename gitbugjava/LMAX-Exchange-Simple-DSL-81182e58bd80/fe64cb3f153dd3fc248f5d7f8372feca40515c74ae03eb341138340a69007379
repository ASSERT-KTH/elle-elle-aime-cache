{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n            processor.consume(groupArg.getIdentity(), arguments);\n\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n\n            final List<Map<DslArg, List<String>>> groupValuesList = new ArrayList<>();\n\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair argument = arguments.peekFirst();\n                if (argument == NameValuePair.NULL)\n                {\n                    arguments.pollFirst();\n                    continue;\n                }\n\n                if (argument.name == null)\n                {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                }\n\n                final DslArg arg = argsByName.get(argument.name.toLowerCase());\n                if (arg == null)\n                {\n                    break;\n                }\n\n                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n                {\n                    groupValuesList.add(new HashMap<>(valuesByArg));\n                    valuesByArg.clear();\n                }\n\n                checkValidValue(arg, argument.value);\n                valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>()).add(argument.value);\n                arguments.pollFirst();\n            }\n\n            if (!valuesByArg.isEmpty())\n            {\n                groupValuesList.add(new HashMap<>(valuesByArg));\n            }\n\n            final Map<String, List<String>> valuesByName = new HashMap<>();\n            for (final Map<DslArg, List<String>> groupValues : groupValuesList)\n            {\n                for (final SimpleDslArg simpleDslArg : argsByName.values())\n                {\n                    final SimpleArgumentProcessor tempProcessor = new SimpleArgumentProcessor(groupValues, \"Did not supply a value for %s in group \" + groupArg.getName());\n                    final SimpleDslParam param = tempProcessor.collect(simpleDslArg);\n                    if (param.hasValue())\n                    {\n                        valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n                    }\n                }\n                final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n                dslArgs[0] = groupArg.getIdentity();\n                System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n                groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, new HashMap<>(valuesByName)));\n                valuesByName.clear();\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}