{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    // Process identity argument separately to allow for repeating groups\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg)!= null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    // Continue processing until we encounter an argument that doesn't belong to the group\n    while (!arguments.isEmpty())\n    {\n        final NameValuePair argument = arguments.peekFirst();\n        if (argument == NameValuePair.NULL)\n        {\n            arguments.pollFirst();\n            continue;\n        }\n\n        if (argument.name == null)\n        {\n            // If we encounter an ambiguous argument, stop processing the group\n            break;\n        }\n\n        final DslArg arg = argsByName.get(argument.name.toLowerCase());\n        if (arg == null)\n        {\n            // If the argument doesn't belong to the group, stop processing\n            break;\n        }\n\n        final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n        if (!argValues.isEmpty() &&!arg.isAllowMultipleValues())\n        {\n            // If the argument doesn't allow multiple values, stop processing it\n            break;\n        }\n\n        checkValidValue(arg, argument.value);\n        argValues.add(argument.value);\n        arguments.pollFirst();\n\n        // If the argument is the group identity, process the other args again\n        if (arg == groupArg.getIdentity())\n        {\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                while (!arguments.isEmpty() && argsByName.get(arguments.peekFirst().name.toLowerCase()) == dslArg)\n                {\n                    final NameValuePair nextArgument = arguments.pollFirst();\n                    final List<String> nextArgValues = valuesByArg.computeIfAbsent(dslArg, k -> new ArrayList<>());\n                    if (!nextArgValues.isEmpty() &&!dslArg.isAllowMultipleValues())\n                    {\n                        break;\n                    }\n\n                    checkValidValue(dslArg, nextArgument.value);\n                    nextArgValues.add(nextArgument.value);\n                }\n            }\n        }\n    }\n\n    // Map values by name for easier consumption\n    final Map<String, List<String>> valuesByName = new HashMap<>();\n    for (final SimpleDslArg simpleDslArg : argsByName.values())\n    {\n        final SimpleDslParam param = processor.collect(simpleDslArg);\n        if (param.hasValue())\n        {\n            valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n        }\n    }\n\n    final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n    dslArgs[0] = groupArg.getIdentity();\n    System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n    groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}