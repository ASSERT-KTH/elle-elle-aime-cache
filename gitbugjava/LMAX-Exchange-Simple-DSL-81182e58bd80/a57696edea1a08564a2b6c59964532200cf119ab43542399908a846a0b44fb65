{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n    dslArgs[0] = groupArg.getIdentity();\n    System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n\n    List<RepeatingParamValues> groupValues = groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>());\n\n    while (true)\n    {\n        // Skip any NULL value pairs\n        while (!arguments.isEmpty() && arguments.peekFirst() == NameValuePair.NULL)\n        {\n            arguments.pollFirst();\n        }\n        if (arguments.isEmpty())\n        {\n            break;\n        }\n\n        final NameValuePair argument = arguments.peekFirst();\n        if (argument.name == null)\n        {\n            throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n        }\n        if (!argument.name.equalsIgnoreCase(groupArg.getIdentity().getName()))\n        {\n            break;\n        }\n\n        // Start processing a group\n        final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n        final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n        processor.consume(groupArg.getIdentity(), arguments);\n\n        while (!arguments.isEmpty())\n        {\n            final NameValuePair arg = arguments.peekFirst();\n            if (arg == NameValuePair.NULL)\n            {\n                arguments.pollFirst();\n                continue;\n            }\n\n            if (arg.name == null)\n            {\n                throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + arg.originalValue);\n            }\n\n            if (arg.name.equalsIgnoreCase(groupArg.getIdentity().getName()))\n            {\n                // Next group starts here\n                break;\n            }\n\n            final DslArg dslArg = argsByName.get(arg.name.toLowerCase());\n            if (dslArg == null)\n            {\n                break;\n            }\n\n            final List<String> argValues = valuesByArg.computeIfAbsent(dslArg, k -> new ArrayList<>());\n            if (!dslArg.isAllowMultipleValues() && !argValues.isEmpty())\n            {\n                break;\n            }\n\n            checkValidValue(dslArg, arg.value);\n            argValues.add(arg.value);\n            arguments.pollFirst();\n        }\n\n        // Collect the processed group parameters\n        final Map<String, List<String>> valuesByName = new HashMap<>();\n        for (final SimpleDslArg simpleDslArg : argsByName.values())\n        {\n            final SimpleDslParam param = processor.collect(simpleDslArg);\n            if (param.hasValue())\n            {\n                valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n            }\n        }\n\n        groupValues.add(new RepeatingParamValues(dslArgs, valuesByName));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}