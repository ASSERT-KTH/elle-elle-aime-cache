{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments) {\n    String identityNameLower = groupArg.getIdentity().getName().toLowerCase();\n\n    while (!arguments.isEmpty()) {\n        // Consume group identity\n        NameValuePair identityArg = arguments.pollFirst();\n        if (!identityArg.name.equalsIgnoreCase(groupArg.getIdentity().getName())) {\n            throw new IllegalArgumentException(\"Expected group identity \" + groupArg.getIdentity().getName() + \" but found \" + identityArg.name);\n        }\n\n        // Collect arguments for this group\n        Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n        SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n        processor.consume(groupArg.getIdentity(), Collections.singletonList(identityArg.value));\n\n        Map<String, SimpleDslArg> argsByName = new HashMap<>();\n        argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n        for (SimpleDslArg dslArg : groupArg.getOtherArgs()) {\n            if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null) {\n                throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n            }\n        }\n\n        while (!arguments.isEmpty()) {\n            NameValuePair argument = arguments.peekFirst();\n            if (argument == NameValuePair.NULL) {\n                arguments.pollFirst();\n                continue;\n            }\n\n            if (argument.name == null) {\n                throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n            }\n\n            if (argument.name.equalsIgnoreCase(identityNameLower)) {\n                // Next group identity found, break and start a new group\n                break;\n            }\n\n            DslArg arg = argsByName.get(argument.name.toLowerCase());\n            if (arg == null) {\n                throw new IllegalArgumentException(\"Unknown argument '\" + argument.name + \"' in group \" + groupArg.getName());\n            }\n\n            List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n            if (!argValues.isEmpty() && !arg.isAllowMultipleValues()) {\n                throw new IllegalArgumentException(\"Multiple values specified for single-value argument '\" + arg.getName() + \"' in group \" + groupArg.getName());\n            }\n\n            checkValidValue(arg, argument.value);\n            argValues.add(argument.value);\n            arguments.pollFirst();\n        }\n\n        // Process the collected values for this group\n        Map<String, List<String>> valuesByName = new HashMap<>();\n        for (SimpleDslArg simpleDslArg : argsByName.values()) {\n            SimpleDslParam param = processor.collect(simpleDslArg);\n            if (param.hasValue()) {\n                valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n            }\n        }\n\n        DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n        dslArgs[0] = groupArg.getIdentity();\n        System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}