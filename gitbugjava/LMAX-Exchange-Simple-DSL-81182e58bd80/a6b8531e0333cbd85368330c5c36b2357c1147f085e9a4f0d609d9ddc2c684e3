{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n            processor.consume(groupArg.getIdentity(), arguments);\n\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair argument = arguments.peekFirst();\n                if (argument == NameValuePair.NULL)\n                {\n                    arguments.pollFirst();\n                    continue;\n                }\n\n                if (argument.name == null)\n                {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                }\n\n                final DslArg arg = argsByName.get(argument.name.toLowerCase());\n                if (arg == null)\n                {\n                    break;\n                }\n\n                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n                {\n                    processor.consume(groupArg.getIdentity(), arguments); // consume identity again for new group entry\n                    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity()); // put identity again, allow overriding for next group entry\n                    valuesByArg.put(groupArg.getIdentity(), new ArrayList<>()); // clear identity values for new group entry\n                    continue; // start processing new group entry with current arg\n                }\n\n\n                checkValidValue(arg, argument.value);\n                argValues.add(argument.value);\n                arguments.pollFirst();\n            }\n\n            final Map<String, List<String>> valuesByName = new HashMap<>();\n            for (final Map.Entry<DslArg, List<String>> entry : valuesByArg.entrySet()) {\n                valuesByName.put(entry.getKey().getName().toLowerCase(), entry.getValue());\n            }\n\n\n            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n            dslArgs[0] = groupArg.getIdentity();\n            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}