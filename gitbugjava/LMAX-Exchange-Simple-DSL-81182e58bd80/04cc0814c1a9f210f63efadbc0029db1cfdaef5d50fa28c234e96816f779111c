{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n            processor.consume(groupArg.getIdentity(), arguments);\n\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n\n            final List<Map<String, List<String>>> collectedGroupValues = new ArrayList<>();\n\n            while (!arguments.isEmpty())\n            {\n                final Map<String, List<String>> currentGroupValues = new HashMap<>();\n                boolean hasGroupIdentity = false;\n\n                final Iterator<NameValuePair> iterator = arguments.iterator();\n                while (iterator.hasNext())\n                {\n                    final NameValuePair argument = iterator.next();\n\n                    if (argument == NameValuePair.NULL)\n                    {\n                        continue;\n                    }\n\n                    if (argument.name == null)\n                    {\n                        throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                    }\n\n                    final DslArg arg = argsByName.get(argument.name.toLowerCase());\n                    if (arg == null)\n                    {\n                        break;\n                    }\n\n                    if (arg == groupArg.getIdentity())\n                    {\n                        if (hasGroupIdentity)\n                        {\n                            // If we encounter another group identity, start new group processing\n                            break;\n                        }\n                        hasGroupIdentity = true;\n                    }\n\n                    final List<String> argValues = currentGroupValues.computeIfAbsent(arg.getName().toLowerCase(), k -> new ArrayList<>());\n                    if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n                    {\n                        break;\n                    }\n\n                    checkValidValue(arg, argument.value);\n                    argValues.add(argument.value);\n                    iterator.remove();\n                }\n\n                if (hasGroupIdentity)\n                {\n                    collectedGroupValues.add(currentGroupValues);\n                }\n                else\n                {\n                    break;\n                }\n            }\n\n            for (Map<String, List<String>> groupValues : collectedGroupValues)\n            {\n                final Map<String, List<String>> valuesByName = new HashMap<>();\n                for (final SimpleDslArg simpleDslArg : argsByName.values())\n                {\n                    final List<String> values = groupValues.get(simpleDslArg.getName().toLowerCase());\n                    if (values != null && !values.isEmpty())\n                    {\n                        valuesByName.put(simpleDslArg.getName().toLowerCase(), values);\n                    }\n                }\n\n                final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n                dslArgs[0] = groupArg.getIdentity();\n                System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n                groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}