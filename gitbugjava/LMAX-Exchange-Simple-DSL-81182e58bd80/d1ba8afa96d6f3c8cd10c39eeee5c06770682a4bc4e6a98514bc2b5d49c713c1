{
    "generation": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n            processor.consume(groupArg.getIdentity(), arguments);\n\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n\n            List<Map<DslArg, List<String>>> groupValues = new ArrayList<>();\n            Map<DslArg, List<String>> currentValues = createEmptyValuesMap(groupArg);\n            groupValues.add(currentValues);\n\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair argument = arguments.peekFirst();\n                if (argument == NameValuePair.NULL)\n                {\n                    arguments.pollFirst();\n                    continue;\n                }\n\n                if (argument.name == null)\n                {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                }\n\n                final DslArg arg = argsByName.get(argument.name.toLowerCase());\n                if (arg == null)\n                {\n                    break;\n                }\n\n                // If it's the identity argument, start a new group\n                if (arg == groupArg.getIdentity())\n                {\n                    if (!currentValues.isEmpty())\n                    {\n                        currentValues = createEmptyValuesMap(groupArg);\n                        groupValues.add(currentValues);\n                    }\n                }\n\n                final List<String> argValues = currentValues.computeIfAbsent(arg, k -> new ArrayList<>());\n                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n                {\n                    break;\n                }\n\n                checkValidValue(arg, argument.value);\n                argValues.add(argument.value);\n                arguments.pollFirst();\n            }\n\n            for (Map<DslArg, List<String>> values : groupValues)\n            {\n                final Map<String, List<String>> valuesByName = new HashMap<>();\n                for (final SimpleDslArg simpleDslArg : argsByName.values())\n                {\n                    final SimpleDslParam param = processor.collect(simpleDslArg, values);\n                    if (param.hasValue())\n                    {\n                        valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n                    }\n                }\n\n                final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n                dslArgs[0] = groupArg.getIdentity();\n                System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n                groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n            }\n        }\n\n        private Map<DslArg, List<String>> createEmptyValuesMap(RepeatingArgGroup groupArg)\n        {\n            Map<DslArg, List<String>> valuesMap = new HashMap<>();\n            valuesMap.put(groupArg.getIdentity(), new ArrayList<>());\n            for (DslArg arg : groupArg.getOtherArgs())\n            {\n                valuesMap.put(arg, new ArrayList<>());\n            }\n            return valuesMap;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}