{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg)!= null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    final List<Map<String, List<String>>> groupValues = new ArrayList<>();\n\n    while (!arguments.isEmpty())\n    {\n        final Map<String, List<String>> currentGroupValues = new HashMap<>();\n        boolean hasGroupValue = false;\n\n        NameValuePair identityValue = null;\n        while (!arguments.isEmpty())\n        {\n            final NameValuePair argument = arguments.peekFirst();\n            if (argument == NameValuePair.NULL)\n            {\n                arguments.pollFirst();\n                continue;\n            }\n\n            final DslArg arg = argsByName.get(argument.name.toLowerCase());\n            if (arg == null)\n            {\n                break;\n            }\n\n            if (arg == groupArg.getIdentity())\n            {\n                identityValue = argument;\n                hasGroupValue = true;\n            }\n            else\n            {\n                checkValidValue(arg, argument.value);\n                currentGroupValues.computeIfAbsent(arg.getName().toLowerCase(), k -> new ArrayList<>()).add(argument.value);\n            }\n\n            arguments.pollFirst();\n        }\n\n        if (hasGroupValue)\n        {\n            checkValidValue(groupArg.getIdentity(), identityValue.value);\n            currentGroupValues.computeIfAbsent(groupArg.getIdentity().getName().toLowerCase(), k -> new ArrayList<>()).add(identityValue.value);\n            groupValues.add(currentGroupValues);\n        }\n    }\n\n    final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n    dslArgs[0] = groupArg.getIdentity();\n    System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n    groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).addAll(groupValues.stream()\n           .map(values -> new RepeatingParamValues(dslArgs, values)).collect(Collectors.toList()));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}