{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n{\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    processor.consume(groupArg.getIdentity(), arguments);\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n    {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg)!= null)\n        {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    final List<List<String>> argValuesList = new ArrayList<>();\n    List<String> argValues = new ArrayList<>();\n\n    while (!arguments.isEmpty())\n    {\n        final NameValuePair argument = arguments.peekFirst();\n        if (argument == NameValuePair.NULL)\n        {\n            arguments.pollFirst();\n            continue;\n        }\n\n        if (argument.name == null)\n        {\n            throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n        }\n\n        final DslArg arg = argsByName.get(argument.name.toLowerCase());\n        if (arg == null)\n        {\n            argValuesList.add(argValues);\n            argValues = new ArrayList<>();\n            continue;\n        }\n\n        if (!arg.isAllowMultipleValues() &&!argValues.isEmpty())\n        {\n            argValuesList.add(argValues);\n            argValues = new ArrayList<>();\n        }\n\n        checkValidValue(arg, argument.value);\n        argValues.add(argument.value);\n        arguments.pollFirst();\n    }\n\n    if (!argValues.isEmpty())\n    {\n        argValuesList.add(argValues);\n    }\n\n    // TODO: this whole thing here is a bit hacky!\n    final Map<String, List<String>> valuesByName;\n    for (List<String> currentArgValues : argValuesList)\n    {\n        valuesByName = new HashMap<>();\n        for (Map.Entry<String, SimpleDslArg> entry : argsByName.entrySet())\n        {\n            int valueIndex = currentArgValues.indexOf(entry.getValue().getName());\n            if (valueIndex!= -1)\n            {\n                List<String> paramValues = new ArrayList<>();\n                paramValues.add(currentArgValues.get(valueIndex + 1));\n                valuesByName.put(entry.getKey(), paramValues);\n            }\n        }\n\n        final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n        dslArgs[0] = groupArg.getIdentity();\n        System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}