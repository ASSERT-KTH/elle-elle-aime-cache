{
    "generation": "void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments) {\n    final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n\n    final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n    argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n    for (SimpleDslArg dslArg : groupArg.getOtherArgs()) {\n        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null) {\n            throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n        }\n    }\n\n    List<Map<DslArg, List<String>>> groupInstances = new ArrayList<>();\n\n    boolean processingGroup = false;\n    Map<DslArg, List<String>> currentGroupValues = null;\n\n    while (!arguments.isEmpty()) {\n        final NameValuePair argument = arguments.peekFirst();\n        if (argument == NameValuePair.NULL) {\n            arguments.pollFirst();\n            continue;\n        }\n\n        if (argument.name == null) {\n            throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n        }\n\n        final DslArg arg = argsByName.get(argument.name.toLowerCase());\n\n        if (arg == groupArg.getIdentity()) {\n            if (processingGroup) {\n                // Collect the previous group\n                groupInstances.add(currentGroupValues);\n                // Start a new group\n                currentGroupValues = new HashMap<>();\n            } else {\n                // Start processing group arguments\n                processingGroup = true;\n                currentGroupValues = new HashMap<>();\n            }\n            // Consume the group identity argument\n            processor.consume(groupArg.getIdentity(), arguments);\n            continue;\n        }\n\n        if (processingGroup) {\n            if (arg != null) {\n                List<String> argValues = currentGroupValues.computeIfAbsent(arg, k -> new ArrayList<>());\n                if (!arg.isAllowMultipleValues() && !argValues.isEmpty()) {\n                    throw new IllegalArgumentException(\"Multiple values provided for single-value argument '\" + arg.getName() + \"'\");\n                }\n                checkValidValue(arg, argument.value);\n                argValues.add(argument.value);\n                arguments.pollFirst();\n                continue;\n            } else {\n                // Argument does not belong to the current group, collect the current group\n                groupInstances.add(currentGroupValues);\n                processingGroup = false;\n                currentGroupValues = null;\n                // This argument will be handled in the next iteration possibly as a non-group argument\n            }\n        }\n\n        // Handle non-group argument\n        processor.consume(arg, arguments);\n    }\n\n    if (processingGroup) {\n        // Collect the last group\n        groupInstances.add(currentGroupValues);\n    }\n\n    for (Map<DslArg, List<String>> groupInstance : groupInstances) {\n        final Map<String, List<String>> valuesByName = new HashMap<>();\n        for (Map.Entry<DslArg, List<String>> entry : groupInstance.entrySet()) {\n            SimpleDslParam param = new SimpleDslParam(entry.getKey().getName(), entry.getValue());\n            if (param.hasValue()) {\n                valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n            }\n        }\n        final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n        dslArgs[0] = groupArg.getIdentity();\n        System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": null,
    "test": false
}